     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 29/02/2024 - Retro DOS v4.1 ((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9AC75                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [E160]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [3E16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [4716]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [F916]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [1417]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [1A17]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [8815]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [B415]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [6213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [BB13]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [C713]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [2E17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [3817]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [860F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [6D0E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [071E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [D717]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [F61E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [3C1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [7D17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [5E1C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [621C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [E61E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [4318]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5706]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [680E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [5D0E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [150F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [170F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5706]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5706]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [560F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5706]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [661C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [6A1C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [8F17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [6517]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [8E0E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [9310]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [5A1C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [561C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [0A0F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [630A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [800A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [9F0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [B00A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [4E0C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [4A0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [250C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [8560]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [580F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [400F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [7F0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [270E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [BB0E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [550C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [C221]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [0E21]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [4921]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [A36E]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [CC6D]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [FD65]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [0E67]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [7467]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [F36E]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [7967]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [B06E]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [2322]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [2E68]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [4C68]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [AA20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [7861]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [F262]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [CE62]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [5F5A]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [BD60]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [555A]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [F41F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [4820]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [4C0F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [BB0F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [490C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [8210]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [196F]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [E067]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [2763]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [CF0E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [A46F]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [8C6F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [8571]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [0D64]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [1669]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [7B68]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [676D]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5706]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [EF0E]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [D80C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [D50D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [4A66]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [3066]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [8511]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [3066]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5706]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [3A70]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [1407]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3909]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [B02E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [B00E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [3309]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [904F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [4916]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [6252]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [DF57]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [A52F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [A459]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [3972]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [FC2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [E62B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [EB0A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [F111]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [D857]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [F111]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [BE11]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [D611]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [3B4F]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [1C58]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [7B59]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [7865]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [DB69]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [8669]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [8C6D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [8C0B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [1B0C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [820B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [9C11]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [C968]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [4565]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [676D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7E06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [DE40]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [F111]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [E411]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [9312]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [FD65]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [9912]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [0E67]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [5512]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [D612]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [C512]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [F312]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [F712]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5706]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[F711]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8BA4B                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E82255                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8980D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8AA0D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E83331                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E86633                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E8110D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E89203                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E8200D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E8F035                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E8C830                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL, 1		; No increment; need carry flag
  4981 00000600 7216                    	JC	SHORT SKIPGET
  4982 00000602 E88163                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985 00000607 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4986 00000609 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4987 0000060C 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4988 0000060E F9                      	STC				;DCR.			;AN000;
  4989 0000060F A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4990 00000612 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4991                                  SKIPGET:
  4992 00000618 58                      	POP	AX
  4993 00000619 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4994                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4995                                  	;jnc	short getbp_t
  4996                                  	;retn
  4997                                  getbp_t:
  4998 0000061B C42E[A205]              	LES	BP,[THISCDS]
  4999                                  	; 15/12/2022
  5000 0000061F 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5001                                  	; 07/12/2022
  5002                                  	;TEST	WORD [ES:BP+43H],8000H
  5003                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5004 00000624 7408                    	JZ	SHORT GETBP_CDS
  5005 00000626 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5006 0000062C F9                      	STC
  5007                                  GETBP_RETN:
  5008 0000062D C3                      	RETN
  5009                                  
  5010                                  GETBP_CDS:
  5011                                  	;LES	BP,[ES:BP+45H]
  5012 0000062E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5013                                  GOTDPB:
  5014                                  	; Load THISDPB from ES:BP
  5015 00000632 892E[8A05]              	MOV	[THISDPB],BP
  5016 00000636 8C06[8C05]              	MOV	[THISDPB+2],ES
  5017 0000063A C3                      	RETN
  5018                                  
  5019                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5020                                  
  5021                                  ;----------------------------------------------------------------------------
  5022                                  ;
  5023                                  ; Procedure Name : SYS_RETURN
  5024                                  ;
  5025                                  ; These are the general system call exit mechanisms. All internal system
  5026                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5027                                  ; is to set the user's flags and set his AX register for return.
  5028                                  ;
  5029                                  ;----------------------------------------------------------------------------
  5030                                  
  5031                                          ;procedure   SYS_RETURN,NEAR
  5032                                  SYS_RETURN:        
  5033                                          ;entry	SYS_RET_OK
  5034                                  SYS_RET_OK:   
  5035 0000063B E847FE                  	call    Get_User_Stack
  5036                                  		; turn off user's carry flag
  5037                                  SYS_RET_OK_clc: ; 25/06/2019 
  5038                                          ;;and	word [SI+16h],0FFFEh 
  5039                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5040                                          ; 25/06/2019
  5041 0000063E 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5042 00000642 EB10                    	JMP     SHORT DO_RET
  5043                                  
  5044                                          ;entry   SYS_RET_ERR
  5045                                  SYS_RET_ERR:        
  5046 00000644 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5047 00000646 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5048 00000649 E81A00                  	CALL	ErrorMap
  5049                                  
  5050                                  	;entry	From_GetSet
  5051                                  From_GetSet:
  5052 0000064C E836FE                          call    Get_User_Stack
  5053                                  		 ; signal carry to user
  5054                                  	;;or	word [SI+16h],1
  5055                                  	;OR	word [SI+user_env.user_F],f_Carry
  5056                                  	; 25/06/2019
  5057 0000064F 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5058 00000653 F9                      	STC			; also, signal internal error
  5059                                  DO_RET:
  5060                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5061 00000654 8904                    	MOV	[SI],AX
  5062 00000656 C3                      	RETN
  5063                                  
  5064                                  	;entry	FCB_RET_OK
  5065                                  FCB_RET_OK:
  5066                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5067                                  NO_OP:
  5068 00000657 30C0                    	XOR	AL,AL
  5069 00000659 C3                      	retn
  5070                                  
  5071                                  	;entry	FCB_RET_ERR
  5072                                  FCB_RET_ERR:
  5073 0000065A 30E4                    	XOR	AH,AH
  5074 0000065C 36A3[2403]              	mov	[ss:EXTERR],AX
  5075 00000660 E80300                  	CALL	ErrorMap
  5076 00000663 B0FF                    	MOV	AL,-1
  5077 00000665 C3                      	retn
  5078                                  
  5079                                  	;entry	ErrorMap
  5080                                  ErrorMap:
  5081 00000666 56                      	PUSH	SI
  5082                                  				; ERR_TABLE_21 is now in DOSDATA
  5083 00000667 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5084                                  				; SS override for FAILERR and EXTERR
  5085 0000066A 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5086 00000670 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5087                                  		 ; Ooops, this is the REAL reason
  5088                                  	;mov	word [SS:EXTERR],53h
  5089 00000672 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5090                                  EXTENDED_NORMAL:
  5091 00000679 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5092 0000067C 5E                      	POP	SI
  5093 0000067D C3                      	retn
  5094                                  
  5095                                  	;EndProc SYS_RETURN
  5096                                  
  5097                                  ;---------------------------------------------------------------------------
  5098                                  ;
  5099                                  ; Procedure Name : CAL_LK
  5100                                  ;
  5101                                  ; Inputs:
  5102                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5103                                  ;		(DS NEED not be DOSDATA)
  5104                                  ;	[EXTERR] is set with error
  5105                                  ; Function:
  5106                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5107                                  ; Outputs:
  5108                                  ;	[EXTERR_CLASS] set
  5109                                  ;	[EXTERR_ACTION] set
  5110                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5111                                  ; Destroys SI, FLAGS
  5112                                  ;
  5113                                  ;---------------------------------------------------------------------------
  5114                                  
  5115                                  	;procedure CAL_LK,NEAR
  5116                                  CAL_LK:
  5117 0000067E 1E                      	PUSH	DS
  5118 0000067F 50                      	PUSH	AX
  5119 00000680 53                      	PUSH	BX
  5120                                  
  5121                                  ;M048	Context DS		; DS:SI -> Table
  5122                                  ;
  5123                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5124                                  ; is DOSDATA
  5125                                  
  5126                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5127                                  	; 15/05/2019 - Retro DOS v4.0
  5128 00000681 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5129                                  
  5130                                  	; 18/07/2018
  5131                                  	;push	ss
  5132                                  	;pop	ds
  5133                                  
  5134 00000686 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5135                                  TABLK1:
  5136 0000068A AC                      	LODSB
  5137                                  
  5138 0000068B 3CFF                    	CMP	AL,0FFH
  5139 0000068D 7409                    	JZ	short GOT_VALS	; End of table
  5140 0000068F 38D8                    	CMP	AL,BL
  5141 00000691 7405                    	JZ	short GOT_VALS	; Got entry
  5142 00000693 83C603                  	ADD	SI,3		; Next table entry
  5143                                  	; 15/08/2018
  5144 00000696 EBF2                    	JMP	short TABLK1
  5145                                  
  5146                                  GOT_VALS:
  5147 00000698 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5148                                  
  5149 00000699 80FCFF                  	CMP	AH,0FFH
  5150 0000069C 7404                    	JZ	short NO_SET_ACT
  5151 0000069E 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5152                                  NO_SET_ACT:
  5153 000006A2 3CFF                    	CMP	AL,0FFH
  5154 000006A4 7403                    	JZ	short NO_SET_CLS
  5155 000006A6 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5156                                  NO_SET_CLS:
  5157 000006A9 AC                      	LODSB			; Get LOCUS
  5158                                  
  5159 000006AA 3CFF                    	CMP	AL,0FFH
  5160 000006AC 7403                    	JZ	short NO_SET_LOC
  5161 000006AE A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5162                                  NO_SET_LOC:
  5163 000006B1 5B                      	POP	BX
  5164 000006B2 58                      	POP	AX
  5165 000006B3 1F                      	POP	DS
  5166 000006B4 C3                      	retn
  5167                                  
  5168                                  	;EndProc CAL_LK
  5169                                  
  5170                                  ;---------------------------------------------------------------------------
  5171                                  ;
  5172                                  ; Procedure Name : ETAB_LK
  5173                                  ;
  5174                                  ; Inputs:
  5175                                  ;	AX is error code
  5176                                  ;	[USER_IN_AX] has AH value of system call involved
  5177                                  ; Function:
  5178                                  ;	Make sure error code is appropriate to this call.
  5179                                  ; Outputs:
  5180                                  ;	AX MAY be mapped error code
  5181                                  ;	[EXTERR] = Input AX
  5182                                  ; Destroys ONLY AX and FLAGS
  5183                                  ;
  5184                                  ;---------------------------------------------------------------------------
  5185                                  
  5186                                  	;procedure ETAB_LK,NEAR
  5187                                  
  5188                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5189 000006B5 1E                      	PUSH	DS
  5190 000006B6 56                      	PUSH	SI
  5191 000006B7 51                      	PUSH	CX
  5192 000006B8 53                      	PUSH	BX
  5193                                  
  5194                                  	;Context DS			; SS is DOSDATA
  5195                                  
  5196 000006B9 16                      	push	ss
  5197 000006BA 1F                      	pop	ds
  5198                                  
  5199 000006BB A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5200                                  
  5201                                  					; I21_MAP_E_TAB is now in DOSCODE
  5202 000006BE BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5203 000006C1 88C7                    	MOV	BH,AL			; Real code to BH
  5204 000006C3 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5205                                  TABLK2:
  5206                                  	; 15/05/2019 - Retro DOS v4.0
  5207 000006C7 2E                      	cs
  5208 000006C8 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5209                                  	
  5210                                  	; 18/07/2018 - Retro DOS v3.0
  5211                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5212                                  
  5213 000006C9 3CFF                    	CMP	AL,0FFH 		; End of table?
  5214 000006CB 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5215 000006CD 38D8                    	CMP	AL,BL			; Found call?
  5216 000006CF 740C                    	JZ	short GOT_CALL		; Yes
  5217 000006D1 86E0                    	XCHG	AH,AL			; Count to AL
  5218 000006D3 30E4                    	XOR	AH,AH			; Make word for add
  5219 000006D5 01C6                    	ADD	SI,AX			; Next table entry
  5220 000006D7 EBEE                    	JMP	short TABLK2
  5221                                  
  5222                                  NOT_IN_TABLE:
  5223 000006D9 88F8                    	MOV	AL,BH			; Restore original code
  5224 000006DB EB0C                    	JMP	SHORT NO_MAP
  5225                                  
  5226                                  GOT_CALL:
  5227 000006DD 88E1                    	MOV	CL,AH
  5228 000006DF 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5229                                  CHECK_CODE:
  5230                                  	; 15/05/2019 - Retro DOS v4.0
  5231 000006E1 2E                      	cs
  5232 000006E2 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5233                                  
  5234                                  	; 18/07/2018
  5235                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5236                                  
  5237 000006E3 38F8                    	CMP	AL,BH			; Code OK?
  5238 000006E5 7402                    	JZ	short NO_MAP		; Yes
  5239 000006E7 E2F8                    	LOOP	CHECK_CODE
  5240                                  NO_MAP:
  5241 000006E9 30E4                    	XOR	AH,AH			; AX is now valid code
  5242 000006EB 5B                      	POP	BX
  5243 000006EC 59                      	POP	CX
  5244 000006ED 5E                      	POP	SI
  5245 000006EE 1F                      	POP	DS
  5246 000006EF C3                      	retn
  5247                                  
  5248                                  	;EndProc ETAB_LK
  5249                                  
  5250                                  ; 18/07/2018 - Retro DOS v3.0
  5251                                  ;---------------------------------------------------------------------------
  5252                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5253                                  
  5254                                  ;IF installed ; (*)
  5255                                  
  5256                                  ;---------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : SetBad
  5259                                  ;
  5260                                  ; SetBad sets up info for bad functions
  5261                                  ;
  5262                                  ;---------------------------------------------------------------------------
  5263                                  
  5264                                  SetBad:
  5265                                  	;mov	ax,1
  5266 000006F0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5267                                  
  5268                                  	; MSDOS 3.3
  5269                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5270                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5271                                  
  5272                                  ;	set up ds to point to DOSDATA
  5273                                  
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275                                  	; MSDOS 6.0
  5276 000006F3 1E                      	push	ds
  5277                                  
  5278                                  	;getdseg <ds>
  5279 000006F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5280                                  
  5281 000006F9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5282                                  
  5283 000006FE 1F                      	pop	ds	  	;hkn; restore ds
  5284                                  
  5285 000006FF F9                      	STC
  5286 00000700 C3                      	retn
  5287                                  
  5288                                  ;--------------------------------------------------------------------------
  5289                                  ;
  5290                                  ; Procedure Name : BadCall
  5291                                  ;
  5292                                  ; BadCall is the initial routine for bad function calls
  5293                                  ;
  5294                                  ;--------------------------------------------------------------------------
  5295                                  
  5296                                  BadCall:
  5297 00000701 E8ECFF                  	call	SetBad
  5298 00000704 CB                      	retf
  5299                                  
  5300                                  ;--------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; OKCall always sets carry to off.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------
  5305                                  
  5306                                  OKCall:
  5307 00000705 F8                      	CLC
  5308 00000706 CB                      	retf
  5309                                  
  5310                                  ;---------------------------------------------------------------------------
  5311                                  ;
  5312                                  ; Procedure Name : INT2F
  5313                                  ;
  5314                                  ; INT 2F handler works as follows:
  5315                                  ;   PUSH    AX
  5316                                  ;   MOV     AX,multiplex:function
  5317                                  ;   INT     2F
  5318                                  ;   POP     ...
  5319                                  ; The handler itself needs to make the AX available for the various routines.
  5320                                  ;
  5321                                  ;----------------------------------------------------------------------------
  5322                                  
  5323                                  ; 15/05/2019 - Retro DOS v4.0
  5324                                  
  5325                                  ;KERNEL_SEGMENT equ 70h
  5326                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5327                                  DOSBIODATASEG equ 70h
  5328                                  
  5329                                  ; retrodos4.s - offset in BIOSDATA
  5330                                  bios_i2f equ 5
  5331                                  
  5332                                  ;PUBLIC	Int2F
  5333                                  ;INT2F	PROC	FAR
  5334                                  
  5335                                  ; 15/05/2019
  5336                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5337                                  
  5338                                  ; 04/11/2022
  5339                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5340                                  
  5341                                  	; 05/01/2024	
  5342                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5343                                  	; 18/07/2018 - Retro DOS v3.0
  5344                                  INT2F:
  5345                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5346                                  INT2FNT:
  5347                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5348 00000707 FB                      	STI
  5349                                  	;cmp	ah,11h
  5350 00000708 80FC11                  	CMP	AH,MultNET
  5351 0000070B 750A                    	JNZ	short INT2FSHR
  5352                                  TestInstall:
  5353 0000070D 08C0                    	OR	AL,AL
  5354 0000070F 7403                    	JZ	short Leave2F
  5355                                  BadFunc:
  5356 00000711 E8DCFF                  	CALL	SetBad
  5357                                  
  5358                                  	;entry	Leave2F
  5359                                  Leave2F:
  5360 00000714 CA0200                  	RETF	2			; long return + clear flags off stack
  5361                                  
  5362                                  INT2FSHR:
  5363                                  	;cmp	ah,10h
  5364 00000717 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5365 0000071A 74F1                    	JZ	short TestInstall	; yes, check for installation
  5366                                  INT2FNLS:
  5367                                  	;cmp	ah,14h
  5368 0000071C 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5369 0000071F 74EC                    	JZ	short TestInstall	; yes check for installation
  5370                                  INT2FDOS:
  5371                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5372                                  
  5373                                  	; 18/07/2018
  5374                                  	; MSDOS 3.3
  5375                                  	;;cmp	ah,12h	
  5376                                  	;CMP	AH,MultDOS
  5377                                  	;jz	short DispatchDOS
  5378                                  	;iret
  5379                                  
  5380                                  	; 15/05/2019
  5381                                  	; MSDOS 6.0
  5382                                  	;cmp	ah,12h	; 07/12/2022
  5383 00000721 80FC12                  	CMP	AH,MultDOS
  5384 00000724 7503                    	JNZ	short check_win		;check if win386 broadcast
  5385 00000726 E9F201                  	jmp	DispatchDOS
  5386                                  
  5387                                  	; .... win386 .... 
  5388                                  
  5389                                  check_win:
  5390                                  	;cmp	ah,16h
  5391 00000729 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5392 0000072C 7408                    	je	short Win386_Msg
  5393                                  
  5394                                  	; M044
  5395                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5396                                  	; of Windows. If so, do special action of going and saving last para
  5397                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5398                                  	; bug
  5399                                  
  5400 0000072E 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5401                                  	;jne	short next_i2f		; no, chain on
  5402                                  	; 15/12/2022
  5403                                  	;jmp	winold_swap		; yes, do desired action
  5404 00000731 7442                    	je	short winold_swap
  5405 00000733 E90501                  	jmp	next_i2f
  5406                                  
  5407                                  	; 15/12/2022
  5408                                  ;next_i2f:
  5409                                  ;	;;;jmp	bios_i2f
  5410                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5411                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5412                                  ;	; 04/11/2022
  5413                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5414                                  
  5415                                  ;	IRET				; This assume that we are at the head
  5416                                  					; of the list
  5417                                  ;INT2F	ENDP
  5418                                  
  5419                                  ; 15/05/2019 - Retro DOS v4.0
  5420                                  
  5421                                  ; We have received a message from Win386. There are three possible
  5422                                  ; messages we could get from Win386:
  5423                                  ;
  5424                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5425                                  ;		  to the Win386 startup info structure.
  5426                                  ; Exit		- for this, we clear the IsWin386 flag.
  5427                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5428                                  ;		  has already been handled. this is indicated by setting
  5429                                  ;		  CX to a non-zero value.
  5430                                  
  5431                                  Win386_Msg:
  5432 00000736 1E                      	push	ds
  5433                                  
  5434                                  	;getdseg <DS>			; ds is DOSDATA
  5435 00000737 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5436                                  
  5437                                  	; For WIN386 2.xx instance data
  5438                                  
  5439 0000073C 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5440 0000073E 7503                    	jne	short Win386_Msg_exit
  5441 00000740 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5442                                  Win386_Msg_exit:
  5443 00000743 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5444 00000745 7503                    	jne	short Win386_Msg_devcall
  5445 00000747 E92C01                  	jmp	Win386_Leaving
  5446                                  Win386_Msg_devcall:
  5447 0000074A 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5448 0000074C 7503                    	jne	short Win386_Msg_init
  5449 0000074E E96001                  	jmp	Win386_Query
  5450                                  Win386_Msg_init:
  5451 00000751 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5452 00000753 7403                    	je	short Win386_Starting
  5453 00000755 E9E200                  	jmp	win_nexti2f		; no, return
  5454                                  Win386_Starting:
  5455                                  	; 17/12/2022
  5456 00000758 F6C201                  	test	dl,1
  5457                                  	;test	dx,1			; is this really win386?
  5458 0000075B 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5459 0000075D E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5460                                  Win386_vchk:
  5461                                  	; M018 -- start of block changes
  5462                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5463                                  	; than 030Ah, we skip the VxD presence check
  5464                                  
  5465                                  ;M067 -- Begin changes
  5466                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5467                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5468                                  ;So, we null out the VxD ptr before the check.
  5469                                  
  5470                                  	;mov	word [Win386_Info+6],0
  5471 00000760 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5472                                  	;mov	word [Win386_Info+8],0
  5473 00000766 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5474                                  
  5475                                  ;M067 -- End changes
  5476                                  
  5477                                  ;ifdef JAPAN
  5478                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5479                                  ;else
  5480 0000076C 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5481                                  ;endif
  5482                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5483 00000770 724E                    	jb	short Win386_vxd
  5484 00000772 E9DD00                  	jmp	noVxD31
  5485                                  
  5486                                  	; 15/12/2022
  5487                                  winold_swap:
  5488 00000775 1E                      	push	ds
  5489 00000776 06                      	push	es
  5490 00000777 56                      	push	si
  5491 00000778 57                      	push	di
  5492 00000779 51                      	push	cx
  5493                                  
  5494                                  	;getdseg <ds>			;ds = DOSDATA
  5495 0000077A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5496                                  
  5497 0000077F 3C01                    	cmp	al,1			;swap Windows out call
  5498 00000781 751B                    	jne	short swapin		;no, check if Swap in call
  5499 00000783 E88801                  	call	getwinlast
  5500 00000786 1E                      	push	ds
  5501 00000787 07                      	pop	es
  5502 00000788 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5503 0000078A 31F6                    	xor	si,si
  5504 0000078C BF[0600]                	mov	di,WinoldPatch1
  5505 0000078F B90800                  	mov	cx,8
  5506 00000792 FC                      	cld
  5507 00000793 51                      	push	cx
  5508 00000794 F3A4                    	rep	movsb			;save first 8 bytes
  5509 00000796 59                      	pop	cx
  5510 00000797 BF[CD0D]                	mov	di,WinoldPatch2
  5511 0000079A F3A4                    	rep	movsb			;save next 8 bytes
  5512 0000079C EB1B                    	jmp	short winold_done
  5513                                  swapin:
  5514 0000079E 3C02                    	cmp	al,2			;swap Windows in call?
  5515 000007A0 7517                    	jne	short winold_done	;no, something else, pass it on
  5516 000007A2 E86901                  	call	getwinlast
  5517 000007A5 8EC6                    	mov	es,si
  5518 000007A7 31FF                    	xor	di,di
  5519 000007A9 BE[0600]                	mov	si,WinoldPatch1
  5520 000007AC B90800                  	mov	cx,8
  5521 000007AF FC                      	cld
  5522 000007B0 51                      	push	cx
  5523 000007B1 F3A4                    	rep	movsb			;restore first 8 bytes
  5524 000007B3 59                      	pop	cx
  5525 000007B4 BE[CD0D]                	mov	si,WinoldPatch2
  5526 000007B7 F3A4                    	rep	movsb			;restore next 8 bytes
  5527                                  winold_done:
  5528 000007B9 59                      	pop	cx
  5529 000007BA 5F                      	pop	di
  5530 000007BB 5E                      	pop	si
  5531 000007BC 07                      	pop	es
  5532 000007BD 1F                      	pop	ds
  5533 000007BE EB7B                    	jmp	short next_i2f		;chain on
  5534                                  	; 15/12/2022
  5535                                  	;jmp	next_i2f	
  5536                                  
  5537                                  Win386_vxd:
  5538 000007C0 50                      	push	ax
  5539 000007C1 53                      	push	bx
  5540 000007C2 51                      	push	cx
  5541 000007C3 52                      	push	dx
  5542 000007C4 56                      	push	si
  5543 000007C5 57                      	push	di			; save regs !!dont change order!!
  5544                                  
  5545 000007C6 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5546 000007CA 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5547 000007CD 741F                    	je	short Vxd31		; N: continue
  5548                                  					; Y: save arena associated with 
  5549                                  					;    umb_head
  5550                                  
  5551 000007CF C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5552                                  					; umb_arena
  5553 000007D4 1E                      	push	ds
  5554 000007D5 06                      	push	es
  5555                                  
  5556                                  	;mov	ax,ds
  5557                                  	;mov	es,ax			; es - > dosdata
  5558                                  	; 05/01/2024
  5559 000007D6 1E                      	push	ds
  5560 000007D7 07                      	pop	es
  5561                                  
  5562 000007D8 8EDB                    	mov	ds,bx
  5563 000007DA 31F6                    	xor	si,si			; ds:si -> umb_head
  5564                                  
  5565 000007DC FC                      	cld
  5566                                  
  5567 000007DD BF[FA11]                	mov	di,UmbSave1
  5568 000007E0 B90B00                  	mov	cx,11
  5569 000007E3 F3A4                    	rep	movsb
  5570                                  
  5571 000007E5 BF[D50D]                	mov	di,UmbSave2
  5572                                  	;mov	cx,5
  5573                                  	; 18/12/2022
  5574 000007E8 B105                    	mov	cl,5
  5575 000007EA F3A4                    	rep	movsb	
  5576                                  
  5577 000007EC 07                      	pop	es
  5578 000007ED 1F                      	pop	ds			; M062 - End
  5579                                  
  5580                                  Vxd31:
  5581                                  	;test	byte [DOS_FLAG],2
  5582 000007EE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5583 000007F3 7408                    	jz	short Dont_Supress		; M066
  5584 000007F5 5F                      	pop	di				; M066
  5585 000007F6 5E                      	pop	si				; M066
  5586 000007F7 5A                      	pop	dx				; M066
  5587 000007F8 59                      	pop	cx				; M066
  5588 000007F9 5B                      	pop	bx				; M066
  5589 000007FA 58                      	pop	ax				; M066
  5590 000007FB EB55                    	jmp	short noVxD31			; M066
  5591                                  
  5592                                  	; We check here if the VxD is available in the root of the boot drive. 
  5593                                  	; We do an extended open to suppress any error messages
  5594                                  	
  5595                                  Dont_Supress:
  5596 000007FD A0[6900]                	mov	al,[BOOTDRIVE]
  5597 00000800 0440                    	add	al,'A' - 1		; get drive letter
  5598 00000802 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5599                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5600                                  	;mov	al,0			; no extended attributes
  5601                                  	; 18/12/2022
  5602 00000805 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5603 00000808 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5604                                  					; no inherit, suppress crit err
  5605 0000080B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5606 0000080E BA0100                  	mov	dx,1			; fail if file does not exist
  5607 00000811 BE[3110]                	mov	si,VxDpath	
  5608                                  					; path of VxD file
  5609 00000814 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5610                                  
  5611 00000817 CD21                    	int	21h			; do extended open
  5612                                  
  5613 00000819 5F                      	pop	di
  5614 0000081A 5E                      	pop	si
  5615 0000081B 5A                      	pop	dx
  5616 0000081C 59                      	pop	cx
  5617                                  
  5618 0000081D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5619                                  
  5620                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5621                                  	; to indicate error to Windows after displaying message to user that 
  5622                                  	; VxD needs to be present to run Windows in enhanced mode.
  5623                                  
  5624 0000081F 52                      	push	dx
  5625 00000820 1E                      	push	ds
  5626 00000821 56                      	push	si
  5627 00000822 BE[B709]                	mov	si,NoVxDErrMsg
  5628 00000825 0E                      	push	cs
  5629 00000826 1F                      	pop	ds
  5630 00000827 B96300                  	mov	cx,VxDMesLen ; 99	;
  5631 0000082A B402                    	mov	ah,2			; write char to console
  5632 0000082C FC                      	cld
  5633                                  vxdlp:
  5634 0000082D AC                      	lodsb
  5635 0000082E 86D0                    	xchg	dl,al			; get char in dl
  5636 00000830 CD21                    	int	21h
  5637 00000832 E2F9                    	loop	vxdlp
  5638                                  
  5639 00000834 5E                      	pop	si
  5640 00000835 1F                      	pop	ds
  5641 00000836 5A                      	pop	dx
  5642 00000837 5B                      	pop	bx
  5643 00000838 58                      	pop	ax			;all registers restored
  5644 00000839 41                      	inc	cx			;cx != 0 to indicate error
  5645                                  	; 15/12/22022
  5646                                  	;jmp	win_nexti2f		;chain on
  5647                                  	;jmp	short win_nexti2f
  5648                                  
  5649                                  	; 15/12/2022
  5650                                  win_nexti2f:
  5651 0000083A 1F                      	pop	ds
  5652                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5653                                  	; 15/12/2022
  5654                                  next_i2f:
  5655                                  	;;;jmp	bios_i2f
  5656                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5657                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5658                                  	; 04/11/2022
  5659 0000083B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5660                                  
  5661                                  VxDthere:
  5662 00000840 89C3                    	mov	bx,ax
  5663 00000842 B43E                    	mov	ah,CLOSE ; 3Eh
  5664 00000844 CD21                    	int	21h			;close the file
  5665                                  
  5666                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5667                                  
  5668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5669                                  	;mov	bx,Win386_Info
  5670                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5671                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5672                                  	; 15/12/2022
  5673 00000846 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5674 0000084C 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5675                                  
  5676 00000850 5B                      	pop	bx
  5677 00000851 58                      	pop	ax
  5678                                  noVxD31:
  5679                                  	; M018; End of block changes
  5680                                  
  5681 00000852 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5682 00000857 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5683                                  
  5684                                  	; M002;
  5685                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5686                                  
  5687 0000085C 52                      	push	dx			; M002
  5688 0000085D 89DA                    	mov	dx,bx			; M002
  5689                                  					; point ES:BX to Win386_Info ; M002
  5690 0000085F BB[E20F]                	mov	bx,Win386_Info 
  5691 00000862 895702                  	mov	[bx+2],dx		; M002
  5692 00000865 8C4704                  	mov	[bx+4],es		; M002
  5693 00000868 5A                      	pop	dx			; M002
  5694 00000869 1E                      	push	ds			; M002
  5695 0000086A 07                      	pop	es			; M002
  5696                                  	;jmp	win_nexti2f		; M002
  5697                                  	; 15/12/2022
  5698 0000086B EBCD                    	jmp	short win_nexti2f
  5699                                  
  5700                                  	; 15/12/2022
  5701                                  	; Code to return Win386 2.xx instance table
  5702                                  OldWin386Init:
  5703 0000086D 58                      	pop	ax			; discard ds pushed on stack
  5704 0000086E BE[CD11]                	mov	si,OldInstanceJunk 
  5705                                  					; ds:si = instance table
  5706 00000871 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5707                                  	;jmp	next_i2f
  5708                                  	; 15/12/2022
  5709 00000874 EBC5                    	jmp	short next_i2f
  5710                                  
  5711                                  Win386_Leaving:
  5712                                  	; 15/12/2022
  5713 00000876 F6C201                  	test 	dl,1
  5714                                  	;test	dx,1			; is this really win386?
  5715                                  	;jz	short Win386_Leaving_c
  5716                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5717                                  	; 15/12/2022
  5718 00000879 75BF                    	jnz	short win_nexti2f	
  5719                                  
  5720                                  Win386_Leaving_c:
  5721                                  					; M062 - Start
  5722 0000087B 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5723                                  					;    up.
  5724 00000880 7523                    	jne	short noumb		; N: not saved 
  5725 00000882 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5726                                  					;    previously saved umb_head
  5727                                  	; 05/01/2024
  5728                                  	;push	ax ; (not necessary)
  5729 00000887 06                      	push	es
  5730 00000888 51                      	push	cx
  5731 00000889 56                      	push	si
  5732 0000088A 57                      	push	di
  5733                                  
  5734                                  	;mov	ax,[UMB_HEAD]
  5735                                  	;mov	es,ax
  5736                                  	; 05/01/2024
  5737 0000088B 8E06[8C00]              	mov	es,[UMB_HEAD]
  5738 0000088F 31FF                    	xor	di,di			; es:di -> umb_head
  5739                                  
  5740 00000891 FC                      	cld
  5741                                  
  5742 00000892 BE[FA11]                	mov	si,UmbSave1
  5743 00000895 B90B00                  	mov	cx,11
  5744 00000898 F3A4                    	rep	movsb
  5745 0000089A BE[D50D]                	mov	si,UmbSave2
  5746                                  	;mov	cx,5
  5747                                  	; 18/12/2022
  5748 0000089D B105                    	mov	cl,5
  5749 0000089F F3A4                    	rep	movsb
  5750                                  
  5751 000008A1 5F                      	pop	di
  5752 000008A2 5E                      	pop	si
  5753 000008A3 59                      	pop	cx
  5754 000008A4 07                      	pop	es
  5755                                  	; 05/01/2024
  5756                                  	;pop	ax
  5757                                  noumb:					; M062 - End
  5758 000008A5 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5759 000008AA 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5760 000008AF EB89                    	jmp	short win_nexti2f
  5761                                  
  5762                                  ;	; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  Win386_Query:
  5774 000008B1 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5775 000008B4 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5776 000008B6 09C9                    	or	cx,cx			; is it an instance query?
  5777 000008B8 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5778 000008BA 41                      	inc	cx			; indicate that data is instanced
  5779                                  ;
  5780                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5781                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5782                                  ; M001;  
  5783                                  ; M001; OFFSETS STRUC
  5784                                  ; M001; 	Major_version	db	?
  5785                                  ; M001; 	Minor_version	db	?
  5786                                  ; M001; 	SaveDS		dw	?
  5787                                  ; M001; 	SaveBX		dw	?
  5788                                  ; M001; 	Indos		dw	?
  5789                                  ; M001; 	User_id		dw	?
  5790                                  ; M001; 	CritPatch	dw	?
  5791                                  ; M001; OFFSETS	ENDS
  5792                                  ; M001; 
  5793                                  ; M001; User_Id is the only variable really important for proper functioning  
  5794                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5795                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5796                                  ; M001; pass this table because Win386 depends on this table to get the 
  5797                                  ; M001; User_Id offset.
  5798                                  ; M001; 
  5799 000008BB BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5800 000008BE 1E                      	push	ds			; M001
  5801 000008BF 07                      	pop	es			; es:bx points at offset table ; M001
  5802 000008C0 EB40                    	jmp	short PopIret		; M001
  5803                                  
  5804                                  ; 15/12/2022
  5805                                  ;	; Code to return Win386 2.xx instance table
  5806                                  ;OldWin386Init:
  5807                                  ;	pop	ax			; discard ds pushed on stack
  5808                                  ;	mov	si,OldInstanceJunk 
  5809                                  ;					; ds:si = instance table
  5810                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5811                                  ;	;jmp	next_i2f
  5812                                  ;	; 15/12/2022
  5813                                  ;	jmp	short _next_i2f
  5814                                  
  5815                                  dosmgr_func:
  5816 000008C2 49                      	dec	cx
  5817 000008C3 7435                    	jz	short win386_patch	; call to patch DOS
  5818 000008C5 49                      	dec	cx
  5819 000008C6 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5820 000008C8 49                      	dec	cx
  5821 000008C9 7439                    	jz	short win386_size	; get size of DOS data structures
  5822 000008CB 49                      	dec	cx
  5823 000008CC 7428                    	jz	short win386_inst	; instance more data
  5824                                  	;dec	cx
  5825                                  	;jnz	short PopIret		; no functions above this
  5826                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5827 000008CE E232                    	loop	PopIret
  5828                                  
  5829                                  	; Get DOS device driver size -- es:di points at device driver header
  5830                                  	; In DOS 4.x, the para before the device header contains an arena 
  5831                                  	; header for the driver.
  5832                                  
  5833 000008D0 8CC0                    	mov	ax,es			; ax = device header segment
  5834                                  
  5835                                  	; We check to see if we have a memory arena for this device driver. 
  5836                                  	; The way to do this would be to look at the previous para to see if
  5837                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5838                                  	; in the arena is the same as the device header segment. These two 
  5839                                  	; checks together should take care of all cases
  5840                                  
  5841 000008D2 48                      	dec	ax			; get arena header
  5842 000008D3 06                      	push	es
  5843 000008D4 8EC0                    	mov	es,ax			; arena header for device driver
  5844                                  
  5845 000008D6 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5846 000008DA 7517                    	jnz	short cantsize		; no, cant size this driver
  5847 000008DC 40                      	inc	ax			; get back device header segment
  5848 000008DD 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5849 000008E1 7510                    	jnz	short cantsize		; no, not a proper arena
  5850                                  
  5851 000008E3 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5852 000008E7 07                      	pop	es
  5853                                  
  5854                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5855                                  	; Speed is not critical and so we choose the shortest method 
  5856                                  	; -- use "mul"
  5857                                  
  5858 000008E8 BB1000                  	mov	bx,16
  5859 000008EB F7E3                    	mul	bx
  5860 000008ED 89C1                    	mov	cx,ax
  5861 000008EF 89D3                    	mov	bx,dx
  5862 000008F1 EB09                    	jmp	short win386_done	; return with device driver size
  5863                                  cantsize:
  5864 000008F3 07                      	pop	es
  5865 000008F4 31C0                    	xor	ax,ax
  5866                                  win386_inst:	; 05/01/2024
  5867 000008F6 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5868 000008F8 EB08                    	jmp	short PopIret		; return
  5869                                  
  5870                                  win386_patch:
  5871                                  	; dx contains bits marking the patches to be applied. We return 
  5872                                  	; the field with all bits set to indicate that all patches have been
  5873                                  	; done
  5874                                  
  5875 000008FA 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5876                                   	;jmp	short win386_done	; done, return
  5877                                  	; 15/12/2022
  5878                                  	; 15/12/2022
  5879                                  win386_done:
  5880 000008FC B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5881 000008FF BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5882                                  PopIret:
  5883 00000902 1F                      	pop	ds
  5884 00000903 CF                      	iret	
  5885                                  
  5886                                  win386_size:
  5887                                  	; Return the size of DOS data structures -- currently only CDS size
  5888                                  
  5889                                  	; 17/12/2022
  5890 00000904 F6C201                  	test	dl,1
  5891                                  	;test	dx,1			; check for CDS size bit
  5892 00000907 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5893                                  
  5894 00000909 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5895 0000090C EBEE                    	jmp	short win386_done	; return with the size
  5896                                  
  5897                                  ; 05/01/2024
  5898                                  %if 0
  5899                                  win386_inst:
  5900                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5901                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5902                                  	; this by returning a status of not previously instanced. The basic
  5903                                  	; structure of these things have not changed and so the current
  5904                                  	; DOSMGR code should be able to work it out
  5905                                  
  5906                                  	xor	dx,dx			; make sure dx has a not done value
  5907                                  	jmp	short PopIret		; skip done indication
  5908                                  %endif
  5909                                  
  5910                                  	; 15/12/2022
  5911                                  ;win386_done:
  5912                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5913                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5914                                  ;PopIret:
  5915                                  ;	pop	ds
  5916                                  ;	iret				; return back up the chain
  5917                                  
  5918                                  	; 15/12/2022
  5919                                  ;win_nexti2f:
  5920                                  	;pop	ds
  5921                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5922                                  
  5923                                  ;End WIN386 support
  5924                                  
  5925                                  ; 15/05/2019
  5926                                  
  5927                                  ;M044; Start of changes
  5928                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5929                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5930                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5931                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5932                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5933                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5934                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5935                                  ; last para of the Windows memory block and then restore this para on the
  5936                                  ; Windows swapin callout. 
  5937                                  
  5938                                  getwinlast:
  5939                                  	; 07/12/2022
  5940 0000090E 8B36[3003]              	mov	si,[CurrentPDB]
  5941 00000912 4E                      	dec	si
  5942 00000913 8EC6                    	mov	es,si
  5943 00000915 2603360300              	add	si,[es:3]
  5944 0000091A C3                      	retn
  5945                                  
  5946                                  ; 15/12/2022
  5947                                  %if 0
  5948                                  winold_swap:
  5949                                  	push	ds
  5950                                  	push	es
  5951                                  	push	si
  5952                                  	push	di
  5953                                  	push	cx
  5954                                  
  5955                                  	;getdseg <ds>			;ds = DOSDATA
  5956                                  	mov	ds,[cs:DosDSeg]
  5957                                  
  5958                                  	cmp	al,1			;swap Windows out call
  5959                                  	jne	short swapin		;no, check if Swap in call
  5960                                  	call	getwinlast
  5961                                  	push	ds
  5962                                  	pop	es
  5963                                  	mov	ds,si			;ds = memory arena of Windows
  5964                                  	xor	si,si
  5965                                  	mov	di,WinoldPatch1
  5966                                  	mov	cx,8
  5967                                  	cld
  5968                                  	push	cx
  5969                                  	rep	movsb			;save first 8 bytes
  5970                                  	pop	cx
  5971                                  	mov	di,WinoldPatch2
  5972                                  	rep	movsb			;save next 8 bytes
  5973                                  	jmp	short winold_done
  5974                                  swapin:
  5975                                  	cmp	al,2			;swap Windows in call?
  5976                                  	jne	short winold_done	;no, something else, pass it on
  5977                                  	call	getwinlast
  5978                                  	mov	es,si
  5979                                  	xor	di,di
  5980                                  	mov	si,WinoldPatch1
  5981                                  	mov	cx,8
  5982                                  	cld
  5983                                  	push	cx
  5984                                  	rep	movsb			;restore first 8 bytes
  5985                                  	pop	cx
  5986                                  	mov	si,WinoldPatch2
  5987                                  	rep	movsb			;restore next 8 bytes
  5988                                  winold_done:
  5989                                  	pop	cx
  5990                                  	pop	di
  5991                                  	pop	si
  5992                                  	pop	es
  5993                                  	pop	ds
  5994                                  	jmp	next_i2f		;chain on
  5995                                  
  5996                                  %endif
  5997                                  
  5998                                  ;M044; End of changes
  5999                                  
  6000                                  ; 15/05/2019
  6001                                  
  6002                                  DispatchDOS:
  6003 0000091B 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6004 00000920 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6005 00000925 50                      	PUSH	AX			; push index
  6006 00000926 55                      	PUSH	BP
  6007 00000927 89E5                    	MOV	BP,SP
  6008                                  		; stack looks like:
  6009                                  		;   0	BP
  6010                                  		;   2	DISPATCH
  6011                                  		;   4	TABLE
  6012                                  		;   6	RETURN
  6013                                  		;   8	LONG-RETURN
  6014                                  		;   C	FLAGS
  6015                                  		;   E	AX
  6016                                  	
  6017 00000929 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6018 0000092C 5D                      	POP	BP
  6019 0000092D E8DB08                  	call	TableDispatch
  6020 00000930 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6021                                  
  6022                                  INT2F_etcetera:
  6023                                  	;entry	DosGetGroup
  6024                                  DosGetGroup:
  6025                                  	; MSDOS 3.3
  6026                                  	;push	cs
  6027                                  	;pop	ds
  6028                                  	;retn
  6029                                  
  6030                                  	; MSDOS 6.0
  6031                                  ;SR; Cannot use CS now
  6032                                  ;
  6033                                  ;	PUSH	CS
  6034                                  ;	POP	DS
  6035                                  
  6036                                  	; 04/11/2022
  6037                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6038                                  
  6039                                  	;getdseg <ds>
  6040 00000933 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6041 00000938 C3                      	retn
  6042                                  
  6043                                  	;entry	DOSInstall
  6044                                  DOSInstall:
  6045 00000939 B0FF                    	MOV	AL,0FFh
  6046 0000093B C3                      	retn
  6047                                  
  6048                                  ;ENDIF ; (*)
  6049                                  
  6050                                  
  6051                                  ; 15/05/2019 - Retro DOS v4.0
  6052                                  
  6053                                  ;------------------------------------------------------------------------
  6054                                  ;
  6055                                  ; Procedure Name : RW32_CONVERT
  6056                                  ;
  6057                                  ;Input: same as ABSDRD and ABSDWRT
  6058                                  ;	 ES:BP -> DPB
  6059                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6060                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6061                                  ;	 carry clear, parms ok
  6062                                  ;
  6063                                  ;------------------------------------------------------------------------
  6064                                  
  6065                                  	; 06/01/2024
  6066                                  RW32_CONVERT:
  6067 0000093C 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6068 0000093F 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6069 00000941 49                      	dec	cx ; *
  6070 00000942 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6071 00000943 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6072 00000944 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6073 00000948 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6074 0000094C 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6075 0000094F 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6076                                  	;INC	DL			;>32mb			;AN000;
  6077                                  	; 17/12/2022
  6078 00000951 42                      	inc	dx
  6079 00000952 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6080 00000954 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6081 00000956 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6082                                  letold:
  6083 00000958 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6084 00000959 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6085 0000095A 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6086                                  
  6087 0000095C 1E                      	push	ds
  6088                                  	;getdseg <ds>
  6089 0000095D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6090 00000962 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6091 00000968 1F                      	pop	ds
  6092                                  
  6093 00000969 F9                      	STC				;>32mb			;AN000;
  6094 0000096A C3                      	retn				;>32mb			;AN000;
  6095                                  
  6096                                  new32format:
  6097                                  	;mov	dx,[bx+2]
  6098 0000096B 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6099                                  
  6100 0000096E 1E                      	push	ds			; set up ds to DOSDATA
  6101                                  	;getdseg <ds>
  6102 0000096F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6103 00000974 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6104 00000978 1F                      	pop	ds
  6105                                  
  6106 00000979 8B17                    	mov	dx,[bx]
  6107                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6108                                  	;mov	cx,[bx+4]
  6109 0000097B 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6110                                  	;lds	bx,[bx+6]
  6111 0000097E C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6112                                  old_style:				;>32mb			;AN000;
  6113                                  	; 06/01/2024
  6114                                  	; cf=0
  6115                                  	;CLC				;>32mb			;AN000;
  6116 00000981 C3                      	retn				;>32mb			;AN000;
  6117                                  
  6118                                  ;------------------------------------------------------------------------
  6119                                  ;
  6120                                  ; Procedure Name : Fastxxx_Purge
  6121                                  ;
  6122                                  ; Input: None
  6123                                  ; Functions: Purge Fastopen/ Cache Buffers
  6124                                  ; Output: None
  6125                                  ;
  6126                                  ;------------------------------------------------------------------------
  6127                                  
  6128                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6129                                  
  6130                                  Fastxxx_Purge:
  6131 00000982 50                      	PUSH	AX			; save regs.	;AN000;
  6132 00000983 56                      	PUSH	SI						;AN000;
  6133 00000984 52                      	PUSH	DX						;AN000;
  6134                                  topen:
  6135 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6136                                  	;getdseg <ds>
  6137 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6138                                  
  6139 0000098B F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6140                                  					; fastopen installed ?	;AN000;
  6141 00000990 1F                      	pop	ds
  6142 00000991 740B                    	JZ	short nofast		; no			;AN000;
  6143 00000993 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6144                                  dofast:
  6145 00000995 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6146                                  	;;mov	dl,[es:bp+0]
  6147                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6148                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6149                                  	; 15/12/2022
  6150 00000997 268A5600                	mov	dl,[es:bp]
  6151                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6152 0000099B E8F01C                  	call	Fast_Dispatch
  6153                                  nofast:
  6154 0000099E 5A                      	POP	DX						;AN000;
  6155 0000099F 5E                      	POP	SI			; restore regs		;AN000;
  6156 000009A0 58                      	POP	AX			 			;AN000;
  6157 000009A1 C3                      	retn				; exit
  6158                                  
  6159                                  ;============================================================================
  6160                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6161                                  ;============================================================================
  6162                                  ; 29/04/2019 - Retro DOS v4.0
  6163                                  
  6164                                  ;include dossym.inc
  6165                                  ;include dosmac.inc
  6166                                  ;include doscntry.inc
  6167                                  
  6168                                  ; DOSCODE Segment
  6169                                  
  6170                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  ;include divmes.inc
  6173                                  
  6174                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6175                                  ; -------------------------------------
  6176                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6177                                  
  6178                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6179                                  	;PUBLIC	DIVMES
  6180                                  
  6181 000009A2 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6181 000009AB 6F766572666C6F770D-
  6181 000009B4 0A                 
  6182                                  
  6183                                  	;PUBLIC	DivMesLen
  6184                                  DivMesLen:
  6185 000009B5 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6186                                  
  6187                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6188                                  ; -------------------------------------
  6189                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6190                                  
  6191                                  ; (MSDOS 6.0)
  6192                                  ; VxD not found error message
  6193                                  
  6194                                  NoVxDErrMsg:
  6195 000009B7 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6195 000009C0 686176652074686520-
  6195 000009C9 66696C652057494E41-
  6195 000009D2 32302E33383620696E-
  6195 000009DB 2074686520726F6F74-
  6195 000009E4 206F6620796F757220-
  6195 000009ED 626F6F742064726976-
  6195 000009F6 65                 
  6196 000009F7 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6196 00000A00 57696E646F77732069-
  6196 00000A09 6E20456E68616E6365-
  6196 00000A12 64204D6F64650D0A   
  6197                                  
  6198                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6199                                  
  6200                                  ; 13/05/2019 - Retro DOS v4.0
  6201                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6202                                  
  6203                                  ;include yesno.asm  (MNSDOS 6.0)
  6204                                  ; -------------------------------------
  6205                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6206                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6207                                  
  6208                                  ; This is for country Yes and No
  6209                                  
  6210 00000A1A 59                      NLS_YES:	db 'Y'
  6211 00000A1B 4E                      NLS_NO:		db 'N'
  6212 00000A1C 79                      NLS_yes2:	db 'y'
  6213 00000A1D 6E                      NLS_no2:	db 'n'
  6214                                  
  6215                                  ; ---------------------------------------------------------------------------
  6216                                  
  6217                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6219                                  
  6220                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6221                                  
  6222                                  ; The following two tables implement the current buffered input editing
  6223                                  ; routines. The tables are pairwise associated in reverse order for ease
  6224                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6225                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6226                                  
  6227                                  	;PUBLIC	CANCHAR
  6228                                  CANCHAR:
  6229 00000A1E 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6230                                  	
  6231                                  	;PUBLIC	ESCCHAR
  6232                                  ESCCHAR:
  6233 00000A1F 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6234                                  	
  6235                                  	;IF	NOT Rainbow
  6236                                  
  6237                                  ESCTAB:	; LABEL BYTE
  6238                                  
  6239                                  	;IF	IBM
  6240 00000A20 40                      	DB	64		; Ctrl-Z - F6
  6241 00000A21 4D                      	DB	77		; Copy one char - -->
  6242 00000A22 3B                      	DB	59		; Copy one char - F1
  6243 00000A23 53                      	DB	83		; Skip one char - DEL
  6244 00000A24 3C                      	DB	60		; Copy to char - F2
  6245 00000A25 3E                      	DB	62		; Skip to char - F4
  6246 00000A26 3D                      	DB	61		; Copy line - F3
  6247 00000A27 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6248 00000A28 3F                      	DB	63		; Reedit line (new template) - F5
  6249 00000A29 4B                      	DB	75		; Backspace - <--
  6250 00000A2A 52                      	DB	82		; Enter insert mode - INS (toggle)
  6251 00000A2B 52                      	DB	82		; Exit insert mode - INS (toggle)
  6252 00000A2C 41                      	DB	65		; Escape character - F7
  6253 00000A2D 41                      	DB	65		; End of table
  6254                                  	;ENDIF
  6255                                  
  6256                                  ESCEND: ; LABEL BYTE
  6257                                  
  6258                                  ESCTABLEN EQU ESCEND-ESCTAB
  6259                                  
  6260                                  ESCFUNC: ; LABEL WORD
  6261                                  	
  6262 00000A2E [0014]                  	short_addr  GETCH	; Ignore the escape sequence
  6263 00000A30 [7D14]                  	short_addr  TWOESC
  6264 00000A32 [7215]                  	short_addr  EXITINS
  6265 00000A34 [7215]                  	short_addr  ENTERINS
  6266 00000A36 [7814]                  	short_addr  BACKSP
  6267 00000A38 [5E15]                  	short_addr  REEDIT
  6268 00000A3A [6514]                  	short_addr  KILNEW
  6269 00000A3C [F414]                  	short_addr  COPYLIN
  6270 00000A3E [2615]                  	short_addr  SKIPSTR
  6271 00000A40 [FA14]                  	short_addr  COPYSTR
  6272 00000A42 [1D15]                  	short_addr  SKIPONE
  6273 00000A44 [FF14]                  	short_addr  COPYONE
  6274 00000A46 [FF14]                  	short_addr  COPYONE
  6275 00000A48 [7915]                  	short_addr  CTRLZ
  6276                                  
  6277                                  	;ENDIF
  6278                                  
  6279                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6280                                  ; ---------------------------------------------------------------------------
  6281                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6282                                  
  6283                                  ; OEMFunction key is expected to process a single function
  6284                                  ;   key input from a device and dispatch to the proper
  6285                                  ;   routines leaving all registers UNTOUCHED.
  6286                                  ;
  6287                                  ; Inputs:   CS, SS are DOSGROUP
  6288                                  ; Outputs:  None. This function is expected to JMP to onw of
  6289                                  ;           the following labels:
  6290                                  ;
  6291                                  ;           GetCh       - ignore the sequence
  6292                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6293                                  ;           ExitIns     - toggle insert mode
  6294                                  ;           EnterIns    - toggle insert mode
  6295                                  ;           BackSp      - move backwards one space
  6296                                  ;           ReEdit      - reedit the line with a new template
  6297                                  ;           KilNew      - discard the current line and start from scratch
  6298                                  ;           CopyLin     - copy the rest of the template into the line
  6299                                  ;           SkipStr     - read the next character and skip to it in the template
  6300                                  ;           CopyStr     - read next char and copy from template to line until char
  6301                                  ;           SkipOne     - advance position in template one character
  6302                                  ;           CopyOne     - copy next character in template into line
  6303                                  ;           CtrlZ       - place a ^Z into the template
  6304                                  ; Registers that are allowed to be modified by this function are:
  6305                                  ;           AX, CX, BP
  6306                                  
  6307                                  ; 13/05/2019 - Retro DOS v4.0
  6308                                  ; -------------------------------------
  6309                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6310                                  
  6311                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6314                                  
  6315                                  OEMFunctionKey:
  6316 00000A4A E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6317 00000A4D B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6318 00000A4F 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6319 00000A50 BF[200A]                	MOV     DI,ESCTAB		; offset of second byte table
  6320 00000A53 06                      	push	es
  6321 00000A54 0E                      	push	cs
  6322 00000A55 07                      	pop	es
  6323 00000A56 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6324 00000A58 07                      	pop	es
  6325 00000A59 5F                      	POP     DI                      ; restore DI
  6326 00000A5A D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6327 00000A5C 89CD                    	MOV     BP,CX                   ; move to indexable register
  6328                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6329 00000A5E 2EFFA6[2E0A]            	JMP	word [CS:BP+ESCFUNC]
  6330                                  
  6331                                  ;DOSCODE ENDS
  6332                                  	
  6333                                  ;============================================================================
  6334                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6335                                  ;============================================================================
  6336                                  ; Retro DOS v3.0 - 18/07/2018
  6337                                  
  6338                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6339                                  ;----------------------------------------------------------------------------
  6340                                  ; Retro DOS v2.0 - 13/03/2018
  6341                                  
  6342                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6343                                  
  6344                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6345                                  
  6346                                  ;**	$GET_DATE - Get Current Date
  6347                                  ;----------------------------------------
  6348                                  ;	ENTRY	none
  6349                                  ;	EXIT	(cx:dx) = current date
  6350                                  ;	USES	all
  6351                                  
  6352                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6353                                  
  6354                                  _$GET_DATE:	;System call 42
  6355                                  
  6356 00000A63 16                      	PUSH	SS
  6357 00000A64 1F                      	POP	DS
  6358 00000A65 E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6359 00000A68 A1[5203]                	MOV	AX,[YEAR]
  6360                                  
  6361                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6362                                  
  6363 00000A6B 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6364 00000A6F E813FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6365                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6366 00000A72 895C06                  	MOV	[SI+user_env.user_DX],BX
  6367 00000A75 05BC07                  	ADD	AX,1980		;Put bias back
  6368                                  	;MOV	[SI+4],AX	;CX=year
  6369 00000A78 894404                  	MOV	[SI+user_env.user_CX],AX
  6370 00000A7B 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6371                                  RET20:	; 05/11/2022
  6372                                  RET24:	; 18/12/2022
  6373 00000A7F C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_DATE - Set Current Date
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = current date
  6378                                  ;	EXIT	(al) = -1 iff bad date
  6379                                  ;		(al) = 0 if ok
  6380                                  ;	USES	all
  6381                                  
  6382                                  _$SET_DATE:	;System call 43
  6383                                  
  6384 00000A80 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6385 00000A82 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6386                                  	;JC	SHORT RET24	;Error if not big enough
  6387                                  	; 05/11/2022
  6388 00000A86 72F7                    	jc	short RET20
  6389 00000A88 83F977                  	CMP	CX,119		;Year must be less than 2100
  6390 00000A8B 77F2                    	JA	SHORT RET24
  6391 00000A8D 08F6                    	OR	DH,DH
  6392                                  	;JZ	SHORT RET24
  6393                                   	; 05/11/2022
  6394 00000A8F 74EE                    	jz	short RET20
  6395 00000A91 08D2                    	OR	DL,DL
  6396                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6397                                  	; 05/11/2022
  6398 00000A93 74EA                    	jz	short RET20
  6399 00000A95 80FE0C                  	CMP	DH,12		;Check against max. month
  6400 00000A98 77E5                    	JA	SHORT RET24
  6401 00000A9A 16                      	PUSH	SS
  6402 00000A9B 1F                      	POP	DS
  6403                                  	;CALL	DODATE
  6404                                  	; 18/12/2022
  6405 00000A9C E90301                  	jmp	DODATE
  6406                                  ;RET24:  
  6407                                  	;RETN
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;----------------------------------------
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00000A9F 16                      	PUSH	SS
  6418 00000AA0 1F                      	POP	DS
  6419 00000AA1 E87100                  	CALL	READTIME
  6420 00000AA4 E8DEF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6421                                  	;MOV	[SI+6],DX
  6422 00000AA7 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                  	;MOV	[SI+4],CX
  6424 00000AAA 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425                                  set_time_ok:	; 06/01/2024
  6426 00000AAD 30C0                    	XOR	AL,AL
  6427                                  RET26:  
  6428 00000AAF C3                      	RETN
  6429                                  
  6430                                  ;**	$SET_TIME - Set Current Time
  6431                                  ;----------------------------------------
  6432                                  ;	ENTRY	(cx:dx) = time
  6433                                  ;	EXIT	(al) = 0 if 0k
  6434                                  ;		(al) = -1 if invalid
  6435                                  ;	USES	ALL
  6436                                  
  6437                                  _$SET_TIME:			;System call 45
  6438                                  
  6439 00000AB0 B0FF                    	MOV	AL,-1		;Flag in case of error
  6440 00000AB2 80FD18                  	CMP	CH,24		;Check hours
  6441 00000AB5 73F8                    	JAE	SHORT RET26
  6442 00000AB7 80F93C                  	CMP	CL,60		;Check minutes
  6443 00000ABA 73F3                    	JAE	SHORT RET26
  6444 00000ABC 80FE3C                  	CMP	DH,60		;Check seconds
  6445 00000ABF 73EE                    	JAE	SHORT RET26
  6446 00000AC1 80FA64                  	CMP	DL,100		;Check 1/100's
  6447 00000AC4 73E9                    	JAE	SHORT RET26
  6448 00000AC6 51                      	PUSH	CX
  6449 00000AC7 52                      	PUSH	DX
  6450 00000AC8 16                      	PUSH	SS
  6451 00000AC9 1F                      	POP	DS
  6452                                  
  6453                                  ; 07/02/2024
  6454                                  %if 0
  6455                                  	MOV	BX,TIMEBUF
  6456                                  	MOV	CX,6
  6457                                  	; 06/02/2024 ; *
  6458                                  	;;XOR	DX,DX
  6459                                  	;;MOV	AX,DX
  6460                                  	;xor	ax,ax
  6461                                  	;cwd	; 06/01/2024
  6462                                  	PUSH	BX
  6463                                  	;CALL	SETREAD
  6464                                  	; 06/02/2024 ; *
  6465                                  	call	SETREAD_X
  6466                                  %else
  6467 00000ACA E8183B                  	call	SETREAD_XT
  6468                                  %endif
  6469                                  
  6470 00000ACD 1E                      	PUSH	DS
  6471 00000ACE C536[2E00]              	LDS	SI,[BCLOCK]
  6472 00000AD2 E8993A                  	CALL	DEVIOCALL2	;Get correct day count
  6473 00000AD5 1F                      	POP	DS
  6474 00000AD6 5B                      	POP	BX
  6475 00000AD7 E8483B                  	CALL	SETWRITE
  6476 00000ADA 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6477 00000ADE 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6478 00000AE2 C536[2E00]              	LDS	SI,[BCLOCK]
  6479 00000AE6 E8853A                  	CALL	DEVIOCALL2	;Set the time
  6480                                  	; 06/01/2024
  6481                                  	;XOR	AL,AL
  6482                                  	;RETN
  6483 00000AE9 EBC2                    	jmp	short set_time_ok
  6484                                  
  6485                                  ; 11/07/2018 - Retro DOS v3.0
  6486                                  ; Retro DOS v2.0 - 14/03/2018
  6487                                  
  6488                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6489                                  
  6490                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6491                                  ;----------------------------------------------------------
  6492                                  ; Date16 returns the current date in AX, current time in DX
  6493                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6494                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6495                                  
  6496                                  DATE16:
  6497                                  	
  6498                                  ;M048	Context DS
  6499                                  ;
  6500                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6501                                  ; is DOSDATA
  6502                                  
  6503                                  	;push	ss
  6504                                  	;pop	ds
  6505                                  
  6506                                  	;getdseg <ds>		; M048
  6507                                  
  6508                                  	; 13/05/2019 - Retro DOS v4.0
  6509 00000AEB 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6510                                  
  6511 00000AF0 51                      	PUSH	CX
  6512 00000AF1 06                      	PUSH	ES
  6513 00000AF2 E82000                  	CALL	READTIME
  6514 00000AF5 07                      	POP	ES
  6515 00000AF6 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6516 00000AF8 D0E1                    	SHL	CL,1
  6517 00000AFA D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6518 00000AFC D1E1                    	SHL	CX,1
  6519 00000AFE D1E1                    	SHL	CX,1
  6520 00000B00 D0EE                    	SHR	DH,1		;Count every two seconds
  6521 00000B02 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6522 00000B04 89CA                    	MOV	DX,CX
  6523                                  
  6524                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6525                                  
  6526 00000B06 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6527 00000B09 B104                    	MOV	CL,4
  6528 00000B0B D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6529 00000B0D D1E0                    	SHL	AX,1
  6530 00000B0F 59                      	POP	CX
  6531 00000B10 0A06[5003]              	OR	AL,[DAY]
  6532                                  RET21:
  6533 00000B14 C3                      	RETN
  6534                                  
  6535                                  ;----------------------------------------------------------
  6536                                  
  6537                                  READTIME:
  6538                                  
  6539                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6540                                  ;Uses AX, CX, DX.
  6541                                  
  6542 00000B15 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6543 00000B1B 56                      	PUSH	SI
  6544 00000B1C 53                      	PUSH	BX
  6545                                  
  6546 00000B1D BB[B603]                	MOV	BX,TIMEBUF
  6547                                  ; 07/02/2024
  6548                                  %if 0
  6549                                  	MOV	CX,6
  6550                                  	; 06/02/2024
  6551                                  	;;XOR	DX,DX
  6552                                  	;;MOV	AX,DX
  6553                                  	;; 06/01/2024
  6554                                  	;xor	ax,ax
  6555                                  	;cwd
  6556                                  	;CALL	SETREAD
  6557                                  	; 06/02/2024
  6558                                  	call	SETREAD_X
  6559                                  %else
  6560 00000B20 E8C63A                  	call	SETREAD_XTC
  6561                                  %endif
  6562 00000B23 1E                      	PUSH	DS
  6563 00000B24 C536[2E00]              	LDS	SI,[BCLOCK]
  6564 00000B28 E8433A                  	CALL	DEVIOCALL2	;Get correct date and time
  6565 00000B2B 1F                      	POP	DS
  6566 00000B2C 5B                      	POP	BX
  6567 00000B2D 5E                      	POP	SI
  6568 00000B2E A1[B603]                	MOV	AX,[TIMEBUF]
  6569 00000B31 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6570 00000B35 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6571 00000B39 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6572                                  	;JZ	SHORT RET22
  6573 00000B3D 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6574                                  	;cmp	ax,43830
  6575 00000B3F 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6576 00000B42 733D                    	JAE	SHORT RET22	;Ignore if too large
  6577 00000B44 A3[5403]                	MOV	[DAYCNT],AX
  6578 00000B47 56                      	PUSH	SI
  6579 00000B48 51                      	PUSH	CX
  6580 00000B49 52                      	PUSH	DX		;Save time
  6581 00000B4A 31D2                    	XOR	DX,DX
  6582                                  	;mov	cx,1461
  6583 00000B4C B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6584 00000B4F F7F1                    	DIV	CX		;Compute number of 4-year units
  6585 00000B51 D1E0                    	SHL	AX,1
  6586 00000B53 D1E0                    	SHL	AX,1
  6587 00000B55 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6588 00000B57 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6589                                  
  6590 00000B59 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6591                                  
  6592 00000B5C E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6593 00000B5F D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6594 00000B61 7304                    	JNC	SHORT SK	;Extra half-year?
  6595 00000B63 81C2C800                	ADD	DX,200
  6596                                  SK:
  6597 00000B67 E82200                  	CALL	SETYEAR
  6598 00000B6A B101                    	MOV	CL,1		;At least at first month in year
  6599                                  
  6600 00000B6C BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6601                                  	
  6602 00000B6F E81000                  	CALL	DSLIDE		;Find out which month we're in
  6603 00000B72 880E[5103]              	MOV	[MONTH],CL
  6604 00000B76 42                      	INC	DX		;Remainder is day of month (start with one)
  6605 00000B77 8816[5003]              	MOV	[DAY],DL
  6606 00000B7B E88A00                  	CALL	WKDAY		;Set day of week
  6607 00000B7E 5A                      	POP	DX
  6608 00000B7F 59                      	POP	CX
  6609 00000B80 5E                      	POP	SI
  6610                                  RET22:  
  6611 00000B81 C3                      	RETN
  6612                                  
  6613                                  ;----------------------------------------------------------
  6614                                  
  6615                                  DSLIDE:
  6616                                  	;MOV	AH,0
  6617                                  	; 06/01/2024
  6618                                  	; (AH = 0)
  6619                                  DSLIDE1:
  6620 00000B82 AC                      	LODSB			;Get count of days
  6621 00000B83 39C2                    	CMP	DX,AX		;See if it will fit
  6622                                  	;JB	SHORT RET23	;If not, done
  6623 00000B85 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6624 00000B87 29C2                    	SUB	DX,AX
  6625 00000B89 41                      	INC	CX		;Count one more month/year
  6626 00000B8A EBF6                    	JMP	SHORT DSLIDE1
  6627                                  
  6628                                  ;----------------------------------------------------------
  6629                                  
  6630                                  SETYEAR:
  6631                                  
  6632                                  ;Set year with value in CX. Adjust length of February for this year.
  6633                                  
  6634                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6635                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6636                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6637                                  ;	preserve DS as CHKYR is also called as a routine.
  6638                                  
  6639                                  	; MSDOS 6.0 (18/07/2018) ; *
  6640                                  
  6641                                  	;GETDSEG DS
  6642                                  
  6643                                  	;PUSH	CS  ; *
  6644                                  	;POP	DS  ; *
  6645                                  
  6646                                  	; 13/05/2019 - Retro DOS v4.0
  6647 00000B8C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6648                                  
  6649                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6650                                  	; 05/11/2022 
  6651                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6652                                  
  6653 00000B91 880E[5203]              	MOV	[YEAR],CL
  6654                                  CHKYR:
  6655 00000B95 F6C103                  	TEST	CL,3		;Check for leap year
  6656 00000B98 B01C                    	MOV	AL,28
  6657 00000B9A 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6658 00000B9C FEC0                    	INC	AL		;Add leap day
  6659                                  SAVFEB:
  6660 00000B9E A2[1D0D]                	mov	[february],al
  6661                                  	;MOV	[MONTAB+1],AL	;Store for February
  6662                                  RET23:  
  6663 00000BA1 C3                      	RETN
  6664                                  
  6665                                  ;----------------------------------------------------------
  6666                                  
  6667                                  DODATE:
  6668 00000BA2 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6669 00000BA5 88F0                    	MOV	AL,DH
  6670                                  
  6671 00000BA7 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6672                                  
  6673 00000BAA D7                      	XLAT			;Look up days in month
  6674 00000BAB 38D0                    	CMP	AL,DL
  6675 00000BAD B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6676                                  	;JB	SHORT RET25	;Error if too many days
  6677 00000BAF 72F0                    	jb	short RET23 ; 18/07/2018
  6678 00000BB1 E8D8FF                  	CALL	SETYEAR
  6679                                  ;
  6680                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6681                                  ;
  6682 00000BB4 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6683 00000BB8 D1E9                    	SHR	CX,1
  6684 00000BBA D1E9                    	SHR	CX,1
  6685                                  	;mov	ax,1461
  6686 00000BBC B8B505                  	MOV	AX,FOURYEARS
  6687 00000BBF 89D3                    	MOV	BX,DX
  6688 00000BC1 F7E1                    	MUL	CX
  6689 00000BC3 8A0E[5203]              	MOV	CL,[YEAR]
  6690 00000BC7 80E103                  	AND	CL,3
  6691                                  
  6692 00000BCA BE[140D]                	MOV	SI,YRTAB
  6693                                  
  6694 00000BCD 89C2                    	MOV	DX,AX
  6695 00000BCF D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6696 00000BD1 E84700                  	CALL	DSUM		;Add up the days in each year
  6697 00000BD4 88F9                    	MOV	CL,BH		;Month of year
  6698                                  
  6699 00000BD6 BE[1C0D]                	MOV	SI,MONTAB
  6700                                  
  6701 00000BD9 49                      	DEC	CX		;Account for months starting with one
  6702 00000BDA E83E00                  	CALL	DSUM		;Add up days in each month
  6703 00000BDD 88D9                    	MOV	CL,BL		;Day of month
  6704 00000BDF 49                      	DEC	CX		;Account for days starting with one
  6705 00000BE0 01CA                    	ADD	DX,CX		;Add in to day total
  6706 00000BE2 92                      	XCHG	AX,DX		;Get day count in AX
  6707 00000BE3 A3[5403]                	MOV	[DAYCNT],AX
  6708 00000BE6 56                      	PUSH	SI
  6709 00000BE7 53                      	PUSH	BX
  6710 00000BE8 50                      	PUSH	AX
  6711                                  
  6712                                  ; 07/02/2024
  6713                                  %if 0
  6714                                  	MOV	BX,TIMEBUF
  6715                                  	MOV	CX,6
  6716                                  	; 06/02/2024 ; *
  6717                                  	;;XOR	DX,DX
  6718                                  	;;MOV	AX,DX
  6719                                  	;; 06/01/2024
  6720                                  	;xor	ax,ax
  6721                                  	;cwd
  6722                                  	PUSH	BX
  6723                                  	;CALL	SETREAD
  6724                                  	; 06/02/2024 ; *
  6725                                  	call	SETREAD_X
  6726                                  %else
  6727 00000BE9 E8F939                  	call	SETREAD_XT
  6728                                  %endif
  6729                                  
  6730 00000BEC 1E                      	PUSH	DS
  6731 00000BED C536[2E00]              	LDS	SI,[BCLOCK]
  6732 00000BF1 E87A39                  	CALL	DEVIOCALL2	;Get correct date and time
  6733 00000BF4 1F                      	POP	DS
  6734 00000BF5 5B                      	POP	BX
  6735 00000BF6 E8293A                  	CALL	SETWRITE
  6736 00000BF9 8F06[B603]              	POP	WORD [TIMEBUF]
  6737 00000BFD 1E                      	PUSH	DS
  6738 00000BFE C536[2E00]              	LDS	SI,[BCLOCK]
  6739 00000C02 E86939                  	CALL	DEVIOCALL2	;Set the date
  6740 00000C05 1F                      	POP	DS
  6741 00000C06 5B                      	POP	BX
  6742 00000C07 5E                      	POP	SI
  6743                                  WKDAY:
  6744 00000C08 A1[5403]                	MOV	AX,[DAYCNT]
  6745 00000C0B 31D2                    	XOR	DX,DX
  6746 00000C0D B90700                  	MOV	CX,7
  6747 00000C10 40                      	INC	AX
  6748 00000C11 40                      	INC	AX		;First day was Tuesday
  6749 00000C12 F7F1                    	DIV	CX		;Compute day of week
  6750 00000C14 8816[5603]              	MOV	[WEEKDAY],DL
  6751 00000C18 30C0                    	XOR	AL,AL		;Flag OK
  6752                                  RET25:
  6753 00000C1A C3                      	RETN
  6754                                  
  6755                                  ;----------------------------------------------------------
  6756                                  
  6757                                  ;**	DSUM - Compute the sum of a string of bytes
  6758                                  ;
  6759                                  ;	ENTRY	(cx) = byte count
  6760                                  ;		(ds:si) = byte address
  6761                                  ;		(dx) = sum register, initialized by caller
  6762                                  ;	EXIT	(dx) updated
  6763                                  ;	USES	ax, cx, dx, si, flags
  6764                                  
  6765                                  DSUM:
  6766 00000C1B B400                    	MOV	AH,0
  6767 00000C1D E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6768                                  	;JCXZ	RET25 ; 18/07/2018
  6769                                  DSUM1:
  6770 00000C1F AC                      	LODSB
  6771 00000C20 01C2                    	ADD	DX,AX
  6772 00000C22 E2FB                    	LOOP	DSUM1
  6773                                  DSUM9:
  6774 00000C24 C3                      	RETN
  6775                                  
  6776                                  ;============================================================================
  6777                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6778                                  ;============================================================================
  6779                                  ; 29/04/2019 - Retro DOS v4.0
  6780                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6781                                  
  6782                                  ; 12/03/2018 - Retro DOS v2.0 
  6783                                  
  6784                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6785                                  ;NAME	GETSET
  6786                                  
  6787                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6788                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6789                                  
  6790                                  ;USERNUM:
  6791                                  ;	DW	0			; 24 bit user number
  6792                                  ;       DB      0
  6793                                  ;;	IF      IBM
  6794                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6795                                  ;;	ELSE
  6796                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6797                                  ;;	ENDIF
  6798                                  
  6799                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6800                                  ;; 08/07/2018 - Retro DOS v3.0
  6801                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6802                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6803                                  
  6804                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6805                                  ;----------------------------------------------------------------------------
  6806                                  
  6807                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6808                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6809                                  
  6810                                  _$GET_VERSION:
  6811                                  
  6812                                  ; Inputs:
  6813                                  ;       None
  6814                                  ; Function:
  6815                                  ;       Return MS-DOS version number
  6816                                  ; Outputs:
  6817                                  ;       OEM number in BH
  6818                                  ;       User number in BL:CX (24 bits)
  6819                                  ;       Version number as AL.AH in binary
  6820                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6821                                  
  6822                                  ; MSDOS 6.0
  6823                                  ;
  6824                                  ;	Fake_Count is used to lie about the version numbers to support
  6825                                  ;	old binarys. See ms_table.asm for more info.
  6826                                  ;
  6827                                  ;		if input al = 00
  6828                                  ;		  (bh) = OEM number			
  6829                                  ;		else if input al = 01
  6830                                  ;		  (bh) = version flags
  6831                                  ;		 
  6832                                  ;		       	 bits 0-2 = DOS internal revision
  6833                                  ;		       	 bits 3-7 = DOS type flags
  6834                                  ;		              bit 3    = DOS is in ROM
  6835                                  ;		              bit 4    = DOS in in HMA
  6836                                  ;		              bits 5-7 = reserved
  6837                                  ;               M007 change - only bit 3 is now valid. Other bits
  6838                                  ;               are 0 when AL = 1
  6839                                  
  6840                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6841 00000C25 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6842 00000C2A 8CDB                    	mov	bx, ds
  6843                                  
  6844                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6845                                  	;--------------------------------------
  6846                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6847                                  
  6848 00000C2C 16                              PUSH    SS
  6849 00000C2D 1F                              POP     DS
  6850                                          
  6851                                  	; 06/01/2024
  6852                                  	;MOV	BX,[USERNUM+2]
  6853                                          ;MOV	CX,[USERNUM]
  6854                                  
  6855                                  	; 13/05/2019 - Retro DOS v4.0
  6856                                  
  6857                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6858                                  	;DOS flags
  6859                                  
  6860 00000C2E 3C01                    	cmp	AL,1
  6861 00000C30 7502                    	jne	short Norm_Vers
  6862                                  
  6863                                  ;ifdef ROMDOS
  6864                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6865                                  ;				(DOSINROM = 8)
  6866                                  ;else
  6867 00000C32 30FF                            xor     bh,bh		; Otherwise return 0
  6868                                  ;endif				;M007 end
  6869                                  
  6870                                  Norm_Vers:
  6871                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6872                                  
  6873                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6874                                  	; 13/05/2019 - Retro DOS v4.0
  6875 00000C34 1E                      	push	ds		; Get the version number from the
  6876 00000C35 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6877                                  	;mov	ax,[40h]
  6878 00000C39 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6879                                  	; 07/12/2022
  6880 00000C3C 1F                      	pop	ds
  6881 00000C3D E845F8                  	call	Get_User_Stack
  6882                                  				; Put values for return registers
  6883                                  				; in the proper place on the user's	 
  6884                                  				; stack addressed by DS:SI
  6885                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6886                                  gdrvfspc_ret:
  6887                                          ;MOV	[SI+user_env.user_AX],AX
  6888 00000C40 8904                            MOV	[SI],AX
  6889                                          ;MOV	[SI+4],CX
  6890 00000C42 894C04                  	mov	[SI+user_env.user_CX],CX
  6891                                  set_user_bx:
  6892                                  	;MOV	[SI+2],BX
  6893 00000C45 895C02                  	mov	[SI+user_env.user_BX],BX
  6894                                  
  6895 00000C48 C3                      	RETN
  6896                                  
  6897                                  ; 18/07/2018 - Retro DOS v3.0
  6898                                  
  6899                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6900                                  ;----------------------------------------------------------------------------
  6901                                  
  6902                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6903                                  ;
  6904                                  ;	ENTRY	none
  6905                                  ;	EXIT	(al) = value of VERIFY flag
  6906                                  ;	USES	all
  6907                                  
  6908                                  
  6909                                  _$GET_VERIFY_ON_WRITE:
  6910                                  
  6911                                  ;hkn; SS override
  6912 00000C49 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6913 00000C4D C3                      	retn
  6914                                  
  6915                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6916                                  ;
  6917                                  ;	ENTRY	(al) = value of VERIFY flag
  6918                                  ;	EXIT	none
  6919                                  ;	USES	all
  6920                                  
  6921                                  _$SET_VERIFY_ON_WRITE:
  6922                                  
  6923 00000C4E 2401                    	AND	AL,1
  6924                                  ;hkn; SS override
  6925 00000C50 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6926                                  RET27:	; 18/07/2018
  6927 00000C54 C3                      	retn
  6928                                  
  6929                                  ; 19/07/2018 - Retro DOS v3.0
  6930                                  
  6931                                  ;BREAK <$International - return country-dependent information>
  6932                                  ;----------------------------------------------------------------------------
  6933                                  ;
  6934                                  ; Procedure Name : $INTERNATIONAL
  6935                                  ;
  6936                                  ; Inputs:
  6937                                  ;	MOV	AH,International
  6938                                  ;	MOV	AL,country	(al = 0 => current country)
  6939                                  ;      [MOV	BX,country]
  6940                                  ;	LDS	DX,block
  6941                                  ;	INT	21
  6942                                  ; Function:
  6943                                  ;	give users an idea of what country the application is running
  6944                                  ; Outputs:
  6945                                  ;	IF DX != -1 on input (get country)
  6946                                  ;	  AL = 0 means return current country table.
  6947                                  ;	  0<AL<0FFH means return country table for country AL
  6948                                  ;	  AL = 0FF means return country table for country BX
  6949                                  ;	  No Carry:
  6950                                  ;	     Register BX will contain the 16-bit country code.
  6951                                  ;	     Register AL will contain the low 8 bits of the country code.
  6952                                  ;	     The block pointed to by DS:DX is filled in with the information
  6953                                  ;	     for the particular country.
  6954                                  ;		BYTE  Size of this table excluding this byte and the next
  6955                                  ;		BYTE  Country code represented by this table
  6956                                  ;			A sequence of n bytes, where n is the number specified
  6957                                  ;			by the first byte above and is not > internat_block_max,
  6958                                  ;			in the correct order for being returned by the
  6959                                  ;			INTERNATIONAL call as follows:
  6960                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6961                                  ;		5 BYTE	Currency symbol null terminated
  6962                                  ;		2 BYTE	thousands separator null terminated
  6963                                  ;		2 BYTE	Decimal point null terminated
  6964                                  ;		2 BYTE	Date separator null terminated
  6965                                  ;		2 BYTE	Time separator null terminated
  6966                                  ;		1 BYTE	Bit field.  Currency format.
  6967                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6968                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6969                                  ;		1 BYTE	No. of significant decimal digits in currency
  6970                                  ;		1 BYTE	Bit field.  Time format.
  6971                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6972                                  ;		DWORD	Call address of case conversion routine
  6973                                  ;		2 BYTE	Data list separator null terminated.
  6974                                  ;	  Carry:
  6975                                  ;	     Register AX has the error code.
  6976                                  ;	IF DX = -1 on input (set current country)
  6977                                  ;	  AL = 0 is an error
  6978                                  ;	  0<AL<0FFH means set current country to country AL
  6979                                  ;	  AL = 0FF means set current country to country BX
  6980                                  ;	  No Carry:
  6981                                  ;	    Current country SET
  6982                                  ;	    Register AL will contain the low 8 bits of the country code.
  6983                                  ;	  Carry:
  6984                                  ;	     Register AX has the error code.
  6985                                  ;-----------------------------------------------------------------------------
  6986                                  
  6987                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6988                                  
  6989                                  ; 13/05/2019 - Retro DOS v4.0
  6990                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6991                                  
  6992                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6993                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6994                                  
  6995                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6996                                  	 
  6997 00000C55 3CFF                    	CMP	AL,0FFH
  6998 00000C57 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6999 00000C59 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7000 00000C5B 30FF                    	XOR	BH,BH
  7001                                  BX_HAS_CODE:
  7002 00000C5D 1E                      	PUSH	DS
  7003 00000C5E 07                      	POP	ES
  7004 00000C5F 52                      	PUSH	DX
  7005 00000C60 5F                      	POP	DI			; User buffer to ES:DI
  7006                                  
  7007                                  ;hkn; SS is DOSDATA
  7008                                  ;	context DS
  7009                                  
  7010 00000C61 16                      	push	ss
  7011 00000C62 1F                      	pop	ds
  7012                                  
  7013 00000C63 83FFFF                  	CMP	DI,-1
  7014 00000C66 745D                    	JZ	short international_set
  7015 00000C68 09DB                    	OR	BX,BX
  7016 00000C6A 7505                    	JNZ	short international_find
  7017                                  
  7018                                  ;hkn; country_cdpg is in DOSDATA segment.
  7019 00000C6C BE[0512]                	MOV	SI,COUNTRY_CDPG
  7020                                  
  7021 00000C6F EB39                    	JMP	SHORT international_copy
  7022                                  
  7023                                  international_find:
  7024                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7025                                  	; 06/01/2024
  7026 00000C71 31ED                    	xor	bp,bp ; 0
  7027 00000C73 E80A00                  	CALL	international_get
  7028 00000C76 7255                    	JC	short errtn
  7029                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7030                                  	; 06/01/2024
  7031 00000C78 09DB                    	or	bx,bx
  7032 00000C7A 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7033 00000C7C 89D3                    	MOV	BX,DX			 ; put country back
  7034 00000C7E EB3A                    	JMP	SHORT international_ok3
  7035                                  
  7036                                  international_get:
  7037 00000C80 BE[0512]                	MOV	SI,COUNTRY_CDPG
  7038                                  
  7039                                  ;hkn; country_cdpg is in DOSDATA segment.
  7040                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7041                                  
  7042                                  	; MSDOS 3.3
  7043                                  	;;cmp	bx,[SI+63h]
  7044                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7045                                  	;jz	short RET27
  7046                                  
  7047                                  	; 13/05/2019 - Retro DOS v4.0
  7048                                  
  7049                                  	; MSDOS 6.0
  7050                                  	;cmp	bx,[ss:si+68h]
  7051 00000C83 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7052 00000C87 74CB                    	jz	short RET27			; return if equal
  7053                                  
  7054 00000C89 89DA                    	MOV	DX,BX
  7055 00000C8B 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7056                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7057 00000C8D B80014                  	mov	ax,1400h
  7058 00000C90 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7059                                  			; Return: AL = 00h not installed, OK to install
  7060                                  			; 01h not installed, not OK
  7061                                  			; FFh installed
  7062 00000C92 3CFF                    	CMP	AL,0FFH
  7063 00000C94 7510                    	JNZ	short interr		; not in memory
  7064                                  	
  7065                                  	; 06/01/2024
  7066 00000C96 B80314                  	mov	ax,1403h		; set country info
  7067                                  
  7068                                  	;cmp	bp,0
  7069 00000C99 09ED                    	or	bp,bp			; GetCntry ?
  7070 00000C9B 7501                    	JNZ	short stcdpg
  7071                                  	
  7072                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7073                                  	;mov	ax,1404h
  7074 00000C9D 40                      	inc	ax	; AX = 1404h ; get country info
  7075                                  
  7076                                  	; 06/01/2024
  7077                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7078                                  	;		; BX = code page, DX = country code,
  7079                                  	;		; DS:SI -> internal code page structure
  7080                                  	;		; ES:DI -> user buffer
  7081                                  	;		; Return: AL = status
  7082                                  	;
  7083                                  	;JMP	short chkok
  7084                                  	
  7085                                  	;nop
  7086                                  
  7087                                  stcdpg:
  7088                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7089                                  	; 06/01/2024
  7090                                  	;mov     ax,1403h
  7091                                  gscdpg:
  7092 00000C9E CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7093                                  			; DS:SI -> internal code page structure
  7094                                  			; BX = code page, DX = country code
  7095                                  			; Return: AL = status
  7096                                  chkok:
  7097 00000CA0 08C0                    	or	al,al			; success ?
  7098                                  	;retz				; yes
  7099 00000CA2 74B0                    	jz	short RET27
  7100                                  
  7101                                  setcarry:
  7102 00000CA4 F9                      	STC				; set carry
  7103 00000CA5 C3                      	retn
  7104                                  interr:
  7105 00000CA6 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7106 00000CA8 EBFA                    	JMP	short setcarry
  7107                                  
  7108                                  international_copy:
  7109                                  
  7110                                  ;hkn; country_cdpg is in DOSDATA segment.
  7111                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7112                                  
  7113                                  	; MSDOS 3.3
  7114                                  	;;mov	bx,[SI+63h]
  7115                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7116                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7117                                  
  7118                                  	; 13/05/2019 - Retro DOS v4.0
  7119                                  
  7120                                  	; MSDOS 6.0
  7121                                  	;mov	bx,[ss:si+68h]
  7122 00000CAA 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7123 00000CAE BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7124                                  
  7125                                  	;mov	cx,24
  7126 00000CB1 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7127                                  
  7128                                  	; MSDOS 6.0
  7129                                  
  7130                                  ;hkn;	must set up DS to SS so that international info can be copied
  7131                                  	
  7132 00000CB4 1E                      	push	ds
  7133                                  
  7134 00000CB5 16                      	push	ss			; cs -> ss
  7135 00000CB6 1F                      	pop	ds
  7136                                  
  7137 00000CB7 F3A4                    	REP	MOVSB			; copy country info
  7138                                  
  7139                                  	; MSDOS 6.0
  7140                                  
  7141 00000CB9 1F                      	pop	ds	;hkn;	restore ds
  7142                                  
  7143                                  international_ok3:
  7144 00000CBA E8C8F7                  	call	Get_User_Stack
  7145                                  ;ASSUME	DS:NOTHING
  7146                                  	;MOV	[SI+2],BX
  7147 00000CBD 895C02                  	MOV	[SI+user_env.user_BX],BX
  7148                                  international_ok:
  7149 00000CC0 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7150                                  ;SYS_RET_OK_jmp:
  7151                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7152                                  nono:	; 15/12/2022
  7153                                  SYS_RET_OK_jmp:
  7154 00000CC2 E976F9                  	jmp	SYS_RET_OK
  7155                                  
  7156                                  international_set:
  7157                                  
  7158                                  ;hkn; ASSUME	DS:DOSGROUP
  7159                                  ;ASSUME	DS:DOSDATA
  7160                                  
  7161 00000CC5 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7162 00000CC8 E8B5FF                  	CALL	international_get
  7163 00000CCB 73F3                    	JNC	short international_ok
  7164                                  errtn:
  7165 00000CCD 3CFF                    	CMP	AL,0FFH
  7166 00000CCF 7403                    	JZ	short errtn2
  7167                                  errtn1:
  7168 00000CD1 E970F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7169                                  errtn2:
  7170                                  	;error	error_invalid_function	; NLSFUNC not existent
  7171                                  
  7172                                  	;mov	al,1
  7173 00000CD4 B001                    	mov	al,error_invalid_function 
  7174 00000CD6 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7175                                  ;errtn3:
  7176                                  ;	jmp	SYS_RET_ERR
  7177                                  
  7178                                  ;EndProc $INTERNATIONAL
  7179                                  
  7180                                  ; 19/07/2018
  7181                                  
  7182                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7183                                  
  7184                                  ;----------------------------------------------------------------------------
  7185                                  ;
  7186                                  ; Procedure Name : $GetExtCntry
  7187                                  ;
  7188                                  ; Inputs:
  7189                                  ;	if AL >= 20H
  7190                                  ;	  AL= 20H    capitalize single char, DL= char
  7191                                  ;	      21H    capitalize string, CX= string length
  7192                                  ;	      22H    capitalize ASCIIZ string
  7193                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7194                                  ;	      80H bit 0 = use normal upper case table
  7195                                  ;		      1 = use file upper case table
  7196                                  ;	   DS:DX points to string
  7197                                  ;
  7198                                  ;	else
  7199                                  ;
  7200                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7201                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7202                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7203                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7204                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7205                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7206                                  ;	INT	21
  7207                                  ; Function:
  7208                                  ;	give users extended country dependent information
  7209                                  ;	or capitalize chars
  7210                                  ; Outputs:
  7211                                  ;	  No Carry:
  7212                                  ;	     extended country info is succesfully returned
  7213                                  ;	  Carry:
  7214                                  ;	     Register AX has the error code.
  7215                                  ;	     AX=0, NO	 for YES/NO CHECK
  7216                                  ;		1, YES
  7217                                  ;----------------------------------------------------------------------------
  7218                                  
  7219                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7220                                  
  7221                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7222                                  
  7223                                  	; MSDOS 6.0
  7224                                  _$GetExtCntry:
  7225 00000CD8 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7226 00000CDA 7269                    	JB	short notcap
  7227                                  capcap: 				;
  7228 00000CDC A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7229 00000CDE 7505                    	JNZ	short fileupper		; file upper case
  7230                                  
  7231                                  ;hkn; UCASE_TAB in DOSDATA
  7232 00000CE0 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7233 00000CE3 EB05                    	JMP	SHORT capit
  7234                                  
  7235                                  fileupper:
  7236                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7237                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7238                                  	; AL >= 80h
  7239 00000CE5 247F                    	and	al,7Fh
  7240                                  
  7241                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7242 00000CE7 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7243                                  capit:					;
  7244 00000CEA 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7245 00000CEC 750D                    	JNZ	short chkyes		; no
  7246 00000CEE 88D0                    	MOV	AL,DL			; set up AL
  7247 00000CF0 E86D42                  	call	GETLET3 		; upper case it
  7248 00000CF3 E88FF7                  	call	Get_User_Stack		; get user stack
  7249                                  	;mov	[si+6],al
  7250 00000CF6 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7251 00000CF9 EBC7                    	JMP	SHORT nono		; done
  7252                                  chkyes: 				;
  7253 00000CFB 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7254 00000CFD 7522                    	JNZ	short capstring		; no
  7255                                  
  7256 00000CFF 31C0                    	XOR	AX,AX			; presume NO
  7257                                  		      
  7258                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7259                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7260                                  
  7261                                  	; 06/08/2018 - Retro DOS v3.0
  7262                                  	; 13/05/2019 - Retro DOS v4.0
  7263                                  	;cmp	dl,'Y'
  7264 00000D01 2E3A16[1A0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7265 00000D06 7416                    	JZ	short yesyes		; yes
  7266                                  	;cmp	dl,'y'
  7267 00000D08 2E3A16[1C0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7268 00000D0D 740F                    	JZ	short yesyes		; yes
  7269                                  	;cmp	dl,'N'
  7270 00000D0F 2E3A16[1B0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7271 00000D14 74AC                    	JZ	short nono		; no
  7272                                  	;cmp	dl,'n'
  7273 00000D16 2E3A16[1D0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7274 00000D1B 74A5                    	JZ	short nono		; no
  7275                                  ;dbcs_char:				;
  7276 00000D1D 40                      	INC	AX			; not YES or NO
  7277                                  yesyes: 				;
  7278 00000D1E 40                      	INC	AX			; return 1
  7279                                  	; 15/12/2022
  7280                                  ;nono:	
  7281 00000D1F EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7282                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7283                                  	;jmp	SYS_RET_OK		; done
  7284                                  
  7285                                  capstring:				;
  7286 00000D21 89D6                    	MOV	SI,DX			; si=dx
  7287 00000D23 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7288 00000D25 750D                    	JNZ	short capascii		; no
  7289                                  	;OR	CX,CX			; check count 0
  7290                                  	;JZ	short nono		; yes finished
  7291                                  	; 06/01/2024
  7292 00000D27 E399                    	jcxz	nono
  7293                                  concap: 				;
  7294 00000D29 AC                      	LODSB				; get char
  7295 00000D2A E83342                  	call	GETLET3 		; upper case it
  7296 00000D2D 8844FF                  	MOV	byte [SI-1],AL		; store back
  7297                                  ;next99: 				;
  7298 00000D30 E2F7                    	LOOP	concap			; continue
  7299 00000D32 EB8E                    	JMP	short nono		; done
  7300                                  capascii:				;
  7301 00000D34 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7302 00000D36 7545                    	JNZ	short capinval		; no
  7303                                  concap2:				;
  7304 00000D38 AC                      	LODSB				; get char
  7305 00000D39 08C0                    	or	al,al			; end of string ?
  7306 00000D3B 7485                    	JZ	short nono		; yes
  7307 00000D3D E82042                  	call	GETLET3 		; upper case it
  7308 00000D40 8844FF                  	MOV	[SI-1],AL		; store back
  7309 00000D43 EBF3                    	JMP	short concap2 		; continue
  7310                                  
  7311                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7312                                  
  7313                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7314                                  ; _$GetExtCntry:
  7315                                  
  7316                                  notcap:
  7317 00000D45 83F905                  	CMP	CX,5			; minimum size is 5
  7318 00000D48 7277                    	jb	short sizeerror
  7319                                  
  7320                                  GEC_CONT:
  7321                                  ;hkn; SS is DOSDATA
  7322                                  	;context DS
  7323                                  
  7324 00000D4A 16                      	push	ss
  7325                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7326 00000D4B 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7327                                  	
  7328                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7329 00000D4C BE[0512]                	MOV	SI,COUNTRY_CDPG
  7330                                  
  7331 00000D4F 83FAFF                  	CMP	DX,-1			; active country ?
  7332 00000D52 7503                    	JNZ	short GETCDPG 		; no
  7333                                  
  7334                                  ;hkn; use DS override to accesss country_cdpg fields
  7335                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7336                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7337 00000D54 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7338                                  					; get active country id;smr;use DS
  7339                                  GETCDPG:
  7340 00000D57 83FBFF                  	CMP	BX,-1			; active code page?
  7341 00000D5A 7503                    	JNZ	short CHKAGAIN		; no, check again
  7342                                  
  7343                                  ;hkn; use DS override to accesss country_cdpg fields
  7344                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7345                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7346 00000D5C 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7347                                  					; get active code page id;smr;Use DS
  7348                                  CHKAGAIN:
  7349                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7350 00000D5F 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7351                                  					; same as active country id?;smr;use DS
  7352 00000D62 7550                    	JNZ	short CHKNLS		; no
  7353                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7354 00000D64 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7355                                  					; same as active code pg id?;smr;use DS
  7356 00000D67 754B                    	JNZ	short CHKNLS		; no
  7357                                  CHKTYPE:
  7358                                  	;mov	bx,[si+48h]
  7359 00000D69 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7360                                  					; bx = sys code page id;smr;use DS
  7361 00000D6C 51                      	PUSH	CX			; save cx
  7362                                  	;mov	cx,[si+4Ah]
  7363 00000D6D 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7364                                  	;mov	si,COUNTRY_CDPG+76
  7365 00000D70 BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7366                                  NXTENTRY:
  7367 00000D73 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7368 00000D75 740B                    	JZ	short FOUNDIT
  7369 00000D77 83C605                  	ADD	SI,5			; next entry
  7370 00000D7A E2F7                    	LOOP	NXTENTRY
  7371 00000D7C 59                      	POP	CX
  7372                                  capinval:
  7373                                  	;error	error_invalid_function	; info type not found
  7374                                  	;mov	al,1
  7375 00000D7D B001                    	mov	al,error_invalid_function
  7376                                  ;SYS_RET_ERR_jmp:
  7377                                  	;jmp	SYS_RET_ERR
  7378                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7379                                  SYS_RET_ERR_jmp:
  7380 00000D7F E9C2F8                  	jmp	SYS_RET_ERR	
  7381                                  
  7382                                  FOUNDIT:
  7383 00000D82 A4                      	MOVSB				; move info id byte
  7384 00000D83 59                      	POP	CX			; restore char count
  7385                                  	;cmp	al,1
  7386 00000D84 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7387 00000D86 7415                    	JZ	short setsize
  7388 00000D88 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7389 00000D8B B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7390                                  OK_RETN:
  7391 00000D8E F3A4                    	REP	MOVSB			; copy info
  7392 00000D90 89C1                    	MOV	CX,AX			; CX = actual length returned
  7393 00000D92 89D8                    	MOV	AX,BX			; return sys code page in ax
  7394                                  GETDONE:
  7395 00000D94 E8EEF6                  	call	Get_User_Stack		; return actual length to user's CX
  7396                                  	;mov	[si+4],cx 
  7397 00000D97 894C04                  	MOV	[SI+user_env.user_CX],CX
  7398                                  	;jmp	SYS_RET_OK
  7399                                  	; 15/12/2022
  7400                                  	; 25/06/2019
  7401 00000D9A E9A1F8                  	jmp	SYS_RET_OK_clc
  7402                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7403                                  	; 15/12/2022
  7404                                  ;nono_jmp:
  7405                                  	;jmp	short nono
  7406                                  setsize:
  7407 00000D9D 83E903                  	SUB	CX,3			; size after length field
  7408 00000DA0 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7409 00000DA2 7302                    	JAE	short setsize2		; no
  7410 00000DA4 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7411                                  setsize2:
  7412 00000DA6 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7413                                  	;ADD	DI,2			; update index
  7414                                  	;ADD	SI,2
  7415                                  	; 06/01/2024
  7416 00000DA9 47                      	inc	di
  7417 00000DAA 47                      	inc	di
  7418 00000DAB 46                      	inc	si
  7419 00000DAC 46                      	inc	si
  7420 00000DAD 89C8                    	MOV	AX,CX
  7421 00000DAF 83C003                  	ADD	AX,3			; AX has the actual length
  7422 00000DB2 EBDA                    	JMP	short OK_RETN 		; go move it
  7423                                  CHKNLS:
  7424 00000DB4 30E4                    	XOR	AH,AH
  7425                                  	;PUSH	AX			; save info type
  7426                                  	;POP	BP			; bp = info type
  7427                                  	; 06/01/2024
  7428 00000DB6 89C5                    	mov	bp,ax
  7429                                  	
  7430                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7431 00000DB8 B80014                  	mov     ax,1400h
  7432 00000DBB CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7433                                  			; Return: AL = 00h not installed, OK to install
  7434                                  			; 01h not installed, not OK
  7435                                  			; FFh installed
  7436 00000DBD 3CFF                    	CMP	AL,0FFH
  7437 00000DBF 7404                    	JZ	short NLSNXT		; in memory
  7438                                  
  7439                                  sizeerror:
  7440                                  	;error	error_invalid_function
  7441                                  	;mov	al,1
  7442 00000DC1 B001                    	mov	al,error_invalid_function
  7443                                  	;jmp	SYS_RET_ERR
  7444                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7445                                  sys_ret_err_jmp2:
  7446 00000DC3 EBBA                    	jmp	short SYS_RET_ERR_jmp
  7447                                  
  7448                                  NLSNXT: 
  7449                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7450 00000DC5 B80214                  	mov     ax,1402h
  7451 00000DC8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7452                                  			; BP = subfunction, BX = code page
  7453                                  			; DX = country code, DS:SI -> internal code page structure
  7454                                  			; ES:DI -> user buffer, CX = size of user buffer
  7455                                  			; Return: AL = status
  7456                                  			; 00h successful
  7457                                  			; else DOS error code
  7458                                  
  7459 00000DCA 3C00                    	CMP	AL,0			; success ?
  7460 00000DCC 7505                    	JNZ	short NLSERROR
  7461                                  	;mov	ax,[si+48h] ; 13/05/2019
  7462 00000DCE 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7463                                  			; ax = sys code page id;smr;use ds;
  7464                                  			;BUGBUG;check whether DS is OK after the above calls
  7465 00000DD1 EBC1                    	JMP	short GETDONE
  7466                                  seterr:
  7467                                  	; 15/12/2022
  7468                                  NLSERROR:
  7469                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7470                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7471                                  	;jmp	short sys_ret_err_jmp2
  7472                                  	; 15/12/2022
  7473 00000DD3 EBAA                    	jmp	short SYS_RET_ERR_jmp
  7474                                  
  7475                                  ;EndProc $GetExtCntry
  7476                                  
  7477                                  ; 13/05/2019 - Retro DOS v4.0
  7478                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7479                                  
  7480                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7481                                  ;----------------------------------------------------------------------------
  7482                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7483                                  ;
  7484                                  ;   System call format:
  7485                                  ;
  7486                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7487                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7488                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7489                                  ;	INT	21
  7490                                  ;
  7491                                  ;	ENTRY	(al) = n
  7492                                  ;		(bx) = code page
  7493                                  ;	EXIT	'C' clear
  7494                                  ;		  global code page is set	(set global code page)
  7495                                  ;		  (BX) = active code page id	(get global code page)
  7496                                  ;		  (DX) = system code page id	(get global code page)
  7497                                  ;		'C' set
  7498                                  ;		  (AX) = error code
  7499                                  
  7500                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7501                                  
  7502                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7503                                  	; DOSCODE:4BC9h
  7504                                  
  7505                                  _$GetSetCdPg:
  7506                                  
  7507                                  ;hkn; SS is DOSDATA
  7508                                  	;context DS
  7509                                  
  7510 00000DD5 16                      	push	ss
  7511 00000DD6 1F                      	pop	ds
  7512                                  
  7513                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7514 00000DD7 BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7515                                  
  7516 00000DDA 3C01                    	CMP	AL,1		       ; get global code page
  7517 00000DDC 7512                    	JNZ	short setglpg 	       ; set global code page
  7518                                  	
  7519                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7520                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7521 00000DDE 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7522                                  					; get active code page id;smr;use ds
  7523                                  	;mov	dx,[si+48h]
  7524 00000DE1 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7525                                  				  	; get sys code page id;smr;use ds
  7526 00000DE4 E89EF6                  	call	Get_User_Stack
  7527                                  ;ASSUME DS:NOTHING
  7528                                  	;;mov	[si+2],bx
  7529                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7530                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7531 00000DE7 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7532                                  	;mov	[si+6],dx
  7533 00000DEA 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7534                                  OK_RETURN:
  7535                                  	; 15/12/2022
  7536                                  	;transfer SYS_RET_OK
  7537 00000DED E94BF8                  	jmp	SYS_RET_OK
  7538                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7539                                  	;jmp	short nono_jmp
  7540                                  
  7541                                  ;hkn; ASSUME DS:DOSGROUP
  7542                                  ;ASSUME	DS:DOSDATA
  7543                                  
  7544                                  setglpg:
  7545 00000DF0 3C02                    	CMP	AL,2
  7546 00000DF2 752F                    	JNZ	short nomem
  7547                                  	
  7548                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7549                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7550 00000DF4 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7551                                  	
  7552                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7553 00000DF7 B80014                  	mov     ax,1400h
  7554 00000DFA CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7555                                  			; Return: AL = 00h not installed, OK to install
  7556                                  			; 01h not installed, not OK
  7557                                  			; FFh installed
  7558 00000DFC 3CFF                    	CMP	AL,0FFH
  7559 00000DFE 7523                    	JNZ	short nomem		; not in memory
  7560                                  
  7561                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7562 00000E00 B80114                  	mov     ax,1401h
  7563 00000E03 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7564                                  			; DS:SI -> internal code page structure
  7565                                  			; BX = new code page, DX = country code???
  7566                                  			; Return: AL = status
  7567                                  			; 00h successful
  7568                                  			; else DOS error code
  7569                                  	;cmp	al,0
  7570 00000E05 08C0                    	or	al,al			; success ?
  7571 00000E07 74E4                    	JZ	short OK_RETURN		; yes
  7572                                  
  7573 00000E09 3C41                    	CMP	AL,65			; set device code page failed
  7574 00000E0B 75C6                    	JNZ	short seterr
  7575                                  	;MOV	AX,65
  7576                                  	; 06/01/2024
  7577 00000E0D 98                      	cbw
  7578 00000E0E A3[2403]                	MOV	[EXTERR],AX
  7579                                  	;mov	byte [EXTERR_ACTION],6
  7580                                  	;mov	byte [EXTERR_CLASS],5
  7581                                  	;mov	byte [EXTERR_LOCUS],4
  7582 00000E11 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7583 00000E16 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7584 00000E1B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7585                                  	;transfer From_GetSet
  7586 00000E20 E929F8                  	jmp	From_GetSet
  7587                                  
  7588                                  	; 15/12/2022
  7589                                  ;seterr:
  7590                                  	;;;transfer SYS_RET_ERR
  7591                                  	;;jmp	SYS_RET_ERR
  7592                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7593                                  	;jmp	short NLSERROR
  7594                                  
  7595                                  nomem:
  7596                                  	;error	error_invalid_function	; function not defined
  7597                                  	;mov	al,1
  7598 00000E23 B001                    	mov	al,error_invalid_function
  7599 00000E25 EBAC                    	jmp	short seterr
  7600                                  
  7601                                  ;EndProc $GetSetCdPg
  7602                                  
  7603                                  ; 09/01/2024
  7604                                  ; 13/05/2019 - Retro DOS v4.0
  7605                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7606                                  
  7607                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7608                                  ;----------------------------------------------------------------------------
  7609                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7610                                  ;
  7611                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7612                                  ;		drive.
  7613                                  ;
  7614                                  ;	This call returns the same info in the same registers (except for the
  7615                                  ;	FAT pointer) as the old FAT pointer calls
  7616                                  ;
  7617                                  ;	ENTRY	DL = Drive number
  7618                                  ;	EXIT	AX = Sectors per allocation unit
  7619                                  ;		   = -1 if bad drive specified
  7620                                  ;		On User Stack
  7621                                  ;		    BX = Number of free allocation units
  7622                                  ;		    DX = Total Number of allocation units on disk
  7623                                  ;		    CX = Sector size
  7624                                  
  7625                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7626                                  
  7627                                  _$GET_DRIVE_FREESPACE:
  7628                                  
  7629                                  ;hkn; SS is DOSDATA
  7630                                  	;context DS
  7631 00000E27 16                      	push	ss
  7632 00000E28 1F                      	pop	ds
  7633                                  
  7634 00000E29 88D0                    	MOV	AL,DL
  7635                                  	;invoke	GetThisDrv		; Get drive
  7636 00000E2B E8585B                  	call	GETTHISDRV
  7637                                  SET_AX_RET:
  7638 00000E2E 7212                    	JC	short BADFDRV
  7639                                  	;invoke	DISK_INFO
  7640 00000E30 E82F1E                  	call	DISK_INFO
  7641 00000E33 87D3                    	XCHG	DX,BX
  7642                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7643                                  	; 06/01/2024
  7644 00000E35 720B                    	jc	short BADFDRV
  7645 00000E37 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7646                                  DoSt:
  7647 00000E39 E849F6                  	call	Get_User_Stack
  7648                                  ;ASSUME	DS:NOTHING
  7649                                  	;mov	[si+6],dx
  7650                                  	;;mov	[si+4],cx
  7651                                  	;;mov	[si+2],bx
  7652                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7653 00000E3C 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7654                                  	;MOV	[SI+user_env.user_CX],CX
  7655                                  	;MOV	[SI+user_env.user_BX],BX
  7656                                  	;;MOV	[SI+user_env.user_AX],AX
  7657                                  	;mov	[si],ax
  7658                                  	;;return
  7659                                  	;retn
  7660                                  	; 09/01/2024
  7661 00000E3F E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7662                                  
  7663                                  BADFDRV:
  7664                                  	; MSDOS 3.3
  7665                                  	;;mov	al,0Fh
  7666                                  	;mov	al,error_invalid_drive	; Assume error
  7667                                  
  7668                                  	; 13/05/2019 - Retro DOS v4.0
  7669                                  
  7670                                  	; MSDOS 6.0 & MSDOS 3.3
  7671                                  	;invoke	FCB_RET_ERR
  7672 00000E42 E815F8                  	call	FCB_RET_ERR
  7673                                  	
  7674 00000E45 B8FFFF                  	MOV	AX,-1
  7675 00000E48 EBEF                    	JMP	short DoSt
  7676                                  
  7677                                  ;EndProc $GET_DRIVE_FREESPACE
  7678                                  
  7679                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7680                                  ;----------------------------------------------------------------------------
  7681                                  ;**	$Get_DMA - Get Disk Transfer Address
  7682                                  ;
  7683                                  ;	ENTRY	none
  7684                                  ;	EXIT	ES:BX is current transfer address
  7685                                  ;	USES	all
  7686                                  
  7687                                  	; 09/01/2024
  7688                                  _$GET_DMA:
  7689 00000E4A 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7690 00000E4F 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7691 00000E54 E82EF6                  	call	Get_User_Stack
  7692                                  	;mov	[si+2],bx
  7693                                  	;mov	[si+10h],cx
  7694                                  	; 09/01/2024
  7695                                  	;MOV	[SI+user_env.user_BX],BX
  7696 00000E57 894C10                  	MOV	[SI+user_env.user_ES],CX
  7697                                  	;retn
  7698                                  	; 09/01/2024
  7699 00000E5A E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7700                                  
  7701                                  ;**	$Set_DMA - Set Disk Transfer Address
  7702                                  ;----------------------------------------------------------------------------
  7703                                  ;	ENTRY	DS:DX is current transfer address
  7704                                  ;	EXIT	none
  7705                                  ;	USES	all
  7706                                  
  7707                                  _$SET_DMA:
  7708 00000E5D 368916[2C03]            	MOV	[SS:DMAADD],DX
  7709 00000E62 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7710 00000E67 C3                      	retn
  7711                                  
  7712                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7713                                  ;------------------------------------------------------------------------------
  7714                                  
  7715                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7716                                  ;-----------------------------------------------------
  7717                                  ;	ENTRY	none
  7718                                  ;	EXIT	(AL) = drive number
  7719                                  ;	USES	all
  7720                                  
  7721                                  _$GET_DEFAULT_DRIVE:
  7722 00000E68 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7723 00000E6C C3                      	retn
  7724                                  
  7725                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7726                                  ;-----------------------------------------------------
  7727                                  ;	ENTRY	(DL) = Drive number for new default drive
  7728                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7729                                  
  7730                                  _$SET_DEFAULT_DRIVE:
  7731 00000E6D 88D0                    	MOV	AL,DL
  7732 00000E6F FEC0                    	INC	AL			; A=1, B=2...
  7733 00000E71 E8F65A                  	call	GetVisDrv		; see if visible drive
  7734 00000E74 7204                    	JC	short SETRET		; errors do not set
  7735 00000E76 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7736                                  
  7737                                  SETRET:
  7738 00000E7A 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7739 00000E7E C3                      	retn
  7740                                  
  7741                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7742                                  ;----------------------------------------------------------------------------
  7743                                  
  7744                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7745                                  ;---------------------------------------------------
  7746                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7747                                  ;	contents of an interrupt vector.
  7748                                  ;
  7749                                  ;	ENTRY	(AL) = interrupt number
  7750                                  ;	EXIT	(ES:BX) = current interrupt vector
  7751                                  
  7752                                  _$GET_INTERRUPT_VECTOR:
  7753 00000E7F E82E00                  	CALL	RECSET
  7754 00000E82 26C41F                  	LES	BX,[ES:BX]
  7755 00000E85 E8FDF5                  	call	Get_User_Stack
  7756                                  set_user_es_bx:
  7757                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7758                                  	;;mov	[si+2],bx
  7759                                  	;mov	[si+10h],es
  7760                                  	;MOV	[SI+user_env.user_BX],BX
  7761 00000E88 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7762                                  	;retn
  7763 00000E8B E9B7FD                  	jmp	set_user_bx
  7764                                  
  7765                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7766                                  ;---------------------------------------------------
  7767                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7768                                  ;	contents of an interrupt vector.
  7769                                  ;
  7770                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7771                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7772                                  ;	for explanation.
  7773                                  ;
  7774                                  ;	ENTRY	(AL) = interrupt number
  7775                                  ;		(ds:dx) = desired new vector value
  7776                                  ;	EXIT	none
  7777                                  ;	USES	all
  7778                                  
  7779                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7780                                  ; 13/05/2019 - Retro DOS v4.0
  7781                                  
  7782                                  _$SET_INTERRUPT_VECTOR:
  7783 00000E8E E81F00                  	CALL	RECSET
  7784 00000E91 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7785 00000E92 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7786 00000E95 268C5F02                	MOV	[ES:BX+2],DS
  7787 00000E99 FB                      	STI
  7788                                  					; M004, M068 - Start
  7789                                  	; MSDOS 6.0
  7790 00000E9A 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7791                                  					; Q: was the previous call an int 21h
  7792                                  					;    exec call
  7793                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7794                                  	;jnz	short siv_1		; Y: go set count
  7795                                  	;retn				; N: return
  7796                                  	; 15/12/2022
  7797 00000EA0 740D                    	jz	short siv_2
  7798                                  siv_1:	
  7799 00000EA2 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7800 00000EA8 7505                    	jnz	short siv_2		 ; N: done
  7801                                  	; 20/09/2023
  7802 00000EAA 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7803                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7804                                  					 ; dispatcher to turn A20 Off before
  7805                                  					 ; returning to user.
  7806                                  siv_2:
  7807                                  	; 07/12/2022
  7808 00000EAF C3                      	retn				; M004, M068 - End
  7809                                  	
  7810                                  RECSET:
  7811 00000EB0 31DB                    	XOR	BX,BX
  7812 00000EB2 8EC3                    	MOV	ES,BX
  7813 00000EB4 88C3                    	MOV	BL,AL
  7814 00000EB6 D1E3                    	SHL	BX,1
  7815 00000EB8 D1E3                    	SHL	BX,1
  7816 00000EBA C3                      	retn
  7817                                  
  7818                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7819                                  ;-------------------------------------------------------------------------------------
  7820                                  
  7821                                  ;**	$Char_Oper - Manipulate Switch Character
  7822                                  ;
  7823                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7824                                  ;
  7825                                  ;	ENTRY	AL = function:
  7826                                  ;		    0 - read switch char
  7827                                  ;		    1 - set switch char (char in DL)
  7828                                  ;		    2 - read device availability
  7829                                  ;			Always returns available
  7830                                  ;		    3 - set device availability
  7831                                  ;			No longer supported (NOP)
  7832                                  ;	EXIT	(al) = 0xff iff error
  7833                                  ;		(al) != 0xff if ok
  7834                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7835                                  ;	USES	AL, DL
  7836                                  ;
  7837                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7838                                  ;		The character / is always returned for subfunction 0,
  7839                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7840                                  
  7841                                  ; 13/05/2019 - Retro DOS v4.0
  7842                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7843                                  
  7844                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7845                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7846                                  
  7847                                  _$CHAR_OPER:
  7848                                  	; MSDOS 6.0
  7849 00000EBB 08C0                    	or	al,al				; get switch?
  7850 00000EBD B22F                    	mov	dl,'/'				; assume yes
  7851 00000EBF 7407                    	jz	short chop_1			; jump if yes
  7852 00000EC1 3C02                    	cmp	al,2				; check device availability?
  7853 00000EC3 B2FF                    	mov	dl,-1				; assume yes
  7854 00000EC5 7401                    	jz	short chop_1			; jump if yes
  7855 00000EC7 C3                      	retn					; otherwise just quit
  7856                                  
  7857                                  ; subfunctions requiring return of value to user come here. DL holds
  7858                                  ; value to return
  7859                                  
  7860                                  chop_1:
  7861 00000EC8 E8BAF5                  	call	Get_User_Stack
  7862 00000ECB 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7863 00000ECE C3                      	retn
  7864                                  
  7865                                  	; MSDOS 3.3
  7866                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7867                                  	;push	ss
  7868                                  	;pop	ds
  7869                                  	;cmp	al,1
  7870                                  	;jb	short chop_1
  7871                                  	;jz	short chop_2
  7872                                  	;cmp	al,3
  7873                                  	;jb	short chop_3
  7874                                  	;jz	short chop_5
  7875                                  	;mov	al,0FFh
  7876                                  	;retn
  7877                                  ;chop_1:
  7878                                  	;mov	dl,[chSwitch]
  7879                                  	;jmp	short chop_4
  7880                                  ;chop_2:
  7881                                  	;mov	[chSwitch],dl
  7882                                  	;retn
  7883                                  ;chop_3:
  7884                                  	;mov	dl, FFh
  7885                                  ;chop_4:
  7886                                  	;call	Get_User_Stack
  7887                                  	;mov	[si+6],dx
  7888                                  ;chop_5:
  7889                                  	;retn
  7890                                  
  7891                                  ;**	$GetExtendedError - Return Extended error code
  7892                                  ;----------------------------------------------------------------------------
  7893                                  ;	This function reads up the extended error info from the static
  7894                                  ;	variables where it was stored.
  7895                                  ;
  7896                                  ;	ENTRY	none
  7897                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7898                                  ;		BL = recommended action
  7899                                  ;		BH = class of error
  7900                                  ;		CH = locus of error
  7901                                  ;		ES:DI = may be pointer
  7902                                  ;	USES	ALL
  7903                                  
  7904                                  	; 09/01/2024
  7905                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7906                                  
  7907                                  _$GetExtendedError:
  7908 00000ECF 16                      	push	ss
  7909 00000ED0 1F                      	pop	ds
  7910 00000ED1 A1[2403]                	MOV	AX,[EXTERR]
  7911 00000ED4 C43E[2803]              	LES	DI,[EXTERRPT]
  7912 00000ED8 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7913 00000EDC 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7914 00000EE0 E8A2F5                  	call	Get_User_Stack
  7915                                  	;mov	[si+0Ah],di
  7916 00000EE3 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7917                                  
  7918                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7919                                  	;;mov	[si+10h],es
  7920                                  	;MOV	[SI+user_env.user_ES],ES
  7921                                  	;;mov	[si+2],bx
  7922                                  	;MOV	[SI+user_env.user_BX],BX
  7923 00000EE6 E89FFF                  	call	set_user_es_bx
  7924                                  
  7925                                  	;mov	[si+4],cx
  7926 00000EE9 894C04                  	MOV	[SI+user_env.user_CX],CX
  7927                                  jmp_SYS_RET_OK:
  7928                                  	; 15/12/2022
  7929                                  	;jmp	SYS_RET_OK
  7930                                  	; 25/06/2019
  7931 00000EEC E94FF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7932                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7933                                  ;jmp_SYS_RET_OK:
  7934                                  	;jmp	SYS_RET_OK
  7935                                  
  7936                                  ; --------------------------------------------------------------------------
  7937                                  ; 09/01/2024
  7938                                  %if 0
  7939                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7940                                  	; DOSCODE:4CF3h
  7941                                  ;patch_or_unknown:
  7942                                  ;get_code_page:
  7943                                  	push    si
  7944                                  	mov     si, COUNTRY_CDPG
  7945                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7946                                  	mov     ax, [ss:si+6Ah]
  7947                                  	pop     si
  7948                                  	retn
  7949                                  %endif
  7950                                  ; --------------------------------------------------------------------------
  7951                                  
  7952                                  ; 29/04/2019 - Retro DOS v4.0
  7953                                  
  7954                                  ;BREAK	<ECS_call - Extended Code System support function>
  7955                                  ;---------------------------------------------------------------------------
  7956                                  ; Inputs:
  7957                                  ;	AL = 0	get lead byte table
  7958                                  ;		on return DS:SI has the table location
  7959                                  ;
  7960                                  ;	AL = 1	set / reset interim console flag
  7961                                  ;		DL = flag (00H or 01H)
  7962                                  ;		no return
  7963                                  ;
  7964                                  ;	AL = 2	get interim console flag
  7965                                  ;		on return DL = current flag value
  7966                                  ;
  7967                                  ;	AL = OTHER then error, and returns with:
  7968                                  ;		AX = error_invalid_function
  7969                                  ;
  7970                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7971                                  ;	 SS:SP WILL BE PRESERVED!
  7972                                  ;---------------------------------------------------------------------------
  7973                                  
  7974                                  _$ECS_Call:
  7975 00000EEF 08C0                    	or	al,al			; AL = 0 (get table)?
  7976                                  	;jnz	short _okok
  7977                                  	; 15/12/2022
  7978 00000EF1 7403                    	jz	short get_lbt
  7979                                  ;_okok:
  7980 00000EF3 E945F7                  	jmp	SYS_RET_OK
  7981                                  get_lbt:
  7982 00000EF6 E88CF5                  	call	Get_User_Stack		; *
  7983                                  
  7984                                  ;hkn; dbcs_table moved low to dosdata
  7985                                  	;mov	word [si+8],DBCS_TAB+2
  7986 00000EF9 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7987                                  
  7988 00000EFE 06                      	push	es
  7989                                  	;getdseg <es>			; es = DOSDATA
  7990 00000EFF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7991                                  	;mov	[si+14],es
  7992 00000F04 8C440E                  	mov	[SI+user_env.user_DS],es
  7993 00000F07 07                      	pop	es
  7994                                  
  7995                                  	; 15/12/2022
  7996 00000F08 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7997                                  ;_okok:
  7998                                  	; 15/12/2022	
  7999                                  	;;transfer SYS_RET_OK
  8000                                  	;jmp	short jmp_SYS_RET_OK
  8001                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8002                                  	;;jmp	SYS_RET_OK
  8003                                  	;jmp	short jmp_SYS_RET_OK
  8004                                  
  8005                                  ;============================================================================
  8006                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8007                                  ;============================================================================
  8008                                  ; 19/07/2018 - Retro DOS v3.0
  8009                                  ; 15/05/2019 - Retro DOS v4.0
  8010                                  
  8011                                  ; System calls for parsing command lines
  8012                                  ;
  8013                                  ;   $PARSE_FILE_DESCRIPTOR
  8014                                  ;
  8015                                  ;   Modification history:
  8016                                  ;
  8017                                  ;       Created: ARR 30 March 1983
  8018                                  ;               EE PathParse 10 Sept 1983
  8019                                  ;
  8020                                  
  8021                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8022                                  ;---------------------------------------------------------------------------
  8023                                  ; Inputs:
  8024                                  ;       DS:SI Points to a command line
  8025                                  ;       ES:DI Points to an empty FCB
  8026                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8027                                  ;                   = 0 Parse stops if separator encountered
  8028                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8029                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8030                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8031                                  ;                   = 0  "       "      "       - put blanks in FCB
  8032                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8033                                  ;                   = 0  "       "      "        - put blanks in FCB
  8034                                  ; Function:
  8035                                  ;       Parse command line into FCB
  8036                                  ; Returns:
  8037                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8038                                  ;       DS:SI points to first character after filename
  8039                                  ;---------------------------------------------------------------------------
  8040                                  
  8041                                  _$PARSE_FILE_DESCRIPTOR:
  8042 00000F0A E8FB3E                  	call	MAKEFCB
  8043 00000F0D 56                      	PUSH    SI
  8044 00000F0E E874F5                  	call	Get_User_Stack
  8045                                  	;pop	word [si+8]
  8046 00000F11 8F4408                  	POP     word [SI+user_env.user_SI]
  8047 00000F14 C3                      	retn
  8048                                  
  8049                                  ;============================================================================
  8050                                  ; MISC.ASM, MSDOS 6.0, 1991
  8051                                  ;============================================================================
  8052                                  ; 19/07/2018 - Retro DOS v3.0
  8053                                  
  8054                                  ; 29/04/2019 - Retro DOS v4.0
  8055                                  
  8056                                  ;ENTRYPOINTSEG	EQU	0CH
  8057                                  ;MAXDIF		EQU	0FFFH
  8058                                  ;SAVEXIT 	EQU	10
  8059                                  ;WRAPOFFSET	EQU	0FEF0h
  8060                                  
  8061                                  ;
  8062                                  ;----------------------------------------------------------------------------
  8063                                  ;
  8064                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8065                                  ;
  8066                                  ;	Return Stuff sort of like old get fat call
  8067                                  ;
  8068                                  ;	ENTRY	none
  8069                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8070                                  ;			GOD help anyone who tries to do ANYTHING except
  8071                                  ;			READ this ONE byte.
  8072                                  ;		DX = Total Number of allocation units on disk
  8073                                  ;		CX = Sector size
  8074                                  ;		AL = Sectors per allocation unit
  8075                                  ;		   = -1 if bad drive specified
  8076                                  ;	USES	all
  8077                                  ;
  8078                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8079                                  ;
  8080                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8081                                  ;
  8082                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8083                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8084                                  ;			GOD help anyone who tries to do ANYTHING except
  8085                                  ;			READ this ONE byte.
  8086                                  ;		DX = Total Number of allocation units on disk
  8087                                  ;		CX = Sector size
  8088                                  ;		AL = Sectors per allocation unit
  8089                                  ;		   = -1 if bad drive specified
  8090                                  ;	USES	all
  8091                                  ;
  8092                                  ;----------------------------------------------------------------------------
  8093                                  ;
  8094                                  
  8095                                  _$SLEAZEFUNC:
  8096                                  	; 10/01/2024
  8097                                  	; 15/05/2019 - Retro DOS v4.0
  8098 00000F15 B200                    	MOV	DL,0
  8099                                  _$SLEAZEFUNCDL:
  8100 00000F17 16                      	push	ss
  8101 00000F18 1F                      	pop	ds
  8102                                  	
  8103 00000F19 88D0                    	MOV	AL,DL
  8104 00000F1B E8685A                  	call	GETTHISDRV		; Get CDS structure
  8105                                  SET_AL_RET:
  8106                                  	; MSDOS 3.3
  8107                                  	;;mov	al, 0Fh
  8108                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8109                                  	
  8110                                  	; MSDOS 6.0 & MSDOS 3.3
  8111 00000F1E 721D                    	JC	short BADSLDRIVE
  8112                                  
  8113 00000F20 E83F1D                  	call	DISK_INFO
  8114                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8115 00000F23 7218                    	jc	short BADSLDRIVE
  8116 00000F25 8826[9805]              	MOV	[FATBYTE],AH
  8117                                  
  8118                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8119                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8120                                  ; CALL AGAIN
  8121                                  
  8122                                  	; 10/01/2024
  8123                                  	;MOV	DI,FATBYTE
  8124 00000F29 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8125 00000F2B E857F5                  	call	Get_User_Stack
  8126                                  	;mov	[si+4],cx
  8127                                  	;mov	[si+6],bx
  8128                                  	;mov	[si+2],di
  8129 00000F2E 894C04                  	MOV	[SI+user_env.user_CX],CX
  8130 00000F31 895C06                  	MOV	[SI+user_env.user_DX],BX
  8131                                  	;MOV	[SI+user_env.user_BX],DI
  8132                                  	; 10/01/2024
  8133 00000F34 C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8134                                  	
  8135                                  	;mov	[si+0Eh],ss
  8136 00000F39 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8137                                  
  8138 00000F3C C3                      	retn
  8139                                  
  8140                                  BADSLDRIVE:
  8141 00000F3D E91AF7                  	jmp	FCB_RET_ERR
  8142                                  
  8143                                  ;
  8144                                  ;----------------------------------------------------------------------------
  8145                                  ;
  8146                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8147                                  ;
  8148                                  ;	Returns location of DOS status for interrupt routines
  8149                                  ;
  8150                                  ;	ENTRY	none
  8151                                  ;	EXIT	(es:bx) = flag location
  8152                                  ;	USES	all
  8153                                  ;
  8154                                  ;----------------------------------------------------------------------------
  8155                                  ;
  8156                                  
  8157                                  _$GET_INDOS_FLAG:
  8158 00000F40 E842F5                          CALL	Get_User_Stack
  8159                                          ;MOV	WORD [SI+2],INDOS
  8160 00000F43 C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8161                                  getin_segm:	; 13/01/2024
  8162                                  	;MOV	[SI+10H],SS
  8163 00000F48 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8164 00000F4B C3                      	RETN 
  8165                                  ;
  8166                                  ;----------------------------------------------------------------------------
  8167                                  ;
  8168                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8169                                  ;
  8170                                  ;	Return a pointer to interesting DOS variables This call is version
  8171                                  ;	dependent and is subject to change without notice in future versions.
  8172                                  ;	Use at risk.
  8173                                  ;
  8174                                  ;	ENTRY	none
  8175                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8176                                  ;	uses	ALL
  8177                                  ;
  8178                                  ;----------------------------------------------------------------------------
  8179                                  ;
  8180                                  
  8181                                  	; 13/01/2024
  8182                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8183                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8184                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8185                                  
  8186                                  _$GET_IN_VARS:
  8187 00000F4C E836F5                  	CALL	Get_User_Stack
  8188                                  	;MOV	WORD [SI+2],SYSINITVAR
  8189                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8190 00000F4F C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8191                                  	; 13/01/2024
  8192                                  	;;MOV	[SI+10H],SS
  8193                                  	;MOV	[SI+user_env.user_ES],SS
  8194                                  	;RETN
  8195 00000F54 EBF2                    	jmp	short getin_segm
  8196                                  
  8197                                  ;
  8198                                  ;----------------------------------------------------------------------------
  8199                                  ;
  8200                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8201                                  ;
  8202                                  ;	Return pointer to drive parameter table for default drive
  8203                                  ;
  8204                                  ;	ENTRY	none
  8205                                  ;	EXIT	(ds:bx) = DPB address
  8206                                  ;	USES	all
  8207                                  ;
  8208                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8209                                  ;
  8210                                  ;	Return pointer to a specified drive parameter table
  8211                                  ;
  8212                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8213                                  ;	EXIT	(al) = 0 iff ok
  8214                                  ;		  (ds:bx) = DPB address
  8215                                  ;		(al) = -1 if bad drive
  8216                                  ;	USES	all
  8217                                  ;
  8218                                  ;----------------------------------------------------------------------------
  8219                                  ;
  8220                                  
  8221                                  ; 15/05/2019 - Retro DOS v4.0
  8222                                  
  8223                                  _$GET_DEFAULT_DPB:
  8224 00000F56 B200                    	MOV	DL,0
  8225                                  _$GET_DPB:
  8226 00000F58 16                      	push	ss
  8227 00000F59 1F                      	pop	ds
  8228                                  
  8229 00000F5A 88D0                    	MOV	AL,DL
  8230 00000F5C E8275A                  	call	GETTHISDRV		; Get CDS structure
  8231 00000F5F 7222                    	JC	short ISNODRV 		; no valid drive
  8232 00000F61 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8233                                  	;;test	word [es:di+43h],8000h
  8234                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8235                                  	;test	byte [es:di+44h],80h
  8236 00000F65 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8237 00000F6A 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8238 00000F6C E88903                  	call	ECritDisk
  8239 00000F6F E85146                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8240 00000F72 E89E03                  	call	LCritDisk
  8241 00000F75 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8242                                  					;   have.
  8243 00000F77 E80BF5                  	call	Get_User_Stack
  8244                                  	;mov	[si+2],bp
  8245 00000F7A 896C02                  	MOV	[SI+user_env.user_BX],BP
  8246                                  	;mov	[si+0Eh],es
  8247 00000F7D 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8248 00000F80 30C0                    	XOR	AL,AL
  8249 00000F82 C3                      	retn
  8250                                  ISNODRV:
  8251 00000F83 B0FF                    	MOV	AL,-1
  8252 00000F85 C3                      	retn
  8253                                  
  8254                                  ;
  8255                                  ;----------------------------------------------------------------------------
  8256                                  ;
  8257                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8258                                  ;
  8259                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8260                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8261                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8262                                  ;
  8263                                  ;	ENTRY	none
  8264                                  ;	EXIT	none
  8265                                  ;	USES	all
  8266                                  ;
  8267                                  ;----------------------------------------------------------------------------
  8268                                  ;
  8269                                  
  8270                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8271                                  	; DOSCODE:4D94h
  8272                                  _$DISK_RESET:
  8273                                  	; 15/05/2019 - Retro DOS v4.0
  8274 00000F86 B0FF                    	mov	al,0FFh	; -1
  8275 00000F88 16                      	push	ss
  8276 00000F89 1F                      	pop	ds
  8277                                  	; 06/11/2022
  8278                                  	;MOV	AL,-1
  8279 00000F8A E86B03                  	call	ECritDisk
  8280                                  	; MSDOS 6.0
  8281                                  	;;or	word [DOS34_FLAG],4
  8282                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8283 00000F8D 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8284 00000F92 E8A749                  	call	FLUSHBUF
  8285                                  	; MSDOS 6.0
  8286                                  	;and	word [DOS34_FLAG],0FFFBh
  8287                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8288                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8289                                  	; 15/12/2022
  8290 00000F95 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8291 00000F9A C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8292                                  ;
  8293                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8294                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8295                                  ; let's do it.
  8296                                  ;
  8297                                  ; Invalidate 'last-buffer' used
  8298                                  ;
  8299 00000FA0 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8300 00000FA3 891E[2000]              	MOV	[LastBuffer+2],BX
  8301 00000FA7 891E[1E00]              	MOV	[LastBuffer],BX
  8302                                  
  8303                                  	; MSDOS 3.3 
  8304                                  	; IBMDOS.COM, Offset 1C66h
  8305                                  	;;;;
  8306                                  	;lds	si,[BUFFHEAD]
  8307                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8308                                  				; .buf_flags, AH = 0, reset/clear
  8309                                  ;DRST_1:
  8310                                  	;;mov	[si+4],ax
  8311                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8312                                  	;lds	si,[SI]
  8313                                  	;cmp	si,bx ; -1
  8314                                  	;je	short DRST_2
  8315                                  	;;mov	[si+4],ax
  8316                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8317                                  	;lds	si,[SI]
  8318                                  	;cmp	si,bx
  8319                                  	;jne	short DRST_1
  8320                                  	;;;;
  8321                                  ;DRST_2:
  8322 00000FAB E86503                  	call	LCritDisk
  8323 00000FAE B8FFFF                  	MOV	AX,-1
  8324                                  	; 07/12/2022
  8325                                  	;mov	ax,0FFFFh
  8326                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8327 00000FB1 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8328 00000FB2 B82011                  	mov     ax,1120h
  8329 00000FB5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8330                                  			; DS = DOS CS
  8331                                  			; Return: CF clear (successful)
  8332 00000FB7 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8333                                  	
  8334 00000FB8 C3                      	retn
  8335                                  
  8336                                  	; 19/07/2018 - Retro DOS v3.0
  8337                                  
  8338                                  ;
  8339                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8340                                  ;
  8341                                  ;----------------------------------------------------------------------------
  8342                                  ;
  8343                                  ;**	$SetDPB - Create a DPB
  8344                                  ;
  8345                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8346                                  ;
  8347                                  ;	ENTRY	ES:BP Points to DPB
  8348                                  ;		DS:SI Points to BPB
  8349                                  ;	EXIT	DPB setup
  8350                                  ;	USES	ALL but BP, DS, ES
  8351                                  ;
  8352                                  ;----------------------------------------------------------------------------
  8353                                  ;
  8354                                  
  8355                                  ; 10/05/2019 - Retro DOS v4.0
  8356                                  
  8357                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8358                                  
  8359                                  ; MSDOS 6.0
  8360 00000FB9 0300                    word3:	dw	3			; M008 -- word value for divides
  8361                                  
  8362                                  ; 13/01/2024
  8363                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8364                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8365                                  
  8366                                  ;procedure   $SETDPB,NEAR
  8367                                  
  8368                                  _$SETDPB:
  8369 00000FBB 89EF                    	MOV	DI,BP
  8370                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8371                                  	; 13/01/2024
  8372 00000FBD 47                      	inc	di
  8373 00000FBE 47                      	inc	di
  8374 00000FBF AD                      	LODSW
  8375 00000FC0 AB                      	STOSW				; dpb_sector_size
  8376                                  	; MSDOS 6.0
  8377                                  	;cmp	byte [si+3],0
  8378 00000FC1 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8379 00000FC5 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8380                                  	;mov	byte [es:di+4],0
  8381 00000FC7 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8382                                  	; 13/01/2024
  8383 00000FCC 89C3                    	mov	bx,ax
  8384 00000FCE EB70                    	JMP	short setend			     ; NO		;AN000;
  8385                                  
  8386                                  yesfat: ; 10/08/2018
  8387 00000FD0 89C2                    	MOV	DX,AX
  8388 00000FD2 AC                      	LODSB
  8389                                  	;DEC	AL
  8390                                  	; 17/12/2022
  8391 00000FD3 48                      	dec	ax
  8392 00000FD4 AA                      	STOSB				; dpb_cluster_mask
  8393                                  	;INC	AL
  8394 00000FD5 40                      	inc	ax
  8395 00000FD6 30E4                    	XOR	AH,AH
  8396                                  LOG2LOOP:
  8397 00000FD8 A801                    	test	AL,1
  8398 00000FDA 7506                    	JNZ	short SAVLOG
  8399 00000FDC FEC4                    	INC	AH
  8400 00000FDE D0E8                    	SHR	AL,1
  8401 00000FE0 EBF6                    	JMP	SHORT LOG2LOOP
  8402                                  SAVLOG:
  8403 00000FE2 88E0                    	MOV	AL,AH
  8404 00000FE4 AA                      	STOSB				; dpb_cluster_shift
  8405 00000FE5 88C3                    	MOV	BL,AL
  8406 00000FE7 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8407 00000FE8 AC                      	LODSB
  8408 00000FE9 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8409                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8410                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8411 00000FEA 88C7                    	MOV	BH,AL
  8412 00000FEC AD                      	LODSW
  8413 00000FED AB                      	STOSW				; dpb_root_entries Number of directory entries
  8414 00000FEE B105                    	MOV	CL,5
  8415 00000FF0 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8416 00000FF2 48                      	DEC	AX
  8417 00000FF3 01D0                    	ADD	AX,DX			; Cause Round Up
  8418 00000FF5 89D1                    	MOV	CX,DX
  8419 00000FF7 31D2                    	XOR	DX,DX
  8420 00000FF9 F7F1                    	DIV	CX
  8421 00000FFB 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8422 00000FFD 47                      	INC	DI
  8423 00000FFE 47                      	INC	DI			; Skip dpb_first_sector
  8424 00000FFF A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8425 00001000 AC                      	LODSB
  8426                                  	;mov	[es:bp+17h],al
  8427 00001001 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8428 00001005 AD                      	LODSW				; Number of sectors in a FAT
  8429                                  	
  8430                                  	;;;
  8431                                  	;MSDOS 3.3
  8432                                  	;
  8433                                  	;STOSB		; DPB.FAT_SIZE
  8434                                  	;MUL	BH
  8435                                  	
  8436                                  	;MSDOS 6.0
  8437                                  	;
  8438 00001006 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8439 00001007 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8440 00001009 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8441 0000100B F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8442                                  	;;;
  8443                                  	
  8444                                  	;add	ax,[es:bp+6]
  8445 0000100D 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8446 00001011 AB                      	STOSW				; dpb_dir_sector
  8447 00001012 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8448                                  	;mov	[es:bp+0Bh],ax
  8449 00001014 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8450                                  	
  8451                                  	; MSDOS 6.0
  8452 00001018 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8453                                  	;;cmp	word [es:bp+0Dh],0
  8454                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8455                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8456                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8457                                  	; 15/12/2022
  8458                                  	; 28/07/2019
  8459 0000101A 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8460 0000101E 09DB                    	or	bx,bx
  8461 00001020 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8462                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8463                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8464                                  	
  8465                                  
  8466 00001022 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8467                                  	;mov	bx,[si+8]
  8468 00001024 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8469                                  	;mov	dx,[si+10]
  8470 00001027 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8471 0000102A 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8472 0000102C 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8473 0000102F 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8474 00001031 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8475                                  rott:					;AN000;;F.C. >32mb
  8476 00001033 F8                      	CLC				;AN000;;F.C. >32mb
  8477 00001034 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8478 00001036 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8479 00001038 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8480                                  norot:					;AN000;
  8481                                  	; 15/12/2022
  8482                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8483 0000103A EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8484                                  normal_dpb:
  8485                                  	;;sub	ax,[es:bp+0Dh]
  8486                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8487                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8488                                  	; 15/12/2022
  8489                                  	; bx = [es:bp+DSKSIZ]
  8490                                  	;sub	ax,bx ; 28/07/2019
  8491                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8492                                  	; 15/12/2022
  8493 0000103C 29C3                    	sub	bx,ax
  8494                                  	;NEG	AX			; Sectors in data area
  8495                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8496                                  	; 15/12/2022
  8497                                  	; CL = cluster shift
  8498                                  	; BX = number of data sectors 
  8499                                  	;SHR	AX,CL			; Div by sectors/cluster
  8500 0000103E D3EB                    	shr	bx,cl 
  8501                                  setend:
  8502                                  ;	M008 - CAS
  8503                                  ;
  8504                                  	; 15/12/2022
  8505 00001040 43                      	inc	bx
  8506                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8507                                  ;
  8508                                  ;	There has been a bug in our fatsize calculation for so long
  8509                                  ;	  that we can't correct it now without causing some user to
  8510                                  ;	  experience data loss. There are even cases where allowing
  8511                                  ;	  the number of clusters to exceed the fats is the optimal
  8512                                  ;	  case -- where adding 2 more fat sectors would make the
  8513                                  ;	  data field smaller so that there's nothing to use the extra
  8514                                  ;	  fat sectors for.
  8515                                  ;
  8516                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8517                                  ;	  still report that there was a cluster left when the disk was
  8518                                  ;	  actually full. Very graceful failure for a corrupt system
  8519                                  ;	  configuration. There may be worse cases that were never
  8520                                  ;	  properly traced back to this bug. The problem cases only
  8521                                  ;	  occurred when partition sizes were very near FAT sector
  8522                                  ;	  rounding boundaries, which were rare cases.
  8523                                  ;
  8524                                  ;	Also, it's possible that some third-party partition program might
  8525                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8526                                  ;	  scheme. In this hypothetical case, the number of allocation
  8527                                  ;	  clusters which don't actually have FAT entries to represent
  8528                                  ;	  them might be larger and might create a more catastrophic
  8529                                  ;	  failure. So we'll provide the safeguard of limiting the
  8530                                  ;	  max_cluster to the amount that will fit in the FATs.
  8531                                  ;
  8532                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8533                                  
  8534                                  ;	make sure the number of fat sectors is actually enough to
  8535                                  ;	  hold that many clusters. otherwise, back the number of
  8536                                  ;	  clusters down
  8537                                  
  8538                                  	; 15/12/2022
  8539                                  	; bx = number of clusters
  8540                                  
  8541                                  	; 19/07/2018 - Retro DOS v3.0
  8542                                  	; MSDOS 6.0
  8543                                  	; 15/12/2022
  8544                                  	;mov	bx,ax			; remember calculated # clusters
  8545                                  
  8546                                  	; 01/08/2018 (MSDOS 3.3)
  8547                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8548                                  	;xor	ah,ah 
  8549                                  
  8550                                  	; 10/05/2019 - Retro DOS v4.0
  8551                                  	;mov	ax,[ES:BP+0Fh]
  8552 00001041 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8553                                  
  8554                                  	;mul	word [es:bp+2]	
  8555 00001045 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8556 00001049 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8557 0000104D 720D                    	jb	short setend_fat12
  8558 0000104F D1EA                    	shr	dx,1
  8559                                  
  8560                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8561                                  	; 15/12/2022
  8562                                  ;cs3 7/2/92
  8563 00001051 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8564                                  					; than enough for the maximum FAT,
  8565                                  					; so go ahead and use the calculated
  8566                                  					; number of clusters.
  8567                                  ;cs3 7/2/92
  8568                                  
  8569 00001053 D1D8                    	rcr	ax,1			; find number of entries
  8570 00001055 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8571                                  ;					;  into 12-bit fatland?
  8572 00001058 7215                    	jb	short setend_faterr	; then go ahead and let the
  8573                                  ;					;  inconsistency pass through
  8574                                  ;					;  rather than lose data by
  8575                                  ;					;  correcting the fat type
  8576 0000105A EB0E                    	jmp	short setend_fat16
  8577                                  
  8578                                  setend_fat12:
  8579 0000105C 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8580 0000105E 11D2                    	adc	dx,dx
  8581                                  
  8582                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8583                                  ;cs3 7/2/92
  8584                                  	; 15/12/2022
  8585 00001060 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8586 00001063 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8587                                  					; here. Check for it and use
  8588                                  					; the calculated size in this case.
  8589                                  ;cs3 7/2/92
  8590                                  
  8591 00001065 2EF736[B90F]            	div	word [cs:word3]
  8592                                  
  8593                                  setend_fat16:
  8594 0000106A 48                      	dec	ax			; limit at 1
  8595 0000106B 39D8                    	cmp	ax,bx			; is fat big enough?
  8596 0000106D 7602                    	jbe	short setend_fat	; use max value that'll fit
  8597                                  
  8598                                  setend_faterr:
  8599 0000106F 89D8                    	mov	ax,bx			; use calculated value
  8600                                  
  8601                                  setend_fat:
  8602                                  
  8603                                  ;	now ax = maximum legal cluster
  8604                                  
  8605                                  ;	end M008
  8606                                  
  8607                                  	;mov	[es:bp+0Dh], ax
  8608 00001071 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8609                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8610                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8611 00001075 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8612                                  					; Init so first ALLOC starts at
  8613                                  					; begining of FAT
  8614                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8615                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8616 0000107B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8617                                  
  8618 00001081 C3                      	retn
  8619                                  
  8620                                  ;EndProc $SETDPB
  8621                                  
  8622                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8623                                  
  8624                                  ;
  8625                                  ;----------------------------------------------------------------------------
  8626                                  ;
  8627                                  ;**	$Dup_PDB
  8628                                  ;
  8629                                  ; Inputs:   DX is new segment address of process
  8630                                  ;	    SI is end of new allocation block
  8631                                  ;
  8632                                  ;----------------------------------------------------------------------------
  8633                                  ;
  8634                                  
  8635                                  _$DUP_PDB:
  8636                                  
  8637                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8638                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8639                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8640                                  
  8641                                  	; MSDOS 3.3
  8642                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8643                                  	;MOV	DS,[CS:CurrentPDB]
  8644                                  
  8645                                  	; 15/05/2019 - Retro DOS v4.0
  8646                                  	; MSDOS 6.0
  8647 00001082 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8648 00001087 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8649 0000108C 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8650                                  
  8651 00001090 56                      	PUSH	SI
  8652 00001091 EB0A                    	JMP	SHORT CreateCopy
  8653                                  
  8654                                  ;
  8655                                  ;----------------------------------------------------------------------------
  8656                                  ;
  8657                                  ; Inputs:
  8658                                  ;	DX = Segment number of new base
  8659                                  ; Function:
  8660                                  ;	Set up program base and copy term and ^C from int area
  8661                                  ; Returns:
  8662                                  ;	None
  8663                                  ; Called at DOS init
  8664                                  ;
  8665                                  ;----------------------------------------------------------------------------
  8666                                  ;
  8667                                  
  8668                                  ; 15/05/2019 - Retro DOS v4.0
  8669                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8670                                  
  8671                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8672                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8673                                  
  8674                                  _$CREATE_PROCESS_DATA_BLOCK:
  8675                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8676 00001093 E8EFF3                  	CALL	Get_User_Stack
  8677                                  	;mov	ds,[si+14h]
  8678 00001096 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8679                                  	;push	word [2]
  8680 00001099 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8681                                  CreateCopy:
  8682 0000109D 8EC2                    	MOV	ES,DX
  8683                                  
  8684 0000109F 31F6                    	XOR	SI,SI			; copy entire PDB
  8685 000010A1 89F7                    	MOV	DI,SI
  8686 000010A3 B98000                  	MOV	CX,128
  8687 000010A6 F3A5                    	REP	MOVSW
  8688                                  
  8689                                  ; DOS 3.3 7/9/86
  8690                                  	;mov	cx,20
  8691                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8692                                  	; 15/12/2022
  8693 000010A8 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8694                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8695                                  	;mov	cx,FILPERPROC
  8696                                  
  8697                                  	;mov	di,18h
  8698 000010AA BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8699                                  	;;PUSH	DS ; * 15/05/2019
  8700                                  	;;lds	si,[34h]
  8701                                  	;LDS	SI,[PDB.JFN_Pointer]
  8702                                  	;REP	MOVSB
  8703                                  	;;POP	DS ; * 15/05/2019
  8704                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8705                                  	; 05/12/2022
  8706                                  	; (push ds then pop ds is not needed here!)
  8707                                  	;push	ds
  8708                                  	;lds	si,[34h]
  8709 000010AD C5363400                	lds	si,[PDB.JFN_Pointer]
  8710 000010B1 F3A4                    	rep	movsb
  8711                                  	;pop	ds
  8712                                  
  8713                                  ; DOS 3.3 7/9/86
  8714                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8715                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8716                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8717                                  
  8718 000010B3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8719                                  
  8720                                  	;;test	byte [cs:CreatePDB],0FFh
  8721                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8722                                  	; 17/12/2022
  8723 000010B8 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8724                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8725 000010BC 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8726                                  
  8727                                  ; Here we set up for a new process...
  8728                                  
  8729                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8730                                  	;POP	DS
  8731                                  
  8732                                  	; MSDOS 6.0
  8733                                  	;;getdseg <ds>			; ds -> dosdata
  8734                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8735                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8736                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8737                                  	; 15/12/2022
  8738                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8739                                  
  8740 000010BE 31DB                    	XOR	BX,BX			; dup all jfns
  8741                                  	;mov	cx,20
  8742                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8743                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8744                                  	; 15/12/2022
  8745 000010C0 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8746                                  
  8747                                  Create_dup_jfn:
  8748 000010C2 06                      	PUSH	ES ;**			; save new PDB
  8749 000010C3 E89C54                  	call	SFFromHandle		; get sf pointer
  8750 000010C6 B0FF                    	MOV	AL,-1			; unassigned JFN
  8751 000010C8 7224                    	JC	short CreateStash	; file was not really open
  8752                                  	;;test	word [es:di+5],1000h
  8753                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8754                                  	; 15/05/2019
  8755                                  	;test	byte [es:di+6],10h
  8756 000010CA 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8757 000010CF 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8758                                  
  8759                                  ; We do not inherit network file handles.
  8760                                  
  8761                                  	;mov	ah,[es:di+2]
  8762 000010D1 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8763                                  	;and	ah,0F0h
  8764 000010D5 80E4F0                  	AND	AH,SHARING_MASK
  8765                                  	;cmp	ah,70h
  8766 000010D8 80FC70                  	CMP	AH,SHARING_NET_FCB
  8767 000010DB 7411                    	jz	short CreateStash
  8768                                  
  8769                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8770                                  ; duplication operation.
  8771                                  
  8772 000010DD 893E[9E05]              	MOV	[THISSFT],DI
  8773 000010E1 8C06[A005]              	MOV	[THISSFT+2],ES
  8774 000010E5 E8D618                  	call	DOS_DUP 		; signal duplication
  8775                                  
  8776                                  ; get the old sfn for copy
  8777                                  
  8778 000010E8 E85A54                  	call	pJFNFromHandle		; ES:DI is jfn
  8779 000010EB 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8780                                  
  8781                                  ; Take AL (old sfn or -1) and stash it into the new position
  8782                                  
  8783                                  CreateStash:
  8784 000010EE 07                      	POP	ES ;**
  8785                                  	;mov	[es:bx+18h],al
  8786 000010EF 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8787 000010F3 43                      	INC	BX			; next jfn...
  8788 000010F4 E2CC                    	LOOP	Create_dup_jfn
  8789                                  
  8790 000010F6 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8791                                  	; 06/11/2022
  8792                                  	;mov	[es:16h],bx
  8793 000010FA 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8794 000010FF 8C06[3003]              	MOV	[CurrentPDB],ES
  8795                                  	;MOV	DS,BX ; 28/07/2019
  8796                                  	; 07/12/2022
  8797                                  	;mov	ds,[cs:DosDSeg]
  8798                                  	; 15/12/2022
  8799                                  	; ds = [cs:DosDSeg]
  8800 00001103 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8801                                  	;mov	ds,bx
  8802                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8803                                  	; 15/12/2022
  8804                                  	;mov	ds,bx
  8805                                  
  8806                                  ; end of new process create
  8807                                  
  8808                                  Create_PDB_cont:
  8809                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8810                                  
  8811                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8812                                  
  8813                                  	;; 28/07/2019
  8814                                  	;;push	ds
  8815                                  	;;mov	ds,[cs:DosDSeg]
  8816                                  	;mov	byte [CreatePDB],0
  8817                                  	;;pop	ds
  8818                                  
  8819                                  ; 05/12/2022
  8820                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8821                                  ;	; (push-pop ds is nonsense here! 
  8822                                  ;	;  but i am using same code with original MSDOS.SYS
  8823                                  ;	;  for address compatibility.)
  8824                                  ;	push	ds
  8825                                  ;	; ds = [cs:DosDSeg] !
  8826                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8827                                  ;	mov	byte [CreatePDB],0
  8828                                  ;	pop	ds
  8829                                  
  8830 00001108 58                      	POP	AX ;*
  8831                                  
  8832                                  	;entry	SETMEM
  8833                                  
  8834                                  	; 17/12/2022
  8835                                  	; cx = 0
  8836                                  
  8837                                  ;---------------------------------------------------------------------------
  8838                                  ; Inputs:
  8839                                  ;	AX = Size of memory in paragraphs
  8840                                  ;	DX = Segment
  8841                                  ; Function:
  8842                                  ;	Completely prepares a program base at the
  8843                                  ;	specified segment.
  8844                                  ; Called at DOS init
  8845                                  ; Outputs:
  8846                                  ;	DS = DX
  8847                                  ;	ES = DX
  8848                                  ;	[0] has INT int_abort
  8849                                  ;	[2] = First unavailable segment
  8850                                  ;	[5] to [9] form a long call to the entry point
  8851                                  ;	[10] to [13] have exit address (from int_terminate)
  8852                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8853                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8854                                  ; DX,BP unchanged. All other registers destroyed.
  8855                                  ;---------------------------------------------------------------------------
  8856                                  
  8857                                  SETMEM:
  8858                                  	;XOR	CX,CX
  8859                                  	; 17/12/2022
  8860                                  	; cx = 0
  8861 00001109 8ED9                    	MOV	DS,CX
  8862 0000110B 8EC2                    	MOV	ES,DX
  8863                                  	;mov	si,88h
  8864 0000110D BE8800                  	MOV	SI,addr_int_terminate
  8865                                  	;mov	di,10 ; 0Ah
  8866 00001110 BF0A00                  	MOV	DI,SAVEXIT
  8867                                  	;MOV	CX,6
  8868                                  	; 15/12/2022
  8869 00001113 B106                    	mov	cl,6
  8870 00001115 F3A5                    	REP	MOVSW
  8871 00001117 26A30200                	MOV	[ES:2],AX
  8872 0000111B 29D0                    	SUB	AX,DX
  8873 0000111D 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8874 00001120 7603                    	JBE	short HAVDIF
  8875 00001122 B8FF0F                  	MOV	AX,MAXDIF
  8876                                  HAVDIF:
  8877 00001125 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8878 00001128 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8879 0000112B 29C3                    	SUB	BX,AX
  8880 0000112D B104                    	MOV	CL,4
  8881 0000112F D3E0                    	SHL	AX,CL
  8882 00001131 8EDA                    	MOV	DS,DX
  8883                                  
  8884                                  	; (MSDOS 6.0 note)
  8885                                  	;
  8886                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8887                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8888                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8889                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8890                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8891                                  	; making this equvalence valid for this particular case. If however
  8892                                  	; there is less than 64K remaining the address in BX:AX will not 
  8893                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8894                                  	; into the PSP.
  8895                                  	;
  8896                                  	; Therefore for the case where there is less than 64K remaining in 
  8897                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8898                                  	; requirements will not work. Call 5, however will continue to work
  8899                                  	; for all cases.
  8900                                  	;
  8901                                  
  8902                                  	;mov	[6],ax
  8903                                  	;mov	[8],bx
  8904                                  
  8905 00001133 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8906 00001136 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8907                                  
  8908                                  	; 06/05/2019 - Retro DOS v4.0
  8909 0000113A 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8910                                  					;    memory left
  8911 0000113D 740C                    	je	short addr_ok		; Y: the above calculated address is
  8912                                  					;    OK
  8913                                  					; N: 
  8914                                  
  8915 0000113F C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8916 00001145 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8917                                  addr_ok:
  8918                                  	;mov	word [0],20CDh
  8919 0000114B C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8920                                  	;mov	byte [5],9Ah
  8921 00001151 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8922                                  	;mov	word [50h],21CDh
  8923 00001156 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8924                                  	;mov	byte [52h],0CBh
  8925 0000115C C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8926                                  	;mov	word [34h],18h
  8927 00001161 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8928                                  	;mov	word [36h],ds
  8929 00001167 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8930                                  	;mov	word [32h],20
  8931 0000116B C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8932                                  ;
  8933                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8934                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8935                                  ; particular SFT.  We perform this by requiring that the server link together
  8936                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8937                                  ; initialize this pointer.
  8938                                  ;
  8939                                   	;mov	word [38h],-1
  8940 00001171 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8941                                  	;mov	word [3Ah],-1
  8942 00001177 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8943                                  
  8944                                  	; 06/05/2019
  8945                                  	; Set the real version number in the PSP - 5.00
  8946                                  
  8947                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8948                                  	; 07/12/2022
  8949 0000117D 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8950                                  
  8951 00001184 C3                      	retn
  8952                                  
  8953                                  ; 29/04/2019 - Retro DOS v4.0
  8954                                  
  8955                                  ;BREAK <$GSetMediaID -- get set media ID>
  8956                                  
  8957                                  ;---------------------------------------------------------------------------
  8958                                  ; Inputs:
  8959                                  ;	BL= drive number as defined in IOCTL
  8960                                  ;	AL= 0 get media ID
  8961                                  ;	    1 set media ID
  8962                                  ;	DS:DX= buffer containing information
  8963                                  ;		DW  0  info level (set on input)
  8964                                  ;		DD  ?  serial #
  8965                                  ;		DB  11 dup(?)  volume id
  8966                                  ;		DB   8 dup(?)  file system type
  8967                                  ; Function:
  8968                                  ;	Get or set media ID
  8969                                  ; Returns:
  8970                                  ;	carry clear, DS:DX is filled
  8971                                  ;	carry set, error
  8972                                  ;---------------------------------------------------------------------------
  8973                                  
  8974                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8975                                  _$GSetMediaID:
  8976                                  	; RAWIO - GET_MEDIA_ID
  8977 00001185 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8978 00001188 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8979 0000118A 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8980                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8981                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8982                                  	; 15/12/2022
  8983 0000118C FEC8                    	dec	al
  8984 0000118E 7507                    	jnz	short errorfunc ; al > 1
  8985                                  	; RAWIO - SET_MEDIA_ID
  8986                                  	;mov	cx,0846h	      ;AN001;MS.;
  8987                                  	; 15/12/2022
  8988 00001190 B146                    	mov	cl,46h	; cx = 0846h 
  8989                                  doioctl:			      ;AN000;
  8990 00001192 B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8991                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8992                                  	;call	_$IOCTL
  8993                                  	;retn			      ;AN000;MS.;
  8994                                  	; 15/12/2022
  8995 00001194 E98C10                  	jmp	_$IOCTL
  8996                                  errorfunc:			      ;AN000;
  8997                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8998                                  	;mov	al,1
  8999 00001197 B001                    	mov	al,error_invalid_function
  9000 00001199 E9A8F4                  	jmp	SYS_RET_ERR
  9001                                  
  9002                                  ; 16/05/2019 - Retro DOS v4.0
  9003                                  
  9004                                  ;============================================================================
  9005                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9006                                  ;============================================================================
  9007                                  ; 20/07/2018 - Retro DOS v3.0
  9008                                  ; 29/04/2019 - Retro DOS v4.0
  9009                                  
  9010                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9011                                  ;----------------------------------------------------------------------------
  9012                                  ;
  9013                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9014                                  ;	     Strings of different lengths don't match.
  9015                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9016                                  ;   Outputs: Z if strings same, NZ if different
  9017                                  ;   Registers modified: NONE
  9018                                  ;----------------------------------------------------------------------------
  9019                                  
  9020                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9021                                  StrCmp:
  9022 0000119C 56                      	push	si
  9023 0000119D 57                      	push	di
  9024 0000119E 50                      	push	ax
  9025                                  Cmplp:
  9026 0000119F AC                      	LODSB
  9027 000011A0 E8983D                  	call	UCase			; convert to upper case
  9028 000011A3 E8EA3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9029 000011A6 88C4                    	MOV	AH,AL
  9030 000011A8 268A05                  	MOV	AL,[ES:DI]
  9031 000011AB 47                      	INC	DI
  9032 000011AC E88C3D                  	call	UCase			; convert to upper case
  9033 000011AF E8DE3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9034 000011B2 38C4                    	CMP	AH,AL
  9035 000011B4 7504                    	JNZ	short PopRet		; Strings dif
  9036                                  
  9037 000011B6 08C0                    	OR	AL,AL
  9038 000011B8 75E5                    	JNZ	short Cmplp		; More string
  9039                                  PopRet:
  9040 000011BA 58                      	pop	ax
  9041 000011BB 5F                      	pop	di
  9042 000011BC 5E                      	pop	si
  9043 000011BD C3                      	retn
  9044                                  
  9045                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9046                                  ;----------------------------------------------------------------------------
  9047                                  ;
  9048                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9049                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9050                                  ;	characters.
  9051                                  ;
  9052                                  ;   Inputs:	DS:SI - pointer to source string
  9053                                  ;		ES:DI - pointer to destination string
  9054                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9055                                  ;		DS:SI point byte after nul byte at end of source string
  9056                                  ;   Registers modified: SI,DI
  9057                                  ;----------------------------------------------------------------------------
  9058                                  
  9059                                  StrCpy:
  9060 000011BE 50                      	push	ax
  9061                                  CPYLoop:
  9062 000011BF AC                      	LODSB
  9063 000011C0 E8783D                  	call	UCase			; convert to upper case
  9064 000011C3 E8CA3D                  	call	PATHCHRCMP		; convert / to \ ;
  9065 000011C6 AA                      	STOSB
  9066                                  
  9067 000011C7 08C0                    	OR	AL,AL
  9068 000011C9 75F4                    	JNZ	short CPYLoop
  9069 000011CB 58                      	pop	ax
  9070 000011CC C3                      	retn
  9071                                  
  9072                                  ;----------------------------------------------------------------------------
  9073                                  ; Procedure Name : FStrCpy
  9074                                  ;----------------------------------------------------------------------------
  9075                                  
  9076                                  FStrCpy:
  9077 000011CD 50                      	push	ax
  9078                                  FCPYLoop:
  9079 000011CE AC                      	LODSB
  9080 000011CF AA                      	STOSB
  9081 000011D0 08C0                    	OR	AL,AL
  9082 000011D2 75FA                    	JNZ	short FCPYLoop
  9083 000011D4 58                      	pop	ax
  9084 000011D5 C3                      	retn
  9085                                  
  9086                                  ; 20/07/2018 - Retro DOS v3.0
  9087                                  ;----------------------------------------------------------------------------
  9088                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9089                                  ;----------------------------------------------------------------------------
  9090                                  ;
  9091                                  ;UCase:	
  9092                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9093                                  ;	retn
  9094                                  
  9095                                  ;Break <StrLen - compute length of string ES:DI>
  9096                                  ;----------------------------------------------------------------------------
  9097                                  ;**	StrLen - Compute Length of String
  9098                                  ;
  9099                                  ;	StrLen computes the length of a string, including the trailing 00
  9100                                  ;
  9101                                  ;	ENTRY	(es:di) = address of string
  9102                                  ;	EXIT	(cx) = size of string
  9103                                  ;	USES	cx, flags
  9104                                  ;----------------------------------------------------------------------------
  9105                                  
  9106                                  StrLen:
  9107 000011D6 57                      	push	di
  9108 000011D7 50                      	push	ax
  9109                                  	;MOV	CX,-1
  9110 000011D8 B9FFFF                  	mov	cx,65535
  9111 000011DB 30C0                    	XOR	AL,AL
  9112 000011DD F2AE                    	REPNE	SCASB
  9113 000011DF F7D1                    	NOT	CX
  9114 000011E1 58                      	pop	ax
  9115 000011E2 5F                      	pop	di
  9116 000011E3 C3                      	retn
  9117                                  
  9118                                  ;----------------------------------------------------------------------------
  9119                                  ;**	DStrLen - Compute Length of String
  9120                                  ;
  9121                                  ;	ENTRY	(ds:si) = address of string
  9122                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9123                                  ;	USES	cx, flags
  9124                                  ;----------------------------------------------------------------------------
  9125                                  
  9126                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9127 000011E4 E80300                  	CALL	XCHGP
  9128 000011E7 E8ECFF                  	CALL	StrLen
  9129                                  	;CALL	XCHGP
  9130                                  	;retn
  9131                                  	; 18/12/2022
  9132                                  	;jmp	short XCHGP
  9133                                  
  9134                                  ;----------------------------------------------------------------------------
  9135                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9136                                  ;
  9137                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9138                                  ;
  9139                                  ;	ENTRY	none
  9140                                  ;	EXIT	pairs exchanged
  9141                                  ;	USES	SI, DI, DS, ES
  9142                                  ;----------------------------------------------------------------------------
  9143                                  
  9144                                  XCHGP:
  9145 000011EA 1E                      	push	ds
  9146 000011EB 06                      	push	es
  9147 000011EC 1F                      	pop	ds
  9148 000011ED 07                      	pop	es
  9149 000011EE 87F7                    	XCHG	SI,DI
  9150                                  xchgp_retn:
  9151 000011F0 C3                      	retn
  9152                                  
  9153                                  ;Break	<Idle - wait for a specified amount of time>
  9154                                  ;----------------------------------------------------------------------------
  9155                                  ;
  9156                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9157                                  ;   	   we spin until RetryLoop is exhausted.
  9158                                  ;
  9159                                  ;   Inputs:	RetryLoop is the number of times we spin
  9160                                  ;   Outputs:	Wait
  9161                                  ;   Registers modified: none
  9162                                  ;----------------------------------------------------------------------------
  9163                                  
  9164                                  Idle:
  9165                                  	;test	byte [SS:FSHARING],0FFh
  9166 000011F1 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9167                                  	;retnz
  9168 000011F7 75F7                    	jnz	short xchgp_retn
  9169                                  	;SAVE	<CX>
  9170 000011F9 51                      	push	cx
  9171 000011FA 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9172 000011FF E308                    	JCXZ	Idle3
  9173                                  Idle1:	
  9174 00001201 51                      	PUSH	CX
  9175 00001202 31C9                    	XOR	CX,CX
  9176                                  Idle2:	
  9177 00001204 E2FE                    	LOOP	Idle2
  9178 00001206 59                      	POP	CX
  9179 00001207 E2F8                    	LOOP	Idle1
  9180                                  Idle3:	
  9181                                  	;RESTORE <CX>
  9182 00001209 59                      	pop	cx
  9183 0000120A C3                      	retn
  9184                                  
  9185                                  ;Break	<TableDispatch - dispatch to a table>
  9186                                  ;----------------------------------------------------------------------------
  9187                                  ;
  9188                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9189                                  ;   routine. Preserve all input registers to the routine.
  9190                                  ;
  9191                                  ;   Inputs:	Push	return address
  9192                                  ;		Push	Table address
  9193                                  ;		Push	index (byte)
  9194                                  ;   Outputs:	appropriate routine gets jumped to.
  9195                                  ;		return indicates invalid index
  9196                                  ;   Registers modified: none.
  9197                                  ;----------------------------------------------------------------------------
  9198                                  
  9199                                  struc TFrame	 ; TableFrame
  9200 00000000 ????                    .OldBP:	 resw 1  ; 0
  9201 00000002 ????                    .OldRet: resw 1  ; 2
  9202 00000004 ??                      .Index:	 resb 1  ; 4
  9203 00000005 ??                      .Pad:	 resb 1  ; 5  
  9204 00000006 ????                    .Tab:	 resw 1  ; 6
  9205 00000008 ????                    .NewRet: resw 1  ; 8
  9206                                  endstruc
  9207                                  
  9208                                  TableDispatch:
  9209 0000120B 55                      	PUSH	BP
  9210 0000120C 89E5                    	MOV	BP,SP
  9211 0000120E 53                      	PUSH	BX			; save BX
  9212                                  	;mov	bx,[bp+6]
  9213 0000120F 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9214 00001212 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9215                                  	;cmp	[bp+4],bl
  9216 00001215 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9217 00001218 7317                    	JAE	short TableError	; yes
  9218                                  	;mov	bl,[bp+4]
  9219 0000121A 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9220 0000121D 30FF                    	XOR	BH,BH			; convert to word
  9221 0000121F D1E3                    	SHL	BX,1			; convert to word pointer
  9222 00001221 43                      	INC	BX			; point past first length byte
  9223                                  	; 17/08/2018
  9224                                  	;add	bx,[bp+6]
  9225 00001222 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9226 00001225 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9227                                  	;mov	[bp+6],bx
  9228 00001228 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9229 0000122B 5B                      	POP	BX			; restore BX
  9230 0000122C 5D                      	POP	BP			; restore BP
  9231 0000122D 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9232 00001230 C3                      	retn				; do operation
  9233                                  TableError:
  9234 00001231 5B                      	POP	BX			; restore BX
  9235 00001232 5D                      	POP	BP			; restore BP
  9236 00001233 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9237                                  
  9238                                  ;Break	<TestNet - determine if a CDS is for the network>
  9239                                  ;----------------------------------------------------------------------------
  9240                                  ;
  9241                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9242                                  ;	network CDS. This will handle NULL cds also.
  9243                                  ;
  9244                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9245                                  ;   Outputs:	ES:DI = ThisCDS
  9246                                  ;		carry Set => network
  9247                                  ;		carry Clear => local
  9248                                  ;   Registers modified: none.
  9249                                  ;----------------------------------------------------------------------------
  9250                                  
  9251                                  TestNet:
  9252                                  	;LES	DI,[CS:THISCDS]
  9253                                  
  9254                                  	; 16/05/2019 - Retro DOS v4.0
  9255 00001236 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9256 0000123B 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9257 00001240 83FFFF                  	CMP	DI,-1
  9258 00001243 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9259                                  	;;test	word [es:di+43h],8000h
  9260                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9261                                  	;test	byte [es:di+44h],80h
  9262 00001245 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9263 0000124A 7501                    	JNZ	short CMCRet		; jump has carry clear
  9264 0000124C C3                      	retn				; carry is clear
  9265                                  CMCRet: 
  9266 0000124D F5                      	CMC
  9267 0000124E C3                      	retn
  9268                                  
  9269                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9270                                  ;----------------------------------------------------------------------------
  9271                                  ;
  9272                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9273                                  ;	network file.
  9274                                  ;
  9275                                  ;   Inputs:	ES:DI point to SFT
  9276                                  ;   Outputs:	Zero set if not network sft
  9277                                  ;		zero reset otherwise
  9278                                  ;		Carry CLEAR!!!
  9279                                  ;   Registers modified: none.
  9280                                  ;----------------------------------------------------------------------------
  9281                                  
  9282                                  IsSFTNet:
  9283                                  	;;test	word [es:di+5],8000h
  9284                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9285                                  	; 16/05/2019 
  9286                                  	;test	byte [es:di+6],80h
  9287 0000124F 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9288 00001254 C3                      	retn
  9289                                  
  9290                                  ;Break	<FastInit - Initialize FastTable entries >
  9291                                  ;----------------------------------------------------------------------------
  9292                                  ;   DOS 4.00   2/9/87
  9293                                  ;   FastInit  - initialize the FASTXXX routine entry
  9294                                  ;		  in the FastTable
  9295                                  ;
  9296                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9297                                  ;		DS:SI = address of FASTXXX routine entry
  9298                                  ;		   SI = -1 for query only
  9299                                  ;   Outputs:	Carry flag clear, if success
  9300                                  ;		Carry flag set,   if failure
  9301                                  ;
  9302                                  ;
  9303                                  ;----------------------------------------------------------------------------
  9304                                  
  9305                                  ;Procedure FastInit,NEAR
  9306                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9307                                  
  9308                                  ;	; MSDOS 3.3
  9309                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9310                                  ;FastInit:
  9311                                  ;	mov	di,FastTable ; FastOpenTable
  9312                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9313                                  ;	mov	bx,cs			; get DOS segment
  9314                                  ;	cmp	ax,bx			; first time installed ?	
  9315                                  ;	je	short ok_install	; yes
  9316                                  ;	stc				; set carry
  9317                                  ;	retn				; (cf=1 means) already installed !
  9318                                  ;
  9319                                  ;ok_install:
  9320                                  ;	mov	bx,FastTable ; FastOpenTable
  9321                                  ;	mov	cx,ds
  9322                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9323                                  ;	mov	[cs:bx+4],cx
  9324                                  ;	mov	[cs:bx+2],si
  9325                                  ;	retn
  9326                                  
  9327                                  ; 16/05/2019 - Retro DOS v4.0
  9328                                  
  9329                                  FastInit:
  9330                                  	; MSDOS 6.0
  9331                                  	;hkn; set up es to dosdataseg.
  9332 00001255 06                      	push	es
  9333                                  	;getdseg <es>			; es -> dosdata
  9334 00001256 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9335                                  
  9336                                  	;hkn; FastTable is in DOSDATA
  9337 0000125B BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9338 0000125E 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9339 0000125F 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9340 00001261 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9341 00001263 D1E3                    	SHL	BX,1			;AN000;FO.
  9342 00001265 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9343 00001267 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9344                                  fcheck: 				;AN000;
  9345 0000126B 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9346 0000126D 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9347 0000126F 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9348 00001271 09C0                    	OR	AX,AX			;AN000;FO.;
  9349                                  	;JZ	short ok_install	;AN000;FO.;
  9350                                  	;STC				;AN000;FO.;; already installed !
  9351                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9352                                  	; 14/01/2024
  9353 00001273 F9                      	stc
  9354 00001274 7517                    	jnz	short FSret
  9355                                  ok_install:				;AN000;
  9356 00001276 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9357 00001279 7412                    	JZ	short FSret		;AN000;FO.; yes
  9358 0000127B 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9359 0000127D 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9360 00001281 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9361                                  
  9362                                  ;hkn; FastFlg moved to DOSDATA
  9363 00001284 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9364 00001287 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9365                                  	;or	byte [es:di],80h
  9366 00001289 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9367                                  FSret:					;AN000;
  9368 0000128D 07                      	pop	es
  9369 0000128E C3                      	retn				;AN000;FO.
  9370                                  
  9371                                  ;EndProc FastInit
  9372                                  
  9373                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9374                                  ;----------------------------------------------------------------------------
  9375                                  ;   DOS 3.3   6/10/86
  9376                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9377                                  ;
  9378                                  ;   Inputs:	None
  9379                                  ;   Outputs:	AX = -1 and carry flag set
  9380                                  ;
  9381                                  ;   Registers modified: none.
  9382                                  ;----------------------------------------------------------------------------
  9383                                  
  9384                                  FastRet:
  9385                                  	;mov	ax,-1
  9386                                  	;stc
  9387                                  	;retf
  9388 0000128F F9                      	STC
  9389 00001290 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9390 00001292 CB                      	RETF
  9391                                  
  9392                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9393                                  ;----------------------------------------------------------------------------
  9394                                  ;   DOS 3.3   6/10/86
  9395                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9396                                  ;
  9397                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9398                                  ;   Outputs:	same output as $OPEN
  9399                                  ;
  9400                                  ;----------------------------------------------------------------------------
  9401                                  
  9402                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9403                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9404                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9405                                  
  9406                                  NLS_OPEN:
  9407                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9408                                  ;	MOV	BYTE [CPSWFLAG],0
  9409                                  ;	PUSH	BX		 ; save current state
  9410                                  
  9411 00001293 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9412 00001295 E8345B                  	call	_$OPEN
  9413                                  
  9414                                  ;	POP	BX		 ; restore current state
  9415                                  ;	MOV	[CPSWFLAG],BL
  9416                                  	
  9417 00001298 C3                      	RETN
  9418                                  
  9419                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9420                                  ;----------------------------------------------------------------------------
  9421                                  ;   DOS 3.3   6/10/86
  9422                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9423                                  ;
  9424                                  ;   Inputs:	BP = open mode
  9425                                  ;   Outputs:	same output as $LSEEK
  9426                                  ;
  9427                                  ;----------------------------------------------------------------------------
  9428                                  
  9429                                  ; 16/05/2019 - Retro DOS v4.0
  9430                                  
  9431                                  NLS_LSEEK:
  9432 00001299 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9433 0000129E 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9434 000012A3 E81000                  	CALL	Fake_User_Stack
  9435 000012A6 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9436 000012A8 E8CE54                  	call	_$LSEEK
  9437 000012AB 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9438 000012B0 368F06[8405]            	POP	word [SS:USER_SP]
  9439 000012B5 C3                      	RETN
  9440                                  
  9441                                  ;Break	<Fake_User_Stack - save user stack>
  9442                                  ;----------------------------------------------------------------------------
  9443                                  ;   DOS 3.3   6/10/86
  9444                                  ;   Fake_User_Stack - save user stack pointer
  9445                                  ;
  9446                                  ;----------------------------------------------------------------------------
  9447                                  
  9448                                  Fake_User_Stack:
  9449 000012B6 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9450 000012BA 36A3[8405]              	MOV	[SS:USER_SP],AX
  9451 000012BE 8CD0                    	MOV	AX,SS
  9452 000012C0 36A3[8605]              	MOV	[SS:USER_SS],AX
  9453 000012C4 C3                      	RETN
  9454                                  
  9455                                  ;Break	<GetDevList - get device header list pointer>
  9456                                  ;----------------------------------------------------------------------------
  9457                                  ;   DOS 3.3   7/25/86
  9458                                  ;   GetDevList - get device header list pointer
  9459                                  ;
  9460                                  ;   Output: AX:BX points to the device header list
  9461                                  ;----------------------------------------------------------------------------
  9462                                  
  9463                                  GetDevList:
  9464                                  	; 16/05/2019 - Retro DOS v4.0
  9465 000012C5 BE[280D]                	MOV	SI,SysInitTable
  9466 000012C8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9467 000012CD C534                    	LDS	SI,[SI]
  9468                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9469 000012CF 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9470                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9471 000012D2 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9472 000012D5 C3                      	RETN
  9473                                  
  9474                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9475                                  ;----------------------------------------------------------------------------
  9476                                  ;   DOS 3.3   7/25/86
  9477                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9478                                  ;
  9479                                  ;   Inputs:	BP = function code 0CH
  9480                                  ;   Outputs:	same output as generic $IOCTL
  9481                                  ;
  9482                                  ;----------------------------------------------------------------------------
  9483                                  
  9484                                  NLS_IOCTL:
  9485                                  	; 16/05/2019 - Retro DOS v4.0
  9486 000012D6 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9487 000012DB 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9488 000012E0 E8D3FF                  	CALL	Fake_User_Stack
  9489 000012E3 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9490 000012E5 E83B0F                  	call	_$IOCTL
  9491 000012E8 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9492 000012ED 368F06[8405]            	POP	word [SS:USER_SP]
  9493 000012F2 C3                      	RETN
  9494                                  
  9495                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9496                                  ;----------------------------------------------------------------------------
  9497                                  ;   DOS 3.3   7/25/86
  9498                                  ;   NLS_GETEXT	-
  9499                                  ;
  9500                                  ;   Inputs:	none
  9501                                  ;   Outputs:	AX = extended error
  9502                                  ;
  9503                                  ;----------------------------------------------------------------------------
  9504                                  
  9505                                  NLS_GETEXT:
  9506                                  	; 16/05/2019 - Retro DOS v4.0
  9507 000012F3 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9508                                  	; 23/09/2023
  9509                                  MSG_RETRIEVAL:
  9510 000012F7 C3                      	RETN
  9511                                  
  9512                                  ; 29/04/2019 - Retro DOS v4.0
  9513                                  
  9514                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9515                                  
  9516                                  ;----------------------------------------------------------------------------
  9517                                  ;   DOS 4.00
  9518                                  ;
  9519                                  ;   Inputs:	DL=0 get extended error message addr
  9520                                  ;		  =1 set extended error message addr
  9521                                  ;		  =2 get parser error message addr
  9522                                  ;		  =3 set parser error message addr
  9523                                  ;		  =4 get critical error message addr
  9524                                  ;		  =5 set critical error message addr
  9525                                  ;		  =6 get file system error message addr
  9526                                  ;		  =7 set file system error message addr
  9527                                  ;		  =8 get address for code reduction
  9528                                  ;		  =9 set address for code reduction
  9529                                  ;   Function:	get/set message address
  9530                                  ;   Outputs:	ES:DI points to addr when get
  9531                                  ;----------------------------------------------------------------------------
  9532                                  
  9533                                  ;Procedure MSG_RETRIEVAL,NEAR
  9534                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9535                                  
  9536                                  ; 23/09/2023
  9537                                  ;MSG_RETRIEVAL:
  9538                                  
  9539                                  ;;	NOTE:  This function lives in command.com resident code now.
  9540                                  ;;	If the int 2F ever gets this far, we'll return registers
  9541                                  ;;	unchanged, which produces the same result as before, if
  9542                                  ;;	command.com wasn't present (and therefore no messages available).
  9543                                  ;;
  9544                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9545                                  ;;	No_Op zeroes AL.
  9546                                  ;;
  9547                                  ;;;hkn; set up ds to point to DOSDATA
  9548                                  ;;	push	ds
  9549                                  ;;	getdseg	<ds>			; ds -> dosdata
  9550                                  ;;
  9551                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9552                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9553                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9554                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9555                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9556                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9557                                  ;;	DEC	AL		    ;AN000;;MS.
  9558                                  ;;toget:				    ;AN000;
  9559                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9560                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9561                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9562                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9563                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9564                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9565                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9566                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9567                                  ;;getget: 				     ;AN000;
  9568                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9569                                  ;;MSGret: 				     ;AN000;
  9570                                  ;;	POP	SI			     ;AN000;;MS.
  9571                                  ;;	POP	AX			     ;AN000;;MS.
  9572                                  ;;
  9573                                  ;;	pop	ds
  9574                                  
  9575                                  ;	return				     ;AN000;;MS. exit
  9576                                  
  9577                                  ; 23/09/2023
  9578                                  ;	retn	; 29/04/2019
  9579                                  
  9580                                  ;============================================================================
  9581                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9582                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9583                                  ;============================================================================
  9584                                  ; 20/07/2018 - Retro DOS v3.0
  9585                                  
  9586                                  ;	; MSDOS 3.3
  9587                                  ;	; 08/08/2018 - Retro DOS v3.0
  9588                                  ;ECritMEM:
  9589                                  ;ECritSFT:
  9590                                  ;	;
  9591                                  ;ECritDisk:
  9592                                  ;	retn
  9593                                  ;	;push	ax
  9594                                  ;	
  9595                                  ;	mov	ax,8001h
  9596                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9597                                  ;			; AL = critical section number (00h-0Fh)
  9598                                  ;	pop	ax
  9599                                  ;	retn
  9600                                  ;
  9601                                  ;	; MSDOS 3.3
  9602                                  ;	; 08/08/2018 - Retro DOS v3.0
  9603                                  ;LCritMEM:
  9604                                  ;LCritSFT:
  9605                                  ;	;
  9606                                  ;LCritDisk:
  9607                                  ;	retn
  9608                                  ;	;push	ax
  9609                                  ;	
  9610                                  ;	mov	ax,8101h
  9611                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9612                                  ;			; AL = critical section number (00h-0Fh)
  9613                                  ;	pop	ax
  9614                                  ;	retn
  9615                                  ;
  9616                                  ;ECritDevice:
  9617                                  ;	retn
  9618                                  ;	;push	ax
  9619                                  ;	
  9620                                  ;	mov	ax,8002h
  9621                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9622                                  ;			; AL = critical section number (00h-0Fh)
  9623                                  ;	pop	ax
  9624                                  ;	retn
  9625                                  ;
  9626                                  ;LCritDevice:
  9627                                  ;	retn
  9628                                  ;	;push	ax
  9629                                  ;	
  9630                                  ;	mov	ax,8102h
  9631                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9632                                  ;			; AL = critical section number (00h-0Fh)
  9633                                  ;	pop	ax
  9634                                  ;	retn
  9635                                  
  9636                                  ;============================================================================
  9637                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9638                                  ;============================================================================
  9639                                  ; 12/05/2019 - Retro DOS v4.0
  9640                                  
  9641                                  ; Critical Section Routines
  9642                                  
  9643                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9644                                  
  9645                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9646                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9647                                  
  9648                                  ; ---------------------------------------------------------------------------
  9649                                  ; Each handler must leave everything untouched; including flags!
  9650                                  ;
  9651                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9652                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9653                                  ; ---------------------------------------------------------------------------
  9654                                  
  9655                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9656                                  ; ---------------------------------------------------------------------------
  9657                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9658                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9659                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9660                                  ; ---------------------------------------------------------------------------
  9661                                  
  9662                                  ;%macro POPFF 0
  9663                                  ;	jmp	$+3
  9664                                  ;	iret
  9665                                  ;	push	cs
  9666                                  ;	call	$-2
  9667                                  ;%endmacro
  9668                                  
  9669                                  ; ---------------------------
  9670                                  
  9671                                  ;Procedure  ECritDisk,NEAR
  9672                                  	;public  ECritMEM
  9673                                  	;public  ECritSFT
  9674                                  ECritMEM:
  9675                                  ECritSFT:
  9676                                  ;
  9677                                  ECritDisk:
  9678                                  
  9679                                  ;SR; Check if critical section is to be entered
  9680                                  
  9681 000012F8 9C                      	pushf
  9682 000012F9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9683 000012FF 740D                    	jz	short ECritDisk_2
  9684                                  
  9685                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9686                                  ;	;popff  ; * (macro)
  9687                                  ;	jmp	short ECritDisk_1 ; *
  9688                                  ;
  9689                                  ;ECritDisk_iret: ; *
  9690                                  ;	iret ; *
  9691                                  
  9692                                  	; 16/12/2022
  9693                                  	; 13/11/2022
  9694                                  	;jmp	short ECritDisk_1
  9695                                  	; 06/11/2022
  9696                                  ;ECritDisk_iret:
  9697                                  ;	iret	
  9698                                  
  9699                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9700                                  ECritDisk_1:
  9701 00001301 0E                      	push	cs ; *
  9702 00001302 E80800                  	call	ECritDisk_iret ; *		
  9703                                  	
  9704                                  ECritDisk_0:
  9705 00001305 50                      	PUSH    AX
  9706                                  	;MOV	AX,8000h+critDisk
  9707                                  	;INT	int_IBM
  9708 00001306 B80180                  	mov	ax,8001h
  9709 00001309 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9710                                  			; AL = critical section number (00h-0Fh)
  9711 0000130B 58                      	POP     AX
  9712 0000130C C3                      	retn
  9713                                  
  9714                                  	; 16/12/2022
  9715                                  	; 13/11/2022
  9716                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9717                                  LCritDisk_iret: 
  9718 0000130D CF                      	iret
  9719                                  
  9720                                  ECritDisk_2:
  9721                                  	;;popff ; *
  9722                                  	;;retn
  9723                                  ;	jmp	short ECritDisk_3 ; *
  9724                                  ;ECritDisk_iret2: ; *
  9725                                  ;	iret
  9726                                  	
  9727                                  	; 16/12/2022
  9728                                  	; 13/11/2022
  9729                                  	;jmp	short ECritDisk_3
  9730                                  ;ECritDisk_iret2:
  9731                                  	;iret
  9732                                  
  9733                                  ECritDisk_3:
  9734 0000130E 0E                      	push    cs ; *
  9735                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9736                                  	;call	ECritDisk_iret2 ; *
  9737                                  	;retn
  9738                                  	; 16/12/2022
  9739 0000130F E8FBFF                  	call	ECritDisk_iret
  9740 00001312 C3                      	retn
  9741                                  
  9742                                  ;EndProc ECritDisk
  9743                                  
  9744                                  ; ---------------------------
  9745                                  
  9746                                  ;Procedure   LCritDisk,NEAR
  9747                                  	;public  LCritMEM
  9748                                  	;public  LCritSFT
  9749                                  LCritMEM:
  9750                                  LCritSFT:
  9751                                  ;
  9752                                  LCritDisk:
  9753                                  
  9754                                  ;SR; Check if critical section is to be entered
  9755                                  
  9756 00001313 9C                      	pushf
  9757 00001314 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9758 0000131A 740C                    	jz	short LCritDisk_2
  9759                                  	;popff  ; * (macro)
  9760                                  ;	jmp	short LCritDisk_1 ; *
  9761                                  ;
  9762                                  ;LCritDisk_iret: ; *
  9763                                  ;	iret ; *
  9764                                  
  9765                                  	; 16/12/2022
  9766                                  	; 13/11/2022
  9767                                  	;jmp	short LCritDisk_1
  9768                                  ;LCritDisk_iret:
  9769                                  	;iret
  9770                                  
  9771                                  LCritDisk_1:
  9772 0000131C 0E                      	push	cs ; *
  9773 0000131D E8EDFF                  	call	LCritDisk_iret ; *		
  9774                                  	
  9775                                  LCritDisk_0:
  9776 00001320 50                      	PUSH	AX
  9777                                  	;MOV	AX,8100h+critDisk
  9778                                  	;INT	int_IBM
  9779 00001321 B80181                  	mov	ax,8101h
  9780 00001324 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9781                                  			; AL = critical section number (00h-0Fh)
  9782 00001326 58                      	POP	AX
  9783 00001327 C3                      	retn
  9784                                  
  9785                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9786                                  ;	iret
  9787                                  
  9788                                  LCritDisk_2:
  9789                                  	;;popff ; *
  9790                                  	;;retn
  9791                                  ;	jmp	short LCritDisk_3 ; *
  9792                                  ;LCritDisk_iret2: ; *
  9793                                  ;	iret
  9794                                  
  9795                                  	; 16/12/2022
  9796                                  	; 13/11/2022
  9797                                  	;jmp	short LCritDisk_3
  9798                                  ;LCritDisk_iret2:
  9799                                  	;iret
  9800                                  
  9801                                  LCritDisk_3:
  9802 00001328 0E                      	push    cs ; *
  9803                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9804                                  	;call	LCritDisk_iret2 ; *
  9805                                  	;retn
  9806                                  	; 16/12/2022
  9807 00001329 E8E1FF                  	call	LCritDisk_iret
  9808 0000132C C3                      	retn
  9809                                  
  9810                                  ;EndProc LCritDisk
  9811                                  
  9812                                  ; ---------------------------
  9813                                  
  9814                                  ;Procedure   ECritDevice,NEAR
  9815                                  
  9816                                  ECritDevice:
  9817                                  
  9818                                  ;SR; Check if critical section is to be entered
  9819                                  
  9820 0000132D 9C                      	pushf
  9821 0000132E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9822 00001334 740D                    	jz	short ECritDevice_2
  9823                                  	;popff  ; * (macro)
  9824                                  ;	jmp	short ECritDevice_1 ; *
  9825                                  ;
  9826                                  ;ECritDevice_iret: ; *
  9827                                  ;	iret ; *
  9828                                  
  9829                                  	; 16/12/2022	
  9830                                  	; 13/11/2022
  9831                                  	;jmp	short ECritDevice_1
  9832                                  ;ECritDevice_iret:
  9833                                  	;iret
  9834                                  
  9835                                  ECritDevice_1:
  9836 00001336 0E                      	push	cs ; *
  9837 00001337 E80800                  	call	ECritDevice_iret ; *		
  9838                                  	
  9839                                  ECritDevice_0:
  9840 0000133A 50                      	PUSH	AX
  9841                                  	;MOV	AX,8000h+critDevice
  9842                                  	;INT	int_IBM
  9843 0000133B B80280                  	mov	ax,8002h
  9844 0000133E CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9845                                  			; AL = critical section number (00h-0Fh)
  9846 00001340 58                      	POP     AX
  9847 00001341 C3                      	retn
  9848                                  
  9849                                  	; 16/12/2022
  9850                                  	; 06/12/2022
  9851                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9852                                  LCritDevice_iret: 
  9853 00001342 CF                      	iret
  9854                                  
  9855                                  ECritDevice_2:
  9856                                  	;;popff ; *
  9857                                  	;;retn
  9858                                  ;	jmp	short ECritDevice_3 ; *
  9859                                  ;ECritDevice_iret2: ; *
  9860                                  ;	iret
  9861                                  
  9862                                  	; 16/12/2022
  9863                                  	; 13/11/2022
  9864                                  	;jmp	short ECritDevice_3
  9865                                  ;ECritDevice_iret2:
  9866                                  	;iret
  9867                                  
  9868                                  ECritDevice_3:
  9869 00001343 0E                      	push    cs ; *
  9870                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9871                                  	;call	ECritDevice_iret2 ; *
  9872                                  	;retn
  9873                                  	; 16/12/2022
  9874 00001344 E8FBFF                  	call	ECritDevice_iret
  9875 00001347 C3                      	retn
  9876                                  
  9877                                  ;EndProc ECritDevice
  9878                                  
  9879                                  ; ---------------------------
  9880                                  
  9881                                  ;Procedure   LCritDevice,NEAR
  9882                                  
  9883                                  LCritDevice:
  9884                                  
  9885                                  ;SR; Check if critical section is to be entered
  9886                                  
  9887 00001348 9C                      	pushf
  9888 00001349 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9889 0000134F 740C                    	jz	short LCritDevice_2
  9890                                  	;popff  ; * (macro)
  9891                                  ;	jmp	short LCritDevice_1 ; *
  9892                                  ;
  9893                                  ;LCritDevice_iret: ; *
  9894                                  ;	iret ; *
  9895                                  
  9896                                  	; 16/12/2022
  9897                                  	; 13/11/2022
  9898                                  	;jmp	short LCritDevice_1
  9899                                  ;LCritDevice_iret:
  9900                                  	;iret
  9901                                  
  9902                                  LCritDevice_1:
  9903 00001351 0E                      	push	cs ; *
  9904 00001352 E8EDFF                  	call	LCritDevice_iret ; *		
  9905                                  	
  9906                                  LCritDevice_0:
  9907 00001355 50                      	PUSH	AX
  9908                                  	;MOV	AX,8100h+critDevice
  9909                                  	;INT	int_IBM
  9910 00001356 B80281                  	mov	ax,8102h
  9911 00001359 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9912                                  			; AL = critical section number (00h-0Fh)
  9913 0000135B 58                      	POP     AX
  9914 0000135C C3                      	retn
  9915                                  
  9916                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9917                                  ;	iret
  9918                                  
  9919                                  LCritDevice_2:
  9920                                  	;;popff ; *
  9921                                  	;;retn
  9922                                  ;	jmp	short LCritDevice_3 ; *
  9923                                  ;LCritDevice_iret2: ; *
  9924                                  ;	iret
  9925                                  
  9926                                  	; 16/12/2022
  9927                                  	; 13/11/2022
  9928                                  	;jmp	short LCritDevice_3
  9929                                  ;LCritDevice_iret2:
  9930                                  	;iret
  9931                                  
  9932                                  LCritDevice_3:
  9933 0000135D 0E                      	push    cs ; *
  9934                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9935                                  	;call	LCritDevice_iret2 ; *
  9936                                  	;retn
  9937                                  	; 16/12/2022
  9938 0000135E E8E1FF                  	call	LCritDevice_iret
  9939 00001361 C3                      	retn
  9940                                  
  9941                                  ;EndProc LCritDevice
  9942                                  
  9943                                  ;============================================================================
  9944                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9945                                  ;============================================================================
  9946                                  ; 20/07/2018 - Retro DOS v3.0
  9947                                  
  9948                                  ;============================================================================
  9949                                  ; STDIO.ASM - (MSDOS 2.0)
  9950                                  ;============================================================================
  9951                                  
  9952                                  ;
  9953                                  ; Standard device IO for MSDOS (first 12 function calls)
  9954                                  ;
  9955                                  
  9956                                  ;.xlist
  9957                                  ;.xcref
  9958                                  ;INCLUDE STDSW.ASM
  9959                                  ;INCLUDE DOSSEG.ASM
  9960                                  ;.cref
  9961                                  ;.list
  9962                                  
  9963                                  ;TITLE   STDIO - device IO for MSDOS
  9964                                  ;NAME    STDIO
  9965                                  
  9966                                  ;INCLUDE IO.ASM
  9967                                  
  9968                                  ; ---------------------------------------------------------------------------
  9969                                  ;
  9970                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9971                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9972                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9973                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9974                                  ;			    to restore MSDOS 2.0 device IO source code 
  9975                                  ;
  9976                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9977                                  	
  9978                                  ;============================================================================
  9979                                  ; STDIO.ASM - (MSDOS 2.0)
  9980                                  ;============================================================================
  9981                                  
  9982                                  ;
  9983                                  ; Standard device IO for MSDOS (first 12 function calls)
  9984                                  ;
  9985                                  
  9986                                  ;.xlist
  9987                                  ;.xcref
  9988                                  ;INCLUDE STDSW.ASM
  9989                                  ;INCLUDE DOSSEG.ASM
  9990                                  ;.cref
  9991                                  ;.list
  9992                                  
  9993                                  ;TITLE   STDIO - device IO for MSDOS
  9994                                  ;NAME    STDIO
  9995                                  
  9996                                  ;INCLUDE IO.ASM
  9997                                  
  9998                                  ; ---------------------------------------------------------------------------
  9999                                  ;
 10000                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10001                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10002                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10003                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10004                                  ;			    to restore MSDOS 2.0 device IO source code 
 10005                                  ;
 10006                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10007                                  ;
 10008                                  ;============================================================================
 10009                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10010                                  ;============================================================================
 10011                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10012                                  
 10013                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10014                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10015                                  
 10016                                  ;============================================================================
 10017                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10018                                  ;============================================================================
 10019                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10020                                  
 10021                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10022                                  
 10023                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10024                                  ;
 10025                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10026                                  ;	NAME	IBMCPMIO
 10027                                  
 10028                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10029                                  ;
 10030                                  ;	$Std_Con_Input_No_Echo
 10031                                  ;	$Std_Con_String_Output
 10032                                  ;	$Std_Con_String_Input
 10033                                  ;	$RawConIO
 10034                                  ;	$RawConInput
 10035                                  ;	RAWOUT
 10036                                  ;	RAWOUT2
 10037                                  ;
 10038                                  
 10039                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10040                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10041                                  ; references to be SS or CS relative which is desired.
 10042                                  
 10043                                  ; ---------------------------------------------------------------------------
 10044                                  
 10045                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10046                                  ;	NAME	CPMIO2
 10047                                  
 10048                                  ;
 10049                                  ;	Microsoft Confidential
 10050                                  ;	Copyright (C) Microsoft Corporation 1991
 10051                                  ;	All Rights Reserved.
 10052                                  ;
 10053                                  
 10054                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10055                                  ;
 10056                                  ;	$Std_Con_Input
 10057                                  ;	$Std_Con_Output
 10058                                  ;	OUTT
 10059                                  ;	TAB
 10060                                  ;	BUFOUT
 10061                                  ;	$Std_Aux_Input
 10062                                  ;	$Std_Aux_Output
 10063                                  ;	$Std_Printer_Output
 10064                                  ;	$Std_Con_Input_Status
 10065                                  ;	$Std_Con_Input_Flush
 10066                                  ;
 10067                                  ;	Revision History:
 10068                                  ;
 10069                                  ;	  AN000	 version 4.00 - Jan. 1988
 10070                                  
 10071                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10072                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10073                                  ; references to be SS or CS relative which is desired.
 10074                                  
 10075                                  ;DOSCODE SEGMENT
 10076                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10077                                  
 10078                                  
 10079                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10080                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10081                                  ;hkn;	not valid. 
 10082                                  
 10083                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10084                                  ; 08/11/2022
 10085                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10086                                  
 10087                                  ;
 10088                                  ;----------------------------------------------------------------------------
 10089                                  ;
 10090                                  ; Procedure : $Std_Con_Input_No_Echo
 10091                                  ;
 10092                                  ;----------------------------------------------------------------------------
 10093                                  ;
 10094                                  
 10095                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10096                                  
 10097                                  ; Inputs:
 10098                                  ;	None
 10099                                  ; Function:
 10100                                  ;	Input character from console, no echo
 10101                                  ; Returns:
 10102                                  ;	AL = character
 10103                                  
 10104 00001362 1E                      	push	ds
 10105 00001363 56                      	push	si
 10106                                  INTEST:
 10107 00001364 E8F13C                  	call	STATCHK
 10108 00001367 753B                    	jnz	short GET ; 08/09/2018
 10109                                  ;*************************************************************************
 10110                                  ;hkn; SS override
 10111 00001369 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10112 0000136F 7505                    	jnz	short no_sys_wait
 10113 00001371 B405                    	mov	ah,5			; get input status with system wait
 10114 00001373 E82930                  	call	IOFUNC
 10115                                  no_sys_wait:
 10116                                  ;**************************************************************************
 10117 00001376 B484                    	MOV	AH,84h
 10118 00001378 CD2A                    	INT	int_IBM	 ; int 2Ah
 10119                                  
 10120                                  ;;; 7/15/86  update the date in the idle loop
 10121                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10122                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10123                                  
 10124                                  ;hkn; SS override
 10125 0000137A 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10126 00001380 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10127                                  
 10128 00001382 50                      	PUSH	AX
 10129 00001383 53                      	PUSH	BX			; following is tricky,
 10130 00001384 51                      	PUSH	CX			; it may be called by critical handler
 10131 00001385 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10132                                  					; other's READ or WRITE
 10133 00001386 1E                      	PUSH	DS			; save DS = SFT's segment
 10134                                  
 10135                                  ;hkn; READTIME must use ds = DOSDATA
 10136                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10137                                  
 10138 00001387 16                      	PUSH	SS ; 04/05/2019
 10139 00001388 1F                      	POP	DS
 10140                                  
 10141 00001389 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10142 0000138C E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10143                                  	;invoke	READTIME		; readtime
 10144 0000138F E883F7                  	call	READTIME
 10145 00001392 B80100                  	MOV	AX,1
 10146 00001395 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10147                                  
 10148                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10149                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10150                                  ;	push	bx
 10151                                  ;	mov	bx,DATE_FLAG
 10152                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10153                                  ;	cmp	word [cs:bx],5872h
 10154                                  ;	jz	short FETCHI_TAG_chk_ok
 10155                                  ;	call	DOSINIT
 10156                                  ;FETCHI_TAG_chk_ok:
 10157                                  ;	pop	bx
 10158                                  
 10159 00001398 1F                      	POP	DS			; restore DS
 10160 00001399 5A                      	POP	DX
 10161 0000139A 59                      	POP	CX
 10162 0000139B 5B                      	POP	BX
 10163 0000139C 58                      	POP	AX
 10164                                  NoUpdate:
 10165                                  
 10166                                  ;hkn; SS override
 10167 0000139D 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10168                                  
 10169                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10170 000013A2 EBC0                    	JMP	short INTEST
 10171                                  GET:
 10172 000013A4 30E4                    	XOR	AH,AH
 10173 000013A6 E8F62F                  	call	IOFUNC
 10174 000013A9 5E                      	POP	SI
 10175 000013AA 1F                      	POP	DS
 10176                                  ;;; 7/15/86
 10177                                  
 10178                                  ;hkn; SS override
 10179                                  	; MSDOS 6.0
 10180 000013AB 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10181                                  	;
 10182 000013B1 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10183 000013B3 7505                    	JNZ	short noscan
 10184                                  
 10185                                  ;hkn; SS override
 10186                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10187                                  	; 20/06/2023
 10188 000013B5 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10189                                  noscan:
 10190 000013BA C3                      	retn
 10191                                  ;
 10192                                  ;----------------------------------------------------------------------------
 10193                                  ;
 10194                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10195                                  ;
 10196                                  ;
 10197                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10198                                  ;	EXIT	none
 10199                                  ;	USES	ALL
 10200                                  ;
 10201                                  ;----------------------------------------------------------------------------
 10202                                  ;
 10203                                  
 10204                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10205                                  
 10206 000013BB 89D6                    	mov	si,dx
 10207                                  STRING_OUT1:	
 10208 000013BD AC                      	lodsb
 10209 000013BE 3C24                    	cmp	al,'$'
 10210 000013C0 74F8                    	je	short noscan
 10211                                  NEXT_STR1:
 10212 000013C2 E88402                  	call	OUTT
 10213 000013C5 EBF6                    	jmp	short STRING_OUT1
 10214                                  
 10215                                  ;----------------------------------------------------------------------------
 10216                                  ;
 10217                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10218                                  ;
 10219                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10220                                  ;
 10221                                  ;	ENTRY	(ds:dx) = input buffer
 10222                                  ;	EXIT	none
 10223                                  ;	USES	ALL
 10224                                  ;
 10225                                  ;----------------------------------------------------------------------------
 10226                                  
 10227                                  	; 15/01/2024
 10228                                  
 10229                                  _$STD_CON_STRING_INPUT:		;System call 10
 10230                                  
 10231                                  	; 15/01/2024
 10232                                  	;mov	ax,ss
 10233                                  	;mov	es,ax
 10234 000013C7 16                      	push	ss
 10235 000013C8 07                      	pop	es
 10236                                  
 10237 000013C9 89D6                    	mov	si,dx
 10238 000013CB 30ED                    	xor	ch,ch
 10239 000013CD AD                      	lodsw
 10240                                  
 10241                                  ;	(AL) = the buffer length
 10242                                  ;	(AH) = the template length
 10243                                  
 10244 000013CE 08C0                            or	al,al
 10245 000013D0 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10246 000013D2 88E3                    	mov	bl,ah		;Init template counter
 10247 000013D4 88EF                            mov	bh,ch		;Init template counter
 10248                                  
 10249                                  ;	(BL) = the number of bytes in the template
 10250                                  
 10251 000013D6 38D8                            cmp	al,bl
 10252 000013D8 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10253 000013DA 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10254 000013DD 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10255                                  
 10256                                  ; The number of chars in the template is >= the number of chars in buffer or
 10257                                  ; there is no CR at the end of the template. This is an inconsistant state
 10258                                  ; of affairs. Pretend that the template was empty:
 10259                                  ;
 10260                                  
 10261                                  NOEDIT:	
 10262 000013DF 88EB                    	mov	bl,ch		;Reset buffer
 10263                                  EDITON: 
 10264 000013E1 88C2                    	mov	dl,al
 10265 000013E3 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10266                                  
 10267                                  ;	Top level. We begin to read a line in.
 10268                                  
 10269                                  NEWLIN: 
 10270 000013E4 36A0[F901]              	mov	al,[SS:CARPOS]
 10271 000013E8 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10272                                  
 10273 000013EC 56                      	push	si
 10274 000013ED BF[FB01]                	mov	di,INBUF ;Build the new line here
 10275 000013F0 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10276 000013F5 88EF                    	mov	bh,ch		;No chars from template yet
 10277 000013F7 88EE                    	mov	dh,ch		;No chars to new line yet
 10278 000013F9 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10279 000013FC 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10280 000013FE 7503                    	jnz	short GOTCH
 10281                                  
 10282                                  ;	This is the main loop of reading in a character and processing it.
 10283                                  ;
 10284                                  ;	(BH) = the index of the next byte in the template
 10285                                  ;	(BL) = the length of the template
 10286                                  ;	(DH) = the number of bytes in the buffer
 10287                                  ;	(DL) = the length of the buffer
 10288                                  
 10289                                  GETCH:
 10290 00001400 E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10291                                  GOTCH:
 10292                                  ;
 10293                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10294                                  ; input queue.
 10295                                  ;
 10296 00001403 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10297 00001405 74F9                    	jz	short GETCH
 10298                                  
 10299                                  ;	If the leading char is the function-key lead byte
 10300                                  
 10301                                  	;cmp	al,[SS:ESCCHAR]
 10302                                  
 10303                                  	; 04/05/2019 - Retro DOS v4.0
 10304                                  
 10305                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10306                                  
 10307 00001407 2E3A06[1F0A]            	CMP	AL,[cs:ESCCHAR]
 10308 0000140C 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10309                                  
 10310                                  ;	Rubout and ^H are both destructive backspaces.
 10311                                  
 10312 0000140E 3C7F                            cmp	al,c_DEL ; 7FH
 10313                                          ;jz	short BACKSPJ
 10314                                          ; 15/01/2024
 10315 00001410 7466                    	je	short BACKSP
 10316 00001412 3C08                    	cmp	al,c_BS  ; 8
 10317                                          ;jz	short BACKSPJ
 10318                                          ; 15/01/2024
 10319 00001414 7462                    	je	short BACKSP
 10320                                  
 10321                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10322                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10323                                  	;	   	after CMP and a CMP again!
 10324                                  	;		
 10325                                  	;		-It would be better if they use a 'JMP short' to 
 10326                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10327                                  	;		between them. Then, they would be able use a patch
 10328                                  	;		between 5271h and 5279h when if it will be required.
 10329                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10330                                  	;	
 10331                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10332                                  
 10333                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10334                                  	;
 10335                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10336                                  
 10337                                  ;DOSCODE:526D	cmp     al, 8
 10338                                  ;DOSCODE:526F	jz      short BACKSPJ
 10339                                  ;DOSCODE:5271	cmp     al, 17h
 10340                                  ;DOSCODE:5273	nop
 10341                                  ;DOSCODE:5274	nop
 10342                                  ;DOSCODE:5275	cmp     al, 15h
 10343                                  ;DOSCODE:5277	nop
 10344                                  ;DOSCODE:5278	nop
 10345                                  ;DOSCODE:5279	cmp     al, 0Dh
 10346                                  ;DOSCODE:527B	jz      short ENDLIN
 10347                                  ;DOSCODE:527D	cmp     al, 0Ah
 10348                                  ;DOSCODE:527F	jz      short PHYCRLF
 10349                                  	
 10350                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10351                                  	; DOSCODE:525Dh
 10352                                  
 10353                                  ; 16/12/2022
 10354                                  %if 0
 10355                                  	; MSDOS 6.0
 10356                                  ;	^W deletes backward once and then backs up until a letter is before the
 10357                                  ;	cursor
 10358                                  
 10359                                  	CMP     AL,"W"-"@" ; 17h
 10360                                  
 10361                                  ;	The removal of the comment characters before the jump statement will
 10362                                  ;	cause ^W to backup a word.
 10363                                  
 10364                                  ;***	JZ	short WordDel
 10365                                  	NOP
 10366                                  	NOP
 10367                                  
 10368                                  	CMP     AL,"U"-"@" ; 15h
 10369                                  
 10370                                  ;	The removal of the comment characters before the jump statement will
 10371                                  ;	cause ^U to clear a line.
 10372                                  
 10373                                  ;***	JZ	short LineDel
 10374                                  	NOP
 10375                                  	NOP
 10376                                  
 10377                                  %endif
 10378                                  
 10379                                  ;	CR terminates the line.
 10380                                  
 10381 00001416 3C0D                            cmp	al,c_CR ; 0Dh
 10382 00001418 7430                            jz	short ENDLIN
 10383                                  
 10384                                  ;	LF goes to a new line and keeps on reading.
 10385                                  
 10386 0000141A 3C0A                            cmp	al,c_LF ; 0Ah
 10387 0000141C 7442                    	jz	short PHYCRLF
 10388                                  
 10389                                  ;	^X (or ESC) deletes the line and starts over
 10390                                  
 10391                                  	; MSDOS 3.3
 10392                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10393                                  	;jz	short KILNEW
 10394                                  
 10395                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10396                                  
 10397                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10398                                  
 10399 0000141E 2E3A06[1E0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10400 00001423 7440                    	jz	short KILNEW
 10401                                  	
 10402                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10403                                  	;jz	short KILNEW
 10404                                  
 10405                                  ; Otherwise, we save the input character.
 10406                                  
 10407                                  SAVCH:	
 10408 00001425 38D6                    	cmp	dh,dl
 10409 00001427 7317                    	jnb	short BUFFUL		; buffer is full.
 10410 00001429 AA                              stosb
 10411 0000142A FEC6                    	inc	dh                      ; increment count in buffer.
 10412 0000142C E8AE02                  	call	BUFOUT			; Print control chars nicely
 10413                                  
 10414 0000142F 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10415 00001435 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10416 00001437 38DF                            cmp	bh,bl
 10417 00001439 73C5                            jnb	short GETCH		; no more characters in template
 10418 0000143B 46                              inc	si                      ; Skip to next char in template
 10419 0000143C FEC7                            inc	bh                      ; remember position in template
 10420 0000143E EBC0                            jmp	short GETCH
 10421                                  
 10422                                  	; 15/01/2024
 10423                                  ;BACKSPJ: 
 10424                                  	;jmp	short BACKSP
 10425                                  
 10426                                  BUFFUL: 
 10427 00001440 B007                    	mov	al, 7			; Bell to signal full buffer
 10428 00001442 E80402                  	call	OUTT
 10429 00001445 EBB9                    	jmp	short GETCH
 10430                                  
 10431                                  ESCAPE: 
 10432                                  	;transfer OEMFunctionKey
 10433 00001447 E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10434                                  
 10435                                  ENDLIN:
 10436 0000144A AA                              stosb				; Put the CR in the buffer
 10437 0000144B E8FB01                  	call	OUTT                    ; Echo it
 10438 0000144E 5F                              pop	di                      ; Get start of user buffer
 10439 0000144F 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10440 00001452 FEC6                            inc	dh			; DH is length including CR
 10441                                  
 10442                                  COPYNEW:
 10443                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10444                                  	;mov	bp, es
 10445                                  	;mov	bx, ds
 10446                                  	;mov	es, bx
 10447                                  	;mov	ds, bp
 10448                                  	;mov	si, INBUF
 10449                                  	;mov	cl, dh
 10450                                  	;rep	movsb
 10451                                  	;retn
 10452                                  
 10453                                  	; CPMIO.ASM (MSDOS 6.0)
 10454                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10455                                  	;SAVE	<DS,ES>
 10456 00001454 1E                      	PUSH	DS
 10457 00001455 06                      	PUSH	ES
 10458                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10459 00001456 1F                      	POP	DS
 10460 00001457 07                      	POP	ES
 10461                                  
 10462                                  ;;hkn; INBUF is in DOSDATA
 10463 00001458 BE[FB01]                        MOV     SI,INBUF
 10464 0000145B 88F1                            MOV     CL,DH                   ; set up count
 10465 0000145D F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10466                                  OLDBAK_RETN:
 10467 0000145F C3                              RETN
 10468                                  
 10469                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10470                                  
 10471                                  PHYCRLF:
 10472 00001460 E81B01                  	CALL	CRLF
 10473 00001463 EB9B                            JMP	short GETCH
 10474                                  
 10475                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10476                                  
 10477                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10478                                  
 10479                                  	; Note: Following routines were not used in IBMDOS.COM
 10480                                  	;	-CRTL+W, CRTL+U is not activated-
 10481                                  	;	but they were in the kernel code!?)
 10482                                  
 10483                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10484                                  	; DOSCODE:52B6h
 10485                                  
 10486                                  ;;;;;;;;
 10487                                  
 10488                                  ; 16/12/2022
 10489                                  %if 0
 10490                                  ;
 10491                                  ; Delete the previous line
 10492                                  ;
 10493                                  LineDel:
 10494                                  	OR      DH,DH
 10495                                  	JZ	short GETCH	 ; 06/12/2022
 10496                                  	Call    BackSpace
 10497                                  	JMP	short LineDel
 10498                                  
 10499                                  %endif
 10500                                  
 10501                                  ;
 10502                                  ; delete the previous word.
 10503                                  ;
 10504                                  WordDel:
 10505                                  WordLoop:
 10506                                  ;	Call    BackSpace               ; backspace the one spot
 10507                                  ;	OR      DH,DH
 10508                                  ;	JZ	short GetChj
 10509                                  ;	MOV     AL,[ES:DI-1]
 10510                                  ;	cmp     al,'0'
 10511                                  ;	jb	short GetChj
 10512                                  ;	cmp     al,'9'
 10513                                  ;	jbe	short WordLoop
 10514                                  ;	OR      AL,20h
 10515                                  ;	CMP     AL,'a'
 10516                                  ;	JB	short GetChj
 10517                                  ;	CMP     AL,'z'
 10518                                  ;	JBE	short WordLoop
 10519                                  ;GetChj: 
 10520                                  ;	JMP	GETCH
 10521                                  
 10522                                  ; 16/12/2022
 10523                                  %if 0
 10524                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10525                                  	; (Worddel is not called or jumped from anywhere!)
 10526                                  WordDel:
 10527                                  WordLoop:
 10528                                  	Call    BackSpace               ; backspace the one spot
 10529                                  	OR      DH,DH
 10530                                  	JZ	short GetChj
 10531                                  	MOV     AL,[ES:DI-1]
 10532                                  	cmp     al,'0'
 10533                                  	jb	short GetChj
 10534                                  	cmp     al,'9'
 10535                                  	jbe	short WordLoop
 10536                                  	OR      AL,20h
 10537                                  	CMP     AL,'a'
 10538                                  	JB	short GetChj
 10539                                  	CMP     AL,'z'
 10540                                  	JBE	short WordLoop
 10541                                  GetChj: 
 10542                                  	JMP	GETCH
 10543                                  
 10544                                  %endif
 10545                                  
 10546                                  ;;;;;;;;
 10547                                  
 10548                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10549                                  
 10550                                  ; The user wants to throw away what he's typed in and wants to start over.
 10551                                  ; We print the backslash and then go to the next line and tab to the correct
 10552                                  ; spot to begin the buffered input.
 10553                                  
 10554                                  KILNEW:
 10555 00001465 B05C                            mov	al,'\'
 10556 00001467 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10557 0000146A 5E                              pop	si		;Remember start of edit buffer
 10558                                  PUTNEW:
 10559 0000146B E81001                  	call	CRLF            ;Go to next line on screen
 10560 0000146E 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10561 00001472 E84802                  	call	TAB             ;Tab over
 10562 00001475 E96CFF                          JMP     NEWLIN		;Start over again
 10563                                  
 10564                                  ;	Destructively back up one character position
 10565                                  
 10566                                  BACKSP:
 10567                                  	; 09/09/2018
 10568 00001478 E80800                  	Call    BackSpace
 10569 0000147B EB83                    	JMP     short GETCH	; 15/01/2024
 10570                                  
 10571                                  	; 15/01/2024
 10572                                  ;User really wants an ESC character in his line
 10573                                  TWOESC:	
 10574 0000147D 2EA0[1F0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10575 00001481 EBA2                    	jmp	short SAVCH
 10576                                  
 10577                                  BackSpace:
 10578 00001483 08F6                    	or	dh,dh
 10579 00001485 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10580 00001487 E85800                  	call	BACKUP          ;Do the backup
 10581 0000148A 268A05                  	mov	al,[es:di]	;Get the deleted char
 10582 0000148D 3C20                            cmp	al,20h	; ' '
 10583 0000148F 730F                    	jnb	short OLDBAK	;Was a normal char
 10584 00001491 3C09                            cmp	al,c_HT ; 9
 10585 00001493 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10586                                  ;; 9/27/86 fix for ctrl-U backspace
 10587 00001495 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10588 00001497 7407                    	JZ	short OLDBAK
 10589 00001499 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10590 0000149B 7403                    	JZ	short OLDBAK
 10591                                  ;; 9/27/86 fix for ctrl-U backspace
 10592 0000149D E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10593                                  OLDBAK:
 10594 000014A0 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10595 000014A6 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10596 000014A8 08FF                    	or	bh,bh
 10597 000014AA 74B3                            jz	short OLDBAK_RETN 
 10598                                  				;Not advanced in template, stay where we are
 10599 000014AC FECF                    	dec	bh		;Go back in template
 10600 000014AE 4E                              dec	si
 10601 000014AF C3                      	retn
 10602                                  BAKTAB:
 10603 000014B0 57                              push	di
 10604 000014B1 4F                              dec	di		;Back up one char
 10605 000014B2 FD                              std			;Go backward
 10606 000014B3 88F1                            mov	cl,dh		;Number of chars currently in line
 10607 000014B5 B020                            mov	al,20h	; ' '
 10608 000014B7 53                              push	bx
 10609 000014B8 B307                            mov	bl,7		;Max
 10610 000014BA E30E                            jcxz	FIGTAB		;At start, do nothing
 10611                                  FNDPOS:
 10612 000014BC AE                              scasb			;Look back
 10613 000014BD 7609                    	jbe	short CHKCNT
 10614 000014BF 26807D0109              	cmp	byte [es:di+1],9
 10615 000014C4 7409                    	jz	short HAVTAB	;Found a tab
 10616 000014C6 FECB                    	dec	bl		;Back one char if non tab control char
 10617                                  CHKCNT:
 10618 000014C8 E2F2                            loop	FNDPOS
 10619                                  FIGTAB:		
 10620 000014CA 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10621                                  HAVTAB:
 10622 000014CF 28F3                    	sub	bl,dh
 10623 000014D1 00D9                    	add	cl,bl
 10624 000014D3 80E107                  	and	cl,7		;CX has correct number to erase
 10625 000014D6 FC                      	cld			;Back to normal
 10626 000014D7 5B                      	pop	bx
 10627 000014D8 5F                      	pop	di
 10628 000014D9 74C5                    	jz	short OLDBAK	;Nothing to erase
 10629                                  TABBAK:
 10630 000014DB E80700                  	call	BACKMES
 10631 000014DE E2FB                    	loop	TABBAK		;Erase correct number of chars
 10632 000014E0 EBBE                    	jmp	short OLDBAK
 10633                                  
 10634                                  BACKUP:
 10635 000014E2 FECE                            dec	dh		;Back up in line
 10636 000014E4 4F                              dec	di
 10637                                  BACKMES:
 10638 000014E5 B008                            mov	al,c_BS ; 8	;Backspace
 10639 000014E7 E85F01                          call	OUTT
 10640 000014EA B020                            mov	al,20h ; ' '	;Erase
 10641 000014EC E85A01                          call	OUTT
 10642 000014EF B008                            mov	al,c_BS ; 8	;Backspace
 10643 000014F1 E95501                  	jmp	OUTT		;Done
 10644                                  
 10645                                  	; 15/01/2024
 10646                                  ;User really wants an ESC character in his line
 10647                                  ;TWOESC:	
 10648                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10649                                  ;	jmp	SAVCH
 10650                                  
 10651                                  ;Copy the rest of the template
 10652                                  COPYLIN:
 10653 000014F4 88D9                            mov	cl,bl		;Total size of template
 10654 000014F6 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10655 000014F8 EB07                            jmp	short COPYEACH
 10656                                  
 10657                                  COPYSTR:
 10658 000014FA E83200                  	call	FINDOLD         ;Find the char
 10659 000014FD EB02                    	jmp	short COPYEACH  ;Copy up to it
 10660                                  
 10661                                  ;Copy one char from template to line
 10662                                  COPYONE:
 10663 000014FF B101                            mov	cl,1
 10664                                  ;Copy CX chars from template to line
 10665                                  COPYEACH:
 10666 00001501 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10667 00001507 38D6                    	cmp	dh,dl
 10668 00001509 740F                            jz	short GETCH2		;At end of line, can't do anything
 10669 0000150B 38DF                            cmp	bh,bl
 10670 0000150D 740B                            jz	short GETCH2		;At end of template, can't do anything
 10671 0000150F AC                              lodsb
 10672 00001510 AA                              stosb
 10673 00001511 E8C901                  	call	BUFOUT
 10674 00001514 FEC7                            inc	bh			;Ahead in template
 10675 00001516 FEC6                            inc	dh			;Ahead in line
 10676 00001518 E2E7                            loop	COPYEACH
 10677                                  GETCH2:
 10678 0000151A E9E3FE                          jmp	GETCH
 10679                                  
 10680                                  ;Skip one char in template
 10681                                  SKIPONE:
 10682 0000151D 38DF                    	cmp	bh,bl
 10683 0000151F 74F9                    	jz	short GETCH2		;At end of template
 10684 00001521 FEC7                    	inc	bh			;Ahead in template
 10685 00001523 46                      	inc	si
 10686                                          ;jmp	GETCH
 10687                                  	; 15/01/2024
 10688 00001524 EBF4                    	jmp	short GETCH2
 10689                                  
 10690                                  SKIPSTR:
 10691 00001526 E80600                  	call	FINDOLD                 ;Find out how far to go
 10692 00001529 01CE                            add	si,cx			;Go there
 10693 0000152B 00CF                            add	bh,cl
 10694                                          ;jmp	GETCH
 10695                                  	; 15/01/2024
 10696 0000152D EBEB                    	jmp	short GETCH2
 10697                                  
 10698                                  ;Get the next user char, and look ahead in template for a match
 10699                                  ;CX indicates how many chars to skip to get there on output
 10700                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10701                                  ;       address is popped off and a jump to GETCH is taken.
 10702                                  ;       Make sure nothing extra on stack when this routine
 10703                                  ;       is called!!! (no PUSHes before calling it).
 10704                                  
 10705                                  FINDOLD:
 10706 0000152F E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10707                                  
 10708                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10709                                  
 10710                                  	;CMP	AL,[SS:ESCCHAR]	
 10711                                  	;JNZ	SHORT FINDSETUP
 10712                                  
 10713                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10714                                  
 10715                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10716                                  
 10717 00001532 2E3A06[1F0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10718 00001537 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10719                                  
 10720 00001539 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10721 0000153C EB1D                            JMP	SHORT NOTFND		; go try again
 10722                                  FINDSETUP:
 10723 0000153E 88D9                    	mov	cl,bl
 10724 00001540 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10725 00001542 7417                    	jz	short NOTFND	;At end of template
 10726 00001544 49                              dec	cx		;Cannot point past end, limit search
 10727 00001545 7414                            jz	short NOTFND	;If only one char in template, forget it
 10728 00001547 06                      	push	es
 10729 00001548 1E                      	push	ds
 10730 00001549 07                      	pop	es
 10731 0000154A 57                      	push	di
 10732 0000154B 89F7                    	mov	di,si		;Template to ES:DI
 10733 0000154D 47                      	inc	di
 10734 0000154E F2AE                    	repne	scasb		;Look
 10735 00001550 5F                      	pop	di
 10736 00001551 07                      	pop	es
 10737 00001552 7507                    	jnz	short NOTFND	;Didn't find the char
 10738 00001554 F6D1                            not	cl		;Turn how far to go into how far we went
 10739 00001556 00D9                            add	cl,bl		;Add size of template
 10740 00001558 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10741                                  FINDOLD_RETN:
 10742 0000155A C3                      	retn
 10743                                  
 10744                                  NOTFND:
 10745 0000155B 5D                      	pop	bp              ;Chuck return address
 10746                                  	;jmp	GETCH
 10747                                  	; 15/01/2024
 10748                                  GETCH2_j:
 10749 0000155C EBBC                    	jmp	short GETCH2
 10750                                  
 10751                                  REEDIT:
 10752 0000155E B040                    	mov	al,'@'		;Output re-edit character
 10753 00001560 E8E600                  	call	OUTT
 10754 00001563 5F                      	pop	di
 10755 00001564 57                      	push	di
 10756 00001565 06                      	push	es
 10757 00001566 1E                      	push	ds
 10758 00001567 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10759 0000156A 1F                      	pop	ds
 10760 0000156B 07                      	pop	es
 10761 0000156C 5E                      	pop	si
 10762 0000156D 88F3                    	mov	bl,dh		;Size of line is new size template
 10763 0000156F E9F9FE                  	jmp	PUTNEW		;Start over again
 10764                                  
 10765                                  EXITINS:
 10766                                  ENTERINS:
 10767 00001572 36F616[7905]            	not	byte [SS:INSMODE]
 10768                                  	;jmp	GETCH
 10769                                  	; 15/01/2024
 10770 00001577 EBE3                    	jmp	short GETCH2_j
 10771                                  
 10772                                  ;Put a real live ^Z in the buffer (embedded)
 10773                                  CTRLZ:
 10774 00001579 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10775 0000157B E9A7FE                          jmp	SAVCH
 10776                                  
 10777                                  ;Output a CRLF
 10778                                  CRLF:
 10779 0000157E B00D                    	mov	al,c_CR ; 0Dh 
 10780 00001580 E8C600                  	call	OUTT
 10781 00001583 B00A                    	mov	al,c_LF ; 0Ah
 10782 00001585 E9C100                  	jmp	OUTT
 10783                                  
 10784                                  ;
 10785                                  ;----------------------------------------------------------------------------
 10786                                  ;
 10787                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10788                                  ;
 10789                                  ;	Input or output raw character from console, no echo
 10790                                  ;
 10791                                  ;	ENTRY	DL = -1 if input
 10792                                  ;		   =  output character if output
 10793                                  ;	EXIT	(AL) = input character if input
 10794                                  ;	USES	all
 10795                                  ;
 10796                                  ;----------------------------------------------------------------------------
 10797                                  ; 20/07/2018 - Retro DOS v3.0
 10798                                  
 10799                                  ; 04/05/2019 - Retro DOS v4.0
 10800                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10801                                  
 10802                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10803                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10804                                  
 10805                                  _$RAW_CON_IO:			; System call 6
 10806 00001588 88D0                    	MOV	AL,DL
 10807 0000158A 3CFF                    	CMP	AL,-1
 10808 0000158C 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10809                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10810                                  	;jz	short rci1
 10811                                  	;jmp	short RAWOUT
 10812                                  	; 16/12/202
 10813                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10814                                  	;nop
 10815                                  rci1:
 10816                                  			; Get pointer to register save area
 10817 0000158E 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10818 00001593 31DB                    	XOR	BX,BX
 10819                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10820 00001595 E8FF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10821                                          ;JC	SHORT RET17
 10822 00001598 72C0                            jc	short FINDOLD_RETN
 10823 0000159A B401                    	MOV	AH,1
 10824 0000159C E8002E                  	CALL	IOFUNC
 10825 0000159F 750B                    	JNZ	SHORT RESFLG
 10826 000015A1 E8863A                  	CALL	SPOOLINT
 10827                                  	;OR	BYTE [ES:DI+16H],40H
 10828 000015A4 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10829 000015A9 30C0                    	XOR	AL,AL
 10830                                  RET17:
 10831 000015AB C3                      	RETN
 10832                                  
 10833                                  RESFLG:
 10834                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10835 000015AC 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10836                                  				; Reset user's zero flag
 10837                                  ;RILP:
 10838                                  rci0:
 10839 000015B1 E8763A                  	CALL	SPOOLINT
 10840                                  ;
 10841                                  ;----------------------------------------------------------------------------
 10842                                  ;
 10843                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10844                                  ;
 10845                                  ;	Input raw character from console, no echo
 10846                                  ;
 10847                                  ;	ENTRY	none
 10848                                  ;	EXIT	(al) = character
 10849                                  ;	USES	all
 10850                                  ;
 10851                                  ;----------------------------------------------------------------------------
 10852                                  ;
 10853                                  
 10854                                  ;rci0:	invoke	SPOOLINT
 10855                                  
 10856                                  	;entry	$RAW_CON_INPUT
 10857                                  
 10858                                  	; 04/05/2019 - Retro DOS v4.0
 10859                                  
 10860                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10861                                  
 10862                                  _$RAW_CON_INPUT:		; System call 7
 10863 000015B4 53                      	push	bx
 10864 000015B5 31DB                    	XOR	BX,BX
 10865                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10866 000015B7 E8DD1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10867 000015BA 5B                      	pop	bx
 10868 000015BB 72EE                    	JC	SHORT RET17
 10869 000015BD B401                    	MOV	AH,1
 10870 000015BF E8DD2D                  	CALL	IOFUNC
 10871                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10872                                  	;XOR	AH,AH
 10873                                          ;CALL	IOFUNC
 10874                                          ;RETN
 10875 000015C2 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10876 000015C4 B484                    	MOV	AH,84h
 10877 000015C6 CD2A                    	INT	int_IBM  ; int 2Ah
 10878 000015C8 EBE7                    	JMP	short rci0
 10879                                  rci5:	
 10880 000015CA 30E4                    	XOR	AH,AH
 10881                                  	;CALL	IOFUNC
 10882                                  	;RETN
 10883                                  	; 18/12/2022
 10884 000015CC E9D02D                  	jmp	IOFUNC
 10885                                  
 10886                                  ;       Output the character in AL to stdout
 10887                                  ;
 10888                                  	;entry	RAWOUT
 10889                                  RAWOUT:
 10890 000015CF 53                      	PUSH    BX
 10891 000015D0 BB0100                  	MOV     BX,1
 10892                                  
 10893                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10894 000015D3 E8C11F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10895 000015D6 721B                    	JC	SHORT RAWRET1
 10896                                  
 10897                                  	;
 10898                                  	; MSDOS 2.11
 10899                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10900                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10901                                          ;PUSH	DS
 10902                                          ;PUSH	SI
 10903                                          ;LDS	SI,[SI+19H]		; output to special?
 10904                                  	;TEST	BYTE [SI+4],ISSPEC
 10905                                  	;POP	SI
 10906                                  	;
 10907                                          
 10908                                  	; MSDOS 3.3 & MSDOS 6.0
 10909                                  	;mov	bx,[si+5]
 10910 000015D8 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10911                                   ;
 10912                                   ; If we are a network handle OR if we are not a local device then go do the
 10913                                   ; output the hard way.
 10914                                   ;	
 10915                                  	;and	bx,8080h
 10916 000015DB 81E38080                	AND	BX,sf_isnet+devid_device
 10917                                  	;cmp	bx,80h
 10918 000015DF 81FB8000                	CMP	BX,devid_device
 10919 000015E3 7510                    	jnz     short RAWNORM
 10920 000015E5 1E                      	push    ds
 10921                                  	;lds	bx,[si+7]
 10922 000015E6 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10923                                  	;test	byte [bx+4],10h
 10924 000015E9 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10925                                  	;
 10926                                  
 10927 000015ED 1F                      	POP	DS
 10928 000015EE 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10929                                  
 10930 000015F0 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10931                                  
 10932                                  	;JMP	SHORT RAWRET
 10933                                  ;RAWNORM:
 10934                                  ;	CALL    RAWOUT3
 10935                                  RAWRET: 
 10936 000015F2 F8                      	CLC
 10937                                  RAWRET1:
 10938 000015F3 5B                      	POP     BX
 10939                                  RAWRET2:
 10940 000015F4 C3                      	RETN
 10941                                  RAWNORM:
 10942 000015F5 E80700                  	CALL    RAWOUT3
 10943 000015F8 EBF8                    	jmp	short RAWRET
 10944                                  
 10945                                  ;	Output the character in AL to handle in BX
 10946                                  ;
 10947                                  ;	entry	RAWOUT2
 10948                                  
 10949                                  RAWOUT2:
 10950                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10951                                  	;JC	SHORT RET18
 10952 000015FA E89A1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10953 000015FD 72F5                    	JC	SHORT RAWRET2
 10954                                  RAWOUT3:
 10955 000015FF 50                      	PUSH	AX
 10956 00001600 EB0C                    	JMP	SHORT RAWOSTRT
 10957                                  ROLP:
 10958 00001602 E8253A                  	CALL	SPOOLINT
 10959                                  
 10960                                  	; 01/05/2019 - Retro DOS v4.0
 10961                                  
 10962                                  	; MSDOS 6.0
 10963                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10964                                  	; 17/12/2022
 10965 00001605 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10966                                  	;or	word [ss:DOS34_FLAG],200h
 10967                                  				;AN002; set control break
 10968                                  	;invoke DSKSTATCHK
 10969 0000160B E89B39                  	call	DSKSTATCHK	;AN002; check control break
 10970                                  RAWOSTRT:
 10971 0000160E B403                    	MOV	AH,3
 10972 00001610 E88C2D                  	CALL	IOFUNC
 10973 00001613 74ED                    	JZ	SHORT ROLP
 10974                                  
 10975                                  	; MSDOS 6.0
 10976                                  ;SR;
 10977                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10978                                  ;the user failed. We do not send a char if this happens. We however return
 10979                                  ;to the caller with carry clear because this DOS call does not return any
 10980                                  ;status. 
 10981                                  ;
 10982 00001615 40                      	inc	ax		;fail on I24 if ax = -1
 10983 00001616 58                      	POP	AX
 10984 00001617 7405                    	jz	short nosend	;yes, do not send char
 10985 00001619 B402                    	MOV	AH,2
 10986 0000161B E8812D                  	call	IOFUNC
 10987                                  nosend:
 10988 0000161E F8                      	CLC			; Clear carry indicating successful
 10989 0000161F C3                      	retn
 10990                                  
 10991                                  	; MSDOS 3.3 & MSDOS 2.11
 10992                                  	;POP	AX
 10993                                  	;MOV	AH,2
 10994                                          ;CALL	IOFUNC
 10995                                  	;CLC			; Clear carry indicating successful
 10996                                  ;RET18:    
 10997                                  	;RETN
 10998                                  
 10999                                  ;;10/08/2018
 11000                                  ; 20/07/2018 - Retro DOS v3.0
 11001                                  ; ---------------------------------------------------------------------------
 11002                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11003                                  ; ---------------------------------------------------------------------------
 11004                                  
 11005                                  ; This routine is called at DOS init
 11006                                  
 11007                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11008                                  ;;OUTMES:
 11009                                  ;;	;LODS	CS:BYTE PTR [SI]
 11010                                  ;;	CS	LODSB
 11011                                  ;;	CMP     AL,"$" ; 24h
 11012                                  ;;	JZ	SHORT RET18
 11013                                  ;;	CALL	OUTT
 11014                                  ;;	JMP     SHORT OUTMES
 11015                                  
 11016                                  ; ---------------------------------------------------------------------------
 11017                                  
 11018                                  ; 20/07/2018 - Retro DOS v3.0
 11019                                  
 11020                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11021                                  
 11022                                  ;
 11023                                  ;----------------------------------------------------------------------------
 11024                                  ;
 11025                                  ; Inputs:
 11026                                  ;	AX=0 save the DEVCALL request packet
 11027                                  ;	  =1 restore the DEVCALL request packet
 11028                                  ; Function:
 11029                                  ;	save or restore the DEVCALL packet
 11030                                  ; Returns:
 11031                                  ;	none
 11032                                  ;
 11033                                  ;----------------------------------------------------------------------------
 11034                                  ;
 11035                                  
 11036                                  ; 04/05/2019 - Retro DOS v4.0
 11037                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11038                                  
 11039                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11040                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11041                                  
 11042                                  ; 12/05/2019
 11043                                  
 11044                                  	; 15/01/2024
 11045                                  
 11046                                  Save_Restore_Packet:
 11047 00001620 1E                      	PUSH	DS
 11048 00001621 06                      	PUSH	ES
 11049 00001622 56                      	PUSH	SI
 11050 00001623 57                      	PUSH	DI
 11051                                  
 11052                                  	; 16/12/2022
 11053                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11054                                  	; 09/09/2018
 11055 00001624 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11056 00001627 BE[5A03]                	mov	si,DEVCALL
 11057                                  	;
 11058                                  	; 21/09/2023
 11059 0000162A 09C0                    	or	ax,ax
 11060                                  	;CMP	AX,0		; save packet
 11061 0000162C 7402                    	JZ	short save_packet ; 16/12/2022
 11062                                  	;je	short set_seg
 11063                                  
 11064                                  	; MSDOS 6.0
 11065                                  restore_packet:
 11066                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11067                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11068                                  	; MSDOS 3.3
 11069                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11070                                  	;mov	di,DEVCALL  ; 09/09/2018
 11071                                  	;
 11072                                  	;JMP	short set_seg
 11073                                  
 11074                                  	; 16/12/2022	
 11075                                  	; 09/09/2018
 11076 0000162E 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11077                                  
 11078                                  ; 16/12/2022
 11079                                  %if 0
 11080                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11081                                  	cmp	ax,0		; save packet
 11082                                  	jz	short save_packet
 11083                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11084                                  	mov	di,DEVCALL 
 11085                                  	jmp	short set_seg
 11086                                  
 11087                                  	; MSDOS 6.0
 11088                                  save_packet:
 11089                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11090                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11091                                  	; 09/09/2018
 11092                                  	; MSDOS 3.3
 11093                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11094                                  	;mov	si,DEVCALL ; 09/09/2018
 11095                                  
 11096                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11097                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11098                                  	mov	si,DEVCALL
 11099                                  %endif
 11100                                  
 11101                                  ; 15/01/2024
 11102                                  ; 16/12/2022
 11103                                  save_packet:
 11104                                  ;set_seg:
 11105                                  	; MSDOS 3.3
 11106                                  	;mov	ax,cs
 11107                                  
 11108                                  	; MSDOS 6.0
 11109                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11110                                  	;MOV	DS,AX
 11111                                  	;MOV	ES,AX
 11112                                  	; 15/01/2024
 11113 00001630 16                      	push	ss
 11114 00001631 1F                      	pop	ds
 11115 00001632 1E                      	push	ds
 11116 00001633 07                      	pop	es
 11117                                  
 11118 00001634 B90B00                  	MOV	CX,11		; 11 words to move
 11119 00001637 F3A5                    	REP	MOVSW
 11120                                  
 11121 00001639 5F                      	POP	DI
 11122 0000163A 5E                      	POP	SI
 11123 0000163B 07                      	POP	ES
 11124 0000163C 1F                      	POP	DS
 11125 0000163D C3                      	retn
 11126                                  
 11127                                  ;============================================================================
 11128                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11129                                  ;============================================================================
 11130                                  ; 20/07/2018 - Retro DOS v3.0
 11131                                  ; 01/05/2019 - Retro DOS v4.0
 11132                                  
 11133                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11134                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11135                                  ;hkn;	not valid. 
 11136                                  
 11137                                  ;
 11138                                  ;----------------------------------------------------------------------------
 11139                                  ;
 11140                                  ;**	$STD_CON_INPUT - System Call 1
 11141                                  ;
 11142                                  ;	Input character from console, echo
 11143                                  ;
 11144                                  ;	ENTRY	none
 11145                                  ;	EXIT	(al) = character
 11146                                  ;	USES	ALL
 11147                                  ;
 11148                                  ;----------------------------------------------------------------------------
 11149                                  ;
 11150                                  
 11151                                  _$STD_CON_INPUT:	;System call 1
 11152                                  	
 11153 0000163E E821FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11154 00001641 50                      	PUSH	AX
 11155 00001642 E80400                  	CALL	OUTT
 11156 00001645 58                      	POP	AX
 11157                                  CON_INPUT_RETN:	
 11158 00001646 C3                      	RETN
 11159                                  
 11160                                  ;
 11161                                  ;----------------------------------------------------------------------------
 11162                                  ;
 11163                                  ;**	$STD_CON_OUTPUT - System Call 2
 11164                                  ;
 11165                                  ;	Output character to console
 11166                                  ;
 11167                                  ;	ENTRY	(dl) = character
 11168                                  ;	EXIT	none
 11169                                  ;	USES	all
 11170                                  ;
 11171                                  ;----------------------------------------------------------------------------
 11172                                  ;
 11173                                  
 11174                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11175                                  
 11176                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11177                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11178                                  
 11179                                  _$STD_CON_OUTPUT:	;System call 2
 11180                                  
 11181 00001647 88D0                    	MOV	AL,DL
 11182                                  OUTT:
 11183 00001649 3C20                    	CMP	AL,20H ; " "
 11184 0000164B 725C                    	JB	SHORT CTRLOUT
 11185 0000164D 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11186 0000164F 7405                    	JZ	SHORT OUTCH
 11187                                  OUTCHA:	
 11188                                  	;INC	BYTE PTR [CARPOS]
 11189 00001651 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11190                                  OUTCH:
 11191 00001656 1E                      	PUSH	DS
 11192 00001657 56                      	PUSH	SI
 11193                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11194                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11195 00001658 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11196                                  	;AND	BYTE [SS:CHARCO],00111111B
 11197                                  	; 01/05/2019 - Retro DOS v4.0
 11198 0000165D 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11199 00001663 7505                    	JNZ	SHORT OUTSKIP
 11200                                  
 11201 00001665 50                      	PUSH	AX
 11202 00001666 E8EF39                  	CALL	STATCHK
 11203 00001669 58                      	POP	AX
 11204                                  OUTSKIP:
 11205 0000166A E862FF                  	CALL	RAWOUT				;output the character
 11206                                  
 11207 0000166D 5E                      	POP	SI
 11208 0000166E 1F                      	POP	DS
 11209                                  
 11210                                  	;TEST	BYTE PTR [PFLAG],-1
 11211                                  	;retz
 11212 0000166F 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11213 00001675 74CF                    	JZ	SHORT CON_INPUT_RETN
 11214                                  
 11215 00001677 53                      	PUSH	BX
 11216 00001678 1E                      	PUSH	DS
 11217 00001679 56                      	PUSH	SI
 11218 0000167A BB0100                  	MOV	BX,1
 11219                                  	; 20/07/2018 - Retro DOS v3.0
 11220                                  	; MSDOS 3.3
 11221                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11222 0000167D E8171F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11223                                  					;hkn; to sft entry
 11224 00001680 7224                    	JC	SHORT TRIPOPJ
 11225                                  
 11226                                  	; 01/05/2019 - Retro DOS v4.0
 11227                                  
 11228                                  	;mov	bx,[si+5]
 11229 00001682 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11230                                  	;test	bx,8000h
 11231                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11232 00001685 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11233 00001688 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11234                                  	;;test	bx,80h
 11235                                  	;TEST	BX,devid_device 		; output to file?
 11236 0000168A F6C380                  	test	bl,devid_device ; 80h
 11237 0000168D 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11238                                  	; 14/03/2018
 11239                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11240                                  	;jc	short TRIPOPJ
 11241                                  	; MSDOS 2.11
 11242                                  	;test	byte [SI+18H], 80h
 11243                                  	;jz	short TRIPOPJ
 11244 0000168F BB0400                  	MOV	BX,4
 11245 00001692 E8021F                  	CALL	GET_IO_SFT
 11246 00001695 720F                    	JC	SHORT TRIPOPJ
 11247                                  	;;test	word [si+5], 800h
 11248                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11249                                  	;test	byte [si+6],8 ; 08/11/2022
 11250 00001697 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11251                                  						; StdPrn redirected?
 11252                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11253                                  	;jz	LISSTRT2 ; 10/08/2018 
 11254                                  	; 16/12/2022
 11255 0000169B 7503                    	jnz	short outch1
 11256 0000169D E98700                  	jmp	LISSTRT2
 11257                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11258                                  	;jz	short LISSTRT2J
 11259                                  outch1:
 11260                                  	;MOV	BYTE [PFLAG],0
 11261 000016A0 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11262                                  	; MSDOS 2.11
 11263                                  	;mov	bx,4
 11264                                  	;jmp	short LISSTRT2
 11265                                  	
 11266                                  TRIPOPJ:
 11267                                  	; 20/07/2018
 11268 000016A6 E98100                  	JMP	TRIPOP
 11269                                  
 11270                                  	; 16/12/2022
 11271                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11272                                  ;LISSTRT2J:
 11273                                  ;	JMP	LISSTRT2
 11274                                  
 11275                                  CTRLOUT:
 11276 000016A9 3C0D                    	CMP	AL,c_CR ; 0Dh
 11277 000016AB 7420                    	JZ	SHORT ZERPOS
 11278 000016AD 3C08                    	CMP	AL,c_BS ; 8
 11279 000016AF 7424                    	JZ	SHORT BACKPOS
 11280 000016B1 3C09                    	CMP	AL,c_HT ; 9
 11281 000016B3 75A1                    	JNZ	SHORT OUTCH
 11282                                  	;MOV	AL,[CARPOS]
 11283 000016B5 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11284 000016B9 0CF8                    	OR	AL,0F8H
 11285 000016BB F6D8                    	NEG	AL
 11286                                  TAB:
 11287 000016BD 51                      	PUSH	CX
 11288 000016BE 88C1                    	MOV	CL,AL
 11289 000016C0 B500                    	MOV	CH,0
 11290 000016C2 E307                    	JCXZ	POPTAB
 11291                                  TABLP:
 11292 000016C4 B020                    	MOV	AL," "
 11293 000016C6 E880FF                  	CALL	OUTT
 11294 000016C9 E2F9                    	LOOP	TABLP
 11295                                  POPTAB:
 11296 000016CB 59                      	POP	CX
 11297                                  
 11298 000016CC C3                      	RETN
 11299                                  
 11300                                  ZERPOS:
 11301                                  	;MOV	BYTE PTR [CARPOS],0
 11302 000016CD 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11303                                  	; 10/08/2018
 11304 000016D3 EB81                    	JMP	short OUTCH ; 04/05/2019
 11305                                  	
 11306                                  	; 18/12/2022
 11307                                  ;OUTJ:	
 11308                                  	;JMP	OUTT
 11309                                  
 11310                                  BACKPOS:
 11311                                  	;DEC	BYTE PTR [CARPOS]
 11312 000016D5 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11313 000016DA E979FF                  	JMP	OUTCH
 11314                                  
 11315                                  BUFOUT:
 11316 000016DD 3C20                    	CMP	AL," "
 11317 000016DF 7315                    	JAE	SHORT OUTJ		;Normal char
 11318 000016E1 3C09                    	CMP	AL,9
 11319 000016E3 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11320                                  	;DOS 3.3  7/14/86
 11321 000016E5 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11322 000016E7 740D                    	JZ	short CTRLU
 11323 000016E9 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11324 000016EB 7409                    	JZ	short CTRLU
 11325                                  NOT_CTRLU:
 11326                                  	;DOS 3.3  7/14/86
 11327 000016ED 50                      	PUSH	AX
 11328 000016EE B05E                    	MOV	AL,"^"
 11329 000016F0 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11330 000016F3 58                      	POP	AX
 11331 000016F4 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11332                                  CTRLU:
 11333                                  	;CALL	OUTT
 11334                                  	; 18/12/2022
 11335                                  OUTJ:
 11336 000016F6 E950FF                  	jmp	OUTT
 11337                                  ;BUFOUT_RETN:
 11338                                  	;RETN
 11339                                  
 11340                                  ;
 11341                                  ;----------------------------------------------------------------------------
 11342                                  ;
 11343                                  ;**	$STD_AUX_INPUT - System Call 3
 11344                                  ;
 11345                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11346                                  ;
 11347                                  ;	ENTRY	none
 11348                                  ;	EXIT	(al) = character
 11349                                  ;	USES	all
 11350                                  ;
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  
 11354                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11355                                  
 11356                                  _$STD_AUX_INPUT:	;System call 3
 11357                                  
 11358 000016F9 E85C39                  	CALL	STATCHK
 11359 000016FC BB0300                  	MOV	BX,3
 11360 000016FF E8951E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11361                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11362                                  	;retc
 11363                                  	; 16/12/2022
 11364                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11365                                  	;JC	SHORT BUFOUT_RETN
 11366                                  	;JMP	SHORT TAISTRT
 11367                                  	; 07/12/2022
 11368 00001702 7304                    	jnc	SHORT TAISTRT
 11369 00001704 C3                      	retn	
 11370                                  
 11371                                  AUXILP:
 11372 00001705 E82239                  	CALL	SPOOLINT
 11373                                  TAISTRT:
 11374 00001708 B401                    	MOV	AH,1
 11375 0000170A E8922C                  	CALL	IOFUNC
 11376 0000170D 74F6                    	JZ	SHORT AUXILP
 11377 0000170F 30E4                    	XOR	AH,AH
 11378                                  	; 16/12/2022
 11379                                  	;CALL	IOFUNC
 11380                                  	;RETN
 11381                                  	; 07/12/2022
 11382 00001711 E98B2C                  	jmp	IOFUNC
 11383                                  
 11384                                  ;
 11385                                  ;----------------------------------------------------------------------------
 11386                                  ;
 11387                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11388                                  ;
 11389                                  ;	ENTRY	(dl) = character
 11390                                  ;	EXIT	none
 11391                                  ;	USES	all
 11392                                  ;
 11393                                  ;----------------------------------------------------------------------------
 11394                                  ;
 11395                                  
 11396                                  _$STD_AUX_OUTPUT:	;System call 4
 11397                                  
 11398 00001714 53                      	PUSH	BX
 11399 00001715 BB0300                  	MOV	BX,3
 11400 00001718 EB04                    	JMP	SHORT SENDOUT
 11401                                  
 11402                                  ;
 11403                                  ;----------------------------------------------------------------------------
 11404                                  ;
 11405                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11406                                  ;
 11407                                  ;	ENTRY	(dl) = character
 11408                                  ;	EXIT	none
 11409                                  ;	USES	all
 11410                                  ;
 11411                                  ;----------------------------------------------------------------------------
 11412                                  ;
 11413                                  
 11414                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11415                                  
 11416 0000171A 53                      	PUSH	BX
 11417 0000171B BB0400                  	MOV	BX,4
 11418                                  
 11419                                  SENDOUT:
 11420 0000171E 88D0                    	MOV	AL,DL
 11421 00001720 50                      	PUSH	AX
 11422 00001721 E83439                  	CALL	STATCHK
 11423 00001724 58                      	POP	AX
 11424 00001725 1E                      	PUSH	DS
 11425 00001726 56                      	PUSH	SI
 11426                                  LISSTRT2:
 11427 00001727 E8D0FE                  	CALL	RAWOUT2
 11428                                  TRIPOP:
 11429 0000172A 5E                      	POP	SI
 11430 0000172B 1F                      	POP	DS
 11431 0000172C 5B                      	POP	BX
 11432                                  SCIS_RETN:	; 20/07/2018
 11433 0000172D C3                      	RETN
 11434                                  ;
 11435                                  ;----------------------------------------------------------------------------
 11436                                  ;
 11437                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11438                                  ;
 11439                                  ;	Check console input status
 11440                                  ;
 11441                                  ;	ENTRY	none
 11442                                  ;	EXIT	AL = -1 character available, = 0 no character
 11443                                  ;	USES	all
 11444                                  ;
 11445                                  ;----------------------------------------------------------------------------
 11446                                  ;
 11447                                  
 11448                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11449                                  
 11450 0000172E E82739                  	CALL	STATCHK
 11451 00001731 B000                    	MOV	AL,0		; no xor!!
 11452                                  	;retz
 11453 00001733 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11454 00001735 0CFF                    	OR	AL,-1
 11455                                  ;SCIS_RETN:
 11456 00001737 C3                      	RETN
 11457                                  
 11458                                  ;
 11459                                  ;----------------------------------------------------------------------------
 11460                                  ;
 11461                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11462                                  ;
 11463                                  ;	Flush console input buffer and perform call in AL
 11464                                  ;
 11465                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11466                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11467                                  ;		return arguments for the fcn supplied in (AL)
 11468                                  ;	USES	all
 11469                                  ;
 11470                                  ;----------------------------------------------------------------------------
 11471                                  ;
 11472                                  
 11473                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11474                                  
 11475 00001738 50                      	PUSH	AX
 11476 00001739 52                      	PUSH	DX
 11477 0000173A 31DB                    	XOR	BX,BX
 11478 0000173C E8581E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11479                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11480 0000173F 7205                    	JC	SHORT BADJFNCON
 11481 00001741 B404                    	MOV	AH,4
 11482 00001743 E8592C                  	CALL	IOFUNC
 11483                                  
 11484                                  BADJFNCON:
 11485 00001746 5A                      	POP	DX
 11486 00001747 58                      	POP	AX
 11487 00001748 88C4                    	MOV	AH,AL
 11488 0000174A 3C01                    	CMP	AL,1
 11489 0000174C 7413                    	JZ	SHORT REDISPJ
 11490 0000174E 3C06                    	CMP	AL,6
 11491 00001750 740F                    	JZ	SHORT REDISPJ
 11492 00001752 3C07                    	CMP	AL,7
 11493 00001754 740B                    	JZ	SHORT REDISPJ
 11494 00001756 3C08                    	CMP	AL,8
 11495 00001758 7407                    	JZ	SHORT REDISPJ
 11496 0000175A 3C0A                    	CMP	AL,10
 11497 0000175C 7403                    	JZ	SHORT REDISPJ
 11498 0000175E B000                    	MOV	AL,0
 11499 00001760 C3                      	RETN
 11500                                  
 11501                                  REDISPJ:
 11502 00001761 FA                      	CLI
 11503                                  	;transfer REDISP
 11504 00001762 E922EC                  	JMP	REDISP
 11505                                  
 11506                                  ;============================================================================
 11507                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11508                                  ;============================================================================
 11509                                  ; 20/07/2018 - Retro DOS v3.0
 11510                                  ; 17/05/2019 - Retro DOS v4.0
 11511                                  
 11512                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11513                                  ;
 11514                                  ;	$GET_FCB_POSITION
 11515                                  ;	$FCB_DELETE
 11516                                  ;	$GET_FCB_FILE_LENGTH
 11517                                  ;	$FCB_CLOSE
 11518                                  ;	$FCB_RENAME
 11519                                  ;	SaveFCBInfo
 11520                                  ;	ResetLRU
 11521                                  ;	SetOpenAge
 11522                                  ;	LRUFCB
 11523                                  ;	FCBRegen
 11524                                  ;	BlastSFT
 11525                                  ;	CheckFCB
 11526                                  ;	SFTFromFCB
 11527                                  ;	FCBHardErr
 11528                                  ;
 11529                                  ;	Revision history:
 11530                                  ;
 11531                                  ;		Created: ARR 4 April 1983"
 11532                                  ;			 MZ  6 June  1983 completion of functions
 11533                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11534                                  ;					  times.  Change so successive closes work by
 11535                                  ;					  always returning OK.	Also, detect I/O to
 11536                                  ;					  already closed FCB and return EOF.
 11537                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11538                                  ;					  out of sft into FCB for reconnection
 11539                                  ;
 11540                                  ;		A000	 version 4.00  Jan. 1988
 11541                                  
 11542                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11543                                  ;----------------------------------------------------------------------------
 11544                                  ;
 11545                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11546                                  ;	extent and next record field and set the random record field to point
 11547                                  ;	to that record
 11548                                  ;
 11549                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11550                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11551                                  ;   Registers modified: all
 11552                                  ;
 11553                                  ;----------------------------------------------------------------------------
 11554                                  ;
 11555                                  
 11556                                  _$GET_FCB_POSITION:
 11557 00001765 E8D404                  	call	GetExtended		; point to FCB
 11558 00001768 E8A504                  	call	GetExtent		; DX:AX is current record
 11559                                  	;mov	[si+21h],ax
 11560 0000176B 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11561                                  	;mov	[si+23h],dl
 11562 0000176E 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11563                                  	;cmp	word [si+0Eh],64
 11564 00001771 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11565 00001775 7303                    	JAE	short GetFCBBye
 11566                                  	;mov	[si+24h],dh
 11567 00001777 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11568                                  GoodPath:	; 16/12/2022
 11569                                  GetFCBBye:
 11570 0000177A E9DAEE                  	jmp	FCB_RET_OK
 11571                                  
 11572                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11573                                  ;----------------------------------------------------------------------------
 11574                                  ;
 11575                                  ;**	$FCB_Delete - Delete from FCB Template
 11576                                  ;
 11577                                  ;	given an FCB, remove all directory entries in the current
 11578                                  ;	directory that have names that match the FCB's ?  marks.
 11579                                  ;
 11580                                  ;	ENTRY	(DS:DX) = address of FCB
 11581                                  ;	EXIT	entries matching the FCB are deleted
 11582                                  ;		(al) = ff iff no entries were deleted
 11583                                  ;	USES	all
 11584                                  ;
 11585                                  ;----------------------------------------------------------------------------
 11586                                  ;
 11587                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11588                                  
 11589                                  _$FCB_DELETE:		; System call 19
 11590                                  					; OpenBuf is in DOSDATA
 11591 0000177D BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11592                                  
 11593 00001780 E87852                  	call	TransFCB		; convert FCB to path
 11594 00001783 7207                    	JC	short BadPath 		; signal no deletions
 11595                                  
 11596 00001785 16                      	push	SS
 11597 00001786 1F                      	pop	DS			; SS is DOSDATA
 11598                                  
 11599 00001787 E8370D                  	call	DOS_DELETE		; wham
 11600                                  	;JC	short BadPath
 11601                                  	; 16/12/2022
 11602 0000178A 73EE                    	jnc 	short GoodPath
 11603                                  ;GoodPath:
 11604                                  ;	;jmp	FCB_RET_OK		; do a good return
 11605                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11606                                  ;	jmp	short GetFCBBye
 11607                                  
 11608                                  BadPath:
 11609                                  	; Error code is in AX
 11610                                  
 11611 0000178C E9CBEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11612                                  
 11613                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11614                                  ;----------------------------------------------------------------------------
 11615                                  ;
 11616                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11617                                  ;	file in records (rounded up if partial).
 11618                                  ;
 11619                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11620                                  ;   Outputs:	Random record field updated to reflect the number of records
 11621                                  ;   Registers modified: all
 11622                                  ;
 11623                                  ;----------------------------------------------------------------------------
 11624                                  ;
 11625                                  	; 15/01/2024
 11626                                  
 11627                                  _$GET_FCB_FILE_LENGTH:
 11628                                  
 11629 0000178F E8AA04                  	call	GetExtended		; get real FCB pointer
 11630                                  					; DX points to Input FCB
 11631                                  
 11632                                  					; OpenBuf is in DOSDATA
 11633 00001792 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11634                                  
 11635 00001795 1E                      	push	ds			; save pointer to true FCB
 11636 00001796 56                      	push	si
 11637 00001797 E86152                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11638 0000179A 5E                      	pop	si
 11639 0000179B 1F                      	pop	ds
 11640 0000179C 72EE                    	JC	short BadPath
 11641 0000179E 1E                      	push	ds			; save pointer
 11642 0000179F 56                      	push	si
 11643 000017A0 16                      	push	ss		
 11644 000017A1 1F                      	pop	ds
 11645 000017A2 E81A11                  	call	GET_FILE_INFO		; grab the info
 11646 000017A5 5E                      	pop	si			; get pointer back
 11647 000017A6 1F                      	pop	ds
 11648 000017A7 72E3                    	JC	short BadPath 		; invalid something
 11649                                  	; 15/01/2024
 11650                                  	;MOV	DX,BX (*)		; get high order size
 11651                                  	;MOV	AX,DI (**)		; get low order size
 11652 000017A9 89D8                    	mov	ax,bx ; hw of file size
 11653                                  	;
 11654                                  	;mov	bx,[si+0Eh]
 11655 000017AB 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11656 000017AE 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11657 000017B0 7502                    	JNZ	short GetSize 		; not empty
 11658                                  	;MOV	BX,128
 11659 000017B2 B380                    	mov	bl,128	; 15/01/2024
 11660                                  GetSize:
 11661                                  	; 15/01/2024
 11662                                  	;MOV	DI,AX			; save low order word
 11663                                  	;MOV	AX,DX			; move high order for divide
 11664                                  	;xchg	ax,dx ; (*)
 11665                                  	; ax = hw of file size
 11666                                  
 11667 000017B4 31D2                    	XOR	DX,DX			; clear out high
 11668 000017B6 F7F3                    	DIV	BX			; wham
 11669 000017B8 50                      	PUSH	AX			; save dividend
 11670 000017B9 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11671 000017BB F7F3                    	DIV	BX			; wham
 11672 000017BD 89D1                    	MOV	CX,DX			; save remainder
 11673 000017BF 5A                      	POP	DX			; get high order dividend
 11674 000017C0 E306                    	JCXZ	LengthStore		; no roundup
 11675 000017C2 83C001                  	ADD	AX,1
 11676 000017C5 83D200                  	ADC	DX,0			; 32-bit increment
 11677                                  LengthStore:
 11678                                  	;mov	[si+21h],ax
 11679 000017C8 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11680                                  	;mov	[si+23h],dl
 11681 000017CB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11682 000017CE 08F6                    	OR	DH,DH
 11683 000017D0 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11684                                  	;mov	[si+24h],dh
 11685 000017D2 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11686                                  	; 16/12/2022
 11687                                  GoodRet:
 11688                                  	;jmp	FCB_RET_OK
 11689 000017D5 EBA3                    	jmp	short GoodPath
 11690                                  
 11691                                  ;Break <$FCB_Close - close a file>
 11692                                  ;----------------------------------------------------------------------------
 11693                                  ;
 11694                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11695                                  ;	as the FCB may be used for further I/O
 11696                                  ;
 11697                                  ;   Inputs:	DS:DX point to FCB
 11698                                  ;   Outputs:	AL = FF if file was not found on disk
 11699                                  ;   Registers modified: all
 11700                                  ;
 11701                                  ;----------------------------------------------------------------------------
 11702                                  ;
 11703                                  	; 16/01/2024
 11704                                  
 11705                                  _$FCB_CLOSE:		; System call 16
 11706                                  
 11707 000017D7 30C0                    	XOR	AL,AL			; default search attributes
 11708 000017D9 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11709 000017DC 7403                    	JZ	short NoAttr		; not extended
 11710 000017DE 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11711                                  NoAttr:
 11712                                  					; SS override
 11713 000017E1 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11714 000017E5 E8C303                  	call	SFTFromFCB
 11715 000017E8 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11716                                  
 11717                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11718                                  	; there is no need to set the SFT's attribute.
 11719                                  
 11720                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11721                                  	;;; done
 11722                                  
 11723                                  	;mov	al,[es:di+4]
 11724 000017EA 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11725 000017EE 30E4                    	XOR	AH,AH
 11726 000017F0 50                      	PUSH	AX
 11727                                  
 11728                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11729                                  	;;; done
 11730                                  
 11731 000017F1 E8335A                  	call	CheckShare
 11732 000017F4 7508                    	JNZ	short NoStash
 11733 000017F6 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11734                                  	;mov	[es:di+4],al
 11735 000017FA 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11736                                  NoStash:
 11737                                  
 11738                                  ; 16/01/2024
 11739                                  %if 0
 11740                                  	;mov	ax,[si+14h]
 11741                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11742                                  	;mov	[es:di+0Fh],ax
 11743                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11744                                  	;mov	ax,[si+16h]
 11745                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11746                                  	;mov	[es:di+0Dh],ax
 11747                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11748                                  	;mov	ax,[si+10h]
 11749                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11750                                  	;mov	[es:di+11h],ax
 11751                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11752                                  	;mov	ax,[si+12h]
 11753                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11754                                  	;mov	[es:di+13h],ax
 11755                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11756                                  	;or	word [es:di+5],4000h
 11757                                  	; 17/12/2022
 11758                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11759                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11760                                  %else
 11761                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11762 000017FE 1E                      	push	ds
 11763                                  	;lds	ax,[si+14h]
 11764 000017FF C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11765                                  	;mov	[es:di+0Fh],ax
 11766 00001802 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11767                                  	;mov	[es:di+0Dh],ds		
 11768 00001806 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11769 0000180A 1F                      	pop	ds
 11770                                  	;lds	ax,[si+10h]
 11771 0000180B C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11772                                  	;mov	[es:di+11h],ax
 11773 0000180E 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11774                                  	;mov	[es:di+13h],ds
 11775 00001812 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11776                                  	; 16/01/2024
 11777                                  	;;or	word [es:di+5], 4000h
 11778                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11779 00001816 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11780                                  %endif
 11781                                  
 11782 0000181B 16                      	push	ss
 11783 0000181C 1F                      	pop	ds
 11784 0000181D E89016                  	call	DOS_CLOSE	; wham
 11785 00001820 C43E[9E05]              	LES	DI,[THISSFT]
 11786                                  
 11787                                  	;;; 9/8/86 F.C. restore SFT attribute
 11788 00001824 59                      	POP	CX
 11789                                  	;mov	[es:di+4],cl
 11790 00001825 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11791                                  	;;; 9/8/86 F.C. restore SFT attribute
 11792                                  
 11793 00001829 9C                      	PUSHF
 11794                                  	;test	word [es:di],0FFFFh
 11795                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11796                                  				; zero ref count gets blasted
 11797 0000182A 26833D00                	cmp	word [ES:DI],0
 11798 0000182E 7507                    	jnz     short CloseOK
 11799 00001830 50                      	PUSH	AX
 11800 00001831 B04D                    	MOV	AL,'M' ; 4Dh
 11801 00001833 E8F202                  	call	BlastSFT
 11802 00001836 58                      	POP	AX
 11803                                  CloseOK:
 11804 00001837 9D                      	POPF
 11805 00001838 739B                    	JNC	short GoodRet
 11806                                  	;cmp	al,6
 11807 0000183A 3C06                    	CMP	AL,error_invalid_handle
 11808 0000183C 7497                    	JZ	short GoodRet
 11809                                  	;mov	al,2
 11810 0000183E B002                    	MOV	AL,error_file_not_found
 11811                                  fren90:
 11812                                  	; 16/12/2022
 11813                                  fcb_close_err:
 11814 00001840 E917EE                  	jmp	FCB_RET_ERR
 11815                                  
 11816                                  ;
 11817                                  ;----------------------------------------------------------------------------
 11818                                  ;
 11819                                  ;**	$FCB_Rename - Rename a File
 11820                                  ;
 11821                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11822                                  ;	multiple files copying from the meta characters.
 11823                                  ;
 11824                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11825                                  ;		    name of the files to be renamed. Starting at offset 11h
 11826                                  ;		    in the FCB is the destination name.
 11827                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11828                                  ;		AL = FF -> some files may have been renamed but:
 11829                                  ;			rename to existing file or source file not found
 11830                                  ;	USES	ALL
 11831                                  ;
 11832                                  ;----------------------------------------------------------------------------
 11833                                  ;
 11834                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11835                                  
 11836                                  _$FCB_RENAME:		; System call 23
 11837                                  
 11838 00001843 E8F603                  	call	GetExtended		; get pointer to real FCB
 11839 00001846 52                      	push	dx
 11840 00001847 8A04                    	MOV	AL,[SI] 		; get drive byte
 11841 00001849 83C610                  	ADD	SI,10h			; point to destination
 11842                                  
 11843                                  					; RenBuf is in DOSDATA
 11844 0000184C BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11845 0000184F FF34                    	push	word [SI]
 11846 00001851 1E                      	push	ds
 11847                                  	;push	di			; save source pointer for TransFCB
 11848                                  	; 16/01/2024 - BugFix !
 11849 00001852 56                      	push	si
 11850 00001853 8804                    	MOV	[SI],AL			; drop in real drive
 11851 00001855 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11852 00001857 E8A151                  	call	TransFCB		; munch this pathname
 11853 0000185A 5E                      	pop	si
 11854 0000185B 1F                      	pop	ds	
 11855 0000185C 8F04                    	pop	WORD [SI]		; get path back
 11856 0000185E 5A                      	pop	dx			; Original FCB pointer
 11857 0000185F 72DF                    	JC	short fren90		; bad path -> error
 11858                                  
 11859                                  					; SS override for WFP_Start & Ren_WFP
 11860 00001861 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11861 00001866 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11862                                  
 11863                                  					; OpenBuf is in DOSDATA
 11864 0000186B BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11865 0000186E E88A51                  	call	TransFCB		; wham
 11866                                  					; NOTE that this call is pointing
 11867                                  					;  back to the ORIGINAL FCB so
 11868                                  					;  SATTRIB gets set correctly
 11869 00001871 72CD                    	JC	short fren90		; error
 11870 00001873 E81F0E                  	call	DOS_RENAME
 11871 00001876 72C8                    	JC	short fren90
 11872                                  	; 16/12/2022
 11873 00001878 E9DCED                  	jmp	FCB_RET_OK
 11874                                  	
 11875                                  ;	Error -
 11876                                  ;
 11877                                  ;	(al) = error code
 11878                                  
 11879                                  	; 16/12/2022
 11880                                  ;fren90:	
 11881                                  ;	;jmp	FCB_RET_ERR
 11882                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11883                                  ;	jmp	short fcb_close_err
 11884                                  
 11885                                  ;Break <Misbehavior fixers>
 11886                                  ;
 11887                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11888                                  ;   user's space so he may move them at will. Second, they have a small
 11889                                  ;   reserved area that may be used for system information. Third, there was
 11890                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11891                                  ;   usage.
 11892                                  ;
 11893                                  ;   This results in the following misbehavior:
 11894                                  ;
 11895                                  ;	infinite opens of the same file:
 11896                                  ;
 11897                                  ;	While (TRUE) {			While (TRUE) {
 11898                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11899                                  ;	    Read (FCB); 		    Write (FCB);
 11900                                  ;	    }				    }
 11901                                  ;
 11902                                  ;	infinite opens of different files:
 11903                                  ;
 11904                                  ;	While (TRUE) {			While (TRUE) {
 11905                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11906                                  ;	    Read (FCB); 		    Write (FCB);
 11907                                  ;	    }				    }
 11908                                  ;
 11909                                  ;	multiple closes of the same file:
 11910                                  ;
 11911                                  ;	FCBOpen (FCB);
 11912                                  ;	while (TRUE)
 11913                                  ;	    FCBClose (FCB);
 11914                                  ;
 11915                                  ;	I/O after closing file:
 11916                                  ;
 11917                                  ;	FCBOpen (FCB);
 11918                                  ;	while (TRUE) {
 11919                                  ;	    FCBWrite (FCB);
 11920                                  ;	    FCBClose (FCB);
 11921                                  ;	    }
 11922                                  ;
 11923                                  ;   The following is am implementation of a methodology for emulating the
 11924                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11925                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11926                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11927                                  ;   the local machine.
 11928                                  ;
 11929                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11930                                  ;   structures depending on the file itself and the state of operations of the
 11931                                  ;   OS. The information contained in this reserved field is enough to
 11932                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11933                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11934                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11935                                  ;
 11936                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11937                                  ;
 11938                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11939                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11940                                  ;   regenerated.
 11941                                  ;
 11942                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11943                                  ;   longer available. We can make up for this by using the following
 11944                                  ;   information:
 11945                                  ;
 11946                                  ;	The Drive number (from the DPB).
 11947                                  ;	The physical sector of the directory that contains the entry.
 11948                                  ;	The relative position of the entry in the sector.
 11949                                  ;	The first cluster field.
 11950                                  ;	The last used SFT.
 11951                                  ;      OR In the case of a device FCB
 11952                                  ;	The low 6 bits of sf_flags (indicating device type)
 11953                                  ;	The pointer to the device header
 11954                                  ;
 11955                                  ;   We read in the particular directory sector and examine the indicated
 11956                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11957                                  ;
 11958                                  ;   Some key items need to be remembered:
 11959                                  ;
 11960                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11961                                  ;	information. We enforce good behavior on the FCBs.
 11962                                  ;
 11963                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11964                                  ;	open VCs. The VCs may be closed only at process termination.
 11965                                  ;
 11966                                  ;	If this is not an installed version of the DOS, file sharing will
 11967                                  ;	always be present.
 11968                                  ;
 11969                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11970                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11971                                  ;
 11972                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11973                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11974                                  ;	proper OI record.
 11975                                  ;
 11976                                  ;   The test bits are:
 11977                                  ;
 11978                                  ;	00 -> local file
 11979                                  ;	40 -> sharing local
 11980                                  ;	80 -> network
 11981                                  ;	C0 -> local device
 11982                                  
 11983                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11984                                  ;----------------------------------------------------------------------------
 11985                                  ;
 11986                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11987                                  ;	pieces of information into the FCB to allow for subsequent
 11988                                  ;	regeneration. Poke LRU also.
 11989                                  ;
 11990                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11991                                  ;		DS:SI point to the FCB (not an extended one)
 11992                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11993                                  ;		DS:SI preserved
 11994                                  ;		ES:DI point to sft
 11995                                  ;   Registers modified: All
 11996                                  ;
 11997                                  ;
 11998                                  ;----------------------------------------------------------------------------
 11999                                  ;
 12000                                  	; 20/01/2024
 12001                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12002                                  
 12003                                  SaveFCBInfo:
 12004                                  
 12005 0000187B 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12006 00001880 E8CCF9                  	call	IsSFTNet
 12007 00001883 740B                    	JZ	short SaveLocal		; if not network then save local info
 12008                                  ;
 12009                                  ;----- In net support -----
 12010                                  ;
 12011                                  	; 17/05/2019 - Retro DOS v4.0
 12012                                  
 12013                                  	; MSDOS 3.3
 12014                                  	;;mov	ax,[es:di+1Dh]
 12015                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12016                                  	;;mov	[si+1Ah],ax
 12017                                  	;mov	[si+fcb_net_handle],ax
 12018                                  	;push	es
 12019                                  	;push	di
 12020                                  	;;les	di,[es:di+19h]
 12021                                  	;LES	DI,[ES:DI+sf_netid]
 12022                                  	;;mov	[si+1Ch],di
 12023                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12024                                  	;;mov 	[si+1Eh],es
 12025                                  	;MOV	[SI+fcb_netID+2],ES
 12026                                  	;pop	di
 12027                                  	;pop	es
 12028                                  
 12029                                  	; MSDOS 6.0
 12030                                  	;mov	ax,[es:di+0Bh]
 12031 00001885 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12032                                  	;mov	[si+1Ch],ax
 12033 00001889 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12034                                  	
 12035                                  	;mov	bl,80h
 12036 0000188C B380                    	MOV	BL,FCBNETWORK
 12037                                  ;
 12038                                  ;----- END In net support -----
 12039                                  ;
 12040 0000188E EB63                    	jmp	SHORT SaveSFN
 12041                                  
 12042                                  SaveLocal:
 12043                                  	;IF	Installed
 12044 00001890 E89459                  	call	CheckShare
 12045                                  	;JZ	short SaveNoShare	; no sharer
 12046                                  	;JMP	short SaveShare		; sharer present
 12047                                  	; 16/12/2022
 12048                                  	; 28/07/2019
 12049 00001893 7559                    	jnz	short SaveShare
 12050                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12051                                  	;JZ	short SaveNoShare	; no sharer
 12052                                  	;JMP	short SaveShare		; sharer present
 12053                                  
 12054                                  SaveNoShare:
 12055                                  	;;test 	word [es:di+5],80h
 12056                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12057 00001895 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12058 0000189A 7542                    	JNZ	short SaveNoShareDev	; Device
 12059                                  
 12060                                  	; Save no sharing local file information
 12061                                  
 12062                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12063                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12064 0000189C 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12065                                  	;mov	[si+1Dh],ax
 12066 000018A0 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12067                                  
 12068                                  	; MSDOS 6.0
 12069                                  
 12070                                  	;SR; Store high byte of directory sector
 12071                                  	;mov	ax,[es:di+1Dh]
 12072 000018A3 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12073                                  	
 12074                                  	; SR;
 12075                                  	; We have to store the read-only and archive attributes of the file.
 12076                                  	; We extract it from the SFT and store it in the top two bits of the 
 12077                                  	; sector number ( sector number == 22 bits only )
 12078                                  
 12079                                  	;mov	bl,[es:di+4]
 12080 000018A7 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12081 000018AB 88DF                    	mov	bh,bl
 12082 000018AD D0CB                    	ror	bl,1
 12083 000018AF D0E7                    	shl	bh,1
 12084 000018B1 08FB                    	or	bl,bh
 12085 000018B3 80E3C0                  	and	bl,0C0h
 12086 000018B6 08D8                    	or	al,bl
 12087                                  	;mov	[si+18h],al ; 08/11/2022
 12088 000018B8 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12089                                  
 12090                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12091                                  	;mov	al,[es:di+1Fh]
 12092 000018BB 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12093                                  	;mov	[si+1Fh],al
 12094 000018BF 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12095                                  	;mov	ax,[es:di+0Bh]
 12096 000018C2 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12097                                  	;mov	[si+1Bh],ax
 12098 000018C6 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12099 000018C9 B300                    	MOV	BL,0
 12100                                  
 12101                                  	; Create the bits field from the dirty/device bits of the flags word 
 12102                                  	; and the mode byte
 12103                                  
 12104                                  SetFCBBits:
 12105                                  	;mov	ax,[es:di+5]
 12106 000018CB 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12107 000018CF 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12108                                  	;or	al,[es:di+2]
 12109 000018D1 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12110                                  	;mov	[si+1Ah], al
 12111 000018D5 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12112                                  
 12113                                  	; MSDOS 6.0
 12114                                  	
 12115                                  	; SR;
 12116                                  	; Check if we came here for local file or device. If for local file, 
 12117                                  	; skip setting of SFT index
 12118                                  	
 12119 000018D8 08DB                    	or	bl,bl
 12120 000018DA 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12121                                  
 12122 000018DC EB15                    	JMP	short SaveSFN 		; go and save SFN
 12123                                  
 12124                                  	; Save no sharing local device information
 12125                                  
 12126                                  SaveNoShareDev:
 12127                                  	; 20/01/2024
 12128                                  	;;mov	ax,[es:di+7]
 12129                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12130                                  	;;mov	[si+1Ah],ax
 12131                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12132                                  	;;mov	ax,[es:di+9]
 12133                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12134                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12135                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12136 000018DE 06                      	push	es
 12137 000018DF 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12138 000018E3 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12139 000018E6 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12140 000018E9 07                      	pop	es
 12141                                  	
 12142                                  	;mov	bl,40h
 12143 000018EA B340                    	MOV	BL,FCBDEVICE
 12144                                  	; 28/12/2022
 12145 000018EC EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12146                                  
 12147                                  SaveShare:
 12148                                  	;ENDIF
 12149                                  
 12150                                  ;----- In share support -----
 12151                                  
 12152                                  	;call	far [ss:ShSave]
 12153 000018EE 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12154                                  
 12155                                  ;----- end in share support -----
 12156                                  
 12157                                  	; 17/05/2019
 12158                                  
 12159                                  SaveSFN:
 12160                                  	;lea	ax,[di-6]
 12161 000018F3 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12162                                  	
 12163                                  	; Adjust for offset to table.
 12164                                  	
 12165 000018F6 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12166                                  
 12167 000018FB 53                      	push	bx			;bx = FCB type (net/Share or local)
 12168                                  	;;mov	bl,53 ; MSDOS 3.3
 12169                                  	;mov	bl,59 ; MSDOS 6.0
 12170 000018FC B33B                    	MOV	BL,SF_ENTRY.size
 12171 000018FE F6F3                    	DIV	BL
 12172                                  	;mov	[si+18h],al
 12173 00001900 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12174 00001903 5B                      	pop	bx			;restore bx
 12175                                  
 12176                                  SaveNoSFN:
 12177                                  	;mov	ax,[es:di+5]
 12178 00001904 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12179 00001908 243F                    	AND	AL,3Fh			; get real drive
 12180 0000190A 08D8                    	OR	AL,BL
 12181                                  	;mov	[si+19h],al
 12182 0000190C 884419                  	MOV	[SI+fcb_l_drive],AL
 12183                                  
 12184 0000190F 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12185 00001913 40                      	INC	AX
 12186                                  	;mov	[es:di+15h],ax
 12187 00001914 26894515                	MOV	[ES:DI+sf_LRU],AX
 12188 00001918 7506                    	JNZ	short SimpleStuff
 12189                                  	
 12190                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12191                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12192                                  	
 12193                                  	;mov	bx,15h
 12194 0000191A BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12195 0000191D E80500                  	call	ResetLRU
 12196                                  
 12197                                  	; Set new LRU to AX
 12198                                  SimpleStuff:
 12199 00001920 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12200 00001924 C3                      	retn
 12201                                  
 12202                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12203                                  ;----------------------------------------------------------------------------
 12204                                  ;
 12205                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12206                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12207                                  ;   at 0.
 12208                                  ;
 12209                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12210                                  ;		ES:DI point to SFT currently being updated
 12211                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12212                                  ;		AX has 8000h
 12213                                  ;   Registers modified: none
 12214                                  ;
 12215                                  ;----------------------------------------------------------------------------
 12216                                  ;
 12217                                  
 12218                                  	; 17/05/2019 - Retro DOS v4.0
 12219                                  ResetLRU:
 12220                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12221                                  	; DOSDATA
 12222                                  
 12223 00001925 B80080                  	MOV	AX,8000h
 12224 00001928 06                      	push	es
 12225 00001929 57                      	push	di
 12226                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12227 0000192A 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12228                                  	;mov	cx,[es:di+4]
 12229 0000192F 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12230                                  	;lea	di,[di+6]
 12231 00001933 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12232                                  ovScan:
 12233 00001936 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12234 00001939 7703                    	JA	short ovLoop
 12235 0000193B 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12236                                  ovLoop:
 12237                                  	;;add	di,53	; MSDOS 3.3
 12238                                  	;add	di,59	; MSDOS 6.0	
 12239 0000193E 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12240 00001941 E2F3                    	LOOP	ovScan
 12241 00001943 5F                      	pop	di
 12242 00001944 07                      	pop	es
 12243 00001945 268901                  	MOV	[ES:DI+BX],AX
 12244 00001948 C3                      	retn
 12245                                  
 12246                                  ;IF  0  ; We dont need this routine any more.
 12247                                  ;
 12248                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12249                                  ;----------------------------------------------------------------------------
 12250                                  ;
 12251                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12252                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12253                                  ;   count here and fill in the appropriate field.
 12254                                  ;
 12255                                  ;   Inputs:	ES:DI point to SFT
 12256                                  ;   Outputs:	ES:DI has the open age field filled in.
 12257                                  ;		If open age has wraparound, we will have subtracted 8000h
 12258                                  ;		    from all open ages.
 12259                                  ;   Registers modified: AX
 12260                                  ;
 12261                                  ;----------------------------------------------------------------------------
 12262                                  ;
 12263                                  ;SetOpenAge:
 12264                                  ;	; 20/07/2018 - Retro DOS v3.0
 12265                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12266                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12267                                  ;
 12268                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12269                                  ;
 12270                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12271                                  ;	INC	AX
 12272                                  ;	;mov	[es:di+17h],ax
 12273                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12274                                  ;	JNZ	short SetDone
 12275                                  ;	;mov	bx,17h
 12276                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12277                                  ;	call	ResetLRU
 12278                                  ;SetDone:
 12279                                  ;	MOV	[CS:OpenLRU],AX
 12280                                  ;	retn
 12281                                  ;
 12282                                  ;ENDIF	; SetOpenAge no longer needed
 12283                                  
 12284                                  ; 21/07/2018 - Retro DOS v3.0
 12285                                  ; LRUFCB for MSDOS 6.0 !
 12286                                  
 12287                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12288                                  ;----------------------------------------------------------------------------
 12289                                  ;
 12290                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12291                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12292                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12293                                  ;
 12294                                  ;   Inputs:	none
 12295                                  ;   Outputs:	ES:DI point to SFT
 12296                                  ;		ThisSFT points to SFT
 12297                                  ;		SFT is zeroed
 12298                                  ;		Carry set of closes failed
 12299                                  ;   Registers modified: none
 12300                                  ;
 12301                                  ;----------------------------------------------------------------------------
 12302                                  ;
 12303                                  ; MSDOS 6.0
 12304                                  ;IF 0	; rewritten this routine
 12305                                  ;
 12306                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12307                                  ;	call	save_world
 12308                                  ;	
 12309                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12310                                  ; to find the lease recently used one that is younger than the open age.  We
 12311                                  ; operate be scanning the list n times finding the least age that is greater
 12312                                  ; or equal to the previous minimum age.
 12313                                  ;
 12314                                  ;   BP is the count of times we need to go through this loop.
 12315                                  ;   AX is the current acceptable minimum age to consider
 12316                                  ;
 12317                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12318                                  ;	XOR	AX,AX			; low = 0;
 12319                                  ;
 12320                                  ; If we've scanned the table n times, then we are done.
 12321                                  ;
 12322                                  ;lru1:
 12323                                  ;	CMP	bp,0			; while (k--) {
 12324                                  ;	JZ	short lru75
 12325                                  ;	DEC	bp
 12326                                  ;
 12327                                  ; Set up for scan.
 12328                                  ;
 12329                                  ;   AX is the minimum age for consideration
 12330                                  ;   BX is the minimum age found during the scan
 12331                                  ;   SI is the position of the entry that corresponds to BX
 12332                                  ;
 12333                                  ;	MOV	BX,-1			;     min = 0xffff;
 12334                                  ;	MOV	si,BX			;     pos = 0xffff;
 12335                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12336                                  ;	;mov	cx,[es:di+4]
 12337                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12338                                  ;	;lea	di,[di+6]
 12339                                  ;	LEA	DI,[DI+SFT.SFTable]
 12340                                  ;
 12341                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12342                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12343                                  ; are done.  In both cases, we use the found entry.
 12344                                  ;
 12345                                  ;lru2:
 12346                                  ;	cmp	word [es:di],0
 12347                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12348                                  ;	jz	short lru25
 12349                                  ;	;cmp	word [es:di],-1
 12350                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12351                                  ;	cmp	word [es:di],sf_busy
 12352                                  ;	jnz	short lru3
 12353                                  ;
 12354                                  ; The entry is usable without further scan.  Go and use it.
 12355                                  ;
 12356                                  ;lru25:
 12357                                  ;	MOV	si,DI			;	      pos = i;
 12358                                  ;	JMP	short lru11		;	      goto got;
 12359                                  ;
 12360                                  ; See if the entry is for the network or for the sharer.
 12361                                  ;
 12362                                  ;  If for the sharer or network then
 12363                                  ;	if the age < current minimum AND >= allowed minimum then
 12364                                  ;	    this entry becomes current minimum
 12365                                  ;
 12366                                  ;lru3:
 12367                                  ;	;test	word [es:di+5],8000h
 12368                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12369                                  ;					;	  if (!net[i]
 12370                                  ;	JNZ	short lru35
 12371                                  ;if installed
 12372                                  ;	call	CheckShare		;		&& !sharing)
 12373                                  ;	JZ	short lru5		;	  else
 12374                                  ;ENDIF
 12375                                  ;
 12376                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12377                                  ; current minimum.
 12378                                  ;
 12379                                  ;lru35:
 12380                                  ;	;mov	dx,[es:di+17h]
 12381                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12382                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12383                                  ;	JB	short lru5
 12384                                  ;	CMP	DX,BX
 12385                                  ;	JAE	short lru5		;	      age[i] < min) {
 12386                                  ;
 12387                                  ; entry is new minimum.  Remember his age.
 12388                                  ;
 12389                                  ;	mov	bx,DX			;	      min = age[i];
 12390                                  ;	mov	si,di			;	      pos = i;
 12391                                  ;
 12392                                  ; End of loop.	gp back for more
 12393                                  ;
 12394                                  ;lru5:
 12395                                  ;	;add	di,53
 12396                                  ;	add	di,SF_ENTRY.size
 12397                                  ;	loop	lru2			;	      }
 12398                                  ;
 12399                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12400                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12401                                  ; complete.  Go find LRU.
 12402                                  ;
 12403                                  ;lru6:	
 12404                                  ;	cmp	si,-1			; position not -1?
 12405                                  ;	jz	short lru75		; no, done with everything
 12406                                  ;	lea	ax,[bx+1]		; set new threshold age
 12407                                  ;	jmp	short lru1		; go and loop for more
 12408                                  ;lru65:	
 12409                                  ;	stc
 12410                                  ;	jmp	short LRUDead		;	  return -1;
 12411                                  ;
 12412                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12413                                  ; network entry. We now make a second pass through to find the LRU entry
 12414                                  ; that is local-no-share or has age >= AX
 12415                                  ;
 12416                                  ;lru75:
 12417                                  ;	mov	bx,-1			; min = 0xffff;
 12418                                  ;	mov	si,bx			; pos = 0xffff;
 12419                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12420                                  ;	;mov	cx,[es:di+4]
 12421                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12422                                  ;	;lea	di,[di+6]
 12423                                  ;	LEA	DI,[DI+SFT.SFTable]
 12424                                  ;
 12425                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12426                                  ; then check for lru.
 12427                                  ;
 12428                                  ;lru8:
 12429                                  ;	;test	word [es:di+5],8000h
 12430                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12431                                  ;	jnz	short lru85		; is for network, go check age
 12432                                  ;	call	CheckShare		; sharer here?
 12433                                  ;	jz	short lru86		; no, go check lru
 12434                                  ;
 12435                                  ; Network or sharer.  Check age
 12436                                  ;
 12437                                  ;lru85:
 12438                                  ;	;cmp	[es:di+17h],ax
 12439                                  ;	cmp	[es:di+sf_OpenAge],ax
 12440                                  ;	jb	short lru9		; age is before threshold, skip it
 12441                                  ;
 12442                                  ; Check LRU
 12443                                  ;
 12444                                  ;lru86:
 12445                                  ;	;cmp	[es:di+15h],bx
 12446                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12447                                  ;	jae	short lru9		; no, skip this
 12448                                  ;	mov	si,di			; remember position
 12449                                  ;	;mov	bx,[es:di+15h]
 12450                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12451                                  ;
 12452                                  ; Done with this entry, go back for more.
 12453                                  ;
 12454                                  ;lru9:
 12455                                  ;	;add	di, 53
 12456                                  ;	add	di,SF_ENTRY.size
 12457                                  ;	loop	lru8
 12458                                  ;
 12459                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12460                                  ; out. The conditions here are:
 12461                                  ;
 12462                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12463                                  ;
 12464                                  ;lru10:
 12465                                  ;	cmp	si,-1			; if no one f
 12466                                  ;	jz	short lru65		;     return -1;
 12467                                  ;lru11:
 12468                                  ;	mov	di,si
 12469                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12470                                  ;	MOV	[CS:THISSFT+2],ES
 12471                                  ;
 12472                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12473                                  ; is 0.
 12474                                  ;
 12475                                  ;	;test	word [es:di+5],8000h
 12476                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12477                                  ;	JNZ	short LRUClose
 12478                                  ;IF INSTALLED
 12479                                  ;	call	CheckShare
 12480                                  ;	JZ	short LRUDone
 12481                                  ;ENDIF
 12482                                  ;
 12483                                  ; Repeat close until ref count is 0
 12484                                  ;
 12485                                  ;LRUClose:
 12486                                  ;	push	ss
 12487                                  ;	pop	ds
 12488                                  ;	LES	DI,[THISSFT]
 12489                                  ;	cmp     word [es:di],0
 12490                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12491                                  ;	JZ	short LRUDone 		; nope, all done
 12492                                  ;	call	DOS_CLOSE
 12493                                  ;	jnc	short LRUClose		; no error => clean up
 12494                                  ;	;cmp	al,6
 12495                                  ;	cmp	al,error_invalid_handle
 12496                                  ;	jz	short LRUClose
 12497                                  ;	stc
 12498                                  ;	JMP	short LRUDead
 12499                                  ;LRUDone:
 12500                                  ;	XOR	AL,AL
 12501                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12502                                  ;
 12503                                  ;LRUDead:
 12504                                  ;	call	restore_world
 12505                                  ;	LES     DI,[CS:THISSFT]
 12506                                  ;	jnc	short LRUFCB_retn
 12507                                  ;LRUFCB_err:
 12508                                  ;	; mov	al, 23h	
 12509                                  ;	MOV	AL,error_FCB_unavailable
 12510                                  ;LRUFCB_retn:	
 12511                                  ;	retn:
 12512                                  ;
 12513                                  ;ENDIF	; LRUFCB has been rewritten below.
 12514                                  
 12515                                  ; 17/05/2019 - Retro DOS v4.0
 12516                                  ; LRUFCB for MSDOS 6.0 !
 12517                                  ;----------------------------------------------------------------------------
 12518                                  ;
 12519                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12520                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12521                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12522                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12523                                  ; optimize regeneration operations by keeping track of the current local
 12524                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12525                                  ; local SFT in the SFT Block.
 12526                                  ;
 12527                                  ; Inputs: al = 0 => Regenerate SFT operation
 12528                                  ;	    = 1 => Allocate new SFT for Open/Create
 12529                                  ;
 12530                                  ; Outputs: Carry clear
 12531                                  ;	 	es:di = Address of allocated SFT
 12532                                  ;	  	ThisSFT = Address of allocated SFT
 12533                                  ;
 12534                                  ;	  carry set if closes of net/Share files failed 
 12535                                  ;		al = error_FCB_unavailable
 12536                                  ;
 12537                                  ; Registers affected: None
 12538                                  ;
 12539                                  ;----------------------------------------------------------------------------
 12540                                  
 12541                                  ;LruFCB	PROC	NEAR
 12542                                  LRUFCB:
 12543                                  	; 17/05/2019 - Retro DOS v4.0
 12544                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12545                                  
 12546                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12547                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12548                                  
 12549                                  	; 20/01/2024
 12550                                  
 12551 00001949 06                      	push	es	; * (MSDOS 6.21)
 12552                                  	
 12553 0000194A E819EB                  	call	save_world
 12554                                  	
 12555                                  	;getdseg <ds>		;ds = DOSDATA
 12556 0000194D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12557                                  
 12558 00001952 08C0                    	or	al,al		;Check if regenerate allocation
 12559 00001954 7516                    	jnz	short lru1	;Try to find SFT to use
 12560                                  
 12561                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12562                                  	; local SFT, just return that SFT to reuse
 12563                                  
 12564                                  	; 20/01/2024
 12565                                  	;mov	di,[LocalSFT]
 12566                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12567                                  	;jz	short lru1	;invalid local SFT, find one
 12568                                  
 12569                                  	; We have found a valid local SFT. Recycle this SFT
 12570                                  
 12571 00001956 C43E[4410]              	les	di,[LocalSFT]
 12572                                  
 12573                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12574 0000195A 8CC1                    	mov	cx,es
 12575 0000195C 09F9                    	or	cx,di		; is address == 0?
 12576 0000195E 740C                    	jz	short lru1	; invalid local SFT, find one
 12577                                  
 12578                                  gotlocalSFT:
 12579 00001960 893E[9E05]              	mov	[THISSFT],di
 12580 00001964 8C06[A005]              	mov	[THISSFT+2],es
 12581 00001968 F8                      	clc
 12582 00001969 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12583                                  
 12584                                  lru1:
 12585 0000196C C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12586                                  	;mov	cx,[es:di+4]
 12587 00001970 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12588                                  	;lea	di,[di+6]
 12589 00001974 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12590                                  
 12591                                  	; We scan through all the SFTs scanning for a free one. It also 
 12592                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12593                                  	; bx = min. LRU for local SFTs
 12594                                  	; si = pos. of local SFT with min. LRU
 12595                                  	; dx = min. LRU for net/Share SFTs
 12596                                  	; bp = pos. of net/Share SFT with min. LRU
 12597                                  
 12598 00001977 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12599 0000197A 89DE                    	mov	si,bx
 12600 0000197C 89DA                    	mov	dx,bx
 12601 0000197E 89DD                    	mov	bp,bx
 12602                                  
 12603                                  findSFT:
 12604                                  	;See if this SFT is a free one. If so, return it
 12605 00001980 26830D00                	or	word [es:di],0
 12606                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12607 00001984 744C                    	jz	short gotSFT	;yes, SFT is free
 12608                                  	;;cmp	word [es:di],-1
 12609                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12610 00001986 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12611 0000198A 7446                    	jz	short gotSFT	;no, can use it
 12612                                  
 12613                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12614                                  	; used for a later regen.
 12615                                  
 12616                                  	; 16/12/2022
 12617                                  	; 08/11/2022
 12618                                  	;test	byte [es:di+6],80h
 12619 0000198C 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12620                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12621                                  	;;test	word [es:di+5],8000h
 12622                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12623 00001991 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12624                                  
 12625                                  ;IF installed
 12626 00001993 E89158                  	call	CheckShare	;Share present?
 12627                                  ;ENDIF
 12628 00001996 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12629                                  
 12630                                  	;Local SFT, register its address
 12631                                  
 12632                                  	; !!HACK!!!
 12633                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12634                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12635                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12636                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12637                                  	; out the code that previously existed at label 'gotSFT'
 12638                                  
 12639                                  hackpoint:
 12640 00001998 893E[4410]              	mov	[LocalSFT],di
 12641 0000199C 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12642                                  
 12643 000019A0 08C0                    	or	al,al		;Is operation = REGEN?
 12644 000019A2 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12645                                  
 12646                                  	;Get LRU for local files
 12647                                  	
 12648                                  	;cmp	[es:di+15h],bx
 12649 000019A4 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12650 000019A8 7306                    	jae	short lru4	;no, skip
 12651                                  
 12652                                  	;mov	bx,[es:di+15h]
 12653 000019AA 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12654 000019AE 89FE                    	mov	si,di		;store SFT position
 12655                                  lru4:
 12656                                  	;add	di,59
 12657 000019B0 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12658 000019B3 E2CB                    	loop	findSFT
 12659                                  	
 12660                                  	; 20/01/2024
 12661 000019B5 49                      	dec	cx ; -1
 12662                                  
 12663                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12664                                  	; available, we will reuse it instead of net/Share LRU
 12665                                  
 12666 000019B6 89F7                    	mov	di,si
 12667                                  	;cmp	si,-1		;local SFT available?
 12668 000019B8 39CE                    	cmp	si,cx ; 20/01/2024
 12669 000019BA 7516                    	jnz	short gotSFT	;yes, return it
 12670                                  
 12671                                  	;No local SFT, see if we got a net/Share SFT
 12672                                  
 12673 000019BC 89EF                    	mov	di,bp
 12674                                  
 12675 000019BE 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12676                                  	;cmp	bp,-1		;net/Share SFT available?
 12677 000019C0 752D                    	jnz	short gotnetSFT	;yes, return it
 12678                                  noSFT:
 12679                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12680                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12681                                  	; count is not maintained properly.
 12682                                  
 12683 000019C2 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12684                                  
 12685                                  	; Handle the LRU for net/Share SFTs
 12686                                  lru5:
 12687                                  	;cmp	[es:di+15h],dx
 12688 000019C4 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12689 000019C8 73E6                    	jae	short lru4	;no, skip
 12690                                  
 12691                                  	;mov	dx,[es:di+15h]
 12692 000019CA 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12693                                  
 12694 000019CE 89FD                    	mov	bp,di		;store SFT position
 12695 000019D0 EBDE                    	jmp	short lru4	;continue with next SFT
 12696                                  
 12697                                  gotSFT:
 12698 000019D2 08C0                    	or	al,al
 12699 000019D4 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12700                                  
 12701                                  	; HACK!!!
 12702                                  	; The code here differs from the code at 'hackpoint' only in the
 12703                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12704                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12705                                  	; has been commented out below and replaced by the code just above.
 12706                                  
 12707                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12708                                  ;
 12709                                  ;	or	al,al		  ;Regen?
 12710                                  ;	jnz	short notlocaluse ;yes, register it and return
 12711                                  ;
 12712                                  ;Register this SFT as a local one
 12713                                  ;
 12714                                  ;	mov	[LocalSFT],di
 12715                                  ;	mov	[LocalSFT+2],es
 12716                                  ;	jmp	gotlocalSFT	;return to caller
 12717                                  ;
 12718                                  ;notlocaluse:
 12719                                  
 12720                                  	; The caller is probably going to use this SFT for a net/Share file.
 12721                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12722                                  	; does not really know whether it is a local file or not. We
 12723                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12724                                  	; registered as a local SFT that can be recycled.
 12725                                  
 12726 000019D6 8CC0                    	mov	ax,es
 12727 000019D8 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12728 000019DC 750E                    	jne	short notinvalid
 12729 000019DE 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12730                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12731                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12732 000019E2 7508                    	jne	short notinvalid
 12733                                  zerolocalSFT:	
 12734 000019E4 31C0                    	xor	ax,ax ; 0
 12735 000019E6 A3[4410]                	mov	[LocalSFT],ax
 12736 000019E9 A3[4610]                	mov	[LocalSFT+2],ax
 12737                                  	
 12738                                  notinvalid:
 12739 000019EC E971FF                  	jmp	gotlocalSFT
 12740                                  
 12741                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12742                                  	; Invalidate this variable i.e LocalSFT = NULL
 12743                                  
 12744                                  ;zerolocalSFT:
 12745                                  	;xor	ax,ax ; 0
 12746                                  	;mov	[LocalSFT],ax
 12747                                  	;mov	[LocalSFT+2],ax
 12748                                  	;
 12749                                  	;jmp	gotlocalSFT
 12750                                  
 12751                                  gotnetSFT:
 12752                                  	; We have an SFT that is currently net/Share. If it is going to be
 12753                                  	; used for a regen, we know it has to be a local SFT. Update the
 12754                                  	; LocalSFT variable
 12755                                  
 12756 000019EF 08C0                    	or	al,al
 12757 000019F1 7508                    	jnz	short closenet
 12758                                  
 12759 000019F3 893E[4410]              	mov	[LocalSFT],di
 12760 000019F7 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12761                                  closenet:
 12762 000019FB 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12763 000019FF 8C06[A005]              	mov	[THISSFT+2],es
 12764                                  
 12765                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12766                                  	; count is 0.
 12767                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12768                                  	; recycled -- no need to check for this.
 12769                                  
 12770                                  LRUClose:
 12771 00001A03 26833D00                	cmp	word [es:di],0
 12772                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12773 00001A07 740C                    	jz	short LRUDone	; nope, all done
 12774                                  
 12775 00001A09 E8A414                  	call	DOS_CLOSE
 12776 00001A0C 73F5                    	jnc	short LRUClose	; no error => clean up
 12777                                  
 12778                                  	; Bugbug: I dont know why we are trying to close after we get an
 12779                                  	; error closing. Seems like we could have a potential infinite loop
 12780                                  	; here. This has to be verified.
 12781                                  
 12782 00001A0E 3C06                    	cmp	al,error_invalid_handle ; 6
 12783 00001A10 74F1                    	je	short LRUClose
 12784                                  errorbadSFT:
 12785 00001A12 F9                      	stc
 12786 00001A13 EB05                    	JMP	short LRUDead
 12787                                  LRUDone:
 12788 00001A15 30C0                    	XOR	AL,AL
 12789 00001A17 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12790                                  
 12791                                  LRUDead:
 12792 00001A1A E832EA                  	call	restore_world		; use macro
 12793                                  	
 12794 00001A1D 07                      	pop	es ; * (MSDOS 6.21)
 12795                                  
 12796                                  	;getdseg <es>
 12797 00001A1E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12798 00001A23 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12799                                  
 12800                                  	;;retnc
 12801                                  	;jc	short LruFCB_err
 12802                                  	;retn
 12803                                  
 12804                                  	; 16/12/2022
 12805                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12806 00001A28 7302                    	jnc	short LruFCB_retn
 12807                                  	;jc	short LruFCB_err
 12808                                  	;retn
 12809                                  		
 12810                                  LruFCB_err:
 12811 00001A2A B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12812                                  LruFCB_retn:
 12813 00001A2C C3                      	retn
 12814                                  	
 12815                                  ;LruFCB	ENDP
 12816                                  
 12817                                  ; 17/05/2019 - Retro DOS v4.0
 12818                                  
 12819                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12820                                  
 12821                                  ; --------------------------------------------------------------------------
 12822                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12823                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12824                                  ; to copy the name to different destinations
 12825                                  ;
 12826                                  ; Inputs: ds:si = source string
 12827                                  ;	 es:di = destination string
 12828                                  ;	 cx = length of string
 12829                                  ;
 12830                                  ; Outputs: String copied to destination
 12831                                  ;
 12832                                  ; Registers affected: cx,di,si
 12833                                  ; --------------------------------------------------------------------------
 12834                                  
 12835                                  RegenCopyName:
 12836                                  CopyName:
 12837 00001A2D AC                      	lodsb			;load character
 12838 00001A2E E80A35                  	call	UCase		; convert char to upper case
 12839                                  StuffChar2:
 12840 00001A31 AA                      	STOSB			;store converted character
 12841 00001A32 E2F9                    	LOOP	CopyName	;
 12842                                  DoneName:
 12843 00001A34 C3                      	retn
 12844                                  
 12845                                  ; --------------------------------------------------------------------------
 12846                                  
 12847                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12848                                  FCBRegen:
 12849                                  	; called from SFTFromFCB. SS already DOSDATA
 12850                                  
 12851                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12852                                  	; we do not fill, size we do no fill, position we do not fill,
 12853                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12854                                  
 12855                                  	;mov	al,[si+19h]
 12856 00001A35 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12857                                  
 12858                                  	; We discriminate based on the first two bits in the reserved field.
 12859                                  	
 12860                                  	;test	al,80h
 12861 00001A38 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12862 00001A3A 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12863                                  
 12864                                  	; The FCB is for a network or a sharing based system. At this point 
 12865                                  	; we have already closed the SFT for this guy and reconnection is 
 12866                                  	; impossible.
 12867                                  	;
 12868                                  	; Remember that he may have given us a FCB with bogus information in
 12869                                  	; it. Check to see if sharing is present or if the redir is present.
 12870                                  	; If either is around, presume that we have cycled out the FCB and 
 12871                                  	; give the hard error. Otherwise, just return with carry set.
 12872                                  
 12873 00001A3C E8E857                  	call	CheckShare		; test for sharer
 12874 00001A3F 7509                    	JNZ	short RegenFail		; yep, fail this.
 12875                                  	
 12876                                  	;mov	ax,1100h
 12877 00001A41 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12878 00001A44 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12879                                  			; Return: AL = 00h  not installed, OK to install
 12880                                  			; 01h  not installed, not OK to install
 12881                                  			; FFh  installed
 12882 00001A46 08C0                    	OR	AL,AL			; is it there?
 12883 00001A48 740C                    	JZ	short RegenDead		; no, just fail the operation
 12884                                  RegenFail:
 12885                                  	; 17/05/2019 - Retro DOS v4.0
 12886                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12887 00001A4A 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12888                                  
 12889                                  	;cmp	ah,10h
 12890 00001A4E 80FC10                  	cmp	AH,FCB_CLOSE
 12891 00001A51 7403                    	jz	short RegenDead
 12892 00001A53 E88B01                  	call	FCBHardErr		; massive hard error.
 12893                                  RegenDead:
 12894 00001A56 F9                      	STC				; carry set
 12895                                  FCBRegen_retn:
 12896 00001A57 C3                      	retn
 12897                                  
 12898                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12899                                  	; so fail the operation.
 12900                                  
 12901                                  RegenNoSharing:
 12902 00001A58 E8CC57                  	call	CheckShare		; Sharing around?
 12903 00001A5B 75ED                    	JNZ	short RegenFail
 12904                                  	
 12905                                  	; Find an SFT for this guy.
 12906                                  	
 12907                                  	; 17/05/2019 - Retro DOS v4.0
 12908                                  
 12909                                  	; MSDOS 3.3
 12910                                  	;call	LRUFCB
 12911                                  	;jc	short FCBRegen_retn
 12912                                  	
 12913                                  	; MSDOS 6.0
 12914 00001A5D 50                      	push	ax
 12915 00001A5E B000                    	mov	al,0			;indicate it is a regen operation
 12916 00001A60 E8E6FE                  	call	LRUFCB
 12917 00001A63 58                      	pop	ax
 12918 00001A64 72F1                    	jc	short FCBRegen_retn
 12919                                  
 12920                                  	;mov	word [es:di+2],8002h
 12921 00001A66 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12922 00001A6C 243F                    	AND	AL,3Fh			; get drive number for flags
 12923 00001A6E 98                      	CBW
 12924                                  	;or	ax,4000h
 12925 00001A6F 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12926                                  
 12927                                  	; The bits field consists of the upper two bits (dirty and device) 
 12928                                  	; from the SFT and the low 4 bits from the open mode.
 12929                                  
 12930                                  	;mov	cl,[si+1Ah]
 12931 00001A72 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12932 00001A75 88CD                    	MOV	CH,CL
 12933 00001A77 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12934 00001A7A 08E8                    	OR	AL,CH
 12935                                  	;and	cl,0Fh
 12936 00001A7C 80E10F                  	AND	CL,access_mask		; get the mode bits
 12937                                  	;mov	[es:di+2],cl
 12938 00001A7F 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12939                                  	;mov	[es:di+5],ax
 12940 00001A83 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12941                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12942 00001A87 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12943                                  	;mov	[es:di+31h],ax
 12944 00001A8B 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12945 00001A8F 1E                      	push	ds
 12946 00001A90 56                      	push	si
 12947 00001A91 06                      	push	es
 12948 00001A92 57                      	push	di
 12949 00001A93 16                      	push	ss
 12950 00001A94 07                      	pop	es
 12951 00001A95 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12952                                  
 12953 00001A98 B90800                  	MOV	CX,8
 12954 00001A9B 46                      	INC	SI			; Skip past drive byte to name in FCB
 12955                                  
 12956                                  	; MSDOS 3.3
 12957                                  ;RegenCopyName:
 12958                                  	;lodsb
 12959                                  	;call	UCase
 12960                                  	;stosb
 12961                                  	;loop	RegenCopyName
 12962                                  
 12963                                  	; MSDOS 6.0
 12964 00001A9C E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12965                                  
 12966 00001A9F 16                      	push	ss	; SS is DOSDATA
 12967 00001AA0 1F                      	pop	ds
 12968                                  
 12969                                  	;mov	byte [ATTRIB],16h
 12970 00001AA1 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12971                                  					; Must set this to something interesting
 12972                                  					; to call DEVNAME.
 12973 00001AA6 E83526                  	call	DEVNAME 		; check for device
 12974 00001AA9 5E                      	pop	si
 12975 00001AAA 07                      	pop	es
 12976 00001AAB 5E                      	pop	si
 12977 00001AAC 1F                      	pop	ds
 12978 00001AAD 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12979                                  
 12980                                  	; Device found. We can ignore disk-specific info
 12981                                  
 12982                                  	;mov	[es:di+5],bh
 12983 00001AAF 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12984                                  	;mov	byte [es:di+4],0
 12985 00001AB3 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12986                                  					; SS override
 12987                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12988 00001AB8 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12989                                  	;mov	[es:di+7],si
 12990 00001ABD 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12991                                  	;mov	[es:di+9],ds
 12992 00001AC1 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12993 00001AC5 C3                      	retn				; carry is clear
 12994                                  
 12995                                  RegenDeadJ:
 12996 00001AC6 EB8E                    	JMP	short RegenDead
 12997                                  
 12998                                  	; File found. Just copy in the remaining pieces.
 12999                                  
 13000                                  RegenFileNoSharing:
 13001                                  	;mov	ax,[es:di+5]
 13002 00001AC8 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13003 00001ACC 83E03F                  	AND	AX,03Fh
 13004 00001ACF 1E                      	push	ds
 13005 00001AD0 56                      	push	si
 13006 00001AD1 E8E04D                  	call	FIND_DPB
 13007                                  	;mov	[es:di+7],si
 13008 00001AD4 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13009                                  	;mov	[es:di+9],ds
 13010 00001AD8 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13011 00001ADC 5E                      	pop	si
 13012 00001ADD 1F                      	pop	ds
 13013 00001ADE 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13014                                  					; indicator was bogus
 13015                                  	;mov	ax,[si+1Dh]
 13016 00001AE0 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13017                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13018                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13019 00001AE3 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13020                                  
 13021                                  	; MSDOS 6.0
 13022                                  
 13023                                  	; SR;
 13024                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13025                                  	; number
 13026                                  
 13027                                  	;mov	al,[si+18h]
 13028 00001AE7 8A4418                  	mov	al,[si+fcb_sfn]
 13029 00001AEA 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13030 00001AEC 88C4                    	mov	ah,al
 13031 00001AEE D0C4                    	rol	ah,1
 13032 00001AF0 D0E8                    	shr	al,1
 13033 00001AF2 08E0                    	or	al,ah
 13034 00001AF4 243F                    	and	al,03Fh		;mask off unused bits
 13035                                  	;mov	[es:di+4],al
 13036 00001AF6 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13037                                  
 13038                                  	; SR;
 13039                                  	; Update the higher word of the directory sector from the FCB
 13040                                  
 13041                                  	;;mov	al,[si+18h]
 13042 00001AFA 8A4418                  	mov	al,[si+fcb_sfn]
 13043 00001AFD 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13044 00001AFF 28E4                    	sub	ah,ah
 13045                                  	;mov	[es:di+1Dh],ax
 13046 00001B01 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13047                                  
 13048                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13049                                  	;mov	ax,[si+1Bh]
 13050 00001B05 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13051                                  	;mov	[es:di+0Bh],ax
 13052 00001B08 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13053                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13054                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13055 00001B0C 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13056                                  	;mov	al,[si+1Fh]
 13057 00001B10 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13058                                  	;mov  	[es:di+1Fh],al
 13059 00001B13 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13060                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13061 00001B17 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13062                                  					; Existing FCB entries would be
 13063                                  					; flushed unnecessarily because of
 13064                                  					; check in CheckFCB of the ref_count.
 13065                                  					; July 22/85 - BAS
 13066                                  	;lea	si,[si+1]
 13067 00001B1A 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13068                                  	;lea	di,[di+20h]
 13069 00001B1D 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13070                                  	;mov	cx,11
 13071 00001B20 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13072                                  	
 13073                                  	; MSDOS 6.0
 13074 00001B23 E807FF                  	call	RegenCopyName	;copy name to SFT 
 13075                                  	
 13076                                  	; MSDOS 3.3
 13077                                  ;RegenCopyName2:
 13078                                  	;lodsb
 13079                                  	;call    UCase
 13080                                  	;stosb
 13081                                  	;loop    RegenCopyName2
 13082                                  
 13083 00001B26 F8                      	clc
 13084 00001B27 C3                      	retn
 13085                                  
 13086                                  ; 17/05/2019 - Retro DOS v4.0
 13087                                  
 13088                                  ;**	BlastSFT - FIll SFT with Garbage
 13089                                  ; --------------------------------------------------------------------------
 13090                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13091                                  ;	various garbage values to put into the SFT.  I don't know why,
 13092                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13093                                  ;	necessary to show that the SFT is free after filling it.
 13094                                  ;
 13095                                  ;	ENTRY	(es:di) = address of SFT
 13096                                  ;		(al) = fill character
 13097                                  ;	EXIT	(ax) = -1
 13098                                  ;		'C' clear
 13099                                  ;	USES	AX, CX, Flags
 13100                                  
 13101                                  BlastSFT:
 13102 00001B28 57                      	push	di
 13103                                  	;mov	cx,53 ; MSDOS 3.3
 13104                                  	;mov	cx,59 ; MSDOS 6.0
 13105 00001B29 B93B00                  	mov	cx,SF_ENTRY.size
 13106 00001B2C F3AA                    	rep	stosb
 13107 00001B2E 5F                      	pop	di
 13108 00001B2F 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13109 00001B31 268905                  	mov	[es:di],ax
 13110                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13111                                  	;mov	[es:di+15h],ax
 13112 00001B34 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13113 00001B38 48                      	dec	ax	; -1					    ;
 13114                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13115 00001B39 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13116                                  BlastSFT_retn:
 13117 00001B3D C3                      	retn				; return with 'C' clear     ;
 13118                                  
 13119                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13120                                  ; --------------------------------------------------------------------------
 13121                                  ;
 13122                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13123                                  ;   regenerated.
 13124                                  ;
 13125                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13126                                  ;		AL is SFT index
 13127                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13128                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13129                                  ;   Registers modified: AX and BX
 13130                                  ;
 13131                                  ; --------------------------------------------------------------------------
 13132                                  
 13133                                  	; 21/01/2024
 13134                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13135                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13136                                  CheckFCB:
 13137                                  		
 13138                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13139                                  
 13140                                  	; MSDOS 3.3
 13141                                  
 13142                                  	; LES	DI,[CS:SFTFCB]
 13143                                  
 13144                                  	; MSDOS 6.0
 13145                                  	
 13146                                  	; SR;
 13147                                  	; We check if the given FCB is for a local file. If so, we return a 
 13148                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13149                                  
 13150                                  	;test	byte [si+19h],0C0h
 13151 00001B3E F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13152 00001B42 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13153 00001B44 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13154                                  
 13155                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13156                                  	;cmp	[es:di+4],al
 13157 00001B49 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13158 00001B4D 723C                    	JC	short BadSFT
 13159                                  	;;mov	bl,53 ; MSDOS 3.3
 13160                                  	;mov	bl,59 ; MSDOS 6.0
 13161 00001B4F B33B                    	MOV	BL,SF_ENTRY.size
 13162 00001B51 F6E3                    	MUL	BL
 13163                                  	;lea	di,[di+6]
 13164 00001B53 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13165 00001B56 01C7                    	ADD	DI,AX
 13166                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13167 00001B58 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13168                                  	;cmp	[es:di+31h],ax
 13169 00001B5C 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13170 00001B60 7529                    	JNZ	short BadSFT		; must match process
 13171 00001B62 26833D00                	cmp	word [es:di],0
 13172                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13173 00001B66 7423                    	JZ	short BadSFT		; must also be in use
 13174                                  	;mov	al,[si+19h]
 13175 00001B68 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13176                                  	;test	al,80h
 13177 00001B6B A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13178 00001B6D 7428                    	JZ	short CheckNoShare	; No. try local or device
 13179                                  
 13180                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13181                                  	; FCBSHARE is a superset of FCBNETWORK.
 13182                                  
 13183 00001B6F 50                      	PUSH	AX
 13184                                  	;and	al,0C0h
 13185 00001B70 24C0                    	AND	AL,FCBMASK
 13186                                  	;cmp	al,0C0h
 13187 00001B72 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13188 00001B74 58                      	POP	AX
 13189 00001B75 7516                    	JNZ	short CheckNet		; yes
 13190                                  ;
 13191                                  ;----- In share support -----
 13192                                  ;
 13193                                  	;call	far [cs:JShare+(11*4)]
 13194 00001B77 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13195 00001B7C 720D                    	JC	short BadSFT
 13196                                  
 13197                                  ; 21/01/2024
 13198                                  %if 0
 13199                                  	JMP	SHORT CheckD
 13200                                  ;
 13201                                  ;----- End in share support -----
 13202                                  ;
 13203                                  	; 09/11/2022
 13204                                  	; (There is not any procedure/sub
 13205                                  	;  which calls or jumps to CheckFirClus here)
 13206                                  	;;;
 13207                                  CheckFirClus:
 13208                                  	;cmp     bx,[es:di+0Bh]
 13209                                  	; 07/12/2022
 13210                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13211                                  	JNZ	short BadSFT
 13212                                  	;;;
 13213                                  %endif
 13214                                  
 13215                                  CheckD: 
 13216 00001B7E 243F                    	AND	AL,3Fh
 13217                                  	;mov	ah,[es:di+5]
 13218 00001B80 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13219 00001B84 80E43F                  	AND	AH,3Fh
 13220 00001B87 38C4                    	CMP	AH,AL
 13221                                  	; 16/12/2022
 13222 00001B89 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13223                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13224                                  	;jnz	short BadSFT
 13225                                  ;CheckD_retn:
 13226                                  	;retn
 13227                                  BadSFT: 
 13228 00001B8B F9                      	STC
 13229 00001B8C C3                      	retn
 13230                                  				
 13231                                  CheckNet:
 13232                                  	; 17/05/2019 - Retro DOS v4.0
 13233                                  	
 13234                                  ;----- In net support -----
 13235                                  
 13236                                  	; MSDOS 3.3
 13237                                  	;;mov	ax,[si+1Ah]
 13238                                  	;mov	ax,[si+fcb_net_handle]
 13239                                  	;;cmp	ax,[es:di+1Dh]
 13240                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13241                                  	;jnz	short BadSFT
 13242                                  	;;cmp	ax,[es:di+19h]
 13243                                  	;cmp	ax,[ES:DI+sf_netid]
 13244                                  	;jnz     short BadSFT
 13245                                  	;;mov	ax,[si+1Eh]
 13246                                  	;mov	ax,[si+fcb_l_attr]
 13247                                  	;;cmp	ax,[es:di+1Bh]
 13248                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13249                                  	;jnz     short BadSFT
 13250                                  
 13251                                  	; MSDOS 6.0
 13252                                  	;mov	ax,[si+1Ch]
 13253 00001B8D 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13254                                  	; 09/11/2022
 13255                                  	;cmp	ax,[es:di+0Bh] 
 13256 00001B90 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13257 00001B94 75F5                    	JNZ	short BadSFT
 13258                                  
 13259                                  ;----- END In net support -----
 13260                                  
 13261                                  CheckNet_retn:
 13262 00001B96 C3                      	retn
 13263                                  
 13264                                  CheckNoShare:
 13265                                  
 13266                                  ; 16/12/2022
 13267                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13268                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13269                                  ;	;test	al,40h
 13270                                  ;	test	AL,FCBDEVICE		; Device?
 13271                                  ;	;jnz	short $+2 ; 09/11/2022
 13272                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13273                                  
 13274                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13275                                  	;;mov	bx,[si+1Dh]
 13276                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13277                                  	;;cmp	bx,[es:di+1Dh]
 13278                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13279                                  	;jnz	short BadSFT
 13280                                  	;;mov	bl,[si+1Fh]
 13281                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13282                                  	;;cmp	bl,[es:di+1Fh]
 13283                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13284                                  	;jnz	short BadSFT
 13285                                  	;;mov	bl,[si+1Ah]
 13286                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13287                                  	;;mov	bh,[es:di+5]
 13288                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13289                                  	;xor	bh,bl
 13290                                  	;and	bh,0C0h
 13291                                  	;jnz	short BadSFT
 13292                                  	;;xor	bl,[es:di+2]
 13293                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13294                                  	;and	bl,0Fh
 13295                                  	;jnz	short BadSFT
 13296                                  	;push	di
 13297                                  	;push	si
 13298                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13299                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13300                                  	;;lea	si,[si+1]
 13301                                  	;LEA	SI,[SI+SYS_FCB.name]
 13302                                  	;;mov	cx,11
 13303                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13304                                  	;repe	cmpsb
 13305                                  	;pop	si
 13306                                  	;pop	di
 13307                                  	;jnz	short BadSFT
 13308                                  	;;mov	bx,[si+1Bh]
 13309                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13310                                  	;jmp	short CheckFirClus
 13311                                  
 13312                                  	; MSDOS 6.0
 13313                                  
 13314                                  	; SR;
 13315                                  	; The code below to match a local FCB with its SFT can no longer be
 13316                                  	; used. We just return a no-match status. This check is done right
 13317                                  	; at the top.
 13318                                  
 13319                                  CheckNoShareDev:
 13320                                  	;mov	bx,[si+1Ah]
 13321 00001B97 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13322                                  	;cmp	bx,[es:di+7]
 13323 00001B9A 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13324 00001B9E 75EB                    	JNZ	short BadSFT
 13325                                  	;mov	bx,[si+1Ch]
 13326 00001BA0 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13327                                  	;cmp	bx,[es:di+9]
 13328 00001BA3 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13329 00001BA7 75E2                    	JNZ	short BadSFT
 13330 00001BA9 EBD3                    	JMP	short CheckD
 13331                                  
 13332                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13333                                  ;----------------------------------------------------------------------------
 13334                                  ;
 13335                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13336                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13337                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13338                                  ;	with PID
 13339                                  ;
 13340                                  ;   Inputs:	DS:SI point to FCB
 13341                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13342                                  ;		Carry clear -> OK ES:DI -> SFT
 13343                                  ;		Carry set -> error in ax
 13344                                  ;   Registers modified: ES,DI, AX
 13345                                  ;
 13346                                  ;----------------------------------------------------------------------------
 13347                                  
 13348                                  SFTFromFCB:
 13349                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13350                                  
 13351                                  	; 17/05/2019 - Retro DOS v4.0
 13352                                  
 13353 00001BAB 50                      	push	ax
 13354 00001BAC 53                      	push	bx
 13355                                  	;mov	al,[si+18h]
 13356 00001BAD 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13357 00001BB0 E88BFF                  	call	CheckFCB
 13358 00001BB3 5B                      	pop	bx
 13359 00001BB4 58                      	pop	ax
 13360                                  	;MOV	[CS:THISSFT],DI		; SS override
 13361                                  	;MOV	[CS:THISSFT+2],ES
 13362 00001BB5 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13363 00001BBA 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13364 00001BBF 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13365                                  	
 13366                                  	; 09/11/2022 (MSDOS 5.0)
 13367                                  	; 31/05/2019
 13368 00001BC1 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13369 00001BC2 E8A1E8                  	call	save_world
 13370 00001BC5 E86DFE                  	call	FCBRegen
 13371 00001BC8 E884E8                  	call	restore_world		; use macro restore world
 13372 00001BCB 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13373                                  
 13374                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13375 00001BCC 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13376 00001BD0 72C4                    	jc	short CheckNet_retn
 13377                                  
 13378                                  Set_SFT: 
 13379                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13380 00001BD2 36C43E[9E05]            	les	di,[ss:THISSFT]
 13381                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13382 00001BD7 36FF36[3C03]            	push	word [ss:PROC_ID]
 13383                                  	;pop	word [es:di+31h]
 13384 00001BDC 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13385 00001BE0 C3                      	retn				; carry is clear
 13386                                  
 13387                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13388                                  ;----------------------------------------------------------------------------
 13389                                  ;
 13390                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13391                                  ;	unavailable FCB.
 13392                                  ;
 13393                                  ;   Inputs:	none.
 13394                                  ;   Outputs:	none.
 13395                                  ;   Registers modified: all
 13396                                  ;
 13397                                  ;----------------------------------------------------------------------------
 13398                                  
 13399                                  FCBHardErr:
 13400                                  	; 17/05/2019 - Retro DOS v4.0
 13401 00001BE1 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13402                                  	;
 13403                                  	;mov	ax,23h
 13404 00001BE6 B82300                  	MOV	AX,error_FCB_unavailable
 13405                                  	;;mov	byte [cs:ALLOWED],8
 13406                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13407 00001BE9 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13408                                  	
 13409                                  	;LES	BP,[CS:THISDPB]
 13410 00001BEF 26C42E[8A05]            	les	bp,[es:THISDPB]
 13411                                  	
 13412 00001BF4 BF0100                  	MOV	DI,1			; Fake some registers
 13413 00001BF7 89F9                    	MOV	CX,DI
 13414                                  	;mov	dx,[es:bp+0Bh]
 13415 00001BF9 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13416 00001BFD E8F535                  	call	HARDERR
 13417 00001C00 F9                      	STC
 13418 00001C01 C3                      	retn
 13419                                  
 13420                                  ;============================================================================
 13421                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13422                                  ;============================================================================
 13423                                  ; 21/07/2018 - Retro DOS v3.0
 13424                                  ; 17/05/2019 - Retro DOS v4.0
 13425                                  
 13426                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13427                                  ;
 13428                                  ;	GetRR
 13429                                  ;	GetExtent
 13430                                  ;	SetExtent
 13431                                  ;	GetExtended
 13432                                  ;	GetRecSize
 13433                                  ;	FCBIO
 13434                                  ;	$FCB_OPEN
 13435                                  ;	$FCB_CREATE
 13436                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13437                                  ;	$FCB_RANDOM_READ_BLOCK
 13438                                  ;	$FCB_SEQ_READ
 13439                                  ;	$FCB_SEQ_WRITE
 13440                                  ;	$FCB_RANDOM_READ
 13441                                  ;	$FCB_RANDOM_WRITE
 13442                                  ;
 13443                                  ;	Revision history:
 13444                                  ;
 13445                                  ;		Created: ARR 4 April 1983
 13446                                  ;			 MZ  6 June  1983 completion of functions
 13447                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13448                                  ;				  times.  Change so successive closes work by
 13449                                  ;				  always returning OK.	Also, detect I/O to
 13450                                  ;				  already closed FCB and return EOF.
 13451                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13452                                  ;				  out of sft into FCB for reconnection
 13453                                  ;
 13454                                  ;	    A000   version 4.00	Jan. 1988
 13455                                  
 13456                                  ; Defintions for FCBOp flags
 13457                                  
 13458                                  RANDOM	equ 2				; random operation
 13459                                  FCBREAD equ 4				; doing a read
 13460                                  BLOCK	equ 8				; doing a block I/O
 13461                                  
 13462                                  ;Break <GetRR - return the random record field in DX:AX>
 13463                                  ;---------------------------------------------------------------------------
 13464                                  ;
 13465                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13466                                  ;	from the FCB pointed to by DS:SI
 13467                                  ;
 13468                                  ;   Inputs:	DS:SI point to an FCB
 13469                                  ;		BX has record size
 13470                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13471                                  ;   Registers modified: none
 13472                                  ;---------------------------------------------------------------------------
 13473                                  
 13474                                  GetRR:
 13475                                  	;mov	ax,[si+21h]
 13476 00001C02 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13477                                  	;mov	dx,[si+23h]
 13478 00001C05 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13479 00001C08 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13480 00001C0B 7202                    	JB	short GetRRBye
 13481                                  GetExtent_bye:	; 21/01/2024
 13482 00001C0D 30F6                    	XOR	DH,DH
 13483                                  GetRRBye:
 13484 00001C0F C3                      	retn
 13485                                  
 13486                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13487                                  ;---------------------------------------------------------------------------
 13488                                  ;
 13489                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13490                                  ;	NR fields in the FCB.
 13491                                  ;
 13492                                  ;   Inputs:	DS:SI - point to FCB
 13493                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13494                                  ;   Registers modified: none
 13495                                  ;---------------------------------------------------------------------------
 13496                                  
 13497                                  GetExtent:
 13498                                  	;mov	al,[si+20h]
 13499 00001C10 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13500                                  	;mov	dx,[si+0Ch]
 13501 00001C13 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13502 00001C16 D0E0                    	SHL	AL,1
 13503 00001C18 D1EA                    	SHR	DX,1
 13504 00001C1A D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13505 00001C1C 88D4                    	MOV	AH,DL
 13506 00001C1E 88F2                    	MOV	DL,DH
 13507                                  	; 21/01/2024
 13508                                  	;XOR	DH,DH
 13509                                  	;retn
 13510 00001C20 EBEB                    	jmp	short GetExtent_bye
 13511                                  
 13512                                  ;Break <SetExtent - update the extent/NR field>
 13513                                  ;---------------------------------------------------------------------------
 13514                                  ;
 13515                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13516                                  ;	fields
 13517                                  ;
 13518                                  ;   Inputs:	DS:SI point to FCB
 13519                                  ;		DX:AX is a record location in file
 13520                                  ;   Outputs:	Extent/NR fields are filled in
 13521                                  ;   Registers modified: CX
 13522                                  ;---------------------------------------------------------------------------
 13523                                  
 13524                                  SetExtent:
 13525 00001C22 50                      	push	ax
 13526 00001C23 52                      	push	dx
 13527 00001C24 89C1                    	MOV	CX,AX
 13528 00001C26 247F                    	AND	AL,7FH			; next rec field
 13529                                  	;mov	[si+20h],al
 13530 00001C28 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13531 00001C2B 80E180                  	AND	CL,80H			; save upper bit
 13532 00001C2E D1E1                    	SHL	CX,1
 13533 00001C30 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13534 00001C32 88E8                    	MOV	AL,CH
 13535 00001C34 88D4                    	MOV	AH,DL
 13536                                  	;mov	[si+0Ch], ax
 13537 00001C36 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13538 00001C39 5A                      	pop	dx
 13539 00001C3A 58                      	pop	ax
 13540 00001C3B C3                      	retn
 13541                                  
 13542                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13543                                  ;---------------------------------------------------------------------------
 13544                                  ;
 13545                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13546                                  ;
 13547                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13548                                  ;   Outputs:	DS:SI point to the FCB part
 13549                                  ;		zeroflag set if not extended fcb
 13550                                  ;   Registers modified: SI
 13551                                  ;---------------------------------------------------------------------------
 13552                                  
 13553                                  GetExtended:
 13554 00001C3C 89D6                    	MOV	SI,DX			; point to Something
 13555 00001C3E 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13556 00001C41 7503                    	JNZ	short GetBye		; not there
 13557 00001C43 83C607                  	ADD	SI,7			; point to FCB
 13558                                  GetBye:
 13559 00001C46 39D6                    	CMP	SI,DX			; set condition codes
 13560                                  getextd_retn:
 13561 00001C48 C3                      	retn
 13562                                  
 13563                                  ;Break <GetRecSize - return in BX the FCB record size>
 13564                                  ;---------------------------------------------------------------------------
 13565                                  ;
 13566                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13567                                  ;
 13568                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13569                                  ;   Outputs:	BX contains the record size
 13570                                  ;   Registers modified: None
 13571                                  ;---------------------------------------------------------------------------
 13572                                  
 13573                                  	; 22/01/2024
 13574                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13575                                  GetRecSize:
 13576                                  	;mov	bx,[si+0Eh]
 13577 00001C49 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13578 00001C4C 09DB                    	OR	BX,BX			; is it nul?
 13579                                  	;jz	short getextd_retn
 13580                                  	; 22/01/2024 (BugFix)
 13581 00001C4E 75F8                    	jnz	short getextd_retn
 13582                                  	;MOV	BX,128			; use default size
 13583 00001C50 B380                    	mov	bl,128
 13584                                  	;mov	[si+0Eh],bx
 13585 00001C52 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13586 00001C55 C3                      	retn
 13587                                  
 13588                                  ; 23/01/2024 - Retro DOS v5.0
 13589                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13590                                  ; 23/01/2024 - Retro DOS v4.2
 13591                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13592                                  ; 23/01/2024 - Retro DOS v4.1
 13593                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13594                                  
 13595                                  ; 22/07/2018 - Retro DOS v3.0
 13596                                  
 13597                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13598                                  ;----------------------------------------------------------------------------
 13599                                  ;
 13600                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13601                                  ;	and write a number of blocks from it.
 13602                                  ;
 13603                                  ;   Inputs:	DS:DX point to an FCB
 13604                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13605                                  ;		AL <> 0 Not enough room on disk for the output
 13606                                  ;
 13607                                  ;----------------------------------------------------------------------------
 13608                                  
 13609                                  _$FCB_RANDOM_WRITE_BLOCK:
 13610                                  	;mov	AL,0Ah
 13611 00001C56 B00A                    	MOV	AL,RANDOM+BLOCK
 13612 00001C58 EB12                    	JMP	short FCBIO	; 23/01/2024
 13613                                  
 13614                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13615                                  ;----------------------------------------------------------------------------
 13616                                  ;
 13617                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13618                                  ;	and read a number of blocks from it.
 13619                                  ;
 13620                                  ;   Inputs:	DS:DX point to an FCB
 13621                                  ;   Outputs:	AL = error codes defined above
 13622                                  ;
 13623                                  ;----------------------------------------------------------------------------
 13624                                  
 13625                                  _$FCB_RANDOM_READ_BLOCK:
 13626                                  	;mov	AL,0Eh
 13627 00001C5A B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13628 00001C5C EB0E                    	JMP	short FCBIO	; 23/01/2024
 13629                                  
 13630                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13631                                  ;----------------------------------------------------------------------------
 13632                                  ;
 13633                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13634                                  ;	memory
 13635                                  ;
 13636                                  ;   Inputs:	DS:DX point to an FCB
 13637                                  ;   Outputs:	AL = error codes defined above
 13638                                  ;
 13639                                  ;----------------------------------------------------------------------------
 13640                                  
 13641                                  _$FCB_SEQ_READ:
 13642                                  	;mov	AL,4
 13643 00001C5E B004                    	MOV	AL,FCBREAD
 13644 00001C60 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13645                                  
 13646                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13647                                  ;----------------------------------------------------------------------------
 13648                                  ;
 13649                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13650                                  ;	file
 13651                                  ;
 13652                                  ;   Inputs:	DS:DX point to an FCB
 13653                                  ;   Outputs:	AL = error codes defined above
 13654                                  ;
 13655                                  ;----------------------------------------------------------------------------
 13656                                  
 13657                                  _$FCB_SEQ_WRITE:
 13658 00001C62 B000                    	MOV	AL,0
 13659 00001C64 EB06                    	JMP	short FCBIO	; 23/01/2024
 13660                                  
 13661                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13662                                  ;----------------------------------------------------------------------------
 13663                                  ;
 13664                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13665                                  ;	record from it.
 13666                                  ;
 13667                                  ;   Inputs:	DS:DX point to an FCB
 13668                                  ;   Outputs:	AL = error codes defined above
 13669                                  ;
 13670                                  ;----------------------------------------------------------------------------
 13671                                  
 13672                                  _$FCB_RANDOM_READ:
 13673                                  	;mov	AL,6
 13674 00001C66 B006                    	MOV	AL,RANDOM+FCBREAD
 13675                                  	; 23/01/2024
 13676                                  	;jmp	FCBIO 		; single block
 13677 00001C68 EB02                    	jmp	short FCBIO
 13678                                  
 13679                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13680                                  ;----------------------------------------------------------------------------
 13681                                  ;
 13682                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13683                                  ;	a record to it.
 13684                                  ;
 13685                                  ;   Inputs:	DS:DX point to an FCB
 13686                                  ;   Outputs:	AL = error codes defined above
 13687                                  ;
 13688                                  ;----------------------------------------------------------------------------
 13689                                  
 13690                                  _$FCB_RANDOM_WRITE:
 13691                                  	;mov	AL,2
 13692 00001C6A B002                    	MOV	AL,RANDOM
 13693                                  	; 23/01/2024
 13694                                  	;;jmp	FCBIO
 13695                                  	;jmp	short FCBIO
 13696                                  
 13697                                  ;BREAK <FCBIO - do internal FCB I/O>
 13698                                  ;---------------------------------------------------------------------------
 13699                                  ;
 13700                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13701                                  ;
 13702                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13703                                  ;		DS:DX point to FCB
 13704                                  ;		CX may have count of number of records to xfer
 13705                                  ;   Outputs:	AL has error code
 13706                                  ;   Registers modified: all
 13707                                  ;---------------------------------------------------------------------------
 13708                                  
 13709                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13710                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13711                                  
 13712                                  	; 23/01/2024
 13713                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13714                                  
 13715                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13716                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13717                                  
 13718                                  FCBIO:
 13719                                  
 13720                                  FEOF	EQU	1
 13721                                  FTRIM	EQU	2
 13722                                  
 13723                                  %define	FCBErr	byte [bp-1]  ; byte
 13724                                  %define	cRec	word [bp-3]  ; word
 13725                                  ;%define RecPos	word [bp-7]  ; dword
 13726                                  %define RecPosL	word [bp-7]  ; word
 13727                                  %define RecPosH	word [bp-5]  ; word
 13728                                  %define	RecSize	word [bp-9]  ; word
 13729                                  ;%define bPos	word [bp-13] ; dword
 13730                                  %define bPosL	word [bp-13] ; word
 13731                                  %define bPosH	word [bp-11] ; word
 13732                                  %define cByte	word [bp-15] ; word
 13733                                  %define cResult word [bp-17] ; word
 13734                                  %define	cRecRes	word [bp-19] ; word
 13735                                  %define	FCBOp	byte [bp-20] ; byte
 13736                                  ; 23/01/2024
 13737                                  %define bPos bp-13
 13738                                  
 13739                                  	;Enter
 13740                                  
 13741 00001C6C 55                      	push	bp
 13742 00001C6D 89E5                    	mov	bp,sp
 13743 00001C6F 83EC14                  	sub	sp,20
 13744                                  	;mov	[bp-20],al
 13745 00001C72 8846EC                  	MOV	FCBOp,AL
 13746                                  	;mov	byte [bp-1],0
 13747 00001C75 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13748 00001C79 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13749                                  	;test	byte [bp-20],8
 13750 00001C7C F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13751 00001C80 7503                    	JNZ	short GetPos
 13752 00001C82 B90100                  	MOV	CX,1			;	cRec = 1;
 13753                                  GetPos:
 13754                                  	;mov	[bp-3],cx
 13755 00001C85 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13756 00001C88 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13757 00001C8B E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13758                                  	;mov	[bp-9],bx
 13759 00001C8E 895EF7                  	MOV	RecSize,BX
 13760                                  	;test	byte [bp-20],2
 13761 00001C91 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13762 00001C95 7403                    	JZ	short GetRec
 13763 00001C97 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13764                                  GetRec:
 13765                                  	;mov	[bp-7],ax
 13766 00001C9A 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13767                                  	;mov	[bp-5],dx
 13768 00001C9D 8956FB                  	MOV	RecPosH,DX
 13769 00001CA0 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13770                                  	;mov	ax,[bp-5]
 13771 00001CA3 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13772 00001CA6 F7E3                    	MUL	BX
 13773 00001CA8 89C7                    	MOV	DI,AX
 13774                                  	;mov	ax,[bp-7]
 13775 00001CAA 8B46F9                  	MOV	AX,RecPosL
 13776 00001CAD F7E3                    	MUL	BX
 13777 00001CAF 01FA                    	ADD	DX,DI
 13778                                  	;mov	[bp-13],ax
 13779 00001CB1 8946F3                  	MOV	bPosL,AX
 13780                                  	;mov	[bp-11],dx
 13781 00001CB4 8956F5                  	MOV	bPosH,DX
 13782                                  	;mov	ax,[bp-3]
 13783 00001CB7 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13784 00001CBA F7E3                    	MUL	BX
 13785                                  	;mov	[bp-15],ax
 13786 00001CBC 8946F1                  	MOV	cByte,AX
 13787                                  
 13788                                  ;hkn; 	SS override
 13789 00001CBF 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13790 00001CC4 83D200                  	ADC	DX,0
 13791 00001CC7 7419                    	JZ	short DoOper
 13792                                  	;mov	byte [bp-1],2
 13793 00001CC9 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13794                                  
 13795                                  ;hkn; 	SS override
 13796 00001CCD 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13797 00001CD1 F7D8                    	NEG	AX
 13798 00001CD3 7501                    	JNZ	short DoDiv
 13799 00001CD5 48                      	DEC	AX
 13800                                  DoDiv:
 13801 00001CD6 31D2                    	XOR	DX,DX
 13802 00001CD8 F7F3                    	DIV	BX
 13803                                  	;mov	[bp-3],ax
 13804 00001CDA 8946FD                  	MOV	cRec,AX
 13805 00001CDD F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13806                                  	;mov	[bp-15],ax
 13807 00001CDF 8946F1                  	MOV	cByte,AX		;	}
 13808                                  DoOper:
 13809 00001CE2 31DB                    	XOR	BX,BX
 13810                                  	;mov	[bp-17],bx
 13811 00001CE4 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13812                                  	;cmp	[bp-15],bx
 13813 00001CE7 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13814 00001CEA 7506                    	JNZ	short DoGetExt
 13815                                  	;test	byte [bp-1],2
 13816 00001CEC F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13817                                  	;JZ	short DoGetExt
 13818                                  	;JMP	short SkipOp
 13819                                  	; 16/12/2022
 13820 00001CF0 7572                    	jnz	short SkipOp
 13821                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13822                                  	;JZ	short DoGetExt
 13823                                  	;JMP	short SkipOp
 13824                                  DoGetExt:
 13825 00001CF2 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13826 00001CF5 730F                    	JNC	short ContinueOp
 13827                                  FCBDeath:
 13828 00001CF7 E860E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13829                                  	;mov	word [bp-19],0
 13830 00001CFA C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13831                                  	;mov	byte [bp-1],1
 13832 00001CFF C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13833 00001D03 E9EB00                  	JMP	FCBSave 		; bam!
 13834                                  ContinueOp:
 13835                                  	; 23/01/2024
 13836                                  	; (PCDOS 7.1 IBMDOS.COM)
 13837                                  	;
 13838                                  	;;mov	ax,[si+10h]
 13839                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13840                                  	;;mov	[es:di+11h],ax
 13841                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13842                                  	;;mov	ax,[si+12h]
 13843                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13844                                  	;;mov	[es:di+13h],ax
 13845                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13846                                  	;;;
 13847 00001D06 1E                      	push	ds
 13848 00001D07 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13849 00001D0A 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13850 00001D0E 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13851 00001D12 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13852 00001D15 8CDA                    	mov	dx,ds
 13853 00001D17 1F                      	pop	ds
 13854                                  	;;;
 13855                                  	;;mov	ax,[bp-13]
 13856                                  	;MOV	AX,bPosL
 13857                                  	;;mov	dx,[bp-11]
 13858                                  	;MOV	DX,bPosH
 13859                                  
 13860                                  	;mov	[es:di+15h],ax
 13861 00001D18 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13862                                  	;xchg	dx,[es:di+17h]
 13863 00001D1C 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13864 00001D20 52                      	PUSH	DX			; save away Open age.
 13865                                  	;mov	cx,[bp-15]
 13866 00001D21 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13867                                  
 13868                                  ;hkn; DOS_Read is in DOSCODE
 13869 00001D24 BF[4432]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13870                                  	;test	byte [bp-20],4
 13871 00001D27 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13872 00001D2B 7503                    	JNZ	short DoContext
 13873                                  
 13874                                  ;hkn; DOS_Write is in DOSCODE
 13875 00001D2D BF[4534]                	MOV	DI,DOS_WRITE
 13876                                  DoContext:
 13877 00001D30 55                      	push	bp
 13878 00001D31 1E                      	push	ds
 13879 00001D32 56                      	push	si
 13880                                  
 13881                                  ;hkn; SS is DOSDATA
 13882 00001D33 16                      	push	ss
 13883 00001D34 1F                      	pop	ds
 13884                                  
 13885                                  ;; Fix for disk full
 13886 00001D35 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13887                                  	
 13888 00001D37 5E                      	pop	si
 13889 00001D38 1F                      	pop	ds
 13890 00001D39 5D                      	pop	bp
 13891 00001D3A 72BB                    	JC	short FCBDeath
 13892                                  	
 13893 00001D3C 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13894 00001D42 740A                    	JZ	short NODSKFULL
 13895 00001D44 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13896                                  
 13897                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13898                                  	;mov	byte [bp-1],1 
 13899 00001D4A C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13900                                  
 13901                                  	; 23/01/2024
 13902                                  	; (PCDOS 7.1 IBMDOS.COM)
 13903                                  	;;mov	byte [bp-1],1 
 13904                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13905                                  
 13906                                  NODSKFULL:
 13907                                  ;; Fix for disk full
 13908                                  	;mov	[bp-17],cx
 13909 00001D4E 894EEF                  	MOV	cResult,CX
 13910 00001D51 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13911                                  	;pop	word [es:di+17h]	
 13912 00001D54 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13913                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13914                                  
 13915                                  	; 23/01/2024
 13916                                  	; (PCDOS 7.1 IBMDOS.COM)
 13917                                  	;
 13918                                  	;;mov	ax,[es:di+11h]
 13919                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13920                                  	;;mov	[si+10h],ax
 13921                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13922                                  	;;mov	ax,[es:di+13h]
 13923                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13924                                  	;;mov	[si+12h],ax
 13925                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13926                                  	;;;
 13927 00001D58 06                      	push	es
 13928 00001D59 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13929 00001D5D 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13930 00001D60 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13931 00001D63 07                      	pop	es
 13932                                  	;;;
 13933                                  					;	}
 13934                                  SkipOp:
 13935                                  	;mov	ax,[bp-17]
 13936 00001D64 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13937 00001D67 31D2                    	XOR	DX,DX
 13938                                  	;div	word [bp-9]
 13939 00001D69 F776F7                  	DIV	RecSize
 13940                                  	;mov	[bp-19],ax
 13941 00001D6C 8946ED                  	MOV	cRecRes,AX
 13942                                  	;add	[bp-7],ax
 13943 00001D6F 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13944                                  	;adc	word [bp-5],0
 13945 00001D72 8356FB00                	ADC	RecPosH,0
 13946                                  
 13947                                  ; If we have not gotten the expected number of records, we signal an EOF
 13948                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13949                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13950                                  ; do we.
 13951                                  
 13952                                  	;cmp	ax,[bp-3]
 13953 00001D76 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13954 00001D79 7411                    	JZ	short TryBlank
 13955                                  	;test	byte [bp-20],4
 13956 00001D7B F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13957 00001D7F 7507                    	JNZ	short SetEOF
 13958                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13959                                  	; MSDOS 3.3
 13960                                  	;;test	word [es:di+5],80h
 13961                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13962                                  	;JNZ	short TryBlank
 13963                                  	; MSDOS 5.0 & MSDOS 6.0
 13964                                  	;test	byte [es:di+5],80h
 13965 00001D81 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13966 00001D86 7504                    	jnz	short TryBlank
 13967                                  
 13968                                  SetEOF:
 13969                                  	;mov	byte [bp-1],1
 13970 00001D88 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13971                                  TryBlank:				;
 13972 00001D8C 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13973 00001D8E 7426                    	JZ	short SetExt
 13974                                  	;add	word [bp-7],1
 13975 00001D90 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13976                                  	;adc	word [bp-5],0
 13977 00001D94 8356FB00                	ADC	RecPosH,0
 13978                                  	;test	byte [bp-20],4
 13979 00001D98 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13980 00001D9C 7418                    	JZ	short SetExt
 13981                                  	;inc	word [bp-19]
 13982 00001D9E FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13983                                  	;mov	byte [bp-1],3
 13984 00001DA1 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13985                                  	;mov	cx,[bp-9]
 13986 00001DA5 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13987 00001DA8 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13988 00001DAA 30C0                    	XOR	AL,AL
 13989                                  ;hkn; 	SS override
 13990 00001DAC 36C43E[2C03]            	les     di,[ss:DMAADD]
 13991                                  	;add	di,[bp-17]
 13992 00001DB1 037EEF                  	ADD	DI,cResult
 13993 00001DB4 F3AA                    	REP	STOSB			;   }	}
 13994                                  SetExt:
 13995                                  	;mov	dx,[bp-5]
 13996 00001DB6 8B56FB                  	MOV	DX,RecPosH
 13997                                  	;mov	ax,[bp-7]
 13998 00001DB9 8B46F9                  	MOV	AX,RecPosL
 13999                                  	;test	byte [bp-20],2
 14000 00001DBC F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14001 00001DC0 7406                    	JZ	short DoSetExt
 14002                                  	;test	byte [bp-20],8
 14003 00001DC2 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14004 00001DC6 7403                    	JZ	short TrySetRR
 14005                                  DoSetExt:
 14006 00001DC8 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14007                                  TrySetRR:
 14008                                  	;test	byte [bp-20],8
 14009 00001DCB F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14010 00001DCF 740F                    	JZ	short TryReturn
 14011                                  	;mov	[si+21h],ax
 14012 00001DD1 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14013                                  	;mov	[si+23h],dl
 14014 00001DD4 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14015                                  	;cmp	word [si+0Eh],64
 14016 00001DD7 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14017 00001DDB 7303                    	JAE	short TryReturn
 14018                                  	;mov	[si+24h],dh
 14019 00001DDD 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14020                                  TryReturn: 
 14021                                  	;test	byte [bp-20],4
 14022 00001DE0 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14023 00001DE4 750B                    	JNZ	short FCBSave
 14024 00001DE6 1E                      	push	ds			;	FCB->FDate = date;
 14025 00001DE7 E801ED                  	call	DATE16			;	FCB->FTime = time;
 14026 00001DEA 1F                      	pop	ds
 14027                                  	;mov	[si+14h],ax
 14028 00001DEB 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14029                                  	;mov	[si+16h],dx
 14030 00001DEE 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14031                                  FCBSave: 
 14032                                  	;test	byte [bp-20],8
 14033 00001DF1 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14034 00001DF5 7409                    	jz	short DoReturn
 14035                                  	;mov	cx,[bp-19]
 14036 00001DF7 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14037 00001DFA E888E6                  	call    Get_User_Stack
 14038                                  	;mov	[si+4],cx
 14039 00001DFD 894C04                  	MOV	[SI+user_env.user_CX],CX
 14040                                  DoReturn:
 14041                                  	;mov	al,[bp-1]
 14042 00001E00 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14043                                  	;Leave	
 14044 00001E03 89EC                    	mov     sp,bp
 14045 00001E05 5D                      	pop     bp
 14046 00001E06 C3                      	retn
 14047                                  
 14048                                  ; 22/07/2018 - Retro DOS v3.0
 14049                                  
 14050                                  ;Break <$FCB_Open - open an old-style FCB>
 14051                                  ;---------------------------------------------------------------------------
 14052                                  ;
 14053                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14054                                  ;	for us and asked to have the rest filled in.
 14055                                  ;
 14056                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14057                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14058                                  ;		FCB has the following fields filled in:
 14059                                  ;		    Time/Date Extent/NR Size
 14060                                  ;---------------------------------------------------------------------------
 14061                                  
 14062                                  _$FCB_OPEN:			; System call 15
 14063                                  
 14064 00001E07 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14065                                  
 14066                                  ;hkn; DOS_Open is in DOSCODE
 14067 00001E0A B9[FA2A]                	MOV	CX,DOS_OPEN
 14068                                  
 14069                                  ; The following is common code for Creation and openning of FCBs. AX is
 14070                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14071                                  ; the FCB
 14072                                  
 14073                                  DoAccess:
 14074 00001E0D 1E                      	push	ds
 14075 00001E0E 52                      	push	dx
 14076 00001E0F 51                      	push	cx
 14077 00001E10 50                      	push	ax			; save FCB pointer away
 14078                                  
 14079                                  ;hkn; 	OpenBuf is in DOSDATA
 14080 00001E11 BF[BE03]                	MOV	DI,OPENBUF
 14081 00001E14 E8E44B                  	call	TransFCB		; crunch the fcb
 14082 00001E17 58                      	pop	ax
 14083 00001E18 59                      	pop	cx
 14084 00001E19 5A                      	pop	dx
 14085 00001E1A 1F                      	pop	ds			; get fcb
 14086 00001E1B 7303                    	JNC	short FindFCB		; everything seems ok
 14087                                  FCBOpenErr:
 14088                                  	; AL has error code
 14089 00001E1D E93AE8                  	jmp	FCB_RET_ERR
 14090                                  FindFCB:
 14091 00001E20 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14092                                  
 14093                                  	; 17/05/2019 - Retro DOS v4.0
 14094                                  
 14095                                  	; MSDOS 3.3
 14096                                  	;call	LRUFCB
 14097                                  	;jc	short HardMessage
 14098                                  
 14099                                  	; MSDOS 6.0
 14100 00001E23 50                      	push	ax
 14101 00001E24 B001                    	mov	al,1			;indicate Open/Create operation
 14102 00001E26 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14103 00001E29 58                      	pop	ax
 14104 00001E2A 722A                    	jc	short HardMessage
 14105                                  	
 14106                                  	;mov	word [es:di+2],8000h
 14107 00001E2C 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14108 00001E32 1E                      	push	ds
 14109 00001E33 56                      	push	si	
 14110 00001E34 53                      	push	bx			; save fcb pointer
 14111 00001E35 89CE                    	MOV	SI,CX
 14112                                  
 14113                                  ;hkn; SS is DOSDATA
 14114 00001E37 16                      	push	ss
 14115 00001E38 1F                      	pop	ds			    ; let DOS_Open see variables
 14116 00001E39 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14117 00001E3B 5B                      	pop	bx
 14118 00001E3C 5E                      	pop	si
 14119 00001E3D 1F                      	pop	ds			; get fcb
 14120                                  
 14121                                  ;hkn; SS override
 14122 00001E3E 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14123 00001E43 7318                    	JNC	short FCBOK		; operation succeeded
 14124                                  failopen:
 14125 00001E45 50                      	PUSH	AX
 14126 00001E46 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14127 00001E48 E8DDFC                  	call	BlastSFT
 14128 00001E4B 58                      	POP	AX
 14129                                  	;cmp	ax,4
 14130 00001E4C 83F804                  	CMP	AX,error_too_many_open_files
 14131 00001E4F 7405                    	JZ	short HardMessage
 14132                                  	;cmp	ax,24h
 14133 00001E51 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14134 00001E54 7505                    	jnz	short DeadFCB
 14135                                  HardMessage:
 14136 00001E56 50                      	PUSH	AX
 14137 00001E57 E887FD                  	call	FCBHardErr
 14138 00001E5A 58                      	POP	AX
 14139                                  DeadFCB:
 14140                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14141                                  	;jmp	FCB_RET_ERR
 14142 00001E5B EBC0                    	jmp	short FCBOpenErr
 14143                                  FCBOK:
 14144                                  	; MSDOS 6.0
 14145 00001E5D E8EFF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14146 00001E60 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14147 00001E62 E8C253                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14148 00001E65 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14149                                  ;SR;
 14150                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14151                                  ; LocalSFT variable to reflect this.
 14152                                  
 14153 00001E67 36893E[4410]            	mov	[ss:LocalSFT],di
 14154 00001E6C 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14155                                  ;;SR;
 14156                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14157                                  ;;
 14158                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14159                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14160                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14161                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14162                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14163                                  
 14164                                  FCBOK2:
 14165                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14166 00001E71 26FF05                  	inc	word [es:di]
 14167                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14168 00001E74 E804FA                  	call	SaveFCBInfo
 14169                                  	; MSDOS 3.3
 14170                                  	;call	SetOpenAge
 14171                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14172                                  	;test	word [es:di+5],80h
 14173                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14174 00001E77 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14175 00001E7C 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14176 00001E7E 8A04                    	MOV	AL,[SI]			; get drive byte
 14177 00001E80 E8034B                  	call	GETTHISDRV		; convert
 14178                                  	;INC	AL
 14179                                  	; 17/12/2022
 14180 00001E83 40                      	inc	ax
 14181 00001E84 8804                    	MOV	[SI],AL			; stash in good drive letter
 14182                                  
 14183                                  FCBNoDrive:
 14184                                  	;mov	word [si+0Eh],128
 14185 00001E86 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14186                                  
 14187                                  	; 23/01/2024
 14188                                  	; (PCDOS 7.1 IBMDOS.COM)
 14189                                  	;;;
 14190                                  	;;mov	ax,[es:di+0Dh]
 14191                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14192                                  	;;mov	[si+16h],ax
 14193                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14194                                  	;;mov	ax,[es:di+0Fh]
 14195                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14196                                  	;;mov	[si+14h],ax
 14197                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14198                                  	;;mov	ax,[es:di+11h]
 14199                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14200                                  	;;mov	[si+10h],ax
 14201                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14202                                  	;;mov	ax,[es:di+13h]
 14203                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14204                                  	;;mov	[si+12h],ax
 14205                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14206                                  	;
 14207 00001E8B 06                      	push	es
 14208                                  	;les	ax,[es:di+0Dh]
 14209 00001E8C 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14210                                  	;mov	[si+16h],ax
 14211 00001E90 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14212                                  	;mov	[si+14h],es
 14213 00001E93 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14214 00001E96 07                      	pop	es
 14215 00001E97 06                      	push	es
 14216                                  	;les	ax,[es:di+11h]
 14217 00001E98 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14218                                  	;mov	[si+10h],ax
 14219 00001E9C 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14220                                  	;mov	[si+12h],ax
 14221 00001E9F 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14222 00001EA2 07                      	pop	es
 14223                                  	;;;
 14224                                  	
 14225 00001EA3 31C0                    	XOR	AX,AX			; convenient zero
 14226                                  	;mov	[si+0Ch],ax
 14227 00001EA5 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14228                                  
 14229                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14230                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14231                                  
 14232                                  ;hkn; 	SS override
 14233 00001EA8 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14234                                  	;mov	ah,[es:di+4]
 14235 00001EAD 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14236                                  OpenScan:
 14237                                  	;cmp	al,[si+18h]
 14238 00001EB1 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14239 00001EB4 7407                    	JZ	short SkipCheck
 14240 00001EB6 50                      	push	ax			; preserve count
 14241 00001EB7 E884FC                  	call	CheckFCB		; do they match
 14242 00001EBA 58                      	pop	ax			; get count back
 14243 00001EBB 7309                    	JNC	short OpenFound		; found a match!
 14244                                  SkipCheck:
 14245 00001EBD FEC0                    	INC	AL			; advance to next FCB
 14246 00001EBF 38E0                    	CMP	AL,AH			; table full?
 14247 00001EC1 75EE                    	JNZ	short OpenScan		; no, go for more
 14248                                  OpenDone:
 14249 00001EC3 30C0                    	xor	al,al			; return success
 14250 00001EC5 C3                      	retn
 14251                                  
 14252                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14253                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14254                                  ; Consider:
 14255                                  ;
 14256                                  ;   open (foo)	delete (foo) open (bar)
 14257                                  ;
 14258                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14259                                  ; foo even though foo is no longer needed; this is due to the server closing
 14260                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14261                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14262                                  ; bar and subsequent I/O would be lost to the redirector.
 14263                                  ;
 14264                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14265                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14266                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14267                                  ; around. This will allow us to access the same file through multiple network
 14268                                  ; connections and NOT prematurely terminate when the ref count on one
 14269                                  ; connection goes to zero.
 14270                                  
 14271                                  OpenFound:
 14272                                  	;mov	[si+18h],al
 14273 00001EC6 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14274 00001EC9 26FF05                  	inc	word [es:di]
 14275                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14276                                  					; remember this new invocation
 14277                                  	; 24/01/2024
 14278 00001ECC 16                      	push	ss
 14279 00001ECD 1F                      	pop	ds
 14280                                  	
 14281                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14282 00001ECE A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14283                                  	;mov	[es:di+15h],ax
 14284 00001ED1 26894515                	MOV	[ES:DI+sf_LRU],AX
 14285                                  ;
 14286                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14287                                  ; blast it to prevent other reuse.
 14288                                  ;
 14289                                  	;push	ss
 14290                                  	;pop	ds
 14291                                  
 14292 00001ED5 C43E[9E05]              	LES	DI,[THISSFT]
 14293 00001ED9 26FF0D                  	dec	word [es:di]
 14294                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14295                                  					; free the newly allocated SFT
 14296 00001EDC E88053                  	call	ShareEnd
 14297 00001EDF B043                    	MOV	AL,'C'	 ; 43h
 14298 00001EE1 E844FC                  	call	BlastSFT
 14299 00001EE4 EBDD                    	JMP	short OpenDone
 14300                                  
 14301                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14302                                  ;----------------------------------------------------------------------------
 14303                                  ;
 14304                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14305                                  ;	FCB for us and asked to have the rest filled in.
 14306                                  ;
 14307                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14308                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14309                                  ;		FCB has the following fields filled in:
 14310                                  ;		    Time/Date Extent/NR Size
 14311                                  ;----------------------------------------------------------------------------
 14312                                  
 14313                                  _$FCB_CREATE:		; System call 22
 14314                                  
 14315                                  ;hkn; DOS_Create is in DOSCODE
 14316 00001EE6 B9[D429]                	MOV	CX,DOS_CREATE		; routine to call
 14317 00001EE9 31C0                    	XOR	AX,AX			; attributes to create
 14318 00001EEB E84EFD                  	call	GetExtended		; get extended FCB
 14319 00001EEE 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14320 00001EF0 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14321                                  DoAccessJ:
 14322 00001EF3 E917FF                  	JMP	DoAccess		; do dirty work
 14323                                  
 14324                                  ;============================================================================
 14325                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14326                                  ;============================================================================
 14327                                  ; 22/07/2018 - Retro DOS v3.0
 14328                                  ; 17/05/2019 - Retro DOS v4.0
 14329                                  
 14330                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14331                                  
 14332                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14333                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14334                                  
 14335                                  ;**	Search.asm
 14336                                  ;----------------------------------------------------------------------------
 14337                                  ;	Directory search system calls.
 14338                                  ;	These will be passed direct text of the pathname from the user. 
 14339                                  ;	They will need to be passed through the macro expander prior to
 14340                                  ;	being sent through the low-level stuff. 
 14341                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14342                                  ;
 14343                                  ;	$Dir_Search_First	  written
 14344                                  ;	$Dir_Search_Next	  written
 14345                                  ;	$Find_First	  written
 14346                                  ;	$Find_Next		  written
 14347                                  ;	PackName		  written
 14348                                  ;
 14349                                  ;	Modification history:
 14350                                  ;
 14351                                  ;	  Created: ARR 4 April 1983
 14352                                  
 14353                                  ;----------------------------------------------------------------------------
 14354                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14355                                  ;
 14356                                  ; Inputs:
 14357                                  ;	DS:DX Points to unopenned FCB
 14358                                  ; Function:
 14359                                  ;	Directory is searched for first matching entry and the directory
 14360                                  ;	entry is loaded at the disk transfer address
 14361                                  ; Returns:
 14362                                  ;	AL = -1 if no entries matched, otherwise 0
 14363                                  ;----------------------------------------------------------------------------
 14364                                  
 14365                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14366                                  
 14367                                  	; 24/01/2024
 14368                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14369                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14370                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14371                                  
 14372                                  _$DIR_SEARCH_FIRST:
 14373 00001EF6 368916[A605]            	MOV	[SS:THISFCB],DX
 14374 00001EFB 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14375 00001F00 89D6                    	MOV	SI,DX
 14376 00001F02 803CFF                  	CMP	BYTE [SI],0FFH
 14377 00001F05 7503                    	JNZ	short NORMFCB4
 14378 00001F07 83C607                  	ADD	SI,7			; Point to drive select byte
 14379                                  NORMFCB4:
 14380 00001F0A FF34                    	push	word [SI]		; Save original drive byte for later
 14381                                  
 14382 00001F0C 16                      	push	ss
 14383 00001F0D 07                      	pop	es			; get es to address DOSGroup
 14384                                  
 14385 00001F0E BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14386 00001F11 E8E74A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14387 00001F14 7304                    	JNC	short SearchIt		; no error, go and look
 14388 00001F16 5B                      	pop	bx			; Clean stack
 14389                                  
 14390                                  ; Error code is in AX
 14391                                  
 14392                                  	; 09/11/2022
 14393                                  dcf_errj:
 14394 00001F17 E940E7                  	jmp	FCB_RET_ERR		; error
 14395                                  
 14396                                  SearchIt:
 14397 00001F1A 16                      	push	ss
 14398 00001F1B 1F                      	pop	ds			; get ready for search
 14399                                  	;push	word [DMAADD]
 14400                                  	;push	word [DMAADD+2]
 14401                                  	; 24/01/2024
 14402 00001F1C C43E[2C03]              	les	di,[DMAADD]
 14403 00001F20 57                      	push	di
 14404 00001F21 06                      	push	es
 14405 00001F22 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14406 00001F28 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14407                                  	; MSDOS 3.3
 14408                                  	;call	DOS_SEARCH_FIRST
 14409                                  	; MSDOS 6.0
 14410 00001F2C E8930D                  	call	GET_FAST_SEARCH		; search
 14411 00001F2F 8F06[2E03]              	pop	word [DMAADD+2]
 14412 00001F33 8F06[2C03]              	pop	word [DMAADD]
 14413 00001F37 735C                    	JNC	short SearchSet		; no error, transfer info
 14414 00001F39 5B                      	pop	bx			; Clean stack
 14415                                  
 14416                                  ; Error code is in AX
 14417                                  
 14418                                  	; 09/11/2022
 14419                                  	;jmp	FCB_RET_ERR
 14420 00001F3A EBDB                    	jmp	short dcf_errj
 14421                                  
 14422                                  ;----------------------------------------------------------------------------
 14423                                  ;
 14424                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14425                                  ;
 14426                                  ; Inputs:
 14427                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14428                                  ; Function:
 14429                                  ;	Directory is searched for the next matching entry and the directory
 14430                                  ;	entry is loaded at the disk transfer address
 14431                                  ; Returns:
 14432                                  ;	AL = -1 if no entries matched, otherwise 0
 14433                                  ;----------------------------------------------------------------------------
 14434                                  
 14435                                  	; 24/01/2024
 14436                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14437                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14438                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14439                                  
 14440                                  _$DIR_SEARCH_NEXT:
 14441 00001F3C 368916[A605]            	MOV	[SS:THISFCB],DX
 14442 00001F41 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14443 00001F46 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14444 00001F4C 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14445                                  
 14446 00001F52 16                      	push	ss
 14447 00001F53 07                      	pop	es
 14448                                  
 14449 00001F54 BF[BE04]                	MOV	DI,SEARCHBUF
 14450                                  
 14451 00001F57 89D6                    	MOV	SI,DX
 14452 00001F59 803CFF                  	CMP	BYTE [SI],0FFh
 14453 00001F5C 750D                    	JNZ	short NORMFCB6
 14454 00001F5E 83C606                  	ADD	SI,6
 14455 00001F61 AC                      	LODSB
 14456                                  
 14457 00001F62 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14458 00001F66 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14459                                  NORMFCB6:
 14460 00001F6B AC                      	LODSB				; Get original user drive byte
 14461 00001F6C 50                      	push	ax			; Put it on stack
 14462 00001F6D 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14463 00001F70 AA                      	STOSB				; Put in correct place
 14464 00001F71 B90A00                  	MOV	CX,20/2
 14465 00001F74 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14466                                  
 14467 00001F76 16                      	push	ss
 14468 00001F77 1F                      	pop	ds
 14469                                  
 14470                                  	;push	word [DMAADD]
 14471                                  	;push	word [DMAADD+2]
 14472                                  	; 24/01/2024
 14473 00001F78 C43E[2C03]              	les	di,[DMAADD]
 14474 00001F7C 57                      	push	di
 14475 00001F7D 06                      	push	es
 14476 00001F7E C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14477 00001F84 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14478 00001F88 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14479 00001F8B 8F06[2E03]              	pop	word [DMAADD+2]
 14480 00001F8F 8F06[2C03]              	pop	word [DMAADD]
 14481 00001F93 724A                    	JC	short SearchNoMore
 14482                                  	; 24/01/2024
 14483                                  	;JMP	SearchSet		; Ok set return
 14484                                  
 14485                                  ;;;	; 24/01/2024
 14486                                  
 14487                                  ; The search was successful (or the search-next). We store the information
 14488                                  ; into the user's FCB for continuation.
 14489                                  
 14490                                  SearchSet:
 14491 00001F95 BE[BE04]                	MOV	SI,SEARCHBUF
 14492 00001F98 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14493 00001F9C F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14494 00001FA1 7403                    	JZ	short NORMFCB1
 14495 00001FA3 83C707                  	ADD	DI,7			; Point past the extension
 14496                                  NORMFCB1:
 14497 00001FA6 5B                      	pop	bx			; Get original drive byte
 14498 00001FA7 08DB                    	OR	BL,BL
 14499 00001FA9 7506                    	JNZ	short SearchDrv
 14500 00001FAB 8A1E[3603]              	MOV	BL,[CURDRV]
 14501 00001FAF FEC3                    	INC	BL
 14502                                  SearchDrv:
 14503 00001FB1 AC                      	LODSB				; Get correct search contin drive byte
 14504 00001FB2 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14505 00001FB4 47                      	INC	DI
 14506                                  	;STOSB				; Store the correct "user" drive byte
 14507                                  					;  at the start of the search info
 14508 00001FB5 B90A00                  	MOV	CX,20/2
 14509 00001FB8 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14510 00001FBA 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14511                                  					;   byte to AL
 14512 00001FBC AA                      	STOSB				; Search contin drive byte at end of
 14513                                  					;   contin info
 14514 00001FBD C43E[2C03]              	LES	DI,[DMAADD]
 14515 00001FC1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14516 00001FC6 740D                    	JZ	short NORMFCB2
 14517 00001FC8 B0FF                    	MOV	AL,0FFh
 14518 00001FCA AA                      	STOSB
 14519 00001FCB FEC0                    	INC	AL
 14520                                  	;MOV	CX,5
 14521                                  	; 17/12/2022
 14522 00001FCD B105                    	mov	cl,5
 14523 00001FCF F3AA                    	REP	STOSB
 14524 00001FD1 A0[6D05]                	MOV	AL,[SATTRIB]
 14525 00001FD4 AA                      	STOSB
 14526                                  NORMFCB2:
 14527 00001FD5 88D8                    	MOV	AL,BL			; User Drive byte
 14528 00001FD7 AA                      	STOSB
 14529                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14530                                  	; 17/12/2022
 14531 00001FD8 B110                    	mov	cl,16
 14532 00001FDA F3A5                    	REP	MOVSW
 14533 00001FDC E978E6                  	jmp	FCB_RET_OK
 14534                                  ;;;
 14535                                  
 14536                                  SearchNoMore:
 14537 00001FDF C43E[A605]              	LES	DI,[THISFCB]
 14538 00001FE3 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14539 00001FE8 7403                    	JZ	short NORMFCB8
 14540 00001FEA 83C707                  	ADD	DI,7			; Point past the extension
 14541                                  NORMFCB8:
 14542 00001FED 5B                      	pop	bx			; Get original drive byte
 14543 00001FEE 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14544                                  					;  at the right spot
 14545                                  ; error code is in AX
 14546                                  
 14547 00001FF1 E966E6                  	jmp	FCB_RET_ERR
 14548                                  
 14549                                  ; 17/05/2019 - Retro DOS v4.0
 14550                                  
 14551                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14552                                  
 14553                                  ;---------------------------------------------------------------------------
 14554                                  ;
 14555                                  ;   Procedure Name : $FIND_FIRST
 14556                                  ; 
 14557                                  ;   Assembler usage:
 14558                                  ;	    MOV AH, FindFirst
 14559                                  ;	    LDS DX, name
 14560                                  ;	    MOV CX, attr
 14561                                  ;	    INT 21h
 14562                                  ;	; DMA address has datablock
 14563                                  ;
 14564                                  ;   Error Returns:
 14565                                  ;	    AX = error_path_not_found
 14566                                  ;	       = error_no_more_files
 14567                                  ;---------------------------------------------------------------------------
 14568                                  
 14569                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14570                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14571                                  
 14572                                  	; 24/01/2024
 14573                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14574                                  
 14575                                  _$FIND_FIRST:
 14576 00001FF4 89D6                    	MOV	SI,DX			; get name in appropriate place
 14577 00001FF6 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14578                                  
 14579 00001FFB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14580                                  
 14581 00001FFE E8604A                  	call	TransPathSet		; convert the path
 14582 00002001 7305                    	JNC	short Find_it 		; no error, go and look
 14583                                  FindError:
 14584                                  	;mov	al,3
 14585 00002003 B003                    	mov	al, error_path_not_found ; error and map into one.
 14586                                  	; 09/11/2022
 14587                                  FF_errj:
 14588 00002005 E93CE6                  	jmp	SYS_RET_ERR
 14589                                  Find_it:
 14590 00002008 16                      	push	ss
 14591 00002009 1F                      	pop	ds
 14592                                  
 14593                                  	;push	word [DMAADD]
 14594                                  	;push	word [DMAADD+2]
 14595                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14596 0000200A C43E[2C03]              	les	di,[DMAADD]
 14597 0000200E 57                      	push	di
 14598 0000200F 06                      	push	es
 14599 00002010 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14600 00002016 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14601                                  	; MSDOS 3.3
 14602                                  	;call	DOS_SEARCH_FIRST
 14603                                  	; MSDOS 6.0
 14604 0000201A E8A50C                  	call	GET_FAST_SEARCH 	; search
 14605 0000201D 8F06[2E03]              	pop	word [DMAADD+2]
 14606 00002021 8F06[2C03]              	pop	word [DMAADD]
 14607                                  	
 14608                                  	; 16/12/2022
 14609                                  	;JNC	short FindSet 		; no error, transfer info
 14610 00002025 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14611                                  	;
 14612                                  	;jmp	SYS_RET_ERR
 14613                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14614                                  ;FFF_errj:
 14615                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14616                                  
 14617                                  FindSet:
 14618 00002027 BE[BE04]                	MOV	SI,SEARCHBUF
 14619 0000202A C43E[2C03]              	LES	DI,[DMAADD]
 14620 0000202E B91500                  	MOV	CX,21
 14621 00002031 F3A4                    	REP	MOVSB
 14622 00002033 56                      	PUSH	SI			; Save pointer to start of entry
 14623                                  	;mov	al,[si+0Bh]
 14624 00002034 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14625 00002037 AA                      	STOSB
 14626                                  	;add	si,16h ; 22
 14627 00002038 83C616                  	ADD	SI,dir_entry.dir_time
 14628 0000203B A5                      	MOVSW				; dir_time
 14629 0000203C A5                      	MOVSW				; dir_date
 14630 0000203D 46                      	INC	SI
 14631 0000203E 46                      	INC	SI			; Skip dir_first
 14632 0000203F A5                      	MOVSW				; dir_size (2 words)
 14633 00002040 A5                      	MOVSW
 14634 00002041 5E                      	POP	SI			; Point back to dir_name
 14635 00002042 E83300                   	CALL	PackName
 14636 00002045 E9F3E5                  	jmp	SYS_RET_OK		; bye with no errors
 14637                                  
 14638                                  ;---------------------------------------------------------------------------
 14639                                  ;
 14640                                  ;   Procedure Name : $FIND_NEXT
 14641                                  ;
 14642                                  ;   Assembler usage:
 14643                                  ;	; dma points at area returned by find_first
 14644                                  ;	    MOV AH, findnext
 14645                                  ;	    INT 21h
 14646                                  ;	; next entry is at dma
 14647                                  ;
 14648                                  ;   Error Returns:
 14649                                  ;	    AX = error_no_more_files
 14650                                  ;---------------------------------------------------------------------------
 14651                                  
 14652                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14653                                  
 14654                                  	; 24/01/2024
 14655                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14656                                  
 14657                                  _$FIND_NEXT:
 14658 00002048 16                      	push	ss
 14659 00002049 07                      	pop	es
 14660                                  
 14661 0000204A BF[BE04]                	MOV	DI,SEARCHBUF
 14662                                  
 14663 0000204D 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14664                                  
 14665 00002052 B91500                  	MOV	CX,21
 14666 00002055 F3A4                    	REP	MOVSB			; Put the search continuation info
 14667                                  					;  in the right place
 14668 00002057 16                      	push	ss
 14669 00002058 1F                      	pop	ds			; get ready for search
 14670                                  	
 14671                                  	;push	word [DMAADD]
 14672                                  	;push	word [DMAADD+2]
 14673                                  	; 24/01/2024
 14674 00002059 C43E[2C03]              	les	di,[DMAADD]
 14675 0000205D 57                      	push	di
 14676 0000205E 06                      	push	es
 14677 0000205F C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14678 00002065 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14679 00002069 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14680 0000206C 8F06[2E03]              	pop	word [DMAADD+2]
 14681 00002070 8F06[2C03]              	pop	word [DMAADD]
 14682 00002074 73B1                    	JNC	short FindSet 		; No error, set info
 14683                                  	;jmp	SYS_RET_ERR
 14684                                  	; 16/12/2022
 14685 00002076 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14686                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14687                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14688                                  
 14689                                  ;---------------------------------------------------------------------------
 14690                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14691                                  ;
 14692                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14693                                  ;	the ASCIZ format.
 14694                                  ;
 14695                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14696                                  ;		(ES:DI) = destination area (13 bytes)
 14697                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14698                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14699                                  ;---------------------------------------------------------------------------
 14700                                  
 14701                                  	; 25/01/2024 - Retro DOS v4.1
 14702                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14703                                  
 14704                                  PackName:
 14705                                  ;	Move over 8 characters to cover the name component, then trim it's
 14706                                  ;	trailing blanks.
 14707                                  
 14708                                  	;MOV	CX,8			; Pack the name
 14709                                  	;REP	MOVSB			; Move all of it
 14710                                  	; 25/01/2024
 14711 00002078 B90400                  	mov	cx,4
 14712 0000207B F3A5                    	rep	movsw
 14713                                  main_kill_tail:
 14714 0000207D 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14715 00002082 7507                    	JNZ	short find_check_dot
 14716 00002084 4F                      	DEC	DI			; Back up over trailing space
 14717 00002085 41                      	INC	CX
 14718 00002086 83F908                  	CMP	CX,8
 14719 00002089 72F2                    	JB	short main_kill_tail
 14720                                  find_check_dot:
 14721                                  	;CMP	WORD [SI],(" " << 8) | " "
 14722 0000208B 813C2020                	cmp     word [si],2020h 
 14723 0000208F 7506                    	JNZ	short got_ext 		; Some chars in extension
 14724 00002091 807C0220                	CMP	BYTE [SI+2]," "
 14725 00002095 740F                    	JZ	short find_done		; No extension
 14726                                  got_ext:
 14727 00002097 B02E                    	MOV	AL,"."	; 2Eh
 14728 00002099 AA                      	STOSB
 14729                                  	;MOV	CX,3
 14730                                  	;; 18/12/2022
 14731                                  	;;mov	cl,3
 14732                                  	;;REP	MOVSB
 14733                                  	;movsb
 14734                                  	;movsb
 14735                                  	;movsb
 14736                                  	; 25/01/2024
 14737 0000209A A5                      	movsw
 14738 0000209B A4                      	movsb
 14739                                  ext_kill_tail:
 14740 0000209C 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14741 000020A1 7503                    	JNZ	short find_done
 14742 000020A3 4F                      	DEC	DI			; Back up over trailing space
 14743 000020A4 EBF6                    	JMP	short ext_kill_tail
 14744                                  find_done:
 14745 000020A6 31C0                    	XOR	AX,AX
 14746 000020A8 AA                      	STOSB				; NUL terminate
 14747 000020A9 C3                      	retn
 14748                                  
 14749                                  ;---------------------------------------------------------------------------
 14750                                  
 14751                                  ; 24/01/2024
 14752                                  %if 0
 14753                                  	; 17/05/2019 - Retro DOS v4.0
 14754                                  GET_FAST_SEARCH:
 14755                                  	; 22/07/2018
 14756                                  	; MSDOS 6.0
 14757                                  	; 17/12/2022
 14758                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14759                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14760                                  					;FO.trigger fastopen ;AN000;
 14761                                  	;call	DOS_SEARCH_FIRST
 14762                                  	;retn
 14763                                  	; 17/12/2022
 14764                                  	jmp	DOS_SEARCH_FIRST
 14765                                  %endif
 14766                                  
 14767                                  ;============================================================================
 14768                                  ; PATH.ASM, MSDOS 6.0, 1991
 14769                                  ;============================================================================
 14770                                  ; 06/08/2018 - Retro DOS v3.0
 14771                                  ; 17/05/2019 - Retro DOS v4.0
 14772                                  
 14773                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14774                                  
 14775                                  ;**	Directory related system calls. These will be passed direct text of the
 14776                                  ;	pathname from the user. They will need to be passed through the macro
 14777                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14778                                  ;	defined in DISPATCH. The system calls are:
 14779                                  ;
 14780                                  ;	$CURRENT_DIR  Written
 14781                                  ;	$RMDIR	  Written
 14782                                  ;	$CHDIR	  Written
 14783                                  ;	$MKDIR	  Written
 14784                                  ;
 14785                                  ;
 14786                                  ;	Modification history:
 14787                                  ;
 14788                                  ;	    Created: ARR 4 April 1983
 14789                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14790                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14791                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14792                                  ;				    current directory.
 14793                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14794                                  
 14795                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14796                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14797                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14798                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14799                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14800                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14801                                  ;	I_Need	cMeta,BYTE
 14802                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14803                                  
 14804                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14805                                  ;----------------------------------------------------------------------------
 14806                                  ;
 14807                                  ;   Procedure Name : $CURRENT_DIR
 14808                                  ;
 14809                                  ;   Assembler usage:
 14810                                  ;		LDS	SI,area
 14811                                  ;		MOV	DL,drive
 14812                                  ;		INT	21h
 14813                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14814                                  ;	    ; current directory.
 14815                                  ;   Error returns:
 14816                                  ;	    AX = error_invalid_drive
 14817                                  ;
 14818                                  ;----------------------------------------------------------------------------
 14819                                  
 14820                                  	; 06/08/2018 - Retro DOS v3.0
 14821                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14822                                  
 14823                                  	; 25/01/2024 - Retro DOS v4.1
 14824                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14825                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14826                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14827                                  
 14828                                  _$CURRENT_DIR:
 14829 000020AA E84BF2                  	call	ECritDisk
 14830 000020AD 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14831 000020AF E8B848                  	call	GetVisDrv		; grab it
 14832 000020B2 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14833                                  CurdirErr:
 14834 000020B4 E85CF2                  	call	LCritDisk
 14835                                  
 14836                                  	; MSDOS 3.3
 14837                                  	;mov	al,0Fh
 14838                                  	
 14839                                  	; MSDOS 6.0
 14840 000020B7 1E                      	push	ds
 14841 000020B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14842 000020BD A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14843 000020C0 1F                      	pop	ds
 14844                                  
 14845                                  curdir_errj:
 14846 000020C1 E980E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14847                                  
 14848                                  CurrentValidate:
 14849 000020C4 1E                      	push	ds			; save destination
 14850 000020C5 56                      	push	si
 14851                                  	
 14852                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14853                                  	
 14854                                  	; MSDOS 6.0
 14855 000020C6 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14856                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14857 000020CB C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14858                                  	
 14859                                  	; 25/01/2024
 14860                                  	;lds     si,[THISCDS]
 14861                                  
 14862                                  ; 16/12/2022
 14863                                  %if 0
 14864                                  	; 09/11/2022 (following test instruction is nonsense!)
 14865                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14866                                  
 14867                                  	;test	word [si+43h],8000h
 14868                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14869                                  	;jnz	short $+2  ; 09/11/2022	
 14870                                  	jnz	short DoCheck
 14871                                  %endif
 14872                                  
 14873                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14874                                  ; media check.
 14875                                  ;	CMP	word [SI+curdir.ID],0
 14876                                  ;	JZ	short GetDst
 14877                                  DoCheck:
 14878                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14879                                  
 14880                                  	; 25/01/2024
 14881                                  	; MSDOS 6.0
 14882                                  	;push	ds
 14883                                  	;mov	ds,[cs:DosDSeg]
 14884                                  	;mov	byte [NoSetDir],0 ; *
 14885                                  	;pop	ds
 14886                                  
 14887 000020D0 BF[BE03]                	MOV	DI,OPENBUF
 14888 000020D3 E89520                  	call	ValidateCDS		; output is ES:DI -> CDS
 14889                                  
 14890 000020D6 06                      	push	es	 		; swap source and destination
 14891 000020D7 57                      	push	di
 14892 000020D8 5E                      	pop	si
 14893 000020D9 1F                      	pop	ds
 14894                                  GetDst:
 14895 000020DA 5F                      	pop	di
 14896 000020DB 07                      	pop	es			; get real destination
 14897 000020DC 72D6                    	JC	short CurdirErr
 14898                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14899                                  	;
 14900                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14901                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14902                                  	; 16/12/2022
 14903                                  	;add	si,0  ; add si,curdir.text
 14904                                  	;
 14905                                  	;add	si,[si+4Fh] ; 17/05/2019
 14906 000020DE 03744F                  	ADD	SI,[SI+curdir.end]
 14907 000020E1 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14908 000020E4 7501                    	JNZ	short CurrentCopy
 14909 000020E6 46                      	INC	SI
 14910                                  CurrentCopy:
 14911                                  ;	call	FStrCpy
 14912                                  ;; 10/29/86 E5 char
 14913 000020E7 50                      	PUSH	AX
 14914 000020E8 AC                      	LODSB				; get char
 14915 000020E9 08C0                    	OR	AL,AL
 14916 000020EB 7413                    	JZ	short FOK
 14917 000020ED 3C05                    	CMP	AL,05H
 14918 000020EF 740D                    	JZ	short FCHANGE
 14919 000020F1 EB01                    	JMP	short FFF
 14920                                  FCPYNEXT:
 14921 000020F3 AC                      	LODSB				; get char
 14922                                  FFF:
 14923 000020F4 3C5C                    	CMP	AL,'\'			; beginning of directory
 14924 000020F6 7508                    	JNZ	short FOK		; no
 14925 000020F8 AA                      	STOSB				; put into user's buffer
 14926 000020F9 AC                      	LODSB				; 1st char of dir is 05?
 14927 000020FA 3C05                    	CMP	AL,05H
 14928 000020FC 7502                    	JNZ	short FOK		; no
 14929                                  FCHANGE:
 14930 000020FE B0E5                    	MOV	AL,0E5H			; make it E5
 14931                                  FOK:
 14932 00002100 AA                      	STOSB				; put into user's buffer
 14933 00002101 08C0                    	OR	AL,AL			; final char
 14934 00002103 75EE                    	JNZ	short FCPYNEXT		; no
 14935 00002105 58                      	POP	AX
 14936                                  
 14937                                  ;; 10/29/86 E5 char
 14938 00002106 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14939 00002108 E808F2                  	call	LCritDisk
 14940 0000210B E92DE5                  	jmp	SYS_RET_OK		; no more, bye!
 14941                                  
 14942                                  ; 17/05/2019 - Retro DOS v4.0
 14943                                  
 14944                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14945                                  
 14946                                  ;BREAK <$RmDir -- Remove a directory>
 14947                                  ;----------------------------------------------------------------------------
 14948                                  ;
 14949                                  ; Procedure Name : $RmDir
 14950                                  ;
 14951                                  ; Inputs:
 14952                                  ;	DS:DX Points to asciz name
 14953                                  ; Function:
 14954                                  ;	Delete directory if empty
 14955                                  ; Returns:
 14956                                  ;	STD XENIX Return
 14957                                  ;	AX = error_path_not_found If path bad
 14958                                  ;	AX = error_access_denied If
 14959                                  ;		Directory not empty
 14960                                  ;		Path not directory
 14961                                  ;		Root directory specified
 14962                                  ;		Directory malformed (. and .. not first two entries)
 14963                                  ;		User tries to delete a current directory
 14964                                  ;	AX = error_current_directory
 14965                                  ;
 14966                                  ;----------------------------------------------------------------------------
 14967                                  
 14968                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14969                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14970                                  
 14971                                  _$RMDIR:
 14972 0000210E 52                      	push	dx			; Save ptr to name
 14973 0000210F 1E                      	push	ds
 14974 00002110 89D6                    	mov	si,dx			; Load ptr into si
 14975 00002112 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14976 00002115 57                      	push	di
 14977 00002116 E85049                  	call	TransPathNoSet		; Translate the name
 14978 00002119 5F                      	pop	di			; di = ptr to buf for trans name
 14979 0000211A 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14980 0000211C 1F                      	pop	ds
 14981 0000211D 5A                      	pop	dx			; Restore the name
 14982                                  	;mov	al,3
 14983 0000211E B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14984                                  	; 16/12/2022
 14985                                  rmdir_errj: ; 10/08/2018
 14986                                  chdir_errj:
 14987 00002120 EB9F                    	jmp	short curdir_errj
 14988                                  	;jmp	SYS_RET_ERR
 14989                                  rmlset:
 14990 00002122 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14991 00002128 7512                    	Jnz	short rmerr		;	return (-1);
 14992 0000212A 16                      	push	ss
 14993 0000212B 07                      	pop	es
 14994 0000212C 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14995                                  rmloop: 
 14996 0000212E E8AA48                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14997 00002131 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14998 00002133 E866F0                  	call	StrCmp			; Are the 2 paths the same?
 14999 00002136 7404                    	jz	short rmerr		; Yes, report error.
 15000 00002138 FEC0                    	inc	al			; No, inc al to next drive number
 15001 0000213A EBF2                    	jmp	short rmloop		; Go check next drive.
 15002                                  rmerr:
 15003 0000213C 1F                      	pop	ds
 15004 0000213D 5A                      	pop	dx			; Restore the name
 15005                                  	;mov	al,10h
 15006 0000213E B010                    	mov	al,error_current_directory ; error
 15007                                  	; 16/12/2022
 15008                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15009                                  ;chdir_errj:
 15010 00002140 EBDE                    	jmp	short rmdir_errj
 15011                                  rmcont:
 15012 00002142 1F                      	pop	ds
 15013 00002143 5A                      	pop	dx			; Restore the name
 15014 00002144 BE[6D31]                	MOV	SI,DOS_RMDIR
 15015 00002147 EB7C                    	JMP	DoDirCall
 15016                                  
 15017                                  ; 17/05/2019 - Retro DOS v4.0
 15018                                  
 15019                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15020                                  
 15021                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15022                                  ;----------------------------------------------------------------------------
 15023                                  ;
 15024                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15025                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15026                                  ; several cases to consider:
 15027                                  ;
 15028                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15029                                  ;	it into a WFP.	We verify the existance of this directory and then
 15030                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15031                                  ;	directory cluster.
 15032                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15033                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15034                                  ;	WFP back into the CDS.
 15035                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15036                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15037                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15038                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15039                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15040                                  ;	to process the path but to return the logical CDS and the logical
 15041                                  ;	path.  We then copy the logical path into the logical CDS.
 15042                                  ;
 15043                                  ; Inputs:
 15044                                  ;	DS:DX Points to asciz name
 15045                                  ; Returns:
 15046                                  ;	STD XENIX Return
 15047                                  ;	AX = chdir_path_not_found if error
 15048                                  ;
 15049                                  ;----------------------------------------------------------------------------
 15050                                  
 15051                                  _$CHDIR:
 15052 00002149 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15053 0000214C 89D6                    	MOV	SI,DX			; get source
 15054 0000214E E80C49                  	call	TransPath		; go munge the path and get real CDS
 15055 00002151 7304                    	JNC	short ChDirCrack	; no errors, try path
 15056                                  ChDirErrP:
 15057                                  	;mov	al,3
 15058 00002153 B003                    	MOV	AL,error_path_not_found
 15059                                  ChDirErr:
 15060                                  	;jmp	SYS_RET_ERR 	; oops!
 15061                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15062 00002155 EBC9                    	jmp	short chdir_errj
 15063                                  
 15064                                  ChDirCrack:
 15065 00002157 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15066 0000215C 75F5                    	JNZ	short ChDirErrP
 15067                                  
 15068                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15069                                  ; found.
 15070                                  
 15071 0000215E C43E[A205]              	LES	DI,[THISCDS]
 15072 00002162 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15073 00002165 74EC                    	JZ	short ChDirErrP		;	error ();
 15074                                  
 15075                                  ; Find out if the directory exists.
 15076                                  
 15077 00002167 E8C00F                  	call	DOS_CHDIR
 15078                                  	;Jc	short ChDirErr
 15079                                  	; 16/12/2022
 15080 0000216A 72B4                    	jc	short chdir_errj
 15081                                  ;
 15082                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15083                                  ; not network). If one was seen, all we need to do is copy in the text
 15084                                  ;
 15085 0000216C C43E[A205]              	LES	DI,[THISCDS]
 15086                                  	;test	word [es:di+43h],2000h
 15087                                  	; 17/12/2022
 15088 00002170 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15089                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15090 00002175 7425                    	JZ	short GotCDS
 15091                                  
 15092                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15093                                  
 15094 00002177 06                      	push	es	
 15095 00002178 57                      	push	di
 15096 00002179 51                      	push	cx			; save CDS and cluster...
 15097 0000217A E808E3                  	call	Get_User_Stack		; get original text
 15098                                  	
 15099                                  	;mov	di,[si+6]
 15100 0000217D 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15101                                  	;mov	ds,[si+0Eh]
 15102 00002180 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15103                                  	
 15104 00002183 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15105 00002186 87F7                    	XCHG	SI,DI
 15106 00002188 30C0                    	XOR	AL,AL			; do no splicing
 15107 0000218A 57                      	push	di
 15108 0000218B E8DB48                  	call	TransPathNoSet		; Munge path
 15109 0000218E 5E                      	pop	si
 15110                                  
 15111                                  ; There should NEVER be an error here.
 15112                                  
 15113                                  ;IF FALSE
 15114                                  ;	JNC SKipErr
 15115                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15116                                  ;SkipErr:
 15117                                  ;ENDIF
 15118 0000218F C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15119                                  	;mov	word [es:di+49h],-1
 15120 00002193 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15121                                  					; no valid cluster here...
 15122 00002199 59                      	pop	cx
 15123 0000219A 5F                      	pop	di
 15124 0000219B 07                      	pop	es
 15125                                  
 15126                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15127                                  
 15128                                  GotCDS:
 15129                                  
 15130                                  ; wfp_start points to the text. See if it is long enough
 15131                                  
 15132                                  	; MSDOS 3.3
 15133                                  	;push	ss
 15134                                  	;pop	ds
 15135                                  	;mov	si,[WFP_START]
 15136                                  	;push	cx
 15137                                  	;call	DStrLen
 15138                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15139                                  	;pop	cx
 15140                                  	;ja	short ChDirErrP
 15141                                  
 15142                                  	; MSDOS 6.0
 15143 0000219C E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15144 0000219F 77B2                    	JA	short ChDirErrP
 15145                                  	; MSDOS 3.3 & MSDOS 6.0
 15146                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15147                                  	; 17/12/2022
 15148 000021A1 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15149 000021A6 7512                    	JNZ	short SkipRecency
 15150                                  	; MSDOS 6.0
 15151                                  	;test	word [es:di+43h],2000h
 15152                                  	; 17/12/2022
 15153 000021A8 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15154                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15155                                  					;PTM. for Join and Subst ;AN000;
 15156 000021AD 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15157 000021AF B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15158                                  setdirclus:
 15159                                  	;mov	[es:di+49h],cx
 15160 000021B2 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15161 000021B6 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15162                                  SkipRecency:
 15163 000021BA E810F0                  	call	FStrCpy
 15164 000021BD 30C0                    	XOR	AL,AL
 15165                                  mkdir_ok:
 15166 000021BF E979E4                  	jmp	SYS_RET_OK
 15167                                  
 15168                                  ; 17/05/2019 - Retro DOS v4.0
 15169                                  
 15170                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15171                                  
 15172                                  ;BREAK <$MkDir - Make a directory entry>
 15173                                  ;---------------------------------------------------------------------------
 15174                                  ;
 15175                                  ; Procedure Name : $MkDir
 15176                                  ; Inputs:
 15177                                  ;	DS:DX Points to asciz name
 15178                                  ; Function:
 15179                                  ;	Make a new directory
 15180                                  ; Returns:
 15181                                  ;	STD XENIX Return
 15182                                  ;	AX = mkdir_path_not_found if path bad
 15183                                  ;	AX = mkdir_access_denied  If
 15184                                  ;		Directory cannot be created
 15185                                  ;		Node already exists
 15186                                  ;		Device name given
 15187                                  ;		Disk or directory(root) full
 15188                                  ;---------------------------------------------------------------------------
 15189                                  
 15190                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15191                                  
 15192                                  _$MKDIR:
 15193 000021C2 BE[3D30]                	MOV	SI,DOS_MKDIR
 15194                                  DoDirCall:
 15195 000021C5 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15196                                  
 15197 000021C8 56                      	push	si
 15198 000021C9 89D6                    	MOV	SI,DX			; get source
 15199 000021CB E88F48                  	call	TransPath		; go munge the path
 15200 000021CE 5E                      	pop	si
 15201 000021CF 7305                    	JNC	short MkDirCrack	; no errors, try path
 15202                                  MkErrP:
 15203 000021D1 B003                    	MOV	AL,error_path_not_found	; oops!
 15204                                  MkErr:
 15205 000021D3 E96EE4                  	jmp	SYS_RET_ERR
 15206                                  MkDirCrack:
 15207 000021D6 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15208 000021DC 75F3                    	JNZ	short MkErrP
 15209                                  
 15210                                  	; MSDOS 3.3
 15211                                  	;push	ss
 15212                                  	;pop	ds
 15213                                  	;call	si
 15214                                  	;jb	short MkErr
 15215                                  	;;jmp	short mkdir_ok
 15216                                  	;jmp	SYS_RET_OK
 15217                                  
 15218                                  	; MSDOS 6.0
 15219 000021DE 56                      	PUSH	SI			;PTM.			;AN000;
 15220 000021DF E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15221 000021E2 5E                      	POP	SI			;PTM.			;AN000;
 15222 000021E3 7604                    	JBE	short pathok		;PTM.			;AN000;
 15223                                  	;mov	al,5
 15224 000021E5 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15225                                  	;jmp	SYS_RET_ERR		;PTM.
 15226 000021E7 EBEA                    	jmp	short MkErr
 15227                                  pathok:
 15228 000021E9 FFD6                    	CALL	SI			; go get file
 15229 000021EB 72E6                    	JC	short MkErr		; no errors
 15230                                  	; 16/12/2022
 15231                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15232 000021ED EBD0                    	jmp	short mkdir_ok
 15233                                  	;jmp	SYS_RET_OK
 15234                                  
 15235                                  ;----------------------------------------------------------------------------
 15236                                  ;
 15237                                  ; Procedure Name : Check_PathLen
 15238                                  ;
 15239                                  ; Inputs:
 15240                                  ;	nothing
 15241                                  ; Function:
 15242                                  ;	check if final path length greater than 67
 15243                                  ; Returns:
 15244                                  ;	Above flag set if > 67
 15245                                  ;
 15246                                  ;---------------------------------------------------------------------------
 15247                                  
 15248                                  Check_PathLen:
 15249                                  	; 09/09/2018
 15250                                  	;mov	SI,[WFP_START]
 15251 000021EF 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15252                                  Check_PathLen2:
 15253 000021F4 16                      	push	ss
 15254 000021F5 1F                      	pop	ds
 15255                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15256 000021F6 51                      	push	CX	
 15257 000021F7 E8EAEF                  	CALL	DStrLen
 15258 000021FA 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15259 000021FD 59                      	POP	CX
 15260 000021FE C3                      	retn
 15261                                  
 15262                                  ;============================================================================
 15263                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15264                                  ;============================================================================
 15265                                  ; 07/08/2018 - Retro DOS v3.0
 15266                                  ; 17/05/2019 - Retro DOS v4.0
 15267                                  
 15268                                  ;**	IOCTL system call.
 15269                                  ;----------------------------------------------------------------------------
 15270                                  ;	$IOCTL
 15271                                  ;
 15272                                  ;	  Revision history:
 15273                                  ;
 15274                                  ;		Created: ARR 4 April 1983
 15275                                  ;
 15276                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15277                                  ;
 15278                                  ;		A000	version 4.00	Jan. 1988
 15279                                  ;
 15280                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15281                                  ;
 15282                                  
 15283                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15284                                  ;---------------------------------------------------------------------------
 15285                                  ;
 15286                                  ;   Assembler usage:
 15287                                  ;	    MOV     BX, Handle
 15288                                  ;	    MOV     DX, Data
 15289                                  ;
 15290                                  ;	(or LDS     DX,BUF
 15291                                  ;	    MOV     CX,COUNT)
 15292                                  ;
 15293                                  ;	    MOV     AH, Ioctl
 15294                                  ;	    MOV     AL, Request
 15295                                  ;	    INT     21h
 15296                                  ;
 15297                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15298                                  ;	    attribute word in DX, handle in BX:
 15299                                  ;	    DH = high word of device driver attributes
 15300                                  ;	    DL = low byte of sf_flags
 15301                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15302                                  ;	    in BX.
 15303                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15304                                  ;	    into DS:DX.  Return number read in AX.
 15305                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15306                                  ;	    DS:DX.  Return bytes written in AX.
 15307                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15308                                  ;	    into DS:DX.  Return number read in AX.
 15309                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15310                                  ;	    DS:DX.  Return bytes written in AX.
 15311                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15312                                  ;	    device, AL = 0FFh, otherwise 0.
 15313                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15314                                  ;	    device, AL = 0FFh, otherwise 0.
 15315                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15316                                  ;	    removable media, 0 otherwise.
 15317                                  ;	 9  Return the contents of the device attribute word in DX for the
 15318                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15319                                  ;	    network. 8000h is the bit for local use.
 15320                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15321                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15322                                  ;	    the count and CX is the delay.
 15323                                  ;
 15324                                  ;   Error returns:
 15325                                  ;	    AX = error_invalid_handle
 15326                                  ;	       = error_invalid_function
 15327                                  ;	       = error_invalid_data
 15328                                  ;
 15329                                  ;-------------------------------------------------------------------------------
 15330                                  ;
 15331                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15332                                  ;   than the above
 15333                                  ;
 15334                                  ;	There are several basic forms of IOCTL calls:
 15335                                  ;
 15336                                  ;
 15337                                  ;	** Get/Set device information:	**
 15338                                  ;
 15339                                  ;	ENTRY	(AL) = function code
 15340                                  ;		  0 - Get device information
 15341                                  ;		  1 - Set device information
 15342                                  ;		(BX) = file handle
 15343                                  ;		(DX) = info for "Set Device Information"
 15344                                  ;	EXIT	'C' set if error
 15345                                  ;		  (AX) = error code
 15346                                  ;		'C' clear if OK
 15347                                  ;		  (DX) = info for "Get Device Information"
 15348                                  ;	USES	ALL
 15349                                  ;
 15350                                  ;
 15351                                  ;	**  Read/Write Control Data From/To Handle  **
 15352                                  ;
 15353                                  ;	ENTRY	(AL) = function code
 15354                                  ;		  2 - Read device control info
 15355                                  ;		  3 - Write device control info
 15356                                  ;		(BX) = file handle
 15357                                  ;		(CX) = transfer count
 15358                                  ;		(DS:DX) = address for data
 15359                                  ;	EXIT	'C' set if error
 15360                                  ;		  (AX) = error code
 15361                                  ;		'C' clear if OK
 15362                                  ;		  (AX) = count of bytes transfered
 15363                                  ;	USES	ALL
 15364                                  ;
 15365                                  ;
 15366                                  ;	**  Read/Write Control Data From/To Block Device  **
 15367                                  ;
 15368                                  ;	ENTRY	(AL) = function code
 15369                                  ;		  4 - Read device control info
 15370                                  ;		  5 - Write device control info
 15371                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15372                                  ;		(CX) = transfer count
 15373                                  ;		(DS:DX) = address for data
 15374                                  ;	EXIT	'C' set if error
 15375                                  ;		  (AX) = error code
 15376                                  ;		'C' clear if OK
 15377                                  ;		  (AX) = count of bytes transfered
 15378                                  ;	USES	ALL
 15379                                  ;
 15380                                  ;
 15381                                  ;	**  Get Input/Output Status  **
 15382                                  ;
 15383                                  ;	ENTRY	(AL) = function code
 15384                                  ;		  6 - Get Input status
 15385                                  ;		  7 - Get Output Status
 15386                                  ;		(BX) = file handle
 15387                                  ;	EXIT	'C' set if error
 15388                                  ;		  (AX) = error code
 15389                                  ;		'C' clear if OK
 15390                                  ;		  (AL) = 00 if not ready
 15391                                  ;		  (AL) = FF if ready
 15392                                  ;	USES	ALL
 15393                                  ;
 15394                                  ;
 15395                                  ;	**  Get Drive Information  **
 15396                                  ;
 15397                                  ;	ENTRY	(AL) = function code
 15398                                  ;		  8 - Check for removable media
 15399                                  ;		  9 - Get device attributes
 15400                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15401                                  ;	EXIT	'C' set if error
 15402                                  ;		  (AX) = error code
 15403                                  ;		'C' clear if OK
 15404                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15405                                  ;		  (DX) = device attribute word (func. 9)
 15406                                  ;	USES	ALL
 15407                                  ;
 15408                                  ;
 15409                                  ;	**  Get Redirected bit	**
 15410                                  ;
 15411                                  ;	ENTRY	(AL) = function code
 15412                                  ;		  0Ah - Network stuff
 15413                                  ;		(BX) = file handle
 15414                                  ;	EXIT	'C' set if error
 15415                                  ;		  (AX) = error code
 15416                                  ;		'C' clear if OK
 15417                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15418                                  ;	USES	ALL
 15419                                  ;
 15420                                  ;
 15421                                  ;	**  Change sharer retry parameters  **
 15422                                  ;
 15423                                  ;	ENTRY	(AL) = function code
 15424                                  ;		  0Bh - Set retry parameters
 15425                                  ;		(CX) = retry loop count
 15426                                  ;		(DX) = number of retries
 15427                                  ;	EXIT	'C' set if error
 15428                                  ;		  (AX) = error code
 15429                                  ;		'C' clear if OK
 15430                                  ;	USES	ALL
 15431                                  ;
 15432                                  ;
 15433                                  ;   =================================================================
 15434                                  ;
 15435                                  ;	**  New Standard Control  **
 15436                                  ;
 15437                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15438                                  ;	FORMS ARE OBSOLETE.
 15439                                  ;
 15440                                  ;   =================================================================
 15441                                  ;
 15442                                  ;	ENTRY	(AL) = function code
 15443                                  ;		  0Ch - Control Function subcode
 15444                                  ;		(BX) = File Handle
 15445                                  ;		(CH) = Category Indicator
 15446                                  ;		(CL) = Function within category
 15447                                  ;		(DS:DX) = address for data, if any
 15448                                  ;		(SI) = Passed to device as argument, use depends upon function
 15449                                  ;		(DI) = Passed to device as argument, use depends upon function
 15450                                  ;	EXIT	'C' set if error
 15451                                  ;		  (AX) = error code
 15452                                  ;		'C' clear if OK
 15453                                  ;		  (SI) = Return value, meaning is function dependent
 15454                                  ;		  (DI) = Return value, meaning is function dependent
 15455                                  ;		  (DS:DX) = Return address, use is function dependent
 15456                                  ;	USES	ALL
 15457                                  ;
 15458                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15459                                  ;     (See inc\ioctl.inc for more info)
 15460                                  ;
 15461                                  ;	ENTRY	(AL) = function code
 15462                                  ;		  0Dh - Control Function subcode
 15463                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15464                                  ;		(CH) = Category Indicator
 15465                                  ;		(CL) = Function within category
 15466                                  ;		(DS:DX) = address for data, if any
 15467                                  ;		(SI) = Passed to device as argument, use depends upon function
 15468                                  ;		(DI) = Passed to device as argument, use depends upon function
 15469                                  ;
 15470                                  ;	EXIT	'C' set if error
 15471                                  ;		  (AX) = error code
 15472                                  ;		'C' clear if OK
 15473                                  ;		  (DS:DX) = Return address, use is function dependent
 15474                                  ;	USES	ALL
 15475                                  ;
 15476                                  ;---------------------------------------------------------------------------
 15477                                  	
 15478                                  	; 17/05/2019 - Retro DOS v4.0
 15479                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15480                                  
 15481                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15482                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15483                                  
 15484                                  IOCTLJMPTABLE:	;label	word
 15485                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15486 000021FF [3B22]                  	dw	ioctl_getset_data	; 0
 15487 00002201 [3B22]                  	dw	ioctl_getset_data   	; 1
 15488 00002203 [8B22]                  	dw	ioctl_control_string	; 2
 15489 00002205 [8B22]                  	dw	ioctl_control_string	; 3
 15490 00002207 [D923]                  	dw	ioctl_get_dev		; 4
 15491 00002209 [D923]                  	dw	ioctl_get_dev		; 5
 15492 0000220B [A522]                  	dw	ioctl_status		; 6
 15493 0000220D [A522]                  	dw	ioctl_status		; 7
 15494 0000220F [4623]                  	dw	ioctl_rem_media		; 8
 15495 00002211 [8123]                  	dw	ioctl_drive_attr	; 9
 15496 00002213 [CB23]                  	dw	ioctl_handle_redir	; A
 15497 00002215 [C122]                  	dw	Set_Retry_Parameters	; B
 15498 00002217 [CF22]                  	dw	GENERICIOCTLHANDLE	; C
 15499 00002219 [E622]                  	dw	GENERICIOCTL		; D
 15500                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15501 0000221B [7C24]                  	dw	ioctl_drive_owner	; E
 15502 0000221D [7C24]                  	dw	ioctl_drive_owner	; F
 15503                                  	; MSDOS 6.0
 15504 0000221F [CF22]                  	dw	query_handle_support	; 10h
 15505 00002221 [E622]                  	dw	query_device_support	; 11h
 15506                                  
 15507                                  	; 11/11/2022
 15508                                  _$IOCTL:
 15509 00002223 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15510 00002225 16                      	push	ss
 15511 00002226 1F                      	pop	ds			;hkn; SS is DOSDATA
 15512                                  
 15513                                  	; MSDOS 3.3
 15514                                  	;cmp	al,0Fh 
 15515                                  	; MSDOS 6.0
 15516 00002227 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15517 00002229 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15518                                  
 15519                                  	; 14/01/2024
 15520                                  	; 28/05/2019
 15521                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15522 0000222B 89C7                    	mov	di,ax			; di NOT a PARM
 15523 0000222D 81E7FF00                	and	di,0FFh			; di = al
 15524 00002231 D1E7                    	shl	di,1			; di = index into jmp table
 15525                                  	;pop	AX			; Restore AL for generic IOCTL
 15526                                  
 15527 00002233 2EFFA5[FF21]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15528                                  
 15529                                  ioctl_bad_funj2:
 15530 00002238 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15531                                  
 15532                                  ;--------------------------------------------------------------------------
 15533                                  ;
 15534                                  ; IOCTL: AL = 0,1
 15535                                  ;
 15536                                  ; ENTRY: DS = DOSDATA
 15537                                  ;
 15538                                  ;--------------------------------------------------------------------------
 15539                                  
 15540                                  ioctl_getset_data:
 15541                                  	; MSDOS 6.0
 15542 0000223B E82443                  	call	SFFromHandle		; ES:DI -> SFT
 15543 0000223E 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15544                                  ioctl_bad_handle:
 15545                                  	;mov	al,6
 15546 00002240 B006                    	mov	al,error_invalid_handle
 15547                                  ioctl_error:
 15548 00002242 E9FFE3                  	jmp	SYS_RET_ERR
 15549                                  
 15550                                  ioctl_check_permissions:
 15551 00002245 3C00                    	CMP	AL,0
 15552                                  	;mov	al,[es:di+5]
 15553 00002247 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15554 0000224B 741B                    	JZ	short ioctl_read	; read the byte
 15555                                  
 15556 0000224D 08F6                    	or	dh,dh
 15557 0000224F 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15558                                  	;mov	al,0Dh
 15559 00002251 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15560                                  	;jmp	SYS_RET_ERR
 15561 00002253 EBED                    	jmp	short ioctl_error
 15562                                  
 15563                                  ioctl_check_device:
 15564 00002255 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15565 00002257 74DF                    	jz	short ioctl_bad_funj2
 15566 00002259 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15567                                  					;   device bit!! He can muck with the
 15568                                  					;   others at will.
 15569 0000225C C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15570 00002261 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15571                                  ioctl_ok:
 15572 00002265 E9D3E3                  	jmp	SYS_RET_OK
 15573                                  
 15574                                  ioctl_read:
 15575 00002268 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15576 0000226D 30E4                    	XOR	AH,AH
 15577 0000226F A880                    	test	AL,devid_device 	; Should I set high byte
 15578 00002271 740D                    	JZ	short ioctl_no_high	; no
 15579 00002273 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15580                                  	;les	di,[es:di+7]
 15581 00002278 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15582                                  	;mov	ah,[es:di+5]
 15583 0000227C 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15584                                  ioctl_no_high:
 15585 00002280 89C2                    	MOV	DX,AX
 15586                                  ioctl_set_dx:	; 16/12/2022
 15587 00002282 E800E2                  	call	Get_User_Stack
 15588                                  	;mov	[si+6],dx
 15589 00002285 895406                  	MOV	[SI+user_env.user_DX],DX
 15590                                  	;;jmp	SYS_RET_OK
 15591                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15592                                  ioctl_ok_j:
 15593                                  	; 16/12/2022
 15594 00002288 E9B3E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15595                                  	;jmp	short ioctl_ok
 15596                                  	; 26/07/2019
 15597                                  	;jmp	SYS_RET_OK_clc
 15598                                  
 15599                                  ;--------------------------------------------------------------------------
 15600                                  ;
 15601                                  ; IOCTL: AL = 2,3
 15602                                  ;
 15603                                  ; ENTRY: DS = DOSDATA
 15604                                  ;	 SI = user's DS
 15605                                  ;
 15606                                  ;--------------------------------------------------------------------------
 15607                                  
 15608                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15609                                  ioctl_control_string:
 15610 0000228B E8D442                  	call	SFFromHandle		; ES:DI -> SFT
 15611 0000228E 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15612                                  	; 07/12/2022
 15613                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15614                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15615                                  	; MSDOS 5.0 & MSDOS 6.0
 15616 00002290 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15617 00002295 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15618 00002297 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15619 0000229C 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15620 000022A0 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15621 000022A2 E93C01                  	JMP	ioctl_do_string
 15622                                  
 15623                                  ;--------------------------------------------------------------------------
 15624                                  ;
 15625                                  ; IOCTL: AL = 6,7
 15626                                  ;
 15627                                  ; ENTRY: DS = DOSDATA
 15628                                  ;
 15629                                  ;--------------------------------------------------------------------------
 15630                                  
 15631                                  ioctl_status:
 15632 000022A5 B401                    	MOV	AH,1
 15633 000022A7 2C06                    	SUB	AL,6			; 6=0,7=1
 15634 000022A9 7402                    	JZ	short ioctl_get_status
 15635 000022AB B403                    	MOV	AH,3
 15636                                  ioctl_get_status:
 15637 000022AD 50                      	PUSH	AX
 15638 000022AE E8E612                  	call	GET_IO_SFT
 15639 000022B1 58                      	POP	AX
 15640                                  	;JNC	short DO_IOFUNC
 15641                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15642                                  	; 16/12/2022
 15643 000022B2 728C                    	jc	short ioctl_bad_handle
 15644                                  DO_IOFUNC:
 15645 000022B4 E8E820                  	call	IOFUNC
 15646 000022B7 88C4                    	MOV	AH,AL
 15647 000022B9 B0FF                    	MOV	AL,0FFH
 15648                                  	;JNZ	short ioctl_status_ret
 15649                                  	; 29/01/2024
 15650 000022BB 75A8                    	jnz	short ioctl_ok
 15651 000022BD FEC0                    	INC	AL
 15652                                  ioctl_status_ret:
 15653                                  	;jmp	SYS_RET_OK
 15654                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15655                                  	;jmp	short ioctl_ok_j
 15656                                  	; 16/12/2022
 15657 000022BF EBA4                    	jmp	short ioctl_ok
 15658                                  
 15659                                  ;--------------------------------------------------------------------------
 15660                                  ;
 15661                                  ; IOCTL: AL = B
 15662                                  ;
 15663                                  ; ENTRY: DS = DOSDATA
 15664                                  ;
 15665                                  ;--------------------------------------------------------------------------
 15666                                  
 15667                                  Set_Retry_Parameters:
 15668                                  	; 09/09/2018
 15669 000022C1 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15670 000022C5 09D2                    	OR	DX,DX			; zero retries not allowed
 15671 000022C7 7475                    	JZ	short ioctl_bad_fun
 15672 000022C9 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15673                                  doneok:
 15674                                  	;jmp	SYS_RET_OK		; Done
 15675                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15676                                  	;jmp	short ioctl_status_ret
 15677                                  	; 16/12/2022
 15678 000022CD EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15679                                  
 15680                                  ;--------------------------------------------------------------------------
 15681                                  ;
 15682                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15683                                  ;
 15684                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15685                                  ;	SI:DX -> Users Device Parameter Table
 15686                                  ;	IOCALL -> IOCTL_Req structure
 15687                                  ;
 15688                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15689                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15690                                  ;	call.
 15691                                  ;
 15692                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15693                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15694                                  ;         return address off the stack if the drive is invalid.
 15695                                  ;
 15696                                  ;--------------------------------------------------------------------------
 15697                                  
 15698                                  query_handle_support:	; Entry point for handles
 15699                                  GENERICIOCTLHANDLE:
 15700 000022CF E89042                  	call	SFFromHandle		; Get SFT for device.
 15701 000022D2 726F                    	jc	short ioctl_bad_handlej
 15702                                  
 15703                                  	;test	word [es:di+5],8000h
 15704                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15705                                  	;test	byte [es:di+6],80h
 15706 000022D4 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15707 000022D9 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15708                                  
 15709 000022DB C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15710                                  	;les	di,[es:di+7]
 15711 000022E0 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15712 000022E4 EB0F                    	jmp	short Do_GenIOCTL
 15713                                  
 15714                                  query_device_support:	; Entry point for devices:
 15715                                  GENERICIOCTL:
 15716 000022E6 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15717 000022EB 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15718 000022EE 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15719                                  
 15720 000022F0 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15721 000022F3 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15722                                  
 15723                                  Do_GenIOCTL:
 15724                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15725                                  					; Can device handle Generic IOCTL funcs
 15726                                  	; 09/09/2018
 15727                                  	;test	byte [es:di+4],40h
 15728 000022F5 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15729 000022FA 7442                    	jz	short ioctl_bad_fun
 15730                                  
 15731                                  	; 17/05/2019 - Retro DOS v4.0
 15732                                  
 15733                                  	; MSDOS 6.0
 15734                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15735 000022FC C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15736                                  	;cmp	al,10h
 15737 00002301 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15738 00002303 7C0C                    	jl	short SetIOCtlBlock
 15739                                  	
 15740                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15741                                  	;test	byte [es:di+4],80h 
 15742 00002305 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15743 0000230A 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15744                                  	;
 15745                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15746 0000230C C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15747                                  
 15748                                  SetIOCtlBlock:
 15749 00002311 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15750 00002312 57                      	PUSH	DI			; in DS:SI
 15751                                  					; Setup Generic IOCTL Request Block
 15752                                  	;mov	byte [IOCALL_REQLEN],23
 15753 00002313 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15754                                  	; 07/09/2018 (MSDOS 3.3)
 15755                                  	;;mov	byte [IOCALL_REQFUNC],19
 15756                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15757                                  	;
 15758 00002318 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15759 0000231C 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15760 00002320 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15761 00002324 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15762 00002328 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15763 0000232C 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15764 00002330 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15765                                  
 15766                                  ;hkn; IOCALL is in DOSDATA
 15767 00002334 BB[7C03]                	MOV	BX,IOCALL
 15768                                  
 15769 00002337 16                      	PUSH	SS
 15770 00002338 07                      	POP	ES
 15771                                  					; DS:SI -> Device header.
 15772 00002339 5E                      	POP	SI
 15773 0000233A 1F                      	POP	DS
 15774                                  	; 10/08/2018
 15775 0000233B E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15776                                  
 15777                                  ioctl_bad_fun:
 15778 0000233E B001                    	mov	al, error_invalid_function  ; 1
 15779 00002340 E901E3                  	jmp	SYS_RET_ERR	
 15780                                  
 15781                                  ioctl_bad_handlej:
 15782 00002343 E9FAFE                  	jmp	ioctl_bad_handle
 15783                                  
 15784                                  ;---------------------------------------------------------------------------
 15785                                  ;
 15786                                  ; IOCTL: AL = 8
 15787                                  ;
 15788                                  ; ENTRY: DS = DOSDATA
 15789                                  ;
 15790                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15791                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15792                                  ;         return address off the stack if the drive is invalid.
 15793                                  ;
 15794                                  ;-------------------------------------------------------------------------
 15795                                  
 15796                                  	; 30/01/2024
 15797                                  ioctl_rem_media:
 15798                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15799 00002346 E82401                  	CALL	Check_If_Net
 15800 00002349 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15801                                  					;   certainly don't know how to do this
 15802                                  					;   call.
 15803                                  	;test	word [es:di+4],800h
 15804                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15805                                  	;test	byte [es:di+5],8
 15806 0000234B 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15807 00002350 74EC                    	JZ	short ioctl_bad_fun		; NO
 15808                                  
 15809                                  ;hkn; SS override for IOCALL
 15810                                  	; 30/01/2024
 15811                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15812                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15813 00002352 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15814 00002357 B00D                    	MOV	AL,REMHL  ; 13
 15815 00002359 88DC                    	MOV	AH,BL			; Unit number
 15816                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15817 0000235B A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15818 0000235E 31C0                    	XOR	AX,AX
 15819                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15820 00002360 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15821                                  	
 15822 00002363 06                      	PUSH	ES
 15823 00002364 1F                      	POP	DS
 15824 00002365 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15825 00002367 16                      	PUSH	SS
 15826 00002368 07                      	POP	ES
 15827                                  
 15828                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15829 00002369 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15830 0000236C 1E                      	push	ds
 15831 0000236D 56                      	push	si
 15832 0000236E E8FD21                  	call	DEVIOCALL2
 15833 00002371 5E                      	pop	si
 15834 00002372 1F                      	pop	ds
 15835                                  
 15836                                  ;hkn; SS override
 15837                                  	; 30/01/2024
 15838                                  	; (ds <> ss, ss = DOSDATA segment)
 15839 00002373 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15840                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15841                                  	; 29/01/2024
 15842 00002377 80E402                  	and	ah,STBUI>>8
 15843 0000237A B109                    	MOV	CL,9
 15844 0000237C D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15845                                  ioctl_da_ok_j:	; 11/11/2022
 15846 0000237E E9BAE2                  	jmp	SYS_RET_OK
 15847                                  
 15848                                  ;-------------------------------------------------------------------------
 15849                                  ;
 15850                                  ; IOCTL: AL = 9
 15851                                  ;
 15852                                  ; ENTRY: DS = DOSDATA
 15853                                  ;
 15854                                  ;-------------------------------------------------------------------------
 15855                                  
 15856                                  ioctl_drive_attr:
 15857                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15858 00002381 88D8                    	mov	al,bl
 15859 00002383 E80046                  	call	GETTHISDRV
 15860 00002386 723E                    	jc	short ioctl_drv_err
 15861 00002388 E8B500                  	call	Get_Driver_BL
 15862                                  	; MSDOS 6.0
 15863 0000238B 7239                    	JC	short ioctl_drv_err	; drive not valid
 15864                                  
 15865                                  	;mov	dx,[es:di+4]
 15866 0000238D 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15867                                  					; get device attribute word
 15868 00002391 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15869                                  
 15870                                  ;hkn; SS override
 15871                                  	;LES	DI,[SS:THISCDS]
 15872                                  	; 30/01/2024
 15873 00002393 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15874                                  
 15875                                  	;test	word [es:di+43h],8000h
 15876                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15877                                  	;test	byte [es:di+44h],80h
 15878 00002397 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15879 0000239C 7403                    	JZ	short IOCTLShare
 15880                                  
 15881                                  	;or	dx,1000h ; (MSDOS 3.3)
 15882                                  
 15883                                  ;	Net devices don't return a device attribute word.
 15884                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15885                                  
 15886 0000239E BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15887                                  
 15888                                  IOCTLShare:
 15889                                  	; 30/01/2024
 15890                                  	; ds = ss = DOSDATA segment
 15891                                  	;push	ss
 15892                                  	;pop	ds
 15893                                  
 15894 000023A1 BE[BE03]                	MOV	SI,OPENBUF
 15895 000023A4 80C341                  	ADD	BL,"A"	; 41h
 15896 000023A7 881C                    	MOV	[SI],BL
 15897 000023A9 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15898 000023AE B80003                  	MOV	AX,0300h
 15899 000023B1 F8                      	CLC
 15900                                  	;INT	int_IBM
 15901 000023B2 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15902                                  			; DS:SI -> ASCIZ disk device name 
 15903                                  			; (may be full path or only drive
 15904                                  			; specifier--must include the colon)
 15905                                  			; Return: CF clear if absolute disk access allowed
 15906 000023B4 7303                    	JNC	short IOCTLLocal	; Not shared
 15907                                  	;OR	DX,0200H		; Shared, bit 9
 15908                                  	; 17/12/2022
 15909 000023B6 80CE02                  	or	dh,02h
 15910                                  IOCTLLocal:
 15911                                  	;test	word [es:di+43h],1000h
 15912                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15913                                  	;test	byte [es:di+44h],10h
 15914 000023B9 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15915                                  	;JZ	short ioctl_set_DX
 15916                                  	; 16/12/2022
 15917 000023BE 7403                    	jz	short _ioctl_set_DX
 15918                                  	;OR	DX,8000h
 15919                                  	; 17/12/2022
 15920 000023C0 80CE80                  	or	dh,80h
 15921                                  ;ioctl_set_DX:
 15922                                  _ioctl_set_DX:
 15923                                  	; 16/12/2022
 15924 000023C3 E9BCFE                  	jmp	ioctl_set_dx
 15925                                  ; 16/12/2022
 15926                                  %if 0	
 15927                                  	call	Get_User_Stack
 15928                                  	MOV	[SI+user_env.user_DX],DX
 15929                                  	;;jmp	SYS_RET_OK
 15930                                  	;; 25/06/2019
 15931                                  	;jmp	SYS_RET_OK_clc
 15932                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15933                                  ioctl_gd_ok_j:
 15934                                  	jmp	short ioctl_da_ok_j
 15935                                  %endif
 15936                                  
 15937                                  ioctl_drv_err:
 15938 000023C6 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15939                                  ioctl_gd_err_j:	; 11/11/2022
 15940 000023C8 E979E2                  	jmp	SYS_RET_ERR
 15941                                  
 15942                                  ;--------------------------------------------------------------------------
 15943                                  ;
 15944                                  ; IOCTL: AL = A
 15945                                  ;
 15946                                  ; ENTRY: DS = DOSDATA
 15947                                  ;
 15948                                  ;--------------------------------------------------------------------------
 15949                                  
 15950                                  ioctl_handle_redir:
 15951 000023CB E89441                  	call	SFFromHandle		; ES:DI -> SFT
 15952 000023CE 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15953 000023D0 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15954                                  
 15955                                  ioctl_got_sft:
 15956                                  	;mov	dx,[es:di+5]
 15957 000023D3 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15958                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15959                                  	; 16/12/2022
 15960 000023D7 EBEA                    	jmp	short _ioctl_set_DX
 15961                                  
 15962                                  	; 16/12/2022
 15963                                  ;ioctl_bad_funj:
 15964                                  	;JMP	ioctl_bad_fun
 15965                                  
 15966                                  ;--------------------------------------------------------------------------
 15967                                  ;
 15968                                  ; IOCTL: AL= 4,5
 15969                                  ;
 15970                                  ; ENTRY: DS = DOSDATA
 15971                                  ;	 SI = user's DS
 15972                                  ;
 15973                                  ;
 15974                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15975                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15976                                  ;         return address off the stack if the drive is invalid.
 15977                                  ;
 15978                                  ;-------------------------------------------------------------------------
 15979                                  
 15980                                  ioctl_get_dev:
 15981 000023D9 E89100                  	CALL	Check_If_Net
 15982                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15983                                  					; certainly don't know how to do this
 15984                                  					; call.
 15985                                  	; 16/12/2022
 15986 000023DC 7403                    	jz	short ioctl_do_string
 15987                                  ioctl_bad_funj:
 15988 000023DE E95DFF                  	JMP	ioctl_bad_fun
 15989                                  
 15990                                  ioctl_do_string:
 15991                                  	;test	word [es:di+4],4000h
 15992                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15993                                  	;test	byte [es:di+5],40h
 15994 000023E1 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15995 000023E6 74F6                    	JZ	short ioctl_bad_funj		; NO
 15996                                  					; assume IOCTL read
 15997 000023E8 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15998                                  
 15999 000023ED A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16000 000023EF 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16001                                  
 16002                                  					; it is an IOCTL write
 16003 000023F1 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16004                                  
 16005                                  ioctl_control_call:
 16006 000023F6 B016                    	MOV	AL,DRDWRHL ; 22
 16007                                  ioctl_setup_pkt:
 16008 000023F8 88DC                    	MOV	AH,BL			; Unit number
 16009 000023FA A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16010 000023FD 31C0                    	XOR	AX,AX
 16011 000023FF A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16012 00002402 A2[8903]                	MOV	[IOMED],AL
 16013 00002405 890E[8E03]              	MOV	[IOSCNT],CX
 16014 00002409 8916[8A03]              	MOV	[IOXAD],DX
 16015 0000240D 8936[8C03]              	MOV	[IOXAD+2],SI
 16016 00002411 06                      	PUSH	ES
 16017 00002412 1F                      	POP	DS
 16018 00002413 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16019 00002415 16                      	PUSH	SS
 16020 00002416 07                      	POP	ES
 16021                                  
 16022 00002417 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16023                                  ioctl_do_IO:
 16024 0000241A E85121                  	call	DEVIOCALL2
 16025                                  
 16026                                  ;hkn; SS override for IOCALL
 16027                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16028                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16029                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16030 0000241D 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16031 00002423 7507                    	JNZ	short ioctl_string_err
 16032                                  
 16033                                  ;hkn; SS override
 16034 00002425 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16035                                  	; 16/12/2022
 16036 00002429 E90FE2                  	jmp	SYS_RET_OK
 16037                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16038                                  	;jmp	short ioctl_gd_ok_j
 16039                                  
 16040                                  ioctl_string_err:
 16041 0000242C 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16042                                  device_err:
 16043 00002431 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16044 00002435 89F8                    	MOV	AX,DI
 16045 00002437 E8B52F                  	call	SET_I24_EXTENDED_ERROR
 16046                                  
 16047                                  ;hkn; use SS override
 16048                                  ;hkn;	mov	ax,[CS:EXTERR]
 16049 0000243A 36A1[2403]              	mov	ax,[SS:EXTERR]
 16050                                  	;jmp	SYS_RET_ERR
 16051                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16052 0000243E EB88                    	jmp	short ioctl_gd_err_j
 16053                                  
 16054                                  ; 17/05/2019 - Retro DOS v4.0
 16055                                  
 16056                                  ;--------------------------------------------------------------------------
 16057                                  ; Proc name : Get_Driver_BL
 16058                                  ;
 16059                                  ;	DS is DOSDATA
 16060                                  ;	BL is drive number (0=default)
 16061                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16062                                  ;	No regs modified
 16063                                  ;
 16064                                  ;---------------------------------------------------------------------------
 16065                                  
 16066                                  	; 30/01/2024
 16067                                  Get_Driver_BL:
 16068 00002440 50                      	PUSH	AX
 16069 00002441 88D8                    	MOV	AL,BL			; Drive
 16070 00002443 E84045                  	call	GETTHISDRV
 16071 00002446 7223                    	jc	short ioctl_bad_drv
 16072 00002448 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16073 0000244A C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16074 0000244F C43E[A205]              	LES	DI,[THISCDS]
 16075                                  	;test	word [es:di+43h],8000h
 16076                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16077                                  	;test	byte [es:di+44h],80h
 16078 00002453 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16079                                  	;les	di,[es:di+45h]
 16080 00002458 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16081 0000245C 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16082 0000245E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16083                                  	;mov	bl,[es:di+1]
 16084 00002463 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16085                                  	;les	di,[es:di+13h]
 16086 00002467 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16087                                  got_dev_ptr:
 16088                                  	; 30/01/2024
 16089                                  	; cf=0
 16090                                  	;CLC
 16091                                  ioctl_bad_drv:
 16092 0000246B 58                      	POP	AX
 16093 0000246C C3                      	retn
 16094                                  
 16095                                  ;-------------------------------------------------------------------------
 16096                                  ; Proc Name : Check_If_Net:
 16097                                  ;
 16098                                  ;
 16099                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16100                                  ; If no device is found, the return address is popped off the stack, and a
 16101                                  ; jump is made to ioctl_drv_err.
 16102                                  ;
 16103                                  ; On Entry:
 16104                                  ; Registers same as those for Get_Driver_BL
 16105                                  ;
 16106                                  ; On Exit:
 16107                                  ; ZERO flag	- set if not a net device
 16108                                  ;		- reset if net device
 16109                                  ; ES:DI -> the device
 16110                                  ;
 16111                                  ;
 16112                                  ; BUGBUG: This function assumes the following stack setup on entry
 16113                                  ;
 16114                                  ;	  SP+2 -> Error return address
 16115                                  ;	  SP   -> Normal return address
 16116                                  ;
 16117                                  ;-------------------------------------------------------------------------
 16118                                  
 16119                                  Check_If_Net:
 16120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16121 0000246D E8D0FF                  	CALL	Get_Driver_BL
 16122 00002470 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16123                                  
 16124                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16125                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16126                                  %if 0
 16127                                  	;;;
 16128                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16129                                  	PUSH	ES
 16130                                  	PUSH	DI
 16131                                  	LES	DI,[THISCDS]
 16132                                  	;test	word [es:di+43h],8000h
 16133                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16134                                  	;test	byte [es:di+44h],80h
 16135                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16136                                  	POP	DI
 16137                                  	POP	ES
 16138                                  	;;;
 16139                                  %endif
 16140 00002472 C3                      	retn
 16141                                  
 16142                                  ioctl_drv_err_pop:
 16143 00002473 58                      	pop	ax			; pop off return address
 16144 00002474 E94FFF                  	jmp	ioctl_drv_err
 16145                                  
 16146                                  ioctl_bad_funj3:
 16147 00002477 E9C4FE                  	jmp	ioctl_bad_fun
 16148                                  
 16149                                  ioctl_string_errj:
 16150 0000247A EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16151                                  
 16152                                  ;--------------------------------------------------------------------------
 16153                                  ;
 16154                                  ; IOCTL: AL = E, F
 16155                                  ;
 16156                                  ; ENTRY: DS = DOSDATA
 16157                                  ;
 16158                                  ;
 16159                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16160                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16161                                  ;         return address off the stack if the drive is invalid.
 16162                                  ;
 16163                                  ;--------------------------------------------------------------------------
 16164                                  
 16165                                  ioctl_drive_owner:
 16166                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16167 0000247C E8EEFF                  	Call	Check_If_Net
 16168 0000247F 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16169                                  					;   certainly don't know how to do this
 16170                                  					;   call.
 16171                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16172                                  	; 09/09/2018
 16173                                  	;test	byte [es:di+4],40h
 16174 00002481 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16175 00002486 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16176                                  	;mov	byte [IOCALL_REQFUNC],23
 16177 00002488 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16178 0000248D 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16179 0000248F 7405                    	jz	short GetOwner
 16180                                  SetOwner:
 16181 00002491 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16182                                  GetOwner:
 16183 00002496 B00D                    	MOV	AL,OWNHL ; 13
 16184 00002498 88DC                    	MOV	AH,BL			; Unit number
 16185 0000249A A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16186 0000249D 31C0                    	XOR	AX,AX
 16187 0000249F A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16188 000024A2 06                      	PUSH	ES
 16189 000024A3 1F                      	POP	DS
 16190 000024A4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16191 000024A6 16                      	PUSH	SS
 16192 000024A7 07                      	POP	ES
 16193 000024A8 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16194 000024AB 1E                      	push	ds
 16195 000024AC 56                      	push	si
 16196 000024AD E8BE20                  	call	DEVIOCALL2
 16197 000024B0 5E                      	pop	si
 16198 000024B1 1F                      	pop	ds
 16199                                  ;hkn; SS override
 16200                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16201                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16202 000024B2 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16203 000024B8 75C0                    	jnz	short ioctl_string_errj
 16204 000024BA 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16205                                  					; owner returned is 1-based.
 16206 000024BE E97AE1                  	jmp	SYS_RET_OK
 16207                                  
 16208                                  ;============================================================================
 16209                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16210                                  ;============================================================================
 16211                                  ; 07/08/2018 - Retro DOS v3.0
 16212                                  ; 17/05/2019 - Retro DOS v4.0
 16213                                  
 16214                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16215                                  ;	NAME	DOS_DELETE
 16216                                  
 16217                                  ;
 16218                                  ;	Microsoft Confidential
 16219                                  ;	Copyright (C) Microsoft Corporation 1991
 16220                                  ;	All Rights Reserved.
 16221                                  ;
 16222                                  
 16223                                  ;**	DELETE.ASM - Low level routine for deleting files
 16224                                  ;----------------------------------------------------------------------------
 16225                                  ;		DOS_DELETE
 16226                                  ;		REN_DEL_Check
 16227                                  ;		FastOpen_Delete	       ; DOS 3.3
 16228                                  ;		FastOpen_Update	       ; DOS 3.3
 16229                                  
 16230                                  ;   Revision history:
 16231                                  ;
 16232                                  ;   A000  version 4.00	Jan. 1988
 16233                                  ;   A001  Fastopen Rename fix	April 1989
 16234                                  
 16235                                  ;Installed = TRUE
 16236                                  
 16237                                  ;	i_need	NoSetDir,BYTE
 16238                                  ;	i_need	Creating,BYTE
 16239                                  ;	i_need	DELALL,BYTE
 16240                                  ;	i_need	THISDPB,DWORD
 16241                                  ;	i_need	THISSFT,DWORD
 16242                                  ;	i_need	THISCDS,DWORD
 16243                                  ;	i_need	CURBUF,DWORD
 16244                                  ;	i_need	ATTRIB,BYTE
 16245                                  ;	i_need	SATTRIB,BYTE
 16246                                  ;	i_need	WFP_START,WORD
 16247                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16248                                  ;	i_need	NAME1,BYTE			 ;BN001
 16249                                  ;	i_need	FoundDel,BYTE
 16250                                  ;	i_need	AUXSTACK,BYTE
 16251                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16252                                  ;	i_need	JShare,DWORD
 16253                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16254                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16255                                  ;
 16256                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16257                                  ;
 16258                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16259                                  ;	i_need	DMAADD,DWORD
 16260                                  ;	i_need	RENAMEDMA,BYTE
 16261                                  
 16262                                  ;----------------------------------------------------------------------------
 16263                                  ;
 16264                                  ; Procedure Name : DOS_DELETE
 16265                                  ;
 16266                                  ; Inputs:
 16267                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16268                                  ;		terminated)
 16269                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16270                                  ;		( = -1 if current dir not involved, else
 16271                                  ;		 Points to first char after last "/" of current dir part)
 16272                                  ;	[THISCDS] Points to CDS being used
 16273                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16274                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16275                                  ; Function:
 16276                                  ;	Delete the specified file(s)
 16277                                  ; Outputs:
 16278                                  ;	CARRY CLEAR
 16279                                  ;		OK
 16280                                  ;	CARRY SET
 16281                                  ;	    AX is error code
 16282                                  ;		error_file_not_found
 16283                                  ;			Last element of path not found
 16284                                  ;		error_path_not_found
 16285                                  ;			Bad path (not in curr dir part if present)
 16286                                  ;		error_bad_curr_dir
 16287                                  ;			Bad path in current directory part of path
 16288                                  ;		error_access_denied
 16289                                  ;			Attempt to delete device or directory
 16290                                  ;		***error_sharing_violation***
 16291                                  ;			Deny both access required, generates an INT 24.
 16292                                  ;			This error is NOT returned. The INT 24H is generated,
 16293                                  ;			  and the file is ignored (not deleted). Delete will
 16294                                  ;			  simply continue on looking for more files.
 16295                                  ;			  Carry will NOT be set in this case.
 16296                                  ; DS preserved, others destroyed
 16297                                  ;
 16298                                  ;----------------------------------------------------------------------------
 16299                                  
 16300                                  FILEFOUND   equ 01h
 16301                                  FILEDELETED equ 10h
 16302                                  
 16303                                  
 16304                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16305                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16306                                  
 16307                                  	; 30/01/2024
 16308                                  
 16309                                  DOS_DELETE:
 16310                                  
 16311                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16312                                  ;hkn; appropriately at this point.
 16313                                  
 16314 000024C1 E872ED                  	call	TestNet
 16315 000024C4 7306                    	JNC	short LOCAL_DELETE
 16316                                  
 16317                                  ;IF NOT Installed
 16318                                  ;	transfer NET_DELETE
 16319                                  ;ELSE
 16320                                  	;MOV	AX,(MultNET SHL 8) | 19
 16321                                  	;INT	2FH
 16322                                  	;return
 16323                                  
 16324 000024C6 B81311                  	mov	ax,1113h
 16325 000024C9 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16326                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16327                                  			;		fully-qualified filename in DOS CS
 16328                                  			; SDA CDS pointer -> current directory structure for drive with file
 16329                                  			; Return: CF set on error
 16330 000024CB C3                      	retn
 16331                                  ;ENDIF
 16332                                  
 16333                                  LOCAL_DELETE:
 16334 000024CC C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16335 000024D1 E824EE                  	call	ECritDisk
 16336                                  	;mov	word [CREATING],0E500h
 16337 000024D4 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16338 000024DA 8B36[B205]              	MOV	SI,[WFP_START]
 16339                                  SKPNUL:
 16340 000024DE AC                      	LODSB
 16341 000024DF 08C0                    	OR	AL,AL
 16342 000024E1 75FB                    	JNZ	short SKPNUL		; go to end
 16343 000024E3 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16344 000024E6 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16345 000024EA 7506                    	JNZ	short TEST_QUEST
 16346 000024EC 807C022A                	CMP	BYTE [SI+2],"*"
 16347 000024F0 741F                    	JZ	short CHECK_ATTS
 16348                                  TEST_QUEST:
 16349 000024F2 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16350 000024F5 87FE                    	XCHG	DI,SI
 16351                                  
 16352 000024F7 16                      	push	ss
 16353                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16354 000024F8 07                      	pop	es ; 17/05/2019
 16355                                  
 16356 000024F9 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16357 000024FC B90400                  	MOV	CX,4		; four sets of "??"
 16358 000024FF F3AF                    	REPE	SCASW
 16359 00002501 751C                    	JNZ	short NOT_ALL
 16360 00002503 87FE                    	XCHG	DI,SI
 16361 00002505 AD                      	LODSW
 16362 00002506 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16363 00002509 7514                    	JNZ	short NOT_ALL
 16364 0000250B AD                      	LODSW
 16365 0000250C 3D3F3F                  	CMP	AX,"??"
 16366 0000250F 750E                    	JNZ	short NOT_ALL
 16367                                  CHECK_ATTS:
 16368 00002511 A0[6D05]                	MOV	AL,[SATTRIB]
 16369                                  	;and	al,1Fh
 16370 00002514 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16371                                  					; Look only at hidden bits
 16372                                  	;cmp	al,1Fh
 16373 00002516 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16374                                  					; All must be set
 16375 00002518 7505                    	JNZ	short NOT_ALL
 16376                                  
 16377                                  ; NOTE WARNING DANGER-----
 16378                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16379                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16380                                  
 16381 0000251A C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16382                                  NOT_ALL:
 16383 0000251F C606[4C03]01            	MOV	byte [NoSetDir],1
 16384 00002524 E81919                  	call	GetPathNoSet
 16385 00002527 7312                    	JNC	short Del_found
 16386 00002529 750B                    	JNZ	short _bad_path
 16387 0000252B 08C9                    	OR	CL,CL
 16388 0000252D 7407                    	JZ	short _bad_path
 16389                                  No_file:
 16390 0000252F B80200                  	MOV	AX,error_file_not_found
 16391                                  ErrorReturn:
 16392 00002532 F9                      	STC
 16393                                  	;call	LCritDisk
 16394                                  	;retn
 16395                                  	; 18/12/2022
 16396 00002533 E9DDED                  	jmp	LCritDisk
 16397                                  
 16398                                  _bad_path:
 16399 00002536 B80300                  	MOV	AX,error_path_not_found
 16400 00002539 EBF7                    	JMP	short ErrorReturn
 16401                                  
 16402                                  Del_found:
 16403 0000253B 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16404 0000253D 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16405 00002542 7405                    	JZ	short NOT_DIR
 16406                                  Del_access_err:
 16407 00002544 B80500                  	MOV	AX,error_access_denied
 16408 00002547 EBE9                    	JMP	short ErrorReturn
 16409                                  
 16410                                  NOT_DIR:
 16411 00002549 08E4                    	OR	AH,AH			; Check if device name
 16412 0000254B 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16413                                  
 16414                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16415                                  
 16416                                  DELFILE:
 16417 0000254D 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16418                                  
 16419                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16420                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16421                                  
 16422 00002552 1E                      	PUSH	DS
 16423 00002553 8A26[7F05]              	MOV	AH,[DELALL]
 16424 00002557 C53E[E205]              	LDS	DI,[CURBUF]
 16425                                  	
 16426                                  ;hkn; SS override
 16427 0000255B 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16428 00002561 7509                    	JNZ	short DoDelete		; yes
 16429                                  
 16430 00002563 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16431 00002567 7403                    	JZ	short DoDelete		; not read only
 16432                                  
 16433                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16434                                  Skip_it:
 16435 00002569 1F                      	POP	DS
 16436 0000256A EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16437                                  
 16438                                  DoDelete:
 16439 0000256C E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16440                                  	;JNC	short DEL_SHARE_OK
 16441                                  	;POP	DS
 16442                                  	;JMP	SHORT DELNXT		; Skip it
 16443                                  	; 30/01/2024
 16444 0000256F 72F8                    	jc	short Skip_it
 16445                                  
 16446                                  DEL_SHARE_OK:
 16447                                  	; 17/05/2019 - Retro DOS v4.0
 16448                                  	; MSDOS 6.0
 16449                                  	;test	byte [di+5],40h
 16450 00002571 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16451                                  					;LB. if already dirty		  ;AN000;
 16452 00002575 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16453 00002577 E8C734                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16454                                  	;or	byte [di+5],40h
 16455 0000257A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16456                                  yesdirty:
 16457 0000257E 8827                    	mov	[bx],ah 
 16458                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16459 00002580 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16460 00002582 1F                      	POP	DS
 16461 00002583 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16462                                  
 16463 00002588 83FB02                  	CMP	BX,2
 16464 0000258B 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16465                                  	;cmp	bx,[es:bp+0Dh]
 16466 0000258D 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16467 00002591 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16468                                  
 16469 00002593 E82528                  	call	RELEASE 		; Free file data
 16470 00002596 7252                    	JC	short No_fileJ
 16471                                  
 16472                                  ; DOS 3.3  FastOpen
 16473                                  
 16474 00002598 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16475                                  
 16476                                  ; DOS 3.3  FastOpen
 16477                                  
 16478                                  DELNXT:
 16479 0000259B C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16480 0000259F E80B18                  	call	GETENTRY		; Registers need to be reset
 16481 000025A2 7246                    	JC	short No_fileJ
 16482 000025A4 E84617                  	call	NEXTENT
 16483 000025A7 73A4                    	JNC	short DELFILE
 16484 000025A9 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16485                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16486                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16487                                  	;;mov	al,[es:bp+0]
 16488                                  	; 15/12/2022
 16489 000025AD 268A4600                	MOV	AL,[ES:BP]
 16490 000025B1 E88833                  	call	FLUSHBUF
 16491 000025B4 7234                    	JC	short No_fileJ
 16492                                  ;
 16493                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16494                                  ;
 16495                                  ;   not found not deleted		file not found
 16496                                  ;   not found	  deleted		*** impossible ***
 16497                                  ;	found not deleted		access denied (read-only)
 16498                                  ;	found	  deleted		no error
 16499                                  ;
 16500 000025B6 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16501 000025BB 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16502                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16503                                  ; and to force the DOS to issue a media check.
 16504 000025BD F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16505 000025C2 741C                    	jz	short No_Set_Flag
 16506 000025C4 50                      	PUSH	AX
 16507 000025C5 06                      	PUSH	ES
 16508 000025C6 57                      	PUSH	DI
 16509 000025C7 C43E[A205]              	LES	DI,[THISCDS]
 16510 000025CB 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16511 000025CE 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16512 000025D1 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16513                                  	
 16514                                  	; MSDOS 6.0
 16515 000025D5 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16516 000025D7 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16517                                  	 
 16518 000025DA E8E62F                  	call	FATREAD_CDS		; force media check
 16519 000025DD 5F                      	POP	DI
 16520 000025DE 07                      	POP	ES
 16521 000025DF 58                      	POP	AX
 16522                                  No_Set_Flag:
 16523                                  	;call	LCritDisk		; carry is clear
 16524                                  	;retn
 16525                                  	; 18/12/2022
 16526 000025E0 E930ED                  	jmp	LCritDisk
 16527                                  DelError:
 16528 000025E3 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16529 000025E8 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16530                                  No_fileJ:
 16531 000025EA E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16532                                  Del_access_errJ:
 16533 000025ED E954FF                  	JMP	Del_access_err ; 10/08/2018
 16534                                  
 16535                                  ; 08/08/2018 - Retro DOS v3.0
 16536                                  
 16537                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16538                                  ;---------------------------------------------------------------------------
 16539                                  ; Procedure Name : REN_DEL_Check
 16540                                  ;
 16541                                  ; Inputs:
 16542                                  ;	[THISDPB] set
 16543                                  ;	[CURBUF+2]:BX points to entry
 16544                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16545                                  ;	[WFP_Start] points to name
 16546                                  ; Function:
 16547                                  ;	Check for Exclusive access on given file.
 16548                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16549                                  ; Outputs:
 16550                                  ;	ES:BP = [THISDPB]
 16551                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16552                                  ;		last element will be loaded from the directory entry.  This is
 16553                                  ;		so the name given to the sharer doesn't have any meta chars in
 16554                                  ;		it.
 16555                                  ;	Carry set if sharing violation, INT 24H generated
 16556                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16557                                  ;		This is because input AX is preserved.
 16558                                  ;		Caller must set the error if needed.
 16559                                  ;	Carry clear
 16560                                  ;		OK
 16561                                  ; AX,DS,BX,SI,DI preserved
 16562                                  ;---------------------------------------------------------------------------
 16563                                  
 16564                                  REN_DEL_Check:
 16565                                  
 16566 000025F0 1E                      	PUSH	DS
 16567 000025F1 57                      	PUSH	DI
 16568 000025F2 50                      	PUSH	AX
 16569 000025F3 53                      	PUSH	BX
 16570 000025F4 56                      	PUSH	SI		; Save CURBUF pointers
 16571                                  	
 16572 000025F5 16                      	push	ss
 16573 000025F6 07                      	pop	es
 16574                                  
 16575                                  ;hkn; context ES will assume ES to DOSDATA
 16576                                  ;hkn; ASSUME	ES:DOSGROUP
 16577                                  
 16578                                  ;hkn; SS override
 16579 000025F7 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16580 000025FC 89DE                    	MOV	SI,BX
 16581                                  
 16582                                  ;hkn; SS override
 16583 000025FE 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16584 00002603 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16585                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16586                                  	; 31/01/2024
 16587 00002605 43                      	inc	bx
 16588 00002606 43                      	inc	bx
 16589 00002607 E8CCEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16590 0000260A 49                      	DEC	CX		; Don't include nul in count
 16591 0000260B 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16592 0000260D E83046                  	call	SkipBack	; Back up one element
 16593 00002610 47                      	INC	DI		; Point to start of last element
 16594                                  
 16595                                  	; 17/05/2019 - Retro DOS v4.0
 16596                                  ;hkn; SS override
 16597                                  	; MSDOS 6.0
 16598 00002611 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16599                                  	;
 16600 00002616 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16601 00002619 5E                      	POP	SI		; Get back entry pointers
 16602 0000261A 5B                      	POP	BX
 16603 0000261B 53                      	PUSH	BX
 16604 0000261C 56                      	PUSH	SI		; Back on stack
 16605                                  	
 16606 0000261D 16                      	push	ss
 16607 0000261E 1F                      	pop	ds
 16608                                  
 16609                                  ;hkn; context DS will assume ES to DOSDATA
 16610                                  ;hkn; ASSUME	DS:DOSGROUP
 16611                                  
 16612                                  ; Close the file if possible by us.
 16613                                  ;
 16614                                  ;if installed
 16615 0000261F FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16616                                  ;else
 16617                                  ;	Call	ShCloseFile
 16618                                  ;endif
 16619 00002623 8C1E[A005]              	MOV	[THISSFT+2],DS
 16620                                  
 16621                                  ;hkn; AUXSTACK is in DOSDATA
 16622 00002627 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16623                                  				; Scratch space
 16624 0000262D 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16625 0000262F E81C24                  	call	DOOPEN		; Fill in SFT for share check
 16626 00002632 C43E[9E05]              	LES	DI,[THISSFT]
 16627                                  	;mov	word [es:di+2],10h
 16628 00002636 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16629                                  				; requires exclusive access
 16630                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16631 0000263C 26C7050100              	mov	word [ES:DI],1
 16632 00002641 E8204C                  	call	ShareEnter
 16633 00002644 720D                    	jc	short CheckDone
 16634 00002646 C43E[9E05]              	LES	DI,[THISSFT]
 16635                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16636 0000264A 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16637                                  	
 16638 0000264F E80D4C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16639 00002652 F8                      	CLC
 16640                                  CheckDone:
 16641 00002653 C42E[8A05]              	LES	BP,[THISDPB]
 16642 00002657 5E                      	POP	SI
 16643 00002658 5B                      	POP	BX
 16644 00002659 58                      	POP	AX
 16645 0000265A 5F                      	POP	DI
 16646 0000265B 1F                      	POP	DS
 16647 0000265C C3                      	retn
 16648                                  
 16649                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16650                                  ;---------------------------------------------------------------------------
 16651                                  ; Procedure Name : FastOpen_Delete
 16652                                  ; Inputs:
 16653                                  ;	None
 16654                                  ; Function:
 16655                                  ;	Call FastOpen to delete the dir info.
 16656                                  ; Outputs:
 16657                                  ;	None
 16658                                  ;---------------------------------------------------------------------------
 16659                                  
 16660                                  	; 31/01/2024
 16661                                  
 16662                                  FastOpen_Delete:
 16663 0000265D 9C                      	PUSHF			; save flag
 16664 0000265E 56                      	PUSH	SI		; save registers
 16665 0000265F 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16666 00002660 53                      	PUSH	BX
 16667 00002661 50                      	PUSH	AX
 16668                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16669                                  ;hkn; SS override
 16670                                  	; 17/05/2019 - Retro DOS v4.0
 16671                                  	; MSDOS 6.0
 16672 00002662 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16673                                  	
 16674 00002667 B003                    	MOV	AL,FONC_delete	; al = 3
 16675                                  
 16676                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16677                                  %if 0 
 16678                                  fastinvoke:
 16679                                  ;hkn; FastTable is in DOSDATA
 16680                                  	MOV	BX,FastTable+2
 16681                                  	CALL	far [BX]	; call fastopen
 16682                                  	POP	AX		; restore registers
 16683                                  	POP	BX
 16684                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16685                                  	POP	SI
 16686                                  	POPF			; restore flag
 16687                                  	retn
 16688                                  %else
 16689 00002669 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16690                                  %endif
 16691                                  
 16692                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16693                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16694                                  
 16695                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16696                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16697                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16698                                  
 16699                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16700                                  ;---------------------------------------------------------------------------
 16701                                  ; PROCEDURE Name : FastOpen_Rename
 16702                                  ;
 16703                                  ; Inputs:
 16704                                  ;	 REN_WFP   = Path Name
 16705                                  ;	 NAME1	   = New Name
 16706                                  ; Function:
 16707                                  ;	Call FastOpen to rename the dir entry in the cache
 16708                                  ; Outputs:
 16709                                  ;	None
 16710                                  ;---------------------------------------------------------------------------
 16711                                  
 16712                                  FastOpen_Rename:
 16713                                  	; 17/05/2019 - Retro DOS v4.0
 16714                                  	; 08/08/2018 - Retro DOS v3.0
 16715                                  	; MSDOS 6.0
 16716 0000266B 9C                      	PUSHF			;AN001 save flag
 16717 0000266C 56                      	PUSH	SI		;AN001 save registers
 16718 0000266D 57                      	PUSH	DI		;AN001
 16719 0000266E 53                      	PUSH	BX		;AN001
 16720 0000266F 50                      	PUSH	AX		;AN001
 16721                                  	;
 16722                                  ;hkn; SS override
 16723 00002670 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16724                                  
 16725                                  ;hkn; NAME1 is in DOSDATA
 16726 00002675 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16727                                  	;mov	al,6
 16728 00002678 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16729                                  
 16730                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16731                                  	
 16732                                  ;hkn; FastTable is in DOSDATA
 16733 0000267A BB[320D]                	MOV	BX,FastTable+2
 16734 0000267D FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16735                                  	
 16736 0000267F 58                      	POP	AX		; restore registers  ;AN001
 16737 00002680 5B                      	POP	BX				     ;AN001
 16738 00002681 5F                      	POP	DI				     ;AN001
 16739 00002682 5E                      	POP	SI				     ;AN001
 16740 00002683 9D                      	POPF			; restore flag	     ;AN001
 16741 00002684 C3                      	retn					     ;AN001
 16742                                  
 16743                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16744                                  ;---------------------------------------------------------------------------
 16745                                  ; Procedure Name : FastOpen_Update
 16746                                  ;
 16747                                  ; Inputs:
 16748                                  ;	DL     drive number (A=0,B=1,,,)
 16749                                  ;	CX     first cluster #
 16750                                  ;	AH     0 updates dir entry
 16751                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16752                                  ;	ES:DI  directory entry
 16753                                  ; Function:
 16754                                  ;	Call FastOpen to update the dir info.
 16755                                  ; Outputs:
 16756                                  ;	None
 16757                                  ;---------------------------------------------------------------------------
 16758                                  
 16759                                  FastOpen_Update:
 16760 00002685 9C                      	PUSHF			; save flag
 16761 00002686 56                      	PUSH	SI
 16762 00002687 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16763 00002688 53                      	PUSH	BX		; save regs
 16764 00002689 50                      	PUSH	AX
 16765 0000268A B004                    	MOV	AL,FONC_update	; al = 4
 16766 0000268C EBEC                    	JMP	short fastinvoke
 16767                                  
 16768                                  	; 17/05/2019
 16769                                  
 16770                                  	; MSDOS 6.0
 16771                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16772                                  ;---------------------------------------------------------------------------
 16773                                  Fast_Dispatch:
 16774                                  ;hkn; FastTable is in DOSDATA
 16775 0000268E BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16776                                  ;hkn; use SS override
 16777 00002691 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16778 00002694 C3                      	retn
 16779                                  
 16780                                  ;============================================================================
 16781                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16782                                  ;============================================================================
 16783                                  ; 08/08/2018 - Retro DOS v3.0
 16784                                  ; 17/05/2019 - Retro DOS v4.0
 16785                                  
 16786                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16787                                  ;	NAME	DOS_RENAME
 16788                                  
 16789                                  ;**	Low level routine for renaming files
 16790                                  ;----------------------------------------------------------------------------
 16791                                  ;	DOS_RENAME
 16792                                  ;
 16793                                  ;	Modification history:
 16794                                  ;
 16795                                  ;	    Created: ARR 30 March 1983
 16796                                  
 16797                                  ;----------------------------------------------------------------------------
 16798                                  ;
 16799                                  ; Procedure Name : DOS_RENAME
 16800                                  ;
 16801                                  ; Inputs:
 16802                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16803                                  ;		chars, NUL terminated)
 16804                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16805                                  ;		( = -1 if current dir not involved, else
 16806                                  ;		 Points to first char after last "/" of current dir part)
 16807                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16808                                  ;		chars, NUL terminated)
 16809                                  ;	[THISCDS] Points to CDS being used
 16810                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16811                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16812                                  ; Function:
 16813                                  ;	Rename the specified file(s)
 16814                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16815                                  ; Outputs:
 16816                                  ;	CARRY CLEAR
 16817                                  ;	    OK
 16818                                  ;	CARRY SET
 16819                                  ;	    AX is error code
 16820                                  ;		error_file_not_found
 16821                                  ;			No match for source, or dest path invalid
 16822                                  ;		error_not_same_device
 16823                                  ;			Source and dest are on different devices
 16824                                  ;		error_access_denied
 16825                                  ;			Directory specified (not simple rename),
 16826                                  ;			Device name given, Destination exists.
 16827                                  ;			NOTE: In third case some renames may have
 16828                                  ;			 been done if metas.
 16829                                  ;		error_path_not_found
 16830                                  ;			Bad path (not in curr dir part if present)
 16831                                  ;			SOURCE ONLY
 16832                                  ;		error_bad_curr_dir
 16833                                  ;			Bad path in current directory part of path
 16834                                  ;			SOURCE ONLY
 16835                                  ;		error_sharing_violation
 16836                                  ;			Deny both access required, generates an INT 24.
 16837                                  ; DS preserved, others destroyed
 16838                                  ;
 16839                                  ;----------------------------------------------------------------------------
 16840                                  
 16841                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16842                                  
 16843                                  	; 31/01/2024
 16844                                  
 16845                                  DOS_RENAME:
 16846                                  
 16847                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16848                                  ;hkn; at this point to DOSDATA.
 16849                                  
 16850 00002695 E89EEB                  	call	TestNet
 16851 00002698 7306                    	JNC	short LOCAL_RENAME
 16852                                  
 16853                                  ;IF NOT Installed
 16854                                  ;	transfer NET_RENAME
 16855                                  ;ELSE
 16856                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16857                                  	;INT	2FH
 16858                                  	;return
 16859                                  
 16860 0000269A B81111                  	mov     ax, 1111h
 16861 0000269D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16862                                  			; SS = DS = DOS CS, 
 16863                                  			; SDA first filename pointer = offset of fully-qualified old name
 16864                                  			; SDA CDS pointer -> current directory
 16865                                  			; Return: CF set on error
 16866 0000269F C3                      	retn
 16867                                  ;ENDIF
 16868                                  
 16869                                  LOCAL_RENAME:
 16870 000026A0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16871 000026A5 8B36[B205]              	MOV	SI,[WFP_START]
 16872 000026A9 8B3E[B405]              	MOV	DI,[REN_WFP]
 16873 000026AD 8A04                    	MOV	AL,[SI]
 16874 000026AF 8A25                    	MOV	AH,[DI]
 16875 000026B1 0D2020                  	OR	AX,2020H		; Lower case
 16876 000026B4 38E0                    	CMP	AL,AH
 16877 000026B6 7405                    	JZ	short SAMEDRV
 16878 000026B8 B81100                  	MOV	AX,error_not_same_device ; 11h
 16879 000026BB F9                      	STC
 16880 000026BC C3                      	retn
 16881                                  
 16882                                  SAMEDRV:
 16883 000026BD FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16884 000026C1 FF36[2C03]              	PUSH	WORD [DMAADD]
 16885 000026C5 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16886                                  
 16887                                  ;hkn; RENAMEDMA is in DOSDATA
 16888 000026C9 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16889 000026CF C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16890 000026D4 E821EC                  	call	ECritDisk
 16891 000026D7 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16892                                  					;    points to entry
 16893 000026DA 7314                    	JNC	short Check_Dev
 16894 000026DC 83F812                  	CMP	AX,error_no_more_files ; 12h
 16895 000026DF 7503                    	JNZ	short GOTERR
 16896 000026E1 B80200                  	MOV	AX,error_file_not_found ; 2
 16897                                  GOTERR:
 16898 000026E4 F9                      	STC
 16899                                  RENAME_POP:
 16900 000026E5 8F06[2C03]              	POP	WORD [DMAADD]
 16901 000026E9 8F06[2E03]              	POP	WORD [DMAADD+2]
 16902                                  	;call	LCritDisk
 16903                                  	;retn
 16904                                  	; 16/12/2022
 16905 000026ED E923EC                  	jmp	LCritDisk
 16906                                  
 16907                                  Check_Dev:
 16908                                  	; 17/05/2019 - Retro DOS v4.0
 16909                                  	;mov	ax,5
 16910 000026F0 B80500                  	MOV	AX,error_access_denied	; Assume error
 16911                                  	
 16912                                  	; MSDOS 6.0
 16913 000026F3 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16914 000026F4 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16915                                  	;add	si,21
 16916 000026F8 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16917                                  	;test	byte [si+11],10h
 16918 000026FB F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16919 000026FF 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16920 00002701 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16921 00002705 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16922                                  notdir:
 16923 00002708 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16924 00002709 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16925                                  
 16926                                  	; MSDOS 3.3 & MSDOS 6.0
 16927 0000270B 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16928 00002710 75D2                    	JNZ	short GOTERR
 16929                                  
 16930                                  ; At this point a source has been found. There is search continuation info (a
 16931                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16932                                  ; directory entry found.
 16933                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16934                                  ; throughout the RENAME since it is known at this point that the source and
 16935                                  ; destination are both on the same device.
 16936                                  ; [SATTRIB] is also set.
 16937                                  
 16938 00002712 89DE                    	MOV	SI,BX
 16939                                  	;add	si,26
 16940 00002714 83C61A                  	ADD	SI,dir_entry.dir_first
 16941 00002717 E8D6FE                  	call	REN_DEL_Check
 16942 0000271A 7305                    	JNC	short REN_OK1
 16943 0000271C B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16944 0000271F EBC4                    	JMP	short RENAME_POP
 16945                                  
 16946                                  ;------------------------------------------------------------------------------
 16947                                  ; Check if the source is a file or directory. If file, delete the entry
 16948                                  ; from the Fastopen cache. If directory, rename it later
 16949                                  ;------------------------------------------------------------------------------
 16950                                  
 16951                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16952                                  	; MSDOS 6.0
 16953                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16954                                  	;PUSH	SI
 16955 00002721 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16956                                  	;add	si,21
 16957 00002725 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16958                                  	;test	byte [si+11],10h
 16959 00002728 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16960                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16961 0000272C 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 16962                                  	;POP	SI			;BN00X
 16963                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 16964                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 16965                                  	;POP	SI
 16966                                  
 16967                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16968 0000272E E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16969                                  SWAP_SOURCE:
 16970                                  	; MSDOS 3.3
 16971                                  	;MOV	SI,[REN_WFP]
 16972                                  	;MOV	[WFP_START],SI
 16973                                  	; MSDOS 6.0
 16974 00002731 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16975 00002734 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16976 00002738 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16977 0000273C A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16978                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16979 0000273F C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16980                                  	;mov	word [CREATING],0E5FFh
 16981 00002745 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16982                                  					; A rename is like a CREATE_NEW as far
 16983                                  					; as the destination is concerned.
 16984 0000274B E8F216                  	call	GetPathNoSet
 16985                                  
 16986                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16987                                  ;   since no files match the destination name. If it fails for any other
 16988                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16989                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16990                                  ;   if the rename should fail because we haven't built an explicit name by
 16991                                  ;   substituting for the meta chars in it. In this case the destination file
 16992                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16993                                  ;   in the directory entry part.
 16994                                  	
 16995 0000274E 7223                    	JC	short NODEST
 16996                                  	
 16997                                  	; MSDOS 6.0
 16998                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16999                                  	; !! MSDOS 3.3 !!
 17000                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17001                                  
 17002 00002750 08E4                    	OR	AH,AH			; Device?
 17003 00002752 792C                    	JNS	short SAVEDEST		; No, continue
 17004                                  BAD_ACC:
 17005 00002754 B80500                  	MOV	AX,error_access_denied
 17006 00002757 F9                      	STC
 17007                                  RENAME_CLEAN:
 17008 00002758 9C                      	PUSHF				; Save carry state
 17009 00002759 50                      	PUSH	AX			; and error code (if carry set)
 17010 0000275A A0[7605]                	MOV	AL,[THISDRV]
 17011 0000275D E8DC31                  	call	FLUSHBUF
 17012 00002760 58                      	POP	AX
 17013 00002761 803E[4A03]00            	CMP	byte [FAILERR],0
 17014 00002766 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17015 00002768 9D                      	POPF
 17016 00002769 E979FF                  	JMP	RENAME_POP
 17017                                  
 17018                                  BAD_ERR:
 17019 0000276C 58                      	POP	AX			; Saved flags
 17020                                  	; 16/12/202
 17021                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17022                                  BAD_PATH: ; *
 17023 0000276D B80300                  	MOV	AX,error_path_not_found
 17024 00002770 E971FF                  	JMP	GOTERR
 17025                                  
 17026                                  NODEST:
 17027 00002773 75F8                    	JNZ	short BAD_PATH
 17028 00002775 803E[4A03]00            	CMP	byte [FAILERR],0
 17029 0000277A 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17030                                  					; because user FAILed on I 24
 17031                                  	; 14/11/2022
 17032 0000277C 08C9                    	OR	CL,CL
 17033                                  	;JNZ	short SAVEDEST
 17034                                  	; 17/05/2019
 17035 0000277E 74ED                    	jz	short BAD_PATH ; *
 17036                                  ;BAD_PATH: ; *
 17037                                  ;	MOV	AX,error_path_not_found
 17038                                  ;	;STC
 17039                                  ;	;JMP	RENAME_POP
 17040                                  ;	; 17/05/2019
 17041                                  ;	jmp	GOTERR 
 17042                                  
 17043                                  ; 16/12/2022
 17044                                  %if 0
 17045                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17046                                  	or	cl,cl
 17047                                  	jnz	short SAVEDEST
 17048                                  	;jz	short BAD_PATH ; *
 17049                                  BAD_PATH: ; *
 17050                                  	;mov	ax,3
 17051                                  	mov	ax,error_path_not_found
 17052                                  	stc
 17053                                  	jmp	RENAME_POP
 17054                                  %endif
 17055                                  
 17056                                  SAVEDEST:
 17057 00002780 16                      	push	ss
 17058 00002781 07                      	pop	es
 17059                                  
 17060                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17061 00002782 BF[5705]                	MOV	DI,NAME2
 17062 00002785 BE[4B05]                	MOV	SI,NAME1
 17063                                  
 17064 00002788 B90B00                  	MOV	CX,11
 17065 0000278B F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17066 0000278D A1[C205]                	MOV	AX,[DIRSTART]
 17067 00002790 A3[6405]                	MOV	[DESTSTART],AX
 17068                                  BUILDDEST:
 17069                                  	; 31/01/2024
 17070                                  	;push	ss
 17071                                  	;pop	es			; needed due to JMP BUILDDEST below
 17072                                  
 17073                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17074 00002793 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17075 00002796 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17076 00002799 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17077                                  
 17078 0000279C B90B00                  	MOV	CX,11
 17079                                  
 17080                                  	; 17/05/2019 - Retro DOS v4.0
 17081                                  	
 17082                                  	; MSDOS 6.0
 17083 0000279F E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17084                                  
 17085                                  	; MSDOS 3.3
 17086                                  
 17087                                  ; 08/08/2018 - Retro DOS v3.0
 17088                                  ; MSDOS 6.0 
 17089                                  ;---------------------------------------------------------------------------
 17090                                  ;Procedure: NEW_RENAME
 17091                                  ;
 17092                                  ;Input: DS:SI -> raw string with ?
 17093                                  ;	ES:DI -> destination string
 17094                                  ;	DS:BX -> source string
 17095                                  ;Function: replace ? chars of raw string with chars in source string and
 17096                                  ;	   put in destination string
 17097                                  ;Output: ES:DI-> new string
 17098                                  ;---------------------------------------------------------------------------
 17099                                  ;
 17100                                  ;NEW_RENAME:
 17101                                  ;NEWNAM:
 17102                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17103                                  ;	LODSB
 17104                                  ;	CMP	AL,"?"
 17105                                  ;	JNZ	short NOCHG
 17106                                  ;	MOV	AL,[BX] 		; Get replace char
 17107                                  ;NOCHG:
 17108                                  ;	STOSB
 17109                                  ;	INC	BX			; Next replace char
 17110                                  ;	LOOP	NEWNAM
 17111                                  ;	; MSDOS 6.0
 17112                                  ;	;retn
 17113                                  
 17114                                  	; MSDOS 3.3 & MSDOS 6.0
 17115                                  	;mov	byte [ATTRIB],16h
 17116 000027A2 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17117 000027A7 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17118 000027AC E82F19                  	call	DEVNAME 		; Check if we built a device name
 17119 000027AF 73A3                    	JNC	short BAD_ACC
 17120 000027B1 8B1E[6405]              	MOV	BX,[DESTSTART]
 17121 000027B5 C42E[8A05]              	LES	BP,[THISDPB]
 17122 000027B9 E82116                  	call	SETDIRSRCH		; Reset search to start of dir
 17123 000027BC 7296                    	JC	short BAD_ACC 		; Screw up
 17124 000027BE E8E214                  	call	FINDENTRY		; See if new name already exists
 17125 000027C1 7391                    	JNC	short BAD_ACC 		; Error if found
 17126 000027C3 803E[4A03]00            	CMP	byte [FAILERR],0
 17127 000027C8 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17128 000027CA A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17129 000027CD 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17130 000027D1 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17131                                  
 17132                                  	;mov	al,[RENAMEDMA+32]
 17133 000027D3 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17134 000027D6 A810                    	TEST	AL,attr_directory ; 10h
 17135 000027D8 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17136                                  					; otherwise the . and .. entries get
 17137                                  					; wiped.
 17138 000027DA A2[6B05]                	MOV	[ATTRIB],AL
 17139 000027DD 8C1E[A005]              	MOV	[THISSFT+2],DS
 17140                                  
 17141                                  ;hkn; AUXSTACK is in DOSDATA
 17142                                  	;mov	si,RENAMEDMA+145h
 17143 000027E1 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17144 000027E4 8936[9E05]              	MOV	[THISSFT],SI
 17145                                  	;mov	word [SI+2],2
 17146 000027E8 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17147 000027ED 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17148 000027EF E8C520                  	call	RENAME_MAKE		; This is in mknode
 17149 000027F2 7303                    	JNC	short GOT_DEST
 17150                                  BAD_ACCJ:
 17151 000027F4 E95DFF                  	JMP	BAD_ACC
 17152                                  
 17153                                  GOT_DEST:
 17154 000027F7 53                      	push	bx
 17155 000027F8 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17156 000027FC E8604A                  	call	ShareEnd		; we need to remove it.
 17157 000027FF 5B                      	pop	bx
 17158                                  
 17159                                  ; A zero length entry with the correct new name has now been made at
 17160                                  ;   [CURBUF+2]:BX.
 17161                                  
 17162 00002800 C43E[E205]              	LES	DI,[CURBUF]
 17163                                  
 17164                                  	; MSDOS 6.0
 17165                                  	;test	byte [es:di+5],40h
 17166 00002804 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17167                                  					;LB. if already dirty		  ;AN000;
 17168 00002809 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17169 0000280B E83332                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17170                                  	;or	byte [es:di+5],40h
 17171 0000280E 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17172                                  yesdirty1:
 17173 00002813 89DF                    	MOV	DI,BX
 17174                                  	;add	di,11
 17175 00002815 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17176                                  
 17177                                  ;hkn; RENAMEDMA is in DOSDATA
 17178                                  	;mov	si,[RENAMEDMA+32]
 17179 00002818 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17180                                  	;mov	cx,21
 17181 0000281B B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17182 0000281E F3A4                    	REP	MOVSB
 17183 00002820 E87A00                  	CALL	GET_SOURCE
 17184 00002823 7275                    	JC	short RENAME_OVER
 17185 00002825 89DF                    	MOV	DI,BX
 17186 00002827 8E06[E405]              	MOV	ES,[CURBUF+2]
 17187 0000282B B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17188 0000282D AA                      	STOSB				; "free" the source
 17189 0000282E EB13                    	JMP	SHORT DIRTY_IT
 17190                                  
 17191                                  SIMPLE_RENAME:
 17192 00002830 E86A00                  	CALL	GET_SOURCE		; Get the source back
 17193 00002833 7265                    	JC	short RENAME_OVER
 17194 00002835 89DF                    	MOV	DI,BX
 17195 00002837 8E06[E405]              	MOV	ES,[CURBUF+2]
 17196                                  
 17197                                  ;hkn; NAME1 is in DOSDATA
 17198 0000283B BE[4B05]                	MOV	SI,NAME1		; New Name
 17199 0000283E B90B00                  	MOV	CX,11
 17200 00002841 F3A4                    	REP	MOVSB
 17201                                  DIRTY_IT:
 17202 00002843 8B3E[E205]              	MOV	DI,[CURBUF]
 17203                                  
 17204                                  	; MSDOS 6.0
 17205 00002847 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17206                                  					;LB. if already dirty		  ;AN000;
 17207 0000284C 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17208 0000284E E8F031                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17209                                  	
 17210 00002851 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17211                                  
 17212                                  ;------------------------------------------------------------------------------
 17213                                  ; Check if the source is a directory of file. If directory rename it to the
 17214                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17215                                  ; previously deleted.
 17216                                  ;------------------------------------------------------------------------------
 17217                                  
 17218                                  yesdirty2:
 17219                                  	; MSDOS 6.0
 17220 00002856 56                      	PUSH	SI
 17221 00002857 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17222 0000285B 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17223 0000285E F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17224 00002862 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17225 00002864 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17226                                  	; 31/01/2024
 17227                                  	;POP	SI
 17228                                  	;JMP	SHORT NOT_DIRTY1
 17229                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17230 00002867 5E                      	POP	SI
 17231                                  NOT_DIRTY1:				;;BN00X
 17232                                  NEXT_SOURCE:
 17233                                  ;hkn; RENAMEDMA is in DOSDATA
 17234 00002868 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17235                                  
 17236                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17237                                  ; to enter it before going to RENAME_Next.
 17238                                  
 17239 0000286B E88AEA                  	call	ECritDisk
 17240 0000286E C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17241                                  				  ;  to FF when we made the prev new file).
 17242 00002873 E89405                  	call	RENAME_NEXT
 17243                                  
 17244                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17245                                  ; we were before.
 17246                                  
 17247 00002876 7222                    	JC	short RENAME_OVER
 17248                                  
 17249                                  	;lea	si,[bx+26]
 17250 00002878 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17251 0000287B E872FD                  	call	REN_DEL_Check
 17252 0000287E 7306                    	JNC	short REN_OK2
 17253 00002880 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17254                                  jmp_to_rename_clean: ; 28/12/2022
 17255 00002883 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17256                                  
 17257                                  ;------------------------------------------------------------------------------
 17258                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17259                                  ; if directory, rename directory name in the Fastopen cache.
 17260                                  ;-----------------------------------------------------------------------------
 17261                                  
 17262                                  REN_OK2:
 17263                                  	; MSDOS 6.0
 17264                                  	;mov	al,[RERNAMEDMA+32]
 17265 00002886 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17266                                  	;test	al,10h
 17267 00002889 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17268 0000288B 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17269                                  	
 17270                                  	; MSDOS 3.3 & MSDOS 6.0
 17271 0000288D E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17272                                  jmp_to_builddest: ; 28/12/2022
 17273                                  	; 31/01/2024
 17274 00002890 16                      	push	ss
 17275 00002891 07                      	pop	es
 17276 00002892 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17277                                  
 17278                                  	; MSDOS 6.0
 17279                                  Ren_Directory:
 17280 00002895 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17281                                  	;JMP	BUILDDEST
 17282                                  	; 28/12/2022
 17283 00002898 EBF6                    	jmp	short jmp_to_builddest
 17284                                  
 17285                                  RENAME_OVER:
 17286 0000289A F8                      	CLC
 17287                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17288                                  	; 28/12/2022
 17289 0000289B EBE6                    	jmp	short jmp_to_rename_clean
 17290                                  
 17291                                  ;----------------------------------------------------------------------------
 17292                                  ; Procedure: GET_SOURCE
 17293                                  ;
 17294                                  ; Inputs:
 17295                                  ;	RENAMEDMA has source info
 17296                                  ; Function:
 17297                                  ;	Re-find the source
 17298                                  ; Output:
 17299                                  ;	[CURBUF] set
 17300                                  ;	[CURBUF+2]:BX points to entry
 17301                                  ;	Carry set if error (currently user FAILed to I 24)
 17302                                  ; DS preserved, others destroyed
 17303                                  ;----------------------------------------------------------------------------
 17304                                  
 17305                                  GET_SOURCE:
 17306 0000289D 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17307 000028A1 C42E[8A05]              	LES	BP,[THISDPB]
 17308 000028A5 E83515                  	call	SETDIRSRCH
 17309 000028A8 7214                    	JC	short gs_ret_label	; retc
 17310 000028AA E81018                  	call	STARTSRCH
 17311 000028AD A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17312                                  	;call	GETENT
 17313                                  	; 18/12/2022
 17314 000028B0 E9FD14                  	jmp	GETENT
 17315                                  ;gs_ret_label:
 17316                                  	;retn
 17317                                  
 17318                                  ; MSDOS 6.0 
 17319                                  ;---------------------------------------------------------------------------
 17320                                  ;Procedure: NEW_RENAME
 17321                                  ;
 17322                                  ;Input: DS:SI -> raw string with ?
 17323                                  ;	ES:DI -> destination string
 17324                                  ;	DS:BX -> source string
 17325                                  ;Function: replace ? chars of raw string with chars in source string and
 17326                                  ;	   put in destination string
 17327                                  ;Output: ES:DI-> new string
 17328                                  ;---------------------------------------------------------------------------
 17329                                  
 17330                                  NEW_RENAME:
 17331                                  	; 17/05/2019 - Retro DOS v4.0
 17332                                  NEWNAM:
 17333                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17334 000028B3 AC                      	LODSB
 17335 000028B4 3C3F                    	CMP	AL,"?" ; 3Fh
 17336 000028B6 7502                    	JNZ	short NOCHG
 17337 000028B8 8A07                    	MOV	AL,[BX] 		; Get replace char
 17338                                  NOCHG:
 17339 000028BA AA                      	STOSB
 17340 000028BB 43                      	INC	BX			; Next replace char
 17341 000028BC E2F5                    	LOOP	NEWNAM
 17342                                  	; MSDOS 6.0
 17343                                  gs_ret_label:	; 18/12/2022
 17344 000028BE C3                      	retn
 17345                                  
 17346                                  ;============================================================================
 17347                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17348                                  ;============================================================================
 17349                                  ; 08/08/2018 - Retro DOS v3.0
 17350                                  ; 17/05/2019 - Retro DOS v4.0
 17351                                  
 17352                                  ;**	Low level routines for returning file information and setting file
 17353                                  ;	attributes
 17354                                  ;
 17355                                  ;	GET_FILE_INFO
 17356                                  ;	SET_FILE_ATTRIBUTE
 17357                                  ;
 17358                                  ;	Modification history:
 17359                                  ;
 17360                                  ;	    Created: ARR 30 March 1983
 17361                                  ;
 17362                                  ;	M025: Return access_denied if attempting to set
 17363                                  ;	      attribute of root directory.
 17364                                  ;
 17365                                  
 17366                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17367                                  
 17368                                  ;---------------------------------------------------------------------------
 17369                                  ; Procedure Name : GET_FILE_INFO
 17370                                  ;
 17371                                  ; Inputs:
 17372                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17373                                  ;		terminated)
 17374                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17375                                  ;		( = -1 if current dir not involved, else
 17376                                  ;		 Points to first char after last "/" of current dir part)
 17377                                  ;	[THISCDS] Points to CDS being used
 17378                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17379                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17380                                  ; Function:
 17381                                  ;	Get Information about a file
 17382                                  ; Returns:
 17383                                  ;	CARRY CLEAR
 17384                                  ;	    AX = Attribute of file
 17385                                  ;	    CX = Time stamp of file
 17386                                  ;	    DX = Date stamp of file
 17387                                  ;	    BX:DI = Size of file (32 bit)
 17388                                  ;	CARRY SET
 17389                                  ;	    AX is error code
 17390                                  ;		error_file_not_found
 17391                                  ;			Last element of path not found
 17392                                  ;		error_path_not_found
 17393                                  ;			Bad path (not in curr dir part if present)
 17394                                  ;		error_bad_curr_dir
 17395                                  ;			Bad path in current directory part of path
 17396                                  ; DS preserved, others destroyed
 17397                                  ;---------------------------------------------------------------------------
 17398                                  
 17399                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17400                                  
 17401                                  GET_FILE_INFO:
 17402                                  
 17403                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17404                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17405                                  
 17406 000028BF E874E9                  	call	TestNet
 17407 000028C2 7306                    	JNC	short LOCAL_INFO
 17408                                  
 17409                                  ;IF NOT Installed
 17410                                  ;	transfer NET_GET_FILE_INFO
 17411                                  ;ELSE
 17412                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17413                                  ;	INT	2FH
 17414                                  ;	return
 17415                                  
 17416 000028C4 B80F11                  	mov     ax, 110Fh
 17417 000028C7 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17418                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17419                                  			; SDA CDS pointer -> current directory
 17420                                  			; Return: CF set on error, AX = file attributes
 17421 000028C9 C3                      	retn
 17422                                  ;ENDIF
 17423                                  
 17424                                  LOCAL_INFO:
 17425 000028CA E82BEA                  	call	ECritDisk
 17426 000028CD C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17427                                  	; MSDOS 3.3
 17428                                  	;call	GETPATH
 17429                                  	; MSDOS 6.0
 17430 000028D2 E8D700                  	call	GET_FAST_PATH
 17431                                  	; MSDOS 3.3 & MSDOS 6.0
 17432 000028D5 7312                    	JNC	short info_check_dev
 17433                                  NO_PATH:
 17434 000028D7 750B                    	JNZ	short bad_path1
 17435 000028D9 08C9                    	OR	CL,CL
 17436 000028DB 7407                    	JZ	short bad_path1
 17437                                  info_no_file:
 17438 000028DD B80200                  	MOV	AX,error_file_not_found
 17439                                  BadRet:
 17440 000028E0 F9                      	STC
 17441                                  JustRet:
 17442                                  	;call	LCritDisk
 17443                                  	;retn
 17444                                  	; 18/12/2022
 17445 000028E1 E92FEA                  	jmp	LCritDisk
 17446                                  
 17447                                  bad_path1:
 17448 000028E4 B80300                  	MOV	AX,error_path_not_found
 17449 000028E7 EBF7                    	jmp	short BadRet
 17450                                  
 17451                                  info_check_dev:
 17452 000028E9 08E4                    	OR	AH,AH
 17453 000028EB 78F0                    	JS	short info_no_file	; device
 17454                                  
 17455                                  	; MSDOS 6.0
 17456                                  ;SR;
 17457                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17458                                  ;for a root dir
 17459                                  
 17460 000028ED 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17461 000028F2 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17462                                  
 17463 000028F4 30E4                    	xor	ah,ah
 17464 000028F6 B010                    	mov	al,attr_directory ; 10h
 17465                                  	;clc
 17466                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17467                                  	; (DOSCODE:683Eh)
 17468                                  	; 16/12/2022
 17469                                  	;clc
 17470 000028F8 EBE7                    	jmp	short JustRet
 17471                                  
 17472                                  not_root:
 17473                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17474 000028FA 1E                      	PUSH	DS
 17475 000028FB 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17476 000028FF 89DE                    	MOV	SI,BX
 17477 00002901 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17478 00002903 89DF                    	MOV	DI,BX
 17479                                  	;mov	cx,[si+16h]
 17480 00002905 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17481                                  	;mov	dx,[si+18h]
 17482 00002908 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17483 0000290B 30E4                    	XOR	AH,AH
 17484                                  	;mov	al,[si+0Bh]
 17485 0000290D 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17486                                  	;test	al,10h
 17487 00002910 A810                    	TEST	AL,attr_directory
 17488 00002912 7506                    	JNZ	short NO_SIZE
 17489                                  	;mov	di,[si+1Ch]
 17490 00002914 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17491                                  	;mov	bx,[si+1Eh]
 17492 00002917 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17493                                  NO_SIZE:
 17494 0000291A 1F                      	POP	DS
 17495                                  	;CLC
 17496                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17497                                  	; (DOSCODE:6864h)
 17498                                  	; 16/12/2022
 17499                                  	;clc
 17500 0000291B EBC4                    	jmp	short JustRet
 17501                                  
 17502                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17503                                  ;-------------------------------------------------------------------------------
 17504                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17505                                  ; Inputs:
 17506                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17507                                  ;		terminated)
 17508                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17509                                  ;		( = -1 if current dir not involved, else
 17510                                  ;		 Points to first char after last "/" of current dir part)
 17511                                  ;	[THISCDS] Points to CDS being used
 17512                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17513                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17514                                  ;	AX is new attributes to give to file
 17515                                  ; Function:
 17516                                  ;	Set File Attributes
 17517                                  ; Returns:
 17518                                  ;	CARRY CLEAR
 17519                                  ;	    No error
 17520                                  ;	CARRY SET
 17521                                  ;	    AX is error code
 17522                                  ;		error_file_not_found
 17523                                  ;			Last element of path not found
 17524                                  ;		error_path_not_found
 17525                                  ;			Bad path (not in curr dir part if present)
 17526                                  ;		error_bad_curr_dir
 17527                                  ;			Bad path in current directory part of path
 17528                                  ;		error_access_denied
 17529                                  ;			Attempt to set an attribute which cannot be set
 17530                                  ;			(attr_directory, attr_volume_ID)
 17531                                  ;		error_sharing_violation
 17532                                  ;			Sharing mode of file did not allow the change
 17533                                  ;			(this request requires exclusive write/read access)
 17534                                  ;			(INT 24H generated)
 17535                                  ; DS preserved, others destroyed
 17536                                  ;----------------------------------------------------------------------------
 17537                                  
 17538                                  SET_FILE_ATTRIBUTE:
 17539                                  
 17540                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17541                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17542                                  
 17543 0000291D A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17544 00002920 7414                    	JZ	short set_look
 17545                                  _BAD_ACC:
 17546 00002922 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17547 00002927 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17548 0000292C C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17549 00002931 B80500                  	MOV	AX,error_access_denied ; 5
 17550 00002934 F9                      	STC
 17551 00002935 C3                      	retn
 17552                                  
 17553                                  set_look:
 17554 00002936 E8FDE8                  	call	TestNet
 17555 00002939 7308                    	JNC	short LOCAL_SET
 17556                                  
 17557                                  ;IF NOT Installed
 17558                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17559                                  ;ELSE
 17560 0000293B 50                      	PUSH	AX
 17561                                  	
 17562                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17563                                  	;INT	2FH
 17564                                  
 17565 0000293C B80E11                  	mov     ax, 110Eh
 17566 0000293F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17567                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17568                                  			; SDA CDS pointer -> current directory
 17569                                  			; STACK: WORD new file attributes
 17570                                  			; Return: CF set on error
 17571                                  
 17572 00002941 5B                      	POP	BX			; clean stack
 17573 00002942 C3                      	retn
 17574                                  ;ENDIF
 17575                                  
 17576                                  LOCAL_SET:
 17577 00002943 E8B2E9                  	call	ECritDisk
 17578 00002946 50                      	PUSH	AX			; Save new attributes
 17579 00002947 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17580 0000294C E8EB14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17581 0000294F 7308                    	JNC	short set_check_device
 17582 00002951 5B                      	POP	BX			; Clean stack (don't zap AX)
 17583 00002952 EB83                    	JMP	short NO_PATH
 17584                                  
 17585                                  	; MSDOS 6.0
 17586                                  cannot_set_root:			; M025:
 17587 00002954 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17588                                  	;stc				; M025: to set attr. of root
 17589                                  	;jmp	short OK_BYE		; M025:
 17590                                  	; 01/02/2024
 17591 00002957 EB87                    	jmp	short BadRet
 17592                                  
 17593                                  set_check_device:
 17594 00002959 08E4                    	OR	AH,AH
 17595 0000295B 7906                    	JNS	short set_check_share
 17596 0000295D 58                      	POP	AX
 17597 0000295E E8B2E9                  	call	LCritDisk
 17598 00002961 EBBF                    	JMP	short _BAD_ACC 		; device
 17599                                  
 17600                                  set_check_share:
 17601 00002963 58                      	POP	AX			; Get new attributes
 17602                                  
 17603                                  	; MSDOS 6.0
 17604 00002964 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17605 00002969 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17606                                  
 17607                                  	; MSDOS 3.3 & MSDOS 6.0
 17608 0000296B E882FC                  	call	REN_DEL_Check
 17609 0000296E 7305                    	JNC	short set_do
 17610 00002970 B82000                  	MOV	AX,error_sharing_violation ; 32
 17611 00002973 EB34                    	jmp	short OK_BYE
 17612                                  
 17613                                  set_do:
 17614                                  	; MSDOS 3.3 & MSDOS 6.0
 17615 00002975 C43E[E205]              	LES	DI,[CURBUF]
 17616 00002979 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17617 0000297E 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17618                                  
 17619                                  	; MSDOS 6.0
 17620 00002982 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17621                                  					;LB. if already dirty		  ;AN000;
 17622 00002987 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17623 00002989 E8B530                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17624                                  	
 17625 0000298C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17626                                  yesdirty3:
 17627 00002991 A0[7605]                	MOV	AL,[THISDRV]
 17628                                  ;;;; 10/1/86 F.C update fastopen cache
 17629 00002994 52                      	PUSH	DX
 17630 00002995 57                      	PUSH	DI
 17631 00002996 B400                    	MOV	AH,0		  ; dir entry update
 17632 00002998 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17633 0000299A 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17634 0000299C E8E6FC                  	call	FastOpen_Update
 17635 0000299F 5F                      	POP	DI
 17636 000029A0 5A                      	POP	DX
 17637                                  ;;;; 9/11/86 F.C update fastopen cache
 17638 000029A1 E8982F                  	call	FLUSHBUF
 17639 000029A4 7303                    	JNC	short OK_BYE
 17640 000029A6 B80200                  	MOV	AX,error_file_not_found
 17641                                  OK_BYE:
 17642                                  	;call	LCritDisk
 17643                                  	;retn
 17644                                  	; 16/12/2022
 17645 000029A9 E967E9                  	jmp	LCritDisk
 17646                                  
 17647                                  	; 17/05/2019 - Retro DOS v4.0
 17648                                  
 17649                                  	; MSDOS 6.0
 17650                                  GET_FAST_PATH:
 17651                                  ;hkn; use SS override for FastOpenFlg
 17652 000029AC 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17653                                  					;FO. trigger fastopen	;AN000;
 17654 000029B2 E88514                  	call	GETPATH
 17655 000029B5 9C                      	PUSHF			 	;FO.			;AN000;
 17656 000029B6 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17657                                  					;FO. clear all fastopen flags ;AN000;
 17658 000029BC 9D                      	POPF				;FO.			;AN000;
 17659 000029BD C3                      	retn
 17660                                  
 17661                                  ;============================================================================
 17662                                  ; DUP.ASM, MSDOS 6.0, 1991
 17663                                  ;============================================================================
 17664                                  ; 08/08/2018 - Retro DOS v3.0
 17665                                  ; 17/05/2019 - Retro DOS v4.0
 17666                                  
 17667                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17668                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17669                                  ;
 17670                                  ;	DOS_DUP
 17671                                  ;
 17672                                  ;	Modification history:
 17673                                  ;
 17674                                  ;	  Created: ARR 30 March 1983
 17675                                  
 17676                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17677                                  ;---------------------------------------------------------------------------
 17678                                  ; Procedure Name : DOS_DUP
 17679                                  ;
 17680                                  ; Inputs:
 17681                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17682                                  ;		(a non net SFT is OK, in this case the ref
 17683                                  ;		 count is simply incremented)
 17684                                  ; Function:
 17685                                  ;	Signal to the devices that a logical open is occurring
 17686                                  ; Returns:
 17687                                  ;	ES:DI point to SFT
 17688                                  ;    Carry clear
 17689                                  ;	SFT ref_count is incremented
 17690                                  ; Registers modified: None.
 17691                                  ; NOTE:
 17692                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17693                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17694                                  ;	that time.
 17695                                  ;---------------------------------------------------------------------------
 17696                                  
 17697                                  DOS_DUP:
 17698                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17699                                  
 17700                                  	; MSDOS 6.0
 17701 000029BE 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17702 000029C3 26C43E[9E05]            	les	di,[es:THISSFT]
 17703                                  
 17704                                  	;Entry	Dos_Dup_Direct
 17705                                  DOS_Dup_Direct:
 17706 000029C8 E884E8                  	call	IsSFTNet
 17707 000029CB 7503                    	JNZ	short DO_INC
 17708 000029CD E81D1B                  	call	DEV_OPEN_SFT
 17709                                  DO_INC:
 17710                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17711 000029D0 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17712                                  					;   we're in big trouble anyway)
 17713 000029D3 C3                      	retn
 17714                                  
 17715                                  ;============================================================================
 17716                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17717                                  ;============================================================================
 17718                                  ; 08/08/2018 - Retro DOS v3.0
 17719                                  ; 18/05/2019 - Retro DOS v4.0
 17720                                  
 17721                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17722                                  ;NAME	DOS_CREATE
 17723                                  ;----------------------------------------------------------------------------
 17724                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17725                                  ;
 17726                                  ;	DOS_CREATE
 17727                                  ;	DOS_CREATE_NEW
 17728                                  ;	SET_MKND_ERR
 17729                                  ;	SET_Media_ID
 17730                                  ;	SET_EXT_Mode
 17731                                  ;
 17732                                  ;	Revision history:
 17733                                  ;
 17734                                  ;	    A000 version 4.00	  Jan. 1988
 17735                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17736                                  
 17737                                  ;Installed = TRUE
 17738                                  
 17739                                  ;	i_need	THISSFT,DWORD
 17740                                  ;	i_need	THISCDS,DWORD
 17741                                  ;	I_need	EXTERR,WORD
 17742                                  ;	I_Need	ExtErr_locus,BYTE
 17743                                  ;	I_need	JShare,DWORD
 17744                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17745                                  ;	I_need	SATTRIB,BYTE
 17746                                  ;	I_need	CALLVIDM,DWORD
 17747                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17748                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17749                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17750                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17751                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17752                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17753                                  
 17754                                  ;***	DOS_CREATE - Create a File
 17755                                  ;----------------------------------------------------------------------------
 17756                                  ;	DOS_Create is called to create the specified file, truncating
 17757                                  ;	the old one if it exists.
 17758                                  ;
 17759                                  ;	ENTRY	AX is Attribute to create
 17760                                  ;		(ds) = DOSDATA
 17761                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17762                                  ;			terminated)
 17763                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17764                                  ;			( = -1 if current dir not involved, else
 17765                                  ;			 Points to first char after last "/" of current dir part)
 17766                                  ;		[THISCDS] Points to CDS being used
 17767                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17768                                  ;		[THISSFT] Points to SFT to fill in if file created
 17769                                  ;			(sf_mode field set so that FCB may be detected)
 17770                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17771                                  ;
 17772                                  ;	EXIT	sf_ref_count is NOT altered
 17773                                  ;		CARRY CLEAR
 17774                                  ;		    THISSFT filled in.
 17775                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17776                                  ;		CARRY SET
 17777                                  ;		    AX is error code
 17778                                  ;			error_path_not_found
 17779                                  ;				Bad path (not in curr dir part if present)
 17780                                  ;			error_bad_curr_dir
 17781                                  ;				Bad path in current directory part of path
 17782                                  ;			error_access_denied
 17783                                  ;				Attempt to re-create read only file , or
 17784                                  ;				create a second volume id or create a dir
 17785                                  ;			error_sharing_violation
 17786                                  ;				The sharing mode was correct but not allowed
 17787                                  ;				generates an INT 24
 17788                                  ;	USES	all but DS
 17789                                  ;----------------------------------------------------------------------------
 17790                                  
 17791                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17792                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17793                                  
 17794                                  DOS_CREATE:
 17795                                  	; 18/05/2019 - Retro DOS v4.0
 17796                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17797                                  
 17798                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17799                                  ;hkn; this point.
 17800                                  
 17801 000029D4 30E4                    	XOR	AH,AH		; Truncate is OK
 17802                                  
 17803                                  ;	Enter here from Dos_Create_New
 17804                                  ;
 17805                                  ;	(ah) = 0 iff truncate OK
 17806                                  
 17807                                  Create_inter:
 17808 000029D6 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17809                                  				; Mask out any meaningless bits
 17810 000029D8 7511                    	JNZ	short AttErr
 17811 000029DA A808                    	TEST	AL,attr_volume_id
 17812 000029DC 7407                    	JZ	short NoReset
 17813                                  	
 17814                                  	; MSDOS 6.0
 17815                                  	; 16/12/2022
 17816 000029DE 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17817                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17818                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17819                                  	
 17820 000029E3 B008                    	MOV	AL,attr_volume_id ; 8
 17821                                  NoReset:
 17822 000029E5 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17823 000029E7 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17824 000029E9 740A                    	JZ	short ATT_OK
 17825                                  AttErr:
 17826 000029EB B80500                  	MOV	AX,5		; Attribute problem
 17827 000029EE C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17828 000029F3 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17829                                  				   ;	attr_device to be set.
 17830                                  ATT_OK:
 17831 000029F5 C43E[9E05]              	LES	DI,[THISSFT]
 17832 000029F9 06                      	PUSH	ES
 17833 000029FA C436[A205]              	LES	SI,[THISCDS]
 17834 000029FE 83FEFF                  	CMP	SI,-1
 17835 00002A01 751B                    	JNE	short TEST_RE_NET
 17836                                  
 17837                                  ;	No CDS, it must be redirected.
 17838                                  
 17839 00002A03 07                      	POP	ES
 17840                                  
 17841                                  	; MSDOS 6.0
 17842                                  ;Extended open hooks
 17843                                  	;test	byte [EXTOPEN_ON],1
 17844 00002A04 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17845 00002A09 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17846                                  IFS_extopen:				    ;AN000;EO.
 17847 00002A0B 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17848                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17849 00002A0C B82E11                  	mov	ax,112Eh
 17850                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17851 00002A0F CD2F                    	INT	2FH			    ;AN000;EO.
 17852 00002A11 5B                      	POP	BX			    ;AN000;EO. trash bx
 17853 00002A12 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17854 00002A17 C3                      	retn				    ;AN000;EO.
 17855                                  NOEXTOP:				    ;AN000;
 17856                                  ;Extended open hooks
 17857                                  
 17858                                  ;IF NOT Installed
 17859                                  ;	transfer NET_SEQ_CREATE
 17860                                  ;ELSE
 17861 00002A18 50                      	PUSH	AX
 17862                                  
 17863                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17864                                  	;INT	2FH
 17865                                  
 17866 00002A19 B81811                  	mov	ax,1118h
 17867                                  	; 01/02/2024
 17868                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17869                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17870                                  			; SDA first filename pointer -> fully-qualified name of file
 17871                                  			; STACK: WORD file creation mode???
 17872                                  
 17873                                  	;POP	BX			; BX is trashed anyway
 17874                                  	;retn
 17875 00002A1C EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17876                                  ;ENDIF
 17877                                  
 17878                                  ;	We have a CDS. See if it's network
 17879                                  
 17880                                  TEST_RE_NET:
 17881                                  	;;test	word [es:si+43h],8000h
 17882                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17883                                  	; 07/12/2022
 17884                                  	;test	byte [es:si+44h],80h
 17885                                  	; 17/12/2022
 17886 00002A1E 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17887 00002A23 07                      	POP	ES
 17888 00002A24 7417                    	JZ	short LOCAL_CREATE
 17889                                  
 17890                                  	; MSDOS 6.0
 17891 00002A26 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17892 00002A29 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17893                                  	;;or	word [es:di+2],2
 17894                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17895                                  	; 17/12/2022
 17896 00002A2B 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17897                                  
 17898                                  ;Extended open hooks
 17899                                  dochk:
 17900 00002A30 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17901 00002A35 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17902                                  ;Extended open hooks
 17903                                  
 17904                                  ;IF NOT Installed
 17905                                  ;	transfer NET_CREATE
 17906                                  ;ELSE
 17907 00002A37 50                      	PUSH	AX
 17908                                  	
 17909                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17910                                  	;INT	2FH
 17911                                  	
 17912 00002A38 B81711                  	mov	ax,1117h
 17913                                  	
 17914                                  	; 01/02/2024
 17915                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17916                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17917                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17918                                  			; SDA CDS pointer -> current directory
 17919                                  			; Return: CF set on error
 17920                                  
 17921                                  	;POP	BX			; BX is trashed anyway
 17922                                  ;nomore:
 17923                                  	;retn
 17924 00002A3B EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17925                                  ;ENDIF
 17926                                  
 17927                                  ;**	It's a local create. We have a local CDS for it.
 17928                                  
 17929                                  LOCAL_CREATE:
 17930                                  	; MSDOS 6.0
 17931 00002A3D E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17932 00002A40 7205                    	JC	short setdone	;AN000;EO.
 17933                                  	
 17934                                  	; MSDOS 3.3 & MSDOS 6.0
 17935                                  	; 17/12/2022
 17936                                  	;;or	word [es:di+2],2
 17937                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17938                                  	;or	byte [es:di+2],2
 17939 00002A42 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17940                                  setdone:
 17941 00002A47 E8AEE8                  	call	ECritDisk
 17942 00002A4A E8461E                  	call	MakeNode
 17943 00002A4D 7317                    	JNC	short Create_ok
 17944 00002A4F C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17945 00002A54 E8BCE8                  	call	LCritDisk
 17946                                  
 17947                                  	;entry	SET_MKND_ERR
 17948                                  SET_MKND_ERR:
 17949                                  
 17950                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17951                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17952                                  
 17953                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17954 00002A57 BB[5E2A]                	MOV     BX,CRTERRTAB
 17955                                  	;XLAT  ; MSDOS 3.3
 17956                                  	; 18/05/2019 - Retro DOS v4.0
 17957 00002A5A 2E                      	CS
 17958 00002A5B D7                      	XLAT
 17959                                  CreatBadRet:
 17960 00002A5C F9                      	STC
 17961 00002A5D C3                      	retn
 17962                                  
 17963                                  ; 13/05/2019 - Retro DOS v4.0
 17964                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17965                                  ; ---------------------------------------------------------------------------
 17966                                  
 17967                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17968                                  
 17969                                  ; 17/07/2018 - Retro DOS v3.0
 17970                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17971                                  
 17972                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17973                                  ;	db	0,5,52h,50h,3,5,20h
 17974                                  
 17975                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17976                                  ;	db	0,5,52h,50h,3,5,20h,2
 17977                                  
 17978                                  ; 08/08/2018
 17979                                  
 17980                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17981 00002A5E 00                      	DB	0			; none
 17982 00002A5F 05                      	DB	error_access_denied	; MakeNode error 1
 17983 00002A60 52                      	DB	error_cannot_make	; MakeNode error 2
 17984 00002A61 50                      	DB	error_file_exists	; MakeNode error 3
 17985 00002A62 03                      	DB	error_path_not_found	; MakeNode error 4
 17986 00002A63 05                      	DB	error_access_denied	; MakeNode error 5
 17987 00002A64 20                      	DB	error_sharing_violation ; MakeNode error 6
 17988                                  	; MSDOS 6.0
 17989 00002A65 02                      	DB	error_file_not_found	; MakeNode error 7
 17990                                  
 17991                                  ; ---------------------------------------------------------------------------
 17992                                  
 17993                                  ; We have just created a new file. This results in the truncation of old
 17994                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17995                                  ; file to the current size.
 17996                                  
 17997                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17998                                  ; drive number to force a Build BPB after Media Check.
 17999                                  
 18000                                  ;;; FASTOPEN 8/29/86
 18001                                  Create_ok:
 18002 00002A66 E8F4FB                  	call	FastOpen_Delete
 18003                                  ;;; FASTOPEN 8/29/86
 18004 00002A69 A0[6D05]                	mov	al,[SATTRIB]
 18005 00002A6C A808                    	test	al,attr_volume_id
 18006 00002A6E 741C                    	jz	short NoVolLabel
 18007 00002A70 C43E[A205]              	LES	DI,[THISCDS]
 18008                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18009 00002A74 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18010 00002A77 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18011 00002A7A 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18012                                  	
 18013                                  	; 18/05/2019 - Retro DOS v4.0
 18014                                  
 18015                                  	; MSDOS 6.0
 18016 00002A7E B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18017 00002A80 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18018                                  	
 18019 00002A83 E872E8                  	call	ECritDisk
 18020 00002A86 E83A2B                  	call	FATREAD_CDS		; force a media check
 18021 00002A89 E887E8                  	call	LCritDisk
 18022                                  
 18023                                  NoVolLabel:
 18024 00002A8C B80200                  	MOV	ax,2
 18025 00002A8F C43E[9E05]              	LES	DI,[THISSFT]
 18026                                  ;if installed
 18027                                  	;call	JShare + 14 * 4
 18028 00002A93 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18029                                  ;else
 18030                                  ;	Call	ShSU
 18031                                  ;endif
 18032 00002A97 E879E8                  	call	LCritDisk
 18033 00002A9A E94901                  	jmp	SET_SFT_MODE
 18034                                  
 18035                                  ;---------------------------------------------------------------------------
 18036                                  ; Procedure Name : Dos_Create_New
 18037                                  ;
 18038                                  ; Inputs:
 18039                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18040                                  ;		terminated)
 18041                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18042                                  ;		( = -1 if current dir not involved, else
 18043                                  ;		 Points to first char after last "/" of current dir part)
 18044                                  ;	[THISCDS] Points to CDS being used
 18045                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18046                                  ;	[THISSFT] Points to SFT to fill in if file created
 18047                                  ;		(sf_mode field set so that FCB may be detected)
 18048                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18049                                  ;	AX is Attribute to create
 18050                                  ; Function:
 18051                                  ;	Try to create the specified file truncating an old one that exists
 18052                                  ; Outputs:
 18053                                  ;	sf_ref_count is NOT altered
 18054                                  ;	CARRY CLEAR
 18055                                  ;	    THISSFT filled in.
 18056                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18057                                  ;	CARRY SET
 18058                                  ;	    AX is error code
 18059                                  ;		error_path_not_found
 18060                                  ;			Bad path (not in curr dir part if present)
 18061                                  ;		error_bad_curr_dir
 18062                                  ;			Bad path in current directory part of path
 18063                                  ;		error_access_denied
 18064                                  ;			Create a second volume id or create a dir
 18065                                  ;		error_file_exists
 18066                                  ;			Already a file by this name
 18067                                  ; DS preserved, others destroyed
 18068                                  ;---------------------------------------------------------------------------
 18069                                  
 18070                                  DOS_Create_New:
 18071 00002A9D B401                    	MOV	AH,1		; Truncate is NOT OK
 18072 00002A9F E934FF                  	JMP	Create_inter
 18073                                  
 18074                                  ; MSDOS 6.0
 18075                                  ;---------------------------------------------------------------------------
 18076                                  ; Procedure Name : Set_Media_ID
 18077                                  ;
 18078                                  ; Inputs:
 18079                                  ;	NAME1= Volume ID
 18080                                  ;	BH= 0, delete volume id
 18081                                  ;	    1, set new volume id
 18082                                  ;	DS= DOSGROUP
 18083                                  ; Function:
 18084                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18085                                  ; Outputs:
 18086                                  ;	CARRY CLEAR
 18087                                  ;	    volume id set
 18088                                  ;	CARRY SET
 18089                                  ;	    AX is error code
 18090                                  ;---------------------------------------------------------------------------
 18091                                  
 18092                                  	; 18/05/2019 - Retro DOS v4.0
 18093                                  Set_Media_ID:
 18094 00002AA2 50                      	PUSH	AX		;AN000;;>32mb
 18095 00002AA3 06                      	PUSH	ES		;AN000;;>32mb
 18096 00002AA4 57                      	PUSH	DI		;AN000;;>32mb
 18097                                  
 18098 00002AA5 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18099 00002AA7 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18100 00002AA9 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18101 00002AAB B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18102                                  
 18103                                  ;hkn; PACKET_TEMP is in DOSDATA
 18104 00002AAE BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18105                                  
 18106 00002AB1 53                      	PUSH	BX		;AN000;;>32mb
 18107 00002AB2 52                      	PUSH	DX		;AN000;;>32mb
 18108 00002AB3 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18109                                  
 18110                                  	;invoke	$IOCTL		;AN000;;>32mb
 18111 00002AB5 E86BF7                  	call	_$IOCTL	
 18112                                  
 18113 00002AB8 5A                      	POP	DX		;AN000;;>32mb
 18114 00002AB9 5B                      	POP	BX		;AN000;;>32mb
 18115 00002ABA 7224                    	JC	short geterr	;AN000;;>32mb
 18116                                  
 18117 00002ABC 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18118 00002ABE 7405                    	JZ	short NoName	;AN000;>32mb yes
 18119                                  
 18120                                  ;hkn; NAME1 is in DOSDATA
 18121 00002AC0 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18122                                  
 18123 00002AC3 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18124                                  NoName: 			;AN000;
 18125                                  
 18126                                  ;hkn; NO_NAME_ID is in DOSDATA
 18127 00002AC5 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18128                                  
 18129                                  doset:				;AN000;
 18130 00002AC8 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18131                                  	;add	di,6
 18132 00002ACA 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18133                                  
 18134                                  ;hkn; ES & DS must point to SS
 18135                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18136 00002ACD 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18137                                  
 18138 00002ACE 1F                      	POP	DS		;AN000;;>32mb
 18139                                  
 18140                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18141 00002ACF 16                      	PUSH	SS		;AN000;;>32mb
 18142                                  
 18143 00002AD0 07                      	POP	ES		;AN000;;>32mb
 18144 00002AD1 B90B00                  	MOV	CX,11		;AN000;;>32mb
 18145 00002AD4 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18146 00002AD6 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18147 00002AD9 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18148 00002ADB 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18149                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18150 00002ADD E843F7                  	call	_$IOCTL	
 18151                                  geterr: 			;AN000;
 18152                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18153 00002AE0 16                      	PUSH	SS		;AN000;>32mb
 18154                                  
 18155 00002AE1 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18156                                  
 18157 00002AE2 5F                      	POP	DI		;AN000;;>32mb
 18158 00002AE3 07                      	POP	ES		;AN000;;>32mb
 18159 00002AE4 58                      	POP	AX		;AN000;;>32mb
 18160 00002AE5 C3                      	retn			;AN000;>32mb
 18161                                  
 18162                                  ; MSDOS 6.0
 18163                                  ;---------------------------------------------------------------------------
 18164                                  ; Procedure Name : Set_EXT_mode
 18165                                  ;
 18166                                  ; Inputs:
 18167                                  ;	[EXTOPEN_ON]= flag for extended open
 18168                                  ;	SAVE_BX= mode specified in Extended Open
 18169                                  ; Function:
 18170                                  ;	Set mode in ThisSFT
 18171                                  ; Outputs:
 18172                                  ;	carry set,mode is set if from Extended Open
 18173                                  ;	carry clear, mode not set yet
 18174                                  ;---------------------------------------------------------------------------
 18175                                  
 18176                                  ; 13/05/2019 - Retro DOS v4.0
 18177                                  
 18178                                  Set_EXT_mode:
 18179                                  
 18180                                  ;hkn; SS override
 18181 00002AE6 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18182 00002AEC 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18183 00002AEE 50                      	PUSH	AX			    ;AN000;EO.
 18184                                  
 18185                                  ;hkn; SS override
 18186 00002AEF 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18187                                  	;or	[es:di+2],ax
 18188 00002AF3 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18189 00002AF7 58                      	POP	AX			    ;AN000;EO.
 18190 00002AF8 F9                      	STC				    ;AN000;EO.
 18191                                  NOTEX:					    ;AN000;
 18192 00002AF9 C3                      	retn				    ;AN000;EO.
 18193                                  
 18194                                  ;============================================================================
 18195                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18196                                  ;============================================================================
 18197                                  ; 08/08/2018 - Retro DOS v3.0
 18198                                  ; 18/05/2019 - Retro DOS v4.0
 18199                                  
 18200                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18201                                  ;	NAME	DOS_OPEN
 18202                                  
 18203                                  ;**	OPEN.ASM - File Open
 18204                                  ;----------------------------------------------------------------------------
 18205                                  ;	Low level routines for openning a file from a file spec.
 18206                                  ;	Also misc routines for sharing errors
 18207                                  ;
 18208                                  ;	DOS_Open
 18209                                  ;	Check_Access_AX
 18210                                  ;	SHARE_ERROR
 18211                                  ;	SET_SFT_MODE
 18212                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18213                                  ;
 18214                                  ;	Revision history:
 18215                                  ;
 18216                                  ;	    Created: ARR 30 March 1983
 18217                                  ;	    A000	version 4.00   Jan. 1988
 18218                                  ;
 18219                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18220                                  ; 	       remote extended opens and not save_cx.
 18221                                  ;
 18222                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18223                                  ;	       on the stack before calling off to the redir.
 18224                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18225                                  ;	       to handle open from exec. In this case set the appropriate bit
 18226                                  ;	       else do not.
 18227                                  ;----------------------------------------------------------------------------	
 18228                                  
 18229                                  ;Installed = TRUE
 18230                                  
 18231                                  ;	i_need	NoSetDir,BYTE
 18232                                  ;	i_need	THISSFT,DWORD
 18233                                  ;	i_need	THISCDS,DWORD
 18234                                  ;	i_need	CURBUF,DWORD
 18235                                  ;	i_need	CurrentPDB,WORD
 18236                                  ;	i_need	CURR_DIR_END,WORD
 18237                                  ;	I_need	RetryCount,WORD
 18238                                  ;	I_need	Open_Access,BYTE
 18239                                  ;	I_need	fSharing,BYTE
 18240                                  ;	i_need	JShare,DWORD
 18241                                  ;	I_need	FastOpenFlg,byte
 18242                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18243                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18244                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18245                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18246                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18247                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18248                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18249                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18250                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18251                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18252                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18253                                  ;
 18254                                  ;	I_need	DOS_FLAG,BYTE
 18255                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18256                                  
 18257                                  ;Break	<DOS_Open - internal file access>
 18258                                  ;---------------------------------------------------------------------------
 18259                                  ; Procedure Name : DOS_Open
 18260                                  ;
 18261                                  ; Inputs:
 18262                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18263                                  ;		terminated)
 18264                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18265                                  ;		( = -1 if current dir not involved, else
 18266                                  ;		 Points to first char after last "/" of current dir part)
 18267                                  ;	[THISCDS] Points to CDS being used
 18268                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18269                                  ;	[THISSFT] Points to SFT to fill in if file found
 18270                                  ;		(sf_mode field set so that FCB may be detected)
 18271                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18272                                  ;	AX is Access and Sharing mode
 18273                                  ;	  High NIBBLE of AL (Sharing Mode)
 18274                                  ;		sharing_compat	   file is opened in compatibility mode
 18275                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18276                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18277                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18278                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18279                                  ;	  Low NIBBLE of AL (Access Mode)
 18280                                  ;		open_for_read	file is opened for reading
 18281                                  ;		open_for_write	file is opened for writing
 18282                                  ;		open_for_both	file is opened for both reading and writing.
 18283                                  ;
 18284                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18285                                  ;		(not checked)
 18286                                  ; Function:
 18287                                  ;	Try to open the specified file
 18288                                  ; Outputs:
 18289                                  ;	sf_ref_count is NOT altered
 18290                                  ;	CARRY CLEAR
 18291                                  ;	    THISSFT filled in.
 18292                                  ;	CARRY SET
 18293                                  ;	    AX is error code
 18294                                  ;		error_file_not_found
 18295                                  ;			Last element of path not found
 18296                                  ;		error_path_not_found
 18297                                  ;			Bad path (not in curr dir part if present)
 18298                                  ;		error_bad_curr_dir
 18299                                  ;			Bad path in current directory part of path
 18300                                  ;		error_invalid_access
 18301                                  ;			Bad sharing mode or bad access mode or bad combination
 18302                                  ;		error_access_denied
 18303                                  ;			Attempt to open read only file for writting, or
 18304                                  ;			open a directory
 18305                                  ;		error_sharing_violation
 18306                                  ;			The sharing mode was correct but not allowed
 18307                                  ;			generates an INT 24 on compatibility mode SFTs
 18308                                  ; DS preserved, others destroyed
 18309                                  ;----------------------------------------------------------------------------
 18310                                  
 18311                                  ; 18/05/2019 - Retro DOS v4.0
 18312                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18313                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18314                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18315                                  
 18316                                  DOS_OPEN:
 18317                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18318                                  
 18319 00002AFA C606[4C03]00            	MOV	byte [NoSetDir],0
 18320 00002AFF E83301                  	CALL	Check_Access_AX
 18321 00002B02 722B                    	JC	short do_ret_label	    ; retc
 18322                                  
 18323 00002B04 C43E[9E05]              	LES	DI,[THISSFT]
 18324 00002B08 30E4                    	XOR	AH,AH
 18325                                  
 18326                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18327                                  
 18328 00002B0A 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18329 00002B0E 06                      	PUSH	ES
 18330 00002B0F C436[A205]              	LES	SI,[THISCDS]
 18331                                  	; 18/08/2018
 18332 00002B13 83FEFF                  	CMP	SI,-1
 18333 00002B16 7530                    	JNZ	short TEST_RE_NET1
 18334 00002B18 07                      	POP	ES
 18335                                  
 18336                                  	; MSDOS 6.0
 18337                                  ;Extended open hooks
 18338 00002B19 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18339 00002B1E 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18340                                  _IFS_extopen:									;AN000;
 18341 00002B20 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18342                                  					    ; with which call was made. This
 18343                                  					    ; has the open access bits. 
 18344                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18345                                  	
 18346 00002B23 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18347                                  	;mov	ax,112Eh
 18348                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18349 00002B24 B82E11                  	mov	ax,(MultNET*256)+46 
 18350 00002B27 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18351 00002B29 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18352 00002B2A C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18353                                  
 18354                                  do_ret_label:
 18355 00002B2F C3                      	retn				    ;FT.				;AN000;
 18356                                  _NOEXTOP:
 18357                                  ;Extended open hooks
 18358                                  	;
 18359                                  ;IF NOT Installed
 18360                                  	;transfer NET_SEQ_OPEN
 18361                                  ;ELSE
 18362                                  	
 18363                                  do_net_int2f:
 18364 00002B30 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18365 00002B35 7409                    	jz	short not_exec_open	; N: just do net open
 18366                                  					; Y: check to see if redir is aware
 18367                                  					;    of this 
 18368                                  	
 18369                                  					; M042 - start
 18370                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18371 00002B37 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18372                                  					; Q: does this redir know how to 
 18373                                  					;    this
 18374 00002B3C 7402                    	jz	short not_exec_open	; N: just do net open
 18375                                  					; Y: set bit 3 of access byte and 
 18376                                  					;    set sharing mode to DENY_WRITE
 18377                                  					; M042 - end
 18378                                  	
 18379                                  	; NOTE: This specific mode has not been set for the code assembled
 18380                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18381                                  	; always one.
 18382                                  					; M035 - set the bits on the stack
 18383                                  	;mov	al,23h
 18384 00002B3E B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18385                                  	
 18386                                  not_exec_open:
 18387                                  	; MSDOS 3.3 & MSDOS 6.0
 18388 00002B40 50                      	PUSH	AX
 18389                                  
 18390                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18391                                  	;INT	2FH
 18392                                  
 18393 00002B41 B81611                  	mov     ax,1116h
 18394 00002B44 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18395                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18396                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18397                                  			; STACK: WORD file open mode
 18398                                  			; Return: CF set on error
 18399                                  
 18400 00002B46 5B                      	POP	BX			; clean stack
 18401                                  ;do_ret_label: ; 09/08/2018
 18402 00002B47 C3                      	retn
 18403                                  ;ENDIF
 18404                                  
 18405                                  TEST_RE_NET1:
 18406                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18407                                  	; 17/12/2022
 18408 00002B48 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18409 00002B4D 07                      	POP	ES
 18410                                  	; 18/05/2019
 18411 00002B4E 7409                    	JZ	short LOCAL_OPEN
 18412                                  
 18413                                  ;Extended open hooks
 18414                                  	; MSDOS 6.0
 18415 00002B50 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18416 00002B55 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18417                                  ;Extended open hooks
 18418                                  
 18419                                  ;IF NOT Installed
 18420                                  ;	transfer NET_OPEN
 18421                                  ;ELSE
 18422 00002B57 EBD7                    	jmp	short do_net_int2f
 18423                                  ;ENDIF
 18424                                  
 18425                                  LOCAL_OPEN:
 18426                                  	; MSDOS 3.3 & MSDOS 6.0
 18427 00002B59 E89CE7                  	call	ECritDisk
 18428                                  
 18429                                  ; DOS 3.3 FastOPen 6/16/86
 18430                                  
 18431                                  	;or	byte [FastOpenFlg],5
 18432 00002B5C 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18433                                  
 18434 00002B61 E8D612                  	call	GETPATH
 18435                                  
 18436                                  ; DOS 3.3 FastOPen 6/16/86
 18437                                  
 18438 00002B64 731D                    	JNC	short Open_found
 18439 00002B66 7511                    	JNZ	short bad_path2
 18440 00002B68 08C9                    	OR	CL,CL
 18441 00002B6A 740D                    	JZ	short bad_path2
 18442                                  OpenFNF:
 18443 00002B6C B80200                  	MOV	AX,error_file_not_found	; 2
 18444                                  OpenBadRet:
 18445                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18446                                  	; 12/08/2018
 18447                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18448                                  	; MSDOS 6.0
 18449 00002B6F 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18450 00002B75 F9                      	STC
 18451                                  	;call	LCritDisk
 18452                                  	; 16/12/2022
 18453 00002B76 E99AE7                  	jmp	LCritDisk
 18454                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18455                                  	;retn 	; 08/09/2018
 18456                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18457                                  	;jmp	Clear_FastOpen
 18458                                  
 18459                                  bad_path2:
 18460 00002B79 B80300                  	MOV	AX,error_path_not_found	; 3
 18461 00002B7C EBF1                    	JMP	short OpenBadRet
 18462                                  
 18463                                  Open_Bad_Access:
 18464 00002B7E B80500                  	MOV	AX,error_access_denied	; 5
 18465 00002B81 EBEC                    	JMP	short OpenBadRet
 18466                                  
 18467                                  Open_found:
 18468 00002B83 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18469 00002B85 08E4                    	OR	AH,AH
 18470 00002B87 783E                    	JS	short open_ok		; Devices don't have attributes
 18471 00002B89 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18472                                  	;mov	al,[es:bx+0Bh]
 18473 00002B8D 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18474 00002B91 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18475 00002B93 75E9                    	JNZ	short Open_Bad_Access
 18476 00002B95 A801                    	TEST	AL,attr_read_only	; check write on read only
 18477 00002B97 742E                    	JZ	short open_ok
 18478                                  
 18479                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18480                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18481                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18482                                  ; processing until the actual write operation:
 18483                                  ;
 18484                                  ; If FCB, then we change the mode to be read_only.
 18485                                  ; If net_FCB, then we change the mode to be read_only.
 18486                                  ; If not open for read then error.
 18487                                  
 18488 00002B99 1E                      	push	ds
 18489 00002B9A 56                      	push	si
 18490 00002B9B C536[9E05]              	LDS	SI,[THISSFT]
 18491                                  	;mov	cx,[si+2]
 18492 00002B9F 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18493                                  	; 17/12/2022
 18494                                  	;test	ch,80h
 18495 00002BA2 F6C580                  	test	ch,sf_isFCB>>8
 18496                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18497 00002BA5 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18498 00002BA7 88CA                    	MOV	DL,CL
 18499 00002BA9 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18500 00002BAC 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18501 00002BAF 7508                    	JNZ	short NormalOpen	; no
 18502                                  ResetAccess:
 18503                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18504                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18505                                  	; 16/12/2022
 18506 00002BB1 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18507                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18508 00002BB4 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18509 00002BB7 EB0C                    	JMP	SHORT FillSFT
 18510                                  
 18511                                  ; The SFT is normal. See if the requested access is open_for_read
 18512                                  
 18513                                  NormalOpen:
 18514 00002BB9 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18515 00002BBC 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18516 00002BBF 7404                    	JZ	short FillSFT
 18517 00002BC1 5E                      	pop	si
 18518 00002BC2 1F                      	pop	ds
 18519 00002BC3 EBB9                    	JMP	short Open_Bad_Access
 18520                                  ;
 18521                                  ; All done, restore registers and fill the SFT.
 18522                                  ;
 18523                                  FillSFT:
 18524 00002BC5 5E                      	pop	si
 18525 00002BC6 1F                      	pop	ds
 18526                                  open_ok:
 18527 00002BC7 E8841E                  	call	DOOPEN			; Fill in SFT
 18528                                  
 18529                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18530                                  	; 18/05/2019
 18531                                  	;and	byte [ss:FastOpenFlag],80h
 18532 00002BCA 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18533                                  	; 12/08/2018
 18534                                  	;and	byte [FastOpenFlg],Fast_yes	
 18535                                  
 18536                                  	; MSDOS 6.0
 18537 00002BD0 E84300                  	CALL	DO_SHARE_CHECK
 18538 00002BD3 7303                    	JNC	short SHARE_OK
 18539                                  	;call	LCritDisk
 18540                                  	; 16/12/2022
 18541 00002BD5 E93BE7                  	jmp	LCritDisk
 18542                                  	;;JMP	short Clear_FastOpen
 18543                                  	;retn	; 18/05/2019
 18544                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18545                                  	;jmp	short Clear_FastOpen	
 18546                                  
 18547                                  	; MSDOS 3.3
 18548                                  ;DO_SHARE_CHECK:
 18549                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18550                                  ;OpenShareRetry:
 18551                                  ;	push	cx			; Save number left to do
 18552                                  ;	call	SHARE_CHECK		; Final Check
 18553                                  ;	pop	cx			; CX = # left
 18554                                  ;	JNC	short SHARE_OK		; No problem with access
 18555                                  ;	call	Idle
 18556                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18557                                  ;OpenShareFail:
 18558                                  ;	LES	DI,[THISSFT]
 18559                                  ;	call	SHARE_ERROR
 18560                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18561                                  	
 18562                                  	;12/08/2018
 18563                                  	;mov	byte [ss:FastOpenFlg],0
 18564                                  	;08/09/2018
 18565                                  	;mov	byte [FastOpenFlg],0
 18566                                  	;call	LCritDisk
 18567                                  	;JMP	short Clear_FastOpen
 18568                                  	;retn
 18569                                  
 18570                                  SHARE_OK:
 18571                                  	; MSDOS 3.3 & MSDOS 6.0
 18572 00002BD8 B80300                  	MOV	AX,3
 18573 00002BDB C43E[9E05]              	LES	DI,[THISSFT]
 18574                                  ;if installed
 18575                                  	;call	JShare + 14 * 4
 18576 00002BDF FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18577                                  ;else
 18578                                  ;	Call	ShSU
 18579                                  ;endif
 18580 00002BE3 E82DE7                  	call	LCritDisk
 18581                                  	
 18582                                  	;FallThru Set_SFT_Mode
 18583                                  
 18584                                  ;----------------------------------------------------------------------------
 18585                                  ; Procedure Name : SET_SFT_MODE
 18586                                  ;
 18587                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18588                                  ;
 18589                                  ;   Inputs:
 18590                                  ;	ThisSFT points to SFT
 18591                                  ;
 18592                                  ;   Outputs:
 18593                                  ;	Carry clear
 18594                                  ;   Registers modified: AX.
 18595                                  ;---------------------------------------------------------------------------
 18596                                  
 18597                                  ;hkn; called from create. DS already set up to DOSDATA.
 18598                                  
 18599                                  SET_SFT_MODE:
 18600 00002BE6 C43E[9E05]              	LES	DI,[THISSFT]
 18601 00002BEA E80019                  	call	DEV_OPEN_SFT
 18602                                  	;test	word [es:di+2],8000h
 18603                                  	; 17/12/2022
 18604                                  	;test	byte [es:di+3],80h
 18605 00002BED 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18606                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18607 00002BF2 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18608 00002BF4 A1[3003]                	MOV	AX,[CurrentPDB]
 18609                                  	;mov	[es:di+31h],ax
 18610 00002BF7 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18611                                  
 18612                                  Clear_FastOpen:
 18613 00002BFB C3                      	retn			       ;;;;; DOS 3.3
 18614                                  
 18615                                  ;----------------------------------------------------------------------------
 18616                                  ; Procedure Name : SHARE_ERROR
 18617                                  ;
 18618                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18619                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18620                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18621                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18622                                  ;---------------------------------------------------------------------------
 18623                                  
 18624                                  SHARE_ERROR:
 18625                                  	; 17/12/2022
 18626                                  	;test	byte [es:di+3],80h
 18627 00002BFC 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18628                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18629 00002C01 7509                    	JNZ	short _HARD_ERR
 18630 00002C03 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18631 00002C07 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18632                                  	;CMP	CL,SHARING_COMPAT ; 0
 18633                                  	;JNE	short _NO_HARD_ERR
 18634                                  	; 21/09/2023
 18635 00002C0A 7505                    	jnz	short _NO_HARD_ERR
 18636                                  _HARD_ERR:
 18637 00002C0C E82A46                  	call	SHARE_VIOLATION
 18638                                  	;retnc				; User wants retry
 18639 00002C0F 73EA                    	jnc	short Clear_FastOpen
 18640                                  _NO_HARD_ERR:
 18641 00002C11 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18642 00002C14 F9                      	STC
 18643 00002C15 C3                      	retn
 18644                                  
 18645                                  ; MSDOS 6.0
 18646                                  ;----------------------------------------------------------------------------
 18647                                  ; Procedure Name : DO_SHARE_CHECK
 18648                                  ;
 18649                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18650                                  ; Functions: check file sharing mode is valid
 18651                                  ; Output: carry set, error
 18652                                  ;	  carry clear, share ok
 18653                                  ;----------------------------------------------------------------------------
 18654                                  
 18655                                  	; 18/05/2019 - Retro DOS v4.0
 18656                                  DO_SHARE_CHECK:
 18657 00002C16 E8DFE6                  	call	ECritDisk		; enter critical section
 18658                                  OPN_RETRY:
 18659 00002C19 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18660                                  OpenShareRetry:
 18661 00002C1D 51                      	push	cx			; Save number left to do
 18662 00002C1E E81346                  	call	SHARE_CHECK		; Final Check
 18663 00002C21 59                      	pop	cx			; CX = # left
 18664 00002C22 730E                    	JNC	short Share_Ok2		; No problem with access
 18665 00002C24 E8CAE5                  	call	Idle
 18666 00002C27 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18667                                  OpenShareFail:
 18668 00002C29 C43E[9E05]              	LES	DI,[THISSFT]
 18669 00002C2D E8CCFF                  	call	SHARE_ERROR
 18670 00002C30 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18671                                  Share_Ok2:
 18672                                  	;call	LCritDisk		; leave critical section
 18673                                  	;retn
 18674                                  	; 18/12/2022
 18675 00002C32 E9DEE6                  	jmp	LCritDisk
 18676                                  
 18677                                  ;-----------------------------------------------------------------------------
 18678                                  ; Procedure Name : Check_Access
 18679                                  ;
 18680                                  ; Inputs:
 18681                                  ;	AX is mode
 18682                                  ;	  High NIBBLE of AL (Sharing Mode)
 18683                                  ;		sharing_compat	   file is opened in compatibility mode
 18684                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18685                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18686                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18687                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18688                                  ;	  Low NIBBLE of AL (Access Mode)
 18689                                  ;		open_for_read	file is opened for reading
 18690                                  ;		open_for_write	file is opened for writing
 18691                                  ;		open_for_both	file is opened for both reading and writing.
 18692                                  ; Function:
 18693                                  ;	Check this access mode for correctness
 18694                                  ; Outputs:
 18695                                  ;	[open_access] = AL input
 18696                                  ;	Carry Clear
 18697                                  ;		Mode is correct
 18698                                  ;		AX unchanged
 18699                                  ;	Carry Set
 18700                                  ;		Mode is bad
 18701                                  ;		AX = error_invalid_access
 18702                                  ; No other registers effected
 18703                                  ;----------------------------------------------------------------------------
 18704                                  
 18705                                  Check_Access_AX:
 18706 00002C35 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18707 00002C38 53                      	PUSH	BX
 18708                                  
 18709                                  ;	If sharing, then test for special sharing mode for FCBs
 18710                                  
 18711 00002C39 88C3                    	MOV	BL,AL
 18712 00002C3B 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18713 00002C3E 803E[7205]FF            	CMP	byte [FSHARING],-1
 18714 00002C43 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18715 00002C45 80FB70                  	CMP	BL,SHARING_NET_FCB
 18716 00002C48 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18717                                  CheckShareMode:
 18718 00002C4A 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18719 00002C4D 770D                    	JA	short Make_Bad_Access
 18720                                  CheckAccessMode:
 18721 00002C4F 88C3                    	MOV	BL,AL
 18722 00002C51 80E30F                  	AND	BL,access_mask
 18723 00002C54 80FB02                  	CMP	BL,2
 18724 00002C57 7703                    	JA	short Make_Bad_Access
 18725 00002C59 5B                      	POP	BX
 18726 00002C5A F8                      	CLC
 18727 00002C5B C3                      	retn
 18728                                  
 18729                                  Make_Bad_Access:
 18730 00002C5C B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18731 00002C5F 5B                      	POP	BX
 18732 00002C60 F9                      	STC
 18733 00002C61 C3                      	retn
 18734                                  
 18735                                  ;============================================================================
 18736                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18737                                  ;============================================================================
 18738                                  ; 08/08/2018 - Retro DOS v3.0
 18739                                  ; 18/05/2019 - Retro DOS v4.0
 18740                                  
 18741                                  ;**	Low level routine for returning disk drive information from a local
 18742                                  ;	  or NET device
 18743                                  ;
 18744                                  ;	DISK_INFO
 18745                                  ;
 18746                                  ;	  Modification history:
 18747                                  ;
 18748                                  ;		Created: ARR 30 March 1983
 18749                                  
 18750                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18751                                  ;---------------------------------------------------------------------------
 18752                                  ; Procedure Name : DISK_INFO
 18753                                  ;
 18754                                  ; Inputs:
 18755                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18756                                  ;		(It MAY NOT be NUL, error not detected)
 18757                                  ; Function:
 18758                                  ;	Get Interesting Drive Information
 18759                                  ; Returns:
 18760                                  ;	DX = Number of free allocation units
 18761                                  ;	BX = Total Number of allocation units on disk
 18762                                  ;	CX = Sector size
 18763                                  ;	AL = Sectors per allocation unit
 18764                                  ;	AH = FAT ID BYTE
 18765                                  ;	Carry set if error (currently user FAILed to I 24)
 18766                                  ; Segs except ES preserved, others destroyed
 18767                                  ;----------------------------------------------------------------------------
 18768                                  
 18769                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18770                                  ;hkn; DOSDATA. 
 18771                                  
 18772                                  DISK_INFO:
 18773                                  	; 08/08/2018 - Retro DOS v3.0
 18774                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18775                                  
 18776 00002C62 E8D1E5                  	call	TestNet
 18777 00002C65 7306                    	JNC	short LOCAL_DSK_INFO
 18778                                  
 18779                                  ;IF NOT Installed
 18780                                  ;	transfer NET_DISK_INFO
 18781                                  ;ELSE
 18782                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18783                                  	;INT	2FH
 18784                                  	;return
 18785                                  
 18786 00002C67 B80C11                  	mov     ax,110Ch
 18787 00002C6A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18788                                  			; ES:DI -> current directory
 18789                                  			; Return: AL = sectors per cluster, BX = total clusters
 18790                                  			; CX = bytes per sector, DX = number of available clusters
 18791 00002C6C C3                      	retn
 18792                                  ;ENDIF
 18793                                  
 18794                                  LOCAL_DSK_INFO:
 18795 00002C6D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18796 00002C72 E883E6                  	call	ECritDisk
 18797 00002C75 E84B29                  	call	FATREAD_CDS		; perform media check.
 18798 00002C78 7241                    	JC	short CRIT_LEAVE
 18799 00002C7A BB0200                  	MOV	BX,2
 18800 00002C7D E8AD27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18801 00002C80 7239                    	JC	short CRIT_LEAVE
 18802 00002C82 C536[E205]              	LDS	SI,[CURBUF]
 18803                                  	;mov	ah,[si+20]
 18804 00002C86 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18805                                  
 18806                                  ;hkn; SS is DOSDATA
 18807 00002C89 16                      	push	ss
 18808 00002C8A 1F                      	pop	ds
 18809                                  	;mov	cx,[es:bp+0Dh]
 18810 00002C8B 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18811                                  
 18812                                  ; Examine the current free count. If it indicates that we have an invalid
 18813                                  ; count, do the expensive calculation.
 18814                                  
 18815                                  	;mov	dx,[es:bp+1Fh]
 18816 00002C8F 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18817 00002C93 83FAFF                  	CMP	DX,-1			; is it valid?
 18818 00002C96 7404                    	JZ	short DoScan
 18819                                  
 18820                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18821                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18822                                  ; the count.
 18823                                  
 18824 00002C98 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18825 00002C9A 7222                    	JB	short GotVal		; yes, trust it.
 18826                                  DoScan:
 18827 00002C9C 31D2                    	XOR	DX,DX
 18828 00002C9E 49                      	DEC	CX
 18829                                  SCANFREE:
 18830 00002C9F E88B27                  	call	UNPACK
 18831 00002CA2 7217                    	JC	short CRIT_LEAVE
 18832 00002CA4 7501                    	JNZ	short NOTFREECLUS
 18833 00002CA6 42                      	INC	DX			; A free one
 18834                                  NOTFREECLUS:
 18835 00002CA7 43                      	INC	BX			; Next cluster
 18836 00002CA8 E2F5                    	LOOP	SCANFREE
 18837 00002CAA 4B                      	DEC	BX			; BX was next cluster. Convert to
 18838                                  ReturnVals:
 18839 00002CAB 4B                      	DEC	BX			; count
 18840                                  	;mov	al,[es:bp+4]
 18841 00002CAC 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18842 00002CB0 FEC0                    	INC	AL			; Sectors/cluster
 18843                                  	;mov	cx,[es:bp+2]
 18844 00002CB2 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18845                                  	;mov	[es:bp+1Fh],dx
 18846 00002CB6 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18847 00002CBA F8                      	CLC
 18848                                  CRIT_LEAVE:
 18849                                  	;call	LCritDisk
 18850                                  	;retn
 18851                                  	; 17/12/2022
 18852 00002CBB E955E6                  	jmp	LCritDisk
 18853                                  
 18854                                  ; We have correctly computed everything previously. Load up registers for
 18855                                  ; return.
 18856                                  
 18857                                  GotVal: 
 18858 00002CBE 89CB                    	MOV	BX,CX			; get cluster count
 18859 00002CC0 EBE9                    	JMP	short ReturnVals
 18860                                  
 18861                                  ;============================================================================
 18862                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18863                                  ;============================================================================
 18864                                  ; 22/07/2018 - Retro DOS v3.0
 18865                                  
 18866                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18867                                  ;	NAME	DOS_SEARCH
 18868                                  
 18869                                  ;**	Low level routines for doing local and NET directory searches
 18870                                  ;
 18871                                  ;	DOS_SEARCH_FIRST
 18872                                  ;	DOS_SEARCH_NEXT
 18873                                  ;	RENAME_NEXT
 18874                                  ;
 18875                                  ;	Revision history:
 18876                                  ;
 18877                                  ;	    Created: ARR 30 March 1983
 18878                                  ;	    A000	version 4.00  Jan. 1988
 18879                                  ;	    A001	PTM 3564 -- search for fastopen
 18880                                  
 18881                                  ;Installed = TRUE
 18882                                  
 18883                                  ;--------------------------------------------------------------------------
 18884                                  ;
 18885                                  ; Procedure Name : DOS_SEARCH_FIRST
 18886                                  ;
 18887                                  ; Inputs:
 18888                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18889                                  ;		terminated)
 18890                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18891                                  ;		( = -1 if current dir not involved, else
 18892                                  ;		 Points to first char after last "/" of current dir part)
 18893                                  ;	[THISCDS] Points to CDS being used
 18894                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18895                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18896                                  ;	[DMAADD] Points to 53 byte buffer
 18897                                  ; Function:
 18898                                  ;	Initiate a search for the given file spec
 18899                                  ; Outputs:
 18900                                  ;	CARRY CLEAR
 18901                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18902                                  ;
 18903                                  ;	LOCAL
 18904                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18905                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18906                                  ;	    11 byte search name with Meta chars in it
 18907                                  ;	    Search Attribute Byte, attribute of search
 18908                                  ;	    WORD LastEnt value
 18909                                  ;	    WORD DirStart
 18910                                  ;	    4 byte pad
 18911                                  ;	    32 bytes of the directory entry found
 18912                                  ;	NET
 18913                                  ;	    21 bytes First byte has high bit set
 18914                                  ;	    32 bytes of the directory entry found
 18915                                  ;
 18916                                  ;	CARRY SET
 18917                                  ;	    AX = error code
 18918                                  ;		error_no_more_files
 18919                                  ;			No match for this file
 18920                                  ;		error_path_not_found
 18921                                  ;			Bad path (not in curr dir part if present)
 18922                                  ;		error_bad_curr_dir
 18923                                  ;			Bad path in current directory part of path
 18924                                  ; DS preserved, others destroyed
 18925                                  ;---------------------------------------------------------------------------
 18926                                  
 18927                                  ; 24/01/2024
 18928                                  %if 1
 18929                                  	; 17/05/2019 - Retro DOS v4.0
 18930                                  GET_FAST_SEARCH:
 18931                                  	; 22/07/2018
 18932                                  	; MSDOS 6.0
 18933                                  	; 17/12/2022
 18934 00002CC2 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18935                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18936                                  					;FO.trigger fastopen ;AN000;
 18937                                  	;call	DOS_SEARCH_FIRST
 18938                                  	;retn
 18939                                  	; 24/01/2024
 18940                                  	; 17/12/2022
 18941                                  	;jmp	DOS_SEARCH_FIRST
 18942                                  %endif
 18943                                  
 18944                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18945                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18946                                  
 18947                                  DOS_SEARCH_FIRST:
 18948                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18949                                  
 18950 00002CC8 C43E[A205]              	LES	DI,[THISCDS]
 18951 00002CCC 83FFFF                  	CMP	DI,-1
 18952 00002CCF 7506                    	JNZ	short TEST_RE_NET2
 18953                                  
 18954                                  ;IF NOT Installed
 18955                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18956                                  ;ELSE
 18957                                  	;mov	ax,1119h
 18958 00002CD1 B81911                  	MOV	AX,(MultNET<<8)|25
 18959 00002CD4 CD2F                    	INT	2Fh
 18960 00002CD6 C3                      	retn
 18961                                  ;ENDIF
 18962                                  
 18963                                  TEST_RE_NET2:
 18964                                  	;test	word [es:di+43h],8000h
 18965                                  	; 17/12/2022
 18966                                  	;test	byte [es:di+44h],80h
 18967                                  	; 28/12/2022
 18968 00002CD7 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 18969                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18970 00002CDC 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18971                                  
 18972                                  ;IF NOT Installed
 18973                                  ;	transfer NET_SEARCH_FIRST
 18974                                  ;ELSE
 18975                                  	;mov	ax,111Bh
 18976 00002CDE B81B11                  	MOV	AX,(MultNET<<8)|27
 18977 00002CE1 CD2F                    	INT	2FH
 18978 00002CE3 C3                      	retn
 18979                                  ;ENDIF
 18980                                  	; 18/05/2019 - Retro DOS v4.0
 18981                                  LOCAL_SEARCH_FIRST:
 18982 00002CE4 E811E6                  	call	ECritDisk
 18983                                  	; MSDOS 6.0
 18984                                  	;;test	word [DOS34_FLAG],400h
 18985                                  	; 17/12/2022
 18986                                  	;test	byte [DOS34_FLAG+1],04h
 18987 00002CE7 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18988                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18989 00002CEC 7405                    	JZ	short NOFN			;AN000;
 18990                                  	;or	byte [FastOpenFlg],1
 18991 00002CEE 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18992                                  NOFN:						;AN000;
 18993 00002CF3 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18994                                  
 18995                                  ; 03/02/2024
 18996                                  %if 0
 18997                                  	; MSDOS 6.0
 18998                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18999                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19000                                  %else
 19001                                  	; 03/02/2024
 19002 00002CF8 16                      	push	ss
 19003 00002CF9 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19004 00002CFA 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19005                                  getnext:				;AN000;
 19006 00002CFE AC                      	lodsb				;AN000;;FO. get char
 19007 00002CFF 08C0                    	or	al,al			;AN000;;FO. is it null
 19008 00002D01 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19009 00002D03 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19010 00002D05 75F7                    	jne	short getnext 		;AN000;;FO. no
 19011                                  %endif
 19012                                  	;and	byte [FastOpenFlg],80h
 19013 00002D07 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19014                                  NO_Question:	; 03/02/2024
 19015                                  norm_GETPATH:
 19016 00002D0C E82B11                  	call	GETPATH
 19017                                  	; BX = offset NAME1
 19018                                  ;_getdone:
 19019 00002D0F 7318                    	JNC	short find_check_dev
 19020 00002D11 7511                    	JNZ	short bad_path3
 19021 00002D13 08C9                    	OR	CL,CL
 19022 00002D15 740D                    	JZ	short bad_path3
 19023                                  find_no_more:
 19024                                  	;mov	ax,12h
 19025 00002D17 B81200                  	MOV	AX,error_no_more_files
 19026                                  BadBye:
 19027                                  	; MSDOS 6.0
 19028 00002D1A 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19029                                  
 19030 00002D20 F9                      	STC
 19031                                  	;call	LCritDisk
 19032                                  	;retn
 19033                                  	; 18/12/2022
 19034 00002D21 E9EFE5                  	jmp	LCritDisk
 19035                                  
 19036                                  bad_path3:
 19037                                  	;mov	ax,3
 19038 00002D24 B80300                  	MOV	AX,error_path_not_found
 19039 00002D27 EBF1                    	JMP	short BadBye
 19040                                  
 19041                                  find_check_dev:
 19042 00002D29 08E4                    	OR	AH,AH
 19043 00002D2B 790A                    	JNS	short found_entry
 19044 00002D2D C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19045 00002D33 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19046                                  found_entry:
 19047                                  
 19048                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19049                                  ; a search-next may not have wfp_start set correctly
 19050                                  
 19051 00002D37 C43E[2C03]              	LES	DI,[DMAADD]
 19052 00002D3B 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19053 00002D3F AC                      	LODSB
 19054 00002D40 2C40                    	SUB	AL,'A'-1                ; logical drive
 19055 00002D42 AA                      	STOSB				; High bit not set (local)
 19056                                  found_it:
 19057 00002D43 C43E[2C03]              	LES	DI,[DMAADD]
 19058 00002D47 47                      	INC	DI
 19059                                  
 19060                                  	; MSDOS 6.0
 19061 00002D48 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19062                                  	;test	byte [FastOpenFlg],10h
 19063 00002D49 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19064 00002D4E 7408                    	JZ	short notfast			  ;FO.;AN001;
 19065 00002D50 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19066 00002D52 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19067 00002D56 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19068                                  
 19069                                  notfast:
 19070 00002D58 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19071                                  movmov:
 19072                                  ; Special E5 code
 19073 00002D5B A4                      	MOVSB
 19074 00002D5C 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19075 00002D61 7505                    	JNZ	short NOTKANJB
 19076 00002D63 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19077                                  NOTKANJB:
 19078                                  	;MOV	CX,10
 19079                                  	;REP	MOVSB
 19080                                  	; 03/02/2024
 19081 00002D68 B90500                  	mov	cx,5
 19082 00002D6B F3A5                    	rep	movsw
 19083                                  
 19084                                  	; 08/09/2018
 19085 00002D6D 1F                      	POP	DS			;FO.;AN001; restore ds
 19086                                  
 19087 00002D6E A0[6B05]                	MOV	AL,[ATTRIB]
 19088 00002D71 AA                      	STOSB
 19089 00002D72 50                      	PUSH	AX			; Save AH device info
 19090 00002D73 A1[4803]                	MOV	AX,[LASTENT]
 19091 00002D76 AB                      	STOSW
 19092 00002D77 A1[C205]                	MOV	AX,[DIRSTART]
 19093 00002D7A AB                      	STOSW
 19094                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19095 00002D7B 83C704                  	ADD	DI,4
 19096 00002D7E 58                      	POP	AX			; Recover AH device info
 19097 00002D7F 08E4                    	OR	AH,AH
 19098 00002D81 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19099 00002D83 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19100 00002D88 7510                    	JNZ	short OKSTORE
 19101                                  
 19102                                  	; MSDOS 6.0
 19103 00002D8A F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19104                                  					;AN000;;FO. from fastopen and is good
 19105 00002D8F 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19106                                  
 19107                                  	; The user has specified the root directory itself, rather than some
 19108                                  	; contents of it. We can't "find" that.
 19109                                  
 19110 00002D91 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19111                                  					;   stuffing a -1 at Lastent
 19112 00002D97 E97DFF                  	JMP	find_no_more
 19113                                  
 19114                                  OKSTORE:
 19115 00002D9A 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19116                                  DOSREL:
 19117                                  	; BX = offset NAME1 (from GETPATH)
 19118 00002D9E 89DE                    	MOV	SI,BX			; SI-> start of entry
 19119                                  
 19120                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19121                                  
 19122                                  	;;mov	cx,32
 19123                                  	;MOV	CX,dir_entry.size
 19124                                  	; 03/02/2024
 19125 00002DA0 B91000                  	mov	cx,dir_entry.size>>1
 19126                                  ;;;;; 7/29/86
 19127 00002DA3 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19128                                  	;REP	MOVSB
 19129 00002DA5 F3A5                    	rep	movsw
 19130                                  	;
 19131 00002DA7 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19132 00002DA9 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19133 00002DAD 7504                    	JNZ	short NO05
 19134 00002DAF 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19135                                  NO05:
 19136                                  
 19137                                  ;;;;; 7/29/86
 19138                                  
 19139                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19140                                  	; 16/12/2022
 19141                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19142                                  	; MSDOS 6.0
 19143                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19144                                  	; 18/05/2019 - Retro DOS v4.0
 19145 00002DB3 16                      	push	ss
 19146 00002DB4 1F                      	pop	ds
 19147                                  	; 16/12/2022
 19148 00002DB5 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19149                                  
 19150                                  ;hkn; SS is DOSDATA
 19151                                  	;push	ss
 19152                                  	;pop	ds
 19153 00002DBA F8                      	CLC
 19154                                  	;call	LCritDisk
 19155                                  	;retn
 19156                                  	; 16/12/2022
 19157 00002DBB E955E5                  	jmp	LCritDisk
 19158                                  
 19159                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19160                                  ;----------------------------------------------------------------------------
 19161                                  ;
 19162                                  ; Procedure Name : DOS_SEARCH_NEXT
 19163                                  ;
 19164                                  ; Inputs:
 19165                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19166                                  ;	    (only first 21 bytes must have valid information)
 19167                                  ; Function:
 19168                                  ;	Look for subsequent matches
 19169                                  ; Outputs:
 19170                                  ;	CARRY CLEAR
 19171                                  ;	    The 53 bytes at DMAADD are updated for next call
 19172                                  ;		(see DOS_SEARCH_FIRST)
 19173                                  ;	CARRY SET
 19174                                  ;	    AX = error code
 19175                                  ;		error_no_more_files
 19176                                  ;			No more files to find
 19177                                  ; DS preserved, others destroyed
 19178                                  ;---------------------------------------------------------------------------
 19179                                  
 19180                                  ;hkn; called from search.asm. DS already set up at this point.
 19181                                  
 19182                                  DOS_SEARCH_NEXT:
 19183 00002DBE C43E[2C03]              	LES	DI,[DMAADD]
 19184 00002DC2 268A05                  	MOV	AL,[ES:DI]
 19185 00002DC5 A880                    	TEST	AL,80H			; Test for NET
 19186 00002DC7 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19187                                  ;IF NOT Installed
 19188                                  ;	transfer NET_SEARCH_NEXT
 19189                                  ;ELSE
 19190                                  	;mov	ax,111Ch
 19191 00002DC9 B81C11                  	MOV	AX,(MultNET<<8)|28
 19192 00002DCC CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19193                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19194                                  		     ; Return: CF set on error, AX = DOS error code
 19195                                  		     ; CF clear if successful
 19196 00002DCE C3                      	retn
 19197                                  ;ENDIF
 19198                                  
 19199                                  LOCAL_SEARCH_NEXT:
 19200                                  	;AL is drive A=1
 19201                                  	;mov	byte [EXTERR_LOCUS],2
 19202 00002DCF C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19203 00002DD4 E821E5                  	call	ECritDisk
 19204                                  
 19205                                  ;hkn; DummyCDS is in DOSDATA
 19206 00002DD7 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19207                                  ;hkn; Segment address is DOSDATA - use ds
 19208                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19209 00002DDD 8C1E[A405]              	mov	[THISCDS+2],DS
 19210                                  
 19211 00002DE1 0440                    	ADD	AL,'A'-1
 19212 00002DE3 E8E33A                  	call	InitCDS
 19213                                  
 19214                                  ;	call	GETTHISDRV		; Set CDS pointer
 19215                                  
 19216 00002DE6 7246                    	JC	short No_files		; Bogus drive letter
 19217 00002DE8 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19218                                  	;les	bp,[es:di+45h]
 19219 00002DEC 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19220 00002DF0 E83FD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19221                                  
 19222                                  	; 16/12/2022
 19223 00002DF3 268A4600                	mov	al,[ES:BP]
 19224                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19225                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19226 00002DF7 A2[7605]                	mov	[THISDRV],AL
 19227                                  	;mov	word [CREATING],0E500h
 19228 00002DFA C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19229 00002E00 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19230 00002E05 C536[2C03]              	LDS	SI,[DMAADD]
 19231 00002E09 AC                      	LODSB				; Drive Byte
 19232                                  
 19233                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19234                                  RENAME_NEXT:
 19235                                  	;context ES
 19236 00002E0A 16                      	push	ss
 19237 00002E0B 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19238                                  
 19239                                  ;hkn; NAME1 is in DOSDATA
 19240 00002E0C BF[4B05]                	MOV	DI,NAME1
 19241                                  
 19242 00002E0F B90B00                  	MOV	CX,11
 19243 00002E12 F3A4                    	REP	MOVSB			; Search name
 19244 00002E14 AC                      	LODSB				; Attribute
 19245                                  
 19246                                  ;hkn; SS override
 19247 00002E15 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19248 00002E19 AD                      	LODSW				; LastEnt
 19249 00002E1A 09C0                    	OR	AX,AX
 19250                                  	; 03/02/2024
 19251                                  	;JNS	short cont_load
 19252 00002E1C 7810                    	js	short No_files
 19253                                  ;No_files:
 19254                                  	;JMP	find_no_more
 19255                                  
 19256                                  cont_load:
 19257 00002E1E 50                      	PUSH	AX			; Save LastEnt
 19258 00002E1F AD                      	LODSW				; DirStart
 19259 00002E20 89C3                    	MOV	BX,AX
 19260                                  
 19261                                  ;hkn; SS is DOSDATA
 19262                                  	;context DS
 19263 00002E22 16                      	push	ss
 19264 00002E23 1F                      	pop	ds
 19265 00002E24 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19266                                  	;invoke	SetDirSrch
 19267 00002E28 E8B20F                  	call	SETDIRSRCH
 19268 00002E2B 7304                    	JNC	short SEARCH_GOON
 19269 00002E2D 58                      	POP	AX			; Clean stack
 19270                                  	;JMP	short No_files
 19271                                  	; 03/02/2024
 19272                                  No_files:
 19273 00002E2E E9E6FE                  	JMP	find_no_more
 19274                                  
 19275                                  SEARCH_GOON:
 19276 00002E31 E88912                  	call	STARTSRCH
 19277 00002E34 58                      	POP	AX
 19278 00002E35 E8780F                  	call	GETENT
 19279 00002E38 72F4                    	JC	short No_files
 19280 00002E3A E8B00E                  	call	NEXTENT
 19281 00002E3D 72EF                    	JC	short No_files
 19282 00002E3F 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19283 00002E41 E9FFFE                  	JMP	found_it ; 10/08/2018
 19284                                  
 19285                                  ; MSDOS 6.0
 19286                                  ;---------------------------------------------------------------------------
 19287                                  ;
 19288                                  ; Procedure Name : CHECK_QUESTION
 19289                                  ;
 19290                                  ; Input: [WFP_START]= pointer to final path
 19291                                  ; Function: check '?' char
 19292                                  ; Output: carry clear, if no '?'
 19293                                  ;	 carry set, if '?' exists
 19294                                  ;---------------------------------------------------------------------------
 19295                                  
 19296                                  ; 03/02/2024
 19297                                  %if 0
 19298                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19299                                  CHECK_QUESTION:
 19300                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19301                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19302                                  	push	ss
 19303                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19304                                  	; 16/12/2022
 19305                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19306                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19307                                  	;mov	si,[ss:WFP_START]
 19308                                  getnext:				;AN000;
 19309                                  	LODSB				;AN000;;FO. get char
 19310                                  	OR	AL,AL			;AN000;;FO. is it null
 19311                                  	JZ	short NO_Question	;AN000;;FO. yes
 19312                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19313                                  	JNZ	short getnext 		;AN000;;FO. no
 19314                                  	STC				;AN000;;FO.
 19315                                  NO_Question:				;AN000;
 19316                                  	retn				;AN000;;FO.
 19317                                  %endif
 19318                                  
 19319                                  ;============================================================================
 19320                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19321                                  ;============================================================================
 19322                                  ; 23/07/2018 - Retro DOS v3.0
 19323                                  ; 18/05/2019 - Retro DOS v4.0
 19324                                  
 19325                                  ;**
 19326                                  ;
 19327                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19328                                  ;  If process has NET resources a close all is sent out over the net.
 19329                                  ;
 19330                                  ;   DOS_ABORT
 19331                                  ;
 19332                                  ;   Modification history:
 19333                                  ;
 19334                                  ;       Created: ARR 30 March 1983
 19335                                  ;
 19336                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19337                                  ;				being terminated only if it is busy.
 19338                                  ;
 19339                                  
 19340                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19341                                  ;--------------------------------------------------------------------------
 19342                                  ;
 19343                                  ; Procedure Name : DOS_ABORT
 19344                                  ;
 19345                                  ; Inputs:
 19346                                  ;       [CurrentPDB] set to PID of process aborting
 19347                                  ; Function:
 19348                                  ;       Close all files and free all SFTs for this PID
 19349                                  ; Returns:
 19350                                  ;       None
 19351                                  ; All destroyed except stack
 19352                                  ;---------------------------------------------------------------------------
 19353                                  
 19354                                  DOS_ABORT:
 19355 00002E44 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19356 00002E49 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19357                                  reset_free_jfn:
 19358 00002E4E 89CB                    	MOV     BX,CX
 19359 00002E50 51                      	PUSH    CX
 19360 00002E51 4B                      	DEC     BX                      ; get jfn (start with last one)
 19361                                  
 19362 00002E52 E8A837                  	CALL	_$CLOSE
 19363 00002E55 59                      	POP     CX
 19364 00002E56 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19365                                  
 19366                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19367                                  ; are running in the no-sharing no-network environment, we are simulating the
 19368                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19369                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19370                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19371                                  ;
 19372                                  ; If sharing is loaded, then the following call to close process will
 19373                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19374                                  ;
 19375                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19376                                  ; known network resources. These resources are then responsible for cleaning
 19377                                  ; up after this process.
 19378                                  ;
 19379                                  ; Sleazy, eh?
 19380                                  
 19381                                  	;context DS			; SS is DOSDATA
 19382 00002E58 16                      	push	ss
 19383 00002E59 1F                      	pop	ds  ; 09/09/2018
 19384                                  
 19385                                  	;CallInstall Net_Abort, MultNET, 29
 19386 00002E5A B81D11                  	mov	ax,111Dh
 19387 00002E5D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19388                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19389                                  			; DS???, SS = DOS CS
 19390                                  ;if installed
 19391 00002E5F FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19392                                  ;else
 19393                                  ;	call 	MFTCloseP
 19394                                  ;endif
 19395                                  
 19396                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19397                                  ; counts.
 19398                                  					; SS override
 19399 00002E63 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19400                                  	;mov	cx,[es:di+4]
 19401 00002E68 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19402 00002E6C E317                    	jcxz    FCBScanDone
 19403                                  	;lea	di,[di+6]
 19404 00002E6E 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19405 00002E71 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19406                                  FCBTest:
 19407                                  	;cmp	[es:di+31h],ax
 19408 00002E75 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19409 00002E79 7505                    	jnz	short FCBNext		; no, skip it
 19410 00002E7B 26C7050000              	mov	word [es:di],0
 19411                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19412                                  FCBNext:
 19413 00002E80 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19414 00002E83 E2F0                    	loop    FCBTest
 19415                                  FCBScanDone:
 19416                                  
 19417                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19418                                  
 19419 00002E85 31DB                    	XOR     BX,BX
 19420                                  Scan:
 19421 00002E87 53                      	push    bx
 19422 00002E88 E8ED36                  	call	SFFromSFN
 19423 00002E8B 5B                      	pop     bx
 19424                                  	;jnc	short Scan1
 19425                                  	;retn
 19426                                  
 19427                                  	; 18/12/2022
 19428                                  	;jc	short NO_Question ; retn
 19429                                  	; 03/02/2024
 19430 00002E8C 7234                    	jc	short RET2
 19431                                  
 19432                                  ;M038
 19433                                  ; Do what the comment above says, check for busy state
 19434                                  
 19435                                  Scan1:
 19436                                  	;cmp	word [es:di],0
 19437                                  	;jz	short scan_next  ; MSDOS 3.3
 19438                                  	; MSDOS 6.0
 19439 00002E8E 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19440                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19441                                  				; Is Sft busy? ;M038
 19442 00002E92 7519                    	jnz	short scan_next
 19443                                  ;
 19444                                  ; we have a SFT that is busy. See if it is for the current process
 19445                                  ;
 19446 00002E94 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19447                                  	;cmp	[es:di+31h],ax
 19448 00002E98 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19449 00002E9C 750F                    	jnz	short scan_next
 19450 00002E9E 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19451                                  	;cmp	[es:di+2Fh],ax
 19452 00002EA2 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19453 00002EA6 7505                    	jnz	short scan_next
 19454                                  
 19455                                  ; This SFT is labelled as ours.
 19456                                  
 19457 00002EA8 26C7050000              	mov	word [es:di],0
 19458                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19459                                  scan_next:
 19460 00002EAD 43                      	inc     bx
 19461 00002EAE EBD7                    	jmp     short Scan
 19462                                  
 19463                                  ;============================================================================
 19464                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19465                                  ;============================================================================
 19466                                  ; 23/07/2018 - Retro DOS v3.0
 19467                                  ; 18/05/2019 - Retro DOS v4.0
 19468                                  
 19469                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19470                                  ;
 19471                                  ;	DOS_CLOSE
 19472                                  ;	DOS_COMMIT
 19473                                  ;	FREE_SFT
 19474                                  ;	SetSFTTimes
 19475                                  ;
 19476                                  ;	Revision history:
 19477                                  ;
 19478                                  ;	   AN000  version 4.00	Jan. 1988
 19479                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19480                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19481                                  
 19482                                  ;Installed = TRUE
 19483                                  
 19484                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19485                                  ;---------------------------------------------------------------------------
 19486                                  ;
 19487                                  ; Procedure Name : DOS_CLOSE
 19488                                  ;
 19489                                  ; Inputs:
 19490                                  ;	[THISSFT] set to the SFT for the file being used
 19491                                  ; Function:
 19492                                  ;	Close the indicated file via the SFT
 19493                                  ; Returns:
 19494                                  ;	sf_ref_count decremented otherwise
 19495                                  ;	ES:DI point to SFT
 19496                                  ;	Carry set if error
 19497                                  ;	    AX has error code
 19498                                  ; DS preserved, others destroyed
 19499                                  ;---------------------------------------------------------------------------
 19500                                  
 19501                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19502                                  
 19503                                  ; 18/05/2019 - Retro DOS v4.0
 19504                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19505                                  
 19506                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19507                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19508                                  
 19509                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19510                                  
 19511                                  DOS_CLOSE:
 19512 00002EB0 C43E[9E05]              	LES	DI,[THISSFT]
 19513                                  	;mov	bx,[ES:DI+5]
 19514 00002EB4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19515                                  
 19516                                  ; Network closes are handled entirely by the net code.
 19517                                  
 19518                                  	;;test	bx,8000h
 19519                                  	;TEST	BX,sf_isnet
 19520                                  	; 17/12/2022
 19521                                  	;test	bh,80h
 19522 00002EB8 F6C780                  	test	bh,(sf_isnet>>8)
 19523 00002EBB 7406                    	JZ	short LocalClose
 19524                                  
 19525                                  	;CallInstall Net_Close,MultNET,6
 19526 00002EBD B80611                  	mov     ax,1106h
 19527 00002EC0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19528                                  			; ES:DI -> SFT
 19529                                  			; SFT DPB field -> DPB of drive containing file
 19530                                  			; Return: CF set on error, AX = DOS error code
 19531                                  			; CF clear if successful
 19532                                  RET2:		; 03/02/2024
 19533 00002EC2 C3                      	retn
 19534                                  
 19535                                  ; All closes release the sharing information.
 19536                                  ; No commit releases sharing information
 19537                                  ;
 19538                                  ; All closes decrement the ref count.
 19539                                  ; No commit decrements the ref count.
 19540                                  
 19541                                  LocalClose:
 19542 00002EC3 E832E4                  	call	ECritDisk
 19543 00002EC6 E85801                  	CALL	SetSFTTimes
 19544 00002EC9 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19545                                  
 19546                                  ;hkn; SS is DOSDATA
 19547                                  	;Context DS
 19548 00002ECC 16                      	push	ss
 19549 00002ECD 1F                      	pop	ds
 19550                                  
 19551 00002ECE 50                      	push	ax
 19552 00002ECF 53                      	push	bx
 19553 00002ED0 E88C43                  	call	ShareEnd
 19554 00002ED3 5B                      	pop	bx
 19555 00002ED4 58                      	pop	ax
 19556                                  
 19557                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19558                                  
 19559                                  CloseEntry:
 19560 00002ED5 50                      	PUSH	AX
 19561                                  
 19562                                  ; File clean or device does not get stamped nor disk looked at.
 19563                                  
 19564                                  	;test	bx,0C0h
 19565                                  	; 17/12/2022
 19566 00002ED6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19567                                  	;TEST	BX,devid_file_clean+devid_device
 19568 00002ED9 7403                    	JZ	short rdir
 19569                                  	; 14/11/2022
 19570 00002EDB E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19571                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19572                                  
 19573                                  ; Retrieve the directory entry for the file
 19574                                  
 19575                                  rdir:
 19576 00002EDE E8D100                  	CALL	DirFromSFT
 19577                                  	;mov	al,5
 19578 00002EE1 B005                    	MOV	AL,error_access_denied
 19579 00002EE3 7303                    	JNC	short clook
 19580                                  	; 14/11/2022
 19581 00002EE5 E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19582                                  	;jc	short CloseFinish ; 24/07/2019
 19583                                  clook:
 19584                                  
 19585                                  ; ES:DI points to entry
 19586                                  ; DS:SI points to SFT
 19587                                  ; ES:BX points to buffer header
 19588                                  
 19589 00002EE8 57                      	push	di
 19590 00002EE9 56                      	push	si
 19591                                  	;lea	si,[si+20h]
 19592 00002EEA 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19593                                  
 19594                                  ; ES:DI point to directory entry
 19595                                  ; DS:SI point to unpacked name
 19596                                  
 19597 00002EED E8FAE2                  	call	XCHGP
 19598                                  
 19599                                  ; ES:DI point to unpacked name
 19600                                  ; DS:SI point to directory entry
 19601                                  
 19602 00002EF0 E8580E                  	call	MetaCompare
 19603 00002EF3 E8F4E2                  	call	XCHGP
 19604 00002EF6 5E                      	pop	si
 19605 00002EF7 5F                      	pop	di
 19606 00002EF8 740C                    	JZ	short CLOSE_GO		; Name OK
 19607                                  Bye:	
 19608 00002EFA 89F7                    	MOV	DI,SI
 19609 00002EFC 1E                      	PUSH	DS
 19610 00002EFD 07                      	POP	ES			; ES:DI points to SFT
 19611 00002EFE 16                      	PUSH	SS
 19612 00002EFF 1F                      	POP	DS
 19613 00002F00 F9                      	STC
 19614                                  	;mov	al,2
 19615 00002F01 B002                    	MOV	AL,error_file_not_found
 19616 00002F03 E98E00                  	JMP	CloseFinish ; 24/07/2019
 19617                                  
 19618                                  	; 18/05/2019 - Retro DOS v4.0
 19619                                  CLOSE_GO:
 19620                                  	; 03/02/2024
 19621                                  	;mov	al,[si+4]
 19622 00002F06 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19623                                  	
 19624                                  	; MSDOS 6.0
 19625                                  	;test	word [si+2],8000h
 19626                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19627                                  	; 17/12/2022
 19628                                  	;test	byte [si+3],80h
 19629 00002F09 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19630 00002F0D 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19631                                  	; MSDOS 3.3 & MSDOS 6.0
 19632                                  	;mov	ch,[es:di+0Bh]
 19633 00002F0F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19634                                  
 19635                                  	; 03/02/2024
 19636                                  	;;mov	al,[si+4]
 19637                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19638                                  
 19639                                  ;hkn; SS override
 19640 00002F13 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19641                                  	; MSDOS 3.3
 19642                                  	;;call	MatchAttributes
 19643                                  	;;JNZ	short Bye		; attributes do not match
 19644                                  	; 18/05/2019
 19645 00002F17 EB04                    	JMP	SHORT setattr		;FT.
 19646                                  nofcb:
 19647                                  	; 03/02/2024
 19648                                  	; MSDOS 6.0
 19649                                  	;;mov	al,[si+4]
 19650                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19651                                  
 19652 00002F19 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19653                                  setattr:
 19654                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19655                                  	;or	byte [es:di+0Bh],20h
 19656 00002F1D 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19657                                  	; MSDOS 6.0
 19658                                  	;mov	ax,[es:di+1Ah]
 19659 00002F22 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19660                                  					;F.O. save old first cluster
 19661                                  ;hkn; SS override
 19662 00002F26 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19663                                  
 19664                                  ; 03/02/2024
 19665                                  %if 0
 19666                                  	;mov	ax,[si+0Bh]
 19667                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19668                                  	;mov	[es:di+1Ah],ax
 19669                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19670                                  	;mov	ax,[si+11h]
 19671                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19672                                  	;mov	[es:di+1Ch],ax
 19673                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19674                                  	;mov	ax,[si+13h]
 19675                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19676                                  	;mov	[es:di+1Eh],ax
 19677                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19678                                  	;mov	ax,[si+0Fh]
 19679                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19680                                  	;mov	[es:di+18h],ax
 19681                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19682                                  	;mov	ax,[si+0Dh]
 19683                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19684                                  	;mov	[es:di+16h],ax
 19685                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19686                                  %else
 19687                                  	; 03/02/2024 - Retro DOS v4.1
 19688 00002F2A 56                      	push	si
 19689 00002F2B 83C60B                  	add	si,0Bh
 19690 00002F2E AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19691                                  	;mov	[es:di+1Ah],ax
 19692 00002F2F 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19693 00002F33 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19694 00002F34 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19695 00002F38 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19696 00002F39 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19697 00002F3D AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19698 00002F3E 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19699 00002F42 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19700 00002F43 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19701 00002F47 5E                      	pop	si
 19702                                  %endif
 19703                                  
 19704                                  	; MSDOS 6.0
 19705                                  ;; File Tagging
 19706 00002F48 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19707                                  				  ;LB. if already dirty		    ;AN000;
 19708 00002F4D 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19709                                  	; 02/06/2019
 19710 00002F4F E8EF2A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19711                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19712                                  	;or	byte [es:bx+5],40h
 19713 00002F52 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19714                                  yesdirty4:
 19715 00002F57 1E                      	push	ds
 19716 00002F58 56                      	push	si
 19717                                  	; MSDOS 6.0
 19718                                  	;mov	cx,[si+0Bh]
 19719                                  	; 07/12/2022
 19720 00002F59 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19721                                  ;hkn; SS override
 19722 00002F5C 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19723                                  	; MSDOS 3.3 
 19724                                  	;push	ss
 19725                                  	;pop	ds
 19726                                  	;MOV	AL,[THISDRV]
 19727                                  ;;; 10/1/86  update fastopen cache
 19728                                  	; MSDOS 3.3 & MSDOS 6.0
 19729 00002F60 52                      	PUSH	DX
 19730 00002F61 B400                    	MOV	AH,0			; dir entry update
 19731 00002F63 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19732                                  	; MSDOS 6.0
 19733 00002F65 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19734 00002F67 750D                    	JNZ	short do_update2	;AN005; no, do update
 19735 00002F69 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19736                                  	;mov	di,[si+1Bh]
 19737 00002F6B 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19738                                  	;mov	cx,[si+1Dh]
 19739 00002F6E 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19740                                  	;mov	dh,[si+1Fh]
 19741 00002F71 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19742 00002F74 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19743                                  do_update2:				;AN011;F.O.
 19744                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19745                                  	; 
 19746 00002F76 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19747 00002F7B 7407                    	JZ	short do_update		;AN011;F.O. yes
 19748 00002F7D B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19749 00002F7F 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19750                                  do_update:				;AN005;
 19751                                  ;hkn; SS is DOSDATA
 19752                                  	;Context DS
 19753 00002F84 16                      	push	ss
 19754 00002F85 1F                      	pop	ds
 19755                                  	; MSDOS 3.3 & MSDOS 6.0
 19756 00002F86 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19757 00002F89 5A                      	POP	DX
 19758                                  
 19759                                  ;;; 10/1/86  update fastopen cache
 19760 00002F8A E8AF29                  	call	FLUSHBUF		; flush all relevant buffers
 19761 00002F8D 5F                      	pop	di
 19762 00002F8E 07                      	pop	es
 19763                                  	;mov	al,5
 19764 00002F8F B005                    	MOV	AL,error_access_denied
 19765 00002F91 7201                    	JC	short CloseFinish
 19766                                  FREE_SFT_OK:
 19767 00002F93 F8                      	CLC				; signal no error.
 19768                                  CloseFinish:
 19769                                  
 19770                                  ; Indicate to the device that the SFT is being closed.
 19771                                  
 19772                                  ;;;; 7/21/86
 19773 00002F94 9C                      	PUSHF				; save flag from DirFromSFT
 19774 00002F95 E85D15                  	call	DEV_CLOSE_SFT
 19775 00002F98 9D                      	POPF
 19776                                  ;;;; 7/21/86
 19777                                  ;
 19778                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19779                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19780                                  ; going to be moving from busy to free.
 19781                                  ;
 19782 00002F99 59                      	POP	CX			; get old ref count
 19783 00002F9A 9C                      	PUSHF
 19784                                  	; 03/02/2024
 19785                                  	;DEC	CX			; if cx != 1
 19786                                  	;JNZ	short NoFree		; then do NOT free SFT
 19787 00002F9B E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19788                                  
 19789 00002F9D 26890D                  	mov	[es:di],cx ; 0
 19790                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19791                                  NoFree:
 19792 00002FA0 E870E3                  	call	LCritDisk
 19793 00002FA3 9D                      	POPF
 19794 00002FA4 C3                      	retn
 19795                                  
 19796                                  ;---------------------------------------------------------------------------
 19797                                  ;
 19798                                  ; Procedure Name : FREE_SFT
 19799                                  ;
 19800                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19801                                  ; Flags preserved. Return old ref count in AX
 19802                                  ;
 19803                                  ; Note that busy is indicated by the SFT ref count being -1.
 19804                                  ;
 19805                                  ;---------------------------------------------------------------------------
 19806                                  
 19807                                  FREE_SFT:
 19808 00002FA5 9C                      	PUSHF		; Save carry state
 19809 00002FA6 268B05                  	mov	ax,[es:di]
 19810                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19811 00002FA9 48                      	DEC	AX
 19812 00002FAA 7501                    	JNZ	short SetCount
 19813 00002FAC 48                      	DEC	AX
 19814                                  SetCount:
 19815 00002FAD 268705                  	xchg	ax,[es:di]
 19816                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19817 00002FB0 9D                      	POPF
 19818 00002FB1 C3                      	retn
 19819                                  
 19820                                  	; 18/05/2019 - Retro DOS v4.0
 19821                                  
 19822                                  ;----------------------------------------------------------------------------
 19823                                  ;
 19824                                  ; Procedure Name : DirFromSFT
 19825                                  ;
 19826                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19827                                  ;
 19828                                  ;   Inputs:	ES:DI point to SFT
 19829                                  ;		DS = DOSDATA
 19830                                  ;   Outputs:
 19831                                  ;		EXTERR_LOCUS = errLOC_Disk
 19832                                  ;		CurBuf points to buffer
 19833                                  ;		Carry Clear -> operation OK
 19834                                  ;		    ES:DI point to entry
 19835                                  ;		    ES:BX point to buffer
 19836                                  ;		    DS:SI point to SFT
 19837                                  ;		Carry SET   -> operation failed
 19838                                  ;		    registers trashified
 19839                                  ;   Registers modified: ALL
 19840                                  ;----------------------------------------------------------------------------
 19841                                  
 19842                                  DirFromSFT:
 19843                                  	;mov	byte [EXTERR_LOCUS],2
 19844 00002FB2 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19845 00002FB7 06                      	push	es
 19846 00002FB8 57                      	push	di
 19847                                  	; MSDOS 3.3
 19848                                  	;;mov	dx,[es:di+1Dh]
 19849                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19850                                  	; MSDOS 6.0
 19851                                  	;mov	dx,[es:[di+1Dh]
 19852 00002FB9 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19853 00002FBD 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19854                                  	; 04/02/2024
 19855 00002FC1 52                      	push	dx
 19856                                  	;mov	dx,[es:di+1Bh]
 19857 00002FC2 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19858                                  	; 04/02/2024
 19859                                  	; 19/05/2019
 19860                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19861                                  	; MSDOS 3.3 & MSDOS 6.0
 19862 00002FC6 52                      	PUSH	DX
 19863 00002FC7 E8E925                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19864                                  					; [THISDPB] set
 19865 00002FCA 5A                      	POP	DX
 19866 00002FCB 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19867 00002FCF 721E                    	JC	short PopDone
 19868                                  	; 22/09/2023
 19869                                  	;XOR	AL,AL	; *		; Pre read
 19870                                  	;;mov	byte [ALLOWED],18h
 19871                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19872                                  	;call	GETBUFFR
 19873                                  	; 22/09/2023
 19874 00002FD1 E86428                  	call	GETBUFFER ; * 		; Pre read
 19875 00002FD4 7219                    	JC	short PopDone
 19876 00002FD6 5E                      	pop	si
 19877 00002FD7 1F                      	pop	ds			; Get back SFT pointer
 19878                                  
 19879                                  ;hkn; SS override
 19880 00002FD8 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19881                                  	;or	byte [es:di+5],4
 19882 00002FDD 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19883 00002FE2 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19884                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19885                                  	;lea	di,[di+20] ; MSDOS 6.0
 19886 00002FE4 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19887                                  	;mov	al,32
 19888 00002FE7 B020                    	MOV	AL,dir_entry.size
 19889                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19890 00002FE9 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19891 00002FEC 01C7                    	ADD	DI,AX			; Point at the entry
 19892 00002FEE C3                      	retn				; carry is clear
 19893                                  PopDone:
 19894 00002FEF 5F                      	pop	di
 19895 00002FF0 07                      	pop	es
 19896                                  PopDone_retn:
 19897 00002FF1 C3                      	retn
 19898                                  
 19899                                  ;----------------------------------------------------------------------------
 19900                                  ;
 19901                                  ;**	DOS_Commit - UPdate Directory Entries
 19902                                  ;
 19903                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19904                                  ;		(DS) = DOSGROUP
 19905                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19906                                  ;	USES	all but DS
 19907                                  ;
 19908                                  ;----------------------------------------------------------------------------
 19909                                  
 19910                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19911                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19912                                  
 19913                                  DOS_COMMIT:
 19914                                  	;hkn; called from srvcall. DS already set up.
 19915 00002FF2 C43E[9E05]              	LES	DI,[THISSFT]
 19916                                  	;mov	bx,[es:di+5]
 19917 00002FF6 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19918                                  	;test	bx,0C0h
 19919                                  	; 17/12/2022
 19920 00002FFA F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19921                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19922 00002FFD 75F2                    	jnz	short PopDone_retn
 19923                                  	;test	bx,8000h
 19924                                  	; 17/12/2022
 19925                                  	;test	bh,80h
 19926 00002FFF F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19927                                  	;TEST	BX,sf_isnet ; 8000h
 19928 00003002 7406                    	JZ	short LOCAL_COMMIT
 19929                                  
 19930                                  ;IF NOT Installed
 19931                                  ;	transfer NET_COMMIT
 19932                                  ;ELSE
 19933                                  	;mov	ax,1107h
 19934 00003004 B80711                  	MOV	AX,(MultNET<<8)|7
 19935 00003007 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19936                                  			; ES:DI -> SFT
 19937                                  			; SFT DPB field -> DPB of drive containing file
 19938                                  			; Return: CF set on error, AX = DOS error code
 19939                                  			; CF clear if successful
 19940                                  localcommit_retn: ; 18/12/2022	
 19941 00003009 C3                      	retn
 19942                                  ;ENDIF
 19943                                  
 19944                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19945                                  ; There are three ways we can do this. One is to enter a critical section to
 19946                                  ; protect a potential free. The second is to increment the ref count to mask
 19947                                  ; the close decrementing.
 19948                                  ;
 19949                                  ; The proper way is to let the caller's of close decide if a decrement should
 19950                                  ; be done. We do this by providing another entry into close after the
 19951                                  ; decrement and after the share information release.
 19952                                  
 19953                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19954                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19955                                  
 19956                                  LOCAL_COMMIT:
 19957 0000300A E8EBE2                  	call	ECritDisk
 19958                                  	; MSDOS 6.0
 19959 0000300D E8E8E2                  	call	ECritDisk	;PTM.
 19960 00003010 E80E00                  	call	SetSFTTimes
 19961 00003013 B8FFFF                  	MOV	AX,-1
 19962 00003016 E8BCFE                  	call	CloseEntry
 19963                                  	; MSDOS 6.0
 19964 00003019 9C                      	PUSHF			;PTM.				;AN000;
 19965 0000301A E8D014                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19966 0000301D 9D                      	POPF			;PTM.				;AN000;
 19967                                  	;call	LCritDisk	;PTM.				;AN000;
 19968                                  	; 18/12/2022
 19969 0000301E E9F2E2                  	jmp	LCritDisk
 19970                                  ;localcommit_retn:
 19971                                  ;	retn
 19972                                  
 19973                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19974                                  ;----------------------------------------------------------------------------
 19975                                  ;
 19976                                  ; Procedure Name : SetSFTTimes
 19977                                  ;
 19978                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19979                                  ;   Reflect these times in other SFT's for the same file.
 19980                                  ;
 19981                                  ;   Inputs:	ES:DI point to SFT
 19982                                  ;		BX = sf_flags set apprpriately
 19983                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19984                                  ;   Registers modified: All except ES:DI, BX, AX
 19985                                  ;
 19986                                  ;----------------------------------------------------------------------------
 19987                                  
 19988                                  	; 04/02/2024 - Retro DOS v4.1
 19989                                  
 19990                                  SetSFTTimes:
 19991                                  
 19992                                  ; 04/02/2024
 19993                                  %if 0
 19994                                  ;	File clean or device does not get stamped nor disk looked at.
 19995                                  	
 19996                                  	;test	bx,0C0h
 19997                                  	; 17/12/2022
 19998                                  	test	bl,devid_file_clean+devid_device
 19999                                  	;TEST	BX,devid_file_clean+devid_device
 20000                                  	;retnz				; clean or device => no timestamp
 20001                                  	jnz	short localcommit_retn
 20002                                  
 20003                                  ;	file and dirty. See if date is good
 20004                                  
 20005                                  	;test	bx,4000h
 20006                                  	; 17/12/2022
 20007                                  	;test	bh,40h
 20008                                  	test	bh,(sf_close_nodate>>8)
 20009                                  	;TEST	BX,sf_close_nodate
 20010                                  	;retnz				; nodate => no timestamp
 20011                                  	jnz	short localcommit_retn
 20012                                  %else
 20013                                  	; 04/02/2024
 20014                                  	; (PCDOS 7.1 IBMDOS.COM)
 20015                                  	;test	bx,40C0h
 20016 00003021 F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20017 00003025 75E2                    	jnz	short localcommit_retn
 20018                                  %endif
 20019                                  
 20020 00003027 50                      	push	ax
 20021 00003028 53                      	push	bx
 20022 00003029 E8BFDA                  	call	DATE16			; Date/Time to AX/DX
 20023                                  	;mov	[es:di+0Fh],ax
 20024 0000302C 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20025                                  	;mov	[es:di+0Dh],dx
 20026 00003030 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20027 00003034 31C0                    	XOR	AX,AX
 20028                                  ;if installed
 20029                                  	;call	JShare + 14 * 4
 20030 00003036 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20031                                  ;else
 20032                                  ;	call	ShSU
 20033                                  ;endif
 20034 0000303A 5B                      	pop	bx
 20035 0000303B 58                      	pop	ax
 20036 0000303C C3                      	retn
 20037                                  
 20038                                  ;============================================================================
 20039                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20040                                  ;============================================================================
 20041                                  ; 23/07/2018 - Retro DOS v3.0
 20042                                  ; 18/05/2019 - Retro DOS v4.0
 20043                                  
 20044                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20045                                  
 20046                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20047                                  ;NAME  DIRCALL
 20048                                  
 20049                                  ;**	Low level directory manipulation routines for making removing and
 20050                                  ;	  verifying local or NET directories
 20051                                  ;
 20052                                  ;	DOS_MKDIR
 20053                                  ;	DOS_CHDIR
 20054                                  ;	DOS_RMDIR
 20055                                  ;
 20056                                  ;	Modification history:
 20057                                  ;
 20058                                  ;		Created: ARR 30 March 1983
 20059                                  
 20060                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20061                                  ;---------------------------------------------------------------------------
 20062                                  ;
 20063                                  ; Procedure Name : DOS_MkDir
 20064                                  ;
 20065                                  ; Inputs:
 20066                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20067                                  ;		terminated)
 20068                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20069                                  ;		( = -1 if current dir not involved, else
 20070                                  ;		 Points to first char after last "/" of current dir part)
 20071                                  ;	[THISCDS] Points to CDS being used
 20072                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20073                                  ; Function:
 20074                                  ;	Make a new directory
 20075                                  ; Returns:
 20076                                  ;	Carry Clear
 20077                                  ;		No error
 20078                                  ;	Carry Set
 20079                                  ;	    AX is error code
 20080                                  ;		error_path_not_found
 20081                                  ;			Bad path (not in curr dir part if present)
 20082                                  ;		error_bad_curr_dir
 20083                                  ;			Bad path in current directory part of path
 20084                                  ;		error_access_denied
 20085                                  ;			Already exists, device name
 20086                                  ; DS preserved, Others destroyed
 20087                                  ;---------------------------------------------------------------------------
 20088                                  
 20089                                  ;hkn; called from path.asm. DS already set up.
 20090                                  
 20091                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20092                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20093                                  
 20094                                  ; 04/02/2024 - Retro DOS v4.1
 20095                                  
 20096                                  DOS_MKDIR:
 20097 0000303D E8F6E1                  	call	TestNet
 20098 00003040 7313                    	JNC	short LOCAL_MKDIR
 20099                                  
 20100                                  ;IF NOT Installed
 20101                                  ;	transfer NET_MKDIR
 20102                                  ;ELSE
 20103                                  	;mov	ax,1103h
 20104 00003042 B80311                  	MOV	AX,(MultNET<<8)|3
 20105 00003045 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20106                                  			; SS = DOS CS
 20107                                  			; SDA first filename pointer -> fully-qualified directory name
 20108                                  			; SDA CDS pointer -> current directory
 20109                                  			; Return: CF set on error, AX = DOS error code
 20110                                  			; CF clear if successful
 20111 00003047 C3                      	retn
 20112                                  ;ENDIF
 20113                                  
 20114                                  NODEACCERRJ:
 20115                                  	;mov	ax,5
 20116 00003048 B80500                  	MOV	AX,error_access_denied
 20117                                  _BadRet:
 20118 0000304B F9                      	STC
 20119                                  	;call	LCritDisk
 20120                                  	;retn
 20121                                  	; 18/12/2022
 20122 0000304C E9C4E2                  	jmp	LCritDisk
 20123                                  
 20124                                  PATHNFJ:
 20125 0000304F E8C1E2                  	call	LCritDisk
 20126 00003052 E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20127                                  
 20128                                  LOCAL_MKDIR:
 20129 00003055 E8A0E2                  	call	ECritDisk
 20130                                  
 20131                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20132                                  
 20133 00003058 8C16[A005]              	MOV	[THISSFT+2],SS
 20134                                  
 20135                                  ;hkn; DOSDATA
 20136 0000305C C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20137                                  
 20138                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20139                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20140                                  
 20141                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20142 00003062 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20143                                  				; make sure SHARER won't complain.
 20144                                  	;mov	al,10h
 20145 00003068 B010                    	MOV	AL,attr_directory
 20146 0000306A E82618                  	call	MakeNode
 20147 0000306D 72E0                    	JC	short PATHNFJ
 20148 0000306F 83F803                  	CMP	AX,3
 20149 00003072 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20150 00003074 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20151 00003078 C53E[E205]              	LDS	DI,[CURBUF]
 20152 0000307C 29FE                    	SUB	SI,DI
 20153 0000307E 56                      	PUSH	SI		; Pointer to dir_first
 20154                                  
 20155                                  ; 04/02/2024
 20156                                  %if 0
 20157                                  	; MSDOS 6.0
 20158                                  	;push	word [DI+8]
 20159                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20160                                  	; MSDOS 3.3 & MSDOS 6.0
 20161                                  	;push	word [di+6]
 20162                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20163                                  %else
 20164                                  	; 04/02/2024
 20165                                  	; (PCDOS 7.1 IBMDOS.COM)
 20166 0000307F C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20167 00003082 1E                      	push	ds
 20168 00003083 50                      	push	ax
 20169                                  %endif
 20170                                  
 20171 00003084 16                      	push	ss
 20172 00003085 1F                      	pop	ds
 20173                                  
 20174                                  	; 04/02/2024
 20175                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20176 00003086 31C0                    	XOR	AX,AX
 20177                                  	;MOV	[DIRSTART],AX	; Null directory
 20178 00003088 8706[C205]              	xchg	ax,[DIRSTART]
 20179 0000308C 50                      	push	ax
 20180                                  
 20181 0000308D E84017                  	call	NEWDIR
 20182 00003090 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20183 00003092 E81B0D                  	call	GETENT		; First entry
 20184 00003095 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20185 00003097 C43E[E205]              	LES	DI,[CURBUF]
 20186                                  
 20187                                  	; MSDOS 6.0
 20188 0000309B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20189                                  				 ;LB. if already dirty		    ;AN000;
 20190 000030A0 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20191 000030A2 E89C29                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20192                                  	
 20193                                  	; MSDOS 3.3 & MSDOS 6.0
 20194                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20195 000030A5 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20196                                  yesdirty5:
 20197                                  	;;add	di,16 ; MSDOS 3.3
 20198                                  	;add	di,20 ; MSDOS 6.0
 20199 000030AA 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20200 000030AD B82E20                  	MOV	AX,202EH	; ". "
 20201 000030B0 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20202 000030B4 E8B917                  	call	SETDOTENT
 20203 000030B7 B82E2E                  	MOV	AX,2E2EH	; ".."
 20204 000030BA 5A                      	POP	DX		; Parent
 20205 000030BB E8B217                  	call	SETDOTENT
 20206 000030BE C42E[8A05]              	LES	BP,[THISDPB]
 20207                                  	; 22/09/2023
 20208                                  	;;mov	byte [ALLOWED],18h
 20209                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20210 000030C2 5A                      	POP	DX		; Entry sector
 20211                                  	; MSDOS 6.0
 20212 000030C3 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20213                                  
 20214                                  	;XOR	AL,AL ; *	; Pre read
 20215                                  	;call	GETBUFFR
 20216                                  	; 22/09/2023
 20217 000030C7 E86E27                  	call	GETBUFFER ; *	 ;Pre read
 20218 000030CA 725B                    	JC	short NODEEXISTSP
 20219 000030CC 8B16[C205]              	MOV	DX,[DIRSTART]
 20220 000030D0 C53E[E205]              	LDS	DI,[CURBUF]
 20221                                  	;or	byte [di+5],4
 20222 000030D4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20223 000030D8 5E                      	POP	SI		; dir_first pointer
 20224 000030D9 01FE                    	ADD	SI,DI
 20225 000030DB 8914                    	MOV	[SI],DX
 20226 000030DD 31D2                    	XOR	DX,DX
 20227 000030DF 895402                  	MOV	[SI+2],DX	; Zero size
 20228 000030E2 895404                  	MOV	[SI+4],DX
 20229                                  DIRUP:
 20230                                  	; MSDOS 6.0
 20231 000030E5 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20232                                  	;			 ;LB. if already dirty 		   ;AN000;
 20233 000030E9 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20234 000030EB E85329                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20235                                  	
 20236                                  	; MSDOS 3.3 & MSDOS 6.0
 20237                                  	;or	byte [di+5],40h
 20238 000030EE 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20239                                  yesdirty6:
 20240 000030F2 16                      	push	ss
 20241 000030F3 1F                      	pop	ds
 20242 000030F4 268A4600                	mov	al,[es:bp]
 20243                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20244 000030F8 E84128                  	call	FLUSHBUF
 20245                                  	;mov	ax,5
 20246 000030FB B80500                  	MOV	AX,error_access_denied
 20247                                  	;call	LCritDisk
 20248                                  	;retn
 20249                                  	; 18/12/2022
 20250 000030FE E912E2                  	jmp	LCritDisk
 20251                                  
 20252                                  NODEEXISTSPOPDEL:
 20253 00003101 5A                      	POP	DX		; Parent
 20254 00003102 5A                      	POP	DX		; Entry sector
 20255                                  	; MSDOS 6.0 
 20256 00003103 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20257 00003107 C42E[8A05]              	LES	BP,[THISDPB]
 20258                                  	; 22/09/2023
 20259                                  	;;mov	byte [ALLOWED],18h
 20260                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20261                                  	;XOR	AL,AL ; *	; Pre read
 20262                                  	;call	GETBUFFR
 20263                                  	; 22/09/2023
 20264 0000310B E82A27                  	call	GETBUFFER ; *	; Pre read
 20265 0000310E 7217                    	JC	short NODEEXISTSP
 20266 00003110 C53E[E205]              	LDS	DI,[CURBUF]
 20267                                  	;or	byte [di+5],4
 20268 00003114 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20269 00003118 5E                      	POP	SI		; dir_first pointer
 20270 00003119 01FE                    	ADD	SI,DI
 20271                                  	;sub	si,1Ah ; 26
 20272 0000311B 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20273 0000311E C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20274 00003121 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20275                                  NODEEXISTS:
 20276 00003124 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20277                                  
 20278                                  NODEEXISTSP:
 20279 00003127 5E                      	POP	SI		; Clean stack
 20280 00003128 EBFA                    	JMP	short NODEEXISTS
 20281                                  
 20282                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20283                                  
 20284                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20285                                  ;----------------------------------------------------------------------------
 20286                                  ;
 20287                                  ; Procedure Name : DOS_ChDir
 20288                                  ;
 20289                                  ; Inputs:
 20290                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20291                                  ;		terminated)
 20292                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20293                                  ;		( = -1 if current dir not involved, else
 20294                                  ;		 Points to first char after last "/" of current dir part)
 20295                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20296                                  ; Function:
 20297                                  ;	Validate the path for potential new current directory
 20298                                  ; Returns:
 20299                                  ;	NOTE:
 20300                                  ;	    [SATTRIB] is modified by this call
 20301                                  ;	Carry Clear
 20302                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20303                                  ;		Caller must NOT set ID fields on a NET CDS.
 20304                                  ;	Carry Set
 20305                                  ;	    AX is error code
 20306                                  ;		error_path_not_found
 20307                                  ;			Bad path
 20308                                  ;		error_access_denied
 20309                                  ;			device or file name
 20310                                  ; DS preserved, Others destroyed
 20311                                  ;----------------------------------------------------------------------------
 20312                                  
 20313                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20314                                  
 20315                                  ; 18/05/2019 - Retro DOS v4.0
 20316                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20317                                  
 20318                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20319                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20320                                  
 20321                                  DOS_CHDIR:
 20322 0000312A E809E1                  	call	TestNet
 20323 0000312D 7306                    	JNC	short LOCAL_CHDIR
 20324                                  
 20325                                  ;IF NOT Installed
 20326                                  ;	transfer NET_CHDIR
 20327                                  ;ELSE
 20328                                  	;mov	ax,1105h
 20329 0000312F B80511                  	MOV	AX,(MultNET<<8)|5
 20330 00003132 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20331                                  			; SS = DOS CS
 20332                                  			; SDA first filename pointer -> fully-qualified directory name
 20333                                  			; SDA CDS pointer -> current directory
 20334                                  			; Return: CF set on error, AX = DOS error code
 20335                                  			; CF clear if successful
 20336 00003134 C3                      	retn
 20337                                  ;ENDIF
 20338                                  
 20339                                  LOCAL_CHDIR:
 20340 00003135 E8C0E1                  	call	ECritDisk
 20341                                  	; MSDOS 6.0
 20342                                  	;;test	word [es:di+43h],2000h
 20343                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20344                                  	; 17/12/2022
 20345                                  	;test	byte [es:di+44h],20h
 20346 00003138 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20347 0000313D 7406                    	JZ	short nojoin		   ;PTM.
 20348                                  	;mov	word [es:di+49h], 0FFFFh
 20349 0000313F 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20350                                  nojoin:
 20351                                  	; MSDOS 3.3 & MSDOS 6.0
 20352 00003145 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20353                                  	;mov	byte [SATTRIB],16h
 20354 0000314A C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20355                                  				; Dir calls can find these
 20356                                  ; DOS 3.3  6/24/86 FastOpen
 20357 0000314F 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20358 00003154 E8E30C                  	call	GETPATH
 20359                                  	
 20360                                  	; 04/02/2024
 20361                                  	;PUSHF						;AN000;
 20362 00003157 9F                      	lahf						
 20363 00003158 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20364                                  	;POPF						;AN000;
 20365 0000315D 9E                      	sahf
 20366                                  
 20367                                  ; DOS 3.3  6/24/86 FastOpen
 20368                                  
 20369                                  	; MSDOS 3.3
 20370                                  	;mov	byte [FastOpenFlg],0
 20371                                  	
 20372                                  	;mov	ax,3
 20373 0000315E B80300                  	MOV	AX,error_path_not_found
 20374 00003161 7207                    	JC	short ChDirDone
 20375 00003163 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20376 00003165 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20377 00003169 F8                      	CLC
 20378                                  ChDirDone:
 20379                                  	;call	LCritDisk
 20380                                  	;retn
 20381                                  	; 18/12/2022
 20382 0000316A E9A6E1                  	jmp	LCritDisk
 20383                                  
 20384                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20385                                  ;----------------------------------------------------------------------------
 20386                                  ;
 20387                                  ; Procedure Name : DOS_RmDir
 20388                                  ;
 20389                                  ; Inputs:
 20390                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20391                                  ;		terminated)
 20392                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20393                                  ;		( = -1 if current dir not involved, else
 20394                                  ;		 Points to first char after last "/" of current dir part)
 20395                                  ;	[THISCDS] Points to CDS being used
 20396                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20397                                  ; Function:
 20398                                  ;	Remove a directory
 20399                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20400                                  ; Returns:
 20401                                  ;	NOTE:
 20402                                  ;	    [SATTRIB] is modified by this call
 20403                                  ;	Carry Clear
 20404                                  ;		No error
 20405                                  ;	Carry Set
 20406                                  ;	    AX is error code
 20407                                  ;		error_path_not_found
 20408                                  ;			Bad path (not in curr dir part if present)
 20409                                  ;		error_bad_curr_dir
 20410                                  ;			Bad path in current directory part of path
 20411                                  ;		error_access_denied
 20412                                  ;			device or file name, root directory
 20413                                  ;			Bad directory ('.' '..' messed up)
 20414                                  ; DS preserved, Others destroyed
 20415                                  ;----------------------------------------------------------------------------
 20416                                  
 20417                                  ;hkn; called from path.asm. DS already set up.
 20418                                  
 20419                                  ; 18/05/2019 - Retro DOS v4.0
 20420                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20421                                  
 20422                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20423                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20424                                  
 20425                                  DOS_RMDIR:
 20426 0000316D E8C6E0                  	call	TestNet
 20427 00003170 7306                    	JNC	short LOCAL_RMDIR
 20428                                  
 20429                                  ;IF NOT Installed
 20430                                  ;	transfer NET_RMDIR
 20431                                  ;ELSE
 20432                                  	;mov	ax,1101h
 20433 00003172 B80111                  	MOV	AX,(MultNET<<8)|1
 20434 00003175 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20435                                  			; SS = DOS CS
 20436                                  			; SDA first filename pointer -> fully-qualified directory name
 20437                                  			; SDA CDS pointer -> current directory
 20438                                  			; Return: CF set on error, AX = DOS error code
 20439                                  			; CF clear if successful
 20440 00003177 C3                      	retn
 20441                                  ;ENDIF
 20442                                  
 20443                                  LOCAL_RMDIR:
 20444 00003178 E87DE1                  	call	ECritDisk
 20445 0000317B C606[4C03]00            	MOV	byte [NoSetDir],0
 20446                                  	;mov	byte [SATTRIB],16h
 20447 00003180 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20448                                  					; Dir calls can find these
 20449 00003185 E8B20C                  	call	GETPATH
 20450 00003188 720C                    	JC	short NOPATH		; Path not found
 20451 0000318A 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20452 0000318C 8B3E[C205]              	MOV	DI,[DIRSTART]
 20453 00003190 09FF                    	OR	DI,DI			; Root ?
 20454 00003192 750E                    	JNZ	short rmdir_get_buf	; No
 20455 00003194 EB09                    	JMP	SHORT NOTDIRPATH
 20456                                  
 20457                                  NOPATH:
 20458                                  	;mov	ax,3
 20459 00003196 B80300                  	MOV	AX,error_path_not_found
 20460 00003199 E9AFFE                  	JMP	_BadRet
 20461                                  
 20462                                  NOTDIRPATHPOP:
 20463 0000319C 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20464 0000319D 58                      	POP	AX
 20465                                  NOTDIRPATHPOP2:
 20466 0000319E 58                      	POP	AX
 20467                                  NOTDIRPATH:
 20468 0000319F E9A6FE                  	JMP	NODEACCERRJ
 20469                                  
 20470                                  rmdir_get_buf:
 20471 000031A2 C53E[E205]              	LDS	DI,[CURBUF]
 20472 000031A6 29FB                    	SUB	BX,DI		; Compute true offset
 20473 000031A8 53                      	PUSH	BX		; Save entry pointer
 20474                                  	
 20475                                  	; MSDOS 6.0
 20476                                  	;push	word [di+8]
 20477 000031A9 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20478                                  	
 20479                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20480                                  	;push	word [di+6]
 20481 000031AC FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20482                                  
 20483                                  ;hkn; SS is DOSDATA
 20484                                  	;context DS
 20485 000031AF 16                      	push	ss
 20486 000031B0 1F                      	pop	ds
 20487                                  	;context ES
 20488 000031B1 16                      	push	ss
 20489 000031B2 07                      	pop	es
 20490                                  
 20491                                  ;hkn; NAME1 is in DOSDATA
 20492 000031B3 BF[4B05]                	MOV	DI,NAME1
 20493 000031B6 B03F                    	MOV	AL,'?'
 20494 000031B8 B90B00                  	MOV	CX,11
 20495 000031BB F3AA                    	REP	STOSB
 20496 000031BD 30C0                    	XOR	AL,AL
 20497 000031BF AA                      	STOSB				; Nul terminate it
 20498 000031C0 E8FA0E                  	call	STARTSRCH		; Set search
 20499 000031C3 E8E70B                  	call	GETENTRY		; Get start of directory
 20500 000031C6 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20501 000031C8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20502 000031CC 89DE                    	MOV	SI,BX
 20503 000031CE AD                      	LODSW
 20504                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20505 000031CF 3D2E20                  	cmp	ax,202Eh ; ". "
 20506 000031D2 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20507                                  	;add	si,30
 20508 000031D4 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20509 000031D7 AD                      	LODSW
 20510                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20511                                  	;cmp	ax, '..'
 20512 000031D8 3D2E2E                  	cmp	ax,2E2Eh
 20513 000031DB 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20514                                  
 20515                                  ;hkn; SS is DOSDATA
 20516                                  	;context DS
 20517 000031DD 16                      	push	ss
 20518 000031DE 1F                      	pop	ds
 20519 000031DF C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20520 000031E5 E8C50B                  	call	GETENTRY		; Get next entry
 20521 000031E8 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20522                                  	;mov	byte [ATTRIB],16h
 20523 000031EA C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20524 000031EF E8C50A                  	call	SRCH			; Do a search
 20525 000031F2 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20526 000031F4 803E[4A03]00            	CMP	byte [FAILERR],0
 20527 000031F9 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20528 000031FB C42E[8A05]              	LES	BP,[THISDPB]
 20529 000031FF 8B1E[C205]              	MOV	BX,[DIRSTART]
 20530 00003203 E8B51B                  	call	RELEASE 		; Release data in sub dir
 20531 00003206 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20532 00003208 5A                      	POP	DX			; Sector # of entry
 20533 00003209 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20534                                  	; 22/09/2023
 20535                                  	;;mov	byte [ALLOWED],18h
 20536                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20537                                  	;XOR	AL,AL ; *		; Pre read
 20538                                  	;call	GETBUFFR		; Get sector back
 20539 0000320D E82826                  	call	GETBUFFER ; *		; Pre Read
 20540 00003210 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20541 00003212 C53E[E205]              	LDS	DI,[CURBUF]
 20542                                  	;or	byte [di+5],4
 20543 00003216 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20544 0000321A 5B                      	POP	BX			; Pointer to start of entry
 20545 0000321B 01FB                    	ADD	BX,DI			; Corrected
 20546 0000321D C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20547                                  
 20548                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20549 00003220 1E                      	PUSH	DS
 20550                                  
 20551                                  ;hkn; SS is DOSDATA
 20552                                  	;context DS
 20553 00003221 16                      	push	ss
 20554 00003222 1F                      	pop	ds
 20555                                  
 20556                                  	; MSDOS 6.0
 20557 00003223 E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20558                                  
 20559                                  ;	; MSDOS 3.3
 20560                                  ;_FastOpen_Delete:
 20561                                  ;	push	ax
 20562                                  ;	mov	si,[WFP_START]
 20563                                  ;	mov	bx,FastTable
 20564                                  ;	;mov	al,3  ; FONC_delete
 20565                                  ;	mov	al,FONC_delete
 20566                                  ;	call	far [BX+2]  ; FastTable+2
 20567                                  ;	pop	ax
 20568                                  
 20569 00003226 1F                      	POP	DS
 20570                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20571                                  
 20572 00003227 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20573                                  
 20574                                  ;============================================================================
 20575                                  ; DISK.ASM, MSDOS 6.0, 1991
 20576                                  ;============================================================================
 20577                                  ; 23/07/2018 - Retro DOS v3.0 
 20578                                  ; 04/05/2019 - Retro DOS v4.0
 20579                                  
 20580                                  ;	TITLE	DISK - Disk utility routines
 20581                                  ;	NAME	Disk
 20582                                  
 20583                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20584                                  ;
 20585                                  ;	SWAPCON
 20586                                  ;	SWAPBACK
 20587                                  ;	DOS_READ
 20588                                  ;	DOS_WRITE
 20589                                  ;	get_io_sft
 20590                                  ;	DirRead
 20591                                  ;	FIRSTCLUSTER
 20592                                  ;	SET_BUF_AS_DIR
 20593                                  ;	FATSecRd
 20594                                  ;	DREAD
 20595                                  ;	CHECK_WRITE_LOCK
 20596                                  ;	CHECK_READ_LOCK
 20597                                  ;
 20598                                  ;	Revision history:
 20599                                  ;
 20600                                  ;		A000   version 4.00  Jan. 1988
 20601                                  ;
 20602                                  ;----------------------------------------------------------------------------
 20603                                  ;
 20604                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20605                                  ;		error happens, DOS retries the entire block assuming that
 20606                                  ;		zero characters were transferred. Modified the code to take
 20607                                  ;		into account the number of characters transfered before
 20608                                  ;		retrying the operation.
 20609                                  ;
 20610                                  ;----------------------------------------------------------------------------
 20611                                  ;
 20612                                  
 20613                                  ;Installed = TRUE
 20614                                  
 20615                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20616                                  
 20617                                  ; **** Drivers for file input from devices ****
 20618                                  ;----------------------------------------------------------------------------
 20619                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20620                                  ;   of handles 0 and 1
 20621                                  ;
 20622                                  ;   Inputs:	DS is DOSDATA
 20623                                  ;   Outputs:	CONSWAP is set to false.
 20624                                  ;   Registers modified: none
 20625                                  ;----------------------------------------------------------------------------
 20626                                  
 20627                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20628                                  
 20629                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20630                                  ; 04/05/2019 - Retro DOS v4.0
 20631                                  
 20632                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20633                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20634                                  
 20635                                  SWAPBACK:
 20636 0000322A C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20637 0000322F C3                      	retn
 20638                                  
 20639                                  ;----------------------------------------------------------------------------
 20640                                  ;
 20641                                  ; Procedure Name : SWAPCON
 20642                                  ;
 20643                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20644                                  ;
 20645                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20646                                  ;		DS is DOSDATA
 20647                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20648                                  ;   Registers modified: none
 20649                                  ;--------------------------------------------------------------------------
 20650                                  
 20651                                  SWAPCON:
 20652                                  	; MSDOS 3.3
 20653                                  	;push	es
 20654                                  	;push	di
 20655                                  	;mov	byte [CONSWAP],1
 20656                                  	;les	di,[THISSFT]
 20657                                  	;mov	word [CONSFT],di
 20658                                  	;mov	word [CONSFT+2],es
 20659                                  	;pop	di
 20660                                  	;pop	es
 20661                                  	;retn
 20662                                  
 20663                                  	; MSDOS 6.0
 20664 00003230 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20665 00003235 50                      	push	ax
 20666 00003236 A1[9E05]                	mov	ax,[THISSFT]
 20667 00003239 A3[E605]                	mov	[CONSFT],ax
 20668 0000323C A1[A005]                	mov	ax,[THISSFT+2]
 20669 0000323F A3[E805]                	mov	[CONSFT+2],ax
 20670 00003242 58                      	pop	ax
 20671 00003243 C3                      	retn
 20672                                  
 20673                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20674                                  ; 04/05/2019 - Retro DOS v4.0
 20675                                  
 20676                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20677                                  ;-----------------------------------------------------------------------------
 20678                                  ;
 20679                                  ; Inputs:
 20680                                  ;	ThisSFT set to the SFT for the file being used
 20681                                  ;	[DMAADD] contains transfer address
 20682                                  ;	CX = No. of bytes to read
 20683                                  ;	DS = DOSDATA
 20684                                  ; Function:
 20685                                  ;	Perform read operation
 20686                                  ; Outputs:
 20687                                  ;    Carry clear
 20688                                  ;	SFT Position and cluster pointers updated
 20689                                  ;	CX = No. of bytes read
 20690                                  ;	ES:DI point to SFT
 20691                                  ;    Carry set
 20692                                  ;	AX is error code
 20693                                  ;	CX = 0
 20694                                  ;	ES:DI point to SFT
 20695                                  ; DS preserved, all other registers destroyed
 20696                                  ;
 20697                                  ;-----------------------------------------------------------------------------
 20698                                  
 20699                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20700                                  
 20701                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20702                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20703                                  
 20704                                  DOS_READ:
 20705 00003244 C43E[9E05]              	LES	DI,[THISSFT]
 20706                                  
 20707                                  ; Verify that the sft has been opened in a mode that allows reading.
 20708                                  
 20709                                  	;mov	al,[es:di+2]
 20710 00003248 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20711                                  	;and	al,0Fh
 20712 0000324C 240F                    	AND	AL,access_mask
 20713                                  	;cmp	al,1
 20714 0000324E 3C01                    	CMP	AL,open_for_write
 20715 00003250 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20716 00003252 E9CE05                  	jmp	SET_ACC_ERR
 20717                                  
 20718                                  READ_NO_MODE:
 20719 00003255 E8B304                  	call	SETUP
 20720 00003258 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20721 0000325A E8F2DF                  	call	IsSFTNet
 20722 0000325D 7408                    	JZ	short LOCAL_READ
 20723                                  
 20724                                  ;IF NOT Installed
 20725                                  ;	transfer NET_READ
 20726                                  ;ELSE
 20727                                  	;mov	ax,1108h
 20728 0000325F B80811                  	MOV	AX,(MultNET<<8)|8
 20729 00003262 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20730                                  			; ES:DI -> SFT
 20731                                  			; SFT DPB field -> DPB of drive containing file
 20732                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20733                                  			; Return: CF set on error, CX = bytes read
 20734 00003264 C3                      	retn
 20735                                  ;ENDIF
 20736                                  
 20737                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20738                                  ; except return immediately.
 20739                                  
 20740                                  NoIORet:
 20741 00003265 F8                      	CLC
 20742 00003266 C3                      	retn
 20743                                  
 20744                                  LOCAL_READ:
 20745                                  	;test	word [es:di+5],80h
 20746                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20747 00003267 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20748 0000326C 750E                    	JNZ	short READDEV
 20749                                  
 20750                                  	;mov	byte [EXTERR_LOCUS],2
 20751 0000326E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20752 00003273 E882E0                  	call	ECritDisk
 20753 00003276 E86D05                  	call	DISKREAD
 20754                                  
 20755                                  critexit:
 20756                                  	;call	LCritDisk
 20757                                  	;retn
 20758                                  	; 16/12/2022
 20759 00003279 E997E0                  	jmp	LCritDisk
 20760                                  
 20761                                  ; We are reading from a device. Examine the status of the device to see if we
 20762                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20763                                  ; null device, we can safely indicate no transfer.
 20764                                  
 20765                                  READDEV:
 20766                                  	;mov	byte [EXTERR_LOCUS],4
 20767 0000327C C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20768                                  	;mov	bl,[es:di+5]
 20769 00003281 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20770 00003285 C43E[2C03]              	LES	DI,[DMAADD]
 20771                                  	;test	bl,40h
 20772 00003289 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20773 0000328C 7407                    	JZ	short ENDRDDEVJ3
 20774                                  	;test	bl,4
 20775 0000328E F6C304                  	test	BL,devid_device_null	; NUL device?
 20776 00003291 7405                    	JZ	short TESTRAW 		; NO
 20777 00003293 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20778                                  ENDRDDEVJ3:
 20779                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20780                                  	;JMP	short ENDRDDEVJ2
 20781                                  	; 16/12/2022
 20782 00003295 E93F01                  	jmp	ENDRDDEV ; 04/05/2019
 20783                                  
 20784                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20785                                  ; bizarre std_con_string_input.
 20786                                  
 20787                                  TESTRAW:
 20788                                  	;test	bl,20h
 20789 00003298 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20790 0000329B 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20791                                  	;test	bl,1
 20792 0000329D F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20793 000032A0 7458                    	JZ	short NOTRDCON
 20794 000032A2 E96701                  	JMP	READCON
 20795                                  
 20796                                  DVRDRAW:
 20797 000032A5 06                      	PUSH	ES
 20798 000032A6 1F                      	POP	DS			; Xaddr to DS:DI
 20799                                  
 20800                                  	; 04/05/2019 - Retro DOS v4.0
 20801                                  
 20802                                  	; MSDOS 6.0
 20803                                  ;SR;
 20804                                  ;Check for win386 presence -- if present, do polled read of characters
 20805                                  
 20806 000032A7 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20807 000032AD 7408                    	jz	short ReadRawRetry	;not present
 20808 000032AF F6C301                  	test	bl,devid_device_con_in	;is it console device
 20809 000032B2 7403                    	jz	short ReadRawRetry	;no, do normal read
 20810 000032B4 E9A800                  	jmp	do_polling		;yes, do win386 polling loop
 20811                                  
 20812                                  ReadRawRetry:
 20813                                  
 20814                                  ; 07/02/2024
 20815                                  %if 0
 20816                                  	MOV	BX,DI			; DS:BX transfer addr
 20817                                  	; 06/02/2024 ; *
 20818                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20819                                  	;;MOV	DX,AX			; Start at 0
 20820                                  	;; 06/02/2024
 20821                                  	;cwd
 20822                                  	;call	SETREAD
 20823                                  	; 06/02/2024 ; *
 20824                                  	call	SETREAD_X
 20825                                  %else
 20826 000032B7 E82713                  	call	SETREAD_XJ
 20827                                  %endif
 20828                                  
 20829 000032BA 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20830                                  
 20831                                  ;hkn; SS override
 20832 000032BB 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20833 000032C0 E8A812                  	call	DEVIOCALL
 20834 000032C3 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20835 000032C5 B486                    	MOV	AH,86H			; Read error
 20836                                  
 20837                                  ;hkn; SS override
 20838 000032C7 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20839                                  	; MSDOS 3.3
 20840                                  	;test	di,8000h
 20841                                  	;jz	short CRDROK
 20842                                  	; MSDOS 6.0
 20843 000032CC 09FF                    	or	di,di
 20844 000032CE 7920                    	jns	short CRDROK		; no errors
 20845                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20846 000032D0 E8F11E                  	call	CHARHARD
 20847                                  
 20848                                  ; 06/02/2024 - Retrro DOS v5.0
 20849                                  %if 0
 20850                                  	MOV	DI,DX			; DS:DI is Xaddr
 20851                                  	; 04/05/2019
 20852                                  	; MSDOS 6.0
 20853                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20854                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20855                                  %else
 20856 000032D3 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20857 000032D8 29F9                    	sub	cx,di			; update transfer count
 20858 000032DA 01D7                    	add	di,dx			; update pointer
 20859                                  %endif
 20860                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20861 000032DC 08C0                    	OR	AL,AL
 20862 000032DE 7410                    	JZ	short CRDROK		; Ignore
 20863 000032E0 3C03                    	CMP	AL,3
 20864 000032E2 7403                    	JZ	short CRDFERR 		; fail.
 20865 000032E4 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20866 000032E5 EBD0                    	JMP	short ReadRawRetry	; Retry
 20867                                  
 20868                                  ; We have encountered a device-driver error. We have informed the user of it
 20869                                  ; and he has said for us to fail the system call.
 20870                                  
 20871                                  CRDFERR:
 20872 000032E7 5F                      	POP	DI			; Clean stack
 20873                                  DEVIOFERR:
 20874                                  
 20875                                  ;hkn; SS override
 20876 000032E8 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20877 000032ED E93105                  	jmp	SET_ACC_ERR_DS
 20878                                  
 20879                                  CRDROK:
 20880 000032F0 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20881 000032F1 89D7                    	MOV	DI,DX
 20882                                  
 20883                                  ;hkn; SS override
 20884 000032F3 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20885                                  	;JMP	SHORT ENDRDDEVJ3
 20886                                  	; 16/12/2022
 20887 000032F8 EB63                    	jmp	short ENDRDDEVJ2
 20888                                  
 20889                                  ; We are going to do a cooked read on some character device. There is a
 20890                                  ; problem here, what does the data look like? Is it a terminal device, line
 20891                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20892                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20893                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20894                                  ; included in data). this "simulates" the way con works in cooked mode
 20895                                  ; reading one line at a time. With file data, however, the lines will look
 20896                                  ; like, LF line CR. This is a little weird.
 20897                                  
 20898                                  NOTRDCON:
 20899                                  	;MOV	AX,ES
 20900                                  	;MOV	DS,AX
 20901                                  	; 07/02/2024
 20902 000032FA 06                      	push	es
 20903 000032FB 1F                      	pop	ds
 20904                                  
 20905                                  ; 07/02/2024
 20906                                  %if 0
 20907                                  	MOV	BX,DI
 20908                                  	; 06/02/2024 ; *
 20909                                  	;;XOR	DX,DX
 20910                                  	;;MOV	AX,DX
 20911                                  	;; 06/02/2024
 20912                                  	;xor	ax,ax
 20913                                  	;cwd
 20914                                  	PUSH	CX
 20915                                  	MOV	CX,1
 20916                                  	;call	SETREAD
 20917                                  	; 06/02/2024 ; *
 20918                                  	call	SETREAD_X
 20919                                  	POP	CX
 20920                                  %else
 20921 000032FC 51                      	push	cx
 20922 000032FD B90100                  	mov	cx,1
 20923 00003300 E8DE12                  	call	SETREAD_XJ
 20924 00003303 59                      	pop	cx
 20925                                  %endif
 20926                                  
 20927                                  ;hkn; SS override
 20928 00003304 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20929                                  	;lds	si,[si+7]
 20930 00003309 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20931                                  DVRDLP:
 20932 0000330C E89A1C                  	call	DSKSTATCHK
 20933 0000330F E85C12                  	call	DEVIOCALL2
 20934 00003312 57                      	PUSH	DI			; Save "count" done
 20935 00003313 B486                    	MOV	AH,86H
 20936                                  
 20937                                  ;hkn; SS override
 20938 00003315 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20939                                  	
 20940                                  	; MSDOS 3.3
 20941                                  	;test	di,8000h
 20942                                  	;jz	short CRDOK
 20943                                  	; MSDOS 6.0
 20944 0000331A 09FF                    	or	di,di
 20945 0000331C 7917                    	jns	short CRDOK
 20946                                  	
 20947 0000331E E8A31E                  	call	CHARHARD
 20948 00003321 5F                      	POP	DI
 20949                                  
 20950                                  ;hkn; SS override
 20951 00003322 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20952 00003329 3C01                    	CMP	AL,1
 20953 0000332B 74DF                    	JZ	short DVRDLP		; Retry
 20954 0000332D 3C03                    	CMP	AL,3
 20955 0000332F 74B7                    	JZ	short DEVIOFERR		; FAIL
 20956 00003331 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20957 00003333 EB12                    	JMP	SHORT DVRDIGN
 20958                                  
 20959                                  CRDOK:
 20960 00003335 5F                      	POP	DI
 20961                                  
 20962                                  ;hkn; SS override
 20963 00003336 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20964                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20965 0000333C 751F                    	JNZ	short ENDRDDEVJ2
 20966                                  	; 16/12/2022
 20967                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20968                                  
 20969 0000333E 1E                      	PUSH	DS
 20970                                  
 20971                                  ;hkn; SS override
 20972 0000333F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20973 00003344 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20974 00003346 1F                      	POP	DS
 20975                                  DVRDIGN:
 20976                                  
 20977                                  ;hkn; SS override
 20978 00003347 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20979 0000334C 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20980 00003353 47                      	INC	DI			; Next character
 20981 00003354 3C1A                    	CMP	AL,1Ah			; ^Z?
 20982                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20983 00003356 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20984                                  	; 16/12/2022
 20985                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20986 00003358 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20987 0000335A E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20988 0000335C 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20989                                  					;  AX=FFFF which is not likely
 20990                                  ENDRDDEVJ2:
 20991                                  	; 16/12/2022
 20992                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20993                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20994 0000335D EB78                    	jmp	ENDRDDEV
 20995                                  
 20996                                  	; 04/05/2019
 20997                                  
 20998                                  	; MSDOS 6.0
 20999                                  ;SR;
 21000                                  ;Polling code for raw read on CON when WIN386 is present
 21001                                  ;
 21002                                  ;At this point -- ds:di is transfer address
 21003                                  ;		  cx is count
 21004                                  
 21005                                  do_polling:
 21006                                  
 21007                                  ; 07/02/2024
 21008                                  %if 0
 21009                                  	mov	bx,di			;ds:bx is Xfer address
 21010                                  	; 06/02/2024 ; *
 21011                                  	;xor	ax,ax
 21012                                  	;;mov	dx,ax
 21013                                  	;; 06/02/2024
 21014                                  	;cwd
 21015                                  	;call	SETREAD			;prepare device packet
 21016                                  	; 06/02/2024 ; *
 21017                                  	call	SETREAD_X
 21018                                  %else
 21019 0000335F E87F12                  	call	SETREAD_XJ
 21020                                  %endif
 21021                                  
 21022                                  do_io:
 21023                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21024                                  
 21025 00003362 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21026 00003367 1E                      	push	ds
 21027 00003368 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21028 0000336D E8FB11                  	call	DEVIOCALL		;call device driver
 21029 00003370 1F                      	pop	ds
 21030                                  	
 21031                                  	;test	word [es:bx+3],8000h
 21032                                  	; 16/12/2022
 21033                                  	;test	byte [es:bx+4],80h
 21034 00003371 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21035                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21036 00003376 7413                    	jz	short check_busy	;no
 21037                                  
 21038 00003378 1E                      	push	ds
 21039 00003379 89FA                    	mov	dx,di
 21040                                  
 21041                                  invoke_charhard:	; 07/02/2024
 21042                                  	;invoke charhard		;invoke int 24h handler
 21043 0000337B E8461E                  	call	CHARHARD
 21044 0000337E 89D7                    	mov	di,dx
 21045 00003380 08C0                    	or	al,al
 21046 00003382 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21047 00003384 3C03                    	cmp	al,3
 21048 00003386 7438                    	jz	short devrderr		;user asked to fail
 21049 00003388 1F                      	pop	ds
 21050 00003389 EBD7                    	jmp	short do_io		;user asked to retry
 21051                                  
 21052                                  check_busy:
 21053                                  	;test	word [es:bx+3],200h
 21054                                  	; 16/12/2022
 21055 0000338B 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21056                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21057 00003390 7537                    	jnz	short no_char		;yes, no character available
 21058                                  
 21059                                  ;Character is available. Read in 1 character at a time until all characters
 21060                                  ;are read in or no character is available
 21061                                  
 21062 00003392 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21063 00003397 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21064 0000339D 1E                      	push	ds
 21065 0000339E 36C536[9E05]            	lds	si,[ss:THISSFT]
 21066 000033A3 E8C511                  	call	DEVIOCALL
 21067                                  
 21068 000033A6 89FA                    	mov	dx,di
 21069 000033A8 B486                    	mov	ah,86h
 21070                                  	;mov	di,[es:bx+3]
 21071 000033AA 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21072 000033AE F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21073                                  	;jz	short next_char		;no,read next character
 21074                                  	; 07/02/2024
 21075 000033B2 75C7                    	jnz	short invoke_charhard
 21076                                  
 21077                                  ; 07/02/2024
 21078                                  %if 0
 21079                                  	;invoke	charhard		;invoke int 24h handler
 21080                                  	call	CHARHARD
 21081                                  	mov	di,dx			;restore di
 21082                                  	or	al,al			;
 21083                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21084                                  	cmp	al,3
 21085                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21086                                  	pop	ds
 21087                                  	jmp	short do_io		;user issued a retry
 21088                                  %endif
 21089                                  
 21090                                  next_char:
 21091 000033B4 1F                      	pop	ds
 21092 000033B5 89D7                    	mov	di,dx
 21093 000033B7 49                      	dec	cx			;decrement count
 21094                                  	;jcxz	done_read		;all characters read in
 21095                                  	; 07/02/2024
 21096 000033B8 7418                    	jz	short done_read
 21097 000033BA 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21098 000033BE EBA2                    	jmp	short do_io		;read next character in
 21099                                  
 21100                                  devrderr:
 21101 000033C0 5F                      	pop	di			;discard segment address
 21102 000033C1 36C43E[9E05]            	les	di,[ss:THISSFT]
 21103                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21104 000033C6 E95804                  	jmp     SET_ACC_ERR_DS
 21105                                  
 21106                                  no_char:
 21107                                  ;Since no character is available, we let win386 switch the VM out
 21108                                  
 21109 000033C9 50                      	push	ax
 21110 000033CA B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21111 000033CC CD2A                    	int	2Ah			;indicate idle to WIN386
 21112                                  
 21113                                  ;When control returns from WIN386, we continue the raw read
 21114                                  
 21115 000033CE 58                      	pop	ax
 21116 000033CF EB91                    	jmp	do_io
 21117                                  
 21118                                  pop_done_read:
 21119 000033D1 1F                      	pop	ds
 21120                                  done_read:
 21121 000033D2 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21122                                  
 21123                                  	; 16/12/2022
 21124                                  
 21125                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21126                                  	;jmp	ENDRDDEV ; 04/05/2019
 21127                                  
 21128                                  	; 04/05/2019 - Retro DOS v4.0
 21129                                  ENDRDDEV:
 21130 000033D7 16                      	push	ss
 21131 000033D8 1F                      	pop	ds
 21132 000033D9 EB1F                    	jmp	short endrddev1
 21133                                  
 21134                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21135                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21136                                  
 21137                                  TRANBUF:
 21138 000033DB AC                      	LODSB
 21139 000033DC AA                      	STOSB
 21140 000033DD 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21141 000033DF 7503                    	JNZ	short NORMCH
 21142 000033E1 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21143                                  NORMCH:
 21144 000033E4 3C0A                    	CMP	AL,c_LF ; 0Ah
 21145 000033E6 E0F3                    	LOOPNZ	TRANBUF
 21146 000033E8 7507                    	JNZ	short ENDRDCON
 21147 000033EA 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21148 000033EC E85AE2                  	call	OUTT		; Transmit linefeed
 21149 000033EF 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21150                                  ENDRDCON:
 21151                                  ;hkn; SS is DOSDATA
 21152 000033F1 16                      	push	ss
 21153 000033F2 1F                      	pop	ds
 21154 000033F3 E834FE                  	CALL	SWAPBACK
 21155 000033F6 8936[2200]              	MOV	[CONTPOS],SI
 21156                                  
 21157                                  	; 16/12/2022
 21158                                  ;ENDRDDEV:
 21159                                  ;;hkn; SS is DOSDATA
 21160                                  ;	push	ss
 21161                                  ;	pop	ds
 21162                                  endrddev1:	; 04/05/2019
 21163 000033FA 893E[B805]              	MOV	[NEXTADD],DI
 21164 000033FE 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21165 00003400 C43E[9E05]              	LES	DI,[THISSFT]
 21166                                  	;and	byte [es:di+5],0BFh
 21167 00003404 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21168                                  				; Mark as no more data available
 21169                                  SETSFTC:
 21170                                  	; 31/07/2019
 21171                                  	;call	SETSFT
 21172                                  	;retn
 21173 00003409 E9A904                  	jmp	SETSFT
 21174                                  
 21175                                  ; 16/12/2022
 21176                                  %if 0
 21177                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21178                                  ENDRDDEV:
 21179                                  ;hkn; SS is DOSDATA
 21180                                  	push	ss
 21181                                  	pop	ds
 21182                                  	MOV	[NEXTADD],DI
 21183                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21184                                  	LES	DI,[THISSFT]
 21185                                  	;and	byte [es:di+5],0BFh
 21186                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21187                                  				; Mark as no more data available
 21188                                  SETSFTC:
 21189                                  	;call	SETSFT
 21190                                  	;retn
 21191                                  	jmp	SETSFT	
 21192                                  %endif
 21193                                  
 21194                                  READCON:
 21195 0000340C E821FE                  	CALL	SWAPCON
 21196 0000340F 8B36[2200]              	MOV	SI,[CONTPOS]
 21197 00003413 09F6                    	OR	SI,SI
 21198 00003415 75C4                    	JNZ	short TRANBUF
 21199 00003417 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21200 0000341C 7406                    	JZ	short GETBUF
 21201 0000341E C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21202                                  GETBUF:
 21203 00003424 51                      	PUSH	CX
 21204 00003425 06                      	PUSH	ES
 21205 00003426 57                      	PUSH	DI
 21206                                  
 21207                                  ;hkn; CONBUF is in DOSDATA
 21208 00003427 BA[7B02]                	MOV	DX,CONBUF
 21209                                  
 21210 0000342A E89ADF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21211 0000342D 5F                      	POP	DI
 21212 0000342E 07                      	POP	ES
 21213 0000342F 59                      	POP	CX
 21214                                  
 21215                                  ;hkn; CONBUF is in DOSDATA
 21216 00003430 BE[7D02]                	MOV	SI,CONBUF+2
 21217                                  
 21218 00003433 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21219 00003436 75A3                    	JNZ	short TRANBUF
 21220 00003438 B01A                    	MOV	AL,1AH
 21221 0000343A AA                      	STOSB
 21222 0000343B 4F                      	DEC	DI
 21223 0000343C B00A                    	MOV	AL,c_LF
 21224 0000343E E808E2                  	call	OUTT		; Send linefeed
 21225 00003441 31F6                    	XOR	SI,SI
 21226 00003443 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21227                                  
 21228                                  ; 24/07/2018 - Retro DOS v3.0
 21229                                  
 21230                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21231                                  ;---------------------------------------------------------------------------
 21232                                  ;
 21233                                  ; Procedure Name : DOS_WRITE
 21234                                  ;
 21235                                  ; Inputs:
 21236                                  ;	ThisSFT set to the SFT for the file being used
 21237                                  ;	[DMAADD] contains transfer address
 21238                                  ;	CX = No. of bytes to write
 21239                                  ; Function:
 21240                                  ;	Perform write operation
 21241                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21242                                  ;		to current sf_position
 21243                                  ; Outputs:
 21244                                  ;    Carry clear
 21245                                  ;	SFT Position and cluster pointers updated
 21246                                  ;	CX = No. of bytes written
 21247                                  ;	ES:DI point to SFT
 21248                                  ;    Carry set
 21249                                  ;	AX is error code
 21250                                  ;	CX = 0
 21251                                  ;	ES:DI point to SFT
 21252                                  ; DS preserved, all other registers destroyed
 21253                                  ;---------------------------------------------------------------------------
 21254                                  
 21255                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21256                                  ;hkn; point to DOSDATA.
 21257                                  
 21258                                  ; 04/05/2019 - Retro DOS v4.0
 21259                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21260                                  
 21261                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21262                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21263                                  
 21264                                  DOS_WRITE:
 21265 00003445 C43E[9E05]              	LES	DI,[THISSFT]
 21266                                  	;mov	al,[ES:DI+2]
 21267 00003449 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21268                                  	;and	al,0Fh
 21269 0000344D 240F                    	AND	AL,access_mask
 21270                                  	;cmp	al,0
 21271 0000344F 3C00                    	CMP	AL,open_for_read
 21272 00003451 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21273                                  BadMode:
 21274 00003453 E9CD03                  	jmp	SET_ACC_ERR
 21275                                  
 21276                                  ; NOTE: The following check for writting to a Read Only File is performed
 21277                                  ;	    ONLY on FCBs!!!!
 21278                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21279                                  ;	    of a read only file which can then be written to.
 21280                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21281                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21282                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21283                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21284                                  ;	    to a read-only file.
 21285                                  
 21286                                  Check_FCB_RO:
 21287                                  	;;test	word [es:di+2],8000h
 21288                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21289                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21290                                  	
 21291                                  	;test	byte [es:di+3],80h
 21292 00003456 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21293 0000345B 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21294                                  
 21295                                  	;test	byte [es:di+4],1
 21296 0000345D 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21297 00003462 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21298                                  WRITE_NO_MODE:
 21299 00003464 E8A402                  	call	SETUP
 21300 00003467 E8E5DD                  	call	IsSFTNet
 21301 0000346A 7406                    	JZ	short LOCAL_WRITE
 21302                                  
 21303                                  ;IF NOT Installed
 21304                                  ;	transfer NET_WRITE
 21305                                  ;ELSE
 21306                                  	;mov	ax,1109h
 21307 0000346C B80911                  	MOV	AX,(MultNET<<8)|9
 21308 0000346F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21309                                  			; ES:DI -> SFT
 21310                                  			; SFT DPB field -> DPB of drive containing file
 21311                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21312                                  			; Return: CF set on error, CX = bytes written
 21313 00003471 C3                      	retn
 21314                                  ;ENDIF
 21315                                  
 21316                                  LOCAL_WRITE:
 21317                                  	;;test	word [es:di+5],80h
 21318                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21319                                  	;jnz	short WRTDEV
 21320                                  
 21321                                  	;test	byte [es:di+5],80h
 21322 00003472 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21323 00003477 756D                    	jnz	short WRTDEV
 21324                                  
 21325                                  	;mov	byte [EXTERR_LOCUS],2
 21326 00003479 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21327 0000347E E877DE                  	call	ECritDisk
 21328                                  
 21329 00003481 E8E104                  	call	DISKWRITE
 21330                                  
 21331                                  	; 04/05/2019 - Retro DOS v4.0
 21332                                  
 21333                                  	; MSDOS 6.0
 21334                                  ; Extended Open
 21335 00003484 7210                    	JC	short nocommit
 21336                                  	
 21337 00003486 C43E[9E05]              	LES	DI,[THISSFT]
 21338                                  	
 21339                                  	;;test	word [ES:DI+2],4000h
 21340                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21341                                  	;JZ	short nocommit
 21342                                  	
 21343                                  	;test	byte [ES:DI+3],40h
 21344 0000348A 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21345 0000348F 7405                    	JZ	short nocommit
 21346                                  	
 21347 00003491 51                      	PUSH	CX
 21348 00003492 E85DFB                  	call	DOS_COMMIT
 21349 00003495 59                      	POP	CX
 21350                                  nocommit:
 21351                                  ; Extended Open
 21352                                  	;call	LCritDisk
 21353                                  	;retn
 21354                                  	; 18/12/2022
 21355 00003496 E97ADE                  	jmp	LCritDisk
 21356                                  
 21357                                  DVWRTRAW:
 21358 00003499 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21359 0000349B E88411                  	call	SETWRITE
 21360 0000349E 1E                      	PUSH	DS			; Save seg of transfer
 21361                                  
 21362                                  ;hkn; SS override
 21363 0000349F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21364 000034A4 E8C410                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21365                                  
 21366 000034A7 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21367 000034A9 B487                    	MOV	AH,87H
 21368                                  
 21369                                  ;hkn; SS override
 21370 000034AB 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21371                                  
 21372                                  	; MSDOS 3.3
 21373                                  	;test	di,8000h
 21374                                  	;jz	short CWRTROK
 21375                                  
 21376                                  	; MSDOS 6.0
 21377 000034B0 09FF                    	or	di,di
 21378 000034B2 791F                    	jns	short CWRTROK
 21379                                  	
 21380                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21381 000034B4 E80D1D                  	call	CHARHARD
 21382                                  
 21383                                  	; 04/05/2019  - Retro DOS v4.0
 21384                                  
 21385                                  	; MSDOS 6.0
 21386                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21387                                  	; 08/02/2024
 21388 000034B7 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21389 000034BC 29F9                    	sub	cx,di
 21390 000034BE 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21391                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21392 000034C0 01FB                    	add	bx,di
 21393 000034C2 89DF                    	mov	di,bx			;				M065
 21394                                  	
 21395                                  	; MSDOS 3.3
 21396                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21397                                  
 21398                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21399 000034C4 08C0                    	OR	AL,AL
 21400 000034C6 740B                    	JZ	short CWRTROK 		; Ignore
 21401 000034C8 3C03                    	CMP	AL,3
 21402 000034CA 7403                    	JZ	short CWRFERR
 21403 000034CC 1F                      	POP	DS			; Recover saved seg of transfer
 21404 000034CD EBCA                    	JMP	short DVWRTRAW		; Try again
 21405                                  CWRFERR:
 21406 000034CF 58                      	POP	AX			; Chuck saved seg of transfer
 21407 000034D0 E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21408                                  CWRTROK:
 21409 000034D3 58                      	POP	AX			; Chuck saved seg of transfer
 21410 000034D4 1F                      	POP	DS
 21411 000034D5 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21412                                  ENDWRDEV:
 21413 000034D8 C43E[9E05]              	LES	DI,[THISSFT]
 21414 000034DC 89C1                    	MOV	CX,AX
 21415                                  	;call	ADDREC
 21416                                  	;retn
 21417                                  	; 16/12/2022
 21418                                  	; 10/06/2019
 21419 000034DE E9F503                  	jmp	ADDREC
 21420                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21421                                  	;call	ADDREC
 21422                                  	;retn
 21423                                  	
 21424                                  WRTNUL:
 21425 000034E1 89CA                    	MOV	DX,CX			; Entire transfer done
 21426                                  WRTCOOKJ:
 21427 000034E3 E98D00                  	JMP	WRTCOOKDONE
 21428                                  WRTDEV:
 21429                                  	;mov	byte [EXTERR_LOCUS],4
 21430 000034E6 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21431                                  	;or	byte [es:di+5],40h
 21432 000034EB 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21433                                  					; Reset EOF for input
 21434                                  	;mov	bl,[es:di+5]
 21435 000034F0 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21436 000034F4 31C0                    	XOR	AX,AX
 21437 000034F6 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21438 000034F8 1E                      	PUSH	DS
 21439 000034F9 88D8                    	MOV	AL,BL
 21440 000034FB C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21441 000034FF 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21442 00003501 31D2                    	XOR	DX,DX			; Set starting point
 21443                                  	;test	al,20h
 21444 00003503 A820                    	test	AL,devid_device_raw	; Raw?
 21445                                  	;JZ	short TEST_DEV_CON
 21446                                  	;JMP	DVWRTRAW
 21447                                  	; 16/12/2022
 21448 00003505 7592                    	jnz	short DVWRTRAW
 21449                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21450                                  	;JZ	short TEST_DEV_CON
 21451                                  	;JMP	short DVWRTRAW
 21452                                  
 21453                                  TEST_DEV_CON:
 21454                                  	;test	al,2
 21455 00003507 A802                    	test	AL,devid_device_con_out ; Console output device?
 21456 00003509 756E                    	jnz	short WRITECON
 21457                                  	;test	al,4
 21458 0000350B A804                    	test	AL,devid_device_null
 21459 0000350D 75D2                    	JNZ	short WRTNUL
 21460 0000350F 89D0                    	MOV	AX,DX
 21461 00003511 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21462 00003514 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21463 00003516 51                      	PUSH	CX
 21464 00003517 B90100                  	MOV	CX,1
 21465 0000351A E80511                  	call	SETWRITE
 21466 0000351D 59                      	POP	CX
 21467                                  
 21468                                  ;hkn; SS override
 21469 0000351E 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21470                                  ;
 21471                                  ;SR; Removed X25 support from here
 21472                                  ;
 21473                                  	;lds	si,[si+7]
 21474 00003523 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21475                                  DVWRTLP:
 21476 00003526 E8801A                  	call	DSKSTATCHK
 21477 00003529 E84210                  	call	DEVIOCALL2
 21478 0000352C 57                      	PUSH	DI
 21479 0000352D B487                    	MOV	AH,87H
 21480                                  
 21481                                  ;hkn; SS override
 21482 0000352F 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21483                                  	
 21484                                  	; MSDOS 3.3
 21485                                  	;test	di,8000h
 21486                                  	;jz	short CWROK
 21487                                  
 21488                                  	; MSDOS 6.0
 21489 00003534 09FF                    	or	di,di
 21490 00003536 7916                    	jns	short CWROK
 21491                                  	
 21492                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21493 00003538 E8891C                  	call	CHARHARD
 21494 0000353B 5F                      	POP	DI
 21495                                  
 21496                                  ;hkn; SS override
 21497 0000353C 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21498 00003543 3C01                    	CMP	AL,1
 21499 00003545 74DF                    	JZ	short DVWRTLP 	; Retry
 21500 00003547 08C0                    	OR	AL,AL
 21501 00003549 740C                    	JZ	short DVWRTIGN	; Ignore
 21502                                  	; 10/08/2018
 21503 0000354B E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21504                                  CWROK:
 21505 0000354E 5F                      	POP	DI
 21506                                  
 21507                                  ;hkn; SS override
 21508 0000354F 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21509 00003555 741C                    	JZ	short WRTCOOKDONE
 21510                                  DVWRTIGN:
 21511 00003557 42                      	INC	DX
 21512                                  
 21513                                  ;hkn; SS override for CALLXAD
 21514 00003558 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21515 0000355D 47                      	INC	DI
 21516 0000355E 1E                      	PUSH	DS
 21517 0000355F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21518 00003564 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21519 00003567 1F                      	POP	DS
 21520 00003568 7409                    	JZ	short WRTCOOKDONE
 21521                                  
 21522                                  ;hkn; SS override
 21523 0000356A 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21524 00003571 E2B3                    	LOOP	DVWRTLP
 21525                                  WRTCOOKDONE:
 21526 00003573 89D0                    	MOV	AX,DX
 21527 00003575 1F                      	POP	DS
 21528 00003576 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21529                                  
 21530                                  WRITECON:
 21531 00003579 1E                      	PUSH	DS
 21532                                  
 21533                                  ;hkn; SS is DOSDATA
 21534 0000357A 16                      	push	ss
 21535 0000357B 1F                      	pop	ds
 21536 0000357C E8B1FC                  	CALL	SWAPCON
 21537 0000357F 1F                      	POP	DS
 21538 00003580 89DE                    	MOV	SI,BX
 21539 00003582 51                      	PUSH	CX
 21540                                  WRCONLP:
 21541 00003583 AC                      	LODSB
 21542 00003584 3C1A                    	CMP	AL,1Ah		; ^Z?
 21543 00003586 7405                    	JZ	short CONEOF
 21544 00003588 E8BEE0                  	call	OUTT
 21545 0000358B E2F6                    	LOOP	WRCONLP
 21546                                  CONEOF:
 21547 0000358D 58                      	POP	AX			; Count
 21548 0000358E 29C8                    	SUB	AX,CX			; Amount actually written
 21549 00003590 1F                      	POP	DS
 21550 00003591 E896FC                  	CALL	SWAPBACK
 21551 00003594 E941FF                  	JMP	ENDWRDEV
 21552                                  
 21553                                  ;---------------------------------------------------------------------------
 21554                                  ;
 21555                                  ; Procedure Name : get_io_sft
 21556                                  ;
 21557                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21558                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21559                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21560                                  ;
 21561                                  ;---------------------------------------------------------------------------
 21562                                  
 21563                                  ; 04/05/2019 - Retro DOS v4.0
 21564                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21565                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21566                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21567                                  
 21568                                  GET_IO_SFT:
 21569                                  	;test	byte [SS:CONSWAP],0FFh
 21570 00003597 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21571 0000359D 7512                    	JNZ	short GetRedir
 21572                                  GetNormal:
 21573 0000359F 16                      	push	ss
 21574 000035A0 1F                      	pop	ds
 21575 000035A1 06                      	PUSH	ES
 21576 000035A2 57                      	PUSH	DI
 21577 000035A3 E8BC2F                  	call	SFFromHandle
 21578 000035A6 7206                    	JC	short RET44P
 21579 000035A8 8CC6                    	MOV	SI,ES
 21580 000035AA 8EDE                    	MOV	DS,SI
 21581 000035AC 89FE                    	MOV	SI,DI
 21582                                  RET44P:
 21583 000035AE 5F                      	POP	DI
 21584 000035AF 07                      	POP	ES
 21585 000035B0 C3                      	retn
 21586                                  GetRedir:
 21587 000035B1 83FB01                  	CMP	BX,1
 21588 000035B4 77E9                    	JA	short GetNormal
 21589 000035B6 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21590 000035BB F8                      	CLC
 21591                                  get_io_sft_retn:
 21592 000035BC C3                      	retn
 21593                                  
 21594                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21595                                  ;---------------------------------------------------------------------------
 21596                                  ;
 21597                                  ; Procedure Name : DIRREAD
 21598                                  ;
 21599                                  ; Inputs:
 21600                                  ;	AX = Directory block number (relative to first block of directory)
 21601                                  ;	ES:BP = Base of drive parameters
 21602                                  ;	[DIRSEC] = First sector of first cluster of directory
 21603                                  ;	[CLUSNUM] = Next cluster
 21604                                  ;	[CLUSFAC] = Sectors/Cluster
 21605                                  ; Function:
 21606                                  ;	Read the directory block into [CURBUF].
 21607                                  ; Outputs:
 21608                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21609                                  ;	[SECCLUSPOS] Set
 21610                                  ;	ES:BP unchanged
 21611                                  ;	[CURBUF] Points to Buffer with dir sector
 21612                                  ;	Carry set if error (user said FAIL to I 24)
 21613                                  ; DS preserved, all other registers destroyed.
 21614                                  ;---------------------------------------------------------------------------
 21615                                  
 21616                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21617                                  
 21618                                  DIRREAD:
 21619                                  
 21620                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21621                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21622                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21623                                  ; by DIRStart = 0.
 21624                                  
 21625 000035BD 31D2                    	XOR	DX,DX
 21626                                  	;CMP	word [DIRSTART],0
 21627                                  	; 21/09/2023
 21628 000035BF 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21629 000035C3 7503                    	jnz	short SubDir
 21630 000035C5 92                      	XCHG	AX,DX
 21631 000035C6 EB0C                    	JMP	short DoRead
 21632                                  
 21633                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21634                                  
 21635                                  SubDir:
 21636 000035C8 88C2                    	MOV	DL,AL
 21637                                  	;and	dl,[es:bp+4]
 21638 000035CA 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21639                                  
 21640                                  ;	(DX) = sector-in-cluster
 21641                                  
 21642                                  	;mov	cl,[es:bp+5]
 21643 000035CE 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21644 000035D2 D3E8                    	SHR	AX,CL
 21645                                  
 21646                                  ;	(DX) = position in cluster
 21647                                  ;	(AX) = number of clusters to skip
 21648                                  
 21649                                  DoRead:
 21650 000035D4 8816[7305]              	MOV	[SECCLUSPOS],DL
 21651 000035D8 89C1                    	MOV	CX,AX
 21652 000035DA 88D4                    	MOV	AH,DL
 21653                                  
 21654                                  ;	(CX) = number of clusters to skip.
 21655                                  ;	(AH) = remainder
 21656                                  
 21657                                  	; 04/05/2019 - Retro DOS v4.0
 21658                                  
 21659                                  	; MSDOS 6.0
 21660                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21661                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21662                                  	;MOV	DX,[DIRSEC]
 21663                                  	;ADD	DL,AH
 21664                                  	;ADC	DH,0
 21665                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21666                                  	; 21/09/2023
 21667 000035DC 31DB                    	xor	bx,bx ; 0
 21668 000035DE 8B16[BE05]              	mov	dx,[DIRSEC]
 21669 000035E2 00E2                    	add	dl,ah
 21670 000035E4 10DE                    	adc	dh,bl ; 0
 21671 000035E6 131E[C005]              	adc	bx,[DIRSEC+2]
 21672 000035EA 891E[0706]              	mov	[HIGH_SECTOR],bx
 21673                                  
 21674 000035EE 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21675 000035F2 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21676 000035F6 E319                    	JCXZ	FIRSTCLUSTER
 21677                                  SKPCLLP:
 21678 000035F8 E8321E                  	call	UNPACK
 21679 000035FB 72BF                    	jc	short get_io_sft_retn
 21680 000035FD 87DF                    	XCHG	BX,DI
 21681 000035FF E8141E                  	call	IsEOF			; test for eof based on fat size
 21682 00003602 7302                    	JAE	short HAVESKIPPED
 21683 00003604 E2F2                    	LOOP	SKPCLLP
 21684                                  HAVESKIPPED:
 21685 00003606 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21686 0000360A 89FA                    	MOV	DX,DI
 21687 0000360C 88E3                    	MOV	BL,AH
 21688 0000360E E8DA16                  	call	FIGREC
 21689                                  
 21690                                  	;entry	FIRSTCLUSTER
 21691                                  
 21692                                  FIRSTCLUSTER:
 21693                                  	; 22/09/2023
 21694                                  	;;mov	byte [ALLOWED],18h
 21695                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21696                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21697                                  	;call	GETBUFFR
 21698 00003611 E82422                  	call	GETBUFFER ; *	; pre-read
 21699 00003614 72A6                    	jc	short get_io_sft_retn
 21700                                  
 21701                                  	;entry	SET_BUF_AS_DIR
 21702                                  
 21703                                  SET_BUF_AS_DIR:
 21704                                  
 21705                                  ;	Set the type of CURBUF to be a directory sector.
 21706                                  ;	Only flags are modified.
 21707                                  
 21708 00003616 1E                      	PUSH	DS
 21709 00003617 56                      	PUSH	SI
 21710 00003618 C536[E205]              	LDS	SI,[CURBUF]
 21711                                  	;or	byte [si+5],4
 21712 0000361C 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21713 00003620 5E                      	POP	SI
 21714 00003621 1F                      	POP	DS
 21715                                  dirread_retn:
 21716 00003622 C3                      	retn
 21717                                  
 21718                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21719                                  ;----------------------------------------------------------------------------
 21720                                  ;
 21721                                  ; Procedure Name : FATSECRD
 21722                                  ; Inputs:
 21723                                  ;	Same as DREAD
 21724                                  ;	DS:BX = Transfer address
 21725                                  ;	CX = Number of sectors
 21726                                  ;	DX = Absolute record number
 21727                                  ;	ES:BP = Base of drive parameters
 21728                                  ; Function:
 21729                                  ;	Calls BIOS to perform FAT read.
 21730                                  ; Outputs:
 21731                                  ;	Same as DREAD
 21732                                  ;---------------------------------------------------------------------------
 21733                                  
 21734                                  	; 04/05/2019 - Retro DOS v4.0
 21735                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21736                                  
 21737                                  FATSECRD:
 21738                                  ;hkn; SS override
 21739                                  	;mov	byte [ss:ALLOWED],18h
 21740 00003623 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21741 00003629 89CF                    	MOV	DI,CX
 21742                                  	;mov	cl,[es:bp+8]
 21743 0000362B 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21744                                  	; MSDOS 3.3
 21745                                  	;;mov	al,[es:bp+0Fh]
 21746                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21747                                  	;XOR	AH,AH
 21748                                  	; MSDOS 6.0
 21749                                  	;mov	ax,[es:bp+0Fh]
 21750 0000362F 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21751 00003633 30ED                    	XOR	CH,CH
 21752 00003635 52                      	PUSH	DX
 21753                                  NXTFAT:
 21754                                  	; MSDOS 6.0
 21755                                  ;hkn; SS override
 21756 00003636 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21757 0000363D 51                      	PUSH	CX			;32mb
 21758 0000363E 50                      	PUSH	AX
 21759 0000363F 89F9                    	MOV	CX,DI
 21760 00003641 E85B00                  	call	DSKREAD
 21761 00003644 58                      	POP	AX
 21762 00003645 59                      	POP	CX
 21763 00003646 7420                    	JZ	short RET41P		; Carry clear
 21764 00003648 01C2                    	ADD	DX,AX
 21765 0000364A E2EA                    	LOOP	NXTFAT
 21766 0000364C 5A                      	POP	DX
 21767 0000364D 89F9                    	MOV	CX,DI
 21768                                  
 21769                                  ; NOTE FALL THROUGH
 21770                                  
 21771                                  ;Break	<DREAD -- DO A DISK READ>
 21772                                  ;---------------------------------------------------------------------------
 21773                                  ;
 21774                                  ; Procedure Name : DREAD
 21775                                  ;
 21776                                  ; Inputs:
 21777                                  ;	DS:BX = Transfer address
 21778                                  ;	CX = Number of sectors
 21779                                  ;	DX = Absolute record number	      (LOW)
 21780                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21781                                  ;	ES:BP = Base of drive parameters
 21782                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21783                                  ; Function:
 21784                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21785                                  ;	errors, will call HARDERRRW for further action.
 21786                                  ; Outputs:
 21787                                  ;	Carry set if error (currently user FAILED to INT 24)
 21788                                  ; DS,ES:BP preserved. All other registers destroyed.
 21789                                  ;---------------------------------------------------------------------------
 21790                                  
 21791                                  	;entry	DREAD
 21792                                  DREAD:
 21793 0000364F E84D00                  	call	DSKREAD
 21794 00003652 74CE                    	jz	short dirread_retn	; Carry clear
 21795                                  ;hkn; SS override
 21796 00003654 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21797 0000365A E89500                  	call	HARDERRRW
 21798 0000365D 3C01                    	CMP	AL,1			; Check for retry
 21799 0000365F 74EE                    	JZ	short DREAD
 21800                                  
 21801                                  fail_ignore:	; 09/02/2024
 21802 00003661 3C03                    	CMP	AL,3			; Check for FAIL
 21803 00003663 F8                      	CLC
 21804 00003664 7501                    	JNZ	short NO_CAR		; Ignore
 21805 00003666 F9                      	STC
 21806                                  NO_CAR:
 21807 00003667 C3                      	retn
 21808                                  RET41P: 
 21809 00003668 5A                      	POP	DX
 21810 00003669 C3                      	retn
 21811                                  
 21812                                  ; 24/07/2018 - Retro DOS v3.0
 21813                                  
 21814                                  ;Break	<CHECK_WRITE_LOCK>
 21815                                  ;---------------------------------------------------------------------------
 21816                                  ;
 21817                                  ; Procedure Name : CHECK_WRITE_LOCK
 21818                                  ;
 21819                                  ; Inputs:
 21820                                  ;	output of SETUP
 21821                                  ;	ES:DI -> SFT
 21822                                  ; Function:
 21823                                  ;	check write lock
 21824                                  ; Outputs:
 21825                                  ;	Carry set if error
 21826                                  ;	Carry clear if ok
 21827                                  ;
 21828                                  ;----------------------------------------------------------------------------
 21829                                  
 21830                                  	; 04/05/2019 - Retro DOS v4.0
 21831                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21832                                  
 21833                                  CHECK_WRITE_LOCK:
 21834                                  	; MSDOS 6.0
 21835                                  	;test	byte [es:di+4],8
 21836 0000366A 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21837                                  	;JZ	short write_cont			     ;no
 21838                                  	;;call	SET_ACC_ERR_DS
 21839                                  	;;retn
 21840                                  	;;jnz	SET_ACC_ERR_DS
 21841                                  	; 19/08/2018
 21842                                  	;jz	short write_cont
 21843                                  	;jmp	SET_ACC_ERR_DS
 21844                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21845 0000366F 7403                    	JZ	short write_cont
 21846                                  	;call	SET_ACC_ERR_DS
 21847                                  	;retn
 21848                                  	; 16/12/2022
 21849 00003671 E9AD01                  	jmp	SET_ACC_ERR_DS
 21850                                  
 21851                                  write_cont:				;
 21852 00003674 51                      	PUSH	CX			;save reg
 21853 00003675 09C9                    	OR	CX,CX			;
 21854 00003677 7501                    	JNZ	short Not_Truncate	;
 21855 00003679 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21856                                  Not_Truncate:				;
 21857 0000367A B080                    	MOV	AL,80H			;check write access
 21858 0000367C E86C3B                  	call	LOCK_CHECK		;check lock
 21859 0000367F 59                      	POP	CX			;restore reg
 21860 00003680 7305                    	JNC	short WRITE_OK		;lock ok
 21861 00003682 E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21862 00003685 73ED                    	JNC	short write_cont	;retry
 21863                                  WRITE_OK:				;
 21864 00003687 C3                      	retn				;
 21865                                  
 21866                                  ;Break	<CHECK_READ_LOCK>
 21867                                  ;---------------------------------------------------------------------------
 21868                                  ;
 21869                                  ; Procedure Name : CHECK_READ_LOC
 21870                                  ;
 21871                                  ; Inputs:
 21872                                  ;	ES:DI -> SFT
 21873                                  ;	output of SETUP
 21874                                  ; Function:
 21875                                  ;	check read lock
 21876                                  ; Outputs:
 21877                                  ;	Carry set if error
 21878                                  ;	Carry clear if ok
 21879                                  ;----------------------------------------------------------------------------
 21880                                  
 21881                                  CHECK_READ_LOCK:
 21882                                  	; MSDOS 6.0
 21883                                  	;test	byte [es:di+4],8
 21884 00003688 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21885                                  	;JZ	short do_retry			   	     ; no
 21886                                  	;;call	SET_ACC_ERR
 21887                                  	;;retn
 21888                                  	;;jnz	SET_ACC_ERR
 21889                                  	; 16/12/2022
 21890                                  	; 28/07/2019
 21891 0000368D 7403                    	jz	short do_retry
 21892 0000368F E99101                  	jmp	SET_ACC_ERR
 21893                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21894                                  	;JZ	short do_retry
 21895                                  	;call	SET_ACC_ERR
 21896                                  	;retn
 21897                                  do_retry:				;
 21898 00003692 30C0                    	xor	al,al			;check read access
 21899 00003694 E8543B                  	call	LOCK_CHECK		;check lock
 21900 00003697 7305                    	JNC	short READLOCK_OK 	;lock ok
 21901 00003699 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21902 0000369C 73F4                    	JNC	short do_retry		;retry
 21903                                  READLOCK_OK:				;
 21904                                  dw_ret_label:	; 09/02/2024
 21905 0000369E C3                      	retn				;
 21906                                  
 21907                                  ;============================================================================
 21908                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21909                                  ;============================================================================
 21910                                  ; 24/07/2018 - Retro DOS v3.0
 21911                                  ; 04/05/2019 - Retro DOS v4.0
 21912                                  
 21913                                  ;	TITLE	DISK2 - Disk utility routines
 21914                                  ;	NAME	Disk2
 21915                                  
 21916                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21917                                  ;
 21918                                  ;	DskRead
 21919                                  ;	DWRITE
 21920                                  ;	DSKWRITE
 21921                                  ;	HarderrRW
 21922                                  ;	SETUP
 21923                                  ;	BREAKDOWN
 21924                                  ;	READ_LOCK_VIOLATION
 21925                                  ;	WRITE_LOCK_VIOLATION
 21926                                  ;	DISKREAD
 21927                                  ;	SET_ACC_ERR_DS
 21928                                  ;	SET_ACC_ERR
 21929                                  ;	SETSFT
 21930                                  ;	SETCLUS
 21931                                  ;	AddRec
 21932                                  ;
 21933                                  ;	Revision history:
 21934                                  ;
 21935                                  ;		AN000 version 4.00 Jan. 1988
 21936                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21937                                  
 21938                                  ; 04/05/2019 - Retro DOS v4.0
 21939                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21940                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21941                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21942                                  
 21943                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21944                                  ;---------------------------------------------------------------------------
 21945                                  ;
 21946                                  ; Procedure Name : DSKREAD
 21947                                  ;
 21948                                  ; Inputs:
 21949                                  ;	DS:BX = Transfer addr
 21950                                  ;	CX = Number of sectors
 21951                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21952                                  ;	DX = Absolute record number	       (LOW)
 21953                                  ;	ES:BP = Base of drive parameters
 21954                                  ; Function:
 21955                                  ;	Call BIOS to perform disk read
 21956                                  ; Outputs:
 21957                                  ;	DI = CX on entry
 21958                                  ;	CX = Number of sectors unsuccessfully transfered
 21959                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21960                                  ;	Zero set if OK (from BIOS) (carry clear)
 21961                                  ;	Zero clear if error (carry clear)
 21962                                  ; SI Destroyed, others preserved
 21963                                  ;---------------------------------------------------------------------------
 21964                                  
 21965                                  DSKREAD:
 21966 0000369F 51                      	PUSH	CX
 21967                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21968 000036A0 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21969                                  	;mov	al,[es:bp+1]
 21970 000036A4 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21971 000036A8 53                      	PUSH	BX
 21972 000036A9 06                      	PUSH	ES
 21973 000036AA E8420F                  	call	SETREAD
 21974 000036AD EB22                    	JMP	short DODSKOP
 21975                                  
 21976                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21977                                  ;--------------------------------------------------------------------------
 21978                                  ;
 21979                                  ; Procedure Name : DWRITE
 21980                                  ;
 21981                                  ; Inputs:
 21982                                  ;	DS:BX = Transfer address
 21983                                  ;	CX = Number of sectors
 21984                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21985                                  ;	DX = Absolute record number	       (LOW)
 21986                                  ;	ES:BP = Base of drive parameters
 21987                                  ;	[ALLOWED] must be set in case HARDERR called
 21988                                  ; Function:
 21989                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21990                                  ;	errors, will call HARDERRRW for further action.
 21991                                  ; Output:
 21992                                  ;	Carry set if error (currently, user FAILed to I 24)
 21993                                  ; BP preserved. All other registers destroyed.
 21994                                  ;----------------------------------------------------------------------------
 21995                                  
 21996                                  	;entry	DWRITE
 21997                                  DWRITE:
 21998 000036AF E81100                  	CALL	DSKWRITE
 21999 000036B2 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22000                                  
 22001                                  ;hkn; SS override
 22002 000036B4 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22003 000036BA E83500                  	call	HARDERRRW
 22004 000036BD 3C01                    	CMP	AL,1			; Check for retry
 22005 000036BF 74EE                    	JZ	short DWRITE
 22006                                  
 22007                                  ; 09/02/2024
 22008                                  %if 0
 22009                                  	CMP	AL,3			; Check for FAIL
 22010                                  	CLC
 22011                                  	JNZ	short NO_CAR2 		; Ignore
 22012                                  	STC
 22013                                  NO_CAR2:
 22014                                  dw_ret_label:
 22015                                  	retn
 22016                                  %else
 22017                                  	; 09/02/2024 - Retro DOS v4.1
 22018 000036C1 EB9E                    	jmp	short fail_ignore
 22019                                  %endif
 22020                                  
 22021                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22022                                  ;---------------------------------------------------------------------------
 22023                                  ;
 22024                                  ; Procedure Name : DSKWRITE
 22025                                  ;
 22026                                  ; Inputs:
 22027                                  ;	DS:BX = Transfer addr
 22028                                  ;	CX = Number of sectors
 22029                                  ;	DX = Absolute record number	       (LOW)
 22030                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22031                                  ;	ES:BP = Base of drive parameters
 22032                                  ; Function:
 22033                                  ;	Call BIOS to perform disk read
 22034                                  ; Outputs:
 22035                                  ;	DI = CX on entry
 22036                                  ;	CX = Number of sectors unsuccessfully transfered
 22037                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22038                                  ;	Zero set if OK (from BIOS) (carry clear)
 22039                                  ;	Zero clear if error (carry clear)
 22040                                  ; SI Destroyed, others preserved
 22041                                  ;
 22042                                  ;----------------------------------------------------------------------------
 22043                                  
 22044                                  	;entry	DSKWRITE
 22045                                  DSKWRITE:
 22046 000036C3 51                      	PUSH	CX
 22047                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22048 000036C4 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22049                                  	;mov	al,[es:bp+1]
 22050 000036C8 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22051 000036CC 53                      	PUSH	BX
 22052 000036CD 06                      	PUSH	ES
 22053 000036CE E8510F                  	call	SETWRITE
 22054                                  DODSKOP:
 22055 000036D1 8CD9                    	MOV	CX,DS		; Save DS
 22056 000036D3 1F                      	POP	DS		; DS:BP points to DPB
 22057 000036D4 1E                      	PUSH	DS
 22058                                  
 22059                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22060 000036D5 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22061 000036D9 E8920E                  	call	DEVIOCALL2
 22062                                  
 22063 000036DC 8ED9                    	MOV	DS,CX		; Restore DS
 22064 000036DE 07                      	POP	ES		; Restore ES
 22065 000036DF 5B                      	POP	BX
 22066                                  
 22067                                  ;hkn; SS override
 22068 000036E0 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22069 000036E5 5F                      	POP	DI
 22070 000036E6 29F9                    	SUB	CX,DI
 22071 000036E8 F7D9                    	NEG	CX		; Number of sectors not transferred
 22072                                  
 22073                                  ;hkn; SS override
 22074 000036EA 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22075                                  	;test	ax,8000h
 22076                                  	; 17/12/2022
 22077                                  	;test	ah,80h
 22078 000036EE F6C480                  	test	ah,(STERR>>8)
 22079                                  	;test	AX,STERR
 22080 000036F1 C3                      	retn
 22081                                  
 22082                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22083                                  ;---------------------------------------------------------------------------
 22084                                  ;
 22085                                  ; Procedure Name : HardErrRW
 22086                                  ;
 22087                                  ; Inputs:
 22088                                  ;	AX is error code from read or write
 22089                                  ;	Other registers set as per HARDERR
 22090                                  ; Function:
 22091                                  ;	Checks the error code for special extended
 22092                                  ;	errors and maps them if needed. Then invokes
 22093                                  ;	Harderr
 22094                                  ; Outputs:
 22095                                  ;	Of HARDERR
 22096                                  ; AX may be modified prior to call to HARDERR.
 22097                                  ; No other registers altered.
 22098                                  ;
 22099                                  ;---------------------------------------------------------------------------
 22100                                  
 22101                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22102                                  HARDERRRW:
 22103                                  	;cmp	al,0Fh
 22104 000036F2 3C0F                    	CMP	AL,error_I24_wrong_disk
 22105 000036F4 7512                    	JNZ	short DO_ERR				; Nothing to do
 22106                                  
 22107                                  	; MSDOS 3.3
 22108                                  	;push	ds
 22109                                  	;push	si
 22110                                  	;lds	si,[ss:CALLVIDRW]
 22111                                  	;mov	[ss:EXTERRPT+2], ds
 22112                                  	;mov	[ss:EXTERRPT], si
 22113                                  	;pop	si
 22114                                  	;pop	ds
 22115                                  
 22116                                  	; MSDOS 6.0
 22117 000036F6 50                      	push	ax
 22118 000036F7 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22119 000036FB 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22120 000036FF 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22121 00003703 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22122 00003707 58                      	pop	ax
 22123                                  DO_ERR:
 22124                                  	;;call	HARDERR
 22125                                  	;;retn
 22126                                  	; 16/12/2022
 22127                                  	; 10/06/2019
 22128 00003708 E9EA1A                  	jmp	HARDERR	
 22129                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22130                                  	;call	HARDERR
 22131                                  	;retn
 22132                                  
 22133                                  ; 24/07/2018 - Retro DOS v3.0
 22134                                  
 22135                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22136                                  ;----------------------------------------------------------------------------
 22137                                  ;
 22138                                  ; Procedure Name : SETUP
 22139                                  ;
 22140                                  ; Inputs:
 22141                                  ;	ES:DI point to SFT (value also in THISSFT)
 22142                                  ;	DMAAdd contains transfer address
 22143                                  ;	CX = Byte count
 22144                                  ;	DS = DOSDATA
 22145                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22146                                  ;		2nd of caller of caller.
 22147                                  ; Outputs:
 22148                                  ;	    CX = byte count
 22149                                  ;	    [THISDPB] = Base of drive parameters if file
 22150                                  ;		      = Pointer to device header if device or NET
 22151                                  ;	    ES:DI Points to SFT
 22152                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22153                                  ;	    [TRANS] = 0 (No transfers yet)
 22154                                  ;	    BytPos = Byte position in file
 22155                                  ;
 22156                                  ;	The following fields are relevant to local files (not devices) only:
 22157                                  ;
 22158                                  ;	    SecPos = Position of first sector (local files only)
 22159                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22160                                  ;	    [CLUSNUM] = First cluster (local files only)
 22161                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22162                                  ;	    [THISDRV] = Physical unit number (local files only)
 22163                                  ;
 22164                                  ;      RETURNS ONE LEVEL UP WITH:
 22165                                  ;	   CX = 0
 22166                                  ;	   CARRY = Clear
 22167                                  ;	IF AN ERROR IS DETECTED
 22168                                  ; All other registers destroyed
 22169                                  ;----------------------------------------------------------------------------
 22170                                  
 22171                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22172                                  
 22173                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22174                                  
 22175                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22176                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22177                                  
 22178                                  SETUP:
 22179                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22180                                  
 22181                                  	;lds 	si,[es:di+7]
 22182 0000370B 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22183                                  
 22184                                  ;hkn; SS override
 22185 0000370F 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22186                                  
 22187                                  ;hkn; SS is DOSDATA
 22188 00003714 16                      	push	ss
 22189 00003715 1F                      	pop	ds
 22190                                  
 22191 00003716 8936[8A05]              	MOV	[THISDPB],SI
 22192                                  
 22193 0000371A 8B1E[2C03]              	MOV	BX,[DMAADD]
 22194 0000371E 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22195 00003722 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22196                                  	;mov	ax,[es:di+15h]
 22197 00003727 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22198                                  	;mov	dx,[es:di+17h]
 22199 0000372B 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22200 0000372F 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22201 00003733 A3[CE05]                	MOV	[BYTPOS],AX
 22202                                  	;test	word [es:di+5],8080h
 22203 00003736 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22204 0000373C 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22205 0000373E 06                      	PUSH	ES
 22206 0000373F C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22207                                  
 22208                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22209                                  	;;mov	bl,[es:bp+0]
 22210                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22211                                  	; 05/12/2022
 22212 00003743 268A5E00                	mov	bl,[es:bp]
 22213                                  	
 22214 00003747 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22215                                  	;mov	bx,[es:bp+2]
 22216 0000374B 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22217                                  
 22218                                  	;; MSDOS 3.3
 22219                                  	;cmp	dx,bx
 22220                                  	;jnb	short EOFERR
 22221                                  	;div	bx
 22222                                  	;mov	[SECPOS],ax
 22223                                  	;mov	[BYTSECPOS],dx
 22224                                  	;mov	dx,ax
 22225                                  	;;and	al,[es:bp+4]
 22226                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22227                                  	;mov	[SECCLUSPOS],al
 22228                                  	;mov	ax,cx
 22229                                  	;;mov	cl,[es:bp+5]
 22230                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22231                                  	;shr	dx,cl
 22232                                  	;mov	[CLUSNUM],dx
 22233                                  	;pop	es
 22234                                  	;mov	cx,ax
 22235                                  
 22236                                  	; 04/05/2019 - Retro DOS v4.0
 22237                                  
 22238                                  	; MSDOS 6.0
 22239                                  ;M039: Optimized this section.
 22240 0000374F 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22241 00003750 E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22242 00003753 8916[CC05]              	MOV	[BYTSECPOS],DX
 22243 00003757 A3[C405]                	MOV	[SECPOS],AX
 22244 0000375A 890E[C605]              	MOV	[SECPOS+2],CX
 22245 0000375E 89CA                    	MOV	DX,CX
 22246                                  
 22247 00003760 89C3                    	MOV	BX,AX
 22248                                  	;and	bl,[es:bp+4]
 22249 00003762 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22250 00003766 881E[7305]              	MOV	[SECCLUSPOS],BL
 22251                                  
 22252 0000376A E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22253 0000376D 59                      	POP	CX			;CX = byte count.
 22254 0000376E 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22255                                  	;cmp	ax,[es:bp+0Dh]
 22256 00003770 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22257 00003774 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22258                                  
 22259 00003776 A3[BC05]                	MOV	[CLUSNUM],AX
 22260 00003779 07                      	POP	ES			; ES:DI point to SFT
 22261                                  ;M039
 22262                                  
 22263                                  NOSETSTUFF:
 22264 0000377A 89C8                    	MOV	AX,CX		; AX = Byte count.
 22265 0000377C 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22266 00003780 730C                    	JNC	short setup_OK	; Must be less than 64
 22267 00003782 A1[2C03]                	MOV	AX,[DMAADD]
 22268 00003785 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22269                                  				;    less than 64K since max value of CX
 22270                                  				;    is FFFF).
 22271 00003787 7501                    	JNZ	short NoDec
 22272 00003789 48                      	DEC	AX
 22273                                  NoDec:
 22274 0000378A 89C1                    	MOV	CX,AX		; Can do this much
 22275 0000378C E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22276                                  setup_OK:
 22277 0000378E C3                      	retn
 22278                                  
 22279                                  EOFERR:
 22280 0000378F 07                      	POP	ES		; ES:DI point to SFT
 22281 00003790 31C9                    	XOR	CX,CX		; No bytes read
 22282                                  ;;;;;;;;;;; 7/18/86
 22283                                  	; MSDOS 3.3
 22284                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22285                                  ;;;;;;;;;;;
 22286                                  NOROOM:
 22287 00003792 5B                      	POP	BX		; Kill return address
 22288 00003793 F8                      	CLC
 22289 00003794 C3                      	retn			; RETURN TO CALLER OF CALLER
 22290                                  
 22291                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22292                                  ;---------------------------------------------------------------------------
 22293                                  ;
 22294                                  ; Procedure Name : BREAKDOWN
 22295                                  ;
 22296                                  ; Inputs:
 22297                                  ;	CX = Length of disk transfer in bytes
 22298                                  ;	ES:BP = Base of drive parameters
 22299                                  ;	[BYTSECPOS] = Byte position within first sector
 22300                                  ;	DS = DOSDATA
 22301                                  ; Outputs:
 22302                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22303                                  ;	[SECCNT] = No. of whole sectors to transfer
 22304                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22305                                  ; AX, BX, DX destroyed. No other registers affected.
 22306                                  ;---------------------------------------------------------------------------
 22307                                  
 22308                                  BREAKDOWN:
 22309 00003795 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22310 00003798 89CB                    	MOV	BX,CX
 22311 0000379A 09C0                    	OR	AX,AX
 22312 0000379C 740E                    	JZ	short SAVFIR	; Partial first sector?
 22313                                  	;sub	ax,[es:bp+2]
 22314 0000379E 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22315 000037A2 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22316 000037A4 29C3                    	SUB	BX,AX		; Subtract from total length
 22317 000037A6 7304                    	JAE	short SAVFIR
 22318 000037A8 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22319 000037AA 31DB                    	XOR	BX,BX		; And no bytes are left
 22320                                  SAVFIR:
 22321 000037AC A3[D205]                	MOV	[BYTCNT1],AX
 22322 000037AF 89D8                    	MOV	AX,BX
 22323 000037B1 31D2                    	XOR	DX,DX
 22324                                  	;div	word [ES:BP+2]
 22325 000037B3 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22326 000037B7 A3[D605]                	MOV	[SECCNT],AX
 22327 000037BA 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22328                                  	; MSDOS 3.3
 22329                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22330                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22331                                  	;CMP	AX,1
 22332                                  	;retnz
 22333                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22334                                  	;MOV	[BYTCNT2],AX
 22335                                  	;MOV	[SECCNT],DX	; DX = 0
 22336                                  _RET45:
 22337 000037BE C3                      	retn
 22338                                  
 22339                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22340                                  
 22341                                  ;----------------------------------------------------------------------------
 22342                                  ;
 22343                                  ; Procedure Name : READ_LOCK_VIOLATION
 22344                                  ;
 22345                                  ; ES:DI points to SFT. This entry used by NET_READ
 22346                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22347                                  ; Else do retrys.
 22348                                  ; ES:DI,DS,CX preserved
 22349                                  ;
 22350                                  ;----------------------------------------------------------------------------
 22351                                  
 22352                                  READ_LOCK_VIOLATION:
 22353 000037BF C606[7505]00            	MOV	byte [READOP],0
 22354                                  ERR_ON_CHECK:
 22355                                  	;;test	word [es:di+2],8000h
 22356                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22357                                  	;JNZ	short HARD_ERR
 22358                                  
 22359                                  	; 04/05/2019
 22360                                  	;test	byte [es:di+3],80h
 22361 000037C4 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22362 000037C9 7508                    	JNZ	short HARD_ERR
 22363                                  
 22364                                  	;PUSH	CX
 22365                                  	;;mov	cl,[es:di+2]
 22366                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22367                                  	;;and	cl,0F0h
 22368                                  	;AND	CL,SHARING_MASK
 22369                                  	;;cmp	cl,0
 22370                                  	;CMP	CL,SHARING_COMPAT
 22371                                  	;POP	CX
 22372                                  	;JNE	short NO_HARD_ERR
 22373                                  	; 21/09/2023
 22374 000037CB 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22375 000037CF 24F0                    	and	al,SHARING_MASK
 22376                                  	;cmp	al,SHARING_COMPAT
 22377                                  	;jne	short NO_HARD_ERR
 22378 000037D1 7505                    	jnz	short NO_HARD_ERR
 22379                                  HARD_ERR:
 22380 000037D3 E82B3A                  	call	LOCK_VIOLATION
 22381 000037D6 73E6                    	jnc	short _RET45		; User wants Retrys
 22382                                  NO_HARD_ERR:
 22383 000037D8 31C9                    	XOR	CX,CX			;No bytes transferred
 22384                                  	;mov	ax,21h
 22385 000037DA B82100                  	MOV	AX,error_lock_violation
 22386 000037DD F9                      	STC
 22387                                  RET3:		; 06/02/2024
 22388 000037DE C3                      	retn
 22389                                  
 22390                                  ;----------------------------------------------------------------------------
 22391                                  ;
 22392                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22393                                  ;
 22394                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22395                                  ; This entry used by NET_WRITE
 22396                                  ;
 22397                                  ;----------------------------------------------------------------------------
 22398                                  
 22399                                  WRITE_LOCK_VIOLATION:
 22400 000037DF C606[7505]01            	MOV	byte [READOP],1
 22401 000037E4 EBDE                    	JMP	short ERR_ON_CHECK
 22402                                  
 22403                                  ; 04/05/2019 - Retro DOS v4.0
 22404                                  
 22405                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22406                                  
 22407                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22408                                  ;----------------------------------------------------------------------------
 22409                                  ;
 22410                                  ; Procedure Name : DISKREAD
 22411                                  ;
 22412                                  ; Inputs:
 22413                                  ;	Outputs of SETUP
 22414                                  ; Function:
 22415                                  ;	Perform disk read
 22416                                  ; Outputs:
 22417                                  ;    Carry clear
 22418                                  ;	CX = No. of bytes read
 22419                                  ;	ES:DI point to SFT
 22420                                  ;	SFT offset and cluster pointers updated
 22421                                  ;    Carry set
 22422                                  ;	CX = 0
 22423                                  ;	ES:DI point to SFT
 22424                                  ;	AX has error code
 22425                                  ;----------------------------------------------------------------------------
 22426                                  
 22427                                  ;hkn; called from disk.asm. DS already set up.
 22428                                  
 22429                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22430                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22431                                  
 22432                                  DISKREAD:
 22433                                  	;mov	ax,[es:di+11h]
 22434 000037E6 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22435                                  	;mov	bx,[es:di+13h]
 22436 000037EA 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22437 000037EE 2B06[CE05]              	SUB	AX,[BYTPOS]
 22438 000037F2 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22439 000037F6 721F                    	JB	short RDERR		;Read starts past EOF
 22440 000037F8 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22441 000037FA 09C0                    	OR	AX,AX
 22442 000037FC 7419                    	JZ	short RDERR		;Read starts at EOF
 22443 000037FE 39C8                    	CMP	AX,CX
 22444 00003800 7302                    	JAE	short ENUF		;I/O fits
 22445 00003802 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22446                                  ENUF:
 22447                                  	; MSDOS 3.3
 22448                                  	;test	byte [es:di+4],8
 22449                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22450                                  	;jnz	short SET_ACC_ERR
 22451                                  	;call	LOCK_CHECK
 22452                                  	;jnb	short _READ_OK
 22453                                  	;call	READ_LOCK_VIOLATION
 22454                                  	;jnb	short ENUF
 22455                                  	;retn
 22456                                  
 22457                                  	; MSDOS 6.0
 22458 00003804 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22459                                  	;JNC	short _READ_OK 		; There are no locks
 22460                                  	;retn
 22461                                  	; 06/02/2024
 22462 00003807 72D5                    	jc	short RET3
 22463                                  
 22464                                  _READ_OK:
 22465 00003809 C42E[8A05]              	LES	BP,[THISDPB]
 22466 0000380D E885FF                  	CALL	BREAKDOWN
 22467                                  
 22468                                  ; 10/02/2024
 22469                                  %if 0
 22470                                  	MOV	CX,[CLUSNUM] ; *
 22471                                  	call	FNDCLUS
 22472                                       	; MSDOS 6.0			;M022 conditional removed here
 22473                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22474                                  					; migrated from 330a - HKN
 22475                                  %else
 22476                                  	; 10/02/2024 - Retro DOS v4.1
 22477 00003810 E83B13                  	call	FNDCLUS_X ; *
 22478 00003813 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22479                                  %endif
 22480                                  	;OR	CX,CX
 22481                                  	;JZ	short SKIPERR
 22482                                  	; 06/02/2024
 22483 00003815 E313                    	jcxz	SKIPERR
 22484                                  
 22485                                  RDERR:
 22486 00003817 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22487 00003819 E91802                  	jmp	WRTERR22
 22488                                  
 22489                                  ;RDLASTJ: 
 22490                                  	;JMP	RDLAST                  ;M039
 22491                                  
 22492                                  SETSFTJ2: 
 22493 0000381C E99600                  	JMP	SETSFT
 22494                                  
 22495                                  CANOT_READ:
 22496                                  	; MSDOS 3.3
 22497                                  	;POP	CX		;M039.
 22498                                  	; MSDOS 3.3 & MSDOS 6.0
 22499 0000381F 59                      	POP	CX              ;Clean stack.
 22500 00003820 5B                      	POP	BX
 22501                                  
 22502                                  	;entry	SET_ACC_ERR_DS
 22503                                  SET_ACC_ERR_DS:
 22504                                  
 22505                                  ;hkn; SS is DOSDATA
 22506                                  	;Context DS
 22507 00003821 16                      	push	ss
 22508 00003822 1F                      	pop	ds
 22509                                  
 22510                                  	;entry	SET_ACC_ERR
 22511                                  SET_ACC_ERR:
 22512 00003823 31C9                    	XOR	CX,CX
 22513                                  	;mov	ax,5
 22514 00003825 B80500                  	MOV	AX,error_access_denied
 22515 00003828 F9                      	STC
 22516 00003829 C3                      	retn
 22517                                  
 22518                                  SKIPERR:
 22519 0000382A 8916[BA05]              	MOV	[LASTPOS],DX
 22520 0000382E 891E[BC05]              	MOV	[CLUSNUM],BX
 22521 00003832 833E[D205]00            	CMP	word [BYTCNT1],0
 22522 00003837 7405                    	JZ	short RDMID
 22523                                  
 22524 00003839 E88C13                  	call	BUFRD
 22525                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22526                                  	; 10/02/2024
 22527                                  	; ds=ss
 22528 0000383C 72E5                    	jc	short SET_ACC_ERR
 22529                                  
 22530                                  RDMID:
 22531 0000383E 833E[D605]00            	CMP	word [SECCNT],0
 22532                                  	;JZ	RDLAST ; 10/08/2018
 22533 00003843 7453                    	jz	short RDLAST
 22534                                  
 22535 00003845 E81414                  	call	NEXTSEC
 22536 00003848 72D2                    	JC	short SETSFTJ2
 22537                                  
 22538 0000384A C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22539                                  ONSEC:
 22540 0000384F 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22541 00003853 8B0E[D605]              	MOV	CX,[SECCNT]
 22542 00003857 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22543                                  RDLP:
 22544 0000385B E82F14                  	call	OPTIMIZE
 22545                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22546                                  	; 10/02/2024
 22547                                  	; ds=ss
 22548 0000385E 72C3                    	jc	short SET_ACC_ERR
 22549                                  
 22550 00003860 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22551 00003861 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22552 00003862 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22553                                  	;mov	byte [ALLOWED],38h
 22554 00003863 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22555 00003868 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22556                                  
 22557 0000386C 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22558 0000386D 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22559                                  
 22560                                  	; 04/05/2019 - Retro DOS v4.0
 22561                                  
 22562                                  	; MSDOS 6.0
 22563 0000386E E8BD21                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22564                                  
 22565                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22566 00003871 E8DBFD                  	call	DREAD
 22567                                  
 22568                                  	; 10/02/2024
 22569                                  	; ds<>ss
 22570                                  
 22571                                  	; MSDOS 3.3 
 22572                                  	;pop	bx
 22573                                  	;pop	dx
 22574                                  	;jc	short CANOT_READ
 22575                                  	;add	bx,dx	; (bx = Extent end)
 22576                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22577                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22578                                  	;call	SETVISIT
 22579                                  	; ->***
 22580                                  ;M039
 22581                                  	; MSDOS 6.0 
 22582 00003874 59                      	pop	cx
 22583 00003875 5A                      	pop	dx
 22584 00003876 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22585 0000387B 72A2                    	jc	short CANOT_READ
 22586                                  
 22587 0000387D 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22588                                  
 22589                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22590                                  ;            sectors, also termed an "Extent".)
 22591                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22592                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22593                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22594                                  ;
 22595                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22596                                  ;	buffers must be "read" into the transfer memory block, so that the
 22597                                  ;       transfer memory reflects the most recent data.
 22598                                  
 22599 00003882 E85E00                  	call	DskRdBufScan
 22600                                  
 22601                                  	;Context DS
 22602 00003885 16                      	push	ss
 22603 00003886 1F                      	pop	ds
 22604                                          
 22605 00003887 59                      	pop	cx
 22606 00003888 5B                              pop	bx
 22607                                  
 22608                                  ;       CX = # of sector remaining.
 22609                                  ;       BX = Next physical cluster.
 22610                                  
 22611                                  ;M039
 22612                                  
 22613                                  ;;;;;;;;
 22614                                  ;	; 25/07/2018 - Retro DOS v3.0
 22615                                  ;	; ***->
 22616                                  ;	; MSDOS 3.3
 22617                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22618                                  ;bufq:
 22619                                  ;;	DX = Extent start.
 22620                                  ;;	BX = Extent end.
 22621                                  ;;	 AL = Drive #.
 22622                                  ;;     DS:DI-> 1st buffer in queue.
 22623                                  ;
 22624                                  ;	;or	byte [di+5],20h
 22625                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22626                                  ;	;cmp	al,[di+4]	
 22627                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22628                                  ;	jnz	short bufq3
 22629                                  ;	;cmp	[di+6],dx
 22630                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22631                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22632                                  ;	;cmp	[di+6],bx
 22633                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22634                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22635                                  ;	
 22636                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22637                                  ;
 22638                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22639                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22640                                  ;;      as MRU (Most Recently Used).
 22641                                  ;
 22642                                  ;	;test	byte [di+5],40h
 22643                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22644                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22645                                  ;	pop	ax ; transfer address
 22646                                  ;	push	ax
 22647                                  ;	push	di
 22648                                  ;	push	dx
 22649                                  ;	;sub	dx,[di+6]
 22650                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22651                                  ;	neg	dx
 22652                                  ;
 22653                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22654                                  ;;           block.
 22655                                  ;
 22656                                  ;	mov	si,di
 22657                                  ;	mov	di,ax
 22658                                  ;	mov	ax,dx
 22659                                  ;	;mov	cx,[es:bp+6]	
 22660                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22661                                  ;	mul	cx
 22662                                  ;	add	di,ax
 22663                                  ;
 22664                                  ;	lea	si,[si+16]
 22665                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22666                                  ;	shr	cx,1
 22667                                  ;	push	es
 22668                                  ;	mov	es,[SS:DMAADD+2]
 22669                                  ;
 22670                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22671                                  ;;      DS:SI-> Buffer sector data.
 22672                                  ;;      ES:DI-> Destination within Transfer memory block.
 22673                                  ;
 22674                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22675                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22676                                  ;	;rep	movsb                   ;Copy last byte.
 22677                                  ;	jnc	short bufq1
 22678                                  ;	movsb
 22679                                  ;bufq1:
 22680                                  ;	pop	es
 22681                                  ;	pop	dx
 22682                                  ;	pop	di
 22683                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22684                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22685                                  ;bufq2:
 22686                                  ;	call	SCANPLACE
 22687                                  ;bufq3:
 22688                                  ;	call	SKIPVISIT
 22689                                  ;	jnz	short bufq
 22690                                  ;	
 22691                                  ;	push	ss
 22692                                  ;	pop	ds
 22693                                  ;	pop	cx
 22694                                  ;	pop	cx
 22695                                  ;	pop	bx	
 22696                                  ;bufq4:
 22697                                  ;;;;;;;
 22698 00003889 E30D                    	JCXZ	RDLAST
 22699                                  
 22700 0000388B E8881B                  	call	IsEOF			; test for eof on fat size
 22701 0000388E 7325                    	JAE	short SETSFT
 22702                                  
 22703 00003890 B200                    	MOV	DL,0
 22704 00003892 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22705 00003896 EBC3                    	JMP	short RDLP ; 19/05/2019
 22706                                  
 22707                                  RDLAST:
 22708 00003898 A1[D405]                	MOV	AX,[BYTCNT2]
 22709 0000389B 09C0                    	OR	AX,AX
 22710 0000389D 7416                    	JZ	short SETSFT
 22711 0000389F A3[D205]                	MOV	[BYTCNT1],AX
 22712                                  
 22713 000038A2 E8B713                  	call	NEXTSEC
 22714 000038A5 720E                    	JC	short SETSFT
 22715                                  
 22716 000038A7 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22717 000038AD E81813                  	call	BUFRD
 22718                                  	; 10/08/2018
 22719 000038B0 7303                    	JNC	short SETSFT
 22720                                  	;JMP	SET_ACC_ERR_DS
 22721                                  	; 10/02/2024
 22722                                  	; ds=ss
 22723 000038B2 E96EFF                  	jmp	SET_ACC_ERR
 22724                                  
 22725                                  ;------------------------------------------------------------------------------
 22726                                  ;
 22727                                  ; Procedure Name : SETSFT
 22728                                  ; Inputs:
 22729                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22730                                  ;		and set cluster fields
 22731                                  ; Function:
 22732                                  ;	Update [THISSFT] based on the transfer
 22733                                  ; Outputs:
 22734                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22735                                  ;	ES:DI points to [THISSFT]
 22736                                  ;	CX No. of bytes transferred
 22737                                  ;	Carry clear
 22738                                  ;
 22739                                  ;----------------------------------------------------------------------------
 22740                                  
 22741                                  	;entry	SETSFT
 22742                                  
 22743                                  ; 26/07/2018 - Retro DOS v3.0
 22744                                  SETSFT:
 22745 000038B5 C43E[9E05]              	LES	DI,[THISSFT]
 22746                                  
 22747                                  ; Same as SETSFT except ES:DI already points to SFT
 22748                                  	;entry	SETCLUS
 22749                                  SETCLUS:	
 22750 000038B9 8B0E[B805]              	MOV	CX,[NEXTADD]
 22751 000038BD 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22752                                  	;;test	word [es:di+5],80h
 22753                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22754                                  	;JNZ	short ADDREC		; don't set clusters if device
 22755                                  
 22756                                  	; 04/05/2019 - Retro DOS v4.0
 22757                                  	;test	byte [es:di+5],80h
 22758 000038C1 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22759 000038C6 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22760                                  
 22761 000038C8 A1[BC05]                	MOV	AX,[CLUSNUM]
 22762                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22763                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22764 000038CB 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22765 000038CF A1[BA05]                	MOV	AX,[LASTPOS]
 22766                                  	;mov	[es:di+19h],ax
 22767 000038D2 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22768                                  
 22769                                  ;----------------------------------------------------------------------------
 22770                                  ;
 22771                                  ; Procedure : AddRec
 22772                                  ; Inputs:
 22773                                  ;	ES:DI points to SFT
 22774                                  ;	CX is No. Bytes transferred
 22775                                  ; Function:
 22776                                  ;	Update the SFT offset based on the transfer
 22777                                  ; Outputs:
 22778                                  ;	sf_position updated to point to first byte after transfer
 22779                                  ;	ES:DI points to SFT
 22780                                  ;	CX No. of bytes transferred
 22781                                  ;	Carry clear
 22782                                  ;----------------------------------------------------------------------------
 22783                                  
 22784                                  	;entry	AddRec
 22785                                  ADDREC:
 22786 000038D6 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22787                                  	;add	[es:di+15h],cx
 22788 000038D8 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22789                                  	;adc	word [es:di+17h], 0
 22790 000038DC 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22791                                  RET28:	
 22792 000038E1 F8                      	CLC
 22793 000038E2 C3                      	retn
 22794                                  
 22795                                  ; 25/07/2018
 22796                                  ; MSDOS 6.0
 22797                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22798                                  ;----------------------------------------------------------------------------
 22799                                  ;
 22800                                  ; Procedure Name : DskRdBufScan
 22801                                  ;
 22802                                  ; Inputs:
 22803                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22804                                  ;            sectors, also termed an "Extent".)
 22805                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22806                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22807                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22808                                  ;
 22809                                  ; Function:
 22810                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22811                                  ;	"read" into the transfer memory block, so that the transfer memory
 22812                                  ;	reflects the most recent data.
 22813                                  ;
 22814                                  ; Outputs:
 22815                                  ;       Transfer memory updated as required.
 22816                                  ;
 22817                                  ; Uses:
 22818                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22819                                  ;       SS override for all global variables.
 22820                                  ;
 22821                                  ; Notes:
 22822                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22823                                  ;	than the FIRST.
 22824                                  ;----------------------------------------------------------------------------
 22825                                  ;M039: Created
 22826                                  
 22827                                  ; 04/05/2019 - Retro DOS v4.0
 22828                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22829                                  
 22830                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22831                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22832                                  
 22833                                  ;procedure DskRdBufScan,NEAR
 22834                                  ;
 22835                                  ;ASSUME  DS:NOTHING
 22836                                  
 22837                                  DskRdBufScan:
 22838 000038E3 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22839 000038E9 743C                    	je	short bufx		     ; -no, skip all work.
 22840                                  
 22841 000038EB 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22842 000038F0 89DE                    	mov     si,bx
 22843 000038F2 01D1                    	add     cx,dx
 22844 000038F4 83D600                  	adc     si,0
 22845                                  
 22846 000038F7 E8CC1E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22847                                  	;mov	ax,[di+2]
 22848 000038FA 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22849 000038FD 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22850                                  		
 22851                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22852                                  	;;mov	al,[es:bp+0]
 22853                                  	;mov	al,[es:bp+DPB.DRIVE]
 22854                                  	; 15/12/2022
 22855 00003901 268A4600                	mov	al,[es:bp]
 22856                                  
 22857                                  ;       BX:DX = Extent start.
 22858                                  ;       SI:CX = Extent end + 1.
 22859                                  ;          AL = Drive #.
 22860                                  ;       DS:DI-> 1st buffer in queue.
 22861                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22862                                  
 22863                                  bufq:	
 22864                                  	;cmp	al,[di+4]
 22865 00003905 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22866 00003908 7514                    	jne	short bufq1        	;  -no, jump.
 22867                                  
 22868                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22869                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22870                                  
 22871                                  	;cmp	bx,[di+8]
 22872 0000390A 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22873 0000390D 7503                    	jne	short bufq01
 22874                                  	;cmp	dx,[di+6]
 22875 0000390F 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22876                                  bufq01:
 22877 00003912 770A                    	ja	short bufq1
 22878                                  
 22879                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22880                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22881                                  
 22882                                  	;cmp	si,[di+8]
 22883 00003914 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22884 00003917 7503                    	jne	short bufq02
 22885                                  	;cmp	cx,[di+6]
 22886 00003919 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22887                                  bufq02:
 22888 0000391C 770A                    	ja	short bufq2
 22889                                  bufq1:	
 22890 0000391E 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22891 00003923 8B3D                    	mov	di,[di]
 22892                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22893 00003925 75DE                    	jne	short bufq		; -no, do next buffer
 22894                                  bufx:
 22895 00003927 C3                      	retn				;Exit.
 22896                                  
 22897                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22898                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22899                                  ;       as MRU (Most Recently Used).
 22900                                  
 22901                                  bufq2:	
 22902 00003928 50                      	push	ax
 22903                                  	;test	byte [di+5],40h
 22904 00003929 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22905 0000392D 7428                    	jz	short bufq3                    ; -no, jump.
 22906                                  
 22907                                  ;       SaveReg <cx,dx,si,di,es>
 22908 0000392F 51                      	push	cx
 22909 00003930 52                      	push	dx
 22910 00003931 56                      	push	si
 22911 00003932 57                      	push	di
 22912 00003933 06                      	push	es
 22913                                  
 22914 00003934 89D0                    	mov     ax,dx
 22915                                  	;sub	ax,[di+6]
 22916 00003936 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22917 00003939 F7D8                    	neg	ax
 22918                                  
 22919                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22920                                  ;            block. (Note: the upper word of the sector # may be ignored
 22921                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22922                                  ;            is imposed by the input parameters of the disk read operation.)
 22923                                  
 22924                                  	;lea	si,[di+20]
 22925 0000393B 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22926                                  	;mov	cx,[es:bp+2]
 22927 0000393E 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22928 00003942 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22929                                  	;mov	di,[ss:TEMP_VAR]
 22930                                  	; 09/02/2024
 22931 00003944 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 22932 00003949 01C7                    	add	di,ax
 22933                                  	;mov	es,[ss:TEMP_VAR2]
 22934 0000394B D1E9                    	shr	cx,1
 22935                                  
 22936                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22937                                  ;       DS:SI-> Buffer sector data.
 22938                                  ;       ES:DI-> Destination within Transfer memory block.
 22939                                  
 22940 0000394D F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22941                                  	;; 04/05/2019
 22942                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22943                                  	;;rep	movsb                   ;Copy last byte.
 22944                                  	;jnc	short bufq03	
 22945                                  	;movsb
 22946                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22947                                  	;adc	cx,0
 22948                                  	;rep	movsb
 22949                                  	; 22/09/2023
 22950 0000394F 7301                    	jnc	short bufq03
 22951 00003951 A4                      	movsb
 22952                                  bufq03:
 22953                                  	;RestoreReg <es,di,si,dx,cx>
 22954 00003952 07                      	pop	es
 22955 00003953 5F                      	pop	di
 22956 00003954 5E                      	pop	si
 22957 00003955 5A                      	pop	dx
 22958 00003956 59                      	pop	cx
 22959                                  
 22960                                  ;       DS:DI -> current buffer.
 22961                                  bufq3:	
 22962 00003957 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22963                                          ;invoke SCANPLACE
 22964 00003959 E87C1E                  	call	SCANPLACE
 22965 0000395C 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22966 00003961 58                      	pop	ax
 22967                                  	;jne	short bufq		; -no, jump.
 22968                                  	;;jmp	short bufx		; -yes, exit.
 22969                                  	;; 12/06/2019
 22970                                  	;retn
 22971                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22972 00003962 75A1                    	jne	short bufq
 22973                                  	;jmp	short bufx
 22974                                  	; 09/02/2024
 22975 00003964 C3                      	retn	; Exit
 22976                                  
 22977                                  ;EndProc DskRdBufScan
 22978                                  
 22979                                  ;============================================================================
 22980                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22981                                  ;============================================================================
 22982                                  ; 04/05/2019 - Retro DOS v4.0
 22983                                  ; 24/07/2018 - Retro DOS v3.0
 22984                                  
 22985                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22986                                  ;----------------------------------------------------------------------------
 22987                                  ;
 22988                                  ; Procedure Name : DISKWRITE
 22989                                  ;
 22990                                  ; Inputs:
 22991                                  ;       Outputs of SETUP
 22992                                  ; Function:
 22993                                  ;       Perform disk write
 22994                                  ; Outputs:
 22995                                  ;    Carry clear
 22996                                  ;       CX = No. of bytes written
 22997                                  ;       ES:DI point to SFT
 22998                                  ;       SFT offset and cluster pointers updated
 22999                                  ;    Carry set
 23000                                  ;       CX = 0
 23001                                  ;       ES:DI point to SFT
 23002                                  ;       AX has error code
 23003                                  ;----------------------------------------------------------------------------
 23004                                  
 23005                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23006                                  
 23007                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23008                                  
 23009                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23010                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23011                                  
 23012                                  DISKWRITE:
 23013                                  	; MSDOS 3.3
 23014                                  	; IBMDOS.COM - Offset 436Dh
 23015                                  	;;test	byte [es:di+4],8
 23016                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23017                                  	;jz	short write_cont
 23018                                  	;jmp	SET_ACC_ERR_DS
 23019                                  ;write_cont:
 23020                                  	;push	cx
 23021                                  	;or	cx,cx
 23022                                  	;jnz	short Not_Truncate
 23023                                  	;;mov	cx,-1
 23024                                  	;dec	cx
 23025                                  ;Not_Truncate:
 23026                                  	;call	LOCK_CHECK
 23027                                  	;pop	cx
 23028                                  	;jnb	short _WRITE_OK
 23029                                  	;call	WRITE_LOCK_VIOLATION
 23030                                  	;jnb	short DISKWRITE
 23031                                  	;retn
 23032                                  
 23033                                  	; MSDOS 6.0
 23034 00003965 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23035                                  	; 19/08/2018
 23036 00003968 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23037 0000396A C3                      	retn
 23038                                  
 23039                                  WRTEOFJ:
 23040 0000396B E9D101                  	JMP     WRTEOF
 23041                                  
 23042                                  _WRITE_OK:
 23043                                   	; 27/07/2018
 23044                                  	; IBMDOS.COM - Offset 438Eh
 23045                                  	
 23046                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23047                                  	;and	word [es:di+5],0BFBFh
 23048 0000396E 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23049                                  				; Mark file as dirty, clear no date on close
 23050                                  ; 10/02/2024
 23051                                  %if 0
 23052                                  	; 04/05/2019 - Retro DOS v4.0
 23053                                  
 23054                                  	; MSDOS 6.0
 23055                                  	;mov 	ax,[es:di+11h]
 23056                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23057                                          MOV	[TEMP_VAR],AX                           ;M039
 23058                                  	;mov	ax,[es:di+13h]
 23059                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23060                                          MOV	[TEMP_VAR2],AX                          ;M039
 23061                                  %else
 23062                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23063                                  	;les	ax,[es:di+11h]
 23064 00003974 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23065 00003978 8C06[0E06]              	mov	[TEMP_VAR2],es
 23066 0000397C A3[0C06]                	mov	[TEMP_VAR],ax
 23067                                  %endif
 23068                                  
 23069                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23070                                  
 23071                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23072 0000397F C42E[8A05]              	LES     BP,[THISDPB]
 23073                                  
 23074 00003983 E80FFE                  	call	BREAKDOWN
 23075                                  
 23076 00003986 A1[CE05]                	MOV     AX,[BYTPOS]
 23077 00003989 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23078 0000398D E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23079 0000398F 01C8                    	ADD     AX,CX
 23080 00003991 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23081                                  
 23082                                  	;mov	bx,[es:bp+2]
 23083 00003994 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23084                                  
 23085                                  	; MSDOS 3.3
 23086                                  	;cmp	dx,bx
 23087                                  	;jnb	short WRTERR33
 23088                                  	;div	bx
 23089                                  	;mov	bx,ax
 23090                                  	;OR	DX,DX
 23091                                  	;JNZ	short CALCLUS
 23092                                  	;dec	ax
 23093                                  ;CALCLUS:
 23094                                  	; MSDOS 3.3
 23095                                  	;mov	cl,[es:bp+5]
 23096                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23097                                  	;shr	ax,cl
 23098                                  	;push	ax
 23099                                  	;push	dx
 23100                                  	;push	es
 23101                                  	;les	di,[THISSFT]
 23102                                  	;;mov	ax,[es:di+11h]
 23103                                  	;;mov	dx,[es:di+13h]
 23104                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23105                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23106                                  	;pop	es
 23107                                  	;;DX:AX = current file size (in bytes).
 23108                                  	;;div	word [es:bp+2]
 23109                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23110                                  	;mov	cx,ax
 23111                                  	;or	dx,dx
 23112                                  	;jz	short NORND
 23113                                  	;inc	ax
 23114                                  ;NORND:
 23115                                  	; MSDOS 6.0
 23116 00003998 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23117 0000399B 89C6                    	MOV	SI,AX
 23118 0000399D 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23119                                  
 23120                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23121                                  
 23122 000039A1 09D2                    	OR	DX,DX
 23123 000039A3 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23124 000039A4 89CA                    	MOV	DX,CX			;M039
 23125 000039A6 7506                    	JNZ	short CALCLUS
 23126 000039A8 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23127 000039AB 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23128                                  
 23129                                  CALCLUS:
 23130                                  	; MSDOS 6.0
 23131 000039AE E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23132 000039B1 5A                      	POP	DX
 23133                                  
 23134                                  ;       AX = Last cluster to write.
 23135                                  ;       DX = # of bytes in last sector to write (the "tail").
 23136                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23137                                  
 23138 000039B2 50                      	PUSH	AX
 23139 000039B3 52                      	PUSH	DX
 23140                                  ;M039
 23141 000039B4 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23142 000039B8 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23143 000039BB E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23144 000039BE 890E[0E06]              	mov	[TEMP_VAR2],cx
 23145 000039C2 890E[CA05]              	mov	[VALSEC+2],cx
 23146 000039C6 89C1                    	mov	cx,ax
 23147 000039C8 89F3                    	mov	bx,si
 23148                                  
 23149                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23150                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23151                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23152                                  ;                     DX = # of bytes in last sector of current file.
 23153                                  ;M039
 23154 000039CA 09D2                    	OR	DX,DX
 23155 000039CC 7407                    	JZ	short NORND
 23156                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23157                                  	;ADC	word [VALSEC+2],0
 23158                                  	; 22/09/2023
 23159 000039CE 40                      	inc	ax  ; 0FFFFh -> 0
 23160 000039CF 7504                    	jnz	short NORND
 23161 000039D1 FF06[CA05]              	inc	word [VALSEC+2]
 23162                                  NORND:		
 23163                                  	; MSDOS 3.3 & MSDOS 6.0
 23164 000039D5 A3[C805]                	MOV     [VALSEC],AX
 23165                                  
 23166                                  ;       [VALSEC] = Last sector of current file.
 23167                                  
 23168 000039D8 31C0                    	XOR     AX,AX
 23169 000039DA A3[DE05]                	MOV     [GROWCNT],AX
 23170 000039DD A3[E005]                	MOV     [GROWCNT+2],AX
 23171 000039E0 58                      	POP     AX
 23172                                  
 23173                                  	; MSDOS 6.0
 23174 000039E1 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23175 000039E5 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23176 000039E9 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23177 000039EB 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23178 000039ED 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23179 000039EF 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23180 000039F3 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23181                                  lowsec:
 23182                                  	;MOV	DI,0			;F.C. >32mb
 23183                                  	; 22/09/2023
 23184 000039F5 31FF                    	xor	di,di
 23185                                  	; MSDOS 3.3 & MSDOS 6.0
 23186 000039F7 29CB                    	SUB	BX,CX			; Number of full sectors
 23187 000039F9 7253                    	JB	short NOGROW
 23188 000039FB 7444                    	JZ	short TESTTAIL
 23189                                  yesgrow:
 23190                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23191 000039FD 89D1                    	MOV     CX,DX
 23192 000039FF 93                      	XCHG    AX,BX
 23193                                  	;mul	word [es:bp+2]
 23194 00003A00 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23195                                  	
 23196                                  	; MSDOS 6.0
 23197 00003A04 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23198 00003A08 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23199 00003A0B 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23200                                  	;mul	word [es:bp+2]
 23201 00003A0D 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23202                                  	
 23203 00003A11 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23204 00003A15 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23205 00003A17 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23206                                  
 23207                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23208 00003A1A 29C8                    	SUB     AX,CX			; Take off current "tail"
 23209 00003A1C 83DA00                  	SBB     DX,0			; 32-bit extension
 23210 00003A1F 01D8                    	ADD     AX,BX			; Add on new "tail"
 23211 00003A21 83D200                  	ADC     DX,0			; ripple tim's head off
 23212 00003A24 EB21                    	JMP     SHORT SETGRW
 23213                                  
 23214                                  HAVSTART:
 23215                                  	;int 3
 23216 00003A26 89C1                    	MOV     CX,AX
 23217 00003A28 E84711                  	call	SKPCLP
 23218                                  	;JCXZ	DOWRTJ
 23219                                  	; 16/12/2022
 23220 00003A2B E353                    	jcxz	DOWRT
 23221                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23222                                  	;jcxz	DOWRTJ
 23223                                  
 23224 00003A2D E8DF12                  	call	ALLOCATE
 23225                                  	;JNC	short DOWRTJ
 23226                                  	; 16/12/2022
 23227 00003A30 734E                    	jnc	short DOWRT
 23228                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23229                                  	;jnc	short DOWRTJ
 23230                                  
 23231                                  	;entry   WRTERR
 23232                                  WRTERR:
 23233 00003A32 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23234                                  
 23235                                  	;entry WRTERR22
 23236                                  WRTERR22:
 23237 00003A34 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23238                                  
 23239                                  	; 27/07/2018
 23240                                  WRTERR33:
 23241                                  	;MOV	CX,0			;No bytes transferred
 23242 00003A37 31C9                    	XOR     CX,CX
 23243                                  
 23244 00003A39 C43E[9E05]              	LES     DI,[THISSFT]
 23245                                  	;CLC ; 19/05/2019
 23246                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23247                                  	; 16/12/2022
 23248                                  	;clc
 23249 00003A3D C3                      	retn
 23250                                  
 23251                                  	; 16/12/2022
 23252                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23253                                  ;DOWRTJ:
 23254                                  	;JMP	short DOWRT
 23255                                  
 23256                                  ACC_ERRWJ:
 23257                                  	; 10/08/2018
 23258                                  	;JMP	SET_ACC_ERRW
 23259                                  	; 16/12/2022
 23260                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23261                                  	; 10/02/2024
 23262                                  	; ds=ss
 23263 00003A3E E9E2FD                  	jmp	SET_ACC_ERR
 23264                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23265                                  	;;jmp	SET_ACC_ERRW	
 23266                                  
 23267                                  TESTTAIL:
 23268 00003A41 29D0                    	SUB     AX,DX
 23269 00003A43 7609                    	JBE	short NOGROW
 23270 00003A45 31D2                    	XOR     DX,DX
 23271                                  SETGRW:
 23272 00003A47 A3[DE05]                	MOV	[GROWCNT],AX
 23273 00003A4A 8916[E005]              	MOV	[GROWCNT+2],DX
 23274                                  NOGROW:
 23275 00003A4E 58                      	POP     AX
 23276                                  
 23277                                  ; 10/02/2024
 23278                                  %if 0
 23279                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23280                                  	call	FNDCLUS
 23281                                  %else
 23282                                  	; 10/02/2024 - Retro DOS v4.1
 23283 00003A4F E8FC10                  	call	FNDCLUS_X ; *+
 23284                                  %endif
 23285 00003A52 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23286                                  
 23287 00003A54 891E[BC05]              	MOV     [CLUSNUM],BX
 23288 00003A58 8916[BA05]              	MOV     [LASTPOS],DX
 23289                                  
 23290 00003A5C 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23291 00003A5E 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23292 00003A60 E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23293 00003A62 51                      	PUSH    CX              ; No. of clusters short of first
 23294 00003A63 89C1                    	MOV     CX,AX
 23295 00003A65 E8A712                  	call	ALLOCATE
 23296 00003A68 59                      	POP     CX
 23297 00003A69 72C7                    	JC	short WRTERR
 23298 00003A6B 8B16[BA05]              	MOV     DX,[LASTPOS]
 23299 00003A6F 42                      	INC     DX
 23300 00003A70 49                      	DEC     CX
 23301 00003A71 7405                    	JZ	short NOSKIP
 23302 00003A73 E8FC10                  	call	SKPCLP
 23303 00003A76 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23304                                  NOSKIP:
 23305 00003A78 891E[BC05]              	MOV     [CLUSNUM],BX
 23306 00003A7C 8916[BA05]              	MOV     [LASTPOS],DX
 23307                                  DOWRT:
 23308 00003A80 833E[D205]00            	CMP     word [BYTCNT1],0
 23309 00003A85 7405                    	JZ	short WRTMID
 23310                                  	; 09/02/2024
 23311                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23312 00003A87 E87711                  	call	BUFWRT
 23313 00003A8A 72B2                    	JC	short ACC_ERRWJ
 23314                                  WRTMID:
 23315 00003A8C A1[D605]                	MOV     AX,[SECCNT]
 23316 00003A8F 09C0                    	OR      AX,AX
 23317                                  	; 20/11/2022
 23318 00003A91 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23319 00003A93 0106[C405]              	ADD     [SECPOS],AX
 23320                                  	; 19/05/2019
 23321                                  	; MSDOS 6.0
 23322 00003A97 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23323 00003A9C E8BD11                  	call	NEXTSEC
 23324                                  	; 16/12/2022
 23325 00003A9F 729D                    	JC	short ACC_ERRWJ
 23326                                  	;JC	short SET_ACC_ERRW	;M039
 23327 00003AA1 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23328 00003AA6 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23329 00003AAA 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23330 00003AAE 8B0E[D605]              	MOV     CX,[SECCNT]
 23331                                  WRTLP:
 23332 00003AB2 E8D811                  	call	OPTIMIZE
 23333 00003AB5 7248                    	JC	short SET_ACC_ERRW
 23334                                  	; 16/12/2022
 23335                                  	;JC	short ACC_ERRWJ
 23336                                  
 23337                                  ;M039
 23338                                  ;       DI = Next physical cluster.
 23339                                  ;       AX = # sectors remaining.
 23340                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23341                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23342                                  ;	     sectors, also termed an "Extent".)
 23343                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23344                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23345                                  ;
 23346                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23347                                  ;	are in Extent; they are being over-written.
 23348                                  
 23349 00003AB7 57                      	push    di
 23350 00003AB8 50                      	push    ax
 23351                                  
 23352                                  	; MSDOS 3.3
 23353                                  	; IBMDOS.COM (1987) - Offset 4497h
 23354                                  	;push	dx
 23355                                  	;push	bx
 23356                                  	;mov	al,[es:bp]
 23357                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23358                                  	;mov	bx,cx
 23359                                  	;add	bx,dx	; (bx = Extent end)
 23360                                  
 23361                                  ;	DX = Extent start.
 23362                                  ;	BX = Extent end.
 23363                                  ;	AL = Drive #.
 23364                                  
 23365                                  	;call	SETVISIT
 23366                                  
 23367                                  ;wbufq1:
 23368                                  	;;or	byte [di+5],20h
 23369                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23370                                  	;;cmp	al,[di+4]	
 23371                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23372                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23373                                  	;;cmp	[di+6],dx
 23374                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23375                                  	;jb	short wbufq2
 23376                                  	;;cmp	[di+6],bx
 23377                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23378                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23379                                  
 23380                                  	;; Buffer sector is in the Extent
 23381                                  
 23382                                  	;;mov	word [di+4],20FFh
 23383                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23384                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23385                                  	;				; .buf_flags, AH = 0, reset/clear
 23386                                  	;call	SCANPLACE
 23387                                  ;wbufq2:
 23388                                  	;call	SKIPVISIT
 23389                                  	;jnz	short wbufq1
 23390                                  	;pop	bx
 23391                                  	;pop	dx
 23392                                  
 23393                                          ; MSDOS 6.0
 23394 00003AB9 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23395                                  
 23396                                  ;ASSUME DS:NOTHING
 23397                                  ;M039
 23398                                  	; MSDOS 3.3 & MSDOS 6.0
 23399                                  ;hkn; SS override for DMAADD and ALLOWED
 23400 00003ABC 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23401                                  	;mov	byte [ss:ALLOWED],38h
 23402 00003AC1 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23403                                  
 23404                                  ;	put logic from DWRITE in-line here so we can modify it
 23405                                  ;	for DISK FULL conditions.
 23406                                  
 23407                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23408                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23409                                  
 23410                                  	; 16/12/2022
 23411                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23412                                  	;call	DWRITE
 23413                                  
 23414                                  ;DWRITE_OKAY:
 23415                                  
 23416                                  	; 16/12/2022
 23417                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23418                                  	;pop	cx
 23419                                  	;pop	bx
 23420                                  	;push	ss
 23421                                  	;pop	ds
 23422                                  	;jc	short SET_ACC_ERRW
 23423                                  	;jcxz	WRTLAST
 23424                                  	;mov	dl,0
 23425                                  	;inc	word [LASTPOS]
 23426                                  	;jmp	short WRTLP
 23427                                  
 23428                                  	; 16/12/2022
 23429                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23430                                  DWRITE_LUP:
 23431                                  	; 23/07/2019 - Retro DOS v3.2
 23432                                  
 23433                                  	; MSDOS 6.0
 23434 00003AC7 E8F9FB                  	call	DSKWRITE
 23435 00003ACA 7417                    	jz	short DWRITE_OKAY
 23436                                  
 23437                                  ;;	int	3
 23438                                  
 23439 00003ACC 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23440 00003ACE 7423                    	jz	short DWRITE_DISK_FULL
 23441                                  
 23442                                  	; 16/12/2022
 23443                                  
 23444                                  ;;hkn; SS override
 23445 00003AD0 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23446 00003AD6 E819FC                  	call	HARDERRRW
 23447 00003AD9 3C01                    	CMP	AL,1		; Check for retry
 23448 00003ADB 74EA                    	JZ	short DWRITE_LUP
 23449                                  
 23450                                  	; 16/12/2022
 23451                                  	; 23/07/2019
 23452                                  	;POP	CX ; *4*
 23453                                  	;POP	BX ; *5*
 23454                                  	;
 23455                                  	;push	ss
 23456                                  	;pop	ds
 23457                                  	;
 23458                                  
 23459                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23460                                  
 23461                                  	; 16/12/2022
 23462 00003ADD 3C03                    	CMP	AL,3		; Check for FAIL
 23463 00003ADF F8                      	CLC
 23464 00003AE0 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23465 00003AE2 F9                      	STC
 23466                                  
 23467                                  DWRITE_OKAY:
 23468                                  	; 16/12/2022
 23469                                  	; 23/07/2019
 23470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23471 00003AE3 59                      	POP	CX ; *4*
 23472 00003AE4 5B                      	POP	BX ; *5*
 23473                                  
 23474                                  ;       CX = # sectors remaining.
 23475                                  ;       BX = Next physical cluster.
 23476                                  
 23477                                  ;hkn; SS override
 23478                                          ;Context DS
 23479                                  	; 16/12/2022
 23480                                  	;push	ss
 23481                                  	;pop	ds
 23482                                  
 23483                                  	; 10/02/2024
 23484                                  	; 16/12/2022
 23485                                  	;jc	short SET_ACC_ERRW
 23486                                  
 23487                                  	; 16/12/2022
 23488 00003AE5 16                      	push	ss
 23489 00003AE6 1F                      	pop	ds
 23490                                  
 23491                                  	; 10/02/2024
 23492 00003AE7 7216                    	jc	short SET_ACC_ERRW
 23493                                  
 23494 00003AE9 E317                    	JCXZ    WRTLAST
 23495                                  
 23496                                  	; 10/02/2024
 23497 00003AEB B200                    	MOV	DL,0
 23498                                  	;xor	dl,dl ; 23/07/2019
 23499 00003AED FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23500 00003AF1 EBBF                    	JMP     short WRTLP
 23501                                  
 23502                                  	; 23/07/2019 - Retro DOS v3.2
 23503                                  	; 09/08/2018
 23504                                  	; MSDOS 6.0
 23505                                  DWRITE_DISK_FULL:
 23506                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23507                                  	; 16/12/2022
 23508 00003AF3 16                      	push	ss
 23509 00003AF4 1F                      	pop	ds
 23510 00003AF5 59                      	pop	cx		; unjunk stack
 23511 00003AF6 5B                      	pop	bx
 23512 00003AF7 C606[0B06]01            	mov	byte [DISK_FULL],1
 23513                                  	;stc
 23514 00003AFC E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23515                                  
 23516                                  	; 16/12/2022
 23517                                  SET_ACC_ERRW:
 23518                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23519                                  	; 10/02/2024
 23520                                  	; ds=ss
 23521 00003AFF E921FD                  	jmp	SET_ACC_ERR
 23522                                  
 23523                                  WRTLAST:
 23524 00003B02 A1[D405]                	MOV     AX,[BYTCNT2]
 23525 00003B05 09C0                    	OR      AX,AX
 23526 00003B07 7413                    	JZ	short FINWRT
 23527 00003B09 A3[D205]                	MOV     [BYTCNT1],AX
 23528 00003B0C E84D11                  	call	NEXTSEC
 23529 00003B0F 72EE                    	JC	short SET_ACC_ERRW
 23530 00003B11 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23531 00003B17 E8E710                  	call	BUFWRT
 23532 00003B1A 72E3                    	JC	short SET_ACC_ERRW
 23533                                  FINWRT:
 23534 00003B1C C43E[9E05]              	LES     DI,[THISSFT]
 23535 00003B20 A1[DE05]                	MOV     AX,[GROWCNT]
 23536 00003B23 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23537 00003B27 09C0                    	OR      AX,AX
 23538 00003B29 7502                    	JNZ	short UPDATE_size
 23539 00003B2B E30F                    	JCXZ    SAMSIZ
 23540                                  UPDATE_size:
 23541                                  	;add	[es:di+11h],ax
 23542 00003B2D 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23543                                  	;adc	[es:di+13h],cx
 23544 00003B31 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23545                                  
 23546                                  ; Make sure that all other SFT's see this growth also.
 23547                                  
 23548 00003B35 B80100                  	MOV     AX,1
 23549                                  ;if installed
 23550                                  	;Call	JShare + 14 * 4
 23551 00003B38 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23552                                  ;else
 23553                                  ;	Call    ShSU
 23554                                  ;endif
 23555                                  
 23556                                  SAMSIZ:
 23557 00003B3C E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23558                                  
 23559                                  	; 16/12/2022
 23560                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23561                                  ;SET_ACC_ERRW:
 23562                                  	;jmp	SET_ACC_ERR_DS
 23563                                  
 23564                                  WRTEOF:
 23565 00003B3F 89C1                    	MOV     CX,AX
 23566 00003B41 09D1                    	OR      CX,DX
 23567 00003B43 746A                    	JZ	short KILLFIL
 23568 00003B45 83E801                  	SUB     AX,1
 23569 00003B48 83DA00                  	SBB     DX,0
 23570                                  
 23571                                  	; MSDOS 3.3
 23572                                  	;;div	word [es:bp+2]
 23573                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23574                                  	;;mov	cl,[es:bp+5]
 23575                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23576                                  	;shr	ax,cl
 23577                                  
 23578                                  	; MSDOS 6.0
 23579 00003B4B 53                      	PUSH	BX
 23580                                  	;mov	bx,[es:bp+2]
 23581 00003B4C 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23582 00003B50 E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23583 00003B53 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23584 00003B54 89CA                    	MOV	DX,CX			      ;M039
 23585 00003B56 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23586 00003B5A E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23587                                  
 23588 00003B5D 89C1                    	MOV     CX,AX
 23589 00003B5F E8F00F                  	call	FNDCLUS
 23590                                  SET_ACC_ERRWJ2:
 23591 00003B62 729B                    	JC	short SET_ACC_ERRW
 23592                                  
 23593 00003B64 E324                    	JCXZ    RELFILE
 23594 00003B66 E8A611                  	call	ALLOCATE
 23595                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23596                                  	; 16/12/2022
 23597 00003B69 7303                    	jnc	short UPDATE
 23598 00003B6B E9C4FE                  	JMP	WRTERR
 23599                                  UPDATE:
 23600 00003B6E C43E[9E05]              	LES	DI,[THISSFT]
 23601 00003B72 A1[CE05]                	MOV	AX,[BYTPOS]
 23602                                  	;mov	[es:di+11h],ax
 23603 00003B75 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23604 00003B79 A1[D005]                	MOV	AX,[BYTPOS+2]
 23605                                  	;mov	[es:di+13h],ax
 23606 00003B7C 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23607                                  ;
 23608                                  ; Make sure that all other SFT's see this growth also.
 23609                                  ;
 23610 00003B80 B80200                  	MOV     AX,2
 23611                                  ;if installed
 23612                                  	;Call	JShare + 14 * 4
 23613 00003B83 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23614                                  ;else
 23615                                  ;	Call    ShSU
 23616                                  ;endif
 23617 00003B87 31C9                    	XOR     CX,CX ; 0
 23618                                  	;jmp	ADDREC
 23619                                  	; 08/02/2024
 23620 00003B89 C3                      	retn
 23621                                  
 23622                                  	; 16/12/2022
 23623                                  ;WRTERRJ: 
 23624                                  	;JMP	WRTERR
 23625                                  
 23626                                  ;;;;;;;;;;;;;;;; 7/18/86
 23627                                  ;;;;;;;;;;;;;;;;
 23628                                  
 23629                                  RELFILE:
 23630                                  	; MSDOS 6.0
 23631 00003B8A 06                      	PUSH	ES			;AN002; BL Reset Lstclus and cluspos to
 23632 00003B8B C43E[9E05]              	LES	DI,[THISSFT]		;AN002; BL beginning of file if current
 23633                                  	;cmp	dx,[es:di+19h]
 23634 00003B8F 263B5519                	CMP	DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23635 00003B93 730E                    	JAE	short SKIPRESET			;AN002; BL
 23636                                  	;mov	[es:di+19h],0
 23637 00003B95 26C745190000            	MOV	word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23638                                  	;mov	dx,[es:di+0Bh]
 23639 00003B9B 268B550B                	MOV	DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23640                                  	;mov	[es:di+35h],dx
 23641 00003B9F 26895535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23642                                  SKIPRESET:					;AN002; BL
 23643 00003BA3 07                      	POP	ES                    		;AN002; BL
 23644                                  ;
 23645 00003BA4 BAFFFF                  	MOV	DX,0FFFFH
 23646 00003BA7 E81312                  	call	RELBLKS
 23647                                  	; 16/12/2022
 23648                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23649 00003BAA 73C2                    	jnc	short UPDATE
 23650                                  SET_ACC_ERRWJ:
 23651                                  	;JC	short SET_ACC_ERRWJ2
 23652                                  	;JMP	SHORT UPDATE
 23653                                  	; 16/12/2022
 23654                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23655                                  	; 10/02/2024
 23656                                  	; ds=ss
 23657 00003BAC E974FC                  	jmp	SET_ACC_ERR
 23658                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23659                                  	;JC	short SET_ACC_ERRWJ2
 23660                                  	;JMP	SHORT UPDATE
 23661                                  
 23662                                  KILLFIL:
 23663 00003BAF 31DB                    	XOR	BX,BX
 23664 00003BB1 06                      	PUSH	ES
 23665 00003BB2 C43E[9E05]              	LES	DI,[THISSFT]
 23666                                  	;mov	[es:di+19h],bx
 23667 00003BB6 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23668                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23669 00003BBA 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23670                                  	;xchg	bx,[es:di+0Bh]
 23671 00003BBE 26875D0B                	XCHG	BX,[ES:DI+SF_ENTRY.sf_firclus]
 23672 00003BC2 07                      	POP	ES
 23673                                  
 23674 00003BC3 09DB                    	OR	BX,BX
 23675                                  	;JZ	short UPDATEJ
 23676                                  	; 16/12/2022
 23677 00003BC5 74A7                    	jz	short UPDATE
 23678                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23679                                  	;jz	short UPDATEJ
 23680                                  
 23681                                  ;; 10/23/86 FastOpen update
 23682 00003BC7 06                      	PUSH	ES			; since first cluster # is 0
 23683 00003BC8 55                      	PUSH	BP			; we must delete the old cache entry
 23684 00003BC9 50                      	PUSH	AX
 23685 00003BCA 51                      	PUSH	CX
 23686 00003BCB 52                      	PUSH	DX
 23687 00003BCC C42E[8A05]              	LES	BP,[THISDPB]		; get current DPB
 23688                                  	; 15/12/2022
 23689 00003BD0 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23690                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23691                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23692 00003BD4 89D9                    	MOV	CX,BX			; first cluster #
 23693 00003BD6 B402                    	MOV	AH,2			; delete cache entry by drive:firclus
 23694 00003BD8 E8AAEA                  	call	FastOpen_Update		; call fastopen
 23695 00003BDB 5A                      	POP	DX
 23696 00003BDC 59                      	POP	CX
 23697 00003BDD 58                      	POP	AX
 23698 00003BDE 5D                      	POP	BP
 23699 00003BDF 07                      	POP	ES
 23700                                  ;; 10/23/86 FastOpen update
 23701                                  
 23702 00003BE0 E8D811                  	call	RELEASE
 23703 00003BE3 72C7                    	JC	short SET_ACC_ERRWJ
 23704                                  UPDATEJ:
 23705                                  	; 20/11/2022
 23706 00003BE5 EB87                    	JMP	short UPDATE ; 10/08/2018
 23707                                  
 23708                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23709                                  ;----------------------------------------------------------------------------
 23710                                  ;
 23711                                  ; Procedure Name : DskWrtBufPurge
 23712                                  ;
 23713                                  ; Inputs:
 23714                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23715                                  ;	     sectors, also termed an "Extent".)
 23716                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23717                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23718                                  ;
 23719                                  ; Function:
 23720                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23721                                  ;	are in Extent; they are being over-written.
 23722                                  ;
 23723                                  ; Outputs:
 23724                                  ;       (Same as Input.)
 23725                                  ; Uses:
 23726                                  ;       All registers except DS,AX,SI,DI preserved.
 23727                                  ;       SS override for all global variables.
 23728                                  ;----------------------------------------------------------------------------
 23729                                  ;M039: Created
 23730                                  
 23731                                  ;procedure   DskWrtBufPurge,NEAR
 23732                                  ;
 23733                                  ;ASSUME  DS:NOTHING
 23734                                  
 23735                                  ; 04/05/2019 - Retro DOS v4.0
 23736                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23737                                  
 23738                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23739                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23740                                  
 23741                                  DskWrtBufPurge:
 23742                                  	;SaveReg <bx,cx>
 23743 00003BE7 53                      	push	bx
 23744 00003BE8 51                      	push	cx
 23745                                  
 23746 00003BE9 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23747 00003BEE 89DE                    	mov	si,bx
 23748 00003BF0 01D1                    	add	cx,dx
 23749 00003BF2 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23750                                  
 23751                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23752                                  	;;mov	al,[es:bp+0]
 23753                                  	;mov	al,[es:bp+DPB.DRIVE]
 23754                                  	; 15/12/2022
 23755 00003BF5 268A4600                	mov	al,[es:bp]
 23756                                  
 23757                                  ;	BX:DX = Extent start.
 23758                                  ;	SI:CX = Extent end + 1.
 23759                                  ;	AL = Drive #
 23760                                  
 23761 00003BF9 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23762 00003BFF 7431                    	je	short nosc		; -no, jump.
 23763                                  
 23764                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23765                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23766                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23767                                  
 23768 00003C01 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23769 00003C06 752A                    	jne	short nosc		; -no, jump.
 23770                                  
 23771 00003C08 50                      	push    ax
 23772 00003C09 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23773 00003C0D 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23774                                  
 23775                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23776                                  	;jbe	short sc5		; -yes, jump.
 23777                                  
 23778 00003C12 39FE                    	cmp	si,di
 23779 00003C14 7502                    	jne	short sc01
 23780 00003C16 39C1                    	cmp	cx,ax
 23781                                  sc01: 
 23782 00003C18 7617                    	jbe	short sc5
 23783                                  
 23784 00003C1A 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23785 00003C1F 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23786                                  	
 23787                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23788                                  	;jae	short sc5		; -yes, jump.
 23789                                  
 23790 00003C22 39FB                    	cmp	bx,di
 23791 00003C24 7502                    	jne	short sc02
 23792 00003C26 39C2                    	cmp	dx,ax
 23793                                  sc02:
 23794 00003C28 7307                    	jnb	short sc5
 23795                                  
 23796 00003C2A 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23797                                  sc5:	
 23798 00003C31 58                      	pop     ax
 23799                                  
 23800                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23801                                  ;	written.
 23802                                  
 23803                                  nosc:	
 23804 00003C32 E8911B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23805                                  
 23806                                  _bufq:	
 23807                                  	;cmpo	al,[di+4]
 23808 00003C35 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23809 00003C38 7527                    	jne	short bufq5		; -no, jump.
 23810                                  
 23811                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23812                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23813                                  
 23814                                  	;cmp	bx,[di+8]
 23815 00003C3A 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23816 00003C3D 7503                    	jne	short bufq04
 23817                                  	;cmp	dx,[di+6]
 23818 00003C3F 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23819                                  bufq04:
 23820 00003C42 771D                    	ja	short bufq5
 23821                                  
 23822                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23823                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23824                                  
 23825                                  	;cmp	si,[di+8]
 23826 00003C44 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23827 00003C47 7503                    	jne	short bufq05
 23828                                  	;cmp	cx,[di+6]
 23829 00003C49 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23830                                  bufq05:
 23831 00003C4C 7613                    	jbe	short bufq5
 23832                                  
 23833                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23834                                  
 23835                                  	;test	byte [di+5],40h
 23836 00003C4E F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23837 00003C52 7403                    	jz	short bufq4		; -no, jump.
 23838 00003C54 E8F01D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23839                                  bufq4:
 23840                                  	;mov	word [di+4],20FFh
 23841 00003C57 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23842                                  
 23843 00003C5C E8791B                  	call	SCANPLACE
 23844 00003C5F EB02                    	jmp     short bufq6
 23845                                  bufq5: 
 23846 00003C61 8B3D                    	mov     di,[di]
 23847                                  	;mov	di,[di+BUFFINFO.buf_next]
 23848                                  bufq6: 
 23849 00003C63 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23850 00003C68 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23851                                  	
 23852                                  	;RestoreReg <cx,bx>
 23853 00003C6A 59                      	pop	cx
 23854 00003C6B 5B                      	pop	bx
 23855 00003C6C C3                      	retn
 23856                                  
 23857                                  ;EndProc DskWrtBufPurge
 23858                                  
 23859                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23860                                  ;----------------------------------------------------------------------------
 23861                                  ;
 23862                                  ; Procedure Name : DIV32
 23863                                  ;
 23864                                  ; Inputs:
 23865                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23866                                  ; Function:
 23867                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23868                                  ; Outputs:
 23869                                  ;       CX:AX = quotient , DX= remainder
 23870                                  ; Uses:
 23871                                  ;       All registers except AX,CX,DX preserved.
 23872                                  ;----------------------------------------------------------------------------
 23873                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23874                                  
 23875                                  ; 04/05/2019 - Retro DOS v4.0
 23876                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23877                                  
 23878                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23879                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23880                                  
 23881                                  DIV32:
 23882 00003C6D 81FB0002                	cmp	bx,512
 23883 00003C71 7515                    	jne	short div5
 23884                                  
 23885 00003C73 89D1                    	mov	cx,dx
 23886 00003C75 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23887 00003C77 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23888 00003C7B 88E0                    	mov	al,ah
 23889 00003C7D 88CC                    	mov	ah,cl
 23890 00003C7F 88E9                    	mov	cl,ch
 23891 00003C81 30ED                    	xor	ch,ch
 23892 00003C83 D1E9                    	shr	cx,1
 23893 00003C85 D1D8                    	rcr	ax,1
 23894 00003C87 C3                      	retn
 23895                                  div5:	
 23896 00003C88 89C1                    	mov	cx,ax
 23897 00003C8A 89D0                    	mov	ax,dx
 23898 00003C8C 31D2                    	xor	dx,dx
 23899 00003C8E F7F3                    	div	bx              ; 0:AX/BX
 23900 00003C90 91                      	xchg	cx,ax
 23901 00003C91 F7F3                    	div	bx              ; DX:AX/BX
 23902 00003C93 C3                      	retn
 23903                                  
 23904                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23905                                  ;----------------------------------------------------------------------------
 23906                                  ;
 23907                                  ; Procedure Name : SHR32
 23908                                  ;
 23909                                  ; Inputs:
 23910                                  ;	DX:AX = 32 bit sector number
 23911                                  ; Function:
 23912                                  ;       Perform 32 bit shift right
 23913                                  ; Outputs:
 23914                                  ;	AX = cluster number
 23915                                  ;	ZF = 1 if no error
 23916                                  ;	   = 0 if error (cluster number > 64k)
 23917                                  ; Uses:
 23918                                  ;       DX,CX
 23919                                  ;---------------------------------------------------------------------------
 23920                                  ; M017	- SHR32 rewritten for better performance
 23921                                  ; M039	- Additional optimization
 23922                                  
 23923                                  ; 04/05/2019 - Retro DOS v4.0
 23924                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23925                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23926                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS)
 23927                                  SHR32:
 23928                                  	;mov	cl,[es:bp+5]
 23929 00003C94 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23930 00003C98 30ED                    	xor	ch,ch	    ;ZF=1
 23931 00003C9A E306                    	jcxz	norota
 23932                                  
 23933                                  rotashft2:
 23934 00003C9C D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23935 00003C9E D1D8                    	rcr	ax,1	    ;ZF not affected.
 23936 00003CA0 E2FA                    	loop	rotashft2
 23937                                  norota:
 23938 00003CA2 C3                      	retn
 23939                                  
 23940                                  ;============================================================================
 23941                                  ; DIR.ASM, MSDOS 6.0, 1991
 23942                                  ;============================================================================
 23943                                  ; 27/07/2018 - Retro DOS v3.0
 23944                                  ; 19/05/2019 - Retro DOS v4.0
 23945                                  
 23946                                  ;	TITLE	DIR - Directory and path cracking
 23947                                  ;	NAME	Dir
 23948                                  
 23949                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23950                                  ;---------------------------------------------------------------------------
 23951                                  ;
 23952                                  ; Procedure Name : FINDENTRY,SEARCH
 23953                                  ;
 23954                                  ; Inputs:
 23955                                  ;	[THISDPB] set
 23956                                  ;	[SECCLUSPOS] = 0
 23957                                  ;	[DIRSEC] = Starting directory sector number
 23958                                  ;	[CLUSNUM] = Next cluster of directory
 23959                                  ;	[CLUSFAC] = Sectors/Cluster
 23960                                  ;	[NAME1] = Name to look for
 23961                                  ; Function:
 23962                                  ;	Find file name in disk directory.
 23963                                  ;	"?" matches any character.
 23964                                  ; Outputs:
 23965                                  ;	Carry set if name not found
 23966                                  ;	ELSE
 23967                                  ;	Zero set if attributes match (always except when creating)
 23968                                  ;	AH = Device ID (bit 7 set if not disk)
 23969                                  ;	[THISDPB] = Base of drive parameters
 23970                                  ;	DS = DOSGROUP
 23971                                  ;	ES = DOSGROUP
 23972                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23973                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23974                                  ;	[CURBUF] has directory record with match
 23975                                  ;	[NAME1] has file name
 23976                                  ;	[LASTENT] is entry number of the entry
 23977                                  ; All other registers destroyed.
 23978                                  ;----------------------------------------------------------------------------
 23979                                  
 23980                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23981                                  ;hkn; this point.
 23982                                  
 23983                                  SEARCH:
 23984                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23985                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23986                                  
 23987                                  	; 19/05/2019 - Retro DOS v4.0
 23988                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23989                                  
 23990                                  	; 27/07/2018 - Retro DOS v3.0
 23991                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23992                                  	; 15/03/2018 - Retro DOS v2.0
 23993                                  
 23994                                  	; 24/01/2024
 23995                                  
 23996                                  	;entry	FindEntry
 23997                                  FINDENTRY:
 23998 00003CA3 E81704                  	call	STARTSRCH
 23999 00003CA6 A0[6B05]                	MOV	AL,[ATTRIB]
 24000                                  	;and	al,9Eh
 24001 00003CA9 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24002                                  	;cmp	al,8
 24003 00003CAB 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24004 00003CAD 7503                    	JNZ	short NOTVOLSRCH	; No
 24005 00003CAF E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24006                                  NOTVOLSRCH:
 24007 00003CB2 E8F800                  	CALL	GETENTRY
 24008                                  	;JNC	short SRCH
 24009                                  	;JMP	SETESRET
 24010                                  	; 24/01/2024
 24011 00003CB5 723F                    	jc	short SETESRET
 24012                                  
 24013                                  	;entry	Srch
 24014                                  SRCH:
 24015 00003CB7 1E                      	PUSH	DS
 24016 00003CB8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24017                                  
 24018                                  ;	(DS:BX) = directory entry address
 24019                                  
 24020 00003CBC 8A27                    	mov	ah,[BX]
 24021                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24022 00003CBE 08E4                    	OR	AH,AH			; End of directory?
 24023 00003CC0 7437                    	JZ	short FREE
 24024                                  
 24025                                  ;hkn; SS override
 24026 00003CC2 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24027 00003CC7 7430                    	JZ	short FREE
 24028                                  	;test	byte [bx+0Bh],8
 24029 00003CC9 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24030                                  					; Volume ID file?
 24031 00003CCD 7405                    	JZ	short CHKFNAM 		; NO
 24032                                  
 24033                                  ;hkn; SS override
 24034 00003CCF 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24035                                  CHKFNAM:
 24036                                  ;	Context ES
 24037 00003CD4 8CD6                    	MOV	SI,SS
 24038 00003CD6 8EC6                    	MOV	ES,SI
 24039 00003CD8 89DE                    	MOV	SI,BX
 24040                                  
 24041                                  ;hkn; NAME1 is in DOSDATA
 24042 00003CDA BF[4B05]                	MOV	DI,NAME1
 24043                                  ;;;;; 7/29/86
 24044                                  
 24045                                  ;hkn; SS override for NAME1
 24046                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24047                                  	;JNZ	short NO_E5
 24048                                  	;MOV	BYTE [SS:NAME1],05H
 24049                                  	; 22/09/2023
 24050 00003CDD 26803DE5                	cmp	byte [es:di],0E5h
 24051 00003CE1 7504                    	jnz	short NO_E5
 24052 00003CE3 26C60505                	mov	byte [es:di],05h
 24053                                  NO_E5:
 24054                                  ;;;;; 7/29/86
 24055 00003CE7 E86100                  	CALL	MetaCompare
 24056 00003CEA 7429                    	JZ	short FOUND
 24057 00003CEC 1F                      	POP	DS
 24058                                  
 24059                                  	;entry	NEXTENT
 24060                                  NEXTENT:
 24061 00003CED C42E[8A05]              	LES	BP,[THISDPB]
 24062 00003CF1 E86600                  	CALL	NEXTENTRY
 24063 00003CF4 73C1                    	JNC	short SRCH
 24064                                  	;JMP	SHORT SETESRET
 24065                                  	; 24/01/2024
 24066                                  SETESRET:
 24067 00003CF6 16                      	PUSH	SS
 24068 00003CF7 07                      	POP	ES
 24069 00003CF8 C3                      	retn
 24070                                  FREE:
 24071 00003CF9 1F                      	POP	DS
 24072 00003CFA 8B0E[4803]              	MOV	CX,[LASTENT]
 24073 00003CFE 3B0E[D805]              	CMP	CX,[ENTFREE]
 24074 00003D02 7304                    	JAE	short TSTALL
 24075 00003D04 890E[D805]              	MOV	[ENTFREE],CX
 24076                                  TSTALL:
 24077 00003D08 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24078                                  NEXTENTJ:
 24079 00003D0C 74DF                    	je	short NEXTENT 		; No - continue search
 24080 00003D0E 890E[DA05]              	MOV	[ENTLAST],CX
 24081 00003D12 F9                      	STC
 24082 00003D13 EBE1                    	JMP	SHORT SETESRET
 24083                                  
 24084                                  FOUND:
 24085                                  ; We have a file with a matching name. We must now consider the attributes:
 24086                                  ; ATTRIB	Action
 24087                                  ; ------	------
 24088                                  ; Volume_ID	Is Volume_ID in test?
 24089                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24090                                  ;		If create then Is ATTRIB equal to test?
 24091                                  
 24092 00003D15 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24093 00003D17 1F                      	POP	DS
 24094 00003D18 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24095                                  	;and	ah,9Eh
 24096 00003D1C 80E4DE                  	AND	AH,~attr_ignore
 24097                                  	;lea	si,[si+15]
 24098 00003D1F 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24099                                  					; point to first cluster field
 24100                                  	;test	ch,8
 24101 00003D22 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24102 00003D25 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24103                                  	;test	ah,8
 24104 00003D27 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24105                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24106                                  	; 16/12/2022
 24107 00003D2A 74C1                    	jz	short NEXTENT ; 19/05/2019
 24108                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24109                                  	;JZ	short NEXTENTJ
 24110 00003D2C 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24111 00003D2E EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24112                                  check_one_volume_id:
 24113                                  	;CMP	ah,8
 24114 00003D30 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24115                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24116                                  	; 16/12/2022
 24117 00003D33 74B8                    	je	short NEXTENT ; 19/05/2019
 24118                                  	;JZ	short NEXTENTJ
 24119 00003D35 E89903                  	CALL	MatchAttributes
 24120 00003D38 7407                    	JZ	SHORT RETFF
 24121 00003D3A F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24122                                  	; 16/12/2022
 24123                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24124 00003D3F 74AC                    	jz	short NEXTENT ; 19/05/2019
 24125                                  RETFF:
 24126 00003D41 C42E[8A05]              	LES	BP,[THISDPB]
 24127                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24128                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24129                                  	; 15/12/2022
 24130 00003D45 268A6600                	MOV	AH,[ES:BP]
 24131                                  ;SETESRET:
 24132                                  	;PUSH	SS
 24133                                  	;POP	ES
 24134                                  	;retn
 24135                                  	; 24/01/2024
 24136 00003D49 EBAB                    	jmp	short SETESRET	
 24137                                  
 24138                                  ;----------------------------------------------------------------------------
 24139                                  ;
 24140                                  ; Procedure Name : MetaCompare
 24141                                  ;
 24142                                  ; Inputs:
 24143                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24144                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24145                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24146                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24147                                  ; Function:
 24148                                  ;	Compare FCB style names allowing for ? match to any char
 24149                                  ; Outputs:
 24150                                  ;	Zero if match else NZ
 24151                                  ; Destroys CX,SI,DI all others preserved
 24152                                  ;----------------------------------------------------------------------------
 24153                                  
 24154                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24155                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24156                                  
 24157                                  MetaCompare:
 24158 00003D4B B90B00                  	MOV	CX,11
 24159                                  WILDCRD:
 24160 00003D4E F3A6                    	REPE	CMPSB
 24161 00003D50 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24162                                  CHECK_META:
 24163 00003D52 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24164 00003D57 74F5                    	JZ	short WILDCRD
 24165                                  MetaRet:
 24166 00003D59 C3                       	retn				; Zero set, Match
 24167                                  
 24168                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24169                                  ;----------------------------------------------------------------------------
 24170                                  ;
 24171                                  ; Procedure Name : NEXTENTRY
 24172                                  ;
 24173                                  ; Inputs:
 24174                                  ;	Same as outputs of GETENTRY, above
 24175                                  ; Function:
 24176                                  ;	Update BX, and [LASTENT] for next directory entry.
 24177                                  ;	Carry set if no more.
 24178                                  ;----------------------------------------------------------------------------
 24179                                  
 24180                                  NEXTENTRY:
 24181                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24182                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24183                                  
 24184                                  	; 19/05/2019 - Retro DOS v4.0
 24185                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24186                                  
 24187                                  	; 27/07/2018 - Retro DOS v3.0
 24188                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24189                                  	; 15/03/2018 - Retro DOS v2.0
 24190                                  
 24191 00003D5A A1[4803]                	MOV	AX,[LASTENT]
 24192 00003D5D 3B06[DA05]              	CMP	AX,[ENTLAST]
 24193 00003D61 7422                    	JZ	short NONE
 24194 00003D63 40                      	INC	AX
 24195                                  	;ADD	BX,32
 24196 00003D64 8D5F20                  	LEA	BX,[BX+32]
 24197 00003D67 39D3                    	CMP	BX,DX
 24198                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24199                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24200                                  	; 16/12/2022
 24201 00003D69 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24202 00003D6B 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24203 00003D6F FEC3                    	INC	BL
 24204 00003D71 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24205 00003D75 7215                    	JB	short SAMECLUS
 24206 00003D77 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24207 00003D7B E89816                  	call	IsEOF
 24208 00003D7E 7305                    	JAE	short NONE
 24209                                  	; 23/07/2019
 24210 00003D80 83FB02                  	CMP	BX,2
 24211                                  	;JB	short NONE
 24212                                  	;JMP	short GETENT
 24213                                  	; 16/12/2022
 24214 00003D83 732B                    	jnb	short GETENT
 24215                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24216                                  	;JB	short NONE
 24217                                  	;JMP	short GETENT
 24218                                  NONE:
 24219 00003D85 F9                      	STC
 24220 00003D86 C3                      	retn
 24221                                  HAVIT:
 24222 00003D87 A3[4803]                	MOV	[LASTENT],AX
 24223 00003D8A F8                      	CLC
 24224                                  nextentry_retn:
 24225 00003D8B C3                      	retn
 24226                                  
 24227                                  SAMECLUS:
 24228 00003D8C 881E[7305]              	MOV	[SECCLUSPOS],BL
 24229 00003D90 A3[4803]                	MOV	[LASTENT],AX
 24230 00003D93 1E                      	PUSH	DS
 24231 00003D94 C53E[E205]              	LDS	DI,[CURBUF]
 24232                                  	; 19/05/2019
 24233                                  	; MSDOS 6.0
 24234                                  	;;mov	dx,[di+8]
 24235                                  	; 23/09/2023
 24236                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24237                                  ;hkn; SS override
 24238                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24239                                  
 24240                                  ; 14/02/2024
 24241                                  %if 0
 24242                                  	; 23/09/2023
 24243                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24244                                  	
 24245                                  	;mov	dx,[di+6]
 24246                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24247                                  
 24248                                  	;inc	dx ; MSDOS 3.3
 24249                                  	; MSDOS 6.0
 24250                                  	;ADD	DX,1				;AN000; >32mb
 24251                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24252                                  	; 23/09/2023
 24253                                  	inc	dx
 24254                                  	jnz	short nextexntry_fc
 24255                                  	inc	si
 24256                                  	;inc	word [SS:HIGH_SECTOR]
 24257                                  nextexntry_fc:
 24258                                  	; 23/09/2023
 24259                                  	mov	[SS:HIGH_SECTOR],si
 24260                                  	; MSDOS 3.3 & MSDOS 6.0
 24261                                  	POP	DS
 24262                                  %else
 24263                                  	; 14/02/2024 - Retro DOS v5.0
 24264 00003D98 C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24265 00003D9B 8CDE                    	mov	si,ds
 24266 00003D9D 1F                      	pop	ds
 24267 00003D9E 42                      	inc	dx
 24268 00003D9F 7501                    	jnz	short nextexntry_fc
 24269 00003DA1 46                      	inc	si
 24270                                  nextexntry_fc:
 24271 00003DA2 8936[0706]              	mov	[HIGH_SECTOR],si
 24272                                  %endif
 24273                                  
 24274 00003DA6 E868F8                  	call	FIRSTCLUSTER
 24275 00003DA9 31DB                    	XOR	BX,BX
 24276 00003DAB EB21                    	JMP	short SETENTRY
 24277                                  
 24278                                  ;----------------------------------------------------------------------------
 24279                                  ;
 24280                                  ; Procedure Name : GETENTRY
 24281                                  ;
 24282                                  ; Inputs:
 24283                                  ;	[LASTENT] has directory entry
 24284                                  ;	ES:BP points to drive parameters
 24285                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24286                                  ; Function:
 24287                                  ;	Locates directory entry in preparation for search
 24288                                  ;	GETENT provides entry for passing desired entry in AX
 24289                                  ; Outputs:
 24290                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24291                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24292                                  ;	[LASTENT] = New directory entry number
 24293                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24294                                  ;	Carry set if error (currently user FAILed to I 24)
 24295                                  ;----------------------------------------------------------------------------
 24296                                  
 24297                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24298                                  GETENTRY:
 24299                                  	; 27/07/2018 - Retro DOS v3.0
 24300 00003DAD A1[4803]                	MOV	AX,[LASTENT]
 24301                                  
 24302                                  	;entry	GETENT
 24303                                  GETENT:
 24304 00003DB0 A3[4803]                	MOV	[LASTENT],AX
 24305                                  ;
 24306                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24307                                  ; directory.
 24308                                  ;
 24309 00003DB3 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24310 00003DB5 D3C0                    	rol	ax,cl			; keep hight order bits
 24311 00003DB7 89C2                    	mov	dx,ax
 24312                                  	; 19/05/2019 - Retro DOS v4.0
 24313                                  	;and	ax,0FFE0h
 24314                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24315                                  	;and	ax,~(32-1)		; mask off high order bits
 24316                                  	; 16/12/2022
 24317 00003DB9 24E0                    	and	al,0E0h ; ~31
 24318 00003DBB 83E21F                  	and	dx,1Fh
 24319                                  	;and	dx,32-1			; mask off low order bits
 24320                                  ;
 24321                                  ; DX:AX contain the byte offset of the required directory entry from the
 24322                                  ; beginning of the directory. Convert this to a sector number. Round the
 24323                                  ; sector size down to a multiple of 32.
 24324                                  ;
 24325                                  	;mov	bx,[es:bp+2]
 24326 00003DBE 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24327 00003DC2 80E3E0                  	and	bl,0E0h
 24328                                  	;AND	BL,255-31		; Must be multiple of 32
 24329 00003DC5 F7F3                    	DIV	BX
 24330                                  	; 14/02/2024
 24331                                  	;MOV	BX,DX			; Position within sector
 24332                                  				; NOTE: This BX value is not used in DIRREAD
 24333                                  				; Erdogan Tan - 14/02/2024
 24334                                  	;PUSH	BX
 24335 00003DC7 52                      	push	dx
 24336                                  	;
 24337 00003DC8 E8F2F7                  	call	DIRREAD
 24338 00003DCB 5B                      	POP	BX
 24339                                  	;retc
 24340 00003DCC 72BD                    	jc	short nextentry_retn
 24341                                  SETENTRY:
 24342 00003DCE 8B16[E205]              	MOV	DX,[CURBUF]
 24343                                  	;add	dx,16 ; MSDOS 3.3
 24344                                  	;add	dx,20 ; MSDOS 6.0 
 24345 00003DD2 83C214                  	ADD	DX,BUFINSIZ
 24346 00003DD5 01D3                    	ADD	BX,DX
 24347                                  	;add	dx,[es:bp+2]
 24348 00003DD7 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24349                                  	; 29/12/2022
 24350                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24351 00003DDB F8                      	clc
 24352 00003DDC C3                      	retn
 24353                                  
 24354                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24355                                  ;----------------------------------------------------------------------------
 24356                                  ;
 24357                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24358                                  ;
 24359                                  ; Inputs:
 24360                                  ;	BX cluster number of start of directory
 24361                                  ;	ES:BP Points to DPB
 24362                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24363                                  ; Function:
 24364                                  ;	Set up a directory search
 24365                                  ; Outputs:
 24366                                  ;	[DIRSTART] = BX
 24367                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24368                                  ;	Carry set if error (currently user FAILed to I 24)
 24369                                  ; destroys AX,DX,BX
 24370                                  ;----------------------------------------------------------------------------
 24371                                  
 24372                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24373                                  SETDIRSRCH:
 24374 00003DDD 09DB                    	OR	BX,BX
 24375 00003DDF 7437                    	JZ	short SETROOTSRCH
 24376 00003DE1 891E[C205]              	MOV	[DIRSTART],BX
 24377                                  	;mov	al,[es:bp+4]
 24378 00003DE5 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24379 00003DE9 FEC0                    	INC	AL
 24380 00003DEB A2[7705]                	MOV	[CLUSFAC],AL
 24381                                  
 24382                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24383                                  	;SAVE	<SI>
 24384 00003DEE 56                      	push	si
 24385                                  	;test	byte [FastOpenFlg],2
 24386 00003DEF F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24387 00003DF4 7507                    	JNZ	short UNP_OK
 24388                                  
 24389                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24390                                  	;invoke	UNPACK
 24391 00003DF6 E83416                  	call	UNPACK
 24392 00003DF9 7302                    	JNC	short UNP_OK
 24393                                  	;RESTORE <SI>
 24394 00003DFB 5E                      	pop	si
 24395                                  	;return
 24396 00003DFC C3                      	retn
 24397                                  
 24398                                  UNP_OK:
 24399 00003DFD 893E[BC05]              	MOV	[CLUSNUM],DI
 24400 00003E01 89DA                    	MOV	DX,BX
 24401 00003E03 30DB                    	XOR	BL,BL
 24402 00003E05 881E[7305]              	MOV	[SECCLUSPOS],BL
 24403                                  	;invoke	FIGREC
 24404 00003E09 E8DF0E                  	call	FIGREC
 24405                                  	;RESTORE <SI>
 24406 00003E0C 5E                      	pop	si
 24407                                  	
 24408                                  	; 19/05/2019 - Retro DOS v4.0
 24409                                  
 24410                                  	; MSDOS 6.0
 24411                                  	;PUSH	DX			   ;AN000; >32mb
 24412                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24413                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24414                                  	;POP	DX			   ;AN000; >32mb
 24415                                  
 24416                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24417                                  	;push	dx
 24418                                  	;mov	dx,[HIGH_SECTOR]
 24419                                  	;mov	[DIRSEC+2],dx
 24420                                  	;pop	dx
 24421                                  	;MOV	[DIRSEC],dx
 24422                                  	; 16/12/2022
 24423 00003E0D A1[0706]                	mov	ax,[HIGH_SECTOR]
 24424 00003E10 A3[C005]                	mov	[DIRSEC+2],AX
 24425 00003E13 8916[BE05]              	MOV	[DIRSEC],DX
 24426                                  
 24427                                  	; 16/12/2022
 24428                                  	; cf=0 (at the return of FIGREC)
 24429                                  	;CLC
 24430 00003E17 C3                      	retn
 24431                                  
 24432                                  	;entry	SETROOTSRCH
 24433                                  SETROOTSRCH:
 24434 00003E18 31C0                    	XOR	AX,AX
 24435 00003E1A A3[C205]                	MOV	[DIRSTART],AX
 24436                                  	; 22/09/2023
 24437 00003E1D A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24438 00003E20 A2[7305]                	MOV	[SECCLUSPOS],AL
 24439 00003E23 48                      	DEC	AX
 24440 00003E24 A3[BC05]                	MOV	[CLUSNUM],AX
 24441                                  	;mov	ax,[es:bp+0Bh]
 24442 00003E27 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24443                                  	; 19/05/2019
 24444                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24445                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24446 00003E2B 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24447 00003E2F 29D0                    	SUB	AX,DX
 24448 00003E31 A2[7705]                	MOV	[CLUSFAC],AL
 24449 00003E34 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24450                                  	; 22/09/2023
 24451                                  	; MSDOS 6.0
 24452                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24453 00003E38 F8                      	CLC
 24454 00003E39 C3                      	retn
 24455                                  
 24456                                  ;============================================================================
 24457                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24458                                  ;============================================================================
 24459                                  ; 27/07/2018 - Retro DOS v3.0
 24460                                  ; 19/05/2019 - Retro DOS v4.0 
 24461                                  
 24462                                  ;	TITLE	DIR2 - Directory and path cracking
 24463                                  ;	NAME	Dir2
 24464                                  
 24465                                  ;Break	<GETPATH -- PARSE A WFP>
 24466                                  ;----------------------------------------------------------------------------
 24467                                  ;
 24468                                  ; Procedure Name : GETPATH
 24469                                  ;
 24470                                  ; Inputs:
 24471                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24472                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24473                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24474                                  ;		( = -1 if current dir not involved, else
 24475                                  ;		 Points to first char after last "/" of current dir part)
 24476                                  ;	[THISCDS] Points to CDS being used
 24477                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24478                                  ;	[NoSetDir] set
 24479                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24480                                  ; Function:
 24481                                  ;	Crack the path
 24482                                  ; Outputs:
 24483                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24484                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24485                                  ;	ID1 field of [THISCDS] updated appropriately
 24486                                  ;	[ATTRIB] = [SATTRIB]
 24487                                  ;	ES:BP Points to DPB
 24488                                  ;	Carry set if bad path
 24489                                  ;	   SI Points to path element causing failure
 24490                                  ;	   Zero set
 24491                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24492                                  ;	      start a search on the last directory
 24493                                  ;	      CL is zero if there is a bad name in the path
 24494                                  ;	      CL is non-zero if the name was simply not found
 24495                                  ;		 [ENTFREE] may have free spot in directory
 24496                                  ;		 [NAME1] is the name.
 24497                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24498                                  ;	   Zero reset
 24499                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24500                                  ;		or path too long or malformed path
 24501                                  ;	ELSE
 24502                                  ;	   [CurBuf] = -1 if root directory
 24503                                  ;	   [CURBUF] contains directory record with match
 24504                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24505                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24506                                  ;	   AH = device ID
 24507                                  ;	      bit 7 of AH set if device SI and BX
 24508                                  ;	      will point DOSGROUP relative The firclus
 24509                                  ;	      field of the device entry contains the device pointer
 24510                                  ;	   [NAME1] Has name looked for
 24511                                  ;	   If last element is a directory zero is set and:
 24512                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24513                                  ;	      are set up to start a search on it.
 24514                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24515                                  ;	      like that for a file (except for zero flag)
 24516                                  ;	   If last element is a file zero is reset
 24517                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24518                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24519                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24520                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24521                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24522                                  ; DS preserved, Others destroyed
 24523                                  ;---------------------------------------------------------------------------
 24524                                  
 24525                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24526                                  ;hkn; DS already set up at this point.
 24527                                  
 24528                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24529                                  GETPATH:
 24530                                  	;mov	word [CREATING],0E500h
 24531 00003E3A C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24532                                  
 24533                                  ; Same as GetPath only CREATING and DELALL already set
 24534                                  
 24535                                  	;entry	GetPathNoSet
 24536                                  GetPathNoSet:
 24537                                  	;mov	byte [EXTERR_LOCUS],2	
 24538 00003E40 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24539 00003E45 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24540                                  
 24541                                  ; See if the input indicates a device that has already been detected. If so,
 24542                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24543                                  
 24544 00003E4B 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24545                                  	;cmp	word [DI+1],5C3Ah
 24546                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24547 00003E4F 817D013A5C              	cmp	word [DI+1],':\'
 24548 00003E54 7437                    	JZ	short CrackIt
 24549                                  
 24550                                  ; Let ChkDev find it in the device list
 24551                                  
 24552 00003E56 83C703                  	ADD	DI,3
 24553                                  	; 18/08/2018
 24554                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24555                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24556                                  	; 16/12/2022
 24557                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24558 00003E59 E89E00                  	CALL	CHKDEV
 24559 00003E5C 722D                    	JC	short InternalError
 24560                                  
 24561                                  Build_devJ:
 24562 00003E5E A0[6D05]                	MOV	AL,[SATTRIB]
 24563 00003E61 A2[6B05]                	MOV	[ATTRIB],AL
 24564                                  	;mov	byte [EXTERR_LOCUS],1
 24565 00003E64 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24566                                  					; "finding" a char device
 24567                                  					; set LOCUS to Unknown. This makes
 24568                                  					; certain idiotic problems reported
 24569                                  					; by a certain 3 letter OEM go away.
 24570                                  
 24571                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24572                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24573                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24574                                  ; wfp into the share set.
 24575                                  ;
 24576                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24577                                  ; non-space seen +1.  This position is kept in DX.
 24578                                  
 24579                                  ;hkn; SS is DOSDATA
 24580 00003E69 16                      	push	ss
 24581 00003E6A 07                      	pop	es
 24582                                  
 24583                                  ;hkn; NAME1 is in DOSDATA
 24584 00003E6B BE[4B05]                	mov	si,NAME1
 24585 00003E6E 8B3E[B205]              	mov	di,[WFP_START]
 24586 00003E72 89FA                    	mov	dx,di
 24587 00003E74 B90800                  	mov	cx,8			; 8 chars in device name
 24588                                  MoveLoop:
 24589 00003E77 AC                      	lodsb
 24590 00003E78 AA                      	stosb
 24591 00003E79 3C20                    	cmp	al," "
 24592 00003E7B 7402                    	jz	short NoSave
 24593                                  
 24594 00003E7D 89FA                    	mov	dx,di
 24595                                  NoSave:
 24596 00003E7F E2F6                    	loop	MoveLoop
 24597                                  
 24598                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24599                                  ; at this point.
 24600                                  
 24601 00003E81 89D7                    	mov	di,dx
 24602                                  	;mov	byte [di],0		; end of string
 24603                                  	; 15/02/2024
 24604 00003E83 880D                    	mov	[di],cl ; 0
 24605 00003E85 E8B502                  	call	Build_device_ent	; Clears carry sets zero
 24606 00003E88 FEC0                    	INC	AL			; reset zero
 24607 00003E8A C3                      	retn
 24608                                  
 24609                                  InternalError:
 24610                                  InternalError_loop:
 24611 00003E8B EBFE                    	JMP	short InternalError_loop ; freeze
 24612                                  
 24613                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24614                                  
 24615                                  CrackIt:
 24616                                  ; 15/02/2024
 24617                                  %if 0
 24618                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24619                                  	CMP	SI,-1			; valid?
 24620                                  	JNZ	short LOOK_SING		; Yes, use it.
 24621                                  	LEA	SI,[DI+3]		; skip D:\.
 24622                                  LOOK_SING:
 24623                                  %endif
 24624                                  	;mov	byte [ATTRIB],16h
 24625 00003E8D C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24626                                  					; Attributes to search through Dirs
 24627 00003E92 C43E[A205]              	LES	DI,[THISCDS]
 24628 00003E96 B8FFFF                  	MOV	AX,-1
 24629                                  	;mov	bx,[es:di+73]
 24630 00003E99 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24631 00003E9D 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24632                                  
 24633                                  ; AX = -1
 24634                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24635                                  ;      has been uncertainly changed.
 24636                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24637                                  ;      may be -1 if no current directory part has been used.
 24638                                  
 24639 00003EA1 39C6                    	CMP	SI,AX			; if Current directory is not part
 24640 00003EA3 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24641 00003EA5 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24642                                  
 24643                                  ; DOS 3.3  6/25/86
 24644 00003EA7 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24645                                  	;test	byte [FastOpenFlg],1
 24646 00003EA9 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24647 00003EAE 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24648 00003EB0 06                      	PUSH	ES			; save registers
 24649 00003EB1 57                      	PUSH	DI
 24650 00003EB2 51                      	PUSH	CX
 24651 00003EB3 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24652 00003EB6 56                      	PUSH	SI
 24653 00003EB7 53                      	PUSH	BX
 24654                                  
 24655 00003EB8 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24656 00003EBC 8B36[B205]              	MOV	SI,[WFP_START]
 24657                                  
 24658                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24659 00003EC0 BB[300D]                	MOV	BX,FastOpenTable
 24660 00003EC3 BF[460D]                	MOV	DI,Dir_Info_Buff
 24661 00003EC6 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24662                                  	;mov	al,1
 24663 00003EC9 B001                    	MOV	AL,FONC_Look_up
 24664 00003ECB 1E                      	PUSH	DS
 24665 00003ECC 07                      	POP	ES
 24666                                  	;call	far [BX+2]
 24667 00003ECD FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24668 00003ED0 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24669                                  					; Go to Got_Srch_cluster
 24670                                  	; 29/12/2022
 24671                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24672                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24673                                  	;stc
 24674                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24675                                  
 24676 00003ED2 803C01                  	cmp	byte [si],1
 24677                                  GO_Chk_end1:	; 29/12/2022
 24678 00003ED5 F5                      	cmc 
 24679                                  	; [si] = 0 -> cf = 0
 24680                                  	; [si] > 0 -> cf = 1
 24681                                  
 24682                                  ;GO_Chk_end1:
 24683                                  	; 29/12/2022
 24684                                  	;clc
 24685                                  
 24686                                  GO_Chk_end:				; restore registers
 24687 00003ED6 5B                      	POP	BX
 24688 00003ED7 5E                      	POP	SI
 24689 00003ED8 8F44FF                  	POP	word [SI-1]
 24690 00003EDB 59                      	POP	CX
 24691 00003EDC 5F                      	POP	DI
 24692 00003EDD 07                      	POP	ES
 24693 00003EDE 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24694                                  
 24695                                  ; DOS 3.3  6/25/86
 24696                                  ;
 24697                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24698                                  ; of path and go crack from root.
 24699                                  
 24700                                  NO_CURR_D:
 24701 00003EE0 8B36[B205]              	MOV	SI,[WFP_START]
 24702                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24703                                  	; 15/02/2024
 24704 00003EE4 83C603                  	add	si,3
 24705 00003EE7 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24706 00003EEB EB3B                    	JMP	short ROOTPATH
 24707                                  
 24708                                  ; We are able to crack from the current directory part. Go set up for search
 24709                                  ; of specified cluster.
 24710                                  
 24711                                  GOT_SEARCH_CLUSTER:
 24712 00003EED C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24713 00003EF1 E8E9FE                  	call	SETDIRSRCH
 24714                                  	;JC	short SETFERR
 24715                                  	;JMP	short FINDPATH
 24716                                  	; 16/12/2022
 24717 00003EF4 7343                    	jnc	short FINDPATH ; 17/08/2018
 24718                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24719                                  	;JC	short SETFERR
 24720                                  	;JMP	short FINDPATH
 24721                                  SETFERR:
 24722 00003EF6 30C9                    	XOR	CL,CL			; set zero
 24723 00003EF8 F9                      	STC
 24724 00003EF9 C3                      	retn
 24725                                  
 24726                                  ;---------------------------------------------------------------------------
 24727                                  ;
 24728                                  ; Procedure Name : ChkDev
 24729                                  ;
 24730                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24731                                  ;   device.
 24732                                  ; Blasts CX,SI,DI,AX,BX
 24733                                  ;---------------------------------------------------------------------------
 24734                                  
 24735                                  CHKDEV:
 24736 00003EFA 89FE                    	MOV	SI,DI
 24737 00003EFC 8CD7                    	MOV	DI,SS
 24738 00003EFE 8EC7                    	MOV	ES,DI
 24739                                  
 24740 00003F00 BF[4B05]                	MOV	DI,NAME1
 24741 00003F03 B90900                  	MOV	CX,9
 24742                                  TESTLOOP:
 24743 00003F06 E83110                  	call	GETLET
 24744                                  
 24745 00003F09 3C2E                    	CMP	AL,'.'
 24746 00003F0B 740E                    	JZ	short TESTDEVICE
 24747 00003F0D E88010                  	call	PATHCHRCMP
 24748 00003F10 7407                    	JZ	short NOTDEV
 24749 00003F12 08C0                    	OR	AL,AL
 24750 00003F14 7405                    	JZ	short TESTDEVICE
 24751                                  
 24752 00003F16 AA                      	STOSB
 24753 00003F17 E2ED                    	LOOP	TESTLOOP
 24754                                  NOTDEV:
 24755 00003F19 F9                      	STC
 24756 00003F1A C3                      	retn
 24757                                  
 24758                                  TESTDEVICE:
 24759                                  	;ADD	CX,2
 24760                                  	; 23/09/2023
 24761 00003F1B 41                      	inc	cx
 24762 00003F1C 41                      	inc	cx
 24763 00003F1D B020                    	MOV	AL,' '
 24764 00003F1F F3AA                    	REP	STOSB
 24765 00003F21 8CD0                    	MOV	AX,SS
 24766 00003F23 8ED8                    	MOV	DS,AX
 24767                                  	;call	DEVNAME
 24768                                  	;retn
 24769                                  	; 18/12/2022
 24770 00003F25 E9B601                  	jmp	DEVNAME
 24771                                  
 24772                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24773                                  ;----------------------------------------------------------------------------
 24774                                  ;
 24775                                  ; Procedure Name : ROOTPATH,FINDPATH
 24776                                  ;
 24777                                  ; Inputs:
 24778                                  ;	Same as FINDPATH but,
 24779                                  ;	SI Points to asciz string of path which is assumed to start at
 24780                                  ;		the root (no leading '/').
 24781                                  ; Function:
 24782                                  ;	Search from root for path
 24783                                  ; Outputs:
 24784                                  ;	Same as FINDPATH but:
 24785                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24786                                  ;	[NoSetDir] is ignored.
 24787                                  ;----------------------------------------------------------------------------
 24788                                  
 24789                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24790                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24791                                  
 24792                                  ROOTPATH:
 24793 00003F28 E8EDFE                  	call	SETROOTSRCH
 24794 00003F2B 803C00                  	CMP	BYTE [SI],0
 24795 00003F2E 7509                    	JNZ	short FINDPATH
 24796                                  
 24797                                  ; Root dir specified
 24798 00003F30 A0[6D05]                	MOV	AL,[SATTRIB]
 24799 00003F33 A2[6B05]                	MOV	[ATTRIB],AL
 24800 00003F36 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24801                                  					; (dir), clears carry.
 24802 00003F38 C3                      	retn
 24803                                  
 24804                                  ; Inputs:
 24805                                  ;	[ATTRIB] Set to get through directories
 24806                                  ;	[SATTRIB] Set to find last element
 24807                                  ;	ES:BP Points to DPB
 24808                                  ;	SI Points to asciz string of path (no leading '/').
 24809                                  ;	[SECCLUSPOS] = 0
 24810                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24811                                  ;	[CLUSNUM] = Cluster # of next cluster
 24812                                  ;	[CLUSFAC] = Sectors per cluster
 24813                                  ;	[NoSetDir] set
 24814                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24815                                  ;		( = -1 if current dir not involved, else
 24816                                  ;		 Points to first char after last "/" of current dir part)
 24817                                  ;	[THISCDS] Points to CDS being used
 24818                                  ;	[CREATING] and [DELALL] set
 24819                                  ; Function:
 24820                                  ;	Parse path name
 24821                                  ; Outputs:
 24822                                  ;	ID1 field of [THISCDS] updated appropriately
 24823                                  ;	[ATTRIB] = [SATTRIB]
 24824                                  ;	ES:BP Points to DPB
 24825                                  ;	[THISDPB] = ES:BP
 24826                                  ;	Carry set if bad path
 24827                                  ;	   SI Points to path element causing failure
 24828                                  ;	   Zero set
 24829                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24830                                  ;	      start a search on the last directory
 24831                                  ;	      CL is zero if there is a bad name in the path
 24832                                  ;	      CL is non-zero if the name was simply not found
 24833                                  ;		 [ENTFREE] may have free spot in directory
 24834                                  ;		 [NAME1] is the name.
 24835                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24836                                  ;	   Zero reset
 24837                                  ;	      File in middle of path or bad name in path
 24838                                  ;		or path too long or malformed path
 24839                                  ;	ELSE
 24840                                  ;	   [CURBUF] contains directory record with match
 24841                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24842                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24843                                  ;	   [NAME1] Has name looked for
 24844                                  ;	   AH = device ID
 24845                                  ;	      bit 7 of AH set if device SI and BX
 24846                                  ;	      will point DOSGROUP relative The firclus
 24847                                  ;	      field of the device entry contains the device pointer
 24848                                  ;	   If last element is a directory zero is set and:
 24849                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24850                                  ;	      are set up to start a search on it,
 24851                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24852                                  ;	      like that for a file (except for zero flag)
 24853                                  ;	   If last element is a file zero is reset
 24854                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24855                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24856                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24857                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24858                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24859                                  ; Destroys all other registers
 24860                                  
 24861                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24862                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24863                                  
 24864                                      	;entry	FINDPATH
 24865                                  FINDPATH:
 24866 00003F39 06                      	PUSH	ES			; Save ES:BP
 24867 00003F3A 56                      	PUSH	SI
 24868 00003F3B 89F7                    	MOV	DI,SI
 24869 00003F3D 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24870 00003F41 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24871 00003F46 740E                    	JZ	short NOIDS		; No current dir part
 24872 00003F48 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24873 00003F4C 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24874 00003F4E C43E[A205]              	LES	DI,[THISCDS]
 24875                                  	;mov	[es:di+73],cx
 24876 00003F52 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24877                                  NOIDS:
 24878                                  
 24879                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24880                                  ; character in the string. CX,DI may be destroyed.
 24881                                  ;
 24882                                  ;	invoke	NAMETRANS
 24883                                  ;	MOV	CL,AL
 24884                                  ;
 24885                                  ; The above is the slow method. The name has *already* been munged by
 24886                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24887                                  ; the name until ., \ or 0 is hit.
 24888                                  
 24889                                  	;MOV	AX,SS
 24890                                  	;MOV	ES,AX
 24891                                  	; 15/02/2024 - Retro DOS v4.1
 24892 00003F56 16                      	push	ss
 24893 00003F57 07                      	pop	es
 24894                                  
 24895                                  ;hkn; Name1 is in DOSDATA
 24896 00003F58 BF[4B05]                	MOV	DI,NAME1
 24897 00003F5B B82020                  	MOV	AX,'  ' ; 2020h
 24898 00003F5E AA                      	STOSB
 24899 00003F5F AB                      	STOSW
 24900 00003F60 AB                      	STOSW
 24901 00003F61 AB                      	STOSW
 24902 00003F62 AB                      	STOSW
 24903 00003F63 AB                      	STOSW
 24904                                  
 24905                                  ;hkn; Name1 is in DOSDATA
 24906 00003F64 BF[4B05]                	MOV	DI,NAME1
 24907 00003F67 30E4                    	XOR	AH,AH			; bits for CL
 24908                                  GetNam:
 24909                                  	; 19/05/2019 - Retro DOS v4.0
 24910                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24911                                  
 24912                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24913                                  	; 16/12/2022
 24914                                  	;inc	cl ; not required !	
 24915                                  	
 24916 00003F69 AC                      	LODSB
 24917 00003F6A 3C2E                    	CMP	AL,'.'	; 2Eh
 24918 00003F6C 7412                    	JZ	short _SetExt
 24919 00003F6E 08C0                    	OR	AL,AL
 24920 00003F70 7424                    	JZ	short _GetDone
 24921 00003F72 3C5C                    	CMP	AL,'\'	; 5Ch
 24922 00003F74 7420                    	JZ	short _GetDone
 24923 00003F76 3C3F                    	CMP	AL,'?'	; 3Fh
 24924 00003F78 7503                    	JNZ	short StoNam
 24925 00003F7A 80CC01                  	OR	AH,1
 24926                                  StoNam: 
 24927 00003F7D AA                      	STOSB
 24928 00003F7E EBE9                    	JMP	short GetNam
 24929                                  _SetExt:
 24930 00003F80 BF[5305]                	MOV	DI,NAME1+8
 24931                                  GetExt:
 24932 00003F83 AC                      	LODSB
 24933 00003F84 08C0                    	OR	AL,AL
 24934 00003F86 740E                    	JZ	short _GetDone
 24935 00003F88 3C5C                    	CMP	AL,'\'
 24936 00003F8A 740A                    	JZ	short _GetDone
 24937 00003F8C 3C3F                    	CMP	AL,'?'
 24938 00003F8E 7503                    	JNZ	short StoExt
 24939 00003F90 80CC01                  	OR	AH,1
 24940                                  StoExt: 
 24941 00003F93 AA                      	STOSB
 24942 00003F94 EBED                    	JMP	short GetExt
 24943                                  _GetDone:
 24944 00003F96 4E                      	DEC	SI
 24945 00003F97 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24946 00003F99 80C980                  	OR	CL,80H
 24947 00003F9C 5F                      	POP	DI			; Start of this element
 24948 00003F9D 07                      	POP	ES			; Restore ES:BP
 24949 00003F9E 39FE                    	CMP	SI,DI
 24950 00003FA0 7503                    	JNZ	short check_device
 24951 00003FA2 E9E000                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24952                                  check_device:
 24953 00003FA5 56                      	PUSH	SI			; Start of next element
 24954                                  	;MOV	AL,[SI]
 24955                                  	; 15/02/2024
 24956 00003FA6 08C0                    	OR	AL,AL
 24957                                  	; 23/09/2023
 24958                                  	;cmp	byte [si],0
 24959 00003FA8 7508                    	JNZ	short NOT_LAST
 24960                                  
 24961                                  ; for last element of the path switch to the correct search attributes
 24962                                  
 24963 00003FAA 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24964 00003FAE 883E[6B05]              	MOV	[ATTRIB],BH
 24965                                  
 24966                                  NOT_LAST:
 24967                                  
 24968                                  ; check name1 to see if we have a device...
 24969                                  
 24970 00003FB2 06                      	PUSH	ES			; Save ES:BP
 24971                                  
 24972                                  ;hkn; SS is DOSDATA
 24973                                  	;context ES
 24974 00003FB3 16                      	push	ss
 24975 00003FB4 07                      	pop	es
 24976 00003FB5 E82601                  	call	DEVNAME 		; blast BX
 24977 00003FB8 07                      	POP	ES			; Restore ES:BP
 24978 00003FB9 720B                    	JC	short FindFile		; Not a device
 24979 00003FBB 08C0                    	OR	AL,AL			; Test next char again
 24980 00003FBD 7403                    	JZ	short GO_BDEV
 24981 00003FBF E9C700                  	JMP	FILEINPATH		; Device name in middle of path
 24982                                  
 24983                                  GO_BDEV:
 24984 00003FC2 5E                      	POP	SI			; Points to NUL at end of path
 24985 00003FC3 E998FE                  	JMP	Build_devJ
 24986                                  
 24987                                  FindFile:
 24988                                  ;;;; 7/28/86
 24989 00003FC6 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24990 00003FCB 7505                    	JNZ	short NOE5		; no
 24991 00003FCD C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24992                                  NOE5:
 24993                                  ;;;; 7/28/86
 24994 00003FD2 57                      	PUSH	DI			; Start of this element
 24995 00003FD3 06                      	PUSH	ES			; Save ES:BP
 24996 00003FD4 51                      	PUSH	CX			; CL return from NameTrans
 24997                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24998                                  
 24999 00003FD5 E88F02                  	CALL	LookupPath		; call fastopen to get dir entry
 25000 00003FD8 7303                    	JNC	short DIR_FOUND		; found dir entry
 25001                                  
 25002                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25003 00003FDA E8C6FC                  	call	FINDENTRY
 25004                                  DIR_FOUND:
 25005 00003FDD 59                      	POP	CX
 25006 00003FDE 07                      	POP	ES
 25007 00003FDF 5F                      	POP	DI
 25008 00003FE0 7303                    	JNC	short LOAD_BUF
 25009 00003FE2 E9C900                  	JMP	BADPATHPOP
 25010                                  
 25011                                  LOAD_BUF:
 25012 00003FE5 C53E[E205]              	LDS	DI,[CURBUF]
 25013                                  	;test	byte [bx+0Bh],10h
 25014 00003FE9 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25015 00003FED 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25016 00003FEF E99700                  	JMP	FILEINPATH		; Error or end of path
 25017                                  
 25018                                  ; if we are not setting the directory, then check for end of string
 25019                                  
 25020                                  GO_NEXT:
 25021                                  ;hkn; SS override
 25022 00003FF2 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25023 00003FF8 7423                    	JZ	short SetDir
 25024 00003FFA 89FA                    	MOV	DX,DI			; Save pointer to entry
 25025 00003FFC 8CD9                    	MOV	CX,DS
 25026                                  
 25027                                  ;hkn; SS is DOSDATA
 25028                                  	;context DS
 25029 00003FFE 16                      	push	ss
 25030 00003FFF 1F                      	pop	ds
 25031 00004000 5F                      	POP	DI			; Start of next element
 25032                                  	; 19/05/2019 - Retro DOS v4.0
 25033                                  	; MSDOS 6.0
 25034 00004001 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25035 00004006 740B                    	JZ	short _nofast			; the FastOpen
 25036 00004008 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25037 0000400D 7404                    	JZ	short _nofast			; no
 25038 0000400F 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25039                                  _nofast:
 25040 00004013 803D00                  	CMP	BYTE [DI],0
 25041                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25042                                  	;;JMP	_SETRET  ; retn		; Got it
 25043                                  	;retn	; 05/09/2018
 25044                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25045                                  	;jmp	_SETRET
 25046                                  	; 16/12/2022
 25047 00004016 7421                    	jz	short _SETRET
 25048                                  
 25049                                  NEXT_ONE:
 25050 00004018 57                      	PUSH	DI			; Put start of next element back on stack
 25051 00004019 89D7                    	MOV	DI,DX
 25052 0000401B 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25053                                  SetDir:
 25054 0000401D 8B14                    	MOV	DX,[SI] 		; Dir_first
 25055                                  
 25056                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25057 0000401F 1E                      	PUSH	DS		      ; save [curbuf+2]
 25058                                  ;hkn; SS is DOSDATA
 25059 00004020 16                      	push	ss
 25060 00004021 1F                      	pop	ds		      ; set DS Dosgroup
 25061                                  	;test	byte [FastOpenFlg],2
 25062 00004022 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25063 00004027 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25064 00004029 89D3                    	MOV	BX,DX		      ; not found
 25065 0000402B 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25066 0000402F 50                      	PUSH	AX		      ; save device id (AH)
 25067 00004030 E8AAFD                  	call	SETDIRSRCH
 25068 00004033 58                      	POP	AX		      ; restore device id (AH)
 25069 00004034 83C402                  	ADD	SP,2		      ; pop ds in stack
 25070 00004037 EB36                    	JMP	short FAST_OPEN_SKIP
 25071                                  
 25072                                  	; 16/12/2022
 25073                                  _SETRET:
 25074 00004039 C3                      	retn
 25075                                  
 25076                                  DO_NORMAL:
 25077 0000403A 1F                      	POP	DS			; DS = [curbuf + 2]
 25078                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25079                                  
 25080 0000403B 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25081 0000403D 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25082 0000403F 53                      	PUSH	BX
 25083 00004040 50                      	PUSH	AX
 25084 00004041 56                      	PUSH	SI
 25085 00004042 51                      	PUSH	CX
 25086                                  
 25087                                  ; 16/02/2024
 25088                                  %if 0
 25089                                  	;push	word [di+6]
 25090                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25091                                  	; 19/05/2019
 25092                                  	; MSDOS 6.0
 25093                                  	;push	word [di+8]
 25094                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25095                                  %else	
 25096                                  	; 16/02/2024
 25097                                  	;lds	bx,[di+6]
 25098 00004043 C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25099 00004046 53                      	push	bx
 25100 00004047 1E                      	push	ds
 25101                                  %endif
 25102                                  
 25103 00004048 89D3                    	MOV	BX,DX
 25104                                  
 25105                                  ;hkn; SS is DOSDATA
 25106                                  	;context DS
 25107 0000404A 16                      	push	ss
 25108 0000404B 1F                      	pop	ds
 25109                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25110 0000404C E88EFD                  	call	SETDIRSRCH		; the entry sector buffer
 25111                                  	; 19/05/2019
 25112                                  	; MSDOS 6.0
 25113 0000404F 8F06[0706]              	POP	word [HIGH_SECTOR]
 25114 00004053 5A                      	POP	DX
 25115 00004054 7203                    	JC	short SKIP_GETB
 25116                                  	; 22/09/2023
 25117                                  	;;mov	byte [ALLOWED],18h
 25118                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25119                                  	;XOR	AL,AL ; *
 25120                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25121                                  	;call	GETBUFFR
 25122 00004056 E8DF17                  	call	GETBUFFER ; * ; pre-read
 25123                                  SKIP_GETB:
 25124 00004059 59                      	POP	CX
 25125 0000405A 5E                      	POP	SI
 25126 0000405B 58                      	POP	AX
 25127 0000405C 5B                      	POP	BX
 25128 0000405D 7305                    	JNC	short SET_THE_BUF
 25129 0000405F 5F                      	POP	DI			; Start of next element
 25130 00004060 89FE                    	MOV	SI,DI			; Point with SI
 25131 00004062 EB21                    	JMP	SHORT _BADPATH
 25132                                  
 25133                                  SET_THE_BUF:
 25134 00004064 E8AFF5                  	call	SET_BUF_AS_DIR
 25135 00004067 8B3E[E205]              	MOV	DI,[CURBUF]
 25136 0000406B 01FE                    	ADD	SI,DI			; Get the offsets back
 25137 0000406D 01FB                    	ADD	BX,DI
 25138                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25139                                  FAST_OPEN_SKIP:
 25140 0000406F 5F                      	POP	DI			; Start of next element
 25141 00004070 E89802                  	CALL	InsertPath		; insert dir entry info
 25142                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25143 00004073 8A05                    	MOV	AL,[DI]
 25144 00004075 08C0                    	OR	AL,AL
 25145 00004077 74C0                    	JZ	short _SETRET		; At end
 25146 00004079 47                      	INC	DI			; Skip over "/"
 25147 0000407A 89FE                    	MOV	SI,DI			; Point with SI
 25148 0000407C E8110F                  	call	PATHCHRCMP
 25149 0000407F 7503                    	JNZ	short find_bad_name	; oops
 25150 00004081 E9B5FE                  	JMP	FINDPATH		; Next element
 25151                                  
 25152                                  find_bad_name:
 25153 00004084 4E                      	DEC	SI			; Undo above INC to get failure point
 25154                                  _BADPATH:
 25155 00004085 30C9                    	XOR	CL,CL			; Set zero
 25156 00004087 EB2C                    	JMP	SHORT BADPRET
 25157                                  
 25158                                  FILEINPATH:
 25159 00004089 5F                      	POP	DI			; Start of next element
 25160                                  
 25161                                  ;hkn; SS is DOSDATA
 25162                                  	;context DS			; Got to from one place with DS gone
 25163 0000408A 16                      	push	ss
 25164 0000408B 1F                      	pop	ds
 25165                                  
 25166                                  ; DOS 3.3 FastOpen
 25167                                  	;test	byte [FastOpenFlg],1
 25168 0000408C F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25169 00004091 740B                    	JZ	short NO_FAST		; device info to fastopen
 25170                                  	;test	byte [FastOpenFlg],2
 25171 00004093 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25172 00004098 7404                    	JZ	short NO_FAST
 25173 0000409A 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25174                                  					 ; success
 25175                                  NO_FAST:
 25176                                  ; DOS 3.3 FastOpen
 25177 0000409E 8A05                    	MOV	AL,[DI]
 25178 000040A0 08C0                    	OR	AL,AL
 25179 000040A2 7404                    	JZ	short INCRET
 25180 000040A4 89FE                    	MOV	SI,DI			; Path too long
 25181 000040A6 EB0D                    	JMP	SHORT BADPRET
 25182                                  
 25183                                  INCRET:
 25184                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25185                                  
 25186 000040A8 E86002                  	CALL   InsertPath		; insert dir entry info
 25187                                  
 25188                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25189 000040AB FEC0                    	INC	AL			; Reset zero
 25190                                  	; 16/12/2022	
 25191                                  ;_SETRET:
 25192 000040AD C3                      	retn
 25193                                  
 25194                                  BADPATHPOP:
 25195 000040AE 5E                      	POP	SI			; Start of next element
 25196 000040AF 8A04                    	MOV	AL,[SI]
 25197 000040B1 89FE                    	MOV	SI,DI			; Start of bad element
 25198 000040B3 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25199                                  BADPRET:
 25200 000040B5 A0[6D05]                	MOV	AL,[SATTRIB]
 25201 000040B8 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25202 000040BB F9                      	STC
 25203 000040BC C3                      	retn
 25204                                  
 25205                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25206                                  ;---------------------------------------------------------------------------
 25207                                  ;
 25208                                  ; Procedure Name : STARTSRCH
 25209                                  ;
 25210                                  ; Inputs:
 25211                                  ;	[THISDPB] Set
 25212                                  ; Function:
 25213                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25214                                  ; Outputs:
 25215                                  ;	ES:BP = Drive parameters
 25216                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25217                                  ; Destroys ES,BP,AX
 25218                                  ;--------------------------------------------------------------------------
 25219                                  
 25220                                  STARTSRCH:
 25221 000040BD C42E[8A05]              	LES	BP,[THISDPB]
 25222 000040C1 31C0                    	XOR	AX,AX
 25223 000040C3 A3[4803]                	MOV	[LASTENT],AX
 25224 000040C6 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25225 000040C9 48                      	DEC	AX
 25226 000040CA A3[D805]                	MOV	[ENTFREE],AX
 25227 000040CD A3[DA05]                	MOV	[ENTLAST],AX
 25228 000040D0 C3                      	retn
 25229                                  
 25230                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25231                                  ;----------------------------------------------------------------------------
 25232                                  ; Procedure Name : MatchAttributes
 25233                                  ;
 25234                                  ; Input:    [Attrib] = attribute to search for
 25235                                  ;	    CH = found attribute
 25236                                  ; Output:   JZ <match>
 25237                                  ;	    JNZ <nomatch>
 25238                                  ; Registers modified: noneski
 25239                                  ;----------------------------------------------------------------------------
 25240                                  
 25241                                  MatchAttributes:
 25242 000040D1 50                      	PUSH	AX
 25243                                  
 25244                                  ;hkn; SS override
 25245 000040D2 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25246 000040D6 F6D0                    	NOT	AL			; AL <- SearchSet'
 25247 000040D8 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25248                                  	;and	al,16h
 25249 000040DA 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25250                                  ;
 25251                                  ; the result is non-zero if an attribute is not in the search set
 25252                                  ; and in the found set and in the important set. This means that we do not
 25253                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25254                                  ;
 25255 000040DC 58                      	POP	AX
 25256 000040DD C3                      	retn
 25257                                  
 25258                                  ; 19/05/2019 - Retro DOS v4.0
 25259                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25260                                  
 25261                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25262                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25263                                  
 25264                                  ;Break <DevName - Look for name of device>
 25265                                  ;---------------------------------------------------------------------------
 25266                                  ;
 25267                                  ; Procedure Name : DevName
 25268                                  ;
 25269                                  ; Inputs:
 25270                                  ;	DS,ES:DOSDATA
 25271                                  ;	Filename in NAME1
 25272                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25273                                  ; Function:
 25274                                  ;	Determine if file is in list of I/O drivers
 25275                                  ; Outputs:
 25276                                  ;	Carry set if not a device
 25277                                  ;	ELSE
 25278                                  ;	Zero flag set
 25279                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25280                                  ;	     bits 0-4 set from low byte of attribute word
 25281                                  ;	DEVPT = DWORD pointer to Device header of device
 25282                                  ; BX destroyed, others preserved
 25283                                  ;---------------------------------------------------------------------------
 25284                                  
 25285                                  DEVNAME:
 25286                                  	; 28/07/2018 - Retro DOS v3.0
 25287                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25288                                  
 25289 000040DE 56                      	PUSH	SI
 25290 000040DF 57                      	PUSH	DI
 25291 000040E0 51                      	PUSH	CX
 25292 000040E1 50                      	PUSH	AX
 25293                                  
 25294                                  ; E5 special code
 25295 000040E2 FF36[4B05]              	PUSH	WORD [NAME1]
 25296 000040E6 803E[4B05]05            	CMP	byte [NAME1],5
 25297 000040EB 7505                    	JNZ	short NOKTR
 25298 000040ED C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25299                                  NOKTR:
 25300                                  	;test	byte [ATTRIB],8
 25301 000040F2 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25302                                  					; If looking for VOL id don't find devs
 25303 000040F7 7521                    	JNZ	short RET31
 25304                                  
 25305                                  ;hkn; NULDEV is in DOSDATA
 25306 000040F9 BE[4800]                	MOV	SI,NULDEV
 25307                                  LOOKIO:
 25308                                  	; 21/11/2022
 25309                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25310                                  	; 17/12/2022
 25311                                  	;test	byte [si+5],80h
 25312 000040FC F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25313                                  	;;test	word [si+4],8000h
 25314                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25315 00004100 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25316 00004102 89F0                    	MOV	AX,SI
 25317                                  	;add	si,10
 25318 00004104 83C60A                  	ADD	SI,SYSDEV.NAME
 25319                                  
 25320                                  ;hkn; NAME1 is in DOSDATA
 25321 00004107 BF[4B05]                	MOV	DI,NAME1
 25322 0000410A B90400                  	MOV	CX,4			; All devices are 8 letters
 25323 0000410D F3A7                    	REPE	CMPSW			; Check for name in list
 25324 0000410F 89C6                    	MOV	SI,AX
 25325 00004111 7415                    	JZ	short IOCHK		; Found it?
 25326                                  SKIPDEV:
 25327 00004113 C534                    	LDS	SI,[SI]			; Get address of next device
 25328 00004115 83FEFF                  	CMP	SI,-1			; At end of list?
 25329 00004118 75E2                    	JNZ	short LOOKIO
 25330                                  RET31:	
 25331 0000411A F9                      	STC				; Not found
 25332                                  RETNV:	
 25333 0000411B 8CD1                    	MOV	CX,SS
 25334 0000411D 8ED9                    	MOV	DS,CX
 25335                                  
 25336 0000411F 8F06[4B05]              	POP	WORD [NAME1]
 25337 00004123 58                      	POP	AX
 25338 00004124 59                      	POP	CX
 25339 00004125 5F                      	POP	DI
 25340 00004126 5E                      	POP	SI
 25341 00004127 C3                      	RETN
 25342                                  
 25343                                  IOCHK:
 25344                                  ;hkn; SS override for DEVPT
 25345 00004128 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25346                                  	;mov	bh,[si+4]
 25347 0000412D 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25348 00004130 80CFC0                  	OR	BH,0C0h
 25349 00004133 80E7DF                  	and	bh,0DFh
 25350                                  	;AND	BH,~(020h)		; Clears Carry
 25351 00004136 368936[9A05]            	MOV	[SS:DEVPT],SI
 25352 0000413B EBDE                    	JMP	short RETNV
 25353                                  
 25354                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25355                                  ;---------------------------------------------------------------------------
 25356                                  ; Procedure Name : Build_device_ent
 25357                                  ;
 25358                                  ; Inputs:
 25359                                  ;	[NAME1] has name
 25360                                  ;	BH is attribute field (supplied by DEVNAME)
 25361                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25362                                  ; Function:
 25363                                  ;	Build a directory entry for a device at DEVFCB
 25364                                  ; Outputs:
 25365                                  ;	BX points to DEVFCB
 25366                                  ;	SI points to dir_first field
 25367                                  ;	AH = input BH
 25368                                  ;	AL = 0
 25369                                  ;	dir_first = DEVPT
 25370                                  ;	Zero Set, Carry Clear
 25371                                  ; DS,ES,BP preserved, others destroyed
 25372                                  ;--------------------------------------------------------------------------
 25373                                  
 25374                                  Build_device_ent:
 25375 0000413D B82020                  	MOV	AX,"  " ; 2020h
 25376                                  
 25377                                  ;hkn; DEVFCB is in DOSDATA
 25378 00004140 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25379                                  
 25380                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25381                                  
 25382 00004143 AB                      	STOSW
 25383 00004144 AA                      	STOSB				; Blank out extent field
 25384                                  	;mov	al,40h
 25385 00004145 B040                    	MOV	AL,attr_device
 25386                                  
 25387                                  ;	Fill Dir_attr
 25388                                  
 25389 00004147 AA                      	STOSB				; Set attribute field
 25390 00004148 31C0                    	XOR	AX,AX
 25391 0000414A B90A00                  	MOV	CX,10
 25392                                  
 25393                                  ; Fill dir_pad
 25394                                  
 25395 0000414D F3AB                    	REP	STOSW			; Fill rest with zeros
 25396 0000414F E899C9                  	call	DATE16
 25397                                  
 25398                                  ;hkn; DEVFCB is in DOSDATA
 25399 00004152 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25400 00004155 92                      	XCHG	AX,DX
 25401                                  
 25402                                  ; Fill dir_time
 25403                                  
 25404 00004156 AB                      	STOSW
 25405 00004157 92                      	XCHG	AX,DX
 25406                                  
 25407                                  ; Fill dir_date
 25408                                  
 25409 00004158 AB                      	STOSW
 25410 00004159 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25411 0000415B A1[9A05]                	MOV	AX,[DEVPT]
 25412                                  
 25413                                  ; Fill dir_first
 25414                                  
 25415 0000415E AB                      	STOSW				; Dir_first points to device
 25416 0000415F A1[9C05]                	MOV	AX,[DEVPT+2]
 25417                                  ;
 25418                                  ; Fill dir_size_l
 25419                                  ;
 25420 00004162 AB                      	STOSW
 25421 00004163 88FC                    	MOV	AH,BH			; Put device atts in AH
 25422                                  
 25423                                  ;hkn; DEVFCB is in DOSDATA
 25424 00004165 BB[4B05]                	MOV	BX,DEVFCB
 25425 00004168 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25426 0000416A C3                      	retn
 25427                                  
 25428                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25429                                  ;----------------------------------------------------------------------------
 25430                                  ;
 25431                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25432                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25433                                  ;   If invalid, reset original CDS to root.
 25434                                  ;
 25435                                  ;   Inputs:	ThisCDS points to CDS of interest
 25436                                  ;		SS:DI points to temp buffer
 25437                                  ;   Outputs:	The current directory string is validated on the appropriate
 25438                                  ;		    drive
 25439                                  ;		ThisDPB changed
 25440                                  ;		ES:DI point to CDS
 25441                                  ;		Carry set if error (currently user FAILed to I 24)
 25442                                  ;   Registers modified: all
 25443                                  ;----------------------------------------------------------------------------
 25444                                  
 25445                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25446                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25447                                  
 25448                                  ValidateCDS:
 25449                                  	; 19/05/2019 - Retro DOS v4.0
 25450                                  	; 28/07/2018 - Retro DOS v3.0
 25451                                  
 25452                                     %define  Temp	[bp-2]	; word
 25453                                     %define  SaveCDS	[bp-6]	; dword
 25454                                     %define  SaveCDSL	[bp-6]	; word
 25455                                     %define  SaveCDSH	[bp-4]	; word
 25456                                  
 25457                                  	;Enter
 25458 0000416B 55                      	push	bp
 25459 0000416C 89E5                    	mov	bp,sp
 25460 0000416E 83EC06                  	sub	sp,6
 25461                                  
 25462 00004171 897EFE                  	MOV	Temp,DI
 25463                                  
 25464                                  ;hkn; SS override
 25465 00004174 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25466 00004179 8976FA                  	MOV	SaveCDSL,SI
 25467 0000417C 8C5EFC                  	MOV	SaveCDSH,DS
 25468                                  	;EnterCrit critDisk
 25469 0000417F E876D1                  	call	ECritDisk
 25470                                  	; 21/11/2022
 25471                                  	;test	byte [SI+curdir.flags+1],80h
 25472                                  	;test	word [si+67],8000h
 25473                                  	; 17/12/2022
 25474                                  	;test	byte [SI+68],80h
 25475 00004182 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25476                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25477 00004186 7403                    	JZ	short _DoSplice
 25478 00004188 E98D00                  	JMP	FatFail
 25479                                  _DoSplice:
 25480 0000418B 30D2                    	XOR	DL,DL
 25481 0000418D 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25482                                  
 25483                                  ;hkn; SS is DOSDATA
 25484                                  	;Context ES
 25485 00004192 16                      	push	ss
 25486 00004193 07                      	pop	es
 25487                                  	;Invoke	FStrcpy
 25488 00004194 E836D0                  	call	FStrCpy
 25489 00004197 8B76FE                  	MOV	SI,Temp
 25490                                  
 25491                                  ;hkn; SS is DOSDATA
 25492                                  	;Context DS
 25493 0000419A 16                      	push	ss
 25494 0000419B 1F                      	pop	ds	
 25495                                  	;Invoke	Splice
 25496 0000419C E8422B                  	call	Splice
 25497                                  
 25498                                   ;hkn; SS is DOSDATA
 25499                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25500 0000419F 16                      	push	ss
 25501 000041A0 1F                      	pop	ds
 25502 000041A1 8816[4C03]              	MOV	[NoSetDir],DL
 25503 000041A5 C43E[A205]              	LES	DI,[THISCDS]
 25504                                  	;SAVE	<BP>
 25505 000041A9 55                      	push	bp
 25506                                  	;Invoke	FATREAD_CDS
 25507 000041AA E81614                  	call	FATREAD_CDS	
 25508                                  	;RESTORE <BP>
 25509 000041AD 5D                      	pop	bp
 25510 000041AE 7268                    	JC	short FatFail
 25511                                  
 25512 000041B0 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25513                                  	;cmp	word [si+73],-1
 25514 000041B4 837C49FF                	CMP	word [SI+curdir.ID],-1
 25515 000041B8 7550                    	JNZ	short RestoreCDS
 25516                                  
 25517                                  ;hkn; SS is DOSDATA
 25518                                  	;Context ES
 25519 000041BA 16                      	push	ss
 25520 000041BB 07                      	pop	es
 25521                                  
 25522                                  ;hkn; SS override
 25523                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25524 000041BC 36FF36[B205]            	push	word [SS:WFP_START]
 25525                                  	;cmp	si,[bp-6]
 25526 000041C1 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25527 000041C4 750B                    	JNZ	short DoChdir
 25528                                  	;mov	di,[bp-2]
 25529 000041C6 8B7EFE                  	MOV	DI,Temp
 25530                                  
 25531                                  ;hkn; SS override
 25532 000041C9 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25533                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25534 000041CE E8FCCF                  	call	FStrCpy
 25535                                  DoChdir:
 25536                                  ;hkn; SS is DOSDATA
 25537                                  	;Context DS
 25538 000041D1 16                      	push	ss
 25539 000041D2 1F                      	pop	ds
 25540                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25541 000041D3 FF36[6D05]              	push	word [SATTRIB]
 25542 000041D7 55                      	push	bp
 25543                                  	;Invoke	DOS_ChDir
 25544 000041D8 E84FEF                  	call	DOS_CHDIR
 25545                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25546 000041DB 5D                      	pop	bp
 25547 000041DC 5B                      	pop	bx
 25548 000041DD 8F06[B205]              	pop	word [WFP_START]
 25549 000041E1 881E[6D05]              	MOV	[SATTRIB],BL
 25550 000041E5 C576FA                  	LDS	SI,SaveCDS
 25551 000041E8 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25552                                  
 25553                                  ;hkn; SS override for THISCDS
 25554 000041EA 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25555 000041EF 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25556 000041F4 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25557 000041F6 884C03                  	MOV	[SI+3],CL		;	    }
 25558                                  SetCluster:
 25559                                  	; 16/02/2024
 25560                                  	;;mov	word [si+73],0FFFFh
 25561                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25562                                  	;
 25563 000041F9 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25564                                  	; 21/11/2022
 25565                                  	;test	byte [si+curdir.flags+1],20h
 25566                                  	; 19/05/2019
 25567                                  	; MSDOS 6.0
 25568                                  	; 17/12/2022
 25569                                  	;test	byte [si+68],20h
 25570 000041FE F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25571                                  	;;test	word [si+67],2000h
 25572                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25573 00004202 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25574 00004204 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25575                                  _setdirclus:
 25576                                  	;mov	[si+73],cx
 25577 00004207 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25578                                  RestoreCDS:
 25579 0000420A C47EFA                  	LES	DI,SaveCDS
 25580 0000420D 36893E[A205]            	MOV	[SS:THISCDS],DI
 25581 00004212 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25582 00004217 F8                      	CLC
 25583                                  FatFail:
 25584                                  	;LeaveCrit critDisk
 25585 00004218 E8F8D0                  	call	LCritDisk
 25586                                  
 25587                                  	;les	di,[bp-6]
 25588 0000421B C47EFA                  	LES	DI,SaveCDS
 25589                                  	;Leave
 25590 0000421E 89EC                    	mov	sp,bp
 25591 00004220 5D                      	pop	bp
 25592 00004221 C3                      	retn
 25593                                  
 25594                                  ; 28/07/2018 - Retro DOS v3.0
 25595                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25596                                  
 25597                                  ;Break	<CheckThisDevice - Check for being a device>
 25598                                  ;---------------------------------------------------------------------------
 25599                                  ;
 25600                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25601                                  ;   device specified. We will return carry if there is a device present. 
 25602                                  ;   The forms of devices we will recognize are:
 25603                                  ;
 25604                                  ;	[path]device
 25605                                  ;
 25606                                  ;   Note that the drive letter has *already* been removed. All other forms
 25607                                  ;   are not considered to be devices. If such a device is found we change
 25608                                  ;   the source pointer to point to the device component.
 25609                                  ;
 25610                                  ;   Inputs:	ES is DOSDATA
 25611                                  ;		DS:SI contains name
 25612                                  ;   Outputs:	ES is DOSDATA
 25613                                  ;		DS:SI point to name or device
 25614                                  ;		Carry flag set if device was found
 25615                                  ;		Carry flag reset otherwise
 25616                                  ;   Registers Modified: all except ES:DI, DS
 25617                                  ;----------------------------------------------------------------------------
 25618                                  
 25619                                  CheckThisDevice:
 25620 00004222 57                      	push	di
 25621 00004223 56                      	push	si
 25622 00004224 89F7                    	MOV	DI,SI
 25623                                  
 25624                                  ; Check for presence of \dev\ (Dam multiplan!)
 25625                                  
 25626 00004226 8A04                    	MOV	AL,[SI]
 25627 00004228 E8650D                  	call	PATHCHRCMP		; is it a path char?
 25628 0000422B 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25629 0000422D 46                      	INC	SI			; simulate LODSB
 25630                                  
 25631                                  ; We have the leading path separator. Look for DEV part.
 25632                                  
 25633 0000422E AD                      	LODSW
 25634 0000422F 0D2020                  	OR	AX,2020h
 25635 00004232 3D6465                  	cmp	ax,"de"
 25636                                  	;CMP	AX,"e"<< 8 + "d"
 25637 00004235 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25638 00004237 AC                      	LODSB
 25639 00004238 0C20                    	OR	AL,20h
 25640 0000423A 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25641 0000423C 7526                    	JNZ	short NotDevice
 25642 0000423E AC                      	LODSB
 25643 0000423F E84E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25644 00004242 7520                    	JNZ	short NotDevice		; no. go for it.
 25645                                  
 25646                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25647                                  ; SI and DevName may destroy DS.
 25648                                  
 25649                                  ParseDev:
 25650 00004244 1E                      	push	ds
 25651 00004245 56                      	push	si			; preserve the source pointer
 25652 00004246 E8890C                  	call	NameTrans		; advance DS:SI
 25653 00004249 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25654 0000424C F9                      	STC				; simulate a Carry return from DevName
 25655 0000424D 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25656                                  
 25657                                  ;hkn; SS is DOSDATA
 25658 0000424F 16                      	push	ss
 25659 00004250 1F                      	pop	ds
 25660                                  
 25661                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25662                                  ;
 25663                                  ; SR;
 25664                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25665                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25666                                  ; old call set the volume attribute bit.
 25667                                  
 25668 00004251 A0[6D05]                	mov	al,[SATTRIB]
 25669 00004254 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25670                                  
 25671                                  ; M026 - end
 25672                                  
 25673 00004257 E884FE                  	call	DEVNAME
 25674                                  
 25675                                  SkipSearch:
 25676 0000425A 5E                      	pop	si
 25677 0000425B 1F                      	pop	ds
 25678                                  
 25679                                  ; SI points to the beginning of the potential device. If we have a device
 25680                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25681                                  ; original value. At this point Carry set indicates FILE.
 25682                                  
 25683                                  CheckReturn:
 25684 0000425C 5F                      	pop	di			; get original SI
 25685 0000425D 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25686 0000425F 89FE                    	MOV	SI,DI
 25687                                  Check_Done:
 25688 00004261 5F                      	pop	di
 25689 00004262 F5                      	CMC				; invert carry. Carry => device
 25690 00004263 C3                      	retn
 25691                                  NotDevice:
 25692 00004264 F9                      	STC
 25693 00004265 EBF5                    	JMP	short CheckReturn
 25694                                  
 25695                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25696                                  ;-----------------------------------------------------------------------------
 25697                                  ;
 25698                                  ; Procedure Name : LookupPath
 25699                                  ;
 25700                                  ; Output  DS:SI -> path name,
 25701                                  ;	  ES:DI -> dir entry info buffer
 25702                                  ;	  ES:CX -> extended dir info buffer
 25703                                  ;
 25704                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25705                                  ;			     FastOpen, DS:SI points to char just one after
 25706                                  ;			     the last char of path name which is fully or
 25707                                  ;			     partially found in FastOPen
 25708                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25709                                  ;
 25710                                  ;----------------------------------------------------------------------------
 25711                                  
 25712                                  LookupPath:
 25713                                  ;	PUSH	AX
 25714                                  
 25715                                  ;hkn; SS override
 25716                                  	;test	byte [ss:FastOpenFlg],1
 25717 00004267 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25718 0000426D 7503                    	JNZ	short FASTINST			    ; and this routine is
 25719                                  NOLOOK:
 25720 0000426F E99700                  	JMP	NOLOOKUP			    ; executed once
 25721                                  
 25722                                  FASTINST:
 25723                                  ;hkn; SS override
 25724                                  	;test	byte [ss:FastOpenFlg],8
 25725 00004272 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25726 00004278 75F5                    	JNZ	short NOLOOK			    ; yes
 25727                                  
 25728 0000427A BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25729                                  
 25730                                  ;hkn; SS override
 25731 0000427D 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25732 00004282 BF[460D]                	MOV	DI,Dir_Info_Buff
 25733 00004285 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25734 00004288 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25735 0000428A 1E                      	PUSH	DS
 25736 0000428B 07                      	POP	ES
 25737                                  
 25738                                  ;hkn; SS override
 25739                                  	;call	far [bx+2]
 25740 0000428C FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25741 0000428F 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25742                                  
 25743 00004291 8D5CFE                  	LEA	BX,[SI-2]
 25744                                  
 25745                                  ;hkn; SS override
 25746 00004294 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25747 00004299 745D                    	JZ	short NOTFOUND			    ; no
 25748                                  
 25749                                  	; 19/05/2019 - Retro DOS v4.0
 25750                                  
 25751                                  	; MSDOS 6.0				    ; fully or partially found
 25752 0000429B 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25753 0000429E 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25754 000042A0 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25755                                  
 25756                                  ;hkn; SS override for attrib/sattrib
 25757 000042A1 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25758 000042A6 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25759 000042AB 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25760                                  	;mov	ch,[es:di+0Bh]
 25761 000042B0 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25762 000042B4 E81AFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25763                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25764 000042B7 59                      	POP	CX				    ;AN000;FO.;
 25765 000042B8 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25766                                  parfnd:
 25767                                  
 25768                                  ;hkn; SS override
 25769 000042BA 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25770 000042BF 89CB                    	MOV	BX,CX
 25771                                  	; MSDOS 6.0
 25772                                  	;mov	ax,[bx+7]
 25773 000042C1 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25774                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25775 000042C4 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25776 000042C8 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25777 000042CB 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25778                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25779                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25780                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25781 000042CF 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25782 000042D2 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25783                                  
 25784 000042D6 06                      	PUSH	ES				    ; save ES
 25785                                  ;hkn; SS override
 25786 000042D7 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25787 000042DC 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25788                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25789 000042DF 07                      	POP	ES				    ; pop ES
 25790                                  ;SR;
 25791                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25792                                  ;indicate it is not a root dir
 25793                                  
 25794 000042E0 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25795 000042E7 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25796 000042EC 89FB                    	MOV	BX,DI				    ; start of entry
 25797                                  	;lea	si,[di+1Ah]
 25798 000042EE 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25799                                  						    ; dir_first field in the
 25800                                  						    ; dir entry
 25801                                  ;hkn; SS override for FastOpenFlg
 25802                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25803 000042F1 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25804                                  ;	POP	AX
 25805 000042F7 C3                      	RETN
 25806                                  NOTFOUND:
 25807 000042F8 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25808 000042FB 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25809 000042FD 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25810                                  Partial_Success:
 25811                                  	;and	byte [SS:FastOpenFlg],0FBh
 25812 00004303 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25813                                  NOLOOKUP:
 25814                                  ;	POP	AX
 25815 00004309 F9                      	STC
 25816 0000430A C3                      	RETN
 25817                                  
 25818                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25819                                  ;-----------------------------------------------------------------------------
 25820                                  ;
 25821                                  ; Procedure Name : InsertPath
 25822                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25823                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25824                                  ;	  DS = DOSDATA
 25825                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25826                                  ;
 25827                                  ;-----------------------------------------------------------------------------
 25828                                  
 25829                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25830                                  
 25831                                  InsertPath:
 25832 0000430B 9C                      	PUSHF
 25833                                  ;hkn; SS override for FastOpenFlag
 25834                                  	;test	byte [SS:FastOpenFlg], 1
 25835 0000430C 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25836 00004312 7477                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25837                                  	;test	byte [ss:FastOpenFlg],2
 25838 00004314 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25839 0000431A 740D                    	JZ	short INSERT_DIR_INFO		; no
 25840                                  	;and	byte [ss:FastOpenFlg],0FDh
 25841 0000431C 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25842 00004322 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25843 00004327 EB5C                    	JMP	short GET_NEXT2
 25844                                  
 25845                                  INSERT_DIR_INFO:				; save registers
 25846 00004329 1E                      	PUSH	DS
 25847 0000432A 06                      	PUSH	ES
 25848 0000432B 53                      	PUSH	BX
 25849 0000432C 56                      	PUSH	SI
 25850 0000432D 57                      	PUSH	DI
 25851 0000432E 51                      	PUSH	CX
 25852 0000432F 50                      	PUSH	AX
 25853                                  
 25854                                  ;hkn; SS override
 25855 00004330 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25856 00004335 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25857                                  
 25858                                  ; 21/02/2024
 25859                                  %if 0
 25860                                  	;mov	ax,[di+6]
 25861                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25862                                  	; MSDOS 6.0
 25863                                  	;mov	[ss:si+1],ax
 25864                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25865                                  	; 19/05/2019 - Retro DOS v4.0
 25866                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25867                                  
 25868                                  ;hkn; SS is DOSDATA
 25869                                  	push	ss
 25870                                  	pop	ds
 25871                                  	; MSDOS 3.3
 25872                                  	;;mov	[si+1],ax
 25873                                  	;MOV	[SI+FEI.dirsec],AX
 25874                                  	; MSDOS 6.0
 25875                                  	;mov	[si+3],ax
 25876                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25877                                  %else
 25878                                  	;lds	ax,[di+6]
 25879 00004338 C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 25880                                  	;mov	[ss:si+1],ax
 25881 0000433B 36894401                	mov	[ss:si+FEI.dirsec],ax
 25882                                  	;mov	[ss:si+3],ax
 25883 0000433F 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 25884 00004343 16                      	push	ss
 25885 00004344 1F                      	pop	ds
 25886                                  %endif
 25887                                  
 25888                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25889 00004345 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25890                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25891                                  	;mov	[si+3],ax ; MSDOS 3.3
 25892 00004348 894405                  	MOV	[SI+FEI.clusnum],AX
 25893                                  	; MSDOS 6.0
 25894 0000434B A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25895                                  	;mov	[si+7],ax
 25896 0000434E 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25897 00004351 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25898                                  	;mov	[si+9],ax
 25899 00004354 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25900                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25901 00004357 89D8                    	MOV	AX,BX
 25902                                  	;;add	di,16  ; MSDOS 3.3
 25903                                  	;add	di,20  ; MSDOS 6.0
 25904 00004359 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25905 0000435C 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25906                                  	;mov	cl,32
 25907 0000435E B120                    	MOV	CL,dir_entry.size
 25908 00004360 F6F1                    	DIV	CL
 25909                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25910 00004362 8804                    	mov	[si],al
 25911                                  
 25912 00004364 1E                      	PUSH	DS
 25913 00004365 07                      	POP	ES
 25914                                  
 25915 00004366 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25916 0000436A 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25917                                  	;cmp	word [di+1Ah],0
 25918 0000436C 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25919                                  					; never insert info when file is empty
 25920 00004370 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25921                                  
 25922 00004372 56                      	PUSH	SI			; ES:BX -> extended info
 25923 00004373 5B                      	POP	BX
 25924                                  
 25925                                  	;mov	al,2
 25926 00004374 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25927 00004376 BE[300D]                	MOV	SI,FastOpenTable
 25928                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25929                                  	; 07/12/2022
 25930 00004379 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25931                                  
 25932 0000437D F8                      	CLC
 25933                                  SKIP_INSERT:
 25934 0000437E 58                      	POP	AX
 25935 0000437F 59                      	POP	CX			; restore registers
 25936 00004380 5F                      	POP	DI
 25937 00004381 5E                      	POP	SI
 25938 00004382 5B                      	POP	BX
 25939 00004383 07                      	POP	ES
 25940 00004384 1F                      	POP	DS
 25941                                  GET_NEXT2:
 25942                                  	;or	[ss:FastOpenFlg],8
 25943 00004385 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25944                                  					; we got dir info from fastopen so
 25945                                  GET_NEXT_ELEMENT:
 25946 0000438B 9D                      	POPF
 25947 0000438C C3                      	RETN
 25948                                  
 25949                                  ;============================================================================
 25950                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25951                                  ;============================================================================
 25952                                  ; 17/07/2018 - Retro DOS v3.0
 25953                                  ; 30/04/2019 - Retro DOS v4.0
 25954                                  
 25955                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25956                                  
 25957                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25958                                  
 25959                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25960                                  
 25961                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25962                                  ;DEV001s:
 25963                                  ;		length of packets
 25964 0000438D 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25965                                  ;LenTab: db	22,14,22,13,15,14
 25966                                  
 25967                                  ;	Error Function
 25968                                  
 25969                                  CmdTab:
 25970 00004393 8604                    	DB	86h, DEVRD	; 0 input
 25971 00004395 8605                    	DB	86h, DEVRDND	; 1 input status
 25972 00004397 8708                    	DB	87h, DEVWRT	; 2 output
 25973 00004399 870A                    	DB	87h, DEVOST	; 3 output status
 25974 0000439B 8607                    	DB	86h, DEVIFL	; 4 input flush
 25975 0000439D 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25976                                  
 25977                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25978                                  
 25979                                  ;CmdTab:
 25980                                  ;	db	86h, 4
 25981                                  ;	db	86h, 5
 25982                                  ;	db	87h, 8
 25983                                  ;	db	87h, 10
 25984                                  ;	db	86h, 7
 25985                                  ;	db	86h, 5
 25986                                  
 25987                                  ;DEV001E:
 25988                                  
 25989                                  ; 30/04/2019 - Retro DOS v4.0
 25990                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25991                                  
 25992                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25993                                  ;----------------------------------------------------------------------------
 25994                                  ;
 25995                                  ; Procedure Name : IOFUNC
 25996                                  ;
 25997                                  ; Inputs:
 25998                                  ;	DS:SI Points to SFT
 25999                                  ;	AH is function code
 26000                                  ;		= 0 Input
 26001                                  ;		= 1 Input Status
 26002                                  ;		= 2 Output
 26003                                  ;		= 3 Output Status
 26004                                  ;		= 4 Flush
 26005                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26006                                  ;				   present.
 26007                                  ;	AL = character if output
 26008                                  ; Function:
 26009                                  ;	Perform indicated I/O to device or file
 26010                                  ; Outputs:
 26011                                  ;	AL is character if input
 26012                                  ;	If a status call
 26013                                  ;		zero set if not ready
 26014                                  ;		zero reset if ready (character in AL for input status)
 26015                                  ; For regular files:
 26016                                  ;	Input Status
 26017                                  ;		Gets character but restores position
 26018                                  ;		Zero set on EOF
 26019                                  ;	Input
 26020                                  ;		Gets character advances position
 26021                                  ;		Returns ^Z on EOF
 26022                                  ;	Output Status
 26023                                  ;		Always ready
 26024                                  ; AX altered, all other registers preserved
 26025                                  ;----------------------------------------------------------------------------
 26026                                  
 26027                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26028                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26029                                  
 26030                                  IOFUNC:
 26031 0000439F 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26032                                  					; DEVIOBUF
 26033 000043A4 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26034 000043AB 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26035 000043B2 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26036                                  	;test	byte [si+6],80h
 26037                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26038 000043B6 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26039 000043BA 7403                    	JZ	short IOTO22		;AN000;
 26040 000043BC E9A500                  	JMP	IOTOFILE		;AN000;
 26041                                  IOTO22:
 26042                                  	;test	word [si+5],80h
 26043                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26044 000043BF F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26045 000043C3 7503                    	JNZ	short IOTO33		;AN000;
 26046 000043C5 E99C00                  	JMP	IOTOFILE		;AN000;
 26047                                  IOTO33:
 26048 000043C8 06                      	push	es ; * (MSDOS 6.21)
 26049 000043C9 E89AC0                  	call	save_world
 26050 000043CC 8CDA                    	MOV	DX,DS
 26051 000043CE 8CD3                    	MOV	BX,SS
 26052 000043D0 8EDB                    	MOV	DS,BX
 26053 000043D2 8EC3                    	MOV	ES,BX
 26054 000043D4 31DB                    	XOR	BX,BX
 26055 000043D6 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26056 000043D9 7503                    	jnz	short _no_sys_wait
 26057                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26058                                  	; 16/12/2022
 26059 000043DB 80CF04                  	or	bh,04h
 26060                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26061                                  				    ; It is up to device driver to carry out
 26062                                  				    ; appropriate action.
 26063                                  _no_sys_wait:
 26064 000043DE 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26065 000043E2 31DB                    	XOR	BX,BX
 26066 000043E4 881E[8903]              	MOV	[IOMED],BL
 26067                                  
 26068 000043E8 88E3                    	MOV	BL,AH		 	; get function
 26069 000043EA 2E8AA7[8D43]            	MOV	AH,[cs:BX+LenTab]
 26070 000043EF D1E3                    	SHL	BX,1
 26071 000043F1 2E8B8F[9343]            	MOV	CX,[cs:BX+CmdTab]
 26072 000043F6 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26073 000043F9 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26074 000043FD 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26075                                  
 26076 00004401 8EDA                    	MOV	DS,DX
 26077 00004403 E86501                  	CALL	DEVIOCALL
 26078 00004406 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26079 0000440B 21FF                    	and	di,di
 26080 0000440D 7834                    	js	short DevErr
 26081                                  OKDevIO:
 26082 0000440F 8CD0                    	MOV	AX,SS
 26083 00004411 8ED8                    	MOV	DS,AX
 26084                                  
 26085                                  	;cmp	ch,5
 26086 00004413 80FD05                  	CMP	CH,DEVRDND
 26087 00004416 7506                    	JNZ	short DNODRD
 26088 00004418 A0[8903]                	MOV	AL,[IORCHR]
 26089 0000441B A2[BC03]                	MOV	[DEVIOBUF],AL
 26090                                  
 26091                                  DNODRD: 
 26092 0000441E 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26093 00004422 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26094                                  	;and	ah,2
 26095 00004424 80E402                  	AND	AH,STBUI>>8
 26096                                  
 26097                                  QuickReturn:				;AN000; 2/13/KK
 26098 00004427 E825C0                  	call	restore_world
 26099 0000442A 07                      	pop	es ; * (MSDOS 6.21)
 26100                                  
 26101                                  	; SR;
 26102                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26103                                  	; IoStatFail = -1 (set after return from the I24)
 26104                                  
 26105                                  	; MSDOS 6.0
 26106 0000442B 9C                      	pushf
 26107 0000442C 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26108 00004430 98                      	cbw				;sign extend to word
 26109 00004431 83F8FF                  	cmp	ax,-1
 26110 00004434 7507                    	jne	short not_fail_ret
 26111 00004436 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26112 0000443B 9D                      	popf
 26113 0000443C C3                      	retn
 26114                                  
 26115                                  not_fail_ret:
 26116 0000443D 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26117 00004441 9D                      	popf
 26118 00004442 C3                      	retn
 26119                                  
 26120                                  DevErr:
 26121 00004443 88CC                    	MOV	AH,CL
 26122 00004445 E87C0D                  	call	CHARHARD
 26123 00004448 3C01                    	CMP	AL,1
 26124 0000444A 7507                    	JNZ	short NO_RETRY
 26125 0000444C E800C0                  	call	restore_world
 26126                                  	; 12/05/2019
 26127 0000444F 07                      	pop	es ; * (MSDOS 6.21)		
 26128 00004450 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26129                                  
 26130                                  NO_RETRY:
 26131                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26132                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26133                                  	; simply wants to ignore the error.
 26134                                  	;
 26135                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26136                                  	; should be checked by the caller on return
 26137                                  
 26138                                  					; SS override
 26139 00004453 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26140                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26141                                  
 26142                                  	; SR;
 26143                                  	; Check if user failed
 26144                                  
 26145                                  	; MSDOS 6.0
 26146 00004459 3C03                    	cmp	al,3
 26147 0000445B 7505                    	jnz	short not_fail
 26148 0000445D 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26149                                  not_fail:
 26150 00004462 EBAB                    	JMP	short OKDevIO
 26151                                  
 26152                                  IOTOFILE:
 26153 00004464 08E4                    	OR	AH,AH
 26154 00004466 7421                    	JZ	short IOIN
 26155 00004468 FECC                    	DEC	AH
 26156 0000446A 7405                    	JZ	short IOIST
 26157 0000446C FECC                    	DEC	AH
 26158 0000446E 7411                    	JZ	short IOUT
 26159                                  IOUT_retn:	; 18/12/2022
 26160 00004470 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26161                                  IOIST:
 26162                                  	;push	word [si+15h]
 26163 00004471 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26164                                  	;push	word [si+17h]
 26165 00004474 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26166 00004477 E80F00                  	CALL	IOIN
 26167                                  	;pop	word [si+17h]
 26168 0000447A 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26169                                  	;pop	word [si+15h]
 26170 0000447D 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26171 00004480 C3                      	retn
 26172                                  IOUT:
 26173 00004481 E82500                  	CALL	SETXADDR
 26174 00004484 E8BEEF                  	call	DOS_WRITE
 26175                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26176                                  	; 18/12/2022
 26177 00004487 EB4F                    	jmp	RESTXADDR
 26178                                  ;IOUT_retn:
 26179                                  	;retn			; come crying to me when things don't
 26180                                  				; work ARR
 26181                                  IOIN:
 26182 00004489 E81D00                  	CALL	SETXADDR
 26183                                  					; SS override for DOS34_FLAG
 26184                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26185                                  	;or	word [ss:DOS34_FLAG],40h
 26186                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26187                                  	; 16/12/2022
 26188 0000448C 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26189 00004492 E8AFED                  	CALL	DOS_READ
 26190                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26191                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26192                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26193                                  	; 16/12/2022
 26194 00004495 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26195 0000449B 09C9                    	OR	CX,CX			; Check EOF
 26196 0000449D E83800                  	CALL	RESTXADDR
 26197                                  					; SS override
 26198 000044A0 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26199 000044A4 75CA                    	jnz	short IOUT_retn	
 26200 000044A6 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26201 000044A8 C3                      	retn
 26202                                  
 26203                                  SETXADDR:
 26204                                  					; SS override
 26205 000044A9 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26206                                  
 26207 000044AE 06                      	push	es ; * (MSDOS 6.21)
 26208                                  
 26209 000044AF E8B4BF                  	call	save_world
 26210                                  					; SS override for DMAADD and THISSFT
 26211                                  	; 24/09/2023
 26212                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26213                                  	;PUSH	WORD [SS:DMAADD+2]
 26214 000044B2 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26215                                  
 26216                                  ; 22/02/2024
 26217                                  %if 0
 26218                                  	push	ss
 26219                                  	pop	ds
 26220                                  
 26221                                  	; 24/09/2023
 26222                                  	push	word [DMAADD]
 26223                                  	push	word [DMAADD+2]
 26224                                  
 26225                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26226                                  	MOV	CX,[IOXAD+2]
 26227                                  	MOV	[DMAADD+2],CX
 26228                                  	MOV	CX,[IOXAD]
 26229                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26230                                  %else
 26231                                  	; 22/02/2024 - Retro DOS v4.1
 26232                                  	; PCDOS 7.1 IBMDOS.COM
 26233                                  	
 26234 000044B7 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26235 000044BC 51                      	push	cx
 26236 000044BD 1E                      	push	ds
 26237 000044BE 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26238 000044C3 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26239 000044C8 16                      	push	ss
 26240 000044C9 1F                      	pop	ds
 26241 000044CA 890E[2C03]              	mov	[DMAADD],cx
 26242 000044CE 8936[9E05]              	mov	[THISSFT],si
 26243                                  %endif
 26244 000044D2 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26245 000044D6 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26246                                  
 26247                                  RESTXADDR:
 26248 000044D8 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26249 000044DC 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26250 000044E0 8F06[2C03]              	POP	WORD [DMAADD]
 26251                                  
 26252 000044E4 E868BF                  	call	restore_world
 26253                                  
 26254 000044E7 07                      	pop	es ; * (MSDOS 6.21)
 26255                                  					; SS override
 26256                                  RESTRET:
 26257 000044E8 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26258                                  
 26259                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26260                                  ; 21/11/2022
 26261                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26262                                  
 26263                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26264                                  
 26265                                  ;----------------------------------------------------------------------------
 26266                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26267                                  ;
 26268                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26269                                  ;	the SFT.
 26270                                  ;
 26271                                  ;	ENTRY	(ES:DI) = SFT
 26272                                  ;	EXIT	none
 26273                                  ;	USES	all
 26274                                  ;----------------------------------------------------------------------------
 26275                                  
 26276                                  DEV_OPEN_SFT:
 26277 000044ED 06                      	push	es ; * (MSDOS 6.21)
 26278 000044EE E875BF                  	call	save_world
 26279                                  	;mov	al,0Dh	
 26280 000044F1 B00D                    	MOV	AL,DEVOPN
 26281 000044F3 EB06                    	JMP	SHORT DO_OPCLS
 26282                                  
 26283                                  ;----------------------------------------------------------------------------
 26284                                  ; Procedure Name : DEV_CLOSE_SFT
 26285                                  ;
 26286                                  ; Inputs:
 26287                                  ;	ES:DI Points to SFT
 26288                                  ; Function:
 26289                                  ;	Issue a CLOSE call to the correct device
 26290                                  ; Outputs:
 26291                                  ;	None
 26292                                  ; ALL preserved
 26293                                  ;----------------------------------------------------------------------------
 26294                                  
 26295                                  DEV_CLOSE_SFT:
 26296 000044F5 06                      	push	es ; * (MSDOS 6.21)
 26297 000044F6 E86DBF                  	call	save_world
 26298                                  	;mov	al,0Eh	
 26299 000044F9 B00E                    	MOV	AL,DEVCLS
 26300                                  
 26301                                  	; Main entry for device open and close. AL contains the function 
 26302                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26303                                  	; open/close to block devices. This allows networks to function but 
 26304                                  	; does NOT hang up with bogus change-line code.
 26305                                  
 26306                                  	;entry	DO_OPCLS
 26307                                  DO_OPCLS:
 26308                                  	; Is the SFT for the net? If so, no action necessary.
 26309                                  
 26310                                  	; MSDOS 6.0
 26311                                  	;test	word [es:di+5],8000h
 26312                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26313 000044FB 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26314 00004500 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26315 00004502 30E4                    	XOR	AH,AH			; Unit
 26316                                  	;test	byte [es:di+5],80h
 26317 00004504 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26318                                  	;les	di,[es:di+7]
 26319 00004509 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26320 0000450D 7511                    	JNZ	short GOT_DEV_ADDR
 26321                                  
 26322                                  	; We are about to call device open/close on a block driver. If no 
 26323                                  	; sharing then just short circuit to done.
 26324                                  	
 26325                                  	; MSDOS 6.0
 26326                                  					; SS override
 26327 0000450F 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26328 00004515 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26329                                  
 26330                                  ; 22/02/2024
 26331                                  %if 0
 26332                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26333                                  	;mov	ah,[es:di+1]
 26334                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26335                                  	mov	cl,[es:di]
 26336                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26337                                  %else
 26338                                  	; 22/02/2024 - Retro DOS v4.1
 26339                                  	; (PCDOS 7.1 IBMDOS.COM)
 26340                                  	;mov	cx,[es:di+DPB.DRIVE]
 26341 00004517 268B0D                  	mov	cx,[es:di]
 26342 0000451A 88EC                    	mov	ah,ch			; AH = unit
 26343                                  					; CL = drive
 26344                                  %endif
 26345                                  
 26346                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26347                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26348 0000451C 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26349                                  GOT_DEV_ADDR:				; ES:DI -> device
 26350                                  	;test	word [es:di+4],800h
 26351                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26352 00004520 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26353 00004525 743F                    	JZ	short OPCLS_DONE	; Device can't
 26354 00004527 06                      	PUSH	ES
 26355 00004528 1F                      	POP	DS
 26356 00004529 89FE                    	MOV	SI,DI			; DS:SI -> device
 26357                                  
 26358                                  OPCLS_RETRY:
 26359                                  	;Context ES
 26360 0000452B 16                      	push	ss
 26361 0000452C 07                      	pop	es
 26362                                  					; DEVCALL is in DOSDATA
 26363 0000452D BF[5A03]                	MOV	DI,DEVCALL
 26364                                  
 26365 00004530 89FB                    	MOV	BX,DI
 26366 00004532 50                      	PUSH	AX
 26367                                  	;mov	al,13
 26368 00004533 B00D                    	MOV	AL,DOPCLHL
 26369 00004535 AA                      	STOSB				; Length
 26370 00004536 58                      	POP	AX
 26371                                  
 26372 00004537 86E0                    	XCHG	AH,AL
 26373                                  	;STOSB				; Unit
 26374                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26375 00004539 AB                      	stosw				; Unit, Command
 26376 0000453A 86E0                    	XCHG	AH,AL
 26377                                  	;STOSB				; Command
 26378                                  
 26379 0000453C 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26380 00004541 50                      	PUSH	AX			; Save Unit,Command
 26381                                  	;invoke	DEVIOCALL2
 26382 00004542 E82900                  	call	DEVIOCALL2
 26383                                  
 26384                                  	;mov	di,[es:bx+3]
 26385 00004545 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26386                                  	;test	di,8000h
 26387                                  	;jz	short OPCLS_DONEP	
 26388 00004549 21FF                    	and	di,di
 26389 0000454B 7918                    	jns	short OPCLS_DONEP	; No error
 26390                                  	; 21/11/2022
 26391                                  	;test	word [si+4],8000h
 26392                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26393                                  	;test	word [si+5],80h
 26394 0000454D F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26395 00004551 7404                    	JZ	short BLKDEV
 26396 00004553 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26397 00004555 EB04                    	JMP	SHORT HRDERR
 26398                                  BLKDEV:
 26399 00004557 88C8                    	MOV	AL,CL			; Drive # in AL
 26400 00004559 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26401                                  HRDERR:
 26402                                  	;invoke	CHARHARD
 26403 0000455B E8660C                  	call	CHARHARD
 26404 0000455E 3C01                    	cmp	al,1
 26405 00004560 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26406                                  					;  Note that FAIL is essentually IGNORED
 26407 00004562 58                      	POP	AX			; Get back Unit, Command
 26408 00004563 EBC6                    	JMP	short OPCLS_RETRY
 26409                                  OPCLS_DONEP:
 26410 00004565 58                      	POP	AX			; Clean stack
 26411                                  OPCLS_DONE:
 26412 00004566 E8E6BE                  	call	restore_world
 26413 00004569 07                      	pop	es ; * (MSDOS 6.21)
 26414 0000456A C3                      	retn
 26415                                  
 26416                                  ; 30/04/2019 - Retro DOS v4.0
 26417                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26418                                  
 26419                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26420                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26421                                  
 26422                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26423                                  ;----------------------------------------------------------------------------
 26424                                  ;**	DevIoCall  - Call Device
 26425                                  ;
 26426                                  ;	ENTRY	DS:SI Points to device SFT
 26427                                  ;		ES:BX Points to request data
 26428                                  ;	EXIT	DS:SI -> Device driver
 26429                                  ;	USES	DS:SI,AX
 26430                                  ;----------------------------------------------------------------------------
 26431                                  ;**	DevIoCall2 - Call Device
 26432                                  ;
 26433                                  ;	ENTRY	DS:SI Points to DPB
 26434                                  ;		ES:BX Points to request data
 26435                                  ;	EXIT	DS:SI -> Device driver
 26436                                  ;	USES	DS:SI,AX
 26437                                  ;----------------------------------------------------------------------------
 26438                                  
 26439                                  DEVIOCALL:
 26440                                  					; SS override for CALLSSEC, 
 26441                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26442 0000456B C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26443                                  
 26444                                  	;entry	DEVIOCALL2
 26445                                  DEVIOCALL2:
 26446                                  	;EnterCrit critDevice
 26447 0000456E E8BCCD                  	call	ECritDevice
 26448                                  
 26449                                  	; MSDOS 6.0
 26450                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26451                                  	;test	byte [si+5],80h
 26452 00004571 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26453 00004575 7545                    	jnz	short chardev2		;AN000; >32mb no
 26454                                  
 26455                                  	; 16/12/2022
 26456                                  	; 22/11/2022
 26457 00004577 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26458 0000457B 3C04                    	cmp	al,DEVRD	; 4
 26459 0000457D 7408                    	je	short chkext	
 26460 0000457F 3C08                    	cmp	al,DEVWRT	; 8
 26461 00004581 7404                    	je	short chkext
 26462 00004583 3C09                    	cmp	al,DEVWRTV	; 9
 26463 00004585 7535                    	jne	short chardev2
 26464                                  
 26465                                  	; 16/12/2022
 26466                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26467                                  	;;cmp	byte [es:bx+2],4
 26468                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26469                                  	;JZ	short chkext		;AN000; >32mb   yes
 26470                                  	;;cmp	byte [es:bx+2],8
 26471                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26472                                  	;JZ	short chkext		;AN000; >32mb   yes
 26473                                  	;;cmp	byte [es:bx+2],9
 26474                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26475                                  	;				;AN000; >32mb write/verify ?
 26476                                  	;JNZ	short chardev2		;AN000; >32mb no
 26477                                  chkext:
 26478 00004587 E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26479 0000458A 7252                    	JC	short dev_exit		;AN000;LB. done
 26480                                  
 26481                                  	;test	byte [si+4],2
 26482 0000458C F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26483 00004590 741A                    	JZ	short chksector		;AN000;>32mb   no
 26484 00004592 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26485                                  
 26486                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26487                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26488                                  	; 22/02/2024
 26489 00004596 B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26490 00004599 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26491                                  
 26492 0000459E 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26493 000045A2 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26494 000045A6 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26495 000045AA EB10                    	JMP	short chardev2		;AN000; >32mb
 26496                                  chksector:				;AN000; >32mb
 26497 000045AC 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26498 000045B2 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26499                                  	;mov	word [es:bx+3],8107h
 26500 000045B4 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26501                                  					;AN000; >32mb
 26502 000045BA EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26503                                  
 26504                                  chardev2:				;AN000;
 26505                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26506                                  	; preserved
 26507                                  
 26508                                  	;mov	ax,[si+6]
 26509 000045BC 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26510 000045BF 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26511 000045C3 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26512 000045C8 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26513                                  
 26514                                  	;mov	ax,[si+8]
 26515 000045CD 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26516 000045D0 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26517 000045D4 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26518                                  
 26519                                  	; MSDOS 6.0
 26520 000045D9 E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26521 000045DC 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26522                                  
 26523                                  dev_exit:
 26524                                  	;LeaveCrit critDevice
 26525                                  	;call	LCritDevice
 26526                                  	;retn
 26527                                  	; 18/12/2022
 26528 000045DE E967CD                  	jmp	LCritDevice
 26529                                  
 26530                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26531                                  ; 22/11/2022
 26532                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26533                                  
 26534                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26535                                  ;---------------------------------------------------------------------------
 26536                                  ;
 26537                                  ; Procedure Name : SETREAD, SETWRITE
 26538                                  ;
 26539                                  ; Inputs:
 26540                                  ;	DS:BX = Transfer Address
 26541                                  ;	CX = Record Count
 26542                                  ;	DX = Starting Record
 26543                                  ;	AH = Media Byte
 26544                                  ;	AL = Unit Code
 26545                                  ; Function:
 26546                                  ;	Set up the device call header at DEVCALL
 26547                                  ; Output:
 26548                                  ;	ES:BX Points to DEVCALL
 26549                                  ; No other registers effected
 26550                                  ;
 26551                                  ;---------------------------------------------------------------------------
 26552                                  
 26553                                  SETREAD_XJ:
 26554                                  	;;;
 26555                                  	; 07/02/2024 - Retro DOS v4.1
 26556 000045E1 89FB                    	mov	bx,di
 26557 000045E3 EB07                    	jmp	short SETREAD_X
 26558                                  	;;;
 26559                                  
 26560                                  SETREAD_XT:
 26561                                  	;;;
 26562                                  	; 07/02/2024 - Retro DOS v4.1
 26563 000045E5 BB[B603]                	mov	bx,TIMEBUF
 26564 000045E8 53                      	push	bx
 26565                                  SETREAD_XTC:
 26566 000045E9 B90600                  	mov	cx,6
 26567                                  	;;;
 26568                                  SETREAD_X:
 26569                                  	;;;
 26570                                  	; 06/02/2024 - Retro DOS v4.1
 26571 000045EC 31C0                    	xor	ax,ax
 26572                                  	;mov	dx,ax ; 0
 26573 000045EE 99                      	cwd
 26574                                  	;;;
 26575                                  
 26576                                  ; ------------------------------------
 26577                                  
 26578                                  SETREAD:
 26579 000045EF 57                      	PUSH	DI
 26580 000045F0 51                      	PUSH	CX
 26581 000045F1 50                      	PUSH	AX
 26582 000045F2 B104                    	MOV	CL,DEVRD ; mov cl,4
 26583                                  SETCALLHEAD:
 26584 000045F4 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26585 000045F6 16                      	PUSH	SS
 26586 000045F7 07                      	POP	ES
 26587                                  					; DEVCALL is in DOSDATA
 26588 000045F8 BF[5A03]                	MOV	DI,DEVCALL
 26589                                  
 26590 000045FB AA                      	STOSB				; length
 26591 000045FC 58                      	POP	AX			; 
 26592 000045FD AA                      	STOSB				; Unit
 26593 000045FE 50                      	PUSH	AX
 26594 000045FF 88C8                    	MOV	AL,CL
 26595 00004601 AA                      	STOSB				; Command code
 26596 00004602 31C0                    	XOR	AX,AX
 26597 00004604 AB                      	STOSW				; Status
 26598 00004605 83C708                  	ADD	DI,8			; Skip link fields
 26599 00004608 58                      	POP	AX
 26600 00004609 86E0                    	XCHG	AH,AL
 26601 0000460B AA                      	STOSB				; Media byte
 26602 0000460C 86C4                    	XCHG	AL,AH
 26603 0000460E 50                      	PUSH	AX
 26604 0000460F 89D8                    	MOV	AX,BX
 26605 00004611 AB                      	STOSW
 26606                                  
 26607 00004612 8CD8                    	MOV	AX,DS
 26608 00004614 AB                      	STOSW				; Transfer addr
 26609                                  
 26610 00004615 59                      	POP	CX			; Real AX
 26611 00004616 58                      	POP	AX			; Real CX
 26612 00004617 AB                      	STOSW				; Count
 26613                                  
 26614 00004618 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26615 00004619 AB                      	STOSW				; Start
 26616 0000461A 91                      	XCHG	AX,CX
 26617 0000461B 87D1                    	XCHG	DX,CX
 26618 0000461D 5F                      	POP	DI
 26619                                  					; DEVCALL is in DOSDATA
 26620 0000461E BB[5A03]                	MOV	BX,DEVCALL
 26621 00004621 C3                      	retn
 26622                                  
 26623                                  	;entry	SETWRITE
 26624                                  SETWRITE:
 26625                                  
 26626                                  ; Inputs:
 26627                                  ;	DS:BX = Transfer Address
 26628                                  ;	CX = Record Count
 26629                                  ;	DX = Starting Record
 26630                                  ;	AH = Media Byte
 26631                                  ;	AL = Unit Code
 26632                                  ; Function:
 26633                                  ;	Set up the device call header at DEVCALL
 26634                                  ; Output:
 26635                                  ;	ES:BX Points to DEVCALL
 26636                                  ; No other registers effected
 26637                                  
 26638 00004622 57                      	PUSH	DI
 26639 00004623 51                      	PUSH	CX
 26640 00004624 50                      	PUSH	AX
 26641 00004625 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26642 00004627 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26643 0000462C EBC6                    	JMP	SHORT SETCALLHEAD
 26644                                  
 26645                                  ; 30/04/2019 - Retro DOS v4.0
 26646                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26647                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26648                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26649                                  
 26650                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26651                                  ;---------------------------------------------------------------------------
 26652                                  ;
 26653                                  ; Procedure Name : RW_SC
 26654                                  ;
 26655                                  ; Inputs:
 26656                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26657                                  ;	 [SC_STATUS]= SC validity status
 26658                                  ;	 [SEQ_SECTOR]= last sector read
 26659                                  ; Function:
 26660                                  ;	Read from or write through secondary cache
 26661                                  ; Output:
 26662                                  ;	ES:BX Points to DEVCALL
 26663                                  ;	carry clear, I/O is not done
 26664                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26665                                  ;	carry set, I/O is done
 26666                                  ;
 26667                                  ;----------------------------------------------------------------------------
 26668                                  
 26669                                  RW_SC:
 26670                                  	; SS override for all variables used.
 26671                                  	
 26672 0000462E 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26673 00004634 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26674 00004636 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26675 0000463C 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26676 0000463E 51                      	PUSH	CX			    ;AN000;LB.
 26677 0000463F 52                      	PUSH	DX			    ;AN000;LB. yes
 26678 00004640 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26679 00004641 56                      	PUSH	SI			    ;AN000;LB.
 26680 00004642 06                      	PUSH	ES			    ;AN000;LB.
 26681 00004643 57                      	PUSH	DI			    ;AN000;LB.
 26682                                  
 26683 00004644 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26684 00004649 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26685 0000464F 7408                    	JZ	short doread		    ;AN000;LB. yes
 26686 00004651 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26687 00004654 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26688                                  scexit4:				    ;AN000;
 26689 00004657 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26690 00004658 C3                      	retn				    ;AN000;LB.
 26691                                  doread: 				    ;AN000;
 26692 00004659 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26693 0000465C 720A                    	JC	short readSC		    ;AN000;LB.
 26694 0000465E 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26695 00004665 F9                      	STC				    ;AN000;LB. set carry
 26696 00004666 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26697                                  readSC: 				    ;AN000;
 26698 00004668 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26699 0000466C 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26700 00004671 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26701 00004676 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26702                                  	; 24/09/2023
 26703                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26704 0000467B 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26705                                  chklow: 						
 26706 0000467D 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26707 00004680 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26708 00004682 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26709 00004689 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26710 0000468D 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26711                                  readsr:
 26712 00004691 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26713 00004695 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26714 00004699 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26715 0000469D 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26716                                  
 26717 000046A1 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26718 000046A5 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26719 000046A9 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26720 000046AD 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26721 000046B1 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26722 000046B7 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26723 000046BB 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26724 000046BF 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26725 000046C3 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26726 000046C7 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26727 000046CB 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26728                                  saveseq2:				    ;AN000;
 26729 000046CF F8                      	CLC				    ;AN000;LB. clear carry
 26730                                  saveseq:				    ;AN000;	
 26731 000046D0 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26732 000046D4 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26733 000046D8 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26734 000046DC 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26735 000046E0 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26736                                  scexit2:				    ;AN000;LB.
 26737 000046E2 F8                      	CLC				    ;AN000;LB.	clear carry
 26738                                  scexit: 				    ;AN000;		
 26739 000046E3 5F                      	POP	DI			    ;AN000;LB.
 26740 000046E4 07                      	POP	ES			    ;AN000;LB. restore registers
 26741 000046E5 5E                      	POP	SI			    ;AN000;LB.
 26742 000046E6 1F                      	POP	DS			    ;AN000;LB.
 26743 000046E7 5A                      	POP	DX			    ;AN000;LB.
 26744 000046E8 59                      	POP	CX			    ;AN000;LB.
 26745 000046E9 C3                      	retn				    ;AN000;LB.
 26746                                  
 26747                                  ;Break	<IN_SC -- check if in secondary cache>
 26748                                  ;--------------------------------------------------------------------------
 26749                                  ;
 26750                                  ; Procedure Name : IN_SC
 26751                                  ;
 26752                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26753                                  ;	   [CURSC_DRIVE]= current SC drive
 26754                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26755                                  ;	   [SC_CACHE_COUNT]= SC count
 26756                                  ;	   [HIGH_SECTOR]:DX= sector number
 26757                                  ; Function:
 26758                                  ;	Check if the sector is in secondary cache
 26759                                  ; Output:
 26760                                  ;	carry clear, in SC
 26761                                  ;	   CX= the index in the secondary cache
 26762                                  ;	carry set, not in SC
 26763                                  ;
 26764                                  ;---------------------------------------------------------------------------
 26765                                  
 26766                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26767                                  IN_SC:
 26768                                  	; SS override for all variables used
 26769 000046EA 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26770 000046EE 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26771 000046F3 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26772 000046F5 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26773 000046F9 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26774 000046FB 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26775 00004700 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26776                                  	; 24/09/2023
 26777                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26778 00004705 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26779 00004707 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26780 0000470C 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26781 0000470E F8                      	CLC				    ;AN000;;LB. clear carry
 26782                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26783                                  	; 16/12/2022
 26784 0000470F C3                      	retn	; 30/04/2019
 26785                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26786                                  	;jmp	short inexit
 26787                                  
 26788                                  outrange2:				    ;AN000;;LB. set carry
 26789 00004710 F9                      	STC				    ;AN000;;LB.
 26790                                  inexit: 				    ;AN000;;LB.
 26791 00004711 C3                      	retn				    ;AN000;;LB.
 26792                                  
 26793                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26794                                  ;---------------------------------------------------------------------------
 26795                                  ;
 26796                                  ; Procedure Name : Invalidate_Sc
 26797                                  ;
 26798                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26799                                  ;	   [CURSC_DRIVE]= current SC drive
 26800                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26801                                  ;	   [SC_CACHE_COUNT]= SC count
 26802                                  ;	   [SC_STATUS]= SC status word
 26803                                  ;	   [HIGH_SECTOR]:DX= sector number
 26804                                  ;
 26805                                  ; Function:
 26806                                  ;	invalidate secondary cache if in there
 26807                                  ; Output:
 26808                                  ;	[SC_STATUS] is updated
 26809                                  ;---------------------------------------------------------------------------
 26810                                  
 26811                                  INVALIDATE_SC:
 26812                                  	; SS override for all variables used
 26813                                  
 26814 00004712 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26815 00004715 720C                    	JC	short outrange		    ;AN000;;LB. no
 26816 00004717 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26817 0000471A D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26818 0000471C F7D0                    	NOT	AX			    ;AN000;;LB.
 26819 0000471E 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26820                                  outrange:				    ;AN000;;LB.
 26821 00004723 C3                      	retn				    ;AN000;;LB.
 26822                                  
 26823                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26824                                  ; 22/11/2022
 26825                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26826                                  
 26827                                  ;Break	<VIRREAD- virtually read data into buffer>
 26828                                  ;--------------------------------------------------------------------------
 26829                                  ;
 26830                                  ; Procedure Name : SC_FLAG
 26831                                  ;
 26832                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26833                                  ;		     1, continuous sectors were read into SC
 26834                                  ; Function:
 26835                                  ;	   Move data from SC to buffer
 26836                                  ; Output:
 26837                                  ;	 carry clear, data is moved to buffer
 26838                                  ;	 carry set, bad sector or exceeds maximum sector
 26839                                  ;	   SC_FLAG =0
 26840                                  ;	   CALLSCNT=1
 26841                                  ;	   SC_STATUS= -1 if succeeded
 26842                                  ;     
 26843                                  ;		       0 if failed
 26844                                  ;--------------------------------------------------------------------------
 26845                                  
 26846                                  VIRREAD:
 26847                                  	; SS override for all variables used
 26848                                  
 26849 00004724 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26850 0000472A 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26851 0000472C 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26852 00004730 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26853 00004734 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26854 00004738 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26855 0000473C 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26856 00004742 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26857                                  
 26858                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26859 00004749 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26860 0000474F 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26861 00004751 1E                      	PUSH	DS			    ;AN000;;LB.
 26862 00004752 56                      	PUSH	SI			    ;AN000;;LB.
 26863 00004753 06                      	PUSH	ES			    ;AN000;;LB.
 26864 00004754 57                      	PUSH	DI			    ;AN000;;LB.
 26865 00004755 52                      	PUSH	DX			    ;AN000;;LB.
 26866 00004756 51                      	PUSH	CX			    ;AN000;;LB.
 26867 00004757 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26868 00004759 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26869 0000475C 59                      	POP	CX
 26870 0000475D 5A                      	POP	DX			    ;AN000;;LB.
 26871 0000475E 5F                      	POP	DI			    ;AN000;;LB.
 26872 0000475F 07                      	POP	ES			    ;AN000;;LB.
 26873 00004760 5E                      	POP	SI			    ;AN000;;LB.
 26874 00004761 1F                      	POP	DS			    ;AN000;;LB.
 26875 00004762 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26876                                  scerror:				    ;AN000;
 26877 00004764 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26878 0000476B 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26879 00004772 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26880 00004778 F9                      	STC				    ;AN000;;LB. carry set
 26881 00004779 C3                      	retn				    ;AN000;;LB.
 26882                                  sc2end: 				    ;AN000;
 26883 0000477A F8                      	CLC				    ;AN000;;LB. carry clear
 26884 0000477B C3                      	retn				    ;AN000;;LB.
 26885                                  
 26886                                  ; 30/04/2019 - Retro  DOS v4.0
 26887                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26888                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26889                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26890                                  
 26891                                  ;Break	<SC2BUF- move data from SC to buffer>
 26892                                  ;----------------------------------------------------------------------------
 26893                                  ;
 26894                                  ; Procedure Name : SC2BUF
 26895                                  ;
 26896                                  ; Inputs:  [SC_STATUS] = SC validity status
 26897                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26898                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26899                                  ; Function:
 26900                                  ;	   Move data from SC to buffer
 26901                                  ; Output:
 26902                                  ;	   carry clear, in SC  and data is moved
 26903                                  ;	   carry set, not in SC and data is not moved
 26904                                  ;---------------------------------------------------------------------------
 26905                                  
 26906                                  SC2BUF:
 26907                                  	; SS override for all variables used
 26908 0000477C E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26909                                  	;JC	short noSC		    ;AN000;LB. no
 26910                                  	; 24/09/2023
 26911 0000477F 723D                    	jc	short sexit
 26912 00004781 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26913 00004784 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26914 00004786 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26915 0000478B 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26916                                  ;entry SC2BUF2
 26917                                  SC2BUF2:				    ;AN000;
 26918                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26919                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26920                                  	; 24/09/2023
 26921 0000478D 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26922 00004791 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26923 00004792 F7E1                    	mul	cx
 26924 00004794 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26925 00004799 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26926 0000479E 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26927 000047A0 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26928 000047A2 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26929 000047A7 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26930                                  	; 24/09/2023
 26931                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26932 000047AC D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26933                                  ;entry MOVWORDS
 26934                                  MOVWORDS:				    ;AN000;
 26935 000047AE 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26936 000047B4 7403                    	JZ	short nodd		    ;AN000;LB. no
 26937 000047B6 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26938 000047B8 66                      	DB	66H			    ;AN000;LB. use double word move
 26939                                  nodd:
 26940 000047B9 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26941 000047BB F8                      	CLC				    ;AN000;LB. clear carry
 26942 000047BC C3                      	retn				    ;AN000;LB. exit
 26943                                  noSC:					    ;AN000;
 26944 000047BD F9                      	STC				    ;AN000;LB. set carry
 26945                                  sexit:					    ;AN000;
 26946 000047BE C3                      	retn				    ;AN000;LB.
 26947                                  
 26948                                  ;============================================================================
 26949                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26950                                  ;============================================================================
 26951                                  ; 29/07/2018 - Retro DOS v3.0
 26952                                  ; 19/05/2019 - Retro DOS v4.0
 26953                                  
 26954                                  ;	TITLE	MKNODE - Node maker
 26955                                  ;	NAME	MKNODE
 26956                                  
 26957                                  ;**	MKNODE.ASM
 26958                                  ;----------------------------------------------------------------------------
 26959                                  ;	Low level routines for making a new local file system node
 26960                                  ;	and filling in an SFT from a directory entry
 26961                                  ;
 26962                                  ;	BUILDDIR
 26963                                  ;	SETDOTENT
 26964                                  ;	MakeNode
 26965                                  ;	NEWENTRY
 26966                                  ;	FREEENT
 26967                                  ;	NEWDIR
 26968                                  ;	DOOPEN
 26969                                  ;	RENAME_MAKE
 26970                                  ;	CHECK_VIRT_OPEN
 26971                                  ;
 26972                                  ;	Revision history:
 26973                                  ;
 26974                                  ;	 AN000	version 4.0  Jan. 1988
 26975                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26976                                  
 26977                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26978                                  ;----------------------------------------------------------------------------
 26979                                  ;
 26980                                  ; Procedure Name : BUILDDIR,NEWDIR
 26981                                  ;
 26982                                  ; Inputs:
 26983                                  ;       ES:BP Points to DPB
 26984                                  ;       [THISSFT] Set if using NEWDIR entry point
 26985                                  ;               (used by ALLOCATE)
 26986                                  ;       [LASTENT] current last valid entry number in directory if no free
 26987                                  ;               entries
 26988                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26989                                  ; Function:
 26990                                  ;       Grow directory if no free entries and not root
 26991                                  ; Outputs:
 26992                                  ;       CARRY SET IF FAILURE
 26993                                  ;       ELSE
 26994                                  ;          AX entry number of new entry
 26995                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26996                                  ;               AX = first entry of new dir
 26997                                  ;       GETENT should be called to set [LASTENT]
 26998                                  ;
 26999                                  ;----------------------------------------------------------------------------
 27000                                  
 27001                                  ; 19/05/2019 - Retro DOS v4.0
 27002                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27003                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27004                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27005                                  
 27006                                  BUILDDIR:
 27007                                  	; 29/07/2018 - Retro DOS v3.0
 27008                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27009                                  
 27010 000047BF A1[D805]                        MOV     AX,[ENTFREE]
 27011 000047C2 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27012                                  	;JZ	short CHECK_IF_ROOT
 27013                                          ;CLC
 27014                                          ;retn
 27015                                  	; 24/09/2023
 27016 000047C5 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27017                                  
 27018                                  CHECK_IF_ROOT:
 27019 000047C7 833E[C205]00                    CMP     word [DIRSTART],0
 27020 000047CC 7502                            JNZ	short NEWDIR
 27021                                          ;STC
 27022                                  	; 24/09/2023
 27023                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27024                                  builddir_cmc_retn:
 27025                                  	; 24/09/2023
 27026 000047CE F5                      	cmc	; cf=1 <-> cf=0
 27027                                  builddir_retn:
 27028 000047CF C3                              retn				; Can't grow root
 27029                                  
 27030                                  	;entry   NEWDIR
 27031                                  NEWDIR: 
 27032 000047D0 8B1E[C205]              	MOV     BX,[DIRSTART]
 27033 000047D4 09DB                            OR      BX,BX
 27034 000047D6 7405                            JZ	short NULLDIR
 27035 000047D8 E81B06                  	call	GETEOF
 27036 000047DB 72F2                            jc	short builddir_retn	; Screw up
 27037                                  NULLDIR:
 27038 000047DD B90100                          MOV     CX,1
 27039 000047E0 E82C05                  	call	ALLOCATE
 27040 000047E3 72EA                            jc	short builddir_retn
 27041 000047E5 8B16[C205]                      MOV     DX,[DIRSTART]
 27042 000047E9 09D2                            OR      DX,DX
 27043 000047EB 750D                            JNZ	short ADDINGDIR
 27044 000047ED E8EDF5                  	call	SETDIRSRCH
 27045 000047F0 72DD                            jc	short builddir_retn
 27046 000047F2 C706[4803]FFFF                  MOV     word [LASTENT],-1
 27047 000047F8 EB29                            JMP     SHORT GOTDIRREC
 27048                                  ADDINGDIR:
 27049 000047FA 53                              PUSH    BX
 27050 000047FB 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27051 000047FF E8140C                          call	IsEOF
 27052 00004802 5B                              POP     BX
 27053 00004803 7217                            JB	short NOTFIRSTGROW
 27054                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27055 00004805 891E[BC05]                      MOV     [CLUSNUM],BX
 27056                                  	; 24/09/2023
 27057                                  	;PUSH	CX ; (not necessary)
 27058 00004809 50                      	PUSH	AX
 27059 0000480A 55                      	PUSH	BP
 27060 0000480B B401                            MOV     AH,1			; CLUSNUM update
 27061                                  	; 15/12/2022
 27062 0000480D 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27063                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27064                                  	;;mov	dl,[es:bp+0]
 27065                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27066 00004811 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27067 00004815 89DD                            MOV     BP,BX 			; CLUSNUM
 27068 00004817 E86BDE                  	call	FastOpen_Update
 27069 0000481A 5D                              POP     BP
 27070 0000481B 58                              POP     AX
 27071                                  	; 24/09/2023
 27072                                          ;POP	CX
 27073                                  
 27074                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27075                                  NOTFIRSTGROW:
 27076 0000481C 89DA                            MOV     DX,BX
 27077 0000481E 30DB                            XOR     BL,BL
 27078 00004820 E8C804                  	call	FIGREC
 27079                                  GOTDIRREC:
 27080                                  	;mov	cl,[es:bp+4]
 27081 00004823 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27082 00004827 FEC1                            INC     CL
 27083 00004829 30ED                            XOR     CH,CH
 27084                                  ZERODIR:
 27085 0000482B 51                              PUSH    CX
 27086                                  	; 22/09/2023
 27087                                  	;;mov	byte [ALLOWED],18h
 27088                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27089 0000482C B0FF                            MOV     AL,0FFH
 27090                                          ;call	GETBUFFR
 27091 0000482E E80910                          call	GETBUFFRD ; *
 27092 00004831 7302                    	JNC	short GET_SSIZE
 27093 00004833 59                              POP     CX
 27094 00004834 C3                              retn
 27095                                  
 27096                                  GET_SSIZE:
 27097                                  	;mov	cx,[es:bp+2]
 27098 00004835 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27099 00004839 06                              PUSH    ES
 27100 0000483A C43E[E205]                      LES     DI,[CURBUF]
 27101                                  	;or	byte [es:di+5],4
 27102 0000483E 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27103 00004843 57                              PUSH    DI
 27104                                  	;;add	di,16	; MSDOS 3.3
 27105                                  	;add	di,20	; MSDOS 6.0	
 27106 00004844 83C714                          ADD     DI,BUFINSIZ
 27107 00004847 31C0                            XOR     AX,AX
 27108 00004849 D1E9                            SHR     CX,1
 27109 0000484B F3AB                            REP     STOSW
 27110 0000484D 7301                            JNC	short EVENZ
 27111 0000484F AA                              STOSB
 27112                                  EVENZ:
 27113 00004850 5F                              POP     DI
 27114                                  
 27115                                  	; MSDOS 6.0
 27116 00004851 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27117                                  					;LB. if already dirty		  ;AN000;
 27118 00004856 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27119 00004858 E8E611                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27120                                          
 27121                                  	;or	byte [es:di+5],40h
 27122 0000485B 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27123                                  yesdirty7:
 27124 00004860 07                              POP	ES
 27125 00004861 59                              POP	CX
 27126                                  
 27127                                  	; 19/05/2019 - Retro DOS v4.0
 27128                                  
 27129                                  	; MSDOS 3.3
 27130                                  	;INC	DX
 27131                                  
 27132                                  	; MSDOS 6.0
 27133                                  	; 24/09/2023
 27134                                  	;add	dx,1
 27135                                  	;;adc	word [HIGH_SECTOR],0
 27136                                  	;; 24/09/2023
 27137                                  	;; ax=0
 27138                                  	;adc	[HIGH_SECTOR],ax ; 0
 27139                                  	; 24/09/2023
 27140 00004862 42                      	inc	dx
 27141 00004863 7504                    	jnz	short loop_zerodir
 27142 00004865 FF06[0706]              	inc	word [HIGH_SECTOR]
 27143                                  loop_zerodir:
 27144 00004869 E2C0                            LOOP    ZERODIR
 27145                                  
 27146 0000486B A1[4803]                        MOV     AX,[LASTENT]
 27147 0000486E 40                              INC     AX
 27148                                  	; 24/09/2023
 27149                                  	; cf=0
 27150                                  	;CLC
 27151 0000486F C3                              retn
 27152                                  
 27153                                  ;--------------------------------------------------------------------------
 27154                                  ;
 27155                                  ; Procedure Name : SETDOTENT
 27156                                  ;
 27157                                  ; set up a . or .. directory entry for a directory.
 27158                                  ;
 27159                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27160                                  ;               AX contains ". " or ".."
 27161                                  ;               DX contains first cluster of entry
 27162                                  ;
 27163                                  ;----------------------------------------------------------------------------
 27164                                  
 27165                                  SETDOTENT:
 27166                                  ;	Fill in name field
 27167 00004870 AB                      	STOSW
 27168 00004871 B90400                  	MOV	CX,4
 27169 00004874 B82020                  	MOV	AX,"  " ; 2020h
 27170 00004877 F3AB                    	REP	STOSW
 27171 00004879 AA                      	STOSB
 27172                                  
 27173                                  ;	Set up attribute
 27174                                  	;mov	al, 10h
 27175 0000487A B010                    	MOV	AL,attr_directory
 27176 0000487C AA                      	STOSB
 27177                                  
 27178                                  ;	Initialize time and date of creation
 27179 0000487D 83C70A                  	ADD	DI,10
 27180 00004880 8B36[9E05]              	MOV	SI,[THISSFT]
 27181                                  	;mov	ax,[si+0Dh]
 27182 00004884 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27183 00004887 AB                      	STOSW
 27184                                  	;mov	ax,[si+0Fh]
 27185 00004888 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27186 0000488B AB                      	STOSW
 27187                                  
 27188                                  ;	Set up first cluster field
 27189 0000488C 89D0                    	MOV	AX,DX
 27190 0000488E AB                      	STOSW
 27191                                  
 27192                                  ;	0 file size
 27193                                  	;XOR	AX,AX
 27194 0000488F 91                      	xchg	ax,cx ; 23/02/2024
 27195 00004890 AB                      	STOSW
 27196 00004891 AB                      	STOSW
 27197 00004892 C3                      	retn
 27198                                  
 27199                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27200                                  ;---------------------------------------------------------------------------
 27201                                  ;
 27202                                  ; Procedure Name : MakeNode
 27203                                  ;
 27204                                  ; Inputs:
 27205                                  ;       AL - attribute to create
 27206                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27207                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27208                                  ;               (AH ignored on dirs and devices)
 27209                                  ;
 27210                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27211                                  ;               a name already existant is ALWAYS an error in these cases.
 27212                                  ;
 27213                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27214                                  ;               terminated)
 27215                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27216                                  ;               ( = -1 if current dir not involved, else
 27217                                  ;                Points to first char after last "/" of current dir part)
 27218                                  ;       [THISCDS] Points to CDS being used
 27219                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27220                                  ; Function:
 27221                                  ;       Make a new node
 27222                                  ; Outputs:
 27223                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27224                                  ;       CARRY SET IF ERROR
 27225                                  ;          AX = 1 A node by this name exists and is a directory
 27226                                  ;          AX = 2 A new node could not be created
 27227                                  ;          AX = 3 A node by this name exists and is a disk file
 27228                                  ;               (AH was NZ on input)
 27229                                  ;          AX = 4 Bad Path
 27230                                  ;               SI return from GetPath maintained
 27231                                  ;          AX = 5 Attribute mismatch
 27232                                  ;          AX = 6 Sharing Violation
 27233                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27234                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27235                                  ;       ELSE
 27236                                  ;          AX = 0 Disk Node
 27237                                  ;          AX = 3 Device Node (error in some cases)
 27238                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27239                                  ;               containing new node.
 27240                                  ;          [CURBUF+2]:BX Points to entry
 27241                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27242                                  ;          [THISSFT] is filled in
 27243                                  ;               sf_mode = unchanged.
 27244                                  ;          Attribute byte in entry is input AL
 27245                                  ; DS preserved, others destroyed
 27246                                  ;
 27247                                  ;-------------------------------------------------------------------------
 27248                                  
 27249                                  ; 19/05/2019 - Retro DOS v4.0
 27250                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27251                                  
 27252                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27253                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27254                                  
 27255                                  ; 23/02/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 27256                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27257                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27258                                  
 27259                                  MakeNode:
 27260                                  	;mov	word [CREATING],0E5FFh
 27261 00004893 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27262 00004899 50                      	PUSH	AX 		; Save AH value
 27263 0000489A C606[4C03]00            	MOV	byte [NoSetDir],0
 27264 0000489F A2[6D05]                	MOV	[SATTRIB],AL
 27265 000048A2 E89BF5                  	call	GetPathNoSet
 27266 000048A5 88CA                    	MOV	DL,CL		; Save CL info
 27267                                  	;MOV	CX,AX		; Device ID to CH
 27268                                  	; 23/02/2024
 27269 000048A7 91                      	xchg	ax,cx
 27270 000048A8 58                      	POP	AX		; Get back AH
 27271 000048A9 732D                    	JNC	short make_exists ; File existed
 27272 000048AB 7505                    	JNZ	short make_err_4 ; Path bad
 27273 000048AD 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27274 000048B0 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27275                                  make_err_4:
 27276 000048B2 B004                    	MOV	AL,4		; case 1 bad path
 27277                                  make_err_ret:
 27278                                  	;XOR	AH,AH
 27279                                  	; 23/02/2024
 27280 000048B4 98                      	cbw
 27281 000048B5 F9                      	STC
 27282                                  ;make_retn:	; 22/11/2022
 27283 000048B6 C3                      	retn
 27284                                  
 27285                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27286                                  RENAME_MAKE:
 27287                                  make_type:
 27288                                  ;Extended Open hooks
 27289                                  	; MSDOS 6.0
 27290                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27291 000048B7 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27292 000048BC 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27293 000048BE 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27294                                  					;FT. set for extended open ;AN000;
 27295                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27296 000048C3 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27297 000048C8 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27298 000048CA F9                      	STC				;FT. set carry			;AN000;
 27299 000048CB B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27300                                  	; 22/11/2022
 27301                                  make_retn:
 27302                                  	;return
 27303 000048CE C3                      	retn				;FT.				;AN000;
 27304                                  
 27305                                  ;	Extended Open hooks
 27306                                  
 27307                                  make_type2:
 27308 000048CF C43E[9E05]              	LES	DI,[THISSFT]
 27309 000048D3 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27310 000048D5 F9                      	STC			; Not found
 27311 000048D6 EB59                    	JMP	short make_new
 27312                                  
 27313                                  ; The node exists. It may be either a device, directory or file:
 27314                                  ;   Zero set => directory
 27315                                  ;   High bit of CH on => device
 27316                                  ;   else => file
 27317                                  
 27318                                  make_exists:
 27319 000048D8 7447                    	JZ	short make_exists_dir
 27320 000048DA B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27321                                  	;test	byte [ATTRIB],18h
 27322 000048DC F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27323 000048E1 753A                    	JNZ	short make_err_ret_5
 27324                                  				; Cannot already exist as Disk or Device Node
 27325                                  				;  if making DIR or Volume ID
 27326 000048E3 08ED                    	OR	CH,CH
 27327 000048E5 781A                    	JS	short make_share ; No further checks on attributes if device
 27328 000048E7 08E4                    	OR	AH,AH
 27329 000048E9 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27330 000048EB 51                      	PUSH	CX		; Save device ID
 27331 000048EC 8E06[E405]              	MOV	ES,[CURBUF+2]
 27332                                  	;mov	ch,[es:bx+0Bh]
 27333 000048F0 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27334                                  	;test	ch,1
 27335 000048F4 F6C501                  	test	CH,attr_read_only
 27336 000048F7 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27337 000048F9 E8D5F7                  	call	MatchAttributes
 27338 000048FC 59                      	POP	CX		; Devid back in CH
 27339 000048FD 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27340 000048FF 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27341                                  
 27342                                  make_share:
 27343                                  	;XOR	AH,AH
 27344                                  	; 23/02/2024
 27345 00004901 98                      	cbw
 27346 00004902 50                      	PUSH	AX		; Save Disk or Device node
 27347 00004903 51                      	PUSH	CX		; Save Device ID
 27348 00004904 88EC                    	MOV	AH,CH		; Device ID to AH
 27349 00004906 E84501                  	CALL	DOOPEN		; Fill in SFT for share check
 27350 00004909 C43E[9E05]              	LES	DI,[THISSFT]
 27351 0000490D 56                      	push	si
 27352 0000490E 53                      	push	bx		; Save CURBUF pointers
 27353 0000490F E85229                  	call	ShareEnter
 27354 00004912 735A                    	jnc	short MakeEndShare
 27355                                  
 27356                                  ; User failed request.
 27357 00004914 5B                      	pop	bx
 27358 00004915 5E                      	pop	si
 27359 00004916 59                      	pop	cx
 27360 00004917 58                      	pop	ax
 27361                                  
 27362                                  Make_Share_ret:
 27363 00004918 B006                    	MOV	AL,6
 27364 0000491A EB98                    	JMP	short make_err_ret
 27365                                  
 27366                                  make_err_ret_5P:
 27367 0000491C 59                      	POP	CX		; Get back device ID
 27368                                  make_err_ret_5:
 27369 0000491D B005                    	MOV     AL,5		; Attribute mismatch
 27370                                          ; 22/11/2022
 27371 0000491F EB93                    	JMP	short make_err_ret
 27372                                  
 27373                                  make_exists_dir:
 27374 00004921 B001                    	MOV	AL,1		; exists as directory, always an error
 27375                                  	; 22/11/2022
 27376 00004923 EB8F                    	JMP	short make_err_ret
 27377                                  
 27378                                  make_save:
 27379 00004925 50                      	PUSH	AX		; Save whether Disk or File
 27380 00004926 89C8                    	MOV	AX,CX		; Device ID to AH
 27381 00004928 E87400                  	CALL	NEWENTRY
 27382 0000492B 58                      	POP	AX		; 0 if Disk, 3 if File
 27383 0000492C 73A0                    	jnc	short make_retn
 27384 0000492E B002                    	MOV	AL,2		; create failed case 2
 27385                                  make_save_retn:
 27386 00004930 C3                      	retn
 27387                                  
 27388                                  make_new:
 27389 00004931 E8F1FF                  	call	make_save
 27390 00004934 72FA                    	jc	short make_save_retn	; case 2 fail
 27391                                  	;test	byte [ATTRIB],10h
 27392 00004936 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27393 0000493B 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27394                                  					; so don't tell the sharer about them
 27395 0000493D 50                      	push	ax
 27396 0000493E 53                      	push	bx
 27397 0000493F 56                      	push	si
 27398 00004940 E82129                  	call	ShareEnter
 27399 00004943 5E                      	pop	si
 27400 00004944 5B                      	pop	bx
 27401 00004945 58                      	pop	ax
 27402 00004946 73E8                    	jnc	short make_save_retn
 27403                                  
 27404                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27405                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27406                                  ; possible: delete the newly created directory entry and return share_error.
 27407                                  
 27408 00004948 50                      	PUSH	AX
 27409 00004949 C43E[E205]              	LES	DI,[CURBUF]
 27410                                  	;mov	byte [es:bx],0E5h
 27411 0000494D 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27412                                  	
 27413                                  	; MSDOS 6.0
 27414                                  	;test	byte [es:di+5],40h
 27415 00004951 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27416                                  					;LB. if already dirty		  ;AN000;
 27417 00004956 7508                    	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27418                                  	; 22/11/2022
 27419 00004958 E8E610                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27420                                  	;or	byte [es:di+5],40h
 27421 0000495B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27422                                  yesdirty8:
 27423 00004960 C42E[8A05]              	LES	BP,[THISDPB]
 27424                                  	; 15/12/2022
 27425 00004964 268A4600                	mov	al,[ES:BP]
 27426                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27427                                  	;;mov	al,[es:bp+0]
 27428                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27429 00004968 E8D10F                  	call	FLUSHBUF		; write out buffer.
 27430 0000496B 58                      	POP	AX
 27431 0000496C EBAA                    	jmp	short Make_Share_ret
 27432                                  
 27433                                  ; We have found an existing file. We have also entered it into the share set.
 27434                                  ; At this point we need to call newentry to correctly address the problem of
 27435                                  ; getting rid of old data (create an existing file) or creating a new
 27436                                  ; directory entry (create a new file). Unfortunately, this operation may
 27437                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27438                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27439                                  ; the share set now, do the operation and then reassert the share access.
 27440                                  ;
 27441                                  ; We are allowed to do this! There is no window! After all, we are in
 27442                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27443                                  
 27444                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27445                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27446                                  
 27447                                  MakeEndShare:
 27448 0000496E C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27449 00004972 31C0                    	XOR	AX,AX
 27450 00004974 E881C9                  	call	ECritSFT
 27451 00004977 268705                  	xchg	AX,[ES:DI]
 27452                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27453 0000497A 50                      	push	ax
 27454 0000497B 57                      	push	di
 27455 0000497C 06                      	push	es
 27456 0000497D 9C                      	PUSHF
 27457 0000497E E8DE28                  	call	ShareEnd		; remove sharing
 27458 00004981 9D                      	POPF
 27459 00004982 07                      	pop	es
 27460 00004983 5F                      	pop	di
 27461 00004984 268F05                  	pop	word [ES:DI]
 27462                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27463 00004987 E889C9                  	call	LCritSFT
 27464                                  	; 22/11/2022
 27465                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27466 0000498A 5B                      	pop	bx
 27467 0000498B 5E                      	pop	si
 27468 0000498C 59                      	pop	cx
 27469 0000498D 58                      	pop	ax
 27470 0000498E E894FF                  	CALL	make_save
 27471                                  
 27472                                  ; If the user failed, we do not reenter into the sharing set.
 27473                                  
 27474 00004991 729D                    	jc	short make_save_retn	; bye if error
 27475 00004993 50                      	push	ax
 27476 00004994 53                      	push	bx
 27477 00004995 56                      	push	si
 27478 00004996 9C                      	PUSHF
 27479 00004997 E8CA28                  	call	ShareEnter
 27480 0000499A 9D                      	POPF
 27481 0000499B 5E                      	pop	si
 27482 0000499C 5B                      	pop	bx
 27483 0000499D 58                      	pop	ax
 27484                                  
 27485                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27486                                  
 27487                                  makeendshare_retn:
 27488 0000499E C3                      	retn
 27489                                  
 27490                                  ;---------------------------------------------------------------------------
 27491                                  ;
 27492                                  ; Procedure Name : NEWENTRY
 27493                                  ;
 27494                                  ; Inputs:
 27495                                  ;	  [THISSFT] set
 27496                                  ;	  [THISDPB] set
 27497                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27498                                  ;		  entries
 27499                                  ;	  [VOLID] set if a volume ID was found during search
 27500                                  ;	Attrib Contains attributes for new file
 27501                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27502                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27503                                  ;		  NC means file existed (device)
 27504                                  ;		  C  means file did not exist
 27505                                  ;	  AH = Device ID byte
 27506                                  ;	  If FILE
 27507                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27508                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27509                                  ;	  If device
 27510                                  ;	  DS:BX points to start of "fake" directory entry
 27511                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27512                                  ;		  (has DWORD pointer to device header)
 27513                                  ; Function:
 27514                                  ;	  Make a new directory entry
 27515                                  ;	  If an old one existed it is truncated first
 27516                                  ; Outputs:
 27517                                  ;	  Carry set if error
 27518                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27519                                  ;		  vol ID, user FAILed to I 24
 27520                                  ;	  else
 27521                                  ;		  outputs of DOOPEN
 27522                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27523                                  ;
 27524                                  ;----------------------------------------------------------------------------
 27525                                  
 27526                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27527                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27528                                  
 27529                                  NEWENTRY:
 27530 0000499F C42E[8A05]              	LES	BP,[THISDPB]
 27531 000049A3 7315                    	JNC	short EXISTENT
 27532 000049A5 803E[4A03]00            	CMP	byte [FAILERR],0
 27533                                  	;STC
 27534                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27535                                  	; 24/09/2023
 27536 000049AA 750C                    	jnz	short ERRRET3
 27537 000049AC E810FE                  	CALL	BUILDDIR	; Try to build dir
 27538 000049AF 72ED                    	jc	short makeendshare_retn	; Failed
 27539 000049B1 E8FCF3                  	call	GETENT		; Point at that free entry
 27540 000049B4 72E8                    	jc	short makeendshare_retn	; Failed
 27541 000049B6 EB0E                    	JMP	SHORT FREESPOT
 27542                                  
 27543                                  ERRRET3:
 27544 000049B8 F9                      	STC
 27545                                  newentry_retn:
 27546 000049B9 C3                      	retn
 27547                                  
 27548                                  EXISTENT:
 27549 000049BA 08E4                    	OR	AH,AH		; Check if file is I/O device
 27550 000049BC 7903                    	JNS	short NOT_DEV1
 27551 000049BE E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27552                                  
 27553                                  NOT_DEV1:
 27554 000049C1 E82801                  	call	FREEENT	; Free cluster chain
 27555 000049C4 72F3                    	jc	short newentry_retn ; Failed
 27556                                  FREESPOT:
 27557                                  	;test	byte [ATTRIB],8
 27558 000049C6 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27559 000049CB 7407                    	JZ	short NOTVOLID
 27560 000049CD 803E[7B05]00            	CMP	BYTE [VOLID],0
 27561 000049D2 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27562                                  NOTVOLID:
 27563 000049D4 8E06[E405]              	MOV	ES,[CURBUF+2]
 27564 000049D8 89DF                    	MOV	DI,BX
 27565                                  
 27566 000049DA BE[4B05]                	MOV	SI,NAME1
 27567                                  
 27568 000049DD B90500                  	MOV	CX,5
 27569 000049E0 F3A5                    	REP	MOVSW
 27570 000049E2 A4                      	MOVSB			; Move name into dir entry
 27571 000049E3 A0[6B05]                	MOV	AL,[ATTRIB]
 27572 000049E6 AA                      	STOSB			; Attributes
 27573                                  
 27574                                  ;; File Tagging for Create DOS 4.00
 27575 000049E7 B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27576                                  ;; File Tagging for Create DOS 4.00
 27577                                  
 27578 000049E9 31C0                    	XOR	AX,AX
 27579 000049EB F3AB                    	REP	STOSW		; Zero pad
 27580 000049ED E8FBC0                  	call	DATE16
 27581 000049F0 92                      	XCHG	AX,DX
 27582 000049F1 AB                      	STOSW			; dir_time
 27583 000049F2 92                      	XCHG	AX,DX
 27584 000049F3 AB                      	STOSW			; dir_date
 27585 000049F4 31C0                    	XOR	AX,AX
 27586 000049F6 57                      	PUSH	DI		; Correct SI input value
 27587                                  				; (recomputed for new buffer)
 27588 000049F7 AB                      	STOSW			; Zero dir_first and size
 27589 000049F8 AB                      	STOSW
 27590 000049F9 AB                      	STOSW
 27591                                  updnxt:
 27592 000049FA 8B36[E205]              	MOV	SI,[CURBUF]
 27593                                  
 27594                                  	; 19/05/2019 - Retro DOS v4.0
 27595                                  
 27596                                  	; MSDOS 6.0
 27597 000049FE 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27598                                  				;LB. if already dirty		  ;AN000;
 27599 00004A03 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27600 00004A05 E83910                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27601                                  	
 27602                                  	;or	byte [es:si+5],40h
 27603 00004A08 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27604                                  yesdirty9:
 27605 00004A0D C42E[8A05]              	LES	BP,[THISDPB]
 27606                                  	; 15/12/2022
 27607 00004A11 268A4600                	MOV	AL,[ES:BP]
 27608                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27609                                  	;;mov	al,[es:bp+0]
 27610                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27611 00004A15 50                      	PUSH	AX
 27612 00004A16 53                      	PUSH	BX
 27613                                  
 27614                                  ; If we have a file, we need to increment the open ref. count so that
 27615                                  ; we have some protection against invalid media changes if an Int 24
 27616                                  ; error occurs.
 27617                                  ; Do nothing for a device.
 27618                                  
 27619 00004A17 06                      	push	es
 27620 00004A18 57                      	push	di
 27621 00004A19 C43E[9E05]              	LES	DI,[THISSFT]
 27622                                  	;test	word [es:di+5],80h
 27623                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27624 00004A1D 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27625 00004A22 751A                    	jnz	short GotADevice
 27626 00004A24 1E                      	push	ds
 27627 00004A25 53                      	push	bx
 27628 00004A26 C51E[8A05]              	LDS	BX,[THISDPB]
 27629                                  	;mov	[es:di+7],bx
 27630 00004A2A 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27631 00004A2E 8CDB                    	MOV	BX,DS
 27632                                  	;mov	[es:di+9],bx
 27633 00004A30 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27634 00004A34 5B                      	pop	bx
 27635 00004A35 1F                      	pop	ds ; need to use DS for segment later on
 27636                                  
 27637 00004A36 E8B4FA                  	call	DEV_OPEN_SFT	; increment ref. count
 27638 00004A39 C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27639                                  
 27640                                  GotADevice:
 27641 00004A3E 5F                      	pop	di
 27642 00004A3F 07                      	pop	es
 27643                                  
 27644 00004A40 E8F90E                  	call	FLUSHBUF
 27645                                  
 27646 00004A43 E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27647                                  
 27648 00004A46 5B                      	POP	BX
 27649 00004A47 58                      	POP	AX
 27650 00004A48 5E                      	POP	SI		; Get SI input back
 27651 00004A49 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27652 00004A4B 7301                    	jnc	short DOOPEN	
 27653 00004A4D C3                      	retn			; Failed
 27654                                  	
 27655                                  ;NOTE FALL THROUGH
 27656                                  
 27657                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27658                                  
 27659                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27660                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27661                                  
 27662                                  ; DOOPEN
 27663                                  ;----------------------------------------------------------------------------
 27664                                  ;
 27665                                  ; Inputs:
 27666                                  ;	  [THISDPB] points to DPB if file
 27667                                  ;	  [THISSFT] points to SFT being used
 27668                                  ;	  AH = Device ID byte
 27669                                  ;	  If FILE
 27670                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27671                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27672                                  ;	  If device
 27673                                  ;	  DS:BX points to start of "fake" directory entry
 27674                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27675                                  ;		  (has DWORD pointer to device header)
 27676                                  ; Function:
 27677                                  ;	  Fill in SFT from dir entry
 27678                                  ; Outputs:
 27679                                  ;	  CARRY CLEAR
 27680                                  ;	  sf_ref_count and sf_mode fields not altered
 27681                                  ;	  sf_flags high byte = 0
 27682                                  ;	  sf_flags low byte = AH except
 27683                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27684                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27685                                  ;	  sf_position = 0
 27686                                  ;	  If device
 27687                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27688                                  ;	  sf_size = 0
 27689                                  ;	  If file
 27690                                  ;	  sf_firclus sf_size set from entry
 27691                                  ;	  sf_devptr = [THISDPB]
 27692                                  ;	  sf_cluspos = 0
 27693                                  ;	  sf_lstclus = sf_firclus
 27694                                  ;	  sf_dirsec sf_dirpos set
 27695                                  ; DS,SI,BX preserved, others destroyed
 27696                                  ;
 27697                                  ;----------------------------------------------------------------------------
 27698                                  
 27699                                  	;entry	DOOPEN
 27700                                  DOOPEN:
 27701                                  ;	Generate and store attribute
 27702                                  
 27703 00004A4E 88E6                    	MOV	DH,AH	  	; AH to different place
 27704 00004A50 C43E[9E05]              	LES	DI,[THISSFT]
 27705                                  	;add	di,4
 27706 00004A54 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27707                                  	; 24/09/2023
 27708 00004A57 31C0                    	xor	ax,ax
 27709                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27710                                  				;  attribute of 0 (for R/O testing etc).
 27711 00004A59 08F6                    	OR	DH,DH		; See if our assumption good.
 27712 00004A5B 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27713 00004A5D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27714                                  	;mov	al,[BX+0Bh]
 27715 00004A61 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27716                                  				; If file, get attrib from dir entry
 27717                                  DEV_SFT1:
 27718 00004A64 AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27719                                  
 27720                                  ;	Generate and store flags word
 27721                                  
 27722                                  	; 24/09/2023
 27723                                  	;XOR	AX,AX
 27724                                  	; ah=0
 27725 00004A65 88F0                    	MOV	AL,DH
 27726                                  	;or	al,40h
 27727 00004A67 0C40                    	OR	AL,devid_file_clean
 27728 00004A69 AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27729                                  
 27730                                  ;	Generate and store device pointer
 27731                                  
 27732 00004A6A 1E                      	PUSH	DS
 27733                                  	;lds	ax,[bx+1Ah]
 27734 00004A6B C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27735 00004A6E 08F6                    	OR	DH,DH
 27736 00004A70 7805                    	JS	short DEV_SFT2
 27737                                  
 27738                                  ;hkn; SS override
 27739 00004A72 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27740                                  DEV_SFT2:
 27741 00004A77 AB                      	STOSW			; store offset
 27742 00004A78 8CD8                    	MOV	AX,DS
 27743 00004A7A 1F                      	POP	DS
 27744 00004A7B AB                      	STOSW			; store segment
 27745                                  				; ES:DI -> sf_firclus
 27746                                  
 27747                                  ;	Generate pointer to, generate and store first cluster
 27748                                  ;	(irrelevant for devices)
 27749                                  
 27750 00004A7C 56                      	PUSH	SI		; Save pointer to dir_first
 27751 00004A7D A5                      	MOVSW			; dir_first -> sf_firclus
 27752                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27753                                  
 27754                                  ;	Copy time/date of last modification
 27755                                  
 27756                                  	;sub	si,6
 27757 00004A7E 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27758                                  				; DS:SI->dir_time
 27759 00004A81 A5                      	MOVSW			; dir_time -> sf_time
 27760                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27761 00004A82 A5                      	MOVSW			; dir_date -> sf_date
 27762                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27763                                  
 27764                                  ;	Generate and store file size (0 for devices)
 27765                                  
 27766 00004A83 AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27767 00004A84 AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27768                                  	;MOV	CX,AX		; dir_size_l in CX
 27769                                  	; 23/02/2024
 27770 00004A85 91                      	xchg	ax,cx
 27771 00004A86 AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27772 00004A87 08F6                    	OR	DH,DH
 27773 00004A89 7904                    	JNS	short FILE_SFT1
 27774 00004A8B 31C0                    	XOR	AX,AX
 27775 00004A8D 89C1                    	MOV	CX,AX		; Devices are open ended
 27776                                  FILE_SFT1:
 27777 00004A8F 91                      	XCHG	AX,CX
 27778 00004A90 AB                      	STOSW			; Low word of sf_size
 27779 00004A91 91                      	XCHG	AX,CX
 27780 00004A92 AB                      	STOSW			; High word of sf_size
 27781                                  				; ES:DI -> sf_position
 27782                                  ; Initialize position to 0
 27783                                  
 27784 00004A93 31C0                    	XOR	AX,AX
 27785 00004A95 AB                      	STOSW
 27786 00004A96 AB                      	STOSW			; sf_position
 27787                                  				; ES:DI -> sf_cluspos
 27788                                  
 27789                                  ; Generate cluster optimizations for files
 27790                                  
 27791 00004A97 08F6                    	OR	DH,DH
 27792 00004A99 7843                    	JS	short DEV_SFT3
 27793 00004A9B AB                      	STOSW			; sf_cluspos ; 19h
 27794                                  	;mov	ax,[bx+1Ah]
 27795 00004A9C 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27796                                  	; 19/05/2019
 27797                                  	; MSDOS 3.3
 27798                                  	;STOSW			; sf_lstclus ; 1Bh
 27799                                  	; MSDOS 6.0
 27800 00004A9F 57                      	PUSH	DI		;AN004; save dirsec offset
 27801                                  	;sub	di,1Bh
 27802 00004AA0 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27803                                  	;mov	[es:di+35h],ax
 27804 00004AA3 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27805 00004AA7 5F                      	POP	DI		;AN004; restore dirsec offset
 27806                                  
 27807                                  ; DOS 3.3  FastOpen  6/13/86
 27808                                  
 27809 00004AA8 1E                      	PUSH	DS
 27810                                  
 27811                                  ;hkn; SS is DOSDATA
 27812 00004AA9 16                      	push	ss
 27813 00004AAA 1F                      	pop	ds
 27814                                  	;test	byte [FastOpenFlg],4
 27815 00004AAB F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27816 00004AB0 7411                    	JZ	short Not_FastOpen
 27817                                  
 27818                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27819 00004AB2 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27820                                  
 27821                                  	;mov	ax,[si+1]
 27822 00004AB5 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27823 00004AB8 AB                      	STOSW		  	; sf_dirsec
 27824                                  	; MSDOS 6.0
 27825                                  	;mov	ax,[si+3]
 27826 00004AB9 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27827                                  		;;; changed for >32mb
 27828 00004ABC AB                      	STOSW		  	; sf_dirsec
 27829                                  	; 19/08//2018
 27830 00004ABD 8A04                    	mov	al,[SI]
 27831                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27832 00004ABF AA                      	STOSB		  	; sf_dirpos
 27833 00004AC0 1F                      	POP	DS
 27834                                  	;JMP	short Next_Name
 27835                                  	; 24/09/2023
 27836 00004AC1 EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 27837                                  
 27838                                  ; DOS 3.3  FastOpen  6/13/86
 27839                                  
 27840                                  Not_FastOpen:
 27841                                  	;POP	DS		; normal path
 27842                                  
 27843                                  ;hkn; SS override
 27844                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27845                                  	; 16/12/2022
 27846                                  	; 28/07/2019
 27847 00004AC3 8B36[E205]              	mov	si,[CURBUF]
 27848 00004AC7 1F                      	pop	ds
 27849                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27850                                  	;pop	ds
 27851                                  	;mov	si,[ss:CURBUF]
 27852                                  	
 27853                                  	;mov	ax,[si+6]
 27854 00004AC8 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 27855 00004ACB AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27856                                  	; 19/05/2019	
 27857                                  	; MSDOS 6.0
 27858                                  	;mov	ax,[si+8]
 27859 00004ACC 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27860 00004ACF AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27861                                  	
 27862 00004AD0 89D8                    	MOV	AX,BX
 27863                                  	;;add	si,16	; MSDOS 3.3
 27864                                  	;add	si,20	; MSDOS 6.0
 27865 00004AD2 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 27866 00004AD5 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 27867                                  	;mov	cl,32
 27868 00004AD7 B120                    	MOV	CL,dir_entry.size
 27869 00004AD9 F6F1                    	DIV	CL
 27870 00004ADB AA                      	STOSB		  	; sf_dirpos
 27871                                  Next_Name:
 27872 00004ADC EB03                    	JMP	SHORT FILE_SFT2
 27873                                  
 27874                                  	; 24/09/2023
 27875                                  	; cf=0 (after 'or' instruction)
 27876                                  DEV_SFT3:
 27877                                  	;add	di,7
 27878 00004ADE 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27879                                  FILE_SFT2:
 27880                                  
 27881                                  ; Copy in the object's name
 27882                                  
 27883 00004AE1 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 27884 00004AE3 B90B00                  	MOV	CX,11
 27885 00004AE6 F3A4                    	REP	MOVSB		; sf_name
 27886 00004AE8 5E                      	POP	SI		; recover DS:SI -> dir_first
 27887                                  
 27888                                  ;hkn; SS is DOSDATA
 27889 00004AE9 16                      	push	ss
 27890 00004AEA 1F                      	pop	ds
 27891                                  	; 24/09/2023
 27892                                  	; cf=0
 27893                                  	;CLC
 27894 00004AEB C3                      	retn
 27895                                  
 27896                                  ;---------------------------------------------------------------------------
 27897                                  ;
 27898                                  ; Procedure Name : FREEENT
 27899                                  ;
 27900                                  ; Inputs:
 27901                                  ;	  ES:BP -> DPB
 27902                                  ;	  [CURBUF] Set
 27903                                  ;	  [CURBUF+2]:BX points to directory entry
 27904                                  ;	  [CURBUF+2]:SI points to above dir_first
 27905                                  ; Function:
 27906                                  ;	  Free the cluster chain for the entry if present
 27907                                  ; Outputs:
 27908                                  ;	  Carry set if error (currently user FAILed to I 24)
 27909                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 27910                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27911                                  ;---------------------------------------------------------------------------
 27912                                  
 27913                                  	; 24/02/2024 - Retro DOS v4.1
 27914                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27915                                  FREEENT:
 27916 00004AEC 1E                      	PUSH	DS
 27917 00004AED C53E[E205]              	LDS	DI,[CURBUF]
 27918 00004AF1 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 27919                                  	; 19/05/2019 - Retro DOS v4.0
 27920                                  	; MSDOS 6.0
 27921 00004AF3 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 27922                                  ;hkn; SS override
 27923 00004AF6 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 27924 00004AFB 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 27925 00004AFE 1F                      	POP	DS
 27926 00004AFF 83F902                  	CMP	CX,2
 27927 00004B02 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27928                                  	;cmp	cx,[es:bp+0Dh]
 27929 00004B04 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 27930                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 27931 00004B08 7715                    	ja	short freeent_retn ; 24/02/2024
 27932 00004B0A 29FB                    	SUB	BX,DI
 27933 00004B0C 53                      	PUSH	BX		; Save offset
 27934 00004B0D FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27935 00004B11 52                      	PUSH	DX		; Save sector number
 27936 00004B12 89CB                    	MOV	BX,CX
 27937 00004B14 E8A402                  	call	RELEASE		; Free any data allocated
 27938 00004B17 5A                      	POP	DX
 27939 00004B18 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27940 00004B1C 7302                    	JNC	short GET_BUF_BACK
 27941 00004B1E 5B                      	POP	BX
 27942                                  freeent_retn:
 27943 00004B1F C3                      	retn			; Screw up
 27944                                  
 27945                                  GET_BUF_BACK:
 27946                                  	; 22/09/2023
 27947                                  	;;mov	byte [ALLOWED],18h
 27948                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27949                                  	;XOR	AL,AL ; *
 27950                                  	;call	GETBUFFR	; Get sector back
 27951 00004B20 E8150D                  	call	GETBUFFER ; *	; pre read
 27952                                  
 27953 00004B23 5B                      	POP	BX		; Get offset back
 27954 00004B24 72F9                    	jc	short freeent_retn
 27955 00004B26 E8EDEA                  	call	SET_BUF_AS_DIR
 27956 00004B29 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 27957                                  
 27958                                  	;MOV	SI,BX
 27959                                  	;;add	si,1Ah
 27960                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 27961                                  	; 24/02/2024 - Retro DOS v4.1
 27962                                  	;lea	si,[bx+1Ah]
 27963 00004B2D 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 27964                                  RET1:
 27965 00004B30 F8                      	CLC
 27966 00004B31 C3                      	retn
 27967                                  
 27968                                  ;---------------------------------------------------------------------------
 27969                                  ;
 27970                                  ; Procedure Name : CHECK_VIRT_OPEN
 27971                                  ;
 27972                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27973                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27974                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27975                                  ; flag [VIRTUAL_OPEN].
 27976                                  ; No registers affected (including flags).
 27977                                  ; On input, [THISSFT] points to current SFT.
 27978                                  ;
 27979                                  ;---------------------------------------------------------------------------
 27980                                  
 27981                                  CHECK_VIRT_OPEN:
 27982 00004B32 50                      	PUSH	AX
 27983 00004B33 9F                      	lahf			; preserve flags
 27984 00004B34 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 27985 00004B39 7410                    	JZ	short ALL_CLOSED
 27986 00004B3B C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 27987 00004B40 06                      	push	es
 27988 00004B41 57                      	push	di
 27989 00004B42 C43E[9E05]              	LES	DI,[THISSFT]
 27990 00004B46 E8ACF9                  	call	DEV_CLOSE_SFT
 27991 00004B49 5F                      	pop	di
 27992 00004B4A 07                      	pop	es
 27993                                  
 27994                                  ALL_CLOSED:
 27995 00004B4B 9E                      	sahf			; restore flags
 27996 00004B4C 58                      	POP	AX
 27997 00004B4D C3                      	retn
 27998                                  
 27999                                  ;============================================================================
 28000                                  ; ROM.ASM, MSDOS 6.0, 1991
 28001                                  ;============================================================================
 28002                                  ; 29/07/2018 - Retro DOS v3.0
 28003                                  ; 20/05/2019 - Retro DOS v4.0
 28004                                  
 28005                                  ;	TITLE	ROM - Miscellaneous routines
 28006                                  ;	NAME	ROM
 28007                                  
 28008                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28009                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28010                                  ;
 28011                                  ;	SKPCLP
 28012                                  ;	FNDCLUS
 28013                                  ;	BUFSEC
 28014                                  ;	BUFRD
 28015                                  ;	BUFWRT
 28016                                  ;	NEXTSEC
 28017                                  ;	OPTIMIZE
 28018                                  ;	FIGREC
 28019                                  ;	ALLOCATE
 28020                                  ;	RESTFATBYT
 28021                                  ;	RELEASE
 28022                                  ;	RELBLKS
 28023                                  ;	GETEOF
 28024                                  ;
 28025                                  ;	Modification history:
 28026                                  ;
 28027                                  ;		Created: ARR 30 March 1983
 28028                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28029                                  
 28030                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28031                                  ;--------------------------------------------------------------------------
 28032                                  ;
 28033                                  ; Procedure Name : FNDCLUS
 28034                                  ;
 28035                                  ; Inputs:
 28036                                  ;       CX = No. of clusters to skip
 28037                                  ;       ES:BP = Base of drive parameters
 28038                                  ;       [THISSFT] point to SFT
 28039                                  ; Outputs:
 28040                                  ;       BX = Last cluster skipped to
 28041                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28042                                  ;       DX = Position of last cluster
 28043                                  ;       Carry set if error (currently user FAILed to I 24)
 28044                                  ; DI destroyed. No other registers affected.
 28045                                  ;--------------------------------------------------------------------------
 28046                                  
 28047                                  	; 10/02/2024 - Retro DOS v4.1
 28048                                  FNDCLUS_X:
 28049 00004B4E 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28050                                  
 28051                                  ; 20/05/2019 - Retro DOS v4.0
 28052                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28053                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28054                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28055                                  
 28056                                  FNDCLUS:
 28057 00004B52 06                      	PUSH	ES
 28058 00004B53 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28059                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28060                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28061 00004B57 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28062                                  	;mov	dx,[es:di+19h]
 28063 00004B5B 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28064 00004B5F 09DB                    	OR	BX,BX
 28065 00004B61 7424                    	JZ	short NOCLUS
 28066                                  
 28067 00004B63 29D1                            SUB     CX,DX
 28068 00004B65 7308                            JNB	short FINDIT
 28069                                  
 28070 00004B67 01D1                            ADD     CX,DX
 28071 00004B69 31D2                            XOR     DX,DX
 28072                                  	;mov	bx,[es:di+0Bh]
 28073 00004B6B 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28074                                  FINDIT:
 28075 00004B6F 07                              POP	ES
 28076 00004B70 E313                    	JCXZ	RET9
 28077                                  
 28078                                  	;entry	SKPCLP
 28079                                  SKPCLP:
 28080 00004B72 E8B808                  	call	UNPACK
 28081 00004B75 7214                            jc	short fndclus_retn	; retc
 28082                                  
 28083                                  	; 09/09/2018
 28084                                  
 28085                                  	; MSDOS 3.3
 28086                                  	;push	bx
 28087                                  	;mov	bx,di
 28088                                  	;call	IsEOF
 28089                                  	;pop	bx	
 28090                                  	;jae	short RET9
 28091                                  
 28092                                  	; 20/05/2019 - Retro DOS v4.0
 28093                                  
 28094                                  	; MSDOS 6.0
 28095 00004B77 87DF                    	xchg	bx,di
 28096 00004B79 E89A08                  	call	IsEOF
 28097 00004B7C 87DF                    	xchg	bx,di
 28098 00004B7E 7305                    	jae	short RET9
 28099                                  
 28100 00004B80 87DF                            XCHG    BX,DI
 28101 00004B82 42                              INC     DX
 28102                                  
 28103 00004B83 E2ED                    	LOOP	SKPCLP			; RMFS
 28104                                  RET9:	
 28105 00004B85 F8                      	CLC
 28106 00004B86 C3                              retn
 28107                                  NOCLUS:
 28108 00004B87 07                              POP	ES
 28109 00004B88 41                              INC	CX
 28110 00004B89 4A                              DEC	DX
 28111 00004B8A F8                              CLC
 28112                                  
 28113                                  fndclus_retn:
 28114 00004B8B C3                              retn
 28115                                  
 28116                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28117                                  ;--------------------------------------------------------------------------
 28118                                  ;
 28119                                  ; Procedure Name : BUFSEC
 28120                                  ;
 28121                                  ; Inputs:
 28122                                  ;       AH = priority of buffer
 28123                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28124                                  ;       ES:BP = Base of drive parameters
 28125                                  ;       [CLUSNUM] = Physical cluster number
 28126                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28127                                  ;       [BYTCNT1] = Size of transfer
 28128                                  ; Function:
 28129                                  ;       Insure specified sector is in buffer, flushing buffer before
 28130                                  ;       read if necessary.
 28131                                  ; Outputs:
 28132                                  ;       ES:DI = Pointer to buffer
 28133                                  ;       SI = Pointer to transfer address
 28134                                  ;       CX = Number of bytes
 28135                                  ;       [NEXTADD] updated
 28136                                  ;       [TRANS] set to indicate a transfer will occur
 28137                                  ;       Carry set if error (user FAILed to I 24)
 28138                                  ;--------------------------------------------------------------------------
 28139                                  
 28140                                  BUFSEC:
 28141 00004B8C 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28142 00004B90 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28143                                  	;mov	byte [ALLOWED],38h
 28144 00004B94 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28145 00004B99 E84F01                  	CALL	FIGREC
 28146 00004B9C E8A00C                  	call	GETBUFFR
 28147 00004B9F 72EA                    	jc	short fndclus_retn
 28148                                  
 28149 00004BA1 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28150 00004BA6 8B36[B805]              	MOV	SI,[NEXTADD]
 28151 00004BAA 89F7                    	MOV	DI,SI
 28152 00004BAC 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28153 00004BB0 01CF                    	ADD	DI,CX
 28154 00004BB2 893E[B805]              	MOV	[NEXTADD],DI
 28155 00004BB6 C43E[E205]              	LES	DI,[CURBUF]
 28156                                  	;or	byte [es:di+5],8
 28157 00004BBA 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28158                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28159                                  	;lea	di,[di+20] ; MSDOS 6.0
 28160 00004BBF 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28161 00004BC2 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28162 00004BC6 F8                      	CLC
 28163 00004BC7 C3                      	retn
 28164                                  
 28165                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28166                                  
 28167                                  ;---------------------------------------------------------------------------
 28168                                  ;
 28169                                  ; Procedure Name : BUFRD
 28170                                  ;
 28171                                  ; Do a partial sector read via one of the system buffers
 28172                                  ; ES:BP Points to DPB
 28173                                  ; Carry set if error (currently user FAILed to I 24)
 28174                                  ;
 28175                                  ; DS - set to DOSDATA
 28176                                  ;
 28177                                  ;----------------------------------------------------------------------------
 28178                                  
 28179                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28180                                  	; 20/05/2019 - Retro DOS v4.0
 28181                                  BUFRD:
 28182 00004BC8 06                      	PUSH	ES
 28183 00004BC9 31C0                    	xor	ax,ax			; pre-read sector
 28184 00004BCB E8BEFF                  	CALL	BUFSEC
 28185 00004BCE 7303                    	JNC	short BUF_OK ; ds=ss
 28186                                  
 28187                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28188 00004BD0 07                      	POP	ES
 28189 00004BD1 EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.1
 28190                                  
 28191                                  BUF_OK:
 28192 00004BD3 8CC3                    	MOV	BX,ES
 28193 00004BD5 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28194 00004BD9 8EDB                    	MOV	DS,BX
 28195 00004BDB 87FE                    	XCHG	DI,SI
 28196 00004BDD D1E9                    	SHR	CX,1
 28197                                  ;M039
 28198                                  	; MSDOS 3.3
 28199                                  	;JNC	short EVENRD
 28200                                  	;MOVSB
 28201                                  ;EVENRD:
 28202                                  	;REP	MOVSW
 28203                                  
 28204                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28205                                  ;       DS:SI-> Source within Buffer.
 28206                                  ;       ES:DI-> Destination within Transfer memory block.
 28207                                  
 28208                                  	; MSDOS 6.0
 28209 00004BDF F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28210                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28211                                  	;rep	movsb			;Copy last byte.
 28212                                  	; 16/12/2022
 28213 00004BE1 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28214 00004BE3 A4                      	movsb ; ****
 28215                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28216                                  	;adc	cx,0
 28217                                  	;rep	movsb
 28218                                  ;M039
 28219                                  EVENRD: ; ****
 28220 00004BE4 07                      	POP	ES
 28221                                  ;hkn; SS override
 28222 00004BE5 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28223                                  	;;lea	bx,[di+16]
 28224                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28225 00004BEA 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28226 00004BED 29DE                    	SUB	SI,BX			; Position in buffer
 28227 00004BEF E8ED0B                  	call	PLACEBUF
 28228                                  	;cmp	si,[es:bp+2]
 28229 00004BF2 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28230 00004BF6 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28231                                  ;M039
 28232                                  	; MSDOS 3.3
 28233                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28234                                  					;  even though it is MRU.
 28235                                  	; MSDOS 6.0
 28236 00004BF8 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28237                                  ;M039					; chucking even though it is MRU.
 28238                                  
 28239                                  RBUFPLACEDC:
 28240 00004BFD F8                      	CLC
 28241                                  ;RBUFPLACED:
 28242 00004BFE 16                      	push	ss
 28243 00004BFF 1F                      	pop	ds
 28244                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28245 00004C00 C3                      	retn
 28246                                  
 28247                                  ;----------------------------------------------------------------------------
 28248                                  ;
 28249                                  ; Procedure : BUFWRT
 28250                                  ;
 28251                                  ; Do a partial sector write via one of the system buffers
 28252                                  ; ES:BP Points to DPB
 28253                                  ; Carry set if error (currently user FAILed to I 24)
 28254                                  ;
 28255                                  ; DS - set to DOSDATA
 28256                                  ;
 28257                                  ;----------------------------------------------------------------------------
 28258                                  
 28259                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28260                                  	; 20/05/2019 - Retro DOS v4.0
 28261                                  BUFWRT:
 28262                                  	;MOV	AX,[SECPOS]
 28263                                  	; MSDOS 6.0
 28264                                  	;ADD	AX,1			; Set for next sector
 28265                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28266                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28267                                  	; 24/09/2023
 28268 00004C01 FF06[C405]              	inc	word [SECPOS]
 28269 00004C05 7504                    	jnz	short bufw_secpos
 28270 00004C07 FF06[C605]              	inc	word [SECPOS+2]
 28271                                  bufw_secpos:
 28272 00004C0B A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28273 00004C0E 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28274 00004C12 B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28275 00004C14 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28276 00004C16 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28277 00004C18 A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28278                                  
 28279                                  	; MSDOS 3.3
 28280                                  	;INC	AX
 28281                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28282                                  
 28283                                  	; 20/05/2019
 28284                                  	; MSDOS 3.3 & MSDOS 6.0
 28285 00004C1B 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28286 00004C1F B001                    	MOV	AL,1
 28287 00004C21 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28288                                  _doread:
 28289 00004C23 30C0                    	XOR	AL,AL
 28290                                  NOREAD:
 28291 00004C25 06                      	PUSH	ES
 28292 00004C26 E863FF                  	CALL	BUFSEC
 28293 00004C29 72A5                    	JC	short BUF_IO_FAIL
 28294 00004C2B 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28295 00004C2F D1E9                    	SHR	CX,1
 28296                                  ;M039
 28297                                  	; MSDOS 3.3
 28298                                  	;JNC	short EVENWRT ; 09/09/2018
 28299                                  	;MOVSB
 28300                                  ;EVENWRT:
 28301                                  	;REP	MOVSW
 28302                                  
 28303                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28304                                  ;	DS:SI-> Source within Transfer memory block.
 28305                                  ;	ES:DI-> Destination within Buffer.
 28306                                  
 28307                                  	; MSDOS 6.0
 28308 00004C31 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28309                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28310                                  	;rep	movsb		  	;Copy last byte.
 28311                                  	; 16/12/2022
 28312 00004C33 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28313 00004C35 A4                      	movsb ; ****
 28314                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28315                                  	;adc	cx,0
 28316                                  	;rep	movsb
 28317                                  ;M039
 28318                                  EVENWRT: ; ****
 28319 00004C36 07                      	POP	ES
 28320                                  
 28321                                  ;hkn; SS override
 28322 00004C37 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28323                                  
 28324                                  	; MSDOS 6.0
 28325 00004C3C F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28326                                  					;LB. if already dirty		 ;AN000;
 28327 00004C40 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28328 00004C42 E8FC0D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28329                                  	
 28330                                  	;or	byte [bx+5],40h
 28331 00004C45 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28332                                  yesdirty10:
 28333                                  	;;lea	si,[bx+16]
 28334                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28335 00004C49 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28336 00004C4C 29F7                    	SUB	DI,SI		  	; Position in buffer
 28337                                  ;M039
 28338                                  	; MSDOS 3.3
 28339                                  	;MOV	SI,DI
 28340                                  	;MOV	DI,BX
 28341                                  	;call	PLACEBUF
 28342                                  	;;cmp	si,[es:bp+2]
 28343                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28344                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28345                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28346                                  					;  even though it is MRU.
 28347                                  	; 10/02/2024
 28348 00004C4E 16                      	push	ss
 28349 00004C4F 1F                      	pop	ds
 28350                                  
 28351                                  	; MSDOS 6.0
 28352                                  	;cmp	di,[es:bp+2]
 28353 00004C50 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28354 00004C54 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28355                                  
 28356                                  	; 10/02/2024
 28357                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28358                                  					; chucking even though it is MRU.
 28359 00004C56 891E[6D00]              	mov	[BufferQueue],bx
 28360                                  ;M039
 28361                                  
 28362                                  WBUFPLACED:
 28363 00004C5A F8                      	CLC
 28364                                  	; 10/02/2024
 28365                                  	;push	ss
 28366                                  	;pop	ds
 28367 00004C5B C3                      	retn
 28368                                  
 28369                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28370                                  ;---------------------------------------------------------------------------
 28371                                  ;
 28372                                  ; Procedure Name : NEXTSEC
 28373                                  ;
 28374                                  ; Compute the next sector to read or write
 28375                                  ; ES:BP Points to DPB
 28376                                  ;
 28377                                  ;---------------------------------------------------------------------------
 28378                                  
 28379                                  NEXTSEC:
 28380 00004C5C F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28381                                  	;JZ	short CLRET
 28382                                  	; 29/02/2024
 28383 00004C61 7427                    	jz	short CLRET2
 28384                                  
 28385 00004C63 A0[7305]                	MOV	AL,[SECCLUSPOS]
 28386 00004C66 FEC0                    	INC	AL
 28387                                  	;cmp	al,[es:bp+4]
 28388 00004C68 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28389 00004C6C 7618                    	JBE	short SAVPOS
 28390                                  
 28391 00004C6E 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28392 00004C72 E8A107                  	call	IsEOF
 28393 00004C75 7314                    	JAE	short NONEXT
 28394                                  
 28395 00004C77 E8B307                  	call	UNPACK
 28396                                  	;JC	short NONEXT
 28397                                  	; 26/02/2024
 28398 00004C7A 7210                    	jc	short NONEXT2
 28399                                  clusgot:
 28400 00004C7C 893E[BC05]              	MOV	[CLUSNUM],DI
 28401 00004C80 FF06[BA05]              	INC	word [LASTPOS]
 28402 00004C84 B000                    	MOV	AL,0
 28403                                  SAVPOS:
 28404 00004C86 A2[7305]                	MOV	[SECCLUSPOS],AL
 28405                                  CLRET:
 28406 00004C89 F8                              CLC
 28407                                  CLRET2:		; 29/02/2024
 28408 00004C8A C3                      	retn
 28409                                  NONEXT:
 28410 00004C8B F9                      	STC
 28411                                  NONEXT2:	; 26/02/2024
 28412 00004C8C C3                      	retn
 28413                                  
 28414                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28415                                  ;----------------------------------------------------------------------------
 28416                                  ;
 28417                                  ; Procedure Name : OPTIMIZE
 28418                                  ;
 28419                                  ; Inputs:
 28420                                  ;	  BX = Physical cluster
 28421                                  ;	  CX = No. of records
 28422                                  ;	  DL = sector within cluster
 28423                                  ;	  ES:BP = Base of drive parameters
 28424                                  ;	  [NEXTADD] = transfer address
 28425                                  ; Outputs:
 28426                                  ;	  AX = No. of records remaining
 28427                                  ;	  BX = Transfer address
 28428                                  ;	  CX = No. or records to be transferred
 28429                                  ;	  DX = Physical sector address (LOW)
 28430                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28431                                  ;	  DI = Next cluster
 28432                                  ;	  [CLUSNUM] = Last cluster accessed
 28433                                  ;	  [NEXTADD] updated
 28434                                  ;	  Carry set if error (currently user FAILed to I 24)
 28435                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28436                                  ;
 28437                                  ;---------------------------------------------------------------------------
 28438                                  
 28439                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28440                                  OPTIMIZE:
 28441 00004C8D 52                      	PUSH	DX
 28442 00004C8E 53                      	PUSH	BX
 28443                                  	;mov	al,[es:bp+4]
 28444 00004C8F 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28445 00004C93 FEC0                    	INC	AL		; Number of sectors per cluster
 28446 00004C95 88C4                    	MOV	AH,AL
 28447 00004C97 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28448 00004C99 89CA                    	MOV	DX,CX
 28449                                  	;MOV	CX,0
 28450                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28451                                  	; 16/12/2022
 28452 00004C9B 31C9                    	xor	cx,cx	; sub cx,cx
 28453                                  OPTCLUS:
 28454                                  ; AL has number of sectors available in current cluster
 28455                                  ; AH has number of sectors available in next cluster
 28456                                  ; BX has current physical cluster
 28457                                  ; CX has number of sequential sectors found so far
 28458                                  ; DX has number of sectors left to transfer
 28459                                  ; ES:BP Points to DPB
 28460                                  ; ES:SI has FAT pointer
 28461                                  
 28462                                  do_norm3:
 28463 00004C9D E88D07                  	call	UNPACK
 28464 00004CA0 7236                    	JC	short OP_ERR
 28465                                  clusgot2:
 28466 00004CA2 00C1                    	ADD	CL,AL
 28467 00004CA4 80D500                  	ADC	CH,0
 28468 00004CA7 39D1                    	CMP	CX,DX
 28469 00004CA9 7332                    	JAE	short BLKDON
 28470 00004CAB 88E0                    	MOV	AL,AH
 28471 00004CAD 43                      	INC	BX
 28472 00004CAE 39DF                    	CMP	DI,BX
 28473 00004CB0 74EB                    	JZ	short OPTCLUS
 28474 00004CB2 4B                      	DEC	BX
 28475                                  FINCLUS:
 28476 00004CB3 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28477 00004CB7 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28478 00004CB9 52                      	PUSH	DX
 28479 00004CBA 89C8                    	MOV	AX,CX
 28480                                  	;mul	word[ES:BP+2]
 28481 00004CBC 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28482                                  				; Number of sectors times sector size
 28483 00004CC0 8B36[B805]              	MOV	SI,[NEXTADD]
 28484 00004CC4 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28485 00004CC6 A3[B805]                	MOV	[NEXTADD],AX
 28486 00004CC9 58                      	POP	AX		; Number of sectors still needed
 28487 00004CCA 5A                      	POP	DX		; Starting cluster
 28488 00004CCB 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28489 00004CCD 011E[BA05]              	ADD	[LASTPOS],BX
 28490 00004CD1 5B                      	POP	BX		; BL = sector position within cluster
 28491 00004CD2 E81600                  	call	FIGREC
 28492 00004CD5 89F3                    	MOV	BX,SI
 28493                                  	; 24/09/2023
 28494                                  	; cf=0 (at the return of FIGREC)
 28495                                  	;CLC
 28496 00004CD7 C3                      	retn
 28497                                  OP_ERR:
 28498 00004CD8 83C404                  	ADD	SP,4
 28499 00004CDB F9                      	STC
 28500 00004CDC C3                      	retn
 28501                                  BLKDON:
 28502 00004CDD 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28503 00004CDF 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28504 00004CE1 FECC                    	DEC	AH		; Adjust to mean position within cluster
 28505 00004CE3 8826[7305]              	MOV	[SECCLUSPOS],AH
 28506 00004CE7 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28507 00004CE9 EBC8                    	JMP	SHORT FINCLUS
 28508                                  
 28509                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28510                                  ;---------------------------------------------------------------------------
 28511                                  ;
 28512                                  ; Procedure Name : FIGREC
 28513                                  ;
 28514                                  ; Inputs:
 28515                                  ;	  DX = Physical cluster number
 28516                                  ;	  BL = Sector position within cluster
 28517                                  ;	  ES:BP = Base of drive parameters
 28518                                  ; Outputs:
 28519                                  ;	  DX = physical sector number (LOW)
 28520                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28521                                  ; No other registers affected.
 28522                                  ;
 28523                                  ;---------------------------------------------------------------------------
 28524                                  
 28525                                  	; 10/06/2019
 28526                                  	; 20/05/2019 - Retro DOS v4.0
 28527                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28528                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28529                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28530                                  
 28531                                  	; 27/02/2024 - Retro DOS v4.1
 28532                                  	; (ds=ss)
 28533                                  FIGREC:
 28534 00004CEB 51                      	PUSH	CX
 28535                                  	;
 28536                                  	; 27/02/2024
 28537 00004CEC 31C9                    	xor	cx,cx
 28538 00004CEE 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28539                                  	;
 28540                                  	;mov	cl,[es:bp+5]
 28541 00004CF2 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28542 00004CF6 4A                      	DEC	DX
 28543 00004CF7 4A                      	DEC	DX
 28544                                  
 28545                                  	; MSDOS 3.3
 28546                                  	;SHL	DX,CL
 28547                                  
 28548                                  ;hkn; SS override HIGH_SECTOR
 28549                                  	; MSDOS 6.0
 28550                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28551                                  	; 27/02/2024
 28552                                  	;mov	word [HIGH_SECTOR],0
 28553                                  	; 24/09/2023
 28554                                  	;;xor	ch,ch				;F.C. >32mb
 28555                                  	;OR	CL,CL				;F.C. >32mb
 28556                                  	;JZ	short noshift			;F.C. >32mb
 28557                                  	; 27/02/2024
 28558 00004CF8 E309                    	jcxz	noshift
 28559                                  	; 27/02/2024
 28560                                  	;;XOR	CH,CH				;F.C. >32mb
 28561                                  rotleft:					;F.C. >32mb
 28562 00004CFA F8                      	CLC					;F.C. >32mb
 28563 00004CFB D1D2                    	RCL	DX,1				;F.C. >32mb
 28564                                  	; 10/06/2019
 28565                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28566                                  	; 27/02/2024
 28567 00004CFD D116[0706]              	rcl	word [HIGH_SECTOR],1
 28568 00004D01 E2F7                    	LOOP	rotleft				;F.C. >32mb
 28569                                  noshift:
 28570                                  	; MSDOS 3.3 & MSDOS 6.0
 28571 00004D03 08DA                    	OR	DL,BL
 28572                                  	;add	dx,[es:bp+0Bh]
 28573 00004D05 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28574                                  	; MSDOS 6.0
 28575                                  	; 10/06/2019
 28576                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28577                                  	; 24/09/2023
 28578                                  	; cx=0
 28579                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28580                                  	; 27/02/2024
 28581 00004D09 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28582                                  
 28583                                  	; MSDOS 3.3 & MSDOS 6.0
 28584 00004D0D 59                      	POP	CX
 28585                                  figrec_retn:
 28586 00004D0E C3                      	retn
 28587                                  
 28588                                  ; 20/05/2019 - Retro DOS v4.0
 28589                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28590                                  
 28591                                  ; 30/07/2018 - Retro DOS v3.0
 28592                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28593                                  
 28594                                  ;Break   <ALLOCATE -- Assign disk space>
 28595                                  ;---------------------------------------------------------------------------
 28596                                  ;
 28597                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28598                                  ;
 28599                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28600                                  ;   FAT-chained onto the end of the existing file.
 28601                                  ;
 28602                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28603                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28604                                  ;   numbered clusters, looking for the necessary free blocks.
 28605                                  ;
 28606                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28607                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28608                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28609                                  ;
 28610                                  ;       If we get to the end of the disk without satisfaction:
 28611                                  ;
 28612                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28613                                  ;               return (insufficient_disk_space)
 28614                                  ;           ELSE
 28615                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28616                                  ;
 28617                                  ;   Note that there is no multitasking interlock. There is no race when
 28618                                  ;   examining the entrys in an in-core FAT block since there will be no
 28619                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28620                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28621                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28622                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28623                                  ;   satisfied. We can't allow another activation to think this cluster is
 28624                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28625                                  ;   allocated.
 28626                                  ;
 28627                                  ;   Note that when we run out of space this algorithem will scan from
 28628                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28629                                  ;   redundantly scanning the later part of the disk. This only happens when
 28630                                  ;   we run out of space, so sue me.
 28631                                  ;
 28632                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28633                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28634                                  ;                                                                          ;
 28635                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28636                                  ;   explanation:
 28637                                  ;
 28638                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28639                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28640                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28641                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28642                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28643                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28644                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28645                                  ;   the
 28646                                  ;           LOOP   findfre         ; alloc more if needed
 28647                                  ;   instruction when the first cluster is allocated to the nul file. The
 28648                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28649                                  ;
 28650                                  ;   This method is obviously useless (because it is non-reentrant) for
 28651                                  ;   multitasking, and will have to be changed. Storing the required value on
 28652                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28653                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28654                                  ;   problems with INT 24 well.
 28655                                  ;
 28656                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28658                                  ;                                                                          ;
 28659                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28660                                  ;               CX = No. of clusters to allocate
 28661                                  ;               ES:BP = Base of drive parameters
 28662                                  ;               [THISSFT] = Points to SFT
 28663                                  ;
 28664                                  ;       EXIT    'C' set if insufficient space
 28665                                  ;                 [FAILERR] can be tested to see the reason for failure
 28666                                  ;                 CX = max. no. of clusters that could be added to file
 28667                                  ;               'C' clear if space allocated
 28668                                  ;                 BX = First cluster allocated
 28669                                  ;                 FAT is fully updated
 28670                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28671                                  ;
 28672                                  ;       USES    ALL but SI, BP
 28673                                  
 28674                                  ;callmagic  proc near
 28675                                  ;       push    ds                             ;push segment of routine 
 28676                                  ;       push    Offset MagicPatch              ;push offset for routine
 28677                                  ;       retf                                   ;simulate jmp far
 28678                                  ;                                              ;far return address is on
 28679                                  ;                                              ;stack, so far return from
 28680                                  ;                                              ;call will return this routine
 28681                                  ;callmagic  endp
 28682                                  
 28683                                  ALLOCATE:
 28684                                  	; 10/09/2018
 28685                                  ;BEGIN MAGICDRV MODIFICATIONS
 28686                                  ;
 28687                                  ;7/5/92 scottq
 28688                                  ;
 28689                                  ;This is the disk compression patch location which allows
 28690                                  ;the disk compression software to fail allocations if the
 28691                                  ;FAT would allows allocation, but the free space for compressed
 28692                                  ;data would not.
 28693                                  ;        
 28694                                  ;;;	call    far ptr MAGICPATCH
 28695                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28696                                  ;;; but we do know the segment and offset of the routine
 28697                                  ;;; so simulate a far call to dosdata:magicpatch
 28698                                  ;;; note dosassume above, so DS -> dosdata
 28699                                  
 28700                                  	; MSDOS 6.0
 28701                                          ;clc				;clear carry so we fall through
 28702                                  	;				;if no patch is present
 28703                                  	;push	cs			;push segment for far return
 28704                                          ;call	callmagic		;this is a near call
 28705                                          ;jnc	short Regular_Allocate_Path
 28706                                  	;jmp	Disk_Full_Return
 28707                                  
 28708                                  ;Regular_Allocate_Path:
 28709                                  	; 20/05/2019 - Retro DOS v4.0
 28710                                  ;END MAGICDRV MODIFICATIONS
 28711                                  
 28712                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28713                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28714                                  
 28715 00004D0F 53                              PUSH    BX                      ; save (bx)
 28716 00004D10 31DB                            XOR     BX,BX
 28717 00004D12 E81807                  	call	UNPACK
 28718 00004D15 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28719 00004D19 5B                              POP     BX
 28720 00004D1A 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28721                                  
 28722 00004D1C 51                              PUSH    CX
 28723 00004D1D 53                              PUSH    BX
 28724                                  
 28725 00004D1E 89DA                            MOV     DX,BX
 28726                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28727                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28728 00004D20 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28729 00004D24 83FB02                          cmp     bx,2
 28730 00004D27 7709                            ja	short FINDFRE
 28731                                  
 28732                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28733                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28734                                  
 28735                                  ads1:
 28736                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28737                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28738 00004D29 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28739 00004D2F BB0100                          mov     bx,1                    ; Counter next instruction so first
 28740                                                                          ;       cluster examined is 2
 28741                                  
 28742                                  ;   Scanning both forwards and backwards for a free cluster
 28743                                  ;
 28744                                  ;       (BX) = forwards scan pointer
 28745                                  ;       (CX) = clusters remaining to be allocated
 28746                                  ;       (DX) = current last cluster in file
 28747                                  ;       (TOS) = last cluster of file
 28748                                  
 28749                                  FINDFRE:
 28750 00004D32 43                              INC     BX
 28751                                  	;cmp	bx,[es:bp+0Dh]
 28752 00004D33 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28753 00004D37 7757                    	ja	short ads7	; at end of disk
 28754 00004D39 E8F106                          call	UNPACK          ; check out this cluster
 28755 00004D3C 722F                            jc	short ads4	; FAT error             [INTERR?]
 28756 00004D3E 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28757                                  
 28758                                  ;   Have found a free cluster. Chain it to the file
 28759                                  ;
 28760                                  ;       (BX) = found free cluster #
 28761                                  ;       (DX) = current last cluster in file
 28762                                  
 28763                                  	;;mov	[es:bp+1Ch],bx
 28764                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28765 00004D40 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28766 00004D44 92                              xchg    ax,dx           ; save (dx) in ax
 28767 00004D45 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28768 00004D48 E83607                  	call	PACK            ; set special "temporary" mark
 28769 00004D4B 7220                            jc	short ads4	; FAT error             [INTERR?]
 28770                                  	;;cmp	word [es:bp+1Eh],-1
 28771                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28772 00004D4D 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28773 00004D52 7404                            JZ	short NO_ALLOC	; No
 28774                                  	;;dec	word [es:bp+1Eh]
 28775                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28776 00004D54 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28777                                  NO_ALLOC:
 28778 00004D58 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28779 00004D59 87DA                            XCHG    BX,DX
 28780 00004D5B 89D0                            MOV     AX,DX
 28781 00004D5D E82107                  	call	PACK            ; link free cluster onto file
 28782                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28783                                                                  ;    cluster 0 with FIRCLUS value.
 28784 00004D60 720B                            jc	short ads4	; FAT error [INTERR?]
 28785 00004D62 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28786 00004D63 89DA                            mov     dx,bx           ; (dx) = current end of file
 28787 00004D65 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28788                                  
 28789                                  ;   We've successfully extended the file. Clean up and exit
 28790                                  ;
 28791                                  ;       (BX) = last cluster in file
 28792                                  
 28793 00004D67 BAFFFF                          MOV     DX,0FFFFH
 28794 00004D6A E81407                  	call	PACK            ; mark last cluster EOF
 28795                                  
 28796                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28797                                  ;   2 whole bytes. Hope its worth it...
 28798                                  ;
 28799                                  ;       'C' set if error
 28800                                  ;       calling (BX) and (CX) pushed on stack
 28801                                  
 28802                                  ads4:   
 28803 00004D6D 5B                      	POP     BX
 28804 00004D6E 59                              POP     CX              ; Don't need this stuff since we're successful
 28805 00004D6F 729D                            jc	short figrec_retn
 28806 00004D71 E8B906                          call	UNPACK          ; Get first cluster allocated for return
 28807                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28808 00004D74 7298                            jc	short figrec_retn
 28809 00004D76 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28810 00004D79 7293                            jc	short figrec_retn
 28811 00004D7B 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28812 00004D7D 09FF                            OR      DI,DI           ; clear 'C'
 28813 00004D7F 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28814                                  
 28815                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28816                                  ;   info
 28817                                  dofastk:
 28818                                  	; 20/05/2019
 28819                                  	; MSDOS 6.0
 28820                                  	;push	dx ; * MSDOS 6.0
 28821                                  	;;mov	dl,[es:bp+0]
 28822                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28823                                  	;mov	dl,[es:bp]
 28824                                  
 28825                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28826                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28827                                  	
 28828                                  	; 16/12/2022
 28829                                  	;push	dx ; *
 28830                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28831                                  	; 15/12/2022
 28832                                  	;mov	dl,[es:bp]
 28833                                  	
 28834                                  	; MSDOS 3.3 & MSDOS 6.0
 28835 00004D81 06                      	PUSH	ES
 28836 00004D82 C43E[9E05]              	LES     DI,[THISSFT]
 28837                                  	;mov	[es:di+0Bh],bx
 28838 00004D86 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28839                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28840                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28841 00004D8A 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28842 00004D8E 07                      	POP	ES
 28843                                  	;retn
 28844                                  
 28845                                  	;pop	dx ; * MSDOS 6.0
 28846                                  
 28847                                  	; 16/12/2022
 28848                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28849                                  	;pop	dx ; *
 28850                                  
 28851 00004D8F C3                      	retn	
 28852                                  
 28853                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28854                                  ;   of the disk...
 28855                                  
 28856                                  ads7:   
 28857 00004D90 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28858 00004D95 7592                    	jnz	short ads1	; start scan from front of disk
 28859                                  
 28860                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28861                                  ;   the space back to the free list and tell the caller how much he could have
 28862                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28863                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28864                                  ;
 28865                                  ;       (CX) = clusters remaining to be allocated
 28866                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28867                                  ;       (TOS+1) = # of clusters wanted to allocate
 28868                                  
 28869 00004D97 5B                              POP     BX              ; (BX) = last cluster of file
 28870 00004D98 BAFFFF                          MOV     DX,0FFFFH
 28871 00004D9B E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28872 00004D9E 58                              POP     AX              ; No. of clusters requested
 28873                                                                  ; Don't "retc". We are setting Carry anyway,
 28874                                                                  ;   Alloc failed, so proceed with return CX
 28875                                                                  ;   setup.
 28876 00004D9F 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28877 00004DA1 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28878                                                                  ;   Alloc failed.
 28879                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28880                                          ; MSDOS 6.0
 28881 00004DA4 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28882 00004DA9 F9                              STC
 28883 00004DAA C3                              retn
 28884                                  
 28885                                  ;-----------------------------------------------------------------------
 28886                                  ;
 28887                                  ; Procedure Name : RESTFATBYT
 28888                                  ;
 28889                                  ; SEE ALLOCATE CAVEAT
 28890                                  ;       Carry set if error (currently user FAILed to I 24)
 28891                                  ;-----------------------------------------------------------------------
 28892                                  
 28893                                  RESTFATBYT:
 28894 00004DAB 53                              PUSH    BX
 28895 00004DAC 52                              PUSH    DX
 28896 00004DAD 57                              PUSH    DI
 28897 00004DAE 31DB                            XOR     BX,BX
 28898 00004DB0 8B16[9605]                      MOV     DX,[FATBYT]
 28899 00004DB4 E8CA06                  	call	PACK
 28900 00004DB7 5F                              POP     DI
 28901 00004DB8 5A                              POP     DX
 28902 00004DB9 5B                              POP     BX
 28903                                  ; 16/12/2022
 28904                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28905                                  ;RELEASE_flush:
 28906 00004DBA C3                      	retn
 28907                                  
 28908                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28909                                  ;---------------------------------------------------------------------------
 28910                                  ;
 28911                                  ; Procedure Name : RELEASE
 28912                                  ;
 28913                                  ; Inputs:
 28914                                  ;       BX = Cluster in file
 28915                                  ;       ES:BP = Base of drive parameters
 28916                                  ; Function:
 28917                                  ;       Frees cluster chain starting with [BX]
 28918                                  ;       Carry set if error (currently user FAILed to I 24)
 28919                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28920                                  ;
 28921                                  ;-----------------------------------------------------------------------------
 28922                                  
 28923                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28924                                  	; 20/05/2019 - Retro DOS v4.0
 28925                                  RELEASE:
 28926 00004DBB 31D2                            XOR     DX,DX
 28927                                  
 28928                                  	;entry	RELBLKS
 28929                                  RELBLKS:
 28930                                  
 28931                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28932                                  ;   and free the rest in the chain.
 28933                                  
 28934 00004DBD E86D06                  	call	UNPACK
 28935 00004DC0 7224                    	jc	short RELEASE_flush
 28936 00004DC2 7422                    	jz	short RELEASE_flush
 28937 00004DC4 89F8                            MOV     AX,DI
 28938 00004DC6 52                              PUSH    DX
 28939 00004DC7 E8B706                  	call	PACK
 28940 00004DCA 5A                              POP     DX
 28941 00004DCB 7219                    	jc	short RELEASE_flush
 28942 00004DCD 09D2                            OR      DX,DX
 28943 00004DCF 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28944                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28945                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28946 00004DD1 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28947 00004DD6 7404                            JZ	short NO_DEALLOC	; No
 28948 00004DD8 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28949                                  NO_DEALLOC:
 28950 00004DDC 89C3                            MOV     BX,AX
 28951 00004DDE 48                              dec     ax              ; check for "1"
 28952 00004DDF 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28953 00004DE1 E83206                  	call	IsEOF
 28954 00004DE4 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28955                                  
 28956                                  	; 16/12/2022
 28957                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28958                                  ;%if 0
 28959                                  RELEASE_flush:
 28960                                  	; MSDOS 6.0
 28961 00004DE6 268A4600                	mov	al,[es:bp]
 28962                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28963 00004DEA 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28964 00004DEB 51                      	push	cx		;  them to be preserved.
 28965 00004DEC 06                      	push	es
 28966 00004DED 55                      	push	bp
 28967 00004DEE E84B0B                  	call	FLUSHBUF	; commit buffers for this drive
 28968 00004DF1 5D                      	pop	bp
 28969 00004DF2 07                      	pop	es
 28970 00004DF3 59                      	pop	cx
 28971 00004DF4 5E                      	pop	si
 28972                                  ;%endif
 28973                                  RET12:
 28974 00004DF5 C3                      	retn
 28975                                  
 28976                                  ;Break	<GETEOF -- Find the end of a file>
 28977                                  ;------------------------------------------------------------------------
 28978                                  ;
 28979                                  ; Procedure Name : GETEOF
 28980                                  ;
 28981                                  ; Inputs:
 28982                                  ;       ES:BP Points to DPB
 28983                                  ;       BX = Cluster in a file
 28984                                  ;       DS = CS
 28985                                  ; Outputs:
 28986                                  ;       BX = Last cluster in the file
 28987                                  ;       Carry set if error (currently user FAILed to I 24)
 28988                                  ; DI destroyed. No other registers affected.
 28989                                  ;
 28990                                  ;--------------------------------------------------------------------------
 28991                                  
 28992                                  GETEOF:
 28993 00004DF6 E83406                  	call	UNPACK
 28994 00004DF9 72FA                            jc	short RET12
 28995 00004DFB 53                              PUSH    BX
 28996 00004DFC 89FB                            MOV     BX,DI
 28997 00004DFE E81506                  	call	IsEOF
 28998 00004E01 5B                              POP     BX
 28999 00004E02 73F1                            JAE     short RET12
 29000 00004E04 89FB                            MOV     BX,DI
 29001 00004E06 EBEE                            JMP     short GETEOF
 29002                                  
 29003                                  ;============================================================================
 29004                                  ; FCB.ASM, MSDOS 6.0, 1991
 29005                                  ;============================================================================
 29006                                  ; 30/07/2018 - Retro DOS v3.0
 29007                                  ; 20/05/2019 - Retro DOS v4.0
 29008                                  
 29009                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29010                                  ;	NAME	FCB
 29011                                  
 29012                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29013                                  ;		  filename characters
 29014                                  ;
 29015                                  ;	MakeFcb
 29016                                  ;	NameTrans
 29017                                  ;	PATHCHRCMP
 29018                                  ;	GetLet
 29019                                  ;	UCase
 29020                                  ;	GetLet3
 29021                                  ;	GetCharType
 29022                                  ;	TESTKANJ
 29023                                  ;	NORMSCAN
 29024                                  ;	DELIM
 29025                                  ;
 29026                                  ;	Revision history:
 29027                                  ;
 29028                                  ;		A000  version 4.00  Jan. 1988
 29029                                  ;	
 29030                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29031                                  
 29032                                  TableLook	EQU	-1
 29033                                  
 29034                                  SCANSEPARATOR	EQU	1
 29035                                  DRVBIT		EQU	2
 29036                                  NAMBIT		EQU	4
 29037                                  EXTBIT		EQU	8
 29038                                  
 29039                                  ;----------------------------------------------------------------------------
 29040                                  ;
 29041                                  ; Procedure : MakeFcb
 29042                                  ;
 29043                                  ;----------------------------------------------------------------------------
 29044                                  
 29045                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29046                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29047                                  
 29048                                  	; 29/02/2024 - Retro DOS v4.1
 29049                                  MAKEFCB:
 29050                                  ;hkn; SS override
 29051                                  	;MOV	BYTE [SS:SpaceFlag],0
 29052 00004E08 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29053                                  	; 29/02/2024
 29054 00004E0A 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29055                                  	;test	al,2
 29056 00004E0F A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29057 00004E11 7503                    	JNZ	short DEFDRV
 29058                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29059                                  	; 29/02/2024
 29060 00004E13 268815                  	mov	[es:di],dl ; 0
 29061                                  DEFDRV:
 29062 00004E16 47                      	INC	DI
 29063 00004E17 B90800                  	MOV	CX,8
 29064                                  	;test	al,4
 29065 00004E1A A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29066 00004E1C 93                      	XCHG	AX,BX		; Save bits in BX
 29067 00004E1D B020                    	MOV	AL," "
 29068 00004E1F 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29069 00004E21 01CF                    	ADD	DI,CX
 29070 00004E23 31C9                    	XOR	CX,CX		; Don't fill any
 29071                                  FILLB:
 29072 00004E25 F3AA                    	REP	STOSB
 29073 00004E27 B103                    	MOV	CL,3
 29074 00004E29 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29075 00004E2C 7404                    	JZ	short FILLB2
 29076 00004E2E 01CF                    	ADD	DI,CX
 29077 00004E30 31C9                    	XOR	CX,CX
 29078                                  FILLB2:
 29079 00004E32 F3AA                    	REP	STOSB
 29080 00004E34 91                      	XCHG	AX,CX		; Put zero in AX
 29081 00004E35 AB                      	STOSW
 29082 00004E36 AB                      	STOSW			; Initialize two words after to zero
 29083 00004E37 83EF10                  	SUB	DI,16		; Point back at start
 29084                                  	;test	bl,1
 29085 00004E3A F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29086 00004E3D 7409                    	JZ	short SKPSPC
 29087 00004E3F E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29088 00004E42 E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29089 00004E45 7504                    	JNZ	short NOSCAN
 29090 00004E47 46                      	INC	SI		; Skip over the delimiter
 29091                                  SKPSPC:
 29092 00004E48 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29093                                  NOSCAN:
 29094 00004E4B E8EC00                  	CALL	GETLET
 29095 00004E4E 761E                    	JBE	short NODRV	; Quit if termination character
 29096 00004E50 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29097 00004E53 7519                    	JNZ	short NODRV
 29098 00004E55 46                      	INC	SI		; Skip over colon
 29099 00004E56 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29100 00004E58 760F                    	JBE	short BADDRV	; Drive letter out of range
 29101                                  
 29102 00004E5A 50                      	PUSH	AX
 29103 00004E5B E80C1B                  	call	GetVisDrv
 29104 00004E5E 58                      	POP	AX
 29105 00004E5F 730A                    	JNC	short HAVDRV
 29106                                  
 29107                                  	; 20/05/2019 - Retro DOS v4.0
 29108                                  	; MSDOS 6.0
 29109                                  ;hkn; SS override
 29110 00004E61 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29111                                  					; if not FAT drive ;AN000;
 29112 00004E67 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29113                                  BADDRV:
 29114 00004E69 B2FF                    	MOV	DL,-1
 29115                                  HAVDRV:
 29116 00004E6B AA                      	STOSB			; Put drive specifier in first byte
 29117 00004E6C 46                      	INC	SI
 29118 00004E6D 4F                      	DEC	DI		; Counteract next two instructions
 29119                                  NODRV:
 29120 00004E6E 4E                      	DEC	SI		; Back up
 29121 00004E6F 47                      	INC	DI		; Skip drive byte
 29122                                  
 29123                                  	;entry	NORMSCAN
 29124                                  NORMSCAN:
 29125 00004E70 B90800                  	MOV	CX,8
 29126 00004E73 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29127 00004E76 803C2E                  	CMP	BYTE [SI],"."
 29128 00004E79 7510                    	JNZ	short NODOT
 29129 00004E7B 46                      	INC	SI		; Skip over dot if present
 29130                                  
 29131                                  	; 24/09/2023
 29132                                  	;mov	cx,3
 29133 00004E7C B103                    	mov	cl,3	; ch=0
 29134                                  
 29135                                  	; MSDOS 6.0
 29136                                  ;hkn; SS override
 29137                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29138                                  	; 10/06/2019
 29139 00004E7E 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29140 00004E84 7402                    	JZ	short VOLOK				;AN000;
 29141 00004E86 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29142                                  	; 24/09/2023
 29143                                  	;MOV	CX,2					;AN000;
 29144 00004E87 49                      	dec	cx  ; cx=2
 29145                                  	;JMP	SHORT contvol				;AN000;
 29146                                  VOLOK:
 29147                                  	;MOV	CX,3		; Get 3-letter extension
 29148                                  contvol:
 29149 00004E88 E81300                  	CALL	MUSTGETWORD
 29150                                  NODOT:
 29151 00004E8B 88D0                    	MOV	AL,DL
 29152                                  
 29153                                  	; MSDOS 6.0
 29154                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29155                                  	; 18/12/2022
 29156 00004E8D 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29157                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29158                                  
 29159 00004E93 C3                      	retn
 29160                                  
 29161                                  NONAM:
 29162 00004E94 01CF                    	ADD	DI,CX
 29163 00004E96 4E                      	DEC	SI
 29164 00004E97 C3                      	retn
 29165                                  
 29166                                  GETWORD:
 29167 00004E98 E89F00                  	CALL	GETLET		
 29168 00004E9B 76F7                    	JBE	short NONAM	; Exit if invalid character
 29169 00004E9D 4E                      	DEC	SI
 29170                                  
 29171                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29172                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29173                                  
 29174                                  MUSTGETWORD:
 29175 00004E9E E89900                  	CALL	GETLET
 29176                                  
 29177                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29178                                  
 29179                                  ;IF NOT TABLELOOK
 29180                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29181                                  ;ENDIF
 29182 00004EA1 750C                    	JNZ	short MustCheckCX
 29183                                  
 29184                                  ;hkn; SS override
 29185 00004EA3 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29186 00004EA9 7419                    	JZ	short FILLNAM
 29187 00004EAB 3C20                    	CMP	AL," "
 29188 00004EAD 7515                    	JNZ	short FILLNAM
 29189                                  
 29190                                  MustCheckCX:
 29191 00004EAF E3ED                    	JCXZ	MUSTGETWORD
 29192 00004EB1 49                      	DEC	CX
 29193 00004EB2 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29194 00004EB4 7504                    	JNZ	short NOSTAR
 29195 00004EB6 B03F                    	MOV	AL,"?"
 29196 00004EB8 F3AA                    	REP	STOSB
 29197                                  NOSTAR:
 29198 00004EBA AA                      	STOSB
 29199 00004EBB 3C3F                    	CMP	AL,"?"
 29200 00004EBD 75DF                    	JNZ	short MUSTGETWORD
 29201 00004EBF 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29202 00004EC2 EBDA                    	JMP	short MUSTGETWORD
 29203                                  FILLNAM:
 29204 00004EC4 B020                    	MOV	AL," "
 29205 00004EC6 F3AA                    	REP	STOSB
 29206 00004EC8 4E                      	DEC	SI
 29207 00004EC9 C3                      	retn
 29208                                  
 29209                                  SCANB:
 29210 00004ECA AC                      	LODSB
 29211 00004ECB E89D00                  	CALL	SPCHK
 29212 00004ECE 74FA                    	JZ	short SCANB
 29213 00004ED0 4E                      	DEC	SI
 29214                                  scanb_retn:
 29215 00004ED1 C3                      	retn
 29216                                  
 29217                                  ;----------------------------------------------------------------------------
 29218                                  ;
 29219                                  ; Procedure Name : NameTrans
 29220                                  ;
 29221                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29222                                  ; allow spaces in pathnames
 29223                                  ;
 29224                                  ;   Inputs:	DS:SI points to start of path element
 29225                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29226                                  ;		ES = DOSGroup
 29227                                  ;		DS:SI advanced after name
 29228                                  ;   Registers modified: DI,AX,DX,CX
 29229                                  ;
 29230                                  ;----------------------------------------------------------------------------
 29231                                  
 29232                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29233                                  	; 20/05/2019 - Retro DOS v4.0
 29234                                  
 29235                                  	; 29/02/2024 - Retro DOS v4.1
 29236                                  
 29237                                  NameTrans:
 29238                                  ;hkn; SS override
 29239 00004ED2 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29240 00004ED8 16                      	push	ss
 29241 00004ED9 07                      	pop	es
 29242                                  
 29243                                  ;hkn; NAME1 is in DOSDATA
 29244 00004EDA BF[4B05]                	MOV	DI,NAME1
 29245 00004EDD 57                      	PUSH	DI
 29246                                  
 29247                                  ; 29/02/2024
 29248                                  %if 0
 29249                                  	MOV	AX,'  '	; 2020h
 29250                                  	MOV	CX,5
 29251                                  	STOSB
 29252                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29253                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29254                                  	MOV	DL,AL
 29255                                  %else
 29256                                  	; 29/02/2024
 29257                                  	; (PCDOS 7.1 IBMDOS.COM)
 29258 00004EDE B020                    	mov     al,20h ; ' '
 29259 00004EE0 B90B00                  	mov     cx,11
 29260 00004EE3 F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29261 00004EE5 91                      	xchg    ax,cx
 29262 00004EE6 99                      	cwd
 29263                                  %endif
 29264                                  
 29265 00004EE7 AA                      	STOSB
 29266 00004EE8 5F                      	POP	DI
 29267                                  
 29268 00004EE9 E884FF                  	CALL	NORMSCAN
 29269                                  
 29270                                  ;hkn; SS override for NAME1
 29271 00004EEC 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29272 00004EF2 75DD                    	jnz	short scanb_retn
 29273 00004EF4 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29274 00004EFA C3                      	retn
 29275                                  
 29276                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29277                                  ;============================================================================
 29278                                  
 29279                                  ; 20/05/2019 - Retro DOS v4.0
 29280                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29281                                  
 29282                                  ;If TableLook
 29283                                  
 29284                                  ;hkn; Table	SEGMENT
 29285                                  ;	PUBLIC	CharType
 29286                                  ;----------------------------------------------------------------------------
 29287                                  
 29288                                  ; Character type table for file name scanning
 29289                                  ; Table provides a mapping of characters to validity bits.
 29290                                  ; Four bits are provided for each character. Values 7Dh and above
 29291                                  ; have all bits set, so that part of the table is chopped off, and
 29292                                  ; the translation routine is responsible for screening these values.
 29293                                  ; The bit values are defined in DOSSYM.INC
 29294                                  
 29295                                  ;	      ; ^A and NUL
 29296                                  ;CharType:
 29297                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29298                                  ;	      ; ^C and ^B
 29299                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29300                                  ;	      ; ^E and ^D
 29301                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29302                                  ;	      ; ^G and ^F
 29303                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29304                                  ;	      ; TAB and BS
 29305                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29306                                  ;	      ; ^K and ^J
 29307                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29308                                  ;	      ; ^M and ^L
 29309                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29310                                  ;	      ; ^O and ^N
 29311                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29312                                  ;	      ; ^Q and ^P
 29313                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29314                                  ;	      ; ^S and ^R
 29315                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29316                                  ;	      ; ^U and ^T
 29317                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29318                                  ;	      ; ^W and ^V
 29319                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29320                                  ;	      ; ^Y and ^X
 29321                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29322                                  ;	      ; ESC and ^Z
 29323                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29324                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29326                                  ;	      ; ^_ and ^^
 29327                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29328                                  ;	      ; ! and SPACE
 29329                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29330                                  ;	      ; # and "
 29331                                  ;	 db   LOW (NOT FFCB+FCHK)
 29332                                  ;	      ; $ - )
 29333                                  ;	 db   3 dup (0FFh)
 29334                                  ;	      ; + and *
 29335                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29336                                  ;	      ; - and '
 29337                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29338                                  ;	      ; / and .
 29339                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29340                                  ;	      ; 0 - 9
 29341                                  ;	 db   5 dup (0FFh)
 29342                                  ;	      ; ; and :
 29343                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29344                                  ;	      ; = and <
 29345                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29346                                  ;	      ; ? and >
 29347                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29348                                  ;	      ; A - Z
 29349                                  ;	 db   13 dup (0FFh)
 29350                                  ;	      ; \ and [
 29351                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29352                                  ;	      ; ^ and ]
 29353                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29354                                  ;	      ; _ - {
 29355                                  ;	 db   15 dup (0FFh)
 29356                                  ;	      ; } and |
 29357                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29358                                  
 29359                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29360                                  ;					; character in the table
 29361                                  
 29362                                  ;FCHK	equ 1		; normal name char, no chks needed
 29363                                  ;FDELIM	equ 2		; is a delimiter
 29364                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29365                                  ;FFCB	equ 8		; is valid in an FCB
 29366                                  
 29367                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29368                                  ;----------------------------------------------------------------------------
 29369                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29370                                  
 29371                                  CharType: ; 63 bytes
 29372 00004EFB 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29373 00004F03 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29374 00004F0B F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29375 00004F13 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29376 00004F1B FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29377 00004F23 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29378 00004F2B FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29379 00004F33 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29380                                  
 29381                                  CharType_last equ ($ - CharType) * 2
 29382                                  
 29383                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29384                                  ;----------------------------------------------------------------------------
 29385                                  ;CharType:
 29386                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29387                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29388                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29389                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29390                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29391                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29392                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29393                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29394                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29395                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29396                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29397                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29398                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29399                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29400                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29401                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29402                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29403                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29404                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29405                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29406                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29407                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29408                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29409                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29410                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29411                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29412                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29413                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29414                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29415                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29416                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29417                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29418                                  
 29419                                  ;hkn; Table	ENDS
 29420                                  
 29421                                  ;ENDIF
 29422                                  
 29423                                  ; 20/05/2019 - Retro DOS v4.0
 29424                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29425                                  
 29426                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29427                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29428                                  
 29429                                  ;----------------------------------------------------------------------------
 29430                                  ;
 29431                                  ; Procedure Names : GetLet, UCase, GetLet3
 29432                                  ;
 29433                                  ; These routines take a character, convert it to upper case, and check
 29434                                  ; for delimiters.  Three different entry points:
 29435                                  ;	GetLet -  DS:[SI] = character to convert
 29436                                  ;	UCase  -  AL = character to convert
 29437                                  ;	GetLet3 - AL = character
 29438                                  ;		  [BX] = translation table to use
 29439                                  ;
 29440                                  ;	Exit (in all cases) : AL = upper case character
 29441                                  ;			      CY set if char is control char other than TAB
 29442                                  ;			      ZF set if char is a delimiter
 29443                                  ;	Uses : AX, flags
 29444                                  ;
 29445                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29446                                  ; inline version.  Return with carry set is only possible in the inline
 29447                                  ; version. The table lookup version is the one in use.
 29448                                  ;
 29449                                  ;----------------------------------------------------------------------------
 29450                                  
 29451                                  ; This entry point has character at [SI]
 29452                                  
 29453                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29454                                  GETLET:	
 29455 00004F3A AC                      	LODSB
 29456                                  
 29457                                  ; This entry point has character in AL
 29458                                  
 29459                                  	;entry	UCase
 29460                                  UCase:	
 29461                                  	; 09/08/2018
 29462                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29463                                  _UCase:
 29464 00004F3B 53                      	PUSH	BX
 29465 00004F3C BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29466                                  
 29467                                  ; Convert the character in AL to upper case
 29468                                  
 29469                                  gl_0:
 29470 00004F3F 3C61                    	CMP	AL,"a"
 29471 00004F41 7214                    	JB	short gl_2	; Already upper case, go check type
 29472 00004F43 3C7A                    	CMP	AL,"z"
 29473 00004F45 7702                    	JA	short gl_1
 29474 00004F47 2C20                    	SUB	AL,20H		; Convert to upper case
 29475                                  
 29476                                  ; Map European character to upper case
 29477                                  
 29478                                  gl_1:
 29479 00004F49 3C80                    	CMP	AL,80H
 29480 00004F4B 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29481 00004F4D 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29482                                  
 29483                                  	; M048 - Start 
 29484                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29485                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29486                                  	; preserve it.
 29487                                  
 29488                                  	; 09/08/2018 - Retro DOS v3.0
 29489                                  	; MSDOS 3.3
 29490                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29491                                  	;CS	XLAT
 29492                                  
 29493                                  	; 20/05/2019 - Retro DOS v4.0
 29494                                  
 29495                                  	; MSDOS 6.0
 29496 00004F4F 1E                      	push	ds
 29497                                  	;getdseg <ds>
 29498 00004F50 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29499 00004F55 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29500 00004F56 1F                      	pop	ds
 29501                                  
 29502                                  	; M048 - End
 29503                                  
 29504                                  ; Now check the type
 29505                                  
 29506                                  ;If TableLook
 29507                                  gl_2:
 29508                                  	; 20/05/2019 - Retro DOS v4.0
 29509 00004F57 50                      	PUSH	AX
 29510                                  
 29511                                  	; MSDOS 3.3
 29512                                  	;mov	bx,CharType
 29513                                  	;; 09/08/2018
 29514                                  	;;xlat	byte [cs:bx]
 29515                                  	;cs	xlat	
 29516                                  	
 29517                                  	; MSDOS 6.0
 29518 00004F58 E81800                  	CALL	GetCharType	; returns type flags in AL
 29519                                  	
 29520                                  	;test	al,1	
 29521 00004F5B A801                    	TEST	AL,FCHK 	; test for normal character
 29522 00004F5D 58                      	POP	AX
 29523 00004F5E 5B                      	POP	BX
 29524 00004F5F C3                      	RETN
 29525                                  
 29526                                  ; This entry has character in AL and lookup table in BX
 29527                                  
 29528                                  	; MSDOS 6.0
 29529                                  ;	;entry GetLet3
 29530                                  GETLET3: ; 10/08/2018
 29531 00004F60 53                      	PUSH	BX
 29532 00004F61 EBDC                    	JMP	short gl_0
 29533                                  ;ELSE
 29534                                  ;
 29535                                  ;gl_2:
 29536                                  ;	POP	BX
 29537                                  ;	CMP	AL,"."
 29538                                  ;	retz
 29539                                  ;	CMP	AL,'"'
 29540                                  ;	retz
 29541                                  ;	CALL	PATHCHRCMP
 29542                                  ;	retz
 29543                                  ;	CMP	AL,"["
 29544                                  ;	retz
 29545                                  ;	CMP	AL,"]"
 29546                                  ;	retz
 29547                                  ;ENDIF
 29548                                  
 29549                                  ;---------------------------------------------------------------------
 29550                                  ;
 29551                                  ; DELIM - check if character is a delimiter
 29552                                  ;	Entry : AX = character to check
 29553                                  ;	Exit  : ZF set if character is not a delimiter
 29554                                  ;	Uses  : Flags
 29555                                  ;
 29556                                  ;--------------------------------------------------------------------
 29557                                  
 29558                                  	;entry	DELIM
 29559                                  DELIM:
 29560                                  ;IF TableLook
 29561                                  	; 20/05/2019 - Retro DOS v4.0
 29562 00004F63 50                      	PUSH	AX
 29563                                  
 29564                                  	; MSDOS 3.3
 29565                                  	;push	bx
 29566                                  	;mov	bx,CharType
 29567                                  	;;09/08/2018
 29568                                  	;;xlat	byte [cs:bx]
 29569                                  	;cs	xlat
 29570                                  	;pop	bx
 29571                                  
 29572                                  	; MSDOS 6.0
 29573 00004F64 E80C00                  	CALL	GetCharType
 29574                                  	
 29575                                  	;test	al,2
 29576 00004F67 A802                    	TEST	AL,FDELIM
 29577 00004F69 58                      	POP	AX
 29578 00004F6A C3                      	RETN
 29579                                  ;ELSE
 29580                                  ;	CMP	AL,":"
 29581                                  ;	retz
 29582                                  ;
 29583                                  ;	CMP	AL,"<"
 29584                                  ;	retz
 29585                                  ;	CMP	AL,"|"
 29586                                  ;	retz
 29587                                  ;	CMP	AL,">"
 29588                                  ;	retz
 29589                                  ;
 29590                                  ;	CMP	AL,"+"
 29591                                  ;	retz
 29592                                  ;	CMP	AL,"="
 29593                                  ;	retz
 29594                                  ;	CMP	AL,";"
 29595                                  ;	retz
 29596                                  ;	CMP	AL,","
 29597                                  ;	retz
 29598                                  ;ENDIF
 29599                                  
 29600                                  ;-------------------------------------------------------------------------
 29601                                  ;
 29602                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29603                                  ;	Entry : AL = character to check
 29604                                  ;	Exit  : ZF set if character is a space
 29605                                  ;	Uses  : flags
 29606                                  ;
 29607                                  ;-------------------------------------------------------------------------
 29608                                  
 29609                                  	;entry SPCHK
 29610                                  SPCHK:
 29611                                  ;IF TableLook
 29612                                  	; 20/05/2019 - Retro DOS v4.0
 29613 00004F6B 50                      	PUSH	AX
 29614                                  
 29615                                  	; MSDOS 3.3
 29616                                  	;push	bx
 29617                                  	;mov	bx,CharType
 29618                                  	;; 09/08/2018
 29619                                  	;;xlat	byte [cs:bx]
 29620                                  	;cs	xlat
 29621                                  	;pop	bx
 29622                                  
 29623                                  	; MSDOS 6.0
 29624 00004F6C E80400                  	CALL	GetCharType
 29625                                  	
 29626                                  	;test	al,4
 29627 00004F6F A804                    	TEST	AL,FSPCHK
 29628 00004F71 58                      	POP	AX
 29629 00004F72 C3                      	RETN
 29630                                  ;ELSE
 29631                                  ;	CMP	AL,9		; Filter out tabs too
 29632                                  ;	retz
 29633                                  ;; WARNING! " " MUST be the last compare
 29634                                  ;	CMP	AL," "
 29635                                  ;	return
 29636                                  ;ENDIF
 29637                                  
 29638                                  ;-------------------------------------------------------------------------
 29639                                  ;
 29640                                  ;  GetCharType - return flag bits indicating character type
 29641                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29642                                  ;	defined above at label CharType.
 29643                                  ;
 29644                                  ;	Entry : AL = character to return type flags for
 29645                                  ;	Exit  : AL = type flags
 29646                                  ;	Uses  : AL, flags
 29647                                  ;
 29648                                  ;-------------------------------------------------------------------------
 29649                                  
 29650                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29651                                  
 29652                                  	; 20/05/2019 - Retro DOS v4.0
 29653                                  	; MSDOS 6.0
 29654                                  GetCharType:
 29655                                  	;cmp	al,7Eh
 29656 00004F73 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29657 00004F75 7316                    	jae	short gct_90		; return standard value
 29658                                  
 29659 00004F77 53                      	push	bx
 29660 00004F78 BB[FB4E]                	mov	bx,CharType		; load lookup table
 29661 00004F7B D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29662                                  	;xlat	cs:[bx] 		; get flags
 29663 00004F7D 2ED7                    	cs	xlat	
 29664 00004F7F 5B                      	pop	bx
 29665                                  
 29666                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29667                                  ; we have to shift the flags down to the low nibble
 29668                                  
 29669 00004F80 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29670                                  
 29671 00004F82 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29672 00004F84 D0E8                    	shr	al,1
 29673 00004F86 D0E8                    	shr	al,1
 29674 00004F88 D0E8                    	shr	al,1
 29675                                  gct_80:
 29676 00004F8A 240F                    	and	al,0Fh			; clear the unused nibble
 29677 00004F8C C3                      	retn
 29678                                  gct_90:
 29679 00004F8D B00F                    	mov	al,0Fh			; set all flags
 29680 00004F8F C3                      	retn
 29681                                  
 29682                                  ;----------------------------------------------------------------------------
 29683                                  ;
 29684                                  ; Procedure : PATHCHRCMP
 29685                                  ;
 29686                                  ;----------------------------------------------------------------------------
 29687                                  
 29688                                  PATHCHRCMP:
 29689 00004F90 3C2F                    	CMP	AL,'/'
 29690 00004F92 7606                    	JBE	short PathRet
 29691 00004F94 3C5C                    	CMP	AL,'\'
 29692 00004F96 C3                      	retn
 29693                                  GotFor:
 29694 00004F97 B05C                    	MOV	AL,'\'
 29695 00004F99 C3                      	retn
 29696                                  PathRet:
 29697 00004F9A 74FB                    	JZ	short GotFor
 29698 00004F9C C3                      	retn
 29699                                  
 29700                                  ;============================================================================
 29701                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29702                                  ;============================================================================
 29703                                  ; 30/07/2018 - Retro DOS v3.0
 29704                                  ; 29/04/2019 - Retro DOS v4.0
 29705                                  
 29706                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29707                                  
 29708                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29709                                  
 29710                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29711                                  ;	NAME	IBMCTRLC
 29712                                  
 29713                                  ;**	Low level routines for detecting special characters on CON input,
 29714                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29715                                  ;	process termination code, and the INT 0 divide overflow handler.
 29716                                  ;
 29717                                  ;	FATAL
 29718                                  ;	FATAL1
 29719                                  ;	reset_environment
 29720                                  ;	DSKSTATCHK
 29721                                  ;	SPOOLINT
 29722                                  ;	STATCHK
 29723                                  ;	CNTCHAND
 29724                                  ;	DIVOV
 29725                                  ;	CHARHARD
 29726                                  ;	HardErr
 29727                                  ;
 29728                                  ;	Revision history:
 29729                                  ;
 29730                                  ;	    AN000	version 4.0   Jan 1988
 29731                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29732                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29733                                  ;
 29734                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29735                                  ;	      flags register. In order to return to user normally DOS used to
 29736                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29737                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29738                                  ;
 29739                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29740                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29741                                  ;	      charhard.
 29742                                  
 29743                                  ; 29/04/2019 - Retro DOS v4.0
 29744                                  	; MSDOS 6.0
 29745                                  ;		public	LowInt23Addr		
 29746                                  LowInt23Addr: ;	LABEL	DWORD
 29747 00004F9D [CD10]0000              	DW	LowInt23, 0
 29748                                  
 29749                                  ;		public	LowInt24Addr
 29750                                  LowInt24Addr: ;	LABEL	DWORD
 29751 00004FA1 [E110]0000              	DW	LowInt24, 0
 29752                                  
 29753                                  ;		public	LowInt28Addr
 29754                                  LowInt28Addr: ;	LABEL	DWORD
 29755 00004FA5 [F510]0000              	DW	LowInt28, 0
 29756                                  
 29757                                  ;Break	<Checks for ^C in CON I/O>
 29758                                  
 29759                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29760                                  ; 05/05/2019 - Retro DOS v4.0
 29761                                  
 29762                                  ;---------------------------------------------------------------------------
 29763                                  ;
 29764                                  ; Procedure Name : DSKSTATCHK
 29765                                  ;
 29766                                  ; Check for ^C if only one level in
 29767                                  ;
 29768                                  ;---------------------------------------------------------------------------
 29769                                  
 29770                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29771                                  
 29772                                  	; 29/02/2024 - Retro DOS v4.1
 29773                                  
 29774                                  DSKSTATCHK:        
 29775                                  	;CMP	BYTE [INDOS],1
 29776 00004FA9 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29777                                  	;retnz			; Do NOTHING
 29778                                  	; 16/12/2022
 29779 00004FAF 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29780                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29781                                  	;jz	short _RET37 ; dskstatchk1
 29782                                  	;retn
 29783                                  ;_RET37:
 29784                                  ;dskstatchk1:
 29785 00004FB1 51                      	PUSH    CX
 29786 00004FB2 06                      	PUSH    ES
 29787 00004FB3 53                      	PUSH    BX
 29788 00004FB4 1E                      	PUSH    DS
 29789 00004FB5 56                      	PUSH    SI
 29790                                          
 29791                                  	;PUSH	CS
 29792                                  	;POP	ES
 29793                                  	;PUSH	CS
 29794                                  	;POP	DS
 29795                                  
 29796 00004FB6 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29797 00004FB8 8EC3                    	MOV	ES,BX		; for deviocall2
 29798 00004FBA 8EDB                    	MOV	DS,BX
 29799                                  
 29800                                  	; 16/12/2022
 29801                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29802                                  
 29803                                  	; 05/05/2019
 29804                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29805                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29806                                  	;mov	word [ss:DSKSTST],0
 29807                                  
 29808                                  	; 16/12/2022
 29809                                  	; 25/06/2019
 29810 00004FBC C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29811 00004FC1 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29812 00004FC6 C706[9503]0000          	mov	word [DSKSTST],0
 29813                                  
 29814 00004FCC BB[9203]                        MOV     BX,DSKSTCALL
 29815                                  
 29816                                  	;LDS	SI,[ss:BCON]
 29817                                          ; 25/062019
 29818 00004FCF C536[3200]              	lds	si,[BCON]
 29819                                  
 29820                                  ; 16/12/2022
 29821                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29822                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29823                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29824                                  ;	mov	word [ss:DSKSTST],0
 29825                                  ;	mov	bx,DSKSTCALL
 29826                                  ;	lds	si,[ss:BCON]
 29827                                  
 29828 00004FD3 E898F5                  	CALL	DEVIOCALL2
 29829                                  
 29830                                  	; 29/02/2024
 29831 00004FD6 1E                      	push	ds ; *
 29832 00004FD7 16                      	push	ss
 29833 00004FD8 1F                      	pop	ds
 29834                                  
 29835                                   	; 15/03/2018
 29836                                  	;;test	word [ss:DSKSTST],200h
 29837                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29838                                  	; 05/05/2019
 29839                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29840                                  	; 29/02/2024
 29841 00004FD9 F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 29842 00004FDE 7409                    	jz	short _GotCh		; No characters available
 29843                                  
 29844 00004FE0 30C0                    	XOR	AL,AL			; Set zero
 29845                                  RET36:
 29846                                  	; 29/02/2024
 29847 00004FE2 5E                      	pop	si ; *
 29848                                  	;
 29849 00004FE3 5E                      	POP	SI
 29850 00004FE4 1F                      	POP	DS
 29851 00004FE5 5B                      	POP	BX
 29852 00004FE6 07                      	POP	ES
 29853 00004FE7 59                      	POP	CX
 29854                                  	; 16/12/2022
 29855                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29856                                  _RET37:
 29857 00004FE8 C3                      	RETN
 29858                                  
 29859                                  _GotCh:
 29860                                  
 29861                                  ; 29/02/2024
 29862                                  %if 0
 29863                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 29864                                  
 29865                                  	CMP	AL,"C"-"@" ; cmp al,3
 29866                                  	JNZ	SHORT RET36
 29867                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 29868                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 29869                                  	MOV	[SS:DSKCHRET],CL
 29870                                  	; 09/09/2018
 29871                                  	MOV	word [SS:DSKSTST],0
 29872                                  	MOV	word [SS:DSKSTCNT],1
 29873                                  %else
 29874                                  	; 29/02/2024
 29875 00004FE9 A0[9F03]                	mov	al,[DSKCHRET]
 29876                                  
 29877 00004FEC 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 29878 00004FEE 75F2                    	jnz	short RET36
 29879                                  
 29880 00004FF0 C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 29881 00004FF5 C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 29882 00004FFA 880E[9F03]              	mov	[DSKCHRET],cl
 29883 00004FFE C706[9503]0000          	mov	word [DSKSTST],0
 29884 00005004 C706[A403]0100          	mov	word [DSKSTCNT],1
 29885 0000500A 1F                      	pop	ds ; *
 29886                                  %endif
 29887                                  	
 29888 0000500B E860F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29889                                  
 29890 0000500E 5E                              POP     SI
 29891 0000500F 1F                              POP     DS
 29892 00005010 5B                              POP     BX                      ; Clean stack
 29893 00005011 07                              POP     ES
 29894 00005012 59                              POP     CX
 29895 00005013 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29896                                  
 29897                                  	; 05/05/2019
 29898                                  NOSTOP:
 29899                                  	; MSDOS 6.0
 29900 00005016 3C10                    	CMP	AL,"P"-"@"
 29901 00005018 7509                    	JNZ	short check_next
 29902                                  				    	; SS override
 29903 0000501A 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29904 00005020 7405                    	JZ	short INCHKJ		; no
 29905                                  check_end:	; 24/09/2023
 29906 00005022 C3                      	retn
 29907                                  check_next:
 29908                                  	;IF	NOT TOGLPRN
 29909                                  	;CMP	AL,"N"-"@"
 29910                                  	;JZ	short INCHKJ
 29911                                  	;ENDIF
 29912                                  
 29913 00005023 3C03                    	CMP	AL,"C"-"@"
 29914                                  	; 24/09/2023
 29915                                  	;JZ	short INCHKJ
 29916                                  ;check_end:
 29917                                  	;retn
 29918 00005025 75FB                    	jnz	short check_end
 29919                                  
 29920                                  	; 24/09/2023
 29921                                  	; 08/09/2018
 29922                                  INCHKJ:	; 10/08/2018
 29923 00005027 E9A500                  	jmp	INCHK
 29924                                  
 29925                                  	; MSDOS 3.3
 29926                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 29927                                          ;JZ	short INCHKJ
 29928                                  
 29929                                  	; 15/04/2018
 29930                                          ;;IF	NOT TOGLPRN
 29931                                          ;CMP	AL,"N"-"@"
 29932                                          ;JZ	SHORT INCHKJ
 29933                                          ;;ENDIF
 29934                                  	
 29935                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 29936                                          ;JZ	short INCHKJ
 29937                                  	;RETN
 29938                                  
 29939                                  ;	; 08/09/2018
 29940                                  ;INCHKJ:; 10/08/2018
 29941                                  ;	JMP	INCHK
 29942                                  
 29943                                  ;----------------------------------------------------------------------------
 29944                                  ;
 29945                                  ; Procedure Name : SpoolInt
 29946                                  ;
 29947                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29948                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29949                                  ; the middle of an INT 24.
 29950                                  ;
 29951                                  ;----------------------------------------------------------------------------
 29952                                  
 29953                                  SPOOLINT:
 29954 0000502A 9C                      	PUSHF
 29955                                  	; 15/03/2018
 29956 0000502B 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 29957 00005031 7423                    	JZ	SHORT POPFRET
 29958 00005033 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 29959 00005039 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 29960                                  
 29961                                  	; 30/07/2018
 29962                                  
 29963                                  	; Note that we are going to allow an external program to issue system 
 29964                                  	; calls at this time. We MUST preserve IdleInt across this.
 29965                                  
 29966 0000503B 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29967                                  
 29968                                  	; 05/05/2019 - Retro DOS v4.0
 29969                                   
 29970                                  	; MSDOS 6.0
 29971 00005040 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29972 00005046 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29973 00005048 CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 29974 0000504A EB05                    	jmp	short spool_ret_addr
 29975                                  
 29976                                  do_low_int28:
 29977                                  	;call	far [ss:LowInt28Addr]
 29978 0000504C 2EFF1E[A54F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29979                                  
 29980                                  spool_ret_addr:
 29981                                  	;INT	int_spooler		; INT 28h
 29982                                  
 29983 00005051 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29984                                  POPFRET:
 29985 00005056 9D                      	POPF
 29986                                  _RET18:  
 29987 00005057 C3                      	RETN
 29988                                  
 29989                                  ; 05/05/2019 - Retro DOS v4.0
 29990                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29991                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29992                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29993                                  
 29994                                  ;----------------------------------------------------------------------------
 29995                                  ;
 29996                                  ; Procedure Name : STATCHK
 29997                                  ;
 29998                                  ;----------------------------------------------------------------------------
 29999                                  
 30000                                  STATCHK:
 30001 00005058 E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30002                                                                          ; input redirection
 30003 0000505B 53                              PUSH    BX
 30004 0000505C 31DB                            XOR     BX,BX
 30005 0000505E E836E5                          CALL	GET_IO_SFT
 30006 00005061 5B                              POP     BX
 30007 00005062 72F3                            JC      SHORT _RET18
 30008                                  
 30009 00005064 B401                            MOV     AH,1
 30010 00005066 E836F3                          CALL	IOFUNC
 30011 00005069 74BF                            JZ      SHORT SPOOLINT
 30012 0000506B 3C13                            CMP     AL,'S'-'@'
 30013 0000506D 75A7                            JNZ     SHORT NOSTOP
 30014                                  
 30015                                  	; 05/05/2019
 30016                                  	; MSDOS 6.0			; SS override
 30017 0000506F 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30018 00005075 75AB                    	JNZ	short check_end		; AN000; yes
 30019                                  
 30020 00005077 30E4                            XOR     AH,AH
 30021 00005079 E823F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30022 0000507C EB4A                            JMP     SHORT PAUSOSTRT
 30023                                  PRINTOFF:
 30024                                  PRINTON:
 30025 0000507E 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30026                                  
 30027                                  	; 30/07/2018 - Retro DOS v3.0
 30028 00005083 53                      	PUSH	BX
 30029 00005084 BB0400                  	MOV	BX,4
 30030 00005087 E80DE5                  	call	GET_IO_SFT
 30031 0000508A 5B                      	POP	BX
 30032 0000508B 72CA                    	jc	short _RET18
 30033 0000508D 06                      	PUSH	ES
 30034 0000508E 57                      	PUSH	DI
 30035 0000508F 1E                      	PUSH	DS
 30036 00005090 07                      	POP	ES
 30037 00005091 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30038                                  	;test	word [es:di+5],800h
 30039                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30040                                  	; 05/05/2019
 30041 00005093 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30042 00005098 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30043                                  
 30044                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30045                                  					; See if allowed
 30046 0000509A 50                      	push	ax
 30047 0000509B B82611                  	mov	ax,1126h
 30048 0000509E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30049                                  			; Return: CF set on error, AX = error code
 30050                                  			; STACK unchanged
 30051 000050A0 58                      	pop	ax
 30052                                  
 30053 000050A1 730F                    	JNC	short NORM_PR 		; Echo is OK
 30054                                  
 30055                                  					; SS override
 30056 000050A3 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30057                                  
 30058                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30059                                  
 30060 000050A9 50                      	push    ax
 30061 000050AA B82411                  	mov     ax,1124h
 30062 000050AD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30063                                  			; ES:DI -> SFT, SS = DOS CS
 30064 000050AF 58                      	pop     ax
 30065                                  
 30066 000050B0 EB10                    	JMP	SHORT RETP6
 30067                                  NORM_PR:
 30068 000050B2 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30069 000050B8 7505                    	JNZ	short PRNOPN
 30070 000050BA E838F4                  	call	DEV_CLOSE_SFT
 30071 000050BD EB03                    	JMP	SHORT RETP6
 30072                                  PRNOPN:
 30073 000050BF E82BF4                  	call	DEV_OPEN_SFT
 30074                                  RETP6:
 30075 000050C2 5F                      	POP	DI
 30076 000050C3 07                      	POP	ES
 30077                                  STATCHK_RETN:
 30078 000050C4 C3                              RETN
 30079                                  PAUSOLP:
 30080 000050C5 E862FF                          CALL    SPOOLINT
 30081                                  PAUSOSTRT:
 30082 000050C8 B401                            MOV     AH,1
 30083 000050CA E8D2F2                          CALL	IOFUNC
 30084 000050CD 74F6                            JZ      SHORT PAUSOLP
 30085                                  INCHK:
 30086 000050CF 53                              PUSH    BX
 30087 000050D0 31DB                            XOR     BX,BX
 30088 000050D2 E8C2E4                          CALL	GET_IO_SFT
 30089 000050D5 5B                              POP     BX
 30090 000050D6 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30091 000050D8 30E4                            XOR     AH,AH
 30092 000050DA E8C2F2                          CALL	IOFUNC
 30093                                  	; 30/07/2018
 30094                                  	; MSDOS 3.3
 30095                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30096                                          ;JNZ	SHORT NOPRINT
 30097                                  
 30098                                  	;cmp	byte [SS:SCAN_FLAG],0
 30099                                  	;JZ	SHORT PRINTON	
 30100                                  	;mov	byte [ss:SCAN_FLAG],0
 30101                                  
 30102                                  	; 05/05/2019
 30103                                  	; MSDOS 6.0
 30104 000050DD 3C10                    	CMP	AL,"P"-"@"
 30105                                  	;;;;  7/14/86	ALT_Q key fix
 30106 000050DF 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30107                                  ;NOPRINT:	
 30108                                  	;IF	NOT TOGLPRN
 30109                                  	;CMP	AL,"N"-"@"
 30110                                  	;JZ	short PRINTOFF
 30111                                  	;ENDIF
 30112 000050E1 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30113                                  	;retnz
 30114 000050E3 75DF                    	jnz	short STATCHK_RETN
 30115                                  
 30116                                  	; !! NOTE: FALL THROUGH !!
 30117                                  
 30118                                  ;---------------------------------------------------------------------------
 30119                                  ;
 30120                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30121                                  ;
 30122                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30123                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30124                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30125                                  ; processing to continue; 2) the original interrupt return address to the code
 30126                                  ; that performed the function call in the first place. If the user CTRL-C
 30127                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30128                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30129                                  ; is simulated.
 30130                                  ;
 30131                                  ;---------------------------------------------------------------------------
 30132                                  
 30133                                  CNTCHAND:
 30134                                  	; MSDOS 6.0			; SS override
 30135                                  					; AN002; from RAWOUT
 30136                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30137                                  	;JNZ	short around_deadlock 	; AN002;
 30138                                  
 30139                                  	; 05/05/2019 - Retro DOS v4.0
 30140                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30141 000050E5 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30142 000050EB 7508                    	JNZ	short around_deadlock 	; AN002;
 30143                                  
 30144 000050ED B003                            MOV     AL,3			; Display "^C"
 30145 000050EF E8EBC5                          CALL	BUFOUT
 30146 000050F2 E889C4                          CALL	CRLF
 30147                                  around_deadlock:
 30148 000050F5 16                              PUSH    SS
 30149 000050F6 1F                              POP     DS
 30150 000050F7 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30151 000050FC 7403                            JZ      SHORT NOSWAP
 30152 000050FE E829E1                          CALL	SWAPBACK
 30153                                  NOSWAP:
 30154 00005101 FA                      	CLI				; Prepare to play with stack
 30155 00005102 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30156 00005106 8B26[8405]              	MOV	SP,[USER_SP]
 30157 0000510A E842B3                          CALL	restore_world       ; User registers now restored
 30158                                  
 30159                                  	; 30/07/2018 - Retro DOS v3.0 
 30160                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30161                                          ; 14/03/2018 - Retro DOS v2.0
 30162                                  	;MOV	BYTE [CS:INDOS],0	
 30163                                          ;MOV	BYTE [CS:ERRORMODE],0
 30164                                          ;MOV	[CS:ConC_Spsave],SP
 30165                                  	;clc	;30/07/2018
 30166                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30167                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30168                                  			; Return: return via RETF 2 with CF set
 30169                                  			; DOS will abort program with errorlevel 0
 30170                                  			; else
 30171                                  			; interrupted DOS call continues
 30172                                  
 30173                                  	; 05/05/2019 - Retro DOS v4.0
 30174                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30175                                  
 30176                                  	; CS was used to address these variables. We have to use DOSDATA
 30177                                  	
 30178 0000510D 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30179                                  			; (pop es, after 'call restore_world')	
 30180 0000510E 1E                      	push	ds
 30181                                  	;getdseg <ds>			; ds -> dosdata
 30182 0000510F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30183 00005114 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30184 00005119 C606[2003]00            	mov	byte [ERRORMODE],0
 30185 0000511E 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30186                                  	; User SP has changed because of push. Adjust for it
 30187 00005122 8306[3203]02            	add	word [ConC_Spsave],2
 30188                                  
 30189 00005127 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30190 0000512C 1F                       	pop	ds	; restore ds
 30191 0000512D 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30192 0000512F F8                      	CLC				
 30193 00005130 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30194 00005132 EB06                    	jmp	short ctrlc_ret_addr
 30195                                  
 30196                                  	; 05/05/2019
 30197                                  do_low_int23:
 30198 00005134 F8                      	clc
 30199 00005135 2EFF1E[9D4F]            	call	far [cs:LowInt23Addr]	
 30200                                  
 30201                                  	; 30/07/2018 
 30202                                  
 30203                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30204                                  
 30205                                  ; The user has returned to us. The circumstances we allow are:
 30206                                  ;
 30207                                  ;   IRET	We retry the operation by redispatching the system call
 30208                                  ;   CLC/RETF	POP the stack and retry
 30209                                  ;   ... 	Exit the current process with ^C exit
 30210                                  ;
 30211                                  ; User's may RETURN to us and leave interrupts on. 
 30212                                  ; Turn 'em off just to be sure
 30213                                  
 30214                                  ctrlc_ret_addr: ; 05/05/2019
 30215                                  
 30216 0000513A FA                      	CLI
 30217                                  
 30218                                  	; MSDOS 3.3 
 30219                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30220                                  	;PUSHF				; and the flags (maybe new call)
 30221                                  	;POP	AX
 30222                                  
 30223                                  	; 05/05/2019
 30224                                  	; MSDOS 6.0
 30225                                  
 30226                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30227                                  
 30228 0000513B 50                      	push	ax
 30229 0000513C 8CD8                    	mov	ax,ds
 30230                                  	;getdseg <ds>			; ds -> dosdata
 30231 0000513E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30232 00005143 A3[0A0D]                	mov	[TEMPSEG],ax
 30233 00005146 58                      	pop	ax
 30234 00005147 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30235 0000514A 9C                      	pushf				; and the flags (maybe new call)
 30236 0000514B 58                      	pop	ax
 30237                                  
 30238                                  ; See if the input stack is identical to the output stack
 30239                                  
 30240                                  	; MSDOS 3.3
 30241                                  	;CMP	SP,[CS:ConC_Spsave]
 30242                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30243                                  
 30244                                  	; MSDOS 6.0
 30245 0000514C 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30246 00005150 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30247                                  
 30248                                  ; Repeat the operation by redispatching the system call.
 30249                                  
 30250                                  ctrlc_repeat:
 30251                                  	; MSDOS 3.3
 30252                                  	;MOV	AX,[CS:USER_IN_AX]
 30253                                  	; 05/05/2019
 30254                                  	; MSDOS 6.0
 30255 00005152 A1[3A03]                	mov	ax,[USER_IN_AX]
 30256 00005155 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30257                                  	; MSDOS 3.3 & MSDOS 6.0 
 30258                                  	;transfer COMMAND
 30259                                  COMMANDJ:
 30260 00005159 E9ABB1                  	JMP	COMMAND
 30261                                  
 30262                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30263                                  ; RETF'd leaving some flags on the stack and examine the input
 30264                                  
 30265                                  ctrlc_try_new:
 30266                                  	; 29/02/2024
 30267                                  	;ADD	SP,2			; pop those flags
 30268                                  	;
 30269                                  	;;test	ax,1
 30270                                  	;TEST	AX,f_Carry		; did he return with carry?
 30271 0000515C A801                    	test	al,f_Carry ; test al,1
 30272                                  	;
 30273                                  	; 29/02/2024
 30274 0000515E 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30275                                  	;
 30276 0000515F 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30277                                  
 30278                                  	; MSDOS 6.0
 30279 00005161 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30280                                  
 30281                                  	; Well...  time to abort the user.  
 30282                                  	; Signal a ^C exit and use the EXIT system call..
 30283                                  
 30284                                  ctrlc_abort:
 30285                                  	; MSDOS 3.3
 30286                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30287                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30288                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30289                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30290                                  	;;JMP	SHORT COMMANDJ
 30291                                  	;JMP	COMMAND
 30292                                  
 30293                                  	; 05/05/2019 - Retro DOS v4.0
 30294                                  	; MSDOS 6.0
 30295 00005165 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30296 00005168 1E                      	push	ds
 30297                                  	;getdseg <ds>			; ds -> dosdata
 30298 00005169 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30299 0000516E C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30300 00005173 1F                      	pop	ds
 30301                                  	;transfer COMMAND		; give up by faking $EXIT
 30302 00005174 EBE3                    	JMP	SHORT COMMANDJ
 30303                                  	;JMP	COMMAND
 30304                                  
 30305                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30306                                  ;----------------------------------------------------------------------------
 30307                                  ;
 30308                                  ; Procedure Name : DIVOV
 30309                                  ;
 30310                                  ; Default handler for division overflow trap
 30311                                  ;
 30312                                  ;----------------------------------------------------------------------------
 30313                                  
 30314                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30315                                  DIVOV: 
 30316                                  	; 05/05/2019 - Retro DOS v4.0
 30317                                  	; 30/07/2018
 30318                                  	; 07/07/2018 - Retro DOS v3.0
 30319 00005176 BE[A209]                	mov	si,DIVMES
 30320 00005179 2E8B1E[B509]            	mov	bx,[cs:DivMesLen]
 30321                                  	;mov	ax,cs
 30322                                  	;mov	ss,ax
 30323                                  	; 05/05/2019
 30324                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30325 0000517E 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30326 00005183 BC[A007]                	mov     sp,AUXSTACK
 30327                                  	;call	RealDivOv ; MSDOS 3.3
 30328 00005186 E80200                  	call	_OUTMES ; MSDOS 6.0
 30329 00005189 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30330                                  
 30331                                  ; 30/07/2018
 30332                                  
 30333                                  ; MSDOS 6.0
 30334                                  ;---------------------------------------------------------------------------
 30335                                  ;
 30336                                  ; Procedure Name : OutMes
 30337                                  ;
 30338                                  ;
 30339                                  ; OutMes: perform message output
 30340                                  ; Inputs:   SS:SI points to message
 30341                                  ;	    BX has message length
 30342                                  ; Outputs:  message to BCON
 30343                                  ;
 30344                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30345                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30346                                  ;NB. This procedure is called only from DIVOV. -SR
 30347                                  ;
 30348                                  ;---------------------------------------------------------------------------
 30349                                  
 30350                                  ;MSDOS 3.3
 30351                                  ;---------------------------------------------------------------------------
 30352                                  ; RealDivOv: perform actual divide overflow stuff.
 30353                                  ; Inputs:   none
 30354                                  ; Outputs:  message to BCON
 30355                                  ;---------------------------------------------------------------------------
 30356                                  
 30357                                  	; 05/05/2019 - Retro DOS v4.0
 30358                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30359                                  
 30360                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30361                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30362                                  
 30363                                  ;---------------------------------------------------------------------------
 30364                                  ;
 30365                                  ; Procedure Name : OutMes
 30366                                  ;
 30367                                  ; OutMes: perform message output
 30368                                  ; Inputs:   SS:SI points to message
 30369                                  ;	    BX has message length
 30370                                  ; Outputs:  message to BCON
 30371                                  ;
 30372                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30373                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30374                                  ;NB. This procedure is called only from DIVOV. -SR
 30375                                  ;
 30376                                  ;---------------------------------------------------------------------------
 30377                                  
 30378                                  	; 30/07/2018
 30379                                  	; MSDOS 6.0
 30380                                  _OUTMES:
 30381                                  	; MSDOS 3.3
 30382                                  ;RealDivOv:
 30383                                  	; 07/07/2018 - Retro DOS v3.0
 30384                                          ;Context ES
 30385 0000518B 16                      	push	ss ; 05/05/2019
 30386                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30387 0000518C 07                      	POP	ES
 30388                                          ;Context DS
 30389 0000518D 16                      	push	ss ; 05/05/2019	
 30390                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30391 0000518E 1F                      	POP	DS
 30392 0000518F C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30393 00005194 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30394 00005199 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30395                                  	; BX = [DivMesLen] = 19
 30396 0000519F 891E[A403]                      MOV     [DSKSTCNT],BX
 30397 000051A3 BB[9203]                        MOV     BX,DSKSTCALL
 30398 000051A6 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30399                                  	; 08/09/2018
 30400                                  	;mov	[DEVIOBUF_PTR],si
 30401                                  	; MSDOS 6.0
 30402                                  					; CS is used for string, fill in 
 30403                                  					; segment address
 30404                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024 
 30405 000051AA 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30406                                  
 30407 000051AE C536[3200]                      LDS     SI,[BCON]
 30408 000051B2 E8B9F3                          CALL	DEVIOCALL2
 30409                                  
 30410                                  	;; 14/03/2018
 30411                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30412                                  	;; 08/09/2018
 30413                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30414                                          ;MOV	WORD [CS:DSKSTCNT],1
 30415                                          
 30416                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30417                                  
 30418                                  	; ES still points to DOSDATA. ES is
 30419                                  					; not destroyed by deviocall2. So use
 30420                                  					; ES override.
 30421                                  
 30422 000051B5 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30423 000051BC 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30424                                  
 30425 000051C3 C3                      	RETN
 30426                                  
 30427                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30428                                  ;---------------------------------------------------------------------------
 30429                                  ;
 30430                                  ; Procedure Name : CHARHARD
 30431                                  ;
 30432                                  ;
 30433                                  ; Character device error handler
 30434                                  ; Same function as HARDERR
 30435                                  ;
 30436                                  ;---------------------------------------------------------------------------
 30437                                  
 30438                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30439                                  CHARHARD:
 30440                                  	; 05/05/2019 - Retro DOS v4.0
 30441                                  	; 30/07/2018
 30442                                  	; 08/07/2018 - Retro DOS v3.0
 30443                                  
 30444                                  	; MSDOS 6.0
 30445                                  		   			; M024 - start
 30446 000051C4 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30447                                  	;jne	short @f		; Y: allow fail
 30448 000051CA 750B                    	jne	short chard1
 30449                                  
 30450 000051CC 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30451                                  
 30452 000051CF 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30453 000051D5 7503                    	jnz	short ctrlp		; Y: 
 30454                                  ;@@:
 30455                                  chard1:					; M024 - end
 30456                                  	; MSDOS 6.0 & MSDOS 3.3
 30457                                  
 30458                                  ; Character device error handler
 30459                                  ; Same function as HARDERR
 30460                                  
 30461                                  	;or	ah,38h
 30462 000051D7 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30463                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30464 000051DA 368826[4B03]            	mov	[SS:ALLOWED],ah
 30465                                  
 30466                                  	; 15/03/2018
 30467 000051DF 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30468 000051E4 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30469 000051E9 56                              PUSH    SI
 30470                                  	;and	di,0FFh
 30471 000051EA 81E7FF00                        AND     DI,STECODE
 30472 000051EE 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30473 000051F0 E86400                          CALL    FATALC
 30474 000051F3 5E                              POP     SI
 30475                                  	;return
 30476 000051F4 C3                              RETN
 30477                                  
 30478                                  ;---------------------------------------------------------------------------
 30479                                  ;
 30480                                  ; Procedure Name : HardErr
 30481                                  ;
 30482                                  ; Hard disk error handler. Entry conditions:
 30483                                  ;	DS:BX = Original disk transfer address
 30484                                  ;	DX = Original logical sector number
 30485                                  ;	CX = Number of sectors to go (first one gave the error)
 30486                                  ;	AX = Hardware error code
 30487                                  ;	DI = Original sector transfer count	
 30488                                  ;	ES:BP = Base of drive parameters
 30489                                  ;	[READOP] = 0 for read, 1 for write
 30490                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30491                                  ; Output:
 30492                                  ;	[FAILERR] will be set if user responded FAIL
 30493                                  ;
 30494                                  ;--------------------------------------------------------------------------
 30495                                  
 30496                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30497                                  HARDERR:
 30498                                  	; 05/05/2019 - Retro DOS v4.0
 30499                                  	; 30/07/2018
 30500                                  	; 08/07/2018 - Retro DOS v3.0
 30501 000051F5 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30502                                  	;and	di,0FFh
 30503 000051F6 81E7FF00                	AND	DI,STECODE		; And off status bits
 30504                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30505                                  	;cmp	di,0
 30506 000051FA 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30507 000051FD 750A                    	JNZ	short NOSETWRPERR
 30508 000051FF 50                      	PUSH    AX
 30509                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30510                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30511                                  	;;MOV	AL,[ES:BP+0]
 30512                                  	; 15/12/2022
 30513 00005200 268A4600                	mov	al,[ES:BP]
 30514                                  		; 15/03/2018
 30515 00005204 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30516 00005208 58                      	POP	AX
 30517                                  NOSETWRPERR:
 30518 00005209 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30519 0000520B 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30520 0000520D 52                      	PUSH    DX
 30521                                  	; 08/07/2018
 30522                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30523 0000520E 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30524 00005212 5A                      	POP	DX
 30525 00005213 01C3                    	ADD	BX,AX			; First address for retry
 30526 00005215 30E4                    	XOR	AH,AH			; Flag disk section in error
 30527                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30528 00005217 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30529 0000521B 721A                    	JB	SHORT ERRINT
 30530 0000521D FEC4                    	INC	AH			; Flag for FAT
 30531                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30532                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30533 0000521F 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30534 00005223 7308                    	JAE	short TESTDIR		; No
 30535                                  		; Err in FAT must force recomp of freespace
 30536                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30537                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30538 00005225 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30539 0000522B EB0A                    	JMP	SHORT ERRINT
 30540                                  TESTDIR:
 30541 0000522D FEC4                    	INC	AH
 30542                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30543 0000522F 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30544 00005233 7202                    	JB	SHORT ERRINT
 30545 00005235 FEC4                    	INC	AH			; Must be in data area
 30546                                  ERRINT:
 30547 00005237 D0E4                    	SHL	AH,1			; Make room for read/write bit
 30548 00005239 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30549                                  
 30550                                  	; 15/08/2018
 30551                                  					; SS override for allowed and EXITHOLD
 30552 0000523E 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30553                                  
 30554                                  	;entry   FATAL
 30555                                  FATAL:
 30556                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30557                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30558                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30559                                  	; 15/12/2022
 30560 00005243 268A4600                	MOV	AL,[ES:BP]
 30561                                  
 30562                                  	;entry   FATAL1
 30563                                  FATAL1:  
 30564                                  	; 15/03/2018	
 30565 00005247 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30566 0000524C 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30567                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30568                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30569 00005251 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30570 00005255 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30571                                  
 30572                                  	; DI has the INT-24-style extended error. We now map the error code
 30573                                  	; for this into the normalized get extended error set by using the
 30574                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30575                                  	; the device returned codes and leave all others beyond the look up
 30576                                  	; table alone.
 30577                                  
 30578                                  	; 08/07/2018 - Retro DOS v3.0
 30579                                  FATALC:
 30580 00005257 E89501                  	call	SET_I24_EXTENDED_ERROR
 30581                                  	;cmp	di,0Ch
 30582 0000525A 83FF0C                  	CMP	DI,error_I24_gen_failure
 30583 0000525D 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30584 0000525F BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30585                                  					;  Only come via GetExtendedError
 30586                                  ;** ----------------------------------------------------------------
 30587                                  ;
 30588                                  ; Entry point used by REDIRector on Network I 24 errors.
 30589                                  ;
 30590                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30591                                  ;
 30592                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30593                                  ;	EXITHOLD set for restore of ES:BP.
 30594                                  ; ------------------------------------------------------------------
 30595                                  	;entry	NET_I24_ENTRY
 30596                                  NET_I24_ENTRY:
 30597                                  GOT_RIGHT_CODE:
 30598 00005262 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30599 00005268 7404                    	JZ	SHORT NoSetFail
 30600 0000526A B003                    	MOV	AL,3
 30601 0000526C EB6C                    	JMP	short FailRet
 30602                                  NoSetFail:
 30603 0000526E 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30604 00005273 16                      	PUSH	SS
 30605 00005274 07                      	POP	ES
 30606                                      
 30607                                  	; Wango!!! We may need to free some user state info... In 
 30608                                  	; particular, we may have locked down a JFN for a user and he may
 30609                                  	; NEVER return to us. Thus,we need to free it here and then
 30610                                  	; reallocate it when we come back.
 30611                                  
 30612 00005275 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30613 0000527B 740C                    	JZ	short _NoFree
 30614 0000527D 1E                      	push	ds
 30615 0000527E 56                      	push	si
 30616 0000527F 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30617 00005284 C604FF                  	MOV	BYTE [SI],0FFH
 30618 00005287 5E                      	pop	si
 30619 00005288 1F                      	pop	ds
 30620                                  
 30621                                  _NoFree:
 30622 00005289 FA                      	CLI
 30623                                  					; Prepare to play with stack
 30624 0000528A 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30625 0000528F 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30626                                  
 30627                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30628                                  
 30629                                  	;; Extended Open hooks
 30630                                  					; AN000;IFS.I24 error disabled
 30631                                  	;test	byte [ss:EXTOPEN_ON],2
 30632 00005294 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30633 0000529A 7404                    	JZ	short i24yes		; AN000;IFS.no
 30634                                  faili24:				; AN000;
 30635 0000529C B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30636 0000529E EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30637                                  i24yes: 				; AN000;
 30638                                  	;; Extended Open hooks
 30639                                  
 30640 000052A0 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30641 000052A5 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30642                                  
 30643                                  	;;int	24h	
 30644                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30645                                  					; must preserve ES
 30646                                  	; 05/05/2019
 30647 000052AA 26803E[F711]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30648 000052B0 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30649 000052B2 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30650                                  					; must preserve ES
 30651 000052B4 EB05                    	jmp	short criterr_ret_addr
 30652                                  
 30653                                  do_low_int24:
 30654                                  	; 05/05/2019
 30655                                  	; MSDOS 6.0
 30656 000052B6 2EFF1E[A14F]            	call    far [cs:LowInt24Addr]
 30657                                  criterr_ret_addr:
 30658 000052BB 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30659 000052C0 268C16[8605]            	MOV	[ES:USER_SS],SS
 30660 000052C5 8CC5                    	MOV	BP,ES
 30661 000052C7 8ED5                    	MOV	SS,BP
 30662                                  passi24:
 30663 000052C9 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30664 000052CE 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30665 000052D3 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30666 000052D9 FB                      	STI
 30667                                  FailRet:
 30668 000052DA 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30669                                  	
 30670                                  	; 08/07/2018
 30671                                  
 30672                                  	; Triage the user's reply.
 30673                                  
 30674 000052DF 3C01                    	CMP	AL,1
 30675 000052E1 723D                    	JB	short CheckIgnore	; 0 => ignore
 30676 000052E3 7445                    	JZ	short CheckRetry	; 1 => retry
 30677 000052E5 3C03                    	CMP	AL,3			; 3 => fail
 30678 000052E7 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30679                                  
 30680                                  	; The reply was fail. See if we are allowed to fail.
 30681                                  
 30682                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30683                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30684                                  	;test	byte [ss:ALLOWED],8
 30685 000052E9 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30686 000052EF 7441                    	jz	short DoAbort		; No, do abort
 30687                                  DoFail:
 30688 000052F1 B003                    	MOV	AL,3			; just in case...
 30689                                  					; AN000;EO. I24 error disabled
 30690                                  	; 05/05/2019
 30691                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30692 000052F3 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30693 000052F9 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30694                                  	
 30695 000052FB 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30696                                  CleanUp:
 30697 00005300 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30698 00005306 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30699                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30700                                  	;jnz	short CleanUp2
 30701                                  	;retn
 30702                                  	; 17/12/2022
 30703 0000530C 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30704                                  CleanUp2:
 30705 0000530E 1E                      	push	ds
 30706 0000530F 56                      	push	si
 30707 00005310 50                      	push	ax
 30708 00005311 36A1[AA05]              	MOV	AX,[ss:SFN]
 30709 00005315 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30710 0000531A 8804                    	MOV	[SI],AL
 30711 0000531C 58                      	pop	ax
 30712 0000531D 5E                      	pop	si
 30713 0000531E 1F                      	pop	ds
 30714                                  Cleanup_retn:
 30715 0000531F C3                      	retn
 30716                                  
 30717                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30718                                  
 30719                                  CheckIgnore:
 30720                                  	;test	byte [ss:ALLOWED],20h
 30721 00005320 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30722                                  CheckRI:	; 29/02/2024
 30723 00005326 74C9                    	jz	short DoFail			; No, do fail
 30724 00005328 EBD6                    	jmp	short CleanUp
 30725                                  
 30726                                  	; The reply was RETRY. See if we are allowed to retry.
 30727                                  
 30728                                  CheckRetry:
 30729                                  	;test	byte [ss:ALLOWED],10h
 30730 0000532A 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30731                                  	;jz	short DoFail			; No, do fail
 30732                                  	;JMP	short CleanUp
 30733                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30734 00005330 EBF4                    	jmp	short CheckRI
 30735                                  
 30736                                  	; The reply was ABORT.
 30737                                  DoAbort:
 30738 00005332 16                      	push	ss
 30739 00005333 1F                      	pop	ds
 30740                                  
 30741 00005334 803E[5703]00            	CMP	byte [CONSWAP],0
 30742 00005339 7403                    	JZ	short NOSWAP2
 30743 0000533B E8ECDE                  	call	SWAPBACK
 30744                                  NOSWAP2:
 30745                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30746                                  	; turn this abort into a fail.
 30747                                  
 30748                                  	;test	[fAborting],0FFh
 30749                                  	;jnz	short DoFail
 30750                                  
 30751 0000533E 803E[5903]00            	cmp	byte [fAborting],0
 30752 00005343 75AC                    	JNZ	short DoFail
 30753                                  
 30754                                  	; Set return code
 30755                                  
 30756 00005345 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30757 0000534A 30C0                    	XOR	AL,AL
 30758                                  
 30759                                  	; we are truly aborting the process. Go restore information from 
 30760                                  	; the PDB as necessary.
 30761                                  
 30762 0000534C E9850D                  	jmp	exit_inner
 30763                                  
 30764                                  ;** --------------------------------------------------------------------------
 30765                                  ;
 30766                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30767                                  ; different, then an old-style return is performed. If they are the same,
 30768                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30769                                  ; the source of the terminate addresses.
 30770                                  ;
 30771                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30772                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30773                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30774                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30775                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30776                                  ; operation. In essence, we dis-allow the abort response.
 30777                                  ;
 30778                                  ; output:   none.
 30779                                  ; ----------------------------------------------------------------------------
 30780                                  
 30781                                  	;entry	reset_environment
 30782                                  	
 30783                                  reset_environment:
 30784                                  	; 30/07/2018 - Retro DOS v3.0
 30785                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30786                                  
 30787                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30788                                  
 30789 0000534F 1E                      	PUSH	DS			; save PDB of process
 30790                                  
 30791                                  	; There are no critical sections in force. Although we may enter
 30792                                  	; here with critical sections locked down, they are no longer 
 30793                                  	; relevant. We may safely free all allocated resources.
 30794                                  
 30795 00005350 B482                    	MOV	AH,82h
 30796                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30797                                  	;int	2Ah 	
 30798 00005352 CD2A                    	INT	int_IBM
 30799                                  
 30800                                  					; SS override
 30801 00005354 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30802                                  
 30803                                  					; DOS 4.00 doesn't need it
 30804                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30805                                  					; Allow REDIR to clear some stuff
 30806                                  					; On process exit.
 30807 0000535A B82211                  	mov	ax, 1122h
 30808 0000535D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30809                                  			; SS = DOS CS
 30810                                  	;mov	al,22h	
 30811 0000535F B022                    	MOV	AL,int_terminate
 30812 00005361 E81BBB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30813                                  
 30814 00005364 59                      	POP	CX			; get ThisPDB
 30815 00005365 06                      	push	es
 30816 00005366 53                      	push	bx			; save return address
 30817                                  
 30818 00005367 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30819 0000536C 8EDB                    	MOV	DS,BX
 30820 0000536E A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30821                                  
 30822                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30823                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 30824                                  	; is not Exit_keep_process
 30825                                  	
 30826 00005371 39D8                    	CMP	AX,BX
 30827 00005373 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30828 00005375 39CB                    	CMP	BX,CX
 30829 00005377 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30830 00005379 50                      	PUSH	AX			; save parent
 30831                                  
 30832                                  					; SS override
 30833                                  	;cmp	byte [SS:EXIT_TYPE],3
 30834 0000537A 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30835 00005380 7406                    	JZ	short reset_to_parent 	; keeping this process
 30836                                  
 30837                                  	; We are truly removing a process. Free all allocation blocks
 30838                                  	; belonging to this PDB
 30839                                  
 30840                                  	;invoke	arena_free_process
 30841 00005382 E8870D                  	call	arena_free_process
 30842                                  
 30843                                  	; Kill off remainder of this process. Close file handles and signal
 30844                                  	; to relevant network folks that this process is dead. Remember that
 30845                                  	; CurrentPDB is STILL the current process!
 30846                                  
 30847                                  	;invoke	DOS_ABORT
 30848 00005385 E8BCDA                  	call	DOS_ABORT
 30849                                  
 30850                                  reset_to_parent:
 30851                                  					; SS override
 30852 00005388 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30853                                  
 30854                                  reset_return:				; come here for normal return
 30855                                  	;Context DS			; DS is used to refer to DOSDATA
 30856 0000538D 16                      	push	ss
 30857 0000538E 1F                      	pop	ds	
 30858                                  
 30859 0000538F B0FF                    	MOV	AL,-1
 30860                                  
 30861                                  	; make sure that everything is clean In this case ignore any errors,
 30862                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30863                                  
 30864                                  	;EnterCrit critDisk
 30865 00005391 E864BF                  	call	ECritDisk
 30866                                  	;invoke	FLUSHBUF
 30867 00005394 E8A505                  	call	FLUSHBUF
 30868                                  	;LeaveCrit critDisk
 30869 00005397 E879BF                  	call	LCritDisk
 30870                                  
 30871                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30872                                  
 30873 0000539A E895F7                  	call	CHECK_VIRT_OPEN
 30874 0000539D FA                      	CLI
 30875 0000539E C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30876 000053A3 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30877 000053A8 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30878 000053AD 8F06[8005]              	POP	WORD [EXITHOLD]
 30879 000053B1 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30880                                  
 30881                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30882                                  
 30883 000053B5 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30884 000053B9 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30885 000053BD 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30886                                  
 30887 000053C1 E88BB0                  	call	restore_world
 30888                                  
 30889                                  	; 05/05/2019
 30890 000053C4 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30891                                  
 30892                                  	; MSDOS 6.0
 30893 000053C5 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 30894 000053C6 8CD8                    	mov	ax,ds			; and not on stack.
 30895                                  	;getdseg <ds>			; ds -> dosdata
 30896 000053C8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30897 000053CD A3[0A0D]                	mov	[TEMPSEG],ax
 30898 000053D0 58                      	pop	ax
 30899                                  					; set up ds to DOSDATA
 30900                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30901 000053D1 A3[8405]                	mov	[USER_SP],ax
 30902                                  
 30903 000053D4 58                      	POP	AX			; suck off CS:IP of interrupt...
 30904 000053D5 58                      	POP	AX
 30905 000053D6 58                      	POP	AX
 30906                                  
 30907                                  ; M011 : BEGIN
 30908                                  
 30909                                  	; MSDOS 3.3
 30910                                  ;	MOV	AX,0F202h	; STI
 30911                                  
 30912                                  	; MSDOS 6.0
 30913 000053D7 9F                      	LAHF
 30914 000053D8 86E0                    	XCHG	AH,AL
 30915 000053DA 2402                    	AND	AL,2
 30916 000053DC B4F2                    	MOV	AH,0F2h
 30917                                  
 30918                                  ; M011 : END
 30919                                  
 30920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30921 000053DE 50                      	PUSH	AX
 30922                                   
 30923                                  	;PUSH	word [CS:EXITHOLD+2]
 30924                                  	;PUSH	word [CS:EXITHOLD]
 30925                                  	
 30926                                  	; MSDOS 6.0
 30927 000053DF FF36[8205]              	PUSH	word [EXITHOLD+2]
 30928 000053E3 FF36[8005]              	PUSH	word [EXITHOLD]
 30929                                  
 30930                                  	;MOV	AX,[CS:USER_SP]
 30931                                  
 30932                                  	; MSDOS 6.0
 30933 000053E7 A1[8405]                	MOV	AX,[USER_SP]
 30934 000053EA 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30935                                  
 30936 000053EE CF                      	IRET			; Long return back to user terminate address
 30937                                  
 30938                                  ;---------------------------------------------------------------------------
 30939                                  ;
 30940                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30941                                  ;
 30942                                  ; This routine handles extended error codes.
 30943                                  ; Input : DI = error code from device
 30944                                  ; Output: All EXTERR fields are set
 30945                                  ;
 30946                                  ;--------------------------------------------------------------------------
 30947                                  
 30948                                  SET_I24_EXTENDED_ERROR:
 30949 000053EF 50                      	PUSH	AX
 30950                                  					; ErrMap24End is in DOSDATA
 30951 000053F0 B8[BB0E]                	MOV	AX,ErrMap24End
 30952 000053F3 2D[AB0E]                	SUB	AX,ErrMap24
 30953                                  					; Change to dosdata to access
 30954                                  					; ErrMap24 and EXTERR -SR
 30955                                  	; 05/05/2019 - Retro DOS v4.0
 30956                                  	
 30957                                  	; MSDOS 6.0
 30958 000053F6 1E                      	push	ds
 30959                                  	;getdseg <ds>			; ds ->dosdata
 30960 000053F7 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30961                                  
 30962                                  	; AX is the index of the first unavailable error. Do not translate
 30963                                  	; if greater or equal to AX.
 30964                                  
 30965 000053FC 39C7                    	CMP	DI,AX
 30966 000053FE 89F8                    	MOV	AX,DI
 30967 00005400 7306                    	JAE	short NoTrans
 30968                                  
 30969                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30970 00005402 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30971 00005406 30E4                    	XOR	AH,AH
 30972                                  NoTrans:
 30973                                  	;MOV	[CS:EXTERR],AX
 30974 00005408 A3[2403]                	mov	[EXTERR],AX
 30975 0000540B 1F                      	pop	ds
 30976                                  	;assume	ds:nothing
 30977 0000540C 58                      	POP	AX
 30978                                  
 30979                                  	; Now Extended error is set correctly. Translate it to get correct
 30980                                  	; error locus class and recommended action.
 30981                                  
 30982 0000540D 56                      	PUSH	SI
 30983                                  					; ERR_TABLE_24 is in DOSCODE 
 30984 0000540E BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30985 00005411 E86AB2                  	call	CAL_LK			; Set other extended error fields
 30986 00005414 5E                      	POP	SI
 30987 00005415 C3                      	retn
 30988                                  
 30989                                  ;============================================================================
 30990                                  ; FAT.ASM, MSDOS 6.0, 1991
 30991                                  ;============================================================================
 30992                                  ; 30/07/2018 - Retro DOS v3.0
 30993                                  ; 20/05/2019 - Retro DOS v4.0
 30994                                  
 30995                                  ;	TITLE	FAT - FAT maintenance routines
 30996                                  ;	NAME	FAT
 30997                                  
 30998                                  ;**	FAT.ASM
 30999                                  ;----------------------------------------------------------------------------
 31000                                  ;	Low level local device routines for performing disk change sequence,
 31001                                  ;	setting cluster validity, and manipulating the FAT
 31002                                  ;
 31003                                  ;	IsEof
 31004                                  ;	UNPACK
 31005                                  ;	PACK
 31006                                  ;	MAPCLUSTER
 31007                                  ;	FATREAD_SFT
 31008                                  ;	FATREAD_CDS
 31009                                  ;	FAT_operation
 31010                                  ;
 31011                                  ;	Revision history:
 31012                                  ;
 31013                                  ;	  AN000  version Jan. 1988
 31014                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31015                                  ;
 31016                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31017                                  ;	       from CL0FATENTRY rather than disk.
 31018                                  
 31019                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31020                                  
 31021                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31022                                  ;----------------------------------------------------------------------------
 31023                                  ;
 31024                                  ; Procedure Name : IsEOF
 31025                                  ;
 31026                                  ; IsEOF - check the fat value in BX for eof.
 31027                                  ;
 31028                                  ;   Inputs:	ES:BP point to DPB
 31029                                  ;		BX has fat value
 31030                                  ;   Outputs:	JAE eof
 31031                                  ;   Registers modified: none
 31032                                  ;
 31033                                  ;---------------------------------------------------------------------------
 31034                                  
 31035                                  IsEOF:
 31036                                  	;cmp	word [es:bp+0Dh],0FF6h
 31037 00005416 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31038 0000541C 730B                    	JAE	short EOF16			; yes, check for eof there
 31039                                  
 31040                                  ;J.K. 8/27/86
 31041                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31042                                  ;of any media that has "F0"(Other) as a MediaByte.
 31043                                  ;Hopely, this does not create any side effect for those who may use any value
 31044                                  ;other than "FF8-FFF" as an EOF for their own file.
 31045                                  
 31046 0000541E 81FBF00F                	cmp	bx,0FF0h
 31047 00005422 7404                    	je	short IsEOF_other
 31048                                  
 31049 00005424 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31050                                  IsEOF_other:
 31051 00005428 C3                      	retn
 31052                                  EOF16:
 31053 00005429 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31054 0000542C C3                      	retn
 31055                                  
 31056                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31057                                  
 31058                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31059                                  ;---------------------------------------------------------------------------
 31060                                  ;
 31061                                  ; Procedur Name : UNPACK
 31062                                  ;
 31063                                  ; Inputs:
 31064                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31065                                  ;	ES:BP = Base of drive parameters
 31066                                  ; Outputs:
 31067                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31068                                  ;	Zero set means DI=0 (free cluster)
 31069                                  ;	Carry set means error (currently user FAILed to I 24)
 31070                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31071                                  ;
 31072                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31073                                  ;
 31074                                  ;----------------------------------------------------------------------------
 31075                                  	
 31076                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31077                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31078                                  
 31079                                  	; 20/05/2019 - Retro DOS v4.0
 31080                                  UNPACK:
 31081                                  	; MSDOS 6.0			; M014 - Start
 31082 0000542D 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 31083 0000542F 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31084 00005431 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31085 00005435 09FF                    	or	di,di 			; return z if di=0
 31086 00005437 C3                      	retn				; done
 31087                                  up_cont:				; M014 - End
 31088                                  	; MSDOS 3.3 & MSDOS 6.0
 31089                                  	;cmp	bx,[es:bp+0Dh]
 31090 00005438 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31091 0000543C 7726                    	JA	short HURTFAT
 31092 0000543E E8D600                  	CALL	MAPCLUSTER
 31093 00005441 721E                    	jc	short _DoContext
 31094 00005443 8B3D                    	MOV	DI,[DI]
 31095 00005445 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31096 00005447 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31097 0000544B 81FEF60F                	CMP	SI,4096-10
 31098 0000544F 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31099 00005451 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31100 00005453 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31101                                  High12:
 31102 00005455 D1EF                    	SHR	DI,1
 31103 00005457 D1EF                    	SHR	DI,1
 31104 00005459 D1EF                    	SHR	DI,1
 31105 0000545B D1EF                    	SHR	DI,1
 31106                                  Unpack12:
 31107 0000545D 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31108                                  _DoContext:
 31109 00005461 16                      	PUSH	SS
 31110 00005462 1F                      	POP	DS
 31111 00005463 C3                      	retn
 31112                                  HURTFAT:
 31113                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31114                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31115 00005464 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31116 0000546A 50                      	PUSH	AX
 31117 0000546B B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31118                                  
 31119                                  ;hkn; SS override
 31120 0000546D 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31121                                  ;
 31122                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31123                                  ;
 31124 00005473 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31125 00005476 E8CAFD                  	call	FATAL
 31126 00005479 3C03                    	CMP	AL,3
 31127 0000547B F8                      	CLC
 31128 0000547C 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31129 0000547E F9                      	STC				; User said FAIL
 31130                                  OKU_RET:
 31131 0000547F 58                      	POP	AX
 31132                                  hurtfat_retn:
 31133 00005480 C3                      	retn
 31134                                  
 31135                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31136                                  
 31137                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31138                                  ;----------------------------------------------------------------------------
 31139                                  ;
 31140                                  ; Procedure Name : PACK
 31141                                  ;
 31142                                  ; Inputs:
 31143                                  ;	BX = Cluster number
 31144                                  ;	DX = Data
 31145                                  ;	ES:BP = Pointer to drive DPB
 31146                                  ; Outputs:
 31147                                  ;	The data is stored in the FAT at the given cluster.
 31148                                  ;	SI,DX,DI all destroyed
 31149                                  ;	Carry set means error (currently user FAILed to I 24)
 31150                                  ;	No other registers affected
 31151                                  ;
 31152                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31153                                  ;
 31154                                  ;---------------------------------------------------------------------------
 31155                                  
 31156                                  	; 02/01/2024
 31157                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31158                                  	; 20/05/2019 - Retro DOS v4.0
 31159                                  PACK:
 31160                                  	; MSDOS 6.0			; M014 - start
 31161 00005481 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31162 00005483 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31163 00005485 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31164 00005489 C3                      	retn				; done
 31165                                  p_cont:					; M014 - end
 31166                                  	; MSDOS 3.3 & MSDOS 6.0
 31167 0000548A E88A00                  	CALL	MAPCLUSTER
 31168 0000548D 72D2                    	JC	short _DoContext
 31169 0000548F 8B35                    	MOV	SI,[DI]
 31170 00005491 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31171 00005493 51                      	PUSH	CX			; move data to upper 12 bits
 31172 00005494 B104                    	MOV	CL,4
 31173 00005496 D3E2                    	SHL	DX,CL
 31174 00005498 59                      	POP	CX
 31175 00005499 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31176 0000549C EB14                    	JMP	SHORT PACKIN
 31177                                  ALIGNED:
 31178                                  	;cmp	word [es:bp+0Dh],0FF6h
 31179 0000549E 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31180 000054A4 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31181 000054A6 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31182 000054AA 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31183 000054AE EB02                    	JMP	SHORT PACKIN		; MZ go store
 31184                                  Pack16:
 31185 000054B0 31F6                    	XOR	SI,SI			; MZ no original data
 31186                                  PACKIN:
 31187 000054B2 09D6                    	OR	SI,DX
 31188 000054B4 8935                    	MOV	[DI],SI
 31189                                  
 31190                                  ;hkn; SS override
 31191 000054B6 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31192                                  	; MSDOS 6.0
 31193 000054BB F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31194                                  					;LB. if already dirty		  ;AN000;
 31195 000054BF 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31196                                  	; 10/06/2019
 31197 000054C1 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31198                                  	
 31199                                  	;or	byte [si+5],40h
 31200 000054C4 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31201                                  yesdirty11:				;LB.				;AN000;
 31202                                  ;hkn; SS override
 31203 000054C8 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31204                                  ;hkn; SS is DOSDATA
 31205 000054CE 16                      	push	ss
 31206 000054CF 1F                      	pop	ds
 31207 000054D0 74AE                    	jz	short hurtfat_retn	; Carry clear
 31208 000054D2 50                      	PUSH	AX
 31209 000054D3 53                      	PUSH	BX
 31210 000054D4 51                      	PUSH	CX
 31211 000054D5 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31212 000054D8 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31213                                  	;;add	si,16 ; MSDOS 3.3
 31214                                  	;add	si,20 ; MSDOS 6.0
 31215 000054DC 83C614                  	ADD	SI,BUFINSIZ
 31216 000054DF 8824                    	MOV	[SI],AH
 31217                                  ;hkn; SS is DOSDATA
 31218                                  	;Context DS
 31219 000054E1 16                      	push	ss
 31220 000054E2 1F                      	pop	ds
 31221                                  	
 31222 000054E3 50                      	PUSH	AX
 31223                                  	
 31224                                  	; MSDOS 6.0
 31225 000054E4 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31226 000054E8 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31227                                  
 31228                                  	; MSDOS 3.3 & MSDOS 6.0
 31229 000054EC 8B16[9005]              	MOV	DX,[CLUSSEC]
 31230                                  
 31231                                  	;MOV	SI,1	  ; *
 31232                                  	;XOR	AL,AL     ; *
 31233                                  	;call	GETBUFFRB ; *
 31234                                  	; 22/09/2023
 31235 000054F0 E83E03                  	call	GETBUFFRA ; *
 31236                                  
 31237 000054F3 58                      	POP	AX
 31238 000054F4 721B                    	JC	short POPP_RET
 31239 000054F6 C53E[E205]              	LDS	DI,[CURBUF]
 31240                                  	
 31241                                  	; MSDOS 6.0
 31242 000054FA F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31243                                  					;LB. if already dirty		  ;AN000;
 31244 000054FE 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31245 00005500 E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31246                                  	
 31247                                  	;or	byte [di+5],40h
 31248 00005503 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31249                                  yesdirty12:
 31250                                  	;;add	di,16
 31251                                  	;add	di,20 ; MSDOS 6.0
 31252                                  	; 02/01/2024
 31253                                  	;ADD	DI,BUFINSIZ
 31254                                  	;DEC	DI
 31255 00005507 83C713                  	add	di,BUFINSIZ-1 ; 19
 31256                                  
 31257                                  	;add	di,[es:bp+2]
 31258 0000550A 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31259 0000550E 8805                    	MOV	[DI],AL
 31260 00005510 F8                      	CLC
 31261                                  POPP_RET:
 31262 00005511 16                      	PUSH	SS
 31263 00005512 1F                      	POP	DS
 31264 00005513 59                      	POP	CX
 31265 00005514 5B                      	POP	BX
 31266 00005515 58                      	POP	AX
 31267 00005516 C3                      	retn
 31268                                  
 31269                                  ; 31/07/2018 - Retro DOS v3.0
 31270                                  
 31271                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31272                                  ;---------------------------------------------------------------------------
 31273                                  ;
 31274                                  ; Procedure Name : MAPCLUSTER
 31275                                  ;
 31276                                  ; Inputs:
 31277                                  ;	ES:BP Points to DPB
 31278                                  ;	BX Is cluster number
 31279                                  ; Function:
 31280                                  ;	Get a pointer to the cluster
 31281                                  ; Outputs:
 31282                                  ;	DS:DI Points to contents of FAT for given cluster
 31283                                  ;	DS:SI Points to start of buffer
 31284                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31285                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31286                                  ;	Carry set if failed.
 31287                                  ; SI is destroyed.
 31288                                  ;
 31289                                  ;---------------------------------------------------------------------------
 31290                                  
 31291                                  	; 20/05/2019 - Retro DOS v4.0
 31292                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31293                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31294                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31295                                  
 31296                                  MAPCLUSTER:
 31297                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31298 00005517 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31299                                  	;SAVE	<AX,BX,CX,DX>
 31300 0000551C 50                      	push	ax
 31301 0000551D 53                      	push	bx
 31302 0000551E 51                      	push	cx
 31303 0000551F 52                      	push	dx
 31304 00005520 89D8                    	MOV	AX,BX			; AX = BX
 31305 00005522 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31306 00005528 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31307 0000552A D1E8                    	SHR	AX,1			; AX = BX/2
 31308                                  Map16:	
 31309                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31310 0000552C 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31311                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31312 0000552E 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31313 00005530 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31314 00005532 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31315                                  
 31316                                  ;IF FastDiv
 31317                                  ;
 31318                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31319                                  ; case and apply a really fast algorithm to get the desired results
 31320                                  ;
 31321                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31322                                  ; Fast method takes 39+20*4=119
 31323                                  ;
 31324                                  ; This saves a bunch.
 31325                                  
 31326 00005536 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31327 0000553A 7510                    	jne	short _DoDiv		; 4  for no jump
 31328 0000553C 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31329 0000553E 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31330 00005542 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31331                                  	; MDOS 3.3
 31332                                  	;shr	al,1	
 31333                                  	; MDOS 6.0
 31334 00005544 D1EF                    	shr	di,1			; 2
 31335 00005546 D0D8                    	rcr	al,1			; 2
 31336                                  	; MDOS 3.3 (& MSDOS 6.0)
 31337 00005548 30E4                    	xor	ah,ah			; 3
 31338 0000554A EB04                    	jmp	short DivDone		; 16
 31339                                  _DoDiv:
 31340                                  ;ENDIF
 31341                                  	; MSDOS 3.3
 31342                                  	;xor	dx,dx
 31343                                  	; MSDOS 6.0
 31344 0000554C 89FA                    	mov	dx,di			; 2
 31345                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31346 0000554E F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31347                                  ;IF FastDiv
 31348                                  DivDone:
 31349                                  ;ENDIF
 31350                                  	;add	ax,[es:bp+6]
 31351 00005550 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31352 00005554 49                      	DEC	CX			; CX is sector size - 1
 31353                                  	;SAVE	<AX,DX,CX>
 31354 00005555 50                      	push	ax
 31355 00005556 52                      	push	dx
 31356 00005557 51                      	push	cx
 31357 00005558 89C2                    	MOV	DX,AX
 31358                                  
 31359                                  	; MSDOS 6.0
 31360                                  	; 22/09/2023
 31361                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31362                                  	;
 31363                                  	; MDOS 3.3 (& MSDOS 6.0)
 31364                                  	;XOR	AL,AL	   ; *
 31365                                  	;MOV	SI,1	   ; *
 31366                                  	;;invoke GETBUFFRB ; *
 31367                                  	;call	GETBUFFRB  ; *
 31368                                  	; 22/09/2023
 31369 0000555A E8CE02                  	call	GETBUFFRC  ; *!
 31370                                  
 31371                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31372 0000555D 59                      	pop	cx
 31373 0000555E 58                      	pop	ax
 31374 0000555F 5A                      	pop	dx
 31375 00005560 724C                    	JC	short MAP_POP
 31376                                  
 31377 00005562 C536[E205]              	LDS	SI,[CURBUF]
 31378                                  	;;lea	di,[si+16]
 31379                                  	;lea	di,[si+20] ; MSDOS 6.0
 31380 00005566 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31381 00005569 01C7                    	ADD	DI,AX
 31382 0000556B 39C8                    	CMP	AX,CX
 31383 0000556D 752C                    	JNZ	short MAPRET
 31384 0000556F 8A05                    	MOV	AL,[DI]
 31385                                  	;Context DS		 	;hkn; SS is DOSDATA
 31386 00005571 16                      	push	ss
 31387 00005572 1F                      	pop	ds	
 31388 00005573 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31389 00005577 A2[8E05]                	MOV	[CLUSSAVE],AL
 31390 0000557A 8916[9005]              	MOV	[CLUSSEC],DX
 31391                                  	; MSDOS 6.0
 31392 0000557E C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31393 00005584 42                      	INC	DX
 31394                                  
 31395                                  	; 22/09/2023
 31396                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31397                                  	;
 31398                                  	; MDOS 3.3 (& MSDOS 6.0)
 31399                                  	;XOR	AL,AL	   ; *
 31400                                  	;MOV	SI,1	   ; *
 31401                                  	;;invoke GETBUFFRB ; *
 31402                                  	;call	GETBUFFRB  ; *
 31403                                  	; 22/09/2023
 31404 00005585 E8A302                  	call	GETBUFFRC  ; *!
 31405 00005588 7224                    	JC	short MAP_POP
 31406                                  
 31407 0000558A C536[E205]              	LDS	SI,[CURBUF]
 31408 0000558E 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31409 00005591 8A05                    	MOV	AL,[DI]
 31410                                  	;Context DS			;hkn; SS is DOSDATA
 31411 00005593 16                      	push	ss
 31412 00005594 1F                      	pop	ds
 31413 00005595 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31414                                  
 31415                                  ;hkn; CLUSSAVE is in DOSDATA
 31416 00005598 BF[8E05]                	MOV	DI,CLUSSAVE
 31417                                  MAPRET:
 31418                                  	;RESTORE <DX,CX,BX>
 31419 0000559B 5A                      	pop	dx
 31420 0000559C 59                      	pop	cx
 31421 0000559D 5B                      	pop	bx
 31422 0000559E 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31423 000055A0 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31424 000055A6 7302                    	JAE	short MapSet		; MZ no, set flags
 31425 000055A8 89D8                    	MOV	AX,BX
 31426                                  MapSet:
 31427 000055AA A801                    	TEST	AL,1			; set zero flag if not on boundary
 31428                                  	;RESTORE <AX>
 31429 000055AC 58                      	pop	ax
 31430 000055AD C3                      	retn
 31431                                  
 31432                                  MAP_POP:
 31433                                  	;RESTORE <DX,CX,BX,AX>
 31434 000055AE 5A                      	pop	dx
 31435 000055AF 59                      	pop	cx
 31436 000055B0 5B                      	pop	bx
 31437 000055B1 58                      	pop	ax
 31438                                  fatread_sft_retn: ; 17/12/2022
 31439 000055B2 C3                      	retn
 31440                                  
 31441                                  ; 20/05/2019 - Retro DOS v4.0
 31442                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31443                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31444                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31445                                  
 31446                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31447                                  ;----------------------------------------------------------------------------
 31448                                  ;
 31449                                  ; Procedure Name : FATREAD_SFT
 31450                                  ;
 31451                                  ; Inputs:
 31452                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31453                                  ;		giving a NET SFT will produce system crashing results).
 31454                                  ;	DS DOSDATA
 31455                                  ; Function:
 31456                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31457                                  ;	if disk changed.
 31458                                  ;	In other respects, same as FATREAD_CDS.
 31459                                  ;	(note ES:DI destroyed!)
 31460                                  ; Outputs:
 31461                                  ;	Carry set if error (currently user FAILed to I 24)
 31462                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31463                                  ;	as far as invalidating curdir_ID is concerned.
 31464                                  ;	Since getting a true disk changed on this call is a screw up
 31465                                  ;	anyway, that's the way it goes.
 31466                                  ;
 31467                                  ;---------------------------------------------------------------------------
 31468                                  
 31469                                  FATREAD_SFT:
 31470 000055B3 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31471                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31472                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31473                                  	; 15/12/2022
 31474 000055B7 268A4600                	mov	AL,[ES:BP]
 31475 000055BB A2[7605]                	MOV	[THISDRV],AL
 31476 000055BE E871B0                  	call	GOTDPB			;Set THISDPB
 31477                                  	;CALL	FAT_GOT_DPB
 31478                                  	; 17/12/2022
 31479 000055C1 EB78                    	jmp	FAT_GOT_DPB
 31480                                  ;fatread_sft_retn:
 31481                                  	;retn
 31482                                  
 31483                                  ;----------------------------------------------------------------------------
 31484                                  ;
 31485                                  ; Procedure Name : FATREAD_CDS
 31486                                  ;
 31487                                  ; Inputs:
 31488                                  ;	DS:DOSDATA
 31489                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31490                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31491                                  ; Function:
 31492                                  ;	If disk may have been changed, media is determined and buffers are
 31493                                  ;	flagged invalid. If not, no action is taken.
 31494                                  ; Outputs:
 31495                                  ;	ES:BP = Drive parameter block
 31496                                  ;	THISDPB = ES:BP
 31497                                  ;	THISDRV set
 31498                                  ;	Carry set if error (currently user FAILed to I 24)
 31499                                  ; DS preserved , all other registers destroyed
 31500                                  ;
 31501                                  ;---------------------------------------------------------------------------
 31502                                  
 31503                                  	; 20/05/2019 - Retro DOS v4.0
 31504                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31505                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31506                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31507                                  
 31508                                  FATREAD_CDS:
 31509 000055C3 06                      	PUSH	ES
 31510 000055C4 57                      	PUSH	DI
 31511                                  	;les	bp,[es:di+45h]
 31512 000055C5 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31513                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31514                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31515                                  	; 15/12/2022
 31516 000055C9 268A4600                	mov	AL,[ES:BP]
 31517 000055CD A2[7605]                	MOV	[THISDRV],AL
 31518 000055D0 E85FB0                  	call	GOTDPB			;Set THISDPB
 31519 000055D3 E86500                  	CALL	FAT_GOT_DPB
 31520 000055D6 5F                      	POP	DI			;Get back CDS pointer
 31521 000055D7 07                      	POP	ES
 31522 000055D8 72D8                    	jc	short fatread_sft_retn
 31523 000055DA 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31524                                  
 31525                                  ;	Media changed. We now need to find all CDS structures which use this
 31526                                  ;	DPB and invalidate their ID pointers.
 31527                                  
 31528                                  MED_CHANGE:
 31529 000055DC 31C0                    	XOR	AX,AX
 31530 000055DE 48                      	DEC	AX			; AX = -1
 31531 000055DF 1E                      	PUSH	DS
 31532 000055E0 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31533 000055E4 30ED                    	XOR	CH,CH			; CX is number of structures
 31534                                  	;lds	si,[es:di+45h]
 31535 000055E6 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31536                                  
 31537                                  ;hkn; SS override
 31538                                  
 31539                                  ;	Find all CDSs with this DevPtr
 31540                                  ;
 31541                                  ;	(ax) = -1
 31542                                  ;	(ds:si) = DevPtr
 31543                                  
 31544 000055EA 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31545                                  frcd20: 
 31546                                  	;;test	word [es:di+43h],8000h
 31547                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31548 000055EF 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31549 000055F4 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31550                                  
 31551                                  	; MSDOS 3.3
 31552                                  	;push	es
 31553                                  	;push	di
 31554                                  	;les	di,[es:di+45h]
 31555                                  	;;les	di,[ES:DI+curdir.devptr]
 31556                                  	;call	POINTCOMP
 31557                                  	;pop	di
 31558                                  	;pop	es
 31559                                  	;jnz	short frcd25
 31560                                  
 31561                                  	; MSDOS 6.0
 31562 000055F6 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31563 000055FA 7512                    	jne	short frcd25		; no match
 31564 000055FC 8CDB                    	mov	bx,ds
 31565 000055FE 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31566 00005602 750A                    	jne	short frcd25		; CDS not for this drive
 31567                                  
 31568                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31569                                  	;test	[es:di+49h],ax
 31570 00005604 26854549                	test	[ES:DI+curdir.ID],AX
 31571 00005608 7404                    	JZ	short frcd25		; If root (0), leave root
 31572                                  	;mov	[es:di+49h],ax
 31573 0000560A 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31574                                  frcd25:	
 31575                                  	;;add	di,81  ; MSDOS 3.3
 31576                                  	;add	di,88  ; MSDOS 6.0	 
 31577 0000560E 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31578 00005611 E2DC                    	LOOP	frcd20
 31579 00005613 1F                      	POP	DS
 31580                                  NO_CHANGE:
 31581 00005614 C42E[8A05]              	LES	BP,[THISDPB]
 31582 00005618 F8                      	CLC
 31583 00005619 C3                      	retn
 31584                                  
 31585                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31586                                  ;----------------------------------------------------------------------------
 31587                                  ;
 31588                                  ; Procedure Name : FAT_operation
 31589                                  ;
 31590                                  ;----------------------------------------------------------------------------
 31591                                  
 31592                                  	; 03/01/2024
 31593                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31594                                  
 31595                                  FAT_operation:
 31596                                  	; 31/07/2018 - Retro DOS v3.0
 31597                                  FATERR:
 31598                                  	;mov	word [es:bp+1Eh],-1
 31599                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31600 0000561A 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31601                                  					; Err in FAT must force recomp of freespace
 31602                                  	;and	di,0FFh
 31603 00005620 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31604                                  	;mov	byte [ALLOWED],18h
 31605 00005624 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31606                                  	;mov	ah,1Ah
 31607 00005629 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31608 0000562B A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31609 0000562E E816FC                  	call	FATAL1
 31610 00005631 C42E[8A05]              	LES	BP,[THISDPB]
 31611 00005635 3C03                    	CMP	AL,3
 31612 00005637 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31613 00005639 F9                      	STC				; User said FAIL
 31614 0000563A C3                      	retn
 31615                                  
 31616                                  FAT_GOT_DPB:
 31617                                  	;Context DS			;hkn; SS is DOSDATA
 31618 0000563B 16                      	push	ss			
 31619 0000563C 1F                      	pop	ds
 31620                                  	;mov	al,0Fh
 31621 0000563D B00F                    	MOV	AL,DMEDHL
 31622                                  	;mov	ah,[es:bp+1]
 31623 0000563F 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31624 00005643 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31625 00005646 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31626 0000564B C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31627                                  	;;mov	al,[es:bp+16h]
 31628                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31629 00005651 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31630 00005655 A2[6703]                	MOV	[CALLMED],AL
 31631 00005658 06                      	PUSH	ES
 31632 00005659 1E                      	PUSH	DS
 31633                                  
 31634                                  ;hkn; DEVCALL is in DOSDATA
 31635 0000565A BB[5A03]                	MOV	BX,DEVCALL
 31636                                  	;;lds	si,[es:bp+12h]
 31637                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31638 0000565D 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31639 00005661 07                      	POP	ES			; ES:BX Points to call header
 31640 00005662 E809EF                  	call	DEVIOCALL2
 31641                                  	;Context DS		 	;hkn; SS is DOSDATA
 31642 00005665 16                      	push	ss
 31643 00005666 1F                      	pop	ds
 31644 00005667 07                      	POP	ES			; Restore ES:BP
 31645 00005668 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31646                                  	;test	di,8000h
 31647                                  	;jnz	short FATERR
 31648 0000566C 09FF                    	or	di,di
 31649 0000566E 78AA                    	js	short FATERR		; have error
 31650 00005670 30E4                    	XOR	AH,AH
 31651                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31652                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31653 00005672 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31654 00005676 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31655                                  ; See if we had changed volume id by creating one on the diskette
 31656 00005679 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31657 0000567D 7508                    	jnz	short CHECK_BYT
 31658 0000567F C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31659 00005684 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31660                                  					; new volume label.
 31661                                  CHECK_BYT:
 31662 00005687 0A26[6803]              	OR	AH,[CALLRBYT]
 31663                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31664                                  	;JMP	short NEWDSK
 31665                                  	; 17/12/2022
 31666 0000568B 7863                    	js	short NEWDSK
 31667                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31668                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31669                                  	;JMP	short NEWDSK
 31670                                  
 31671                                  CHECK_ZR:
 31672 0000568D 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31673                                  	; 24/09/2023
 31674                                  	; cf=0 (after 'or' instruction)
 31675                                  	;CLC
 31676 0000568F C3                      	retn				; If Media not changed (NZ)
 31677                                  
 31678                                  DISK_CHNG_ERR:
 31679 00005690 06                      	PUSH	ES
 31680 00005691 55                      	PUSH	BP
 31681                                  	;;les	bp,[es:bp+12h]
 31682                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31683 00005692 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31684                                  	;;test	word [es:bp+4],800h
 31685                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31686 00005696 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31687 0000569B 5D                      	POP	BP
 31688 0000569C 07                      	POP	ES
 31689 0000569D 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31690 0000569F 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31691 000056A0 57                      	PUSH	DI
 31692 000056A1 16                      	push	ss			;hkn; SS is DOSDATA
 31693 000056A2 1F                      	pop	ds
 31694                                  	;mov	byte [ALLOWED],18h
 31695 000056A3 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31696 000056A8 06                      	PUSH	ES
 31697 000056A9 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31698 000056AD 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31699 000056B1 07                      	POP	ES
 31700 000056B2 893E[2803]              	MOV	[EXTERRPT],DI
 31701                                  	;mov	ax,0Fh
 31702 000056B6 B80F00                  	MOV	AX,error_I24_wrong_disk
 31703 000056B9 C606[7505]01            	MOV	byte [READOP],1		; Write
 31704                                  	;invoke	HARDERR
 31705 000056BE E834FB                  	call	HARDERR
 31706 000056C1 5F                      	POP	DI			; Get back buffer for ignore
 31707 000056C2 1F                      	POP	DS
 31708 000056C3 3C03                    	CMP	AL,3
 31709                                  FAIL_OPJ2:
 31710 000056C5 741C                    	JZ	short FAIL_OP
 31711 000056C7 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31712                                  
 31713                                  CHKBUFFDIRT:
 31714                                  	; 20/05/2019 - Retro DOS v4.0
 31715                                  
 31716                                  	; MSDOS 3.3
 31717                                  	;lds	di,[BUFFHEAD]
 31718                                  
 31719                                  	; MSDOS 6.0
 31720 000056CA 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31721 000056D0 741E                    	je	short NEWDSK			; no, skip the check
 31722 000056D2 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31723                                  nbuffer:
 31724                                  	;cmp	al,[di+4]
 31725 000056D5 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31726 000056D8 750D                    	jne	short lfnxt			; no, go for next buffer
 31727                                  	;test   byte [di+5],40h
 31728 000056DA F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31729 000056DE 7407                    	jz	short lfnxt			; no, go for next buffer
 31730                                  	;Context DS
 31731 000056E0 16                      	push	ss
 31732 000056E1 1F                      	pop	ds
 31733                                  	; 24/09/2023
 31734                                  	; cf=0 (after 'test' instruction)
 31735                                  	;clc
 31736 000056E2 C3                      	retn
 31737                                  
 31738                                  FAIL_OP:					; This label & code is here
 31739                                  	;Context DS				;  for reachability
 31740 000056E3 16                      	push	ss
 31741 000056E4 1F                      	pop	ds
 31742 000056E5 F9                      	STC
 31743 000056E6 C3                      	retn
 31744                                  
 31745                                  lfnxt:
 31746                                  	; 15/08/2018 - Retro DOS v3.0
 31747                                  	; MSDOS 3.3
 31748                                  	;lds	di,[di]
 31749                                  
 31750                                  	; 20/05/2019 - Retro DOS v4.0
 31751 000056E7 8B3D                    	mov	di,[di]
 31752                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31753                                  	
 31754                                  	; MSDOS 3.3
 31755                                  	;cmp	di,-1
 31756                                  	;jne	short nbuffer
 31757                                  	
 31758                                  	; MSDOS 6.0
 31759 000056E9 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31760 000056EE 75E5                    	jne	short nbuffer			; no, check this guy also
 31761                                  
 31762                                  ; If no dirty buffers, assume Media changed
 31763                                  NEWDSK:
 31764                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31765                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31766 000056F0 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31767                                  						;  recompute
 31768                                  	; MSDOS 3.3
 31769                                  	;call	SETVISIT
 31770                                  	; MSDOS 6.0
 31771 000056F6 E8CD00                  	call	 GETCURHEAD
 31772                                  nxbuffer:
 31773                                  	; MSDOS 3.3
 31774                                  	;or 	byte [di+5],20h
 31775                                  	; MSDOS 3.3 & MSDOS 6.0
 31776                                  	;cmp	[di+4],al
 31777 000056F9 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31778 000056FC 7510                    	jne	short lfnxt2
 31779                                  	;test	byte [di+5],40h
 31780 000056FE F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31781 00005702 758C                    	jnz	short DISK_CHNG_ERR
 31782                                  	;mov	word [di+4],20FFh
 31783 00005704 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31784 00005709 E8CC00                  	call	SCANPLACE
 31785                                  	; MSDOS 6.0
 31786 0000570C EB02                    	jmp	short skpbuff
 31787                                  lfnxt2:
 31788 0000570E 8B3D                    	mov	di,[di]
 31789                                  	;mov	di,[di+BUFFINFO.buf_next]
 31790                                  skpbuff:
 31791                                  	; MSDOS 6.0
 31792 00005710 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31793 00005715 75E2                    	jne	short nxbuffer
 31794                                  
 31795 00005717 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31796 0000571D 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31797 0000571F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31798 00005724 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31799 00005726 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31800                                  ;lfnxt2:
 31801                                  	; MSDOS 3.3
 31802                                  	;call	SKIPVISIT
 31803                                  	;jnz	short nxbuffer
 31804                                  GOGETBPB:
 31805                                  	; MSDOS 3.3 & MSDOS 6.0
 31806                                  	;;lds	di,[es:bp+12h]
 31807                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31808 0000572C 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31809                                  	; 20/05/2019
 31810                                  	;test	word [di+4],2000h
 31811                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31812 00005730 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31813 00005734 7510                    	JNZ	short GETFREEBUF
 31814                                  	;context DS	    		;hkn; SS is DOSDATA
 31815 00005736 16                      	push	ss
 31816 00005737 1F                      	pop	ds
 31817 00005738 BB0200                  	MOV	BX,2
 31818 0000573B E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31819                                  FAIL_OPJ:
 31820 0000573E 72A3                    	JC	short FAIL_OP
 31821 00005740 C53E[E205]              	LDS	DI,[CURBUF]
 31822 00005744 EB13                    	JMP	SHORT GOTGETBUF
 31823                                  
 31824                                  GETFREEBUF:
 31825 00005746 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31826 00005747 55                      	PUSH	BP
 31827                                  	; MSDOS 3.3
 31828                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31829                                  	; MSDOS 6.0
 31830 00005748 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31831                                  ;hkn; SS override
 31832 0000574A 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31833 0000574F E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31834                                  	; MSDOS 3.3 & MSDOS 6.0
 31835 00005752 E84F02                  	call	BUFWRITE
 31836 00005755 5D                      	POP	BP
 31837 00005756 07                      	POP	ES
 31838                                  	;JC	short FAIL_OPJ
 31839 00005757 728A                    	jc	short FAIL_OP
 31840                                  GOTGETBUF:
 31841                                  	;;add	di,16
 31842                                  	;add	di,20 ; MSDOS 6.0
 31843 00005759 83C714                  	ADD	DI,BUFINSIZ
 31844                                  
 31845                                  ;hkn; SS override
 31846 0000575C 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31847                                  	;Context DS			;hkn; SS is DOSDATA
 31848 00005761 16                      	push	ss
 31849 00005762 1F                      	pop	ds
 31850 00005763 893E[6803]              	MOV	[CALLXAD],DI
 31851                                  	;mov	al,16h
 31852 00005767 B016                    	MOV	AL,DBPBHL
 31853                                  	;mov	ah,[es:bp+1]
 31854 00005769 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31855 0000576D A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31856 00005770 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31857 00005775 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31858                                  	;;mov	al,[es:bp+16h]
 31859                                  	;mov	al,[es:bp+17h]
 31860 0000577B 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31861 0000577F A2[6703]                	MOV	[CALLMED],AL
 31862 00005782 06                      	PUSH	ES ; **
 31863 00005783 1E                      	PUSH	DS ; *
 31864                                  	;;
 31865                                  ; 03/01/2023
 31866                                  %if 0
 31867                                  	;;push	word [es:bp+14h]
 31868                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31869                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31870                                  	;;push	word [es:bp+12h]
 31871                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31872                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31873                                  
 31874                                  ;hkn; DEVCALL is in DOSDATA
 31875                                  	MOV	BX,DEVCALL
 31876                                  	POP	SI
 31877                                  	POP	DS			; DS:SI Points to device header
 31878                                  %endif
 31879                                  	; 03/01/2024
 31880 00005784 BB[5A03]                	mov	bx,DEVCALL
 31881                                  	;lds	si,[es:bp+13h]
 31882 00005787 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31883                                  					; DS:SI Points to device header
 31884                                  	;;
 31885 0000578B 07                      	POP	ES ; *			; ES:BX Points to call header
 31886                                  	;invoke	DEVIOCALL2
 31887 0000578C E8DFED                  	call	DEVIOCALL2
 31888 0000578F 07                      	POP	ES ; **			; Restore ES:BP
 31889                                  	;Context DS
 31890 00005790 16                      	push	ss		 	;hkn; SS is DOSDATA
 31891 00005791 1F                      	pop	ds
 31892 00005792 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31893                                  	; MSDOS 3.3
 31894                                  	;test	di,8000h
 31895                                  	;jnz	short FATERRJ
 31896                                  	; MSDOS 6.0
 31897 00005796 09FF                    	or	di,di
 31898 00005798 7829                    	js	short FATERRJ 		; have error
 31899                                  	;;mov	al,[es:bp+16h]
 31900                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31901 0000579A 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31902 0000579E C536[6C03]              	LDS	SI,[CALLBPB]
 31903                                  	;;mov	word [es:bp+1Ch],0
 31904                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31905 000057A2 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31906                                  	;invoke	$SETDPB
 31907 000057A8 E810B8                  	call	_$SETDPB
 31908                                  
 31909                                  ;hkn; SS override
 31910 000057AB 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31911                                  	;mov	al,[es:bp+8]
 31912 000057B0 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31913                                  
 31914                                  	; MSDOS 3.3
 31915                                  	;;mov	ah,[es:bp+0Fh]
 31916                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31917                                  	;;mov	[DI-8],ax
 31918                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31919                                  
 31920                                  	; MSDOS 6.0
 31921                                  	;mov	[di-0Ah],al
 31922 000057B4 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31923                                  						;>32mb		  ;AN000;
 31924                                  	;mov	ax,[es:bp+0Fh]
 31925 000057B7 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31926                                  	;mov	[di-9h],ax			  ;AC000;
 31927 000057BB 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31928                                  					;>32mb Correct buffer info ;AC000;
 31929                                  	;Context DS			;hkn; SS is DOSDATA
 31930 000057BE 16                      	push	ss
 31931 000057BF 1F                      	pop	ds
 31932 000057C0 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31933 000057C2 C3                      	retn
 31934                                  
 31935                                  FATERRJ: 
 31936 000057C3 E954FE                  	JMP	FATERR
 31937                                  
 31938                                  ;============================================================================
 31939                                  ; STDBUF.ASM
 31940                                  ;============================================================================
 31941                                  ; Retro DOS v2.0 - 12/03/2018
 31942                                  
 31943                                  ;
 31944                                  ; Standard buffer management for MSDOS
 31945                                  ;
 31946                                  
 31947                                  ;.xlist
 31948                                  ;.xcref
 31949                                  ;INCLUDE STDSW.ASM
 31950                                  ;.cref
 31951                                  ;.list
 31952                                  
 31953                                  ;TITLE	STDBUF - MSDOS buffer management
 31954                                  ;NAME	STDBUF
 31955                                  
 31956                                  ;INCLUDE BUF.ASM
 31957                                  
 31958                                  ;============================================================================
 31959                                  ; BUF.ASM
 31960                                  ;============================================================================
 31961                                  ; 31/07/2018 - Retro DOS v3.0
 31962                                  ; Retro DOS v2.0 - 12/03/2018
 31963                                  ;
 31964                                  ; buffer management for MSDOS
 31965                                  ;
 31966                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31967                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31968                                  ;
 31969                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31970                                  ;
 31971                                  ;SETVISIT:
 31972                                  ;	; 31/07/2018 - Retro DOS v3.0
 31973                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31974                                  ;; Inputs:
 31975                                  ;;      None
 31976                                  ;; Function:
 31977                                  ;;      Set up a scan of I/O buffers
 31978                                  ;; Outputs:
 31979                                  ;;      All visit flags = 0
 31980                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31981                                  ;;                    may cause a scan to stop in the middle leaving some
 31982                                  ;;                    visit flags set, and some not set.
 31983                                  ;;      DS:DI Points to [BUFFHEAD]
 31984                                  ;; No other registers altered
 31985                                  ;
 31986                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31987                                  ;	PUSH    AX
 31988                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31989                                  ;	;mov	al,0DFh
 31990                                  ;	mov	al,~buf_visit
 31991                                  ;SETLOOP:
 31992                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31993                                  ;	;and	[DI+5],al
 31994                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31995                                  ;       LDS     DI,[DI]
 31996                                  ;       CMP     DI,-1
 31997                                  ;       JNZ     SHORT SETLOOP
 31998                                  ;       POP     AX ; 09/09/2018
 31999                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32000                                  ;SVISIT_RETN:
 32001                                  ;       RETN
 32002                                  ;
 32003                                  ;SKIPVISIT:
 32004                                  ;	; 31/07/2018 - Retro DOS v3.0
 32005                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32006                                  ;
 32007                                  ;; Inputs:
 32008                                  ;;      DS:DI Points to a buffer
 32009                                  ;; Function:
 32010                                  ;;      Skip visited buffers
 32011                                  ;; Outputs:
 32012                                  ;;      DS:DI Points to next unvisited buffer
 32013                                  ;;      Zero is set if skip to LAST buffer
 32014                                  ;; No other registers altered
 32015                                  ;
 32016                                  ;       CMP     DI,-1
 32017                                  ;       ;retz
 32018                                  ;       JZ	SHORT SVISIT_RETN
 32019                                  ;
 32020                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32021                                  ;       ;;;retnz
 32022                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32023                                  ;
 32024                                  ;	;test	byte [di+5],20h
 32025                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32026                                  ;	JNZ	short SKIPLOOP
 32027                                  ;	
 32028                                  ;	push	ax
 32029                                  ;	or	al,1
 32030                                  ;	pop	ax
 32031                                  ;	retn	
 32032                                  ;
 32033                                  ;SKIPLOOP:
 32034                                  ;	LDS     DI,[DI]
 32035                                  ;       JMP     SHORT SKIPVISIT
 32036                                  
 32037                                  ;============================================================================
 32038                                  ; BUF.ASM, MSDOS 6.0, 1991
 32039                                  ;============================================================================
 32040                                  ; 31/07/2018 - Retro DOS v3.0
 32041                                  ; 04/05/2019 - Retro DOS v4.0
 32042                                  
 32043                                  ;	TITLE	BUF - MSDOS buffer management
 32044                                  ;	NAME	BUF
 32045                                  
 32046                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32047                                  ;
 32048                                  ;	GETCURHEAD
 32049                                  ;	ScanPlace
 32050                                  ;	PLACEBUF
 32051                                  ;	PLACEHEAD
 32052                                  ;	PointComp
 32053                                  ;	GETBUFFR
 32054                                  ;	GETBUFFRB
 32055                                  ;	FlushBuf
 32056                                  ;	BufWrite
 32057                                  ;	SET_RQ_SC_PARMS
 32058                                  ;
 32059                                  ;	Revision history:
 32060                                  ;
 32061                                  ;		AN000  version 4.00  Jan. 1988
 32062                                  ;		A004   PTM 3765 -- Disk reset failed
 32063                                  ;		M039 DB 10/17/90 - Disk write optimization
 32064                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32065                                  
 32066                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32067                                  ;----------------------------------------------------------------------------
 32068                                  ; Procedure Name : GetCurHead
 32069                                  ; Inputs:
 32070                                  ;	 No Inputs
 32071                                  ; Function:
 32072                                  ;	Returns the pointer to the first buffer in Queue
 32073                                  ;	and updates FIRST_BUFF_ADDR
 32074                                  ;       and invalidates LASTBUFFER (recency pointer)
 32075                                  ; Outputs:
 32076                                  ;	DS:DI = pointer to the first buffer in Queue
 32077                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32078                                  ;       LASTBUFFER = -1
 32079                                  ; No other registers altered
 32080                                  ;----------------------------------------------------------------------------
 32081                                  
 32082                                  ; 04/05/2019 - Retro DOS v4.0
 32083                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32084                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32085                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32086                                  
 32087                                  GETCURHEAD:
 32088 000057C6 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32089 000057CB 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32090 000057D2 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32091 000057D7 C3                      	retn
 32092                                  
 32093                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32094                                  ;----------------------------------------------------------------------------
 32095                                  ; Procedure Name : ScanPlace
 32096                                  ; Inputs:
 32097                                  ;	Same as PLACEBUF
 32098                                  ; Function:
 32099                                  ;	Save scan location and call PLACEBUF
 32100                                  ; Outputs:
 32101                                  ;	DS:DI Points to saved scan location
 32102                                  ; All registers, except DS:DI, preserved.
 32103                                  ;----------------------------------------------------------------------------
 32104                                  ;M039: Rewritten to preserve registers.
 32105                                  
 32106                                  ;SCANPLACE:
 32107                                  ;	; 31/07/2018 - Retro DOS v3.0
 32108                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32109                                  ;	push	es
 32110                                  ;	les	si,[di]
 32111                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32112                                  ;	call	PLACEBUF
 32113                                  ;	push	es
 32114                                  ;	pop	ds
 32115                                  ;	mov	di,si
 32116                                  ;	pop	es
 32117                                  ;scanplace_retn:
 32118                                  ;	retn	
 32119                                  	
 32120                                  	; MSDOS 6.0
 32121                                  SCANPLACE:
 32122 000057D8 FF35                    	push	word [di]
 32123                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32124 000057DA E80200                  	call	PLACEBUF
 32125 000057DD 5F                      	pop	di
 32126 000057DE C3                      	retn
 32127                                  
 32128                                  ;----------------------------------------------------------------------------
 32129                                  ; Procedure Name : PlaceBuf
 32130                                  ; Input:
 32131                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32132                                  ; Function:
 32133                                  ;	Remove buffer from queue and re-insert it in proper place.
 32134                                  ; NO registers altered
 32135                                  ;----------------------------------------------------------------------------
 32136                                  
 32137                                  ;procedure PLACEBUF,NEAR
 32138                                  
 32139                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32140                                  	; 20/05/2019 - Retro DOS v4.0
 32141                                  PLACEBUF:
 32142                                  	; 31/07/2018 - Retro DOS v3.0
 32143                                  
 32144                                  	; MSDOS 6.0
 32145 000057DF 50                      	push	AX			;Save only regs we modify	;AN000;
 32146 000057E0 53                      	push	BX							;AN000;
 32147                                  	; 23/09/2023
 32148                                  	;push	SI							;AN000;
 32149                                  	
 32150 000057E1 8B05                    	mov	ax,[di]
 32151                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32152 000057E3 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32153                                  	
 32154 000057E8 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32155 000057EA 7422                    	je	short nret			;Yes, special case	;AN000;
 32156 000057EC 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32157 000057EE 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32158 000057F0 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32159 000057F4 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32160                                  not_first:
 32161                                  	; 23/09/2023
 32162 000057F6 56                      	push	si
 32163                                  	;mov	si,[di+2]
 32164 000057F7 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32165 000057FA 8904                    	mov	[si],ax
 32166                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32167 000057FC 96                      	xchg	si,ax
 32168                                  	;mov	[si+2],ax
 32169 000057FD 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32170                                  	
 32171 00005800 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32172 00005803 893C                    	mov	[si],di
 32173                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32174 00005805 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32175 00005808 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32176 0000580B 891D                    	mov	[di],bx
 32177                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32178                                  	; 23/09/2023
 32179 0000580D 5E                      	pop	si
 32180                                  nret:	
 32181                                  	; 23/09/2023							;AN000;
 32182                                  	;pop	SI							;AN000;
 32183 0000580E 5B                      	pop	BX							;AN000;
 32184 0000580F 58                      	pop	AX							;AN000;
 32185                                  									;AN000;
 32186                                  	;cmp	byte [di+4],0FFh
 32187 00005810 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32188 00005814 7505                            jne	short pbx			; M039: -no, jump.
 32189 00005816 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32190                                  pbx:	
 32191 0000581B C3                      	retn								;AN000;
 32192                                  
 32193                                  	; 31/07/2018 - Retro DOS v3.0
 32194                                  
 32195                                  	; MSDOS 3.3
 32196                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32197                                  
 32198                                  ;PLACEBUF:
 32199                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32200                                  ;	
 32201                                  ;       CALL	save_world
 32202                                  ;       LES     CX,[DI]
 32203                                  ;       CMP     CX,-1           	; Buf is LAST?
 32204                                  ;       JZ      SHORT NRET		; Buffer already last
 32205                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32206                                  ;       PUSH    DS
 32207                                  ;       POP     ES              	; Buf is ES:DI
 32208                                  ;	; 15/03/2018
 32209                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32210                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32211                                  ;       JNZ     SHORT BUFLOOP
 32212                                  ;       MOV     [SS:BUFFHEAD],CX
 32213                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32214                                  ;       JMP     SHORT LOOKEND
 32215                                  ;BUFLOOP:
 32216                                  ;	; 31/07/2018
 32217                                  ;	mov	ax,ds
 32218                                  ;	mov	bx,si
 32219                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32220                                  ;       LDS     SI,[SI]
 32221                                  ;       CALL    POINTCOMP
 32222                                  ;       jnz	short BUFLOOP
 32223                                  ;	;
 32224                                  ;	mov	ds,ax
 32225                                  ;	mov	si,bx
 32226                                  ;	mov	[SI],cx
 32227                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32228                                  ;	mov	[SI+2],bp
 32229                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32230                                  ;LOOKEND:
 32231                                  ;	mov	ax,ds
 32232                                  ;	mov	bx,si
 32233                                  ;       LDS     SI,[SI]
 32234                                  ;       CMP     SI,-1
 32235                                  ;       jnz     short LOOKEND
 32236                                  ;GOTHEEND:
 32237                                  ;       mov	ds,ax
 32238                                  ;	mov	[BX],di
 32239                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32240                                  ;       MOV     WORD [ES:DI],-1
 32241                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32242                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32243                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32244                                  ;NRET:
 32245                                  ;       CALL	restore_world
 32246                                  ;	
 32247                                  ;	;cmp	byte [di+4],-1
 32248                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32249                                  ;	jnz     short scanplace_retn
 32250                                  ;	call    PLACEHEAD
 32251                                  ;	retn
 32252                                  
 32253                                  ;EndProc PLACEBUF
 32254                                  
 32255                                  ;M039 - Removed PLACEHEAD.
 32256                                  ;----------------------------------------------------------------------------
 32257                                  ; places buffer at head
 32258                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32259                                  ;	ONE IN THE LIST!!!!!!!
 32260                                  ; BUGBUG ---- this routine can be removed because it has only
 32261                                  ; BUGBUG ---- one instruction. This routine is called from
 32262                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32263                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32264                                  ; BUGBUG ---- But kept as it is for modularity
 32265                                  ;----------------------------------------------------------------------------
 32266                                  ;procedure   PLACEHEAD,NEAR
 32267                                  ;	mov	word ptr [BufferQueue], di
 32268                                  ;	ret
 32269                                  ;EndProc PLACEHEAD
 32270                                  ;M039
 32271                                  
 32272                                  ;----------------------------------------------------------------------------
 32273                                  ; Procedure Name : PLACEHEAD
 32274                                  ;
 32275                                  ; SAME AS PLACEBUF except places buffer at head
 32276                                  ;----------------------------------------------------------------------------
 32277                                  
 32278                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32279                                  	; 05/09/2018
 32280                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32281                                  ;PLACEHEAD:
 32282                                  ;	; 31/07/2018 - Retro DOS v3.0
 32283                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32284                                  ;
 32285                                  ;       CALL	save_world
 32286                                  ;       PUSH	DS
 32287                                  ;       POP	ES
 32288                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32289                                  ;       LDS     SI,[SS:BUFFHEAD]
 32290                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32291                                  ;	CALL    POINTCOMP
 32292                                  ;       JZ      SHORT GOTHEEND2
 32293                                  ;	MOV	[ES:DI],SI
 32294                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32295                                  ;       MOV	[ES:DI+2],DS
 32296                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32297                                  ;       MOV	[SS:BUFFHEAD],DI
 32298                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32299                                  ;LOOKEND2:
 32300                                  ;       mov	ax,ds
 32301                                  ;	mov	bx,si
 32302                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32303                                  ;       LDS     SI,[SI]
 32304                                  ;       CALL    POINTCOMP
 32305                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32306                                  ;       mov	ds,ax
 32307                                  ;	mov	word [bx],-1
 32308                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32309                                  ;	mov	word [bx+2],-1
 32310                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32311                                  ;GOTHEEND2:
 32312                                  ;      	call	restore_world
 32313                                  ;placehead_retn:
 32314                                  ;	retn
 32315                                  
 32316                                  ; 20/05/2019 - Retro DOS v4.0
 32317                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32318                                  
 32319                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32320                                  ;----------------------------------------------------------------------------
 32321                                  ;
 32322                                  ; Procedure Name : PointComp
 32323                                  ; Inputs:
 32324                                  ;         DS:SI & ES:DI
 32325                                  ; Function:
 32326                                  ;          Checks for ((SI==DI) && (ES==DS))
 32327                                  ;	   Assumes that pointers are normalized for the
 32328                                  ;	   same segment
 32329                                  ;
 32330                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32331                                  ; DO NOT USE FOR < or >
 32332                                  ; No Registers altered
 32333                                  ;
 32334                                  ;----------------------------------------------------------------------------
 32335                                  
 32336                                  POINTCOMP:
 32337                                  	; 31/07/2018 - Retro DOS v3.0
 32338                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32339 0000581C 39FE                    	CMP	SI,DI
 32340 0000581E 750A                    	jnz	short _ret_label	; return if nz
 32341                                  	;jnz	short placehead_retn 
 32342 00005820 51                      	PUSH	CX
 32343 00005821 52                      	PUSH	DX
 32344 00005822 8CD9                    	MOV	CX,DS
 32345 00005824 8CC2                    	MOV	DX,ES
 32346 00005826 39D1                    	CMP	CX,DX
 32347 00005828 5A                      	POP	DX
 32348 00005829 59                      	POP	CX
 32349                                  _ret_label:
 32350 0000582A C3                      	retn
 32351                                  
 32352                                  ; 01/08/2018 - Retro DOS v3.0
 32353                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32354                                  
 32355                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32356                                  
 32357                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32358                                  ;----------------------------------------------------------------------------
 32359                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32360                                  ;	It gets the specified local sector into one of the I/O buffers
 32361                                  ;	and shuffles the queue
 32362                                  ; 
 32363                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32364                                  ;		       ELSE no pre-read
 32365                                  ;		(DX) = Desired physical sector number	      (LOW)
 32366                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32367                                  ;		(ES:BP) = Pointer to drive parameters
 32368                                  ;		ALLOWED set in case of INT 24
 32369                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32370                                  ;		'C' clear if OK
 32371                                  ;		CURBUF Points to the Buffer for the sector
 32372                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32373                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32374                                  ;----------------------------------------------------------------------------
 32375                                  
 32376                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32377                                  ;----------------------------------------------------------------------------
 32378                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32379                                  ;	It gets the specified sector into one of the I/O buffers
 32380                                  ;	and shuffles the queue. We need a special entry point so that
 32381                                  ;	we can read the alternate FAT sector if the first read fails, also
 32382                                  ;	so we can mark the buffer as a FAT sector.
 32383                                  ; 
 32384                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32385                                  ;		       ELSE no pre-read
 32386                                  ;		(DX) = Desired physical sector number	     (LOW)
 32387                                  ;		(SI) != 0
 32388                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32389                                  ;		(ES:BP) = Pointer to drive parameters
 32390                                  ;		ALLOWED set in case of INT 24
 32391                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32392                                  ;		'C' clear if OK
 32393                                  ;		CUR ddBUF Points to the Buffer for the sector
 32394                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32395                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32396                                  ;----------------------------------------------------------------------------
 32397                                  
 32398                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 32399                                  GETBUFFRC:
 32400 0000582B C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32401                                  GETBUFFRA:
 32402 00005831 30C0                    	xor	al,al
 32403 00005833 BE0100                  	mov	si,1
 32404 00005836 EB09                    	jmp	short GETBUFFRB
 32405                                  
 32406                                  	; 22/09/2023
 32407                                  GETBUFFER:
 32408 00005838 30C0                    	xor	al,al
 32409                                  GETBUFFRD:
 32410                                  	;mov	byte [ALLOWED],18h
 32411 0000583A C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32412                                  
 32413                                  	; 20/05/2019 - Retro DOS v4.0
 32414                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32415                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32416                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32417                                  GETBUFFR:
 32418 0000583F 31F6                    	XOR	SI,SI
 32419                                  
 32420                                  ;	This entry point is called for FAT buffering with SI != 0
 32421                                  
 32422                                  GETBUFFRB:
 32423 00005841 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32424                                  	; 15/12/2022
 32425 00005844 268A4600                	mov	al,[ES:BP]
 32426                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32427                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32428 00005848 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32429                                  	; MSDOS 6.0
 32430                                  ;hkn; SS override
 32431 0000584C 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32432                                  
 32433                                  ;	See if this is the buffer that was most recently returned.
 32434                                  ;	A big performance win if it is.
 32435                                  
 32436 00005851 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32437 00005854 7412                    	je	short getb5			; No
 32438                                  	;cmp	dx,[di+6]
 32439 00005856 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32440 00005859 750D                    	JNZ	short getb5			; Wrong sector
 32441                                  	
 32442                                  	; MSDOS 6.0
 32443                                  	;cmp	cx,[di+8]
 32444 0000585B 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32445 0000585E 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32446                                  	
 32447                                  	;cmp	al,[di+4]
 32448 00005860 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32449                                  	;JZ	getb35				; Just asked for same buffer
 32450 00005863 7503                    	jnz	short getb5
 32451                                  	;jmp	getb35
 32452                                  	; 17/12/2022
 32453                                  	; 28/07/2019
 32454 00005865 E9C700                  	jmp	getb35x
 32455                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32456                                  	;jmp	getb35
 32457                                  
 32458                                  ;	It's not the buffer most recently returned. See if it's in the
 32459                                  ;	cache.
 32460                                  ;
 32461                                  ;	(cx:dx) = sector #
 32462                                  ;	(al) = drive #
 32463                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32464                                  ;	??? list may be incomplete ???
 32465                                  
 32466                                  getb5:	
 32467                                  	; MSDOS 3.3
 32468                                  	;lds	di,[SS:BUFFHEAD]
 32469                                  	; MSDOS 6.0
 32470 00005868 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32471                                  getb10:	
 32472                                  	;cmp	dx,[di+6]
 32473 0000586B 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32474 0000586E 750D                    	jne	short getb12			; wrong sector lo
 32475                                  	
 32476                                  	; MSDOS 6.0
 32477                                  	;cmp	cx,[di+8]
 32478 00005870 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32479 00005873 7508                    	jne	short getb12			; wrong sector hi
 32480                                  	
 32481                                  	;cmp	al,[di+4]
 32482 00005875 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32483                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32484 00005878 7503                    	jne	short getb12
 32485 0000587A E98C00                  	jmp	getb25
 32486                                  getb12:	
 32487                                  	; MSDOS 3.3
 32488                                  	;;mov	di,[DI]
 32489                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32490                                  	;
 32491                                  	; 15/08/2018
 32492                                  	;lds	di,[di]
 32493                                  
 32494                                  	;cmp	di,-1 ; 0FFFFh
 32495                                  	;jne	short getb10
 32496                                  	;lds	di,[SS:BUFFHEAD]
 32497                                  
 32498                                  	; MSDOS 6.0
 32499 0000587D 8B3D                    	mov	di,[di]
 32500                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32501 0000587F 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32502 00005884 75E5                    	jne	short getb10			; no, continue looking
 32503                                  
 32504                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32505                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32506                                  ;	new sector into it.
 32507                                  ;
 32508                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32509                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32510                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32511                                  ;	down a chain, but should be hashed.
 32512                                  ;
 32513                                  ;	(DS:DI) = first buffer in the queue
 32514                                  ;	(CX:DX) = sector # we want
 32515                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32516                                  
 32517                                  	; MSDOS 3.3 & MSDOS 6.0
 32518                                  ;hkn; SS override
 32519 00005886 51                      	PUSH	CX  ; MSDOS 6.0
 32520 00005887 56                      	push	si
 32521 00005888 52                      	push	dx
 32522 00005889 55                      	push	bp
 32523 0000588A 06                      	push	es
 32524 0000588B E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32525 0000588E 07                      	pop	es
 32526 0000588F 5D                      	pop	bp
 32527 00005890 5A                      	pop	dx
 32528 00005891 5E                      	pop	si
 32529 00005892 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32530                                  	;jc	short getbx			; if got hard error
 32531 00005897 7303                    	jnc	short getb13
 32532 00005899 E99D00                  	jmp	getbx
 32533                                  
 32534                                  getb13:
 32535                                  	; MSDOS 6.0
 32536 0000589C E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32537                                  
 32538                                  ;	We're ready to read in the buffer, if need be. If the caller
 32539                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32540                                  
 32541 0000589F 30E4                    	XOR	AH,AH				; initial flags
 32542                                  ;hkn; SS override
 32543                                  	;test	byte [ss:PREREAD],0FFh
 32544                                  	;jnz	short getb20
 32545 000058A1 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32546 000058A6 7549                    	JNZ	short getb20			; no, we're done
 32547                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32548                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32549 000058A8 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32550                                  	;MOV	CX,1
 32551                                  	; 22/09/2023
 32552 000058AB 29C9                    	sub	cx,cx ; 0
 32553 000058AD 56                      	push	si
 32554 000058AE 57                      	push	di
 32555 000058AF 52                      	push	dx
 32556                                  	; MSDOS 6.0
 32557 000058B0 06                      	push	es ; ***
 32558                                  
 32559                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32560                                  ;	this point. -mrw 10/88
 32561                                  	
 32562                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32563                                  	; 22/09/2023
 32564 000058B1 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32565 000058B6 7407                    	jz	short getb14
 32566 000058B8 1E                      	push	ds ; **
 32567 000058B9 53                      	push	bx ; *
 32568 000058BA 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32569                                  getb14:
 32570                                  ;M039: Eliminated redundant HMA code.
 32571                                  
 32572                                  	; 22/09/2023
 32573 000058BF 41                      	inc	cx ; cx = 1
 32574                                  
 32575                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32576 000058C0 09F6                    	OR	SI,SI			; FAT sector ?
 32577 000058C2 7407                    	JZ	short getb15		
 32578                                  
 32579 000058C4 E85CDD                  	call	FATSECRD
 32580                                  	;mov	ah,2
 32581 000058C7 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32582                                  
 32583 000058C9 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32584                                  
 32585                                  getb15:
 32586 000058CB E881DD                  	call	DREAD			; Buffer is marked free if read barfs
 32587 000058CE B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32588                                  getb17:
 32589                                  	; 17/12/2022	
 32590                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32591                                  ;%if 0
 32592                                  	; MSDOS 6.0							  ;I001
 32593 000058D0 9C                      	pushf								  ;I001
 32594 000058D1 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32595 000058D7 7411                    	jz	short not_in_hma	; no				  ;I001
 32596                                  	;mov	cx,[es:bp+2]
 32597 000058D9 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32598 000058DD D1E9                    	shr	cx,1							  ;I001
 32599 000058DF 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32600 000058E0 89DE                    	mov	si,bx							  ;I001
 32601 000058E2 5F                      	pop	di ; *							  ;I001
 32602 000058E3 07                      	pop	es ; **							  ;I001
 32603 000058E4 FC                      	cld								  ;I001
 32604 000058E5 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32605 000058E6 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32606 000058E8 06                      	push	es							  ;I001
 32607 000058E9 1F                      	pop	ds							  ;I001
 32608                                  ;%endif
 32609                                  
 32610                                  ; 17/12/2022
 32611                                  %if 0
 32612                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32613                                  	; MSDOS 5.0
 32614                                  	pushf
 32615                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32616                                  	jz	short not_in_hma	; no
 32617                                  	popf
 32618                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32619                                  	shr	cx,1
 32620                                  	mov	si,bx
 32621                                  	pop	di ; *
 32622                                  	pop	es ; **
 32623                                  	cld
 32624                                  	rep	movsw
 32625                                  	push	es
 32626                                  	pop	ds
 32627                                  	jmp	short getb19 ; 27/11/2022
 32628                                  %endif
 32629                                  
 32630                                  not_in_hma:								  ;I001
 32631 000058EA 9D                      	popf							 	  ;I001
 32632                                  getb19:
 32633 000058EB 07                      	pop	es ; ***
 32634 000058EC 5A                      	pop	dx
 32635 000058ED 5F                      	pop	di
 32636 000058EE 5E                      	pop	si
 32637 000058EF 7248                    	JC	short getbx
 32638                                  
 32639                                  ;	The buffer has the data setup in it (if we were to read)
 32640                                  ;	Setup the various buffer fields
 32641                                  ;
 32642                                  ;	(ds:di) = buffer address
 32643                                  ;	(es:bp) = DPB address
 32644                                  ;	(HIGH_SECTOR:DX) = sector #
 32645                                  ;	(ah) = BUF_FLAGS value
 32646                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32647                                  
 32648                                  ;hkn; SS override
 32649                                  getb20:	; MSDOS 6.0
 32650 000058F1 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32651                                  	;mov	[di+8],cx
 32652 000058F6 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32653                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32654                                   	;mov	[di+6],dx
 32655 000058F9 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32656                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32657                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32658 000058FC 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32659                                  	;;mov	[di+0Ch],es
 32660                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32661 000058FF 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32662                                  	; 15/12/2022
 32663 00005902 268A4600                	mov	al,[es:bp]
 32664                                  	;mov	al,[es:bp+0]
 32665                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32666                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32667                                  	;mov	[di+4],ax
 32668 00005906 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32669                                  getb25:	
 32670                                  	; MSDOS 3.3
 32671                                  	;mov     ax,1
 32672                                  
 32673                                  	; MSDOS 6.0
 32674                                  	;mov	byte [di+0Ah],1
 32675 00005909 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32676 0000590D 31C0                    	XOR	AX,AX
 32677                                  
 32678                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32679 0000590F 09F6                    	OR	SI,SI				; FAT sector ?
 32680 00005911 740B                    	JZ	short getb30
 32681                                  
 32682                                  	;mov	al,[es:bp+8]
 32683 00005913 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32684                                  	
 32685                                  	; MSDOS 6.0
 32686 00005917 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32687                                  	;mov	ax,[es:bp+0Fh]
 32688 0000591A 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32689                                  						;  sectors
 32690                                  	; MSDOS 3.3
 32691                                  	;;mov	ah,[es:bp+0Fh]
 32692                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32693                                  
 32694                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32695                                  ;		is set
 32696                                  
 32697                                  getb30:	
 32698                                  	; MSDOS 6.0
 32699                                  	;mov	[di+0Bh],ax
 32700 0000591E 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32701                                  
 32702                                  	; MSDOS 3.3
 32703                                  	;;mov	[di+8],ax ; 15/08/2018	
 32704                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32705                                  
 32706 00005921 E8BBFE                  	CALL	PLACEBUF
 32707                                  
 32708                                  ;hkn; SS override for next 4
 32709                                  getb35: 
 32710                                  	; 17/12/2022
 32711                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32712                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32713                                  	;MOV	[SS:CURBUF+2],DS
 32714                                  	;MOV	[SS:LastBuffer+2],DS
 32715                                  	;MOV	[SS:CURBUF],DI
 32716                                  	;MOV	[SS:LastBuffer],DI
 32717                                  	;CLC
 32718                                  
 32719                                  	; 17/12/2022
 32720                                  	; 07/12/2022
 32721                                  	; Retro DOS v4.0
 32722 00005924 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32723 00005929 36893E[1E00]            	mov	[ss:LastBuffer],di
 32724 0000592E F8                      	clc
 32725                                  getb35x: ; 28/07/2019
 32726 0000592F 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32727 00005934 36893E[E205]            	MOV	[ss:CURBUF],di
 32728                                  
 32729                                  ;	Return with 'C' set appropriately
 32730                                  ;	(dx) = caller's original value
 32731                                  
 32732                                  getbx:	
 32733 00005939 16                      	push	ss
 32734 0000593A 1F                      	pop	ds
 32735                                  	;retn
 32736                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32737                                  getbuffrb_retn:
 32738                                  ;flushbuf_retn:	; 17/12/2022
 32739 0000593B C3                      	retn
 32740                                  
 32741                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32742                                  ;----------------------------------------------------------------------------
 32743                                  ; Input:
 32744                                  ;	DS = DOSGROUP
 32745                                  ;	AL = Physical unit number local buffers only
 32746                                  ;	   = -1 for all units and all remote buffers
 32747                                  ; Function:
 32748                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32749                                  ;	Carry set if error (user FAILed to I 24)
 32750                                  ;	    Flush operation completed.
 32751                                  ; DS Preserved, all others destroyed (ES too)
 32752                                  ;----------------------------------------------------------------------------
 32753                                  
 32754                                  	; 20/05/2019 - Retro DOS v4.0
 32755                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32756                                  
 32757                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32758                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32759                                  FLUSHBUF:
 32760                                  	; MSDOS 3.3
 32761                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32762                                  	;lds	di,[BUFFHEAD]
 32763                                  
 32764                                  	; MSDOS 6.0
 32765 0000593C E887FE                  	call	GETCURHEAD
 32766                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32767 0000593F 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32768 00005945 7508                    	jnz	short scan_buf_queue
 32769 00005947 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32770 0000594D 7423                    	je	short end_scan
 32771                                  	
 32772                                  scan_buf_queue:
 32773 0000594F E82900                  	call	CHECKFLUSH
 32774                                  	;push	ax  ; MSDOS 3.3
 32775                                  	; MSDOS 6.0
 32776                                  	;mov	ah,[di+4]
 32777 00005952 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32778 00005955 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32779 0000595A 7408                    	je	short free_the_buf
 32780                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32781 0000595C 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32782 00005962 7405                    	jz	short dont_free_the_buf
 32783                                  	; MSDOS 3.3
 32784                                  	;;mov	al,[di+4]
 32785                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32786                                  	;cmp	[SS:WPERR],al					;hkn;
 32787                                  	; 15/08/2018
 32788                                  	;jne	short dont_free_the_buf	
 32789                                  free_the_buf:
 32790                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32791 00005964 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32792                                  dont_free_the_buf:
 32793                                  	;pop	ax  ; MSDOS 3.3 	   	
 32794                                  
 32795                                  	; MSDOS 3.3
 32796                                  	;mov	di,[DI]
 32797                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32798                                  	;
 32799                                  	; 15/08/2018
 32800                                  	;lds	di,[di]
 32801                                  	;
 32802                                  	;cmp	di,-1 ; 0FFFFh
 32803                                  	;jnz	short scan_buf_queue 
 32804                                  	
 32805                                  	; MSDOS 6.0
 32806 00005969 8B3D                    	mov	di,[di]
 32807                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32808 0000596B 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32809 00005970 75DD                    	jne	short scan_buf_queue
 32810                                  
 32811                                  end_scan:
 32812 00005972 16                      	push	ss
 32813 00005973 1F                      	pop	ds
 32814                                  	; 01/08/2018 - Retro DOS v3.0
 32815                                  	;cmp	byte [FAILERR],0
 32816                                  	;jne	short bad_flush
 32817                                  	;retn
 32818                                  ;bad_flush:
 32819                                  	;stc
 32820                                  	;retn
 32821                                  
 32822                                  	; 17/12/2022
 32823                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32824                                  	; 01/08/2018 - Retro DOS v3.0
 32825 00005974 803E[4A03]01            	cmp	byte [FAILERR],1
 32826 00005979 F5                      	cmc
 32827                                  flushbuf_retn:
 32828 0000597A C3                      	retn
 32829                                  	
 32830                                  	; 17/12/2022
 32831                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32832                                  	;cmp	byte [FAILERR],0
 32833                                  	;jne	short bad_flush
 32834                                  	;retn
 32835                                  ;bad_flush:
 32836                                  	;stc
 32837                                  	;retn
 32838                                  
 32839                                  ;----------------------------------------------------------------------------
 32840                                  ;
 32841                                  ; Procedure Name : CHECKFLUSH
 32842                                  ;
 32843                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32844                                  ;	   DS:DI - pointer to buffer
 32845                                  ;
 32846                                  ; Function : Write out a buffer if it is dirty
 32847                                  ;
 32848                                  ; Carry set if problem (currently user FAILed to I 24)
 32849                                  ;
 32850                                  ;----------------------------------------------------------------------------
 32851                                  
 32852                                  CHECKFLUSH:
 32853                                  	; MSDOS 6.0
 32854 0000597B B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32855                                  	;cmp	[di+4],ah
 32856 0000597D 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32857 00005980 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32858 00005982 38C4                    	CMP	AH,AL			; 
 32859 00005984 7406                    	JZ	short DOBUFFER		; do this buffer
 32860                                  	;cmp	al,[di+4]
 32861 00005986 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32862 00005989 F8                      	CLC
 32863 0000598A 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32864                                  DOBUFFER:
 32865                                  	;test	byte [di+5],40h
 32866 0000598C F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32867 00005990 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32868 00005992 50                      	PUSH	AX
 32869                                  	;push	word [di+4]
 32870 00005993 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32871 00005996 E80B00                  	CALL	BUFWRITE
 32872 00005999 58                      	POP	AX
 32873 0000599A 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32874                                  	;and	ah,0BFh
 32875 0000599C 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32876                                  	;mov	[di+4],ax
 32877 0000599F 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32878                                  LEAVE_BUF:
 32879 000059A2 58                      	POP	AX			; Search info
 32880                                  checkflush_retn:
 32881 000059A3 C3                      	retn
 32882                                  
 32883                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32884                                  ;----------------------------------------------------------------------------
 32885                                  ;
 32886                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32887                                  ;
 32888                                  ;	ENTRY	DS:DI Points to the buffer
 32889                                  ;
 32890                                  ;	EXIT	Buffer marked free
 32891                                  ;		Carry set if error (currently user FAILed to I 24)
 32892                                  ;
 32893                                  ;	USES	All buf DS:DI
 32894                                  ;		HIGH_SECTOR
 32895                                  ;----------------------------------------------------------------------------
 32896                                  
 32897                                  	; 20/05/2019 - Retro DOS v4.0
 32898                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32899                                  
 32900                                  
 32901                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32902                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32903                                  
 32904                                  BUFWRITE:
 32905                                  	; 10/09/2018
 32906                                  	; 01/08/2018 - Retro DOS v3.0
 32907                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32908 000059A4 B8FF00                  	MOV	AX,00FFH
 32909                                  	;xchg	ax,[di+4]
 32910 000059A7 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32911 000059AA 3CFF                    	CMP	AL,0FFH
 32912 000059AC 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32913                                  	;test	ah,40h
 32914 000059AE F6C440                  	test	AH,buf_dirty
 32915 000059B1 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32916                                  	; MSDOS 6.0
 32917 000059B3 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32918                                  
 32919                                  ;hkn; SS override
 32920 000059B6 363A06[2203]            	CMP	AL,[SS:WPERR]
 32921 000059BB 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32922                                  
 32923                                  ;hkn; SS override
 32924                                  	; MSDOS 6.0
 32925 000059BD 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32926                                  	
 32927                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32928                                  	;les	bp,[di+13] ; MSDOS 6.0
 32929 000059C1 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32930                                  	;;lea	bx,[di+16]
 32931                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32932 000059C4 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32933                                  	;mov	dx,[di+6]
 32934 000059C7 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32935                                  	
 32936                                  	; MSDOS 6.0
 32937                                  	;mov	cx,[di+8]
 32938 000059CA 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32939                                  
 32940                                  ;hkn; SS override
 32941 000059CD 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32942 000059D2 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32943                                  	; MSDOS 3.3
 32944                                  	;; mov	cx,[DI+8]
 32945                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32946                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32947 000059D5 30ED                    	XOR	CH,CH
 32948                                  	;;mov	ah,ch ; MSDOS 3.3
 32949                                  
 32950                                  ;hkn; SS override for ALLOWED
 32951                                  	;mov	byte [SS:ALLOWED],18h
 32952 000059D7 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32953                                  	;test	byte [di+5],8
 32954                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32955                                  	;test	ah,8
 32956 000059DD F6C408                  	test	AH,buf_isDATA
 32957 000059E0 7406                    	JZ	short NO_IGNORE
 32958                                  	;or	byte [SS:ALLOWED],20h
 32959 000059E2 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32960                                  NO_IGNORE:
 32961                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32962                                  	; MSDOS 6.0
 32963                                  	;mov	ax,[di+11]
 32964 000059E8 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32965                                  
 32966 000059EB 57                      	PUSH	DI		; Save buffer pointer
 32967 000059EC 31FF                    	XOR	DI,DI		; Indicate failure
 32968                                  
 32969 000059EE 1E                      	push	ds ; *
 32970 000059EF 53                      	push	bx ; **
 32971                                  WRTAGAIN:
 32972 000059F0 57                      	push	di ; ***
 32973 000059F1 51                      	push	cx ; ****
 32974 000059F2 50                      	push	ax ; *****
 32975                                  	;MOV	CX,1
 32976                                  	; 17/12/2022
 32977                                  	; ch = 0
 32978 000059F3 B101                    	mov	cl,1 ; 24/07/2019
 32979                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32980                                  	;mov	cx,1
 32981 000059F5 53                      	push	bx ; ******
 32982 000059F6 52                      	push	dx ; *******
 32983 000059F7 1E                      	push	ds ; ********
 32984                                  
 32985                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32986                                  
 32987                                  	; MSDOS 6.0
 32988                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32989                                  	; 22/09/2023
 32990 000059F8 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32991 000059FD 7418                    	jz	short NBUFFINHMA
 32992 000059FF 51                      	push	cx
 32993 00005A00 06                      	push	es
 32994 00005A01 89DE                    	mov	si,bx
 32995 00005A03 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32996 00005A07 D1E9                    	shr	cx,1
 32997 00005A09 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32998 00005A0E 89FB                    	mov	bx,di
 32999 00005A10 FC                      	cld
 33000 00005A11 F3A5                    	rep	movsw
 33001 00005A13 06                      	push	es
 33002 00005A14 1F                      	pop	ds
 33003 00005A15 07                      	pop	es
 33004 00005A16 59                      	pop	cx
 33005                                  NBUFFINHMA:
 33006 00005A17 E895DC                  	call	DWRITE		; Write out the dirty buffer
 33007 00005A1A 1F                      	pop	ds ; ********
 33008 00005A1B 5A                      	pop	dx ; *******
 33009 00005A1C 5B                      	pop	bx ; ******
 33010 00005A1D 58                      	pop	ax ; *****
 33011 00005A1E 59                      	pop	cx ; ****
 33012 00005A1F 5F                      	pop	di ; ***
 33013 00005A20 7201                    	JC	short NOSET
 33014 00005A22 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33015                                  NOSET:				;	succeedes.
 33016 00005A23 01C2                    	ADD	DX,AX
 33017 00005A25 E2C9                    	LOOP	WRTAGAIN
 33018 00005A27 5B                      	pop	bx ; **
 33019 00005A28 1F                      	pop	ds ; *
 33020                                  	;OR	DI,DI		; Clears carry
 33021                                  	;JNZ	short BWROK	; At least one write worked
 33022                                  	;STC			; DI never got INCed, all writes failed.
 33023                                  	; 22/09/2023
 33024 00005A29 83FF01                  	cmp	di,1
 33025                                  BWROK:	
 33026 00005A2C 5F                      	POP	DI
 33027 00005A2D C3                      	retn
 33028                                  
 33029                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33030                                  ;----------------------------------------------------------------------------
 33031                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33032                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33033                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33034                                  ;	code and time
 33035                                  ;
 33036                                  ;	ENTRY	ES:BP = drive parameter block
 33037                                  ;
 33038                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33039                                  ;		[SC_DRIVE]= drive #
 33040                                  ;
 33041                                  ;	USES	Flags
 33042                                  ;----------------------------------------------------------------------------
 33043                                  
 33044                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33045                                  ; 04/05/2019 - Retro DOS v4.0
 33046                                  
 33047                                  SET_RQ_SC_PARMS:
 33048                                  ;hkn; SS override for all variables used in this procedure.
 33049 00005A2E 50                      	push	ax
 33050                                  	;mov	ax,[es:bp+2]
 33051 00005A2F 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33052 00005A33 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33053                                  	;;mov	al,[es:bp+0]
 33054                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33055                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33056                                  	; 15/12/2022
 33057 00005A37 268A4600                	mov	al,[ES:BP]
 33058 00005A3B 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33059 00005A3F 58                      	pop	ax
 33060                                  srspx:	
 33061 00005A40 C3                      	retn					;LB. return
 33062                                  
 33063                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33064                                  ;----------------------------------------------------------------------------
 33065                                  ; Input:
 33066                                  ;	none
 33067                                  ; Function:
 33068                                  ;	increment dirty buffers count
 33069                                  ; Output:
 33070                                  ;	dirty buffers count is incremented
 33071                                  ;
 33072                                  ; All registers preserved
 33073                                  ;----------------------------------------------------------------------------
 33074                                  
 33075                                  INC_DIRTY_COUNT:
 33076                                  ;; BUGBUG  ---- remove this routine
 33077                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33078 00005A41 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33079 00005A46 C3                      	retn
 33080                                  
 33081                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33082                                  ;----------------------------------------------------------------------------
 33083                                  ; Input:
 33084                                  ;	none
 33085                                  ; Function:
 33086                                  ;	decrement dirty buffers count
 33087                                  ; Output:
 33088                                  ;	dirty buffers count is decremented
 33089                                  ;
 33090                                  ; All registers preserved
 33091                                  ;----------------------------------------------------------------------------
 33092                                  
 33093                                  DEC_DIRTY_COUNT:
 33094 00005A47 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33095 00005A4D 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33096 00005A4F 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33097                                  					; error condition to underflow here? ;hkn;
 33098                                  ddcx:	
 33099 00005A54 C3                      	retn
 33100                                  
 33101                                  ;============================================================================
 33102                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33103                                  ;============================================================================
 33104                                  ; 02/08/2018 - Retro DOS v3.0
 33105                                  ; 29/04/2019 - Retro DOS v4.0
 33106                                  
 33107                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33108                                  
 33109                                  ; Pseudo EXEC system call for DOS
 33110                                  
 33111                                  ;	TITLE	MSPROC - process maintenance
 33112                                  ;	NAME	MSPROC
 33113                                  
 33114                                  ; =========================================================================
 33115                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33116                                  ;	I/O specs are defined in DISPATCH.
 33117                                  ;
 33118                                  ;	$WAIT
 33119                                  ;	$EXEC
 33120                                  ;	$Keep_process
 33121                                  ;	Stay_resident
 33122                                  ;	$EXIT
 33123                                  ;	$ABORT
 33124                                  ;	abort_inner
 33125                                  ;
 33126                                  ;	Modification history:
 33127                                  ;
 33128                                  ;		Created: ARR 30 March 1983
 33129                                  ;		AN000	version 4.0 jan. 1988
 33130                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33131                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33132                                  ;
 33133                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33134                                  ;
 33135                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33136                                  ;		       dossym.inc. 7/30/90
 33137                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33138                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33139                                  ;		       stack is provided at the end of the program. Note that
 33140                                  ;		       only SP is changed.
 33141                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33142                                  ;
 33143                                  ;		M028 - 4b04 implementation
 33144                                  ;
 33145                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33146                                  ;			in memory block >= 64K, sp = 0. If memory block
 33147                                  ;			obtained is <64K, point sp at the end of the memory
 33148                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33149                                  ;			added for a stack segment which may be needed if it
 33150                                  ;			is loaded in low memory situations.
 33151                                  ;
 33152                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33153                                  ;
 33154                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33155                                  ;			a bad environment if it reached 32767 bytes. Changed
 33156                                  ;			to allow 32768 bytes of environment.
 33157                                  ;
 33158                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33159                                  ;		       COM file high. Also ensure that if the biggest block
 33160                                  ;		       into which we load the com file is less than 64K then
 33161                                  ;		       we provide atleast 256 bytes of stack to the user.
 33162                                  ;
 33163                                  ;		M050 - Made Lie table search CASE insensitive
 33164                                  ;
 33165                                  ;		M060 - Removed special version table from the kernal and
 33166                                  ;                      put it in a device drive which puts the address
 33167                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33168                                  ;		       as a DWORD.
 33169                                  ;
 33170                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33171                                  ;		       entry do not try to load low if there is no space in
 33172                                  ;		       UMBs.
 33173                                  ;
 33174                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33175                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33176                                  ;		       change return address to LeaveDos if AL=5.
 33177                                  ;
 33178                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33179                                  ;                      controls building a version of MSDOS.SYS that only
 33180                                  ;                      runs programs from a fixed list (defined in the
 33181                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33182                                  ;                      for details.  This feature is used to build a
 33183                                  ;                      "special" version of DOS that can be handed out to
 33184                                  ;                      OEM/ISV customers as part of a "service" disk.
 33185                                  ;
 33186                                  ; =========================================================================
 33187                                  
 33188                                  ;SAVEXIT  EQU  10
 33189                                  
 33190                                  ;BREAK	<$WAIT - return previous process error code>
 33191                                  ; =========================================================================
 33192                                  ;	$WAIT - Return previous process error code.
 33193                                  ;
 33194                                  ;	Assembler usage:
 33195                                  ;
 33196                                  ;	    MOV     AH, WaitProcess
 33197                                  ;	    INT     int_command
 33198                                  ;
 33199                                  ;	ENTRY	none
 33200                                  ;	EXIT	(ax) = exit code
 33201                                  ;	USES	all
 33202                                  ; =========================================================================
 33203                                  
 33204                                  	; 20/05/2019 - Retro DOS v4.0
 33205                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33206                                  
 33207                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33208                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33209                                  _$WAIT:
 33210                                  	; 02/08/2018 - Retro DOS v3.0
 33211                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33212                                  
 33213 00005A55 31C0                    	xor	AX,AX
 33214 00005A57 368706[3403]            	xchg	AX,[ss:exit_code]
 33215 00005A5C E9DCAB                  	jmp	SYS_RET_OK
 33216                                  
 33217                                  ; =========================================================================
 33218                                  ;BREAK <$exec - load/go a program>
 33219                                  ;	EXEC.ASM - EXEC System Call
 33220                                  ;
 33221                                  ;
 33222                                  ; Assembler usage:
 33223                                  ;	    lds     DX, Name
 33224                                  ;	    les     BX, Blk
 33225                                  ;	    mov     AH, Exec
 33226                                  ;	    mov     AL, FUNC
 33227                                  ;	    int     INT_COMMAND
 33228                                  ;
 33229                                  ;	AL  Function
 33230                                  ;	--  --------
 33231                                  ;	 0  Load and execute the program.
 33232                                  ;	 1  Load, create the program header but do not
 33233                                  ;	    begin execution.
 33234                                  ;	 3  Load overlay. No header created.
 33235                                  ;
 33236                                  ;	    AL = 0 -> load/execute program
 33237                                  ;
 33238                                  ;	    +---------------------------+
 33239                                  ;	    | WORD segment address of	|
 33240                                  ;	    | environment.		|
 33241                                  ;	    +---------------------------+
 33242                                  ;	    | DWORD pointer to ASCIZ	|
 33243                                  ;	    | command line at 80h	|
 33244                                  ;	    +---------------------------+
 33245                                  ;	    | DWORD pointer to default	|
 33246                                  ;	    | FCB to be passed at 5Ch	|
 33247                                  ;	    +---------------------------+
 33248                                  ;	    | DWORD pointer to default	|
 33249                                  ;	    | FCB to be passed at 6Ch	|
 33250                                  ;	    +---------------------------+
 33251                                  ;
 33252                                  ;	    AL = 1 -> load program
 33253                                  ;
 33254                                  ;	    +---------------------------+
 33255                                  ;	    | WORD segment address of	|
 33256                                  ;	    | environment.		|
 33257                                  ;	    +---------------------------+
 33258                                  ;	    | DWORD pointer to ASCIZ	|
 33259                                  ;	    | command line at 80h	|
 33260                                  ;	    +---------------------------+
 33261                                  ;	    | DWORD pointer to default	|
 33262                                  ;	    | FCB to be passed at 5Ch	|
 33263                                  ;	    +---------------------------+
 33264                                  ;	    | DWORD pointer to default	|
 33265                                  ;	    | FCB to be passed at 6Ch	|
 33266                                  ;	    +---------------------------+
 33267                                  ;	    | DWORD returned value of	|
 33268                                  ;	    | CS:IP			|
 33269                                  ;	    +---------------------------+
 33270                                  ;	    | DWORD returned value of	|
 33271                                  ;	    | SS:IP			|
 33272                                  ;	    +---------------------------+
 33273                                  ;
 33274                                  ;	    AL = 3 -> load overlay
 33275                                  ;
 33276                                  ;	    +---------------------------+
 33277                                  ;	    | WORD segment address where|
 33278                                  ;	    | file will be loaded.	|
 33279                                  ;	    +---------------------------+
 33280                                  ;	    | WORD relocation factor to |
 33281                                  ;	    | be applied to the image.	|
 33282                                  ;	    +---------------------------+
 33283                                  ;
 33284                                  ; Returns:
 33285                                  ;	    AX = error_invalid_function
 33286                                  ;	       = error_bad_format
 33287                                  ;	       = error_bad_environment
 33288                                  ;	       = error_not_enough_memory
 33289                                  ;	       = error_file_not_found
 33290                                  ; =========================================================================
 33291                                  ;
 33292                                  ;   Revision history:
 33293                                  ;
 33294                                  ;	 A000	version 4.00  Jan. 1988
 33295                                  ;
 33296                                  ; =========================================================================
 33297                                  
 33298                                  Exec_Internal_Buffer		EQU	OPENBUF
 33299                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33300                                  
 33301                                  ; =========================================================================
 33302                                  
 33303                                  ;IF1		; warning message on buffers
 33304                                  ;%out	Please make sure that the following are contiguous and of the
 33305                                  ;%out	following sizes:
 33306                                  ;%out
 33307                                  ;%out	OpenBuf     128
 33308                                  ;%out	RenBuf	    128
 33309                                  ;%out	SearchBuf    53
 33310                                  ;%out	DummyCDS    curdirLen
 33311                                  ;ENDIF
 33312                                  
 33313                                  ; =========================================================================
 33314                                  
 33315                                  ; =========================================================================
 33316                                  ;
 33317                                  ; =========================================================================
 33318                                  
 33319                                  	; 20/05/2019 - Retro DOS v4.0
 33320                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33321                                  
 33322                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33323                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33324                                  	
 33325                                  _$EXEC:
 33326                                  	; 02/08/2018 - Retro DOS v3.0
 33327                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33328                                  
 33329                                  EXEC001S:
 33330                                  	;LocalVar    Exec_Blk		,DWORD
 33331                                  	;LocalVar    Exec_Func		,BYTE
 33332                                  	;LocalVar    Exec_Load_High	,BYTE
 33333                                  	;LocalVar    Exec_FH		,WORD
 33334                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33335                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33336                                  	;LocalVar    Exec_Environ	,WORD
 33337                                  	;LocalVar    Exec_Size		,WORD
 33338                                  	;LocalVar    Exec_Load_Block	,WORD
 33339                                  	;LocalVar    Exec_DMA		,WORD
 33340                                  	;LocalVar    ExecNameLen 	,WORD
 33341                                  	;LocalVar    ExecName		,DWORD
 33342                                  	;
 33343                                  	;LocalVar    Exec_DMA_Save	,WORD
 33344                                  	;LocalVar    Exec_NoStack	,BYTE
 33345                                  
 33346                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33347                                  	;%define	Exec_Blk	dword [bp-4]
 33348                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33349                                  	%define		Exec_BlkL	word [bp-4]	
 33350                                  	%define		Exec_BlkH	word [bp-2]
 33351                                  	%define		Exec_Func	byte [bp-5]
 33352                                  	%define		Exec_Load_High	byte [bp-6]
 33353                                  	%define		Exec_FH		word [bp-8]
 33354                                  	%define		Exec_Rel_Fac	word [bp-10]
 33355                                  	%define		Exec_Res_Len_Para word [bp-12]
 33356                                  	%define		Exec_Environ	word [bp-14]
 33357                                  	%define		Exec_Size	word [bp-16]
 33358                                  	%define		Exec_Load_Block	word [bp-18]
 33359                                  	%define		Exec_DMA	word [bp-20]
 33360                                  	%define		ExecNameLen	word [bp-22]
 33361                                  	;%define	ExecName	dword [bp-26]
 33362                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33363                                  	%define		ExecNameL	word [bp-26]	
 33364                                  	%define		ExecNameH	word [bp-24]
 33365                                  	; MSDOS 6.0
 33366                                  	%define		Exec_DMA_Save	word [bp-28]
 33367                                  	%define		Exec_NoStack	byte [bp-29]
 33368                                  	
 33369                                  	; ==================================================================
 33370                                  	; validate function
 33371                                  	; ==================================================================
 33372                                  		      	
 33373                                  	; M068 - Start
 33374                                  	;
 33375                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33376                                  	; possibility that the count may not be decremented all the way to
 33377                                  	; 0. A typical case is if the program for which we intended to keep 
 33378                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 33379                                  	; calls), exits pre-maturely due to error conditions.
 33380                                  
 33381                                  	; MSDOS 6.0
 33382 00005A5F 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33383                                  
 33384                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33385                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33386                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 33387                                  
 33388 00005A65 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33389                                  	;jne	short @f
 33390 00005A67 7505                    	jne	short Exec_@f		; N: continue
 33391                                  					; Y: change ret addr. to LeaveDos.
 33392 00005A69 59                      	pop	cx			; Note CX is not input to ExecReady
 33393 00005A6A B9[0804]                	mov	cx,LeaveDOS
 33394 00005A6D 51                      	push	cx
 33395                                  ;@@:
 33396                                  Exec_@f:
 33397                                  	; M068 - End
 33398                                  	
 33399                                  	;Enter
 33400                                  
 33401 00005A6E 55                      	push	bp
 33402 00005A6F 89E5                    	mov	bp,sp
 33403                                  	;;sub	sp,26	; MSDOS 3.3
 33404                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33405                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33406                                  	; 17/12/2022
 33407                                  	; 20/05/2019
 33408 00005A71 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33409                                  
 33410                                  	; MSDOS 6.0
 33411 00005A74 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33412                                  					; M030
 33413 00005A76 7614                    	jna	short Exec_Check_2
 33414                                  
 33415                                  	; MSDOS 3.3
 33416                                  	;cmp	AL,3
 33417                                  	;jna	short Exec_Check_2
 33418                                  
 33419                                  Exec_Bad_Fun:
 33420 00005A78 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33421                                  					; Extended Error Locus	;smr;SS Override
 33422                                  	;mov	al,1
 33423 00005A7E B001                    	mov	al,error_invalid_function
 33424                                  
 33425                                  Exec_Ret_Err:
 33426                                  	;Leave
 33427 00005A80 89EC                    	mov	sp,bp
 33428 00005A82 5D                      	pop	bp
 33429                                  	;transfer SYS_RET_ERR
 33430 00005A83 E9BEAB                  	jmp	SYS_RET_ERR
 33431                                  
 33432                                  	; MSDOS 6.0
 33433                                  ExecReadyJ:
 33434 00005A86 E8FD17                  	call	ExecReady		; M028
 33435 00005A89 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33436                                  
 33437                                  Exec_Check_2:
 33438 00005A8C 3C02                    	cmp	AL,2			
 33439 00005A8E 74E8                    	je	short Exec_Bad_Fun
 33440                                  
 33441                                  	; MSDOS 6.0
 33442 00005A90 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33443 00005A92 74E4                    	je	short Exec_Bad_Fun
 33444                                  	
 33445 00005A94 3C05                    	cmp	al,5			; M028 ; M030
 33446 00005A96 74EE                    	je	short ExecReadyJ	; M028
 33447                                  
 33448                                  	;mov	[bp-4],bx
 33449 00005A98 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33450                                  	;mov	[bp-2],es
 33451 00005A9B 8C46FE                  	mov	Exec_BlkH,ES
 33452                                  	;mov	[bp-5],al
 33453 00005A9E 8846FB                  	mov	Exec_Func,AL
 33454                                  	;mov	byte [bp-6],0
 33455 00005AA1 C646FA00                	mov	Exec_Load_High,0
 33456                                  
 33457                                  	;mov	[bp-26],dx
 33458 00005AA5 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33459                                  	;mov	[bp-24],ds
 33460 00005AA8 8C5EE8                  	mov	ExecNameH,DS
 33461 00005AAB 89D6                    	mov	SI,DX			; move pointer to convenient place
 33462                                  	;invoke	DStrLen
 33463 00005AAD E834B7                  	call	DStrLen
 33464                                  	;mov	[bp-22],cx
 33465 00005AB0 894EEA                  	mov	ExecNameLen,CX		; save length
 33466                                  
 33467                                  	; MSDOS 6.0
 33468 00005AB3 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33469 00005AB7 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33470                                  
 33471 00005ABB 30C0                    	xor	AL,AL			; open for reading
 33472 00005ABD 55                      	push	BP
 33473                                  
 33474                                  	; MSDOS 6.0
 33475                                  	;or	byte [ss:DOS_FLAG],1
 33476 00005ABE 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33477                                  					; the redir that this open call is
 33478                                  					; due to an exec.
 33479                                  
 33480                                  	;invoke	$OPEN			; is the file there?
 33481 00005AC4 E80513                  	call	_$OPEN
 33482                                  
 33483                                  	; MSDOS 6.0
 33484 00005AC7 9C                      	pushf
 33485                                  	; 02/06/2019
 33486                                  	;and	byte [ss:DOS_FLAG],0FEh
 33487 00005AC8 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33488 00005ACE 9D                      	popf
 33489                                  
 33490 00005ACF 5D                      	pop	BP
 33491                                  
 33492                                  	; MSDOS 3.3 & MSDOS 6.0
 33493 00005AD0 72AE                    	jc	short Exec_Ret_Err
 33494                                  
 33495                                  	;mov	[bp-8],ax
 33496 00005AD2 8946F8                  	mov	Exec_FH,AX
 33497 00005AD5 89C3                    	mov	BX,AX
 33498 00005AD7 30C0                    	xor	AL,AL
 33499                                  	;invoke	$Ioctl
 33500 00005AD9 E847C7                  	call	_$IOCTL
 33501 00005ADC 7207                    	jc	short Exec_BombJ
 33502                                  
 33503                                  	;test	dl,80h
 33504 00005ADE F6C280                  	test	DL,devid_ISDEV
 33505 00005AE1 740A                    	jz	short Exec_Check_Environ
 33506                                  
 33507                                  	;mov	al,2
 33508 00005AE3 B002                    	mov	AL,error_file_not_found
 33509                                  Exec_BombJ:
 33510 00005AE5 E9CA00                  	jmp	Exec_Bomb
 33511                                  
 33512                                  BadEnv:
 33513                                  	;mov	al,0Ah
 33514 00005AE8 B00A                    	mov	AL,error_bad_environment
 33515 00005AEA E9C500                  	jmp	Exec_Bomb
 33516                                  
 33517                                  Exec_Check_Environ:
 33518                                  	;mov	word [bp-18],0
 33519 00005AED C746EE0000              	mov	Exec_Load_Block,0
 33520                                  	;mov	word [bp-14],0
 33521 00005AF2 C746F20000              	mov	Exec_Environ,0
 33522                                  					; overlays... no environment
 33523                                  	;test	byte [bp-5],2
 33524 00005AF7 F646FB02                	test	Exec_Func,exec_func_overlay
 33525 00005AFB 7552                    	jnz	short Exec_Read_Header
 33526                                  
 33527                                  	;lds	si,[bp-4]
 33528 00005AFD C576FC                  	lds	SI,Exec_Blk		; get block
 33529 00005B00 8B04                    	mov	ax,[SI]
 33530                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33531 00005B02 09C0                    	or	AX,AX
 33532 00005B04 750C                    	jnz	short Exec_Scan_Env
 33533                                  
 33534 00005B06 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33535                                  	;mov	ax,[44]
 33536 00005B0B A12C00                  	mov	AX,[PDB.ENVIRON]
 33537                                  
 33538                                  ; MSDOS 6.0
 33539                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33540                                  ;
 33541                                  ; Exec_environ is being correctly initialized after the environment has been
 33542                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33543                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33544                                  ; parent's environment.
 33545                                  ;	mov	Exec_Environ,AX
 33546                                  ;
 33547                                  ;----------------------------------------------------------------------------
 33548                                  
 33549                                  	;mov	[bp-14],ax
 33550                                  	;mov	Exec_Environ,ax
 33551                                  
 33552 00005B0E 09C0                    	or	AX,AX
 33553 00005B10 743D                    	jz	short Exec_Read_Header
 33554                                  
 33555                                  Exec_Scan_Env:
 33556 00005B12 8EC0                    	mov	ES,AX
 33557 00005B14 31FF                    	xor	DI,DI
 33558                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33559 00005B16 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33560 00005B19 30C0                    	xor	AL,AL
 33561                                  
 33562                                  Exec_Get_Environ_Len:
 33563 00005B1B F2AE                    	repnz	scasb			; find that nul byte
 33564 00005B1D 75C9                    	jnz	short BadEnv
 33565                                  
 33566 00005B1F 49                      	dec	CX			; Dec CX for the next nul byte test
 33567 00005B20 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33568                                  
 33569 00005B22 AE                      	scasb				; is there another nul byte?
 33570 00005B23 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33571                                  
 33572 00005B25 57                      	push	DI
 33573                                  	;lea	bx,[DI+11h]
 33574 00005B26 8D5D11                  	lea	BX,[DI+0Fh+2]
 33575                                  	;add	bx,[bp-22]
 33576 00005B29 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33577                                  					; remember argv[0] length
 33578                                  					; round up and remember argc
 33579 00005B2C B104                    	mov	CL,4
 33580 00005B2E D3EB                    	shr	BX,CL			; number of paragraphs needed
 33581 00005B30 06                      	push	ES
 33582                                  	;invoke	$Alloc			; can we get the space?
 33583 00005B31 E84406                  	call	_$ALLOC
 33584 00005B34 1F                      	pop	DS
 33585 00005B35 59                      	pop	CX
 33586                                  
 33587                                  	;jnc	short Exec_Save_Environ
 33588                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33589                                  	; 17/12/2022
 33590 00005B36 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33591                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33592                                  	;jnc	short Exec_Save_Environ
 33593                                  	;jmp	SHORT Exec_No_Mem
 33594                                  
 33595                                  Exec_Save_Environ:
 33596 00005B38 8EC0                    	mov	ES,AX
 33597                                  	;mov	[bp-14],ax
 33598 00005B3A 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33599 00005B3D 31F6                    	xor	SI,SI
 33600 00005B3F 89F7                    	mov	DI,SI
 33601 00005B41 F3A4                    	rep	movsb			; copy the environment
 33602 00005B43 B80100                  	mov	AX,1
 33603 00005B46 AB                      	stosw
 33604                                  	;lds	si,[bp-26]
 33605 00005B47 C576E6                  	lds	SI,ExecName
 33606                                  	;mov	cx,[bp-22]
 33607 00005B4A 8B4EEA                  	mov	CX,ExecNameLen
 33608 00005B4D F3A4                    	rep	movsb
 33609                                  
 33610                                  Exec_Read_Header:
 33611                                  	; We read in the program header into the above data area and
 33612                                  	; determine where in this memory the image will be located.
 33613                                  
 33614                                  	;Context DS
 33615 00005B4F 16                      	push	ss
 33616 00005B50 1F                      	pop	ds
 33617                                  	;mov	cx,26
 33618 00005B51 B91A00                  	mov	CX,exec_header_len	; header size
 33619 00005B54 BA[C80F]                	mov	DX,exec_signature
 33620 00005B57 06                      	push	ES
 33621 00005B58 1E                      	push	DS
 33622 00005B59 E88304                  	call	ExecRead
 33623 00005B5C 1F                      	pop	DS
 33624 00005B5D 07                      	pop	ES
 33625 00005B5E 7250                    	jc	short Exec_Bad_File
 33626                                  
 33627 00005B60 09C0                    	or	AX,AX
 33628 00005B62 744C                    	jz	short Exec_Bad_File
 33629                                  	;cmp	ax,26
 33630 00005B64 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33631 00005B67 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33632                                  
 33633 00005B69 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33634 00005B6F 7504                    	jnz	short Exec_Check_Sig
 33635                                  
 33636                                  	;mov	byte [bp-6],0FFh
 33637 00005B71 C646FAFF                	mov	Exec_Load_High,-1
 33638                                  
 33639                                  Exec_Check_Sig:
 33640 00005B75 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33641                                  	;cmp	ax,5A4Dh ; 'MZ'
 33642 00005B78 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33643 00005B7B 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33644                                  
 33645                                  	;cmp	ax,4D5Ah ; 'ZM'
 33646 00005B7D 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33647 00005B80 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33648                                  
 33649                                  Exec_Com_Filej:
 33650 00005B82 E9E901                  	jmp	Exec_Com_File
 33651                                  
 33652                                  	; We have the program header... determine memory requirements
 33653                                  
 33654                                  Exec_Save_Start:
 33655 00005B85 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33656 00005B88 B105                    	mov	CL,5			; convert to paragraphs
 33657 00005B8A D3E0                    	shl	AX,CL
 33658 00005B8C 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33659                                  	;mov	[bp-12],ax
 33660 00005B90 8946F4                  	mov	Exec_Res_Len_Para,AX
 33661                                  
 33662                                  		; Do we need to allocate memory?
 33663                                  		; Yes if function is not load-overlay
 33664                                  
 33665                                  	;test	byte [bp-5],2
 33666 00005B93 F646FB02                	test	Exec_Func,exec_func_overlay
 33667 00005B97 7445                    	jz	short Exec_Allocate	; allocation of space
 33668                                  
 33669                                  		; get load address from block
 33670                                  
 33671                                  	;les	di,[bp-4]
 33672 00005B99 C47EFC                  	les	DI,Exec_Blk
 33673 00005B9C 268B05                  	mov	ax,[es:di]
 33674                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33675                                  	;mov	[bp-20],ax
 33676 00005B9F 8946EC                  	mov	Exec_DMA,AX
 33677                                  
 33678                                  	; 17/12/2022
 33679                                  	;;mov	ax,[es:di+2]
 33680                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33681                                  	;;mov	[bp-10],ax
 33682                                  	;mov	Exec_Rel_Fac,AX
 33683                                  
 33684                                  	; 17/12/2022
 33685                                  	; 30/11/2022 (!most proper code!)
 33686                                  	;mov	dx,[es:di+2]
 33687 00005BA2 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33688                                  	;mov	[bp-10],dx
 33689 00005BA6 8956F6                  	mov	Exec_Rel_Fac,dx
 33690                                  	; ax = Exec_DMA
 33691 00005BA9 E9DE00                  	jmp	Exec_Find_Res
 33692                                  
 33693                                  ; 17/12/2022
 33694                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33695                                  ; 27/09/2023
 33696                                  %if 0
 33697                                  	; 02/06/2019 - Retro DOS v4.0
 33698                                  	;mov	ax,[bp-20]  ; *+*
 33699                                  	mov	AX,Exec_DMA ; *+*
 33700                                  	; 10/08/2018
 33701                                  	jmp	Exec_Find_Res		; M000
 33702                                  %endif
 33703                                  
 33704                                  Exec_No_Mem:
 33705                                  	;mov	al,8
 33706 00005BAC B008                    	mov	AL,error_not_enough_memory
 33707 00005BAE EB02                    	jmp	short Exec_Bomb
 33708                                  
 33709                                  Exec_Bad_File:
 33710                                  	;mov	al,0Bh
 33711 00005BB0 B00B                    	mov	AL,error_bad_format
 33712                                  
 33713                                  Exec_Bomb:
 33714                                  	;mov	bx,[bp-8]
 33715 00005BB2 8B5EF8                  	mov	BX,Exec_FH
 33716 00005BB5 E84004                  	call	Exec_Dealloc
 33717                                  	;LeaveCrit CritMem
 33718 00005BB8 E858B7                  	call	LCritMEM
 33719                                  	;save	<AX,BP>
 33720 00005BBB 50                      	push	ax
 33721 00005BBC 55                      	push	bp
 33722                                  	;invoke	$CLOSE
 33723 00005BBD E83D0A                  	call	_$CLOSE
 33724                                  	;restore <BP,AX>
 33725 00005BC0 5D                      	pop	bp
 33726 00005BC1 58                      	pop	ax
 33727 00005BC2 E9BBFE                  	jmp	Exec_Ret_Err
 33728                                  
 33729                                  Exec_Chk_Mem: 
 33730                                  	
 33731                                  	; 24/09/2023
 33732                                  	; ds = DOSDATA
 33733                                  ; 17/12/2022
 33734                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33735                                  ;%if 0
 33736                                  	; MSDOS 6.0    			; M063 - Start
 33737                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33738                                  	; 10/06/2019
 33739 00005BC5 A0[0203]                	mov	al,[AllocMethod]
 33740                                  	;mov	bl,[ss:ALLOCMSAVE]
 33741 00005BC8 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33742                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33743 00005BCC 881E[0203]              	mov	[AllocMethod],bl
 33744                                  	
 33745 00005BD0 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33746 00005BD3 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33747                                  	;				; N: continue
 33748                                  	;
 33749 00005BD5 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33750 00005BD7 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33751                                  	; 02/06/2019
 33752                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33753 00005BD9 A1[8A00]                	mov	ax,[SAVE_AX]
 33754                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33755                                  					; M063 - End
 33756 00005BDC EB2B                    	jmp	short Exec_Norm_Alloc1
 33757                                  ;%endif
 33758                                  
 33759                                  ; 17/12/2022
 33760                                  %if 0
 33761                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33762                                  	; MSDOS 6.0    			; M063 - Start
 33763                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33764                                  	mov	bl,[ss:ALLOCMSAVE]
 33765                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33766                                  
 33767                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33768                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33769                                  	;				; N: continue
 33770                                  	;
 33771                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33772                                  	jz	short Exec_No_Mem	; N: no memory 
 33773                                  
 33774                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33775                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33776                                  					; M063 - End
 33777                                  %endif
 33778                                  
 33779                                  Exec_Allocate:
 33780                                  	; 09/09/2018
 33781                                  
 33782                                  	; M005 - START
 33783                                  	; If there is no STACK segment for this exe file and if this
 33784                                  	; not an overlay and the resident size is less than 64K - 
 33785                                  	; 256 bytes we shall add 256 bytes to the programs 
 33786                                  	; resident memory requirement and set Exec_SP to this value.
 33787                                  	
 33788                                  	; 17/12/2022
 33789 00005BDE 29DB                    	sub	bx,bx ; 0	
 33790                                  
 33791                                  	; MSDOS 6.0
 33792                                  	;;mov	byte [bp-29],0
 33793                                  	;mov	Exec_NoStack,0
 33794                                  	; 17/12/2022
 33795 00005BE0 885EE3                  	mov	Exec_NoStack,bl ; 0
 33796 00005BE3 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33797                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33798 00005BE7 7511                    	jne	short ea1		; Y: continue normal processing
 33799 00005BE9 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33800                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33801 00005BED 750B                    	jne	short ea1		; Y: continue normal processing
 33802                                  
 33803                                  	;inc	byte [bp-29]
 33804 00005BEF FE46E3                  	inc	Exec_NoStack
 33805 00005BF2 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33806 00005BF5 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33807                                  
 33808 00005BF7 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33809                                  ea1:
 33810                                  	; M005 - END
 33811                                  
 33812                                  	; MSDOS 6.0			; M000 - start
 33813                                  	; 20/05/2019
 33814                                  	; (ds = ss = DOSDATA)
 33815 00005BFA F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33816                                  					; Q: is the alloc strat high_first
 33817 00005BFF 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33818                                  					; Y: set high_only bit
 33819 00005C01 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33820                                  					; M000 - end
 33821                                  Exec_Norm_Alloc:
 33822 00005C06 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33823                                  Exec_Norm_Alloc1:	; 02/06/2019
 33824                                  					; M000: attempt at allocating memory
 33825                                  	; MSDOS 3.3
 33826                                  	;push	ax			; M000
 33827                                  
 33828 00005C09 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33829 00005C0C 1E                      	push	DS
 33830                                  	;invoke	$Alloc			; should have carry set and BX has max
 33831 00005C0D E86805                  	call	_$ALLOC
 33832 00005C10 1F                      	pop	DS
 33833                                  
 33834                                  	; MSDOS 6.0
 33835 00005C11 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33836                                  	; MSDOS 3.3
 33837                                  	;pop	ax			; M000
 33838                                  
 33839 00005C14 83C010                  	add	AX,10h			; room for header
 33840 00005C17 83FB11                  	cmp	BX,11h			; enough room for a header
 33841                                  	; MSDOS 6.0
 33842 00005C1A 72A9                    	jb	short Exec_Chk_Mem	; M000
 33843                                  	; MSDOS 3.3	
 33844                                  	;jb	short Exec_No_Mem
 33845                                  
 33846 00005C1C 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33847                                  	; MSDOS 6.0
 33848 00005C1E 77A5                    	ja	short Exec_Chk_Mem	; M000
 33849                                  	; MSDOS 3.3
 33850                                  	;ja	short Exec_No_Mem
 33851                                  
 33852                                  	;test	byte [bp-6],0FFh
 33853 00005C20 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33854 00005C24 7518                    	jnz	short Exec_BX_Max	; use max
 33855                                  
 33856                                  	; 09/09/2018
 33857                                  
 33858 00005C26 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33859                                  	; MSDOS 6.0
 33860 00005C2A 7299                    	jc	short Exec_Chk_Mem		; M000
 33861                                  	; MSDOS 3.3
 33862                                  	;jc	short Exec_No_Mem
 33863                                  
 33864 00005C2C 39D8                    	cmp	AX,BX			; enough space?
 33865                                  	; MSDOS 6.0
 33866 00005C2E 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33867                                  	; MSDOS 3.3
 33868                                  	;ja	short Exec_No_Mem
 33869                                  
 33870 00005C30 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33871 00005C34 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33872 00005C38 7204                    	jc	short Exec_BX_Max
 33873                                  
 33874 00005C3A 39D8                    	cmp	AX,BX
 33875 00005C3C 7602                    	jbe	short Exec_Got_Block
 33876                                  
 33877                                  Exec_BX_Max:
 33878 00005C3E 89D8                    	mov	AX,BX
 33879                                  
 33880                                  Exec_Got_Block:
 33881                                  	; 03/08/2018 - Retro DOS v3.0
 33882                                  
 33883 00005C40 1E                      	push	DS
 33884 00005C41 89C3                    	mov	BX,AX
 33885                                  	;mov	[bp-16],bx
 33886 00005C43 895EF0                  	mov	Exec_Size,BX
 33887                                  	;invoke	$Alloc			; get the space
 33888 00005C46 E82F05                  	call	_$ALLOC
 33889 00005C49 1F                      	pop	DS
 33890                                  	; MSDOS 6.0
 33891                                  	;jc	short Exec_Chk_Mem	; M000
 33892                                  	; MSDOS 3.3
 33893                                  	;;jc	short Exec_No_Mem
 33894                                  	; 20/05/2019
 33895 00005C4A 7303                    	jnc	short ea0
 33896 00005C4C E976FF                  	jmp	Exec_Chk_Mem
 33897                                  ea0:
 33898                                  	; MSDOS 6.0
 33899 00005C4F 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33900 00005C53 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33901                                  
 33902                                  ;M029; Begin changes
 33903                                  ; This code does special handling for programs with no stack segment. If so,
 33904                                  ;check if the current block is larger than 64K. If so, we do not modify
 33905                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33906                                  ;case Exec_SS is not changed.
 33907                                  
 33908                                  	; MSDOS 6.0
 33909                                  	;cmp	byte [bp-29],0
 33910 00005C57 807EE300                	cmp	Exec_NoStack,0
 33911                                  	;je	@f
 33912 00005C5B 7412                    	je	short ea2
 33913                                  
 33914 00005C5D 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33915                                  	;jae	@f			; Y: Exec_SP = 0
 33916 00005C61 730C                    	jae	short ea2
 33917                                  
 33918                                  ;Make Exec_SP point at the top of the memory block
 33919                                  
 33920 00005C63 B104                    	mov	cl,4
 33921 00005C65 D3E3                    	shl	bx,cl			; get byte offset
 33922 00005C67 81EB0001                	sub	bx,100h			; take care of PSP
 33923 00005C6B 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33924                                  ea2:
 33925                                  ;@@:
 33926                                  ;M029; end changes
 33927                                  
 33928                                  	;mov	[bp-18],ax
 33929 00005C6F 8946EE                  	mov	Exec_Load_Block,AX
 33930 00005C72 83C010                  	add	AX,10h
 33931                                  	;test	byte [bp-6],0FFh
 33932 00005C75 F646FAFF                	test	Exec_Load_High,-1
 33933 00005C79 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33934                                  
 33935                                  	;add	ax,[bp-16]
 33936 00005C7B 0346F0                  	add	AX,Exec_Size		; go to end
 33937                                  	;sub	ax,[bp-12]
 33938 00005C7E 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33939 00005C81 83E810                  	sub	AX,10h			; drop off pdb
 33940                                  
 33941                                  Exec_Use_AX:
 33942                                  	;mov	[bp-10],ax
 33943 00005C84 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33944                                  	;mov	[bp-20],ax
 33945 00005C87 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33946                                  
 33947                                  	; Determine the location in the file of the beginning of
 33948                                  	; the resident
 33949                                  
 33950                                  ; 17/12/2022
 33951                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33952                                  ;%if 0
 33953                                  
 33954                                  Exec_Find_Res:
 33955                                  	; MSDOS 6.0
 33956                                  	;;mov	dx,[bp-20]
 33957                                  	;mov	DX,Exec_DMA ; *+*
 33958                                  	;;mov	[bp-28],dx
 33959                                  	;mov	Exec_DMA_Save,DX
 33960                                  
 33961                                  	; 17/12/2022
 33962                                  	; AX = Exec_DMA
 33963                                  
 33964                                  	; 02/06/2019 - Retro DOS v4.0
 33965                                  	;mov	[bp-28],ax ; *+*
 33966 00005C8A 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33967                                  
 33968                                  ;%endif
 33969                                  
 33970                                  ; 17/12/2022
 33971                                  %if 0
 33972                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33973                                  Exec_Find_Res:
 33974                                  	;mov	dx,[bp-20]
 33975                                  	mov	DX,Exec_DMA ; *+*
 33976                                  	;mov	[bp-28],dx
 33977                                  	mov	Exec_DMA_Save,DX
 33978                                  %endif
 33979                                  
 33980                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33981 00005C8D 8B16[D00F]              	mov	DX,[exec_par_dir]
 33982 00005C91 52                      	push	DX
 33983 00005C92 B104                    	mov	CL,4
 33984 00005C94 D3E2                    	shl	DX,CL			; low word of location
 33985 00005C96 58                      	pop	AX
 33986 00005C97 B10C                    	mov	CL,12
 33987 00005C99 D3E8                    	shr	AX,CL			; high word of location
 33988 00005C9B 89C1                    	mov	CX,AX			; CX <- high
 33989                                  
 33990                                  		; Read in the resident image (first, seek to it)
 33991                                  	;mov	bx,[bp-8]
 33992 00005C9D 8B5EF8                  	mov	BX,Exec_FH
 33993 00005CA0 1E                      	push	DS
 33994 00005CA1 30C0                    	xor	AL,AL
 33995                                  	;invoke	$Lseek			; Seek to resident
 33996 00005CA3 E8D30A                  	call	_$LSEEK
 33997 00005CA6 1F                      	pop	DS
 33998 00005CA7 7303                    	jnc	short Exec_Big_Read
 33999                                  
 34000 00005CA9 E906FF                  	jmp	Exec_Bomb
 34001                                  
 34002                                  Exec_Big_Read:				; Read resident into memory
 34003                                  	;mov	bx,[bp-12]
 34004 00005CAC 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34005 00005CAF 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34006 00005CB3 7203                    	jb	short Exec_Read_OK
 34007                                  
 34008 00005CB5 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34009                                  
 34010                                  Exec_Read_OK:
 34011                                  	;sub	[bp-12],bx
 34012 00005CB8 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34013 00005CBB 53                      	push	BX
 34014 00005CBC B104                    	mov	CL,4
 34015 00005CBE D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34016 00005CC0 89D9                    	mov	CX,BX			; Count in correct register
 34017 00005CC2 1E                      	push	DS
 34018                                  	;mov	ds,[bp-20]
 34019 00005CC3 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34020                                  
 34021 00005CC6 31D2                    	xor	DX,DX
 34022 00005CC8 51                      	push	CX			; Save our count
 34023 00005CC9 E81303                  	call	ExecRead
 34024 00005CCC 59                      	pop	CX			; Get old count to verify
 34025 00005CCD 1F                      	pop	DS
 34026 00005CCE 7248                    	jc	short Exec_Bad_FileJ
 34027                                  
 34028 00005CD0 39C1                    	cmp	CX,AX			; Did we read enough?
 34029 00005CD2 5B                      	pop	BX			; Get paragraph count back
 34030 00005CD3 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34031                                  
 34032                                  	; The read did not match the request. If we are off by 512
 34033                                  	; bytes or more then the header lied and we have an error.
 34034                                  
 34035 00005CD5 29C1                    	sub	CX,AX
 34036 00005CD7 81F90002                	cmp	CX,512
 34037 00005CDB 733B                    	jae	short Exec_Bad_FileJ
 34038                                  
 34039                                  	; We've read in CX bytes... bump DTA location
 34040                                  
 34041                                  ExecCheckEnd:
 34042                                  	;add	[bp-20],bx
 34043 00005CDD 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34044                                  	;test	word [bp-12],0FFFFh
 34045 00005CE0 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34046 00005CE5 75C5                    	jnz	short Exec_Big_Read
 34047                                  
 34048                                  	; The image has now been read in. We must perform relocation
 34049                                  	; to the current location.
 34050                                  
 34051                                  exec_do_reloc:
 34052                                  	;mov	cx,[bp-10]
 34053 00005CE7 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34054 00005CEA A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34055 00005CED 01C8                    	add	AX,CX			; and relocate him
 34056 00005CEF A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34057                                  
 34058 00005CF2 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34059 00005CF5 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34060                                  
 34061 00005CF8 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34062 00005CFC A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34063 00005CFF 8CC0                    	mov	AX,ES			; rms;NSS
 34064 00005D01 01C8                    	add	AX,CX			; relocated...
 34065 00005D03 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34066                                  
 34067 00005D06 31C9                    	xor	CX,CX
 34068 00005D08 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34069                                  	;mov	bx,[bp-8]
 34070 00005D0C 8B5EF8                  	mov	BX,Exec_FH
 34071 00005D0F 1E                      	push	DS
 34072 00005D10 31C0                    	xor	AX,AX
 34073                                  	;invoke	$Lseek
 34074 00005D12 E8640A                  	call	_$LSEEK
 34075 00005D15 1F                      	pop	DS
 34076 00005D16 7303                    	jnc	short exec_get_entries
 34077                                  
 34078                                  Exec_Bad_FileJ:
 34079 00005D18 E995FE                  	jmp	Exec_Bad_File
 34080                                  
 34081                                  exec_get_entries:
 34082 00005D1B 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34083                                  
 34084                                  exec_read_reloc:
 34085 00005D1F 52                      	push	DX
 34086                                  	;mov	dx,OPENBUF
 34087 00005D20 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34088                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34089                                  	;mov	cx,396 ; MSDOS 6.0
 34090 00005D23 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34091 00005D26 1E                      	push	DS
 34092 00005D27 E8B502                  	call	ExecRead
 34093 00005D2A 07                      	pop	ES
 34094 00005D2B 5A                      	pop	DX
 34095 00005D2C 72EA                    	jc	short Exec_Bad_FileJ
 34096                                  
 34097                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34098                                  	;mov	cx,99 ;  MSDOS 6.0
 34099 00005D2E B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34100                                  					; Pointer to byte location in header
 34101                                  	;mov	di,OPENBUF
 34102 00005D31 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34103                                  	;mov	si,[bp-10]
 34104 00005D34 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34105                                  
 34106                                  exec_reloc_one:
 34107 00005D37 09D2                    	or	DX,DX			; Any more entries?
 34108 00005D39 7416                    	jz	short Exec_Set_PDBJ
 34109                                  
 34110                                  exec_get_addr:
 34111 00005D3B 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34112 00005D3E 8CD8                    	mov	AX,DS			; Relocate address of item
 34113                                  
 34114                                  	; MSDOS 6.0
 34115                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34116                                  	;add	ax,[bp-28]
 34117 00005D40 0346E4                  	add	AX,Exec_DMA_Save
 34118                                  
 34119 00005D43 8ED8                    	mov	DS,AX
 34120 00005D45 0137                    	add	[BX],SI
 34121 00005D47 83C704                  	add	DI,4
 34122 00005D4A 4A                      	dec	DX
 34123 00005D4B E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34124                                  
 34125                                  	; We've exhausted a single buffer's worth. Read in the next
 34126                                  	; piece of the relocation table.
 34127                                  
 34128 00005D4D 06                      	push	ES
 34129 00005D4E 1F                      	pop	DS
 34130 00005D4F EBCE                    	jmp	short exec_read_reloc
 34131                                  
 34132                                  Exec_Set_PDBJ:
 34133                                  	; MSDOS 6.0
 34134                                  	
 34135                                  	; We now determine if this is a buggy exe packed file and if 
 34136                                  	; so we patch in the right code. Note that fixexepatch will
 34137                                  	; point to a ret if dos loads low. The load segment as 
 34138                                  	; determined above will be in exec_dma_save
 34139                                  	
 34140 00005D51 06                      	push	es
 34141 00005D52 50                      	push	ax			; M030
 34142 00005D53 51                      	push	cx			; M030
 34143                                  	;mov	es,[bp-28]
 34144 00005D54 8E46E4                  	mov	es,Exec_DMA_Save
 34145 00005D57 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34146 00005D5B 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34147 00005D60 36FF16[F811]            	call	word [ss:FixExePatch]
 34148                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34149                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34150                                  	;call	word [ss:Rational386PatchPtr]
 34151 00005D65 59                      	pop	cx			; M030
 34152 00005D66 58                      	pop	ax			; M030
 34153 00005D67 07                      	pop	es
 34154                                  
 34155 00005D68 E9DE00                  	jmp	Exec_Set_PDB
 34156                                  
 34157                                  Exec_No_Memj:
 34158 00005D6B E93EFE                  	jmp	Exec_No_Mem
 34159                                  
 34160                                  	; we have a .COM file. First, determine if we are merely
 34161                                  	; loading an overlay.
 34162                                  
 34163                                  Exec_Com_File:
 34164                                  	;test	byte [bp-5],2
 34165 00005D6E F646FB02                	test	Exec_Func,exec_func_overlay
 34166 00005D72 742D                    	jz	short Exec_Alloc_Com_File
 34167                                  	;lds	si,[bp-4]
 34168 00005D74 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34169 00005D77 AD                      	lodsw				; get load address
 34170                                  	;mov	[bp-20],ax
 34171 00005D78 8946EC                  	mov	Exec_DMA,AX
 34172 00005D7B B8FFFF                  	mov	AX,0FFFFh
 34173 00005D7E EB63                    	jmp	short Exec_Read_Block	; read it all!
 34174                                  
 34175                                  Exec_Chk_Com_Mem:			
 34176                                  	; MSDOS 6.0	     		; M063 - Start
 34177 00005D80 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34178 00005D84 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34179 00005D89 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34180 00005D8E F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34181 00005D91 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34182                                  					; N: continue
 34183                                  	
 34184 00005D93 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34185 00005D95 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 34186                                  	
 34187                                  	;mov	ax,[bp-18]
 34188 00005D97 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 34189 00005D9A 31DB                    	xor	bx,bx			; M047: bx => free arena
 34190 00005D9C E87502                  	call	ChangeOwner		; M047: free this block
 34191                                  	
 34192 00005D9F EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34193                                  					; M063 - End
 34194                                  	
 34195                                  	; We must allocate the max possible size block (ick!)
 34196                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34197                                  	; size of block.
 34198                                  
 34199                                  Exec_Alloc_Com_File:
 34200                                  	; MSDOS 6.0			; M000 -start
 34201 00005DA1 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34202                                  					; Q: is the alloc strat high_first
 34203 00005DA7 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34204                                  					; Y: set high_only bit
 34205 00005DA9 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34206                                  					; M000 - end
 34207                                  Exec_Norm_Com_Alloc:			; M000
 34208                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34209 00005DAF BBFFFF                  	mov	BX,0FFFFh
 34210                                  	;invoke	$Alloc			; largest piece available as error
 34211 00005DB2 E8C303                  	call	_$ALLOC
 34212 00005DB5 09DB                    	or	BX,BX
 34213                                  	; MSDOS 6.0
 34214 00005DB7 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34215                                  	; MSDOS 3.3
 34216                                  	;jz	short Exec_No_Memj
 34217                                  
 34218                                  	;mov	[bp-16],bx
 34219 00005DB9 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34220 00005DBC 53                      	push	BX
 34221                                  	;invoke	$ALLOC			; largest piece available
 34222 00005DBD E8B803                  	call	_$ALLOC
 34223 00005DC0 5B                      	pop	BX			; get size of block...
 34224                                  	;mov	[bp-18],ax
 34225 00005DC1 8946EE                  	mov	Exec_Load_Block,AX
 34226                                  
 34227 00005DC4 83C010                  	add	AX,10h			; increment for header
 34228                                  	;mov	[bp-20],ax
 34229 00005DC7 8946EC                  	mov	Exec_DMA,AX
 34230                                  
 34231 00005DCA 31C0                    	xor	AX,AX			; presume 64K read...
 34232 00005DCC 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34233 00005DD0 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34234                                  
 34235 00005DD2 89D8                    	mov	AX,BX			; convert size to bytes
 34236 00005DD4 B104                    	mov	CL,4
 34237 00005DD6 D3E0                    	shl	AX,CL
 34238                                  	; 17/12/2022
 34239                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34240                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34241                                  	; MSDOS 5.0
 34242                                  	;cmp	AX,100h   
 34243                                  	; 02/06/2019 - Retro DOS v4.0
 34244                                  	; MSDOS 6.0
 34245                                          ; 17/12/2022
 34246 00005DD8 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34247 00005DDB 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34248                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34249                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34250                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34251                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34252                                  
 34253                                  					; M047: size of the block is < 64K
 34254 00005DDD 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34255                                  
 34256                                  Exec_Read_Com:
 34257                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34258 00005DE0 2D0001                  	sub	AX,100h 		; remember size of psp
 34259                                  Exec_Read_Block:
 34260 00005DE3 50                      	push	AX			; save number to read
 34261                                  	;mov	bx,[bp-8]
 34262 00005DE4 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34263 00005DE7 31C9                    	xor	CX,CX			; but seek to 0:0
 34264 00005DE9 89CA                    	mov	DX,CX
 34265 00005DEB 31C0                    	xor	AX,AX			; seek relative to beginning
 34266                                  	;invoke	$Lseek			; back to beginning of file
 34267 00005DED E88909                  	call	_$LSEEK
 34268 00005DF0 59                      	pop	CX			; number to read
 34269                                  	;mov	ds,[bp-20]
 34270 00005DF1 8E5EEC                  	mov	DS,Exec_DMA
 34271 00005DF4 31D2                    	xor	DX,DX
 34272 00005DF6 51                      	push	CX
 34273 00005DF7 E8E501                  	call	ExecRead
 34274 00005DFA 5E                      	pop	SI			; get number of bytes to read
 34275 00005DFB 7303                    	jnc	short OkRead
 34276 00005DFD E9B0FD                  	jmp	Exec_Bad_File
 34277                                  
 34278                                  	; 10/09/2018
 34279                                  OkRead:
 34280 00005E00 39F0                    	cmp	AX,SI			; did we read them all?
 34281                                  	; MSDOS 6.0
 34282                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 34283                                  	; MSDOS 3.3
 34284                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34285 00005E02 7503                    	jne	short OkRead2
 34286 00005E04 E979FF                  	jmp	Exec_Chk_Com_Mem
 34287                                  OkRead2:
 34288                                  	; MSDOS 6.0
 34289 00005E07 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34290 00005E0C 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34291                                  
 34292                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34293                                  	;test	byte [bp-5],2
 34294 00005E11 F646FB02                	test	Exec_Func,exec_func_overlay
 34295 00005E15 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34296                                  
 34297                                  	;mov	ax,[bp-20]
 34298 00005E17 8B46EC                  	mov	AX,Exec_DMA
 34299 00005E1A 83E810                  	sub	AX,10h
 34300 00005E1D 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34301 00005E21 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34302                                  
 34303                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34304                                  	; of 0 on stack.
 34305                                  
 34306 00005E28 81C6FE00                	add	SI,0FEh 		; make room for stack
 34307                                  
 34308                                  	; MSDOS 6.0
 34309 00005E2C 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34310 00005E2F 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34311 00005E31 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34312                                  
 34313                                  Exec_St_Ok:
 34314                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34315 00005E35 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34316 00005E3A 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34317 00005E3E 8ED8                    	mov	DS,AX
 34318 00005E40 C7040000                	mov	WORD [SI],0		; 0 for return
 34319                                  
 34320                                  	; MSDOS 6.0
 34321                                  
 34322                                  	; M068
 34323                                  	;
 34324                                  	; We now determine if this is a Copy Protected App. If so the 
 34325                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 34326                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34327                                  
 34328 00005E44 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 34329                                  
 34330                                  Exec_Set_PDB:
 34331                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34332                                  	;mov	bx,[bp-8]
 34333 00005E49 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34334 00005E4C E8A901                  	call	Exec_Dealloc
 34335 00005E4F 55                      	push	BP
 34336                                  	;invoke	$Close			; release the jfn
 34337 00005E50 E8AA07                  	call	_$CLOSE
 34338 00005E53 5D                      	pop	BP
 34339 00005E54 E89301                  	call	Exec_Alloc
 34340                                  	;test	byte [bp-5],2
 34341 00005E57 F646FB02                	test	Exec_Func,exec_func_overlay
 34342 00005E5B 743A                    	jz	short Exec_Build_Header
 34343                                  
 34344                                  	; MSDOS 6.0
 34345 00005E5D E8C201                  	call	Scan_Execname
 34346 00005E60 E8D601                  	call	Scan_Special_Entries
 34347                                  ;SR;
 34348                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34349                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34350                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34351                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34352                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 34353                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34354                                  ;issues the version check, it gets the lie version until the next overlay
 34355                                  ;call is issued.
 34356                                  
 34357 00005E63 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34358 00005E69 7426                    	je	short norm_ovl		;yes, no special handling
 34359 00005E6B 56                      	push	si
 34360 00005E6C 06                      	push	es
 34361 00005E6D 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34362                                  	 
 34363                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 34364 00005E72 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34365 00005E76 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34366                                  	
 34367 00005E78 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34368 00005E7D 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34369 00005E82 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34370                                  		;;; PDB.VERSION
 34371 00005E87 EB06                    	jmp	short setver_done
 34372                                  sysinit_done:
 34373 00005E89 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34374                                  setver_done:
 34375 00005E8F 07                      	pop	es
 34376 00005E90 5E                      	pop	si
 34377                                  norm_ovl:
 34378                                  	;leave
 34379 00005E91 89EC                    	mov	sp,bp		
 34380 00005E93 5D                      	pop	bp
 34381                                  
 34382                                  	;transfer SYS_RET_OK		; overlay load -> done
 34383 00005E94 E9A4A7                  	jmp	SYS_RET_OK
 34384                                  
 34385                                  Exec_Build_Header:
 34386                                  	;mov	dx,[bp-18]
 34387 00005E97 8B56EE                  	mov	DX,Exec_Load_Block
 34388                                  					; assign the space to the process
 34389                                  	;mov	si,1
 34390 00005E9A BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34391                                  	;mov	ax,[bp-14]
 34392 00005E9D 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34393 00005EA0 09C0                    	or	AX,AX
 34394 00005EA2 7405                    	jz	short No_Owner		; no environment
 34395                                  
 34396 00005EA4 48                      	dec	AX			; point to header
 34397 00005EA5 8ED8                    	mov	DS,AX
 34398 00005EA7 8914                    	mov	[SI],DX 		; assign ownership
 34399                                  No_Owner:
 34400                                  	;mov	ax,[bp-18]
 34401                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34402                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34403                                  	; 17/12/2022
 34404 00005EA9 89D0                    	mov	ax,dx ; 06/06/2019
 34405                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34406                                  	
 34407 00005EAB 48                      	dec	AX
 34408 00005EAC 8ED8                    	mov	DS,AX			; point to header
 34409 00005EAE 8914                    	mov	[SI],DX 		; assign ownership
 34410                                  
 34411                                  	; MSDOS 6.0
 34412 00005EB0 1E                      	push	DS			;AN000;MS. make ES=DS
 34413 00005EB1 07                      	pop	ES			;AN000;MS.
 34414                                  	;mov	di,8
 34415 00005EB2 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34416 00005EB5 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34417                                  					;	   ds:si->name, cx=name length
 34418 00005EB8 51                      	push	CX			;AN007;;MS. save for fake version
 34419 00005EB9 56                      	push	SI			;AN007;;MS. save for fake version
 34420                                  
 34421                                  MoveName:				;AN000;
 34422 00005EBA AC                      	lodsb				;AN000;;MS. get char
 34423 00005EBB 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34424 00005EBD 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34425                                  					;AN000;
 34426 00005EBF AA                      	stosb				;AN000;;MS. move char
 34427                                  					; MSKK bug fix - limit length copied
 34428 00005EC0 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34429 00005EC3 7302                    	jae	short Mem_Done		; jump if so
 34430                                  	;
 34431 00005EC5 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34432                                  Mem_Done:				;AN000;
 34433 00005EC7 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34434                                  	;cmp	di,16
 34435 00005EC9 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34436 00005ECC 7301                    	jae	short Fill8		;AN000;MS.
 34437                                  	
 34438 00005ECE AA                      	stosb				;AN000;MS.
 34439                                  	
 34440                                  Fill8:					;AN000;
 34441 00005ECF 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34442 00005ED0 59                      	pop	CX			;AN007;MS.
 34443                                  	
 34444 00005ED1 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34445                                  
 34446                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34447 00005ED4 52                      	push	DX
 34448                                  	;mov	si,[bp-16]
 34449 00005ED5 8B76F0                  	mov	SI,Exec_Size
 34450 00005ED8 01D6                    	add	SI,DX
 34451                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34452 00005EDA E8A5B1                  	call	_$DUP_PDB
 34453 00005EDD 5A                      	pop	DX
 34454                                  
 34455                                  	;push	word [bp-14]
 34456 00005EDE FF76F2                  	push	Exec_Environ
 34457                                  	;pop	WORD [ES:2Ch]
 34458 00005EE1 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34459                                  
 34460                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34461                                  					; version number in PSP
 34462 00005EE6 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34463 00005EEB 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34464                                  		; PDB.VERSION
 34465                                  
 34466                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34467                                  	;lds	si,[bp-4]
 34468 00005EF0 C576FC                  	lds	SI,Exec_Blk		; get the block
 34469 00005EF3 1E                      	push	DS			; save its location
 34470 00005EF4 56                      	push	SI
 34471                                  	;lds	si,[si+6]
 34472 00005EF5 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34473                                  
 34474                                  	; DS points to user space 5C FCB
 34475                                  
 34476 00005EF8 B90C00                  	mov	CX,12			; copy drive, name and ext
 34477 00005EFB 51                      	push	CX
 34478 00005EFC BF5C00                  	mov	DI,5Ch
 34479 00005EFF 8A1C                    	mov	BL,[SI]
 34480 00005F01 F3A4                    	rep	movsb
 34481                                  
 34482                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34483                                  
 34484 00005F03 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34485 00005F05 AB                      	stosw
 34486 00005F06 AB                      	stosw
 34487                                  
 34488                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34489                                  
 34490 00005F07 59                      	pop	CX
 34491 00005F08 5E                      	pop	SI			; get block
 34492 00005F09 1F                      	pop	DS
 34493 00005F0A 1E                      	push	DS			; save (again)
 34494 00005F0B 56                      	push	SI
 34495                                  	;lds	si,[si+0Ah]
 34496 00005F0C C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34497                                  
 34498                                  	; DS points to user space 6C FCB
 34499                                  
 34500 00005F0F 8A3C                    	mov	BH,[SI] 		; do same as above
 34501 00005F11 F3A4                    	rep	movsb
 34502 00005F13 AB                      	stosw
 34503 00005F14 AB                      	stosw
 34504 00005F15 5E                      	pop	SI			; get block (last time)
 34505 00005F16 1F                      	pop	DS
 34506                                  	;ld	si,[si+2]
 34507 00005F17 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34508                                  
 34509                                  	; DS points to user space 80 command line
 34510                                  
 34511 00005F1A 80C980                  	or	CL,80h
 34512 00005F1D 89CF                    	mov	DI,CX
 34513 00005F1F F3A4                    	rep	movsb			; Wham!
 34514                                  
 34515                                  	; Process BX into default AX (validity of drive specs on args).
 34516                                  	; We no longer care about DS:SI.
 34517                                  
 34518 00005F21 FEC9                    	dec	CL			; get 0FFh in CL
 34519 00005F23 88F8                    	mov	AL,BH
 34520 00005F25 30FF                    	xor	BH,BH
 34521                                  	;invoke	GetVisDrv
 34522 00005F27 E8400A                  	call	GetVisDrv
 34523 00005F2A 7302                    	jnc	short Exec_BL
 34524                                  
 34525 00005F2C 88CF                    	mov	BH,CL
 34526                                  
 34527                                  Exec_BL:
 34528 00005F2E 88D8                    	mov	AL,BL
 34529 00005F30 30DB                    	xor	BL,BL
 34530                                  	;invoke	GetVisDrv
 34531 00005F32 E8350A                  	call	GetVisDrv
 34532 00005F35 7302                    	jnc	short Exec_Set_Return
 34533                                  
 34534 00005F37 88CB                    	mov	BL,CL
 34535                                  
 34536                                  Exec_Set_Return:
 34537                                  	;invoke	Get_User_Stack			; get his return address
 34538 00005F39 E849A5                  	call	Get_User_Stack
 34539                                  
 34540                                  	;push	word [si+14h]
 34541 00005F3C FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34542                                  	;push	word [si+12h]
 34543 00005F3F FF7412                  	push	word [SI+user_env.user_IP]
 34544                                  	;push	word [si+14h]
 34545 00005F42 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34546                                  	;push	word [si+12h]
 34547 00005F45 FF7412                  	push	word [SI+user_env.user_IP]
 34548                                  	;pop	word [ES:0Ah]
 34549 00005F48 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34550                                  	;pop	word [ES:0Ch]
 34551 00005F4D 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34552                                  
 34553 00005F52 31C0                    	xor	AX,AX
 34554 00005F54 8ED8                    	mov	DS,AX
 34555                                  					; save them where we can get them
 34556                                  					; later when the child exits.
 34557                                  	;pop	word [88h]
 34558 00005F56 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34559                                  	;pop	word [90h]
 34560 00005F5A 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34561                                  
 34562 00005F5E 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34563 00005F65 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34564 00005F6A 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34565                                  
 34566                                  	;test	byte [bp-5],1
 34567 00005F6F F646FB01                	test	Exec_Func,exec_func_no_execute
 34568 00005F73 7427                    	jz	short exec_go
 34569                                  
 34570 00005F75 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34571                                  	;les	di,[bp-4]
 34572 00005F7A C47EFC                  	les	DI,Exec_Blk		; and block for return
 34573                                  	;mov	[es:di+10h],ds
 34574 00005F7D 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34575                                  
 34576 00005F81 4E                      	dec	SI			; 'push' default AX
 34577 00005F82 4E                      	dec	SI
 34578 00005F83 891C                    	mov	[SI],BX 		; save default AX reg
 34579                                  	;mov	[es:di+0Eh], si
 34580 00005F85 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34581                                  
 34582 00005F89 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34583                                  	;mov	[es:di+14h],ds
 34584 00005F8E 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34585                                  	;mov	[es:di+12h],ax
 34586 00005F92 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34587                                  	
 34588                                  	;leave
 34589 00005F96 89EC                    	mov	sp,bp
 34590 00005F98 5D                      	pop	bp	
 34591                                  
 34592                                  	;transfer SYS_RET_OK
 34593 00005F99 E99FA6                  	jmp	SYS_RET_OK
 34594                                  
 34595                                  exec_go:
 34596 00005F9C 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34597 00005FA1 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34598 00005FA6 8CC0                    	mov	AX,ES
 34599                                  
 34600                                  	; MSDOS 6.0
 34601 00005FA8 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34602 00005FAE 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34603                                  
 34604 00005FB0 1E                      	push	ds			; Y: control must go to low mem stub
 34605                                  		
 34606 00005FB1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34607                                  					;    control to user 
 34608 00005FB6 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34609                                  					; M004: Set bit to signal int 21
 34610                                  					; ah = 25 & ah= 49. See dossym.inc 
 34611                                  					; under TAG M003 & M009 for 
 34612                                  					; explanation
 34613 00005FBB 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34614                                  					; M068: going to be turned OFF.
 34615                                  	
 34616 00005FBF 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34617 00005FC1 1F                      	pop	ds
 34618                                  	
 34619 00005FC2 50                      	push	ax			; ret far into the low mem stub
 34620 00005FC3 B8[FB10]                	mov	ax,disa20_xfer
 34621 00005FC6 50                      	push	ax
 34622 00005FC7 8CC0                    	mov	AX,ES			; restore ax
 34623 00005FC9 CB                      	retf
 34624                                  
 34625                                  Xfer_To_User:
 34626                                  	; DS:SI points to entry point
 34627                                  	; AX:DI points to initial stack
 34628                                  	; DX has PDB pointer
 34629                                  	; BX has initial AX value
 34630                                  
 34631 00005FCA FA                      	cli
 34632                                  	; 15/08/2018
 34633 00005FCB 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34634                                  
 34635 00005FD1 8ED0                    	mov	SS,AX			; set up user's stack
 34636 00005FD3 89FC                    	mov	SP,DI			; and SP
 34637 00005FD5 FB                      	sti
 34638                                  
 34639 00005FD6 1E                      	push	DS			; fake long call to entry
 34640 00005FD7 56                      	push	SI
 34641 00005FD8 8EC2                    	mov	ES,DX			; set up proper seg registers
 34642 00005FDA 8EDA                    	mov	DS,DX
 34643 00005FDC 89D8                    	mov	AX,BX			; set up proper AX
 34644                                  
 34645 00005FDE CB                      	retf
 34646                                  
 34647                                  ; 04/08/2018 - Retro DOS v3.0
 34648                                  
 34649                                  ;----------------------------------------------------------------------------
 34650                                  ;
 34651                                  ;----------------------------------------------------------------------------
 34652                                  
 34653                                  ExecRead:
 34654 00005FDF E81600                  	CALL	Exec_Dealloc
 34655                                  	;mov	bx,[bp-8]
 34656 00005FE2 8B5EF8                  	MOV	bx,Exec_FH
 34657                                  
 34658 00005FE5 55                      	PUSH	BP
 34659 00005FE6 E82507                  	call	_$READ
 34660 00005FE9 5D                      	POP	BP
 34661                                  
 34662                                  	;CALL	Exec_Alloc
 34663                                  	;retn
 34664                                  	; 18/12/2022
 34665                                  	;jmp	short Exec_Alloc
 34666                                  
 34667                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34668                                  
 34669                                  ;----------------------------------------------------------------------------
 34670                                  ;
 34671                                  ;----------------------------------------------------------------------------
 34672                                  
 34673                                  Exec_Alloc:
 34674 00005FEA 53                      	push	BX
 34675                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34676                                  	; 20/05/2019 - Retro DOS v4.0
 34677                                  	; MSDOS 6.0
 34678 00005FEB 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34679 00005FF0 E81000                  	call	ChangeOwners
 34680 00005FF3 E81DB3                  	call	LCritMEM
 34681 00005FF6 5B                      	pop	BX
 34682 00005FF7 C3                      	retn
 34683                                  
 34684                                  ;----------------------------------------------------------------------------
 34685                                  ;
 34686                                  ;----------------------------------------------------------------------------
 34687                                  
 34688                                  Exec_Dealloc:
 34689 00005FF8 53                      	push	BX
 34690                                  	;mov	bx,0
 34691 00005FF9 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34692 00005FFB E8FAB2                  	call	ECritMEM
 34693 00005FFE E80200                  	call	ChangeOwners
 34694 00006001 5B                      	pop	BX
 34695 00006002 C3                      	retn
 34696                                  
 34697                                  ; 18/12/2022
 34698                                  %if 0
 34699                                  ;----------------------------------------------------------------------------
 34700                                  ;
 34701                                  ;----------------------------------------------------------------------------
 34702                                  
 34703                                  Exec_Alloc:
 34704                                  	push	BX
 34705                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34706                                  	; 20/05/2019 - Retro DOS v4.0
 34707                                  	; MSDOS 6.0
 34708                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34709                                  	call	ChangeOwners
 34710                                  	call	LCritMEM
 34711                                  	pop	BX
 34712                                  	retn
 34713                                  
 34714                                  %endif
 34715                                  
 34716                                  ;----------------------------------------------------------------------------
 34717                                  ;
 34718                                  ;----------------------------------------------------------------------------
 34719                                  
 34720                                  ChangeOwners:
 34721 00006003 9C                      	pushf
 34722 00006004 50                      	push	AX
 34723                                  	;mov	ax,[bp-14]
 34724 00006005 8B46F2                  	mov	AX,Exec_Environ
 34725 00006008 E80900                  	call	ChangeOwner
 34726                                  	;mov	ax,[bp-18]
 34727 0000600B 8B46EE                  	mov	AX,Exec_Load_Block
 34728 0000600E E80300                  	call	ChangeOwner
 34729 00006011 58                      	pop	AX
 34730 00006012 9D                      	popf
 34731                                  chgown_retn:
 34732 00006013 C3                      	retn
 34733                                  
 34734                                  ;----------------------------------------------------------------------------
 34735                                  ;
 34736                                  ;----------------------------------------------------------------------------
 34737                                  
 34738                                  ChangeOwner:
 34739 00006014 09C0                    	or	AX,AX			; is area allocated?
 34740 00006016 74FB                    	jz	short chgown_retn	; no, do nothing
 34741 00006018 48                      	dec	AX
 34742 00006019 1E                      	push	DS
 34743 0000601A 8ED8                    	mov	DS,AX
 34744 0000601C 891E0100                	mov	[ARENA.OWNER],BX
 34745 00006020 1F                      	pop	DS
 34746 00006021 C3                      	retn
 34747                                  
 34748                                  ;----------------------------------------------------------------------------
 34749                                  ;
 34750                                  ;----------------------------------------------------------------------------
 34751                                  
 34752                                  ; 20/05/2019 - Retro DOS v4.0
 34753                                  
 34754                                  	; MSDOS 6.0
 34755                                  Scan_Execname:
 34756 00006022 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34757                                  Scan_Execname1:				; M028
 34758                                  Save_Begin:				;
 34759 00006025 89F1                    	mov	CX,SI			; CX= starting addr
 34760                                  Scan0:					;
 34761 00006027 AC                      	lodsb				; get char
 34762                                  
 34763 00006028 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34764 0000602A 74F9                    	jz	short Save_Begin	; yes, save si
 34765 0000602C 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34766 0000602E 74F5                    	jz	short Save_Begin	; yes, save si
 34767 00006030 3C00                    	cmp	AL,0			; is end of name
 34768 00006032 75F3                    	jnz	short Scan0		; no, continue scanning
 34769 00006034 29CE                    	sub	SI,CX			; get name's length
 34770 00006036 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34771                                  
 34772 00006038 C3                      	retn
 34773                                  
 34774                                  ;----------------------------------------------------------------------------
 34775                                  ;
 34776                                  ;----------------------------------------------------------------------------
 34777                                  
 34778                                  ; 20/05/2019 - Retro DOS v4.0
 34779                                  
 34780                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34781                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34782                                  
 34783                                  	; MSDOS 6.0
 34784                                  
 34785                                  Scan_Special_Entries:
 34786                                  
 34787 00006039 49                      	dec	CX			; cx= name length
 34788                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34789                                  					;reset to current version
 34790                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34791                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34792                                  	;mov	word [ss:SPECIAL_VERSION],5
 34793                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34794                                  
 34795                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34796 0000603A 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34797                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34798                                  				; 24/09/2023
 34799                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34800                                  ;***	call	Reset_Version
 34801                                  
 34802                                  ;M060	push	SS
 34803                                  ;M060	pop	ES
 34804                                  
 34805 00006041 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34806 00006046 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34807 00006048 09F8                    	or	AX,DI			;M060; be sure the table exists
 34808 0000604A 7427                    	jz	short End_List		;M060; If ZR then no table
 34809                                  
 34810                                  GetEntries:
 34811 0000604C 268A05                  	mov	AL,[ES:DI]		; end of list
 34812 0000604F 08C0                    	or	AL,AL
 34813 00006051 7420                    	jz	short End_List		; yes
 34814                                  
 34815 00006053 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34816 00006058 38C8                    	cmp	AL,CL			; same length ?
 34817 0000605A 751B                    	jnz	short SkipOne 		; no
 34818                                  
 34819 0000605C 47                      	inc	DI			; es:di -> special name
 34820 0000605D 51                      	push	CX			; save length and name addr
 34821 0000605E 56                      	push	SI
 34822                                  
 34823                                  ; M050 - BEGIN
 34824                                  
 34825 0000605F 50                      	push	ax			; save len
 34826                                  sse_next_char:
 34827 00006060 AC                      	lodsb
 34828 00006061 E8D7EE                  	call	UCase
 34829 00006064 AE                      	scasb
 34830 00006065 750D                    	jne	short Not_Matched
 34831 00006067 E2F7                    	loop	sse_next_char
 34832                                  	
 34833                                  ;	repz	cmpsb			; same name ?
 34834                                  ;	jnz	short Not_Matched	; no
 34835                                  
 34836 00006069 58                      	pop	ax			; take len off the stack
 34837                                  
 34838                                  ; M050 - END
 34839                                  
 34840 0000606A 268B05                  	mov	AX,[ES:DI]		; get special version
 34841 0000606D 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34842                                  
 34843                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34844                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34845                                  
 34846 00006071 5E                      	pop	SI
 34847 00006072 59                      	pop	CX
 34848                                  	; 18/12/2022
 34849                                  	;jmp	SHORT End_List
 34850                                  
 34851                                  	; 18/12/2022
 34852                                  End_List:
 34853 00006073 C3                      	retn
 34854                                  
 34855                                  Not_Matched:
 34856 00006074 58                      	pop	ax			; get len from stack ; M050
 34857 00006075 5E                      	pop	SI			; restore si,cx
 34858 00006076 59                      	pop	CX
 34859                                  
 34860                                  SkipOne:
 34861 00006077 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34862 0000607C 30E4                    	xor	AH,AH			; position to next entry
 34863 0000607E 01C7                    	add	DI,AX
 34864                                  
 34865 00006080 83C703                  	add	DI,3			; DI -> next entry length
 34866                                  ;***	add	DI,4			; DI -> next entry length
 34867                                  
 34868 00006083 EBC7                    	jmp	short GetEntries
 34869                                  
 34870                                  	; 18/12/2022
 34871                                  ;End_List:
 34872                                  	;retn
 34873                                  
 34874                                  ; 04/08/2018 - Retro DOS v3.0
 34875                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34876                                  
 34877                                  ;----------------------------------------------------------------------------
 34878                                  ;SUBTTL Terminate and stay resident handler
 34879                                  ;
 34880                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34881                                  ;	    truncate the current block.
 34882                                  ;
 34883                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34884                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34885                                  ;	    and restoring the vectors.
 34886                                  ;
 34887                                  ;----------------------------------------------------------------------------
 34888                                  
 34889                                  	; 20/05/2019 - Retro DOS v4.0
 34890                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34891                                  
 34892                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34893                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34894                                  
 34895                                  _$KEEP_PROCESS:
 34896 00006085 50                      	push	AX			; keep exit code around
 34897                                  	;mov	byte [SS:EXIT_TYPE],3
 34898 00006086 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34899 0000608C 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34900 00006091 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34901 00006094 7303                    	jae	short Keep_Shrink	; info
 34902                                  
 34903 00006096 BA0600                  	mov	DX,6h
 34904                                  
 34905                                  Keep_Shrink:
 34906 00006099 89D3                    	mov	BX,DX
 34907 0000609B 53                      	push	BX
 34908 0000609C 06                      	push	ES
 34909 0000609D E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34910 000060A0 1F                      	pop	DS
 34911 000060A1 5B                      	pop	BX
 34912 000060A2 7207                    	jc	short Keep_Done		; failed on modification
 34913                                  
 34914 000060A4 8CD8                    	mov	AX,DS
 34915 000060A6 01D8                    	add	AX,BX
 34916                                  	;mov	[2],ax
 34917 000060A8 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34918                                  
 34919                                  Keep_Done:
 34920 000060AB 58                      	pop	AX
 34921 000060AC EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34922                                  
 34923                                  ;----------------------------------------------------------------------------
 34924                                  ;
 34925                                  ;----------------------------------------------------------------------------
 34926                                  
 34927                                  STAY_RESIDENT:
 34928                                  	;mov	ax,3100h
 34929 000060AE B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34930 000060B1 83C20F                  	add	DX,15
 34931 000060B4 D1DA                    	rcr	DX,1
 34932 000060B6 B103                    	mov	CL,3
 34933 000060B8 D3EA                    	shr	DX,CL
 34934                                  
 34935 000060BA E94AA2                  	jmp	COMMAND
 34936                                  
 34937                                  ;----------------------------------------------------------------------------
 34938                                  ;SUBTTL $EXIT - return to parent process
 34939                                  ;   Assembler usage:
 34940                                  ;	    MOV     AL, code
 34941                                  ;	    MOV     AH, Exit
 34942                                  ;	    INT     int_command
 34943                                  ;   Error return:
 34944                                  ;	    None.
 34945                                  ;
 34946                                  ;----------------------------------------------------------------------------
 34947                                  
 34948                                  	; 20/05/2019 - Retro DOS v4.0
 34949                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34950                                  
 34951                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34952                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34953                                  _$EXIT:
 34954                                  	; 04/08/2018 - Retro DOS v3.0
 34955                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34956 000060BD 30E4                    	xor	AH,AH
 34957 000060BF 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34958 000060C4 08E4                    	or	AH,AH
 34959                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34960 000060C6 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34961 000060CC 7406                    	jz	short exit_inner
 34962                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34963 000060CE 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34964                                  
 34965                                  	;entry	Exit_inner
 34966                                  exit_inner:
 34967 000060D4 E8AEA3                  	call	Get_User_Stack		;PBUGBUG
 34968                                  
 34969 000060D7 36FF36[3003]            	push	word [ss:CurrentPDB]
 34970                                  	;pop	word [si+14h]
 34971 000060DC 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34972 000060DF EB08                    	jmp	short abort_inner
 34973                                  
 34974                                  ;BREAK <$ABORT -- Terminate a process>
 34975                                  ;----------------------------------------------------------------------------
 34976                                  ; Inputs:
 34977                                  ;	user_CS:00 must point to valid program header block
 34978                                  ; Function:
 34979                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34980                                  ;	to the terminate address
 34981                                  ; Returns:
 34982                                  ;	TO THE TERMINATE ADDRESS
 34983                                  ;----------------------------------------------------------------------------
 34984                                  
 34985                                  _$ABORT:
 34986 000060E1 30C0                    	xor	AL,AL
 34987                                  	;mov	byte [SS:EXIT_TYPE],0
 34988                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34989 000060E3 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34990                                  
 34991                                  	; abort_inner must have AL set as the exit code! The exit type
 34992                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34993                                  	; to be correct as the one that is terminating.
 34994                                  
 34995                                  abort_inner:
 34996 000060E9 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34997 000060EE 36A3[3403]              	mov	[SS:exit_code],AX
 34998 000060F2 E890A3                  	call	Get_User_Stack
 34999                                  
 35000                                  	;mov	ds,[si+14h]
 35001 000060F5 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35002 000060F8 31C0                    	xor	AX,AX
 35003 000060FA 8EC0                    	mov	ES,AX
 35004                                  	;mov	si,10
 35005 000060FC BE0A00                  	mov	SI,SAVEXIT
 35006                                  	;mov	di,88h
 35007 000060FF BF8800                  	mov	DI,addr_int_terminate
 35008 00006102 A5                      	movsw
 35009 00006103 A5                      	movsw
 35010 00006104 A5                      	movsw
 35011 00006105 A5                      	movsw
 35012 00006106 A5                      	movsw
 35013 00006107 A5                      	movsw
 35014 00006108 E944F2                  	jmp	reset_environment
 35015                                  
 35016                                  ;----------------------------------------------------------------------------
 35017                                  ;
 35018                                  ; fixexepatch will point to this is DOS loads low. 
 35019                                  ;
 35020                                  ;----------------------------------------------------------------------------
 35021                                  ; MSDOS 6.0
 35022                                  
 35023                                  ; 29/04/2019 - Retro DOS v4.0
 35024                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35025                                  
 35026                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35027                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35028                                  
 35029                                  RetExePatch: ; proc near
 35030                                  	
 35031 0000610B C3                      	retn
 35032                                  
 35033                                  ;============================================================================
 35034                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35035                                  ;============================================================================
 35036                                  ; 04/08/2018 - Retro DOS v3.0
 35037                                  ; 14/05/2019 - Retro DOS v4.0
 35038                                  
 35039                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35040                                  
 35041                                  ;**
 35042                                  ;	Microsoft Confidential
 35043                                  ;	Copyright (C) Microsoft Corporation 1991
 35044                                  ;	All Rights Reserved.
 35045                                  ;
 35046                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35047                                  ;	I/O specs are defined in DISPATCH.
 35048                                  ;
 35049                                  ;	$ALLOC
 35050                                  ;	$SETBLOCK
 35051                                  ;	$DEALLOC
 35052                                  ;	$AllocOper
 35053                                  ;	arena_free_process
 35054                                  ;	arena_next
 35055                                  ;	check_signature
 35056                                  ;	Coalesce
 35057                                  ;
 35058                                  ;	Modification history:
 35059                                  ;
 35060                                  ;	    Created: ARR 30 March 1983
 35061                                  ;
 35062                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35063                                  ;		      M003 - added support for link/unlink UMBs from
 35064                                  ;			     DOS arena chain. 7/18/90
 35065                                  ;		      M009 - Added error returns invalid function and 
 35066                                  ;			     arena trashed in set link state call.
 35067                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35068                                  ;			     if UMB_HEAD is initialized.
 35069                                  ;
 35070                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35071                                  ;			     support. Please see under M009 in 
 35072                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35073                                  ;
 35074                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35075                                  ;			     sure that umb_head arena is valid and also make
 35076                                  ;			     sure that the previous arena is pointing to 
 35077                                  ;			     umb_head.
 35078                                  ;
 35079                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35080                                  ;			     set allloc strategy.
 35081                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35082                                  ;			     bx in AllocSetStrat.
 35083                                  ;
 35084                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35085                                  ;			     a bit to indicate to dos dispatcher to turn
 35086                                  ;			     a20 off before iret. See M016.
 35087                                  ;
 35088                                  
 35089                                  ;	BREAK	<memory allocation utility routines>
 35090                                  
 35091                                  
 35092                                  ; 15/04/2018 - Retro DOS v2.0
 35093                                  ;----------------------------------------------------------------------------
 35094                                  ; xenix memory calls for MSDOS
 35095                                  ;
 35096                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35097                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35098                                  ;
 35099                                  ;INCLUDE DOSSEG.ASM
 35100                                  
 35101                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35102                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35103                                  
 35104                                  ;.xlist
 35105                                  ;.xcref
 35106                                  ;INCLUDE DOSSYM.ASM
 35107                                  ;INCLUDE DEVSYM.ASM
 35108                                  ;.cref
 35109                                  ;.list
 35110                                  
 35111                                  ;TITLE ALLOC.ASM - memory arena manager
 35112                                  ;NAME Alloc
 35113                                  
 35114                                  ;SUBTTL memory allocation utility routines
 35115                                  ;PAGE
 35116                                  ;
 35117                                  ; arena data
 35118                                  ;
 35119                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35120                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35121                                  ;       i_need  FirstArena,WORD         ; first free block found
 35122                                  ;       i_need  BestArena,WORD          ; best free block found
 35123                                  ;       i_need  LastArena,WORD          ; last free block found
 35124                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35125                                  
 35126                                  ;**	Arena_Free_Process
 35127                                  ;----------------------------------------------------------------------------
 35128                                  ;	Free all arena blocks allocated to a prOcess
 35129                                  ;
 35130                                  ;	ENTRY	(bx) = PID of process
 35131                                  ;	EXIT	none
 35132                                  ;	USES	????? BUGBUG
 35133                                  ;----------------------------------------------------------------------------
 35134                                  
 35135                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35136                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35137                                  
 35138                                  arena_free_process:
 35139                                  	; 14/05/2019 - Retro DOS v4.0
 35140                                  	; 04/08/2018 - Retro DOS v3.0
 35141 0000610C 36A1[2400]                      MOV	AX,[SS:arena_head]
 35142                                  arena_free_process_start:
 35143 00006110 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35144                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35145 00006113 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 35146                                  
 35147                                  arena_free_process_loop:
 35148                                          ;retc
 35149 00006116 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35150 00006118 06                      	PUSH    ES
 35151 00006119 1F                              POP     DS
 35152                                  	;cmp	[1],bx 
 35153 0000611A 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35154 0000611E 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35155                                  	;mov	[1],di
 35156 00006120 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35157                                  
 35158                                  arena_free_next:
 35159                                  	;cmp	byte [di],5Ah ;'Z'
 35160 00006124 803D5A                          CMP     BYTE [DI],arena_signature_end
 35161                                                                          ; end of road, Jack?
 35162                                          ;retz				; never come back no more
 35163                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35164                                  	; 14/05/2019
 35165                                  	; MSDOS 6.0
 35166 00006127 7405                    	jz	short arena_chk_umbs
 35167                                          
 35168 00006129 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35169 0000612C EBE8                            JMP     SHORT arena_free_process_loop
 35170                                  
 35171                                  	; MSDOS 6.0
 35172                                  arena_chk_umbs:				; M010 - Start
 35173                                  	; 20/05/2019
 35174 0000612E 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35175 00006132 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35176 00006135 741E                    	je	short ret_label		; N: we're done
 35177                                  	
 35178 00006137 8CDF                    	mov	di,ds			; di = last arena
 35179 00006139 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35180 0000613B 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 35181 0000613D EBD1                    	jmp	short arena_free_process_start
 35182                                  					; M010 - End
 35183                                  ;AFP_RETN:
 35184                                  ;	RETN
 35185                                  
 35186                                  ;	BREAK	<Arena Helper Routines>
 35187                                  
 35188                                  ;**	Arena_Next - Find Next item in Arena
 35189                                  ;----------------------------------------------------------------------------
 35190                                  ;	ENTRY	DS - pointer to block head
 35191                                  ;		(di) = 0
 35192                                  ;	EXIT	AX,ES - pointers to next head
 35193                                  ;		'C' set iff arena damaged
 35194                                  ;----------------------------------------------------------------------------
 35195                                  
 35196                                  arena_next:
 35197 0000613F 8CD8                            MOV     AX,DS                   ; AX <- current block
 35198 00006141 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35199 00006145 40                              INC     AX                      ; remember that header!
 35200                                  
 35201                                  ;       fall into check_signature and return
 35202                                  ;
 35203                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35204                                  ;       RETN
 35205                                  
 35206                                  ;**	Check_Signature - Check Memory Block Signature
 35207                                  ;----------------------------------------------------------------------------
 35208                                  ;	ENTRY	(AX) = address of block header
 35209                                  ;		(di) = 0
 35210                                  ;	EXIT	 ES = AX
 35211                                  ;		'C' clear if signature good
 35212                                  ;		'C' set if signature bad
 35213                                  ;	USES	ES, Flags
 35214                                  ;----------------------------------------------------------------------------
 35215                                  
 35216                                  check_signature:        
 35217                                  
 35218 00006146 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35219                                  	;cmp	byte [es:di],4Dh ; 'M'
 35220 00006148 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35221                                                                          ; IF next signature = not_end THEN
 35222 0000614C 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35223                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35224 0000614E 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35225                                                                          ; IF next signature = end then
 35226 00006152 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35227 00006154 F9                              STC                             ; set error
 35228                                  ret_label: ; MSDOS 6.0
 35229                                  AFP_RETN:
 35230                                   	; Retro DOS v2.0 - 05/03/2018
 35231                                  check_signature_ok:
 35232                                  COALESCE_RETN:
 35233 00006155 C3                      	RETN
 35234                                  
 35235                                  ;**	Coalesce - Combine free blocks ahead with current block
 35236                                  ;----------------------------------------------------------------------------
 35237                                  ;	Coalesce adds the block following the argument to the argument block,
 35238                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35239                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35240                                  ;	preceeding allocated block.
 35241                                  ;
 35242                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35243                                  ;		(di) = 0
 35244                                  ;	EXIT	'C' clear if OK
 35245                                  ;		  (ds) unchanged, this block updated
 35246                                  ;		  (ax) = address of next block, IFF not at end
 35247                                  ;		'C' set if arena trashed
 35248                                  ;	USES	(cx)
 35249                                  ;----------------------------------------------------------------------------
 35250                                          
 35251                                  Coalesce:
 35252                                  	;cmp	byte [di],5Ah ; 'Z'
 35253 00006156 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35254                                                                          ; IF current signature = END THEN
 35255                                          ;retz				;   GOTO ok
 35256 00006159 74FA                            jz	short COALESCE_RETN
 35257 0000615B E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35258                                          ;retc				; IF no error THEN GOTO check
 35259 0000615E 72F5                    	jc	short COALESCE_RETN
 35260                                  
 35261                                  coalesce_check:
 35262                                  	;cmp	[es:1],di
 35263 00006160 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35264                                          ;retnz				; IF next block isnt free THEN return
 35265 00006165 75EE                            JNZ	SHORT COALESCE_RETN
 35266                                  	;mov	cx,[ES:3]
 35267 00006167 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35268 0000616C 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35269                                          ;ADD	[3],CX
 35270 0000616D 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35271 00006171 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35272 00006174 880D                            MOV     [DI],CL
 35273 00006176 EBDE                            JMP     SHORT Coalesce		; try again
 35274                                  
 35275                                  ; 04/08/2018 - Retro DOS v3.0
 35276                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35277                                  
 35278                                  ;	BREAK  <$Alloc - allocate space in memory>
 35279                                  
 35280                                  ; MSDOS 6.0
 35281                                  ;----------------------------------------------------------------------------
 35282                                  ;**	$Alloc - Allocate Memory Space
 35283                                  ;
 35284                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35285                                  ;	Alloc returns a pointer to a free block of memory that
 35286                                  ;	has the requested size in paragraphs.
 35287                                  ;
 35288                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35289                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35290                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35291                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35292                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35293                                  ;
 35294                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35295                                  ;	starts from arena_head.
 35296                                  ;
 35297                                  ;	Assembler usage:
 35298                                  ;           MOV     BX,size
 35299                                  ;           MOV     AH,Alloc
 35300                                  ;           INT     21h
 35301                                  ;
 35302                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35303                                  ;	so that we start searching the arena at it's first non-trivial free
 35304                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35305                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35306                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35307                                  ;	verify that this is true; if so, this can stay as is
 35308                                  ;
 35309                                  ;	ENTRY	(bx) = requested size, in bytes
 35310                                  ;		(DS) = (ES) = DOSGROUP
 35311                                  ;	EXIT	'C' clear if memory allocated
 35312                                  ;		  (ax:0) = address of requested memory
 35313                                  ;		'C' set if request failed
 35314                                  ;		  (AX) = error_not_enough_memory
 35315                                  ;		    (bx) = max size we could have allocated
 35316                                  ;		  (ax) = error_arena_trashed
 35317                                  ;	USES	All
 35318                                  ;----------------------------------------------------------------------------
 35319                                  
 35320                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35321                                  ;----------------------------------------------------------------------------
 35322                                  ;SUBTTL $Alloc - allocate space in memory
 35323                                  ;
 35324                                  ;   Assembler usage:
 35325                                  ;           MOV     BX,size
 35326                                  ;           MOV     AH,Alloc
 35327                                  ;           INT     21h
 35328                                  ;         AX:0 is pointer to allocated memory
 35329                                  ;         BX is max size if not enough memory
 35330                                  ;
 35331                                  ;   Description:
 35332                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35333                                  ;       memory that has the requested  size  in  paragraphs.
 35334                                  ;
 35335                                  ;   Error return:
 35336                                  ;           AX = error_not_enough_memory
 35337                                  ;              = error_arena_trashed
 35338                                  ;----------------------------------------------------------------------------
 35339                                  
 35340                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35341                                  
 35342                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35343                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35344                                  
 35345                                  _$ALLOC:
 35346                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35347                                  	; 14/05/2019 - Retro DOS v4.0
 35348                                  	; 04/08/2018 - Retro DOS v3.0
 35349                                  	;EnterCrit critMem
 35350 00006178 E87DB1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35351                                  
 35352                                  ; 17/12/2022
 35353                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35354                                  ;%if 0
 35355                                  	; 14/05/2019
 35356 0000617B 16                      	push	ss
 35357 0000617C 1F                      	pop	ds
 35358                                  
 35359                                  	; MSDOS 6.0
 35360                                  	;mov	ax,[ss:arena_head]
 35361                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35362                                  
 35363 0000617D A1[2400]                	mov	ax,[arena_head]
 35364 00006180 A3[8E00]                	mov	[START_ARENA],ax			
 35365                                  	
 35366                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35367 00006183 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35368                                  					; Q: should we start scanning from 
 35369                                  					;    UMB's
 35370 00006188 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35371                                  		
 35372                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35373                                  	;cmp	word [UMB_HEAD],-1
 35374                                  	;je	short norm_alloc	; N: scan from arena_head
 35375                                  
 35376                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35377 0000618A F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35378 0000618F 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35379                                  	
 35380                                  	;mov	ax,[ss:UMB_HEAD]
 35381                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35382 00006191 A1[8C00]                	mov	ax,[UMB_HEAD]
 35383 00006194 A3[8E00]                	mov	[START_ARENA],ax
 35384                                  					; M000 - end
 35385                                  norm_alloc:
 35386 00006197 31C0                            XOR     AX,AX
 35387 00006199 89C7                            MOV     DI,AX
 35388                                  	; 15/03/2018
 35389                                          ;MOV	[SS:FirstArena],AX	; init the options
 35390                                          ;MOV	[SS:BestArena],AX
 35391                                          ;MOV	[SS:LastArena],AX
 35392                                  	; 14/05/2019
 35393 0000619B A3[4003]                	MOV	[FirstArena],AX		; init the options
 35394 0000619E A3[4203]                        MOV	[BestArena],AX
 35395 000061A1 A3[4403]                        MOV	[LastArena],AX
 35396 000061A4 50                              PUSH    AX                      ; alloc_max <- 0
 35397                                  	; 04/08/2018
 35398                                  start_scan:
 35399                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35400                                  	;MOV	AX,[arena_head]
 35401                                  
 35402                                  	; 14/05/2019	
 35403                                  	; MSDOS 6.0
 35404                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35405 000061A5 A1[8E00]                	mov	ax,[START_ARENA]
 35406                                  
 35407                                  	; 27/09/2023 (BugFix) (*) 
 35408                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35409                                  start_scan_x:
 35410                                  
 35411 000061A8 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35412 000061AB 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35413                                  
 35414                                  ;%endif
 35415                                  
 35416                                  ; 17/12/2022
 35417                                  %if 0
 35418                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35419                                  
 35420                                  	; MSDOS 6.0
 35421                                  	mov	ax,[ss:arena_head]
 35422                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35423                                  
 35424                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35425                                  					; Q: should we start scanning from 
 35426                                  					;    UMB's
 35427                                  	jz	short norm_alloc	; N: scan from arena_head
 35428                                  		
 35429                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35430                                  	;je	short norm_alloc	; N: scan from arena_head
 35431                                  
 35432                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35433                                  	jz	short norm_alloc	; N: scan from arena_head
 35434                                  	
 35435                                  	mov	ax,[ss:UMB_HEAD]
 35436                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35437                                  					; M000 - end
 35438                                  norm_alloc:
 35439                                          XOR     AX,AX
 35440                                          MOV     DI,AX
 35441                                  	; 15/03/2018
 35442                                  	MOV	[SS:FirstArena],AX	; init the options
 35443                                  	MOV	[SS:BestArena],AX
 35444                                  	MOV	[SS:LastArena],AX
 35445                                          PUSH    AX                      ; alloc_max <- 0
 35446                                  	; 04/08/2018
 35447                                  start_scan:
 35448                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35449                                  	; 14/05/2019	
 35450                                  	; MSDOS 6.0
 35451                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35452                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35453                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35454                                  %endif
 35455                                  
 35456                                  alloc_scan:
 35457 000061AD 06                              PUSH    ES
 35458 000061AE 1F                              POP     DS                      ; DS <- ES
 35459 000061AF 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35460 000061B3 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35461                                  
 35462                                  alloc_next:
 35463                                  	; MSDOS 6.0			; M000 - start 
 35464 000061B5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35465 000061BB 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35466                                  	
 35467 000061BD 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35468                                  					; Q: is alloc strategy high_first
 35469 000061C3 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35470 000061C5 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35471 000061C9 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35472                                  					;    arena_head
 35473 000061CE 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35474 000061D0 8CD8                    	mov	ax,ds			; ax = current block
 35475 000061D2 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35476 000061D7 EB03                    	jmp	short alloc_chk_end
 35477                                  
 35478                                  norm_strat:
 35479                                  	;cmp	byte [di],5Ah ; 'Z'
 35480 000061D9 803D5A                          CMP     BYTE [DI],arena_signature_end
 35481                                                                          ; IF current block is last THEN
 35482                                  alloc_chk_end:
 35483 000061DC 740E                            JZ      SHORT alloc_end		;   GOTO end
 35484 000061DE E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35485 000061E1 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35486                                  
 35487                                  alloc_err:
 35488 000061E3 58                              POP     AX
 35489                                  
 35490                                  alloc_trashed:
 35491                                  	;LeaveCrit critMem
 35492 000061E4 E82CB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35493                                          ;error	error_arena_trashed
 35494                                  	;mov	al,7
 35495 000061E7 B007                    	MOV	AL,error_arena_trashed
 35496                                  alloc_errj:
 35497 000061E9 E958A4                  	JMP	SYS_RET_ERR
 35498                                  
 35499                                  alloc_end:
 35500                                  	; 18/05/2019
 35501 000061EC 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35502 000061F2 7403                    	jz	short alloc_chk 
 35503 000061F4 E98400                  	jmp	alloc_do_split
 35504                                  
 35505                                  alloc_chk:
 35506                                  	; MSDOS 6.0
 35507 000061F7 36A1[2400]              	mov	ax,[ss:arena_head]
 35508 000061FB 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35509 00006200 740E                    	je	short alloc_fail	; Y: not enough memory
 35510                                  					; N:
 35511                                  					; Q: is the alloc strat HIGH_ONLY
 35512 00006202 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35513 00006208 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35514                                  	
 35515 0000620A 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35516                                  	; 27/09/2023 (*)
 35517 0000620E EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35518                                  	;jmp	short start_scan
 35519                                  					; M000 - end
 35520                                  
 35521                                  alloc_fail:
 35522                                          ;invoke Get_User_Stack
 35523 00006210 E872A2                          CALL	Get_User_Stack
 35524 00006213 5B                      	POP     BX
 35525                                          ;MOV	[SI].user_BX,BX
 35526                                  	;MOV	[SI+2],BX
 35527 00006214 895C02                  	mov	[SI+user_env.user_BX],bx
 35528                                  	;LeaveCrit critMem
 35529 00006217 E8F9B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35530                                  	;error	error_not_enough_memory
 35531                                  	;mov	al,8
 35532 0000621A B008                    	MOV	AL,error_not_enough_memory
 35533                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35534 0000621C EBCB                    	jmp	short alloc_errj
 35535                                  	;JMP	SYS_RET_ERR
 35536                                  
 35537                                  alloc_free:
 35538 0000621E E835FF                          CALL    Coalesce		; add following free block to current
 35539 00006221 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35540 00006223 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35541 00006227 5A                              POP     DX                      ; check for max found size
 35542 00006228 39D1                            CMP     CX,DX
 35543 0000622A 7602                            JNA     SHORT alloc_test
 35544 0000622C 89CA                            MOV     DX,CX
 35545                                  
 35546                                  alloc_test:
 35547 0000622E 52                              PUSH    DX
 35548 0000622F 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35549 00006231 7782                    	JA      SHORT alloc_next	;   GOTO next
 35550                                  
 35551                                  	; 15/03/2018
 35552 00006233 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35553 00006239 7505                    	JNZ	SHORT alloc_best
 35554 0000623B 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35555                                  alloc_best:
 35556 00006240 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35557 00006246 740E                            JZ      SHORT alloc_make_best	; initial best
 35558 00006248 06                              PUSH	ES
 35559 00006249 368E06[4203]                    MOV     ES,[SS:BestArena]
 35560 0000624E 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35561 00006253 07                              POP	ES
 35562 00006254 7605                            JBE     SHORT alloc_last
 35563                                  alloc_make_best:
 35564 00006256 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35565                                  alloc_last:
 35566 0000625B 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35567 00006260 E952FF                          JMP     alloc_next
 35568                                  ;
 35569                                  ; split the block high
 35570                                  ;
 35571                                  alloc_do_split_high:
 35572 00006263 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35573 00006268 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35574 0000626C 29D9                            SUB     CX,BX
 35575 0000626E 8CDA                            MOV     DX,DS
 35576 00006270 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35577 00006272 01CA                            ADD     DX,CX                   ; point to next block
 35578 00006274 8EC2                            MOV     ES,DX                   ; no decrement!
 35579 00006276 49                              DEC     CX
 35580 00006277 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35581 00006279 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35582                                  ;
 35583                                  ; we have scanned memory and have found all appropriate blocks
 35584                                  ; check for the type of allocation desired; first and best are identical
 35585                                  ; last must be split high
 35586                                  ;
 35587                                  alloc_do_split:
 35588                                  
 35589                                  ; 17/12/2022
 35590                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35591                                  ;%if 0
 35592                                  	; 14/05/2019
 35593                                  	; MSDOS 6.0			; M000 - start
 35594                                  	;xor	cx,cx
 35595 0000627B 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35596                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35597 00006280 80E13F                  	and	cl,3Fh
 35598                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35599 00006283 80F901                  	cmp	cl,BEST_FIT
 35600 00006286 77DB                    	ja	short alloc_do_split_high
 35601                                  ;%endif
 35602                                  
 35603                                  	; 17/12/2022
 35604                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35605                                  	; MSDOS 6.0 & MSDOS 5.0
 35606                                  	;xor	cx,cx
 35607                                  	;mov	cl,[ss:AllocMethod]
 35608                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35609                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35610                                  	;ja	short alloc_do_split_high
 35611                                  
 35612                                  	; 15/03/2018
 35613                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35614                                  	; 04/08/2018
 35615                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35616                                          ;JA	SHORT alloc_do_split_high
 35617                                          
 35618 00006288 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35619 0000628D 7205                    	JB      SHORT alloc_get_size
 35620 0000628F 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35621                                  
 35622                                  alloc_get_size:
 35623 00006294 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35624 00006298 29D9                            SUB     CX,BX                   ; get room left over
 35625 0000629A 8CD8                            MOV     AX,DS
 35626 0000629C 89C2                            MOV     DX,AX                   ; save for owner setting
 35627 0000629E 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35628 000062A0 01D8                            ADD     AX,BX
 35629 000062A2 40                              INC     AX                      ; remember the header
 35630 000062A3 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35631 000062A5 49                              DEC     CX                      ; CX <- size of split block
 35632                                  alloc_set_sizes:
 35633 000062A6 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35634 000062AA 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35635                                  	;mov	bl,4Dh ; 'M'
 35636 000062AF B34D                            MOV     BL,arena_signature_normal
 35637 000062B1 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35638 000062B3 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35639 000062B6 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35640                                  
 35641                                  alloc_set_owner:
 35642 000062BB 8EDA                            MOV     DS,DX
 35643 000062BD 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35644 000062C1 A30100                          MOV     [ARENA.OWNER],AX
 35645 000062C4 8CD8                            MOV     AX,DS
 35646 000062C6 40                              INC     AX
 35647 000062C7 5B                              POP     BX
 35648                                  	;LeaveCrit critMem
 35649 000062C8 E848B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35650                                  	
 35651                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35652                                  alloc_ok:
 35653                                          ;transfer SYS_RET_OK
 35654 000062CB E96DA3                  	JMP	SYS_RET_OK
 35655                                  
 35656                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35657                                  
 35658                                  ; MSDOS 6.0
 35659                                  ;----------------------------------------------------------------------------
 35660                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35661                                  ;
 35662                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35663                                  ;	any following free space onto this block; then we try to trim the
 35664                                  ;	block down to the size requested.
 35665                                  ;
 35666                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35667                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35668                                  ;	Thus the maximum-size-possible value that we return has already
 35669                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35670                                  ;
 35671                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35672                                  ;		finish it's work. For this reason we build the allocsf
 35673                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35674                                  ;		code.
 35675                                  ;
 35676                                  ;	ENTRY	(es) = segment of old block
 35677                                  ;		(bx) = newsize
 35678                                  ;		(ah) = SETBLOCK
 35679                                  ;
 35680                                  ;	EXIT	'C' clear if OK
 35681                                  ;		'C' set if error
 35682                                  ;		  (ax) = error_invalid_block
 35683                                  ;		       = error_arena_trashed
 35684                                  ;		       = error_not_enough_memory
 35685                                  ;		       = error_invalid_function
 35686                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35687                                  ;	USES	???? BUGBUG
 35688                                  ;----------------------------------------------------------------------------
 35689                                  
 35690                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35691                                  ;----------------------------------------------------------------------------
 35692                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35693                                  ;
 35694                                  ;   Assembler usage:
 35695                                  ;           MOV     ES,block
 35696                                  ;           MOV     BX,newsize
 35697                                  ;           MOV     AH,setblock
 35698                                  ;           INT     21h
 35699                                  ;         if setblock fails for growing, BX will have the maximum
 35700                                  ;         size possible
 35701                                  ;   Error return:
 35702                                  ;           AX = error_invalid_block
 35703                                  ;              = error_arena_trashed
 35704                                  ;              = error_not_enough_memory
 35705                                  ;              = error_invalid_function
 35706                                  ;----------------------------------------------------------------------------
 35707                                  
 35708                                  _$SETBLOCK:        
 35709                                  	; 04/08/2018 - Retro DOS v3.0
 35710                                  	;EnterCrit   critMem
 35711 000062CE E827B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35712                                  
 35713 000062D1 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35714 000062D4 8CC0                            MOV     AX,ES
 35715 000062D6 48                              DEC     AX
 35716 000062D7 E86CFE                          CALL    check_signature
 35717 000062DA 7303                            JNC     SHORT setblock_grab
 35718                                  
 35719                                  setblock_bad:
 35720 000062DC E905FF                          JMP     alloc_trashed
 35721                                  
 35722                                  setblock_grab:
 35723 000062DF 8ED8                            MOV     DS,AX
 35724 000062E1 E872FE                          CALL    Coalesce
 35725 000062E4 72F6                            JC      SHORT setblock_bad
 35726 000062E6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35727 000062EA 51                              PUSH    CX
 35728 000062EB 39CB                            CMP     BX,CX
 35729 000062ED 76A5                            JBE     SHORT alloc_get_size
 35730 000062EF E91EFF                          JMP     alloc_fail
 35731                                  
 35732                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35733                                  
 35734                                  ; MSDOS 6.0
 35735                                  ;----------------------------------------------------------------------------
 35736                                  ;**	$DEALLOC - Free Heap Memory
 35737                                  ;
 35738                                  ;	ENTRY	(es) = address of item
 35739                                  ;
 35740                                  ;	EXIT	'C' clear of OK
 35741                                  ;		'C' set if error
 35742                                  ;		  (AX) = error_invalid_block
 35743                                  ;	USES	???? BUGBUG
 35744                                  
 35745                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35746                                  ;----------------------------------------------------------------------------
 35747                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35748                                  ;
 35749                                  ;   Assembler usage:
 35750                                  ;           MOV     ES,block
 35751                                  ;           MOV     AH,dealloc
 35752                                  ;           INT     21h
 35753                                  ;
 35754                                  ;   Error return:
 35755                                  ;           AX = error_invalid_block
 35756                                  ;              = error_arena_trashed
 35757                                  ;---------------------------------------------------------------------------- 
 35758                                  
 35759                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35760                                  _$DEALLOC:
 35761                                  	; 14/05/2019 - Retro DOS v4.0    
 35762                                  	; 04/08/2018 - Retro DOS v3.0
 35763                                  	;EnterCrit   critMem
 35764 000062F2 E803B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35765                                  
 35766                                  	; MSDOS 6.0			; M016, M068 - Start
 35767 000062F5 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35768                                  					; Q: was the previous call an int 21
 35769                                  					;    exec call
 35770 000062FB 740D                    	jz	short deallocate	; N: continue
 35771 000062FD 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35772 00006303 7505                    	jne	short deallocate	; N: continue
 35773                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35774                                  	; 25/09/2023
 35775 00006305 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35776                                  deallocate:				; M016, M068 - End
 35777 0000630A BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35778 0000630D 8CC0                            MOV     AX,ES
 35779 0000630F 48                              DEC     AX
 35780 00006310 E833FE                          CALL    check_signature
 35781 00006313 720A                            JC      SHORT dealloc_err
 35782 00006315 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35783                                  	;LeaveCrit critMem
 35784 0000631A E8F6AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35785                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35786                                          ;transfer SYS_RET_OK
 35787                                  dealloc_ok:
 35788 0000631D EBAC                    	jmp	short alloc_ok
 35789                                  	;JMP	SYS_RET_OK
 35790                                  
 35791                                  dealloc_err:
 35792                                  	;LeaveCrit critMem
 35793 0000631F E8F1AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35794                                          ;error	error_invalid_block
 35795                                  	;mov	al,9
 35796 00006322 B009                    	MOV	AL,error_invalid_block
 35797                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35798                                  dealloc_errj:
 35799                                  AllocOperErrj:	; 17/12/2022
 35800 00006324 E91DA3                  	JMP	SYS_RET_ERR
 35801                                  
 35802                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35803                                  
 35804                                  ; MSDOS 6.0
 35805                                  ;----------------------------------------------------------------------------
 35806                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35807                                  ;
 35808                                  ;	Assembler usage:
 35809                                  ;           MOV     AH,AllocOper
 35810                                  ;           MOV     BX,method
 35811                                  ;           MOV     AL,func
 35812                                  ;           INT     21h
 35813                                  ;
 35814                                  ;	ENTRY	
 35815                                  ;		(al) = 0
 35816                                  ;		  Get allocation Strategy in (ax)
 35817                                  ;
 35818                                  ;		(al) = 1, (bx) = method = zw0000xy
 35819                                  ;		  Set allocation strategy.
 35820                                  ;		   w  = 1  => HIGH_ONLY
 35821                                  ;		   z  = 1  => HIGH_FIRST
 35822                                  ;		   xy = 00 => FIRST_FIT
 35823                                  ;		      = 01 => BEST_FIT
 35824                                  ;		      = 10 => LAST_FIT
 35825                                  ;
 35826                                  ;		(al) = 2
 35827                                  ;		  Get UMB link state in (al)
 35828                                  ;
 35829                                  ;		(al) = 3
 35830                                  ;		  Set UMB link state
 35831                                  ;		   (bx) = 0 => Unlink UMBs
 35832                                  ;		   (bx) = 1 => Link UMBs
 35833                                  ;
 35834                                  ;
 35835                                  ;	EXIT	'C' clear if OK
 35836                                  ;
 35837                                  ;		 if (al) = 0
 35838                                  ;		  (ax) = existing method
 35839                                  ;		 if (al) = 1
 35840                                  ;		  Sets allocation strategy
 35841                                  ;		 if (al) = 2
 35842                                  ;		  (al) = 0 => UMBs not linked
 35843                                  ;		  (al) = 1 => UMBs linked in
 35844                                  ;		 if (al) = 3
 35845                                  ;		  Links/Unlinks the UMBs into DOS chain
 35846                                  ;
 35847                                  ;		'C' set if error
 35848                                  ;		  AX = error_invalid_function
 35849                                  ;
 35850                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35851                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35852                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35853                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35854                                  ;		    arena' if an arena sig is damaged.
 35855                                  ;----------------------------------------------------------------------------
 35856                                  
 35857                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35858                                  ;----------------------------------------------------------------------------
 35859                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35860                                  ;
 35861                                  ;   Assembler usage:
 35862                                  ;           MOV     AH,AllocOper
 35863                                  ;           MOV     BX,method
 35864                                  ;           MOV     AL,func
 35865                                  ;           INT     21h
 35866                                  ;
 35867                                  ;   Error return:
 35868                                  ;           AX = error_invalid_function
 35869                                  ;----------------------------------------------------------------------------
 35870                                  
 35871                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35872                                  _$ALLOCOPER:
 35873                                  	; 14/05/2019 - Retro DOS v4.0
 35874                                  	; MSDOS 6.0
 35875 00006327 08C0                    	or	al,al ; 0
 35876 00006329 741E                    	jz	short AllocGetStrat
 35877                                  	; 17/12/2022
 35878                                  	;cmp	al,1
 35879                                  	;jz	short AllocSetStrat
 35880                                  
 35881                                  	; 01/12/2022
 35882                                  	;cmp	al, 2
 35883                                  	;jb	short AllocSetStrat
 35884                                  	;ja	short AllocSetLink
 35885                                  	;;jmp	short AllocGetLink
 35886                                  ;AllocGetLink:
 35887                                  	; MSDOS 6.0
 35888                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35889                                  	;and 	al,LINKSTATE		
 35890                                  	;;transfer SYS_RET_OK
 35891                                  	;jmp	SYS_RET_OK
 35892                                  
 35893 0000632B 3C02                    	cmp	al,2
 35894                                  	; 17/12/2022
 35895 0000632D 7223                    	jb	short AllocSetStrat ; al = 1
 35896 0000632F 7432                    	je	short AllocGetLink
 35897                                  
 35898                                  	;cmp	al,2
 35899                                  	;jz	short AllocGetLink
 35900 00006331 3C03                    	cmp	al,3
 35901 00006333 7436                    	jz	short AllocSetLink
 35902                                  
 35903                                  	; 15/04/2018
 35904                                  	;CMP	AL,1
 35905                                          ;JB	SHORT AllocOperGet
 35906                                          ;JZ	SHORT AllocOperSet
 35907                                  
 35908                                  AllocOperError:
 35909                                  	; 04/08/2018 - Retro DOS v3.0
 35910                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35911                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35912 00006335 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35913                                  	;error	error_invalid_function
 35914                                  	;mov	al,1
 35915 0000633B B001                    	MOV	AL,error_invalid_function
 35916                                  	; 17/12/2022
 35917                                  ;AllocOperErrj:
 35918                                  	;JMP	SYS_RET_ERR
 35919                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35920                                  	;jmp	short dealloc_errj
 35921                                  	; 17/12/2022
 35922 0000633D EBE5                    	jmp	short AllocOperErrj
 35923                                  
 35924                                  AllocArenaError:
 35925                                  	; MSDOS 6.0
 35926 0000633F 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35927                                  					; M009: Extended Error Locus
 35928                                  	;error	error_arena_trashed	; M009:
 35929                                  	;mov	al,7
 35930 00006345 B007                    	MOV	AL,error_arena_trashed
 35931                                  	;JMP	SYS_RET_ERR
 35932 00006347 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35933                                  
 35934                                  AllocGetStrat: 
 35935                                  	; MSDOS 6.0
 35936                                  AllocOperGet:
 35937 00006349 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35938 0000634D 30E4                            XOR     AH,AH
 35939                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35940                                  	;transfer SYS_RET_OK
 35941                                  AllocOperOk:
 35942                                  	; 17/12/2022
 35943                                  	;jmp	short dealloc_ok
 35944 0000634F E9E9A2                  	JMP	SYS_RET_OK
 35945                                  
 35946                                  AllocSetStrat: 
 35947                                  	; 14/05/2019
 35948                                  	; MSDOS 6.0
 35949 00006352 53                      	push	bx			; M000 - start
 35950                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35951                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35952                                  	; 17/12/2022
 35953 00006353 80E33F                  	and	bl,3Fh
 35954 00006356 83FB02                  	cmp	bx,2			; BX must be 0-2
 35955                                  	;cmp	bl,2
 35956 00006359 5B                      	pop	bx			; M000 - end
 35957 0000635A 77D9                    	ja	short AllocOperError
 35958                                  
 35959                                  AllocOperSet:
 35960 0000635C 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35961                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35962                                  	;transfer SYS_RET_OK
 35963                                  AllocOperOkj:
 35964 00006361 EBEC                    	jmp	short AllocOperOk
 35965                                  	;JMP	SYS_RET_OK
 35966                                  
 35967                                  AllocGetLink:
 35968                                  	; MSDOS 6.0
 35969 00006363 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35970                                  	;and	al,1
 35971 00006367 2401                    	and 	al,LINKSTATE		
 35972                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35973                                  	;transfer SYS_RET_OK
 35974                                  AllocOperOkj2:
 35975                                  	; 17/12/2022
 35976 00006369 EBE4                    	jmp	short AllocOperOk
 35977                                  	;jmp	short AllocOperOkj
 35978                                  	;;JMP	SYS_RET_OK
 35979                                  
 35980                                  AllocSetLink:
 35981                                  	; MSDOS 6.0			; M009 - start
 35982 0000636B 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35983 00006370 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35984 00006373 74C0                    	je	short AllocOperError	; N: error
 35985                                  					; Y: continue
 35986                                  					; M009 - end
 35987 00006375 83FB01                  	cmp	bx,1			
 35988 00006378 7204                    	jb	short UnlinkUmbs
 35989 0000637A 741C                    	jz	short LinkUmbs
 35990                                  	
 35991 0000637C EBB7                    	jmp	short AllocOperError
 35992                                  	
 35993                                  UnlinkUmbs:
 35994                                  	;test	byte [ss:UMBFLAG],1
 35995 0000637E 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35996 00006384 7410                    	jz	short unlinked		; Y: return 
 35997                                  	
 35998 00006386 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35999 00006389 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 36000                                  	
 36001                                  					; make it last
 36002 0000638B C60600005A              	mov	byte [0],arena_signature_end
 36003                                  	
 36004                                  	;and	byte [ss:UMBFLAG],0FEh
 36005 00006390 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36006                                  	
 36007                                  unlinked:
 36008                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36009                                  	;transfer SYS_RET_OK
 36010                                  	; 17/12/2022
 36011 00006396 EBB7                    	jmp	short AllocOperOk
 36012                                  	;jmp	short AllocOperOkj2
 36013                                  	;;JMP	SYS_RET_OK
 36014                                  
 36015                                  LinkUmbs:
 36016 00006398 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36017 0000639E 7510                    	jnz	short linked		; Y: return
 36018                                  	
 36019 000063A0 E80F00                  	call	GetLastArena		; get arena before umb_head
 36020 000063A3 729A                    	jc	short AllocArenaError	; M009: arena trashed
 36021                                  	
 36022                                  					; make it normal. M061: ds points to
 36023                                  					; arena before umb_head
 36024 000063A5 C60600004D              	mov	byte [0],arena_signature_normal
 36025                                  	
 36026 000063AA 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36027                                  linked:
 36028                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36029                                  	;transfer SYS_RET_OK
 36030                                  	; 17/12/2022
 36031 000063B0 EB9D                    	jmp	short AllocOperOk
 36032                                  	;jmp	short unlinked
 36033                                  	;;JMP	SYS_RET_OK
 36034                                  
 36035                                  ; MSDOS 6.0
 36036                                  ;--------------------------------------------------------------------------
 36037                                  ; Procedure Name : GetLastArena		-  M003
 36038                                  ;
 36039                                  ; Inputs	 : cx = umb_head
 36040                                  ;
 36041                                  ;
 36042                                  ; Outputs	 : If UMBs are linked
 36043                                  ;			ES = umb_head
 36044                                  ;			DS = arena before umb_head
 36045                                  ;		   else
 36046                                  ;			DS = last arena
 36047                                  ;			ES = next arena. will be umb_head if NC.
 36048                                  ;
 36049                                  ;		   CY if error
 36050                                  ;
 36051                                  ; Uses		 : DS, ES, DI, BX
 36052                                  ;--------------------------------------------------------------------------
 36053                                  
 36054                                  ; 14/05/2019 - Retro DOS v4.0
 36055                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36056                                  
 36057                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36058                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36059                                  	
 36060                                  GetLastArena:
 36061 000063B2 50                      	push	ax			; save ax
 36062                                  
 36063 000063B3 36A1[2400]              	mov	ax,[ss:arena_head]
 36064 000063B7 8EC0                    	mov	es,ax			; es = arena_head
 36065 000063B9 31FF                    	xor	di,di
 36066                                  
 36067 000063BB 26803D5A                	cmp     byte [es:di],arena_signature_end
 36068                                  					; Q: is this the last arena
 36069 000063BF 7419                    	je	short GLA_done		; Y: return last arena in ES		
 36070                                  					
 36071                                  GLA_next:
 36072 000063C1 8ED8                    	mov	ds,ax
 36073 000063C3 E879FD                  	call	arena_next		; ax, es -> next arena
 36074                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36075                                  	;jc	short GLA_err
 36076                                  	; 17/12/2022
 36077 000063C6 7228                    	jc	short GLA_err2
 36078                                  
 36079 000063C8 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36080 000063CE 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 36081                                  					;    umb_head
 36082                                  					; N: terminating condition is 05Ah
 36083                                  
 36084 000063D0 26803D5A                	cmp     byte [es:di],arena_signature_end
 36085                                  					; Q: is this the last arena
 36086 000063D4 EB02                    	jmp	short GLA_@f
 36087                                  GLA_chkumb:
 36088 000063D6 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36089                                  GLA_@f:
 36090 000063D8 75E7                    	jne	short GLA_next		; N: get next arena
 36091                                  
 36092                                  GLA_done:
 36093                                  					; M061 - Start
 36094 000063DA 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36095 000063E0 750B                    	jnz	short GLA_ret		; Y: we're done
 36096                                  					; N: let us confirm that the next 
 36097                                  					;    arena is umb_head
 36098 000063E2 8ED8                    	mov	ds,ax
 36099 000063E4 E858FD                  	call	arena_next		; ax, es -> next arena
 36100                                  	;jc	short GLA_err
 36101 000063E7 7207                    	jc	short GLA_err2
 36102 000063E9 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36103 000063EB 7502                    	jne	short GLA_err		; N: error
 36104                                  					; M061 - End
 36105                                  GLA_ret:
 36106                                  	; 17/12/2022				
 36107                                  	;clc
 36108                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36109                                  	;clc
 36110 000063ED 58                      	pop	ax			; M061
 36111 000063EE C3                      	retn				; M061
 36112                                  
 36113                                  GLA_err:
 36114 000063EF F9                      	stc				; M061
 36115                                  GLA_err2:
 36116 000063F0 58                      	pop	ax
 36117 000063F1 C3                      	retn
 36118                                  
 36119                                  ;============================================================================
 36120                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36121                                  ;============================================================================
 36122                                  ; 04/08/2018 - Retro DOS v3.0
 36123                                  
 36124                                  ;	TITLE SRVCALL - Server DOS call
 36125                                  ;	NAME  SRVCALL
 36126                                  
 36127                                  ;**	SRVCALL.ASM - Server DOS call functions
 36128                                  ;
 36129                                  ;
 36130                                  ;	$ServerCall
 36131                                  ;
 36132                                  ;	Modification history:
 36133                                  ;
 36134                                  ;	    Created: ARR 08 August 1983
 36135                                  
 36136                                  ;AsmVars <Installed>
 36137                                  
 36138                                  ;include dpl.asm
 36139                                  
 36140                                  ;Installed = TRUE
 36141                                  
 36142                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36143                                  ; ---------------------------------------------------------------------------
 36144                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36145                                  
 36146                                  ;BREAK <ServerCall -- Server DOS call>
 36147                                  
 36148                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36149                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36150                                  
 36151                                  ;hkn; TABLE	SEGMENT
 36152                                  ;Public SRVC001S,SRVC001E
 36153                                  ;SRVC001S label byte
 36154                                  
 36155                                  SRVC001S:
 36156                                  
 36157 000063F2 [F663]                  SERVERTAB:	dw	SERVER_DISP
 36158 000063F4 [4864]                  SERVERLEAVE:	dw	SERVERRETURN
 36159 000063F6 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36160 000063F7 [B064]                  		dw	SRV_CALL	; 0
 36161 000063F9 [4964]                  		dw	COMMIT_ALL	; 1
 36162 000063FB [7F64]                  		dw	CLOSE_NAME	; 2
 36163 000063FD [8A64]                  		dw	CLOSE_UID	; 3
 36164 000063FF [9164]                  		dw	CLOSE_UID_PID	; 4
 36165 00006401 [9864]                  		dw	GET_LIST	; 5
 36166 00006403 [F164]                  		dw	GET_DOS_DATA	; 6
 36167 00006405 [1565]                  		dw	SPOOL_OPER	; 7
 36168 00006407 [1565]                  		dw	SPOOL_OPER	; 8
 36169 00006409 [1565]                  		dw	SPOOL_OPER	; 9
 36170 0000640B [2165]                  		dw	_$SetExtendedError  ; 10
 36171                                  
 36172                                  SERVER_DISP_END:  ;  LABEL BYTE
 36173                                  
 36174                                  ;SRVC001E label byte
 36175                                  
 36176                                  SRVC001E:
 36177                                  
 36178                                  ;hkn; TABLE	ENDS
 36179                                  
 36180                                  ;----------------------------------------------------------------------------
 36181                                  ;
 36182                                  ; Procedure Name : $ServerCall
 36183                                  ;
 36184                                  ; Inputs:
 36185                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36186                                  ; Function:
 36187                                  ;	AL=0	Server DOS call
 36188                                  ;	AL=1	Commit All files
 36189                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36190                                  ;	AL=3	Close all files for DPL_UID
 36191                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36192                                  ;	AL=5	Get open file list entry
 36193                                  ;		    IN: BX File Index
 36194                                  ;			CX User Index
 36195                                  ;		    OUT:ES:DI -> Name
 36196                                  ;			BX = UID
 36197                                  ;		    CX = # locked blocks held by this UID
 36198                                  ;	AL=6	Get DOS data area
 36199                                  ;		    OUT: DS:SI -> Start
 36200                                  ;			CX size in bytes of swap if indos
 36201                                  ;			DX size in bytes of swap always
 36202                                  ;	AL=7	Get truncate flag
 36203                                  ;	AL=8	Set truncate flag
 36204                                  ;	AL=9	Close all spool files
 36205                                  ;	AL=10	SetExtendedError
 36206                                  ;
 36207                                  ;----------------------------------------------------------------------------
 36208                                  
 36209                                  _$ServerCall:
 36210                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36211                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36212                                  	; 10/06/2019
 36213                                  	; 29/04/2019 - Retro DOS v4.0
 36214                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36215                                  
 36216                                  	; 05/08/2018 - Retro DOS v3.0
 36217                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36218 0000640D 3C07                    	CMP	AL,7
 36219 0000640F 7204                    	JB	short SET_STUFF
 36220 00006411 3C09                    	CMP	AL,9
 36221 00006413 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36222                                  SET_STUFF:
 36223 00006415 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36224                                  	;mov	bx,[si+12h]
 36225 00006417 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36226                                  
 36227                                  	; MSDOS 6.0
 36228                                  ;SR;
 36229                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36230                                  ; of USER_ID
 36231                                  
 36232 0000641A 36F606[3010]01          	test	byte [SS:IsWin386],1
 36233 00006420 7505                    	jnz	short skip_win386
 36234                                  
 36235                                  ;hkn; SS override for user_id and proc_id
 36236                                  	; 15/08/2018
 36237 00006422 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36238                                  
 36239                                  skip_win386:
 36240 00006427 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36241 0000642A 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36242                                  NO_SET_ID:
 36243                                  	; 10/06/2019 - Retro DOS v4.0
 36244 0000642F 2EFF36[F463]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36245 00006434 2EFF36[F263]            	PUSH	word [cS:SERVERTAB]	; push table address
 36246 00006439 50                      	PUSH	AX
 36247 0000643A E8CEAD                  	call	TableDispatch
 36248                                  
 36249                                  ;hkn; SS override
 36250                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36251 0000643D 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36252                                  	;error	error_invalid_function
 36253                                  	;mov	al,1
 36254 00006443 B001                    	MOV	AL,error_invalid_function
 36255                                  servercall_error:
 36256 00006445 E9FCA1                  	JMP	SYS_RET_ERR
 36257                                  
 36258                                  SERVERRETURN:
 36259 00006448 C3                      	retn
 36260                                  
 36261                                  ; Commit - iterate through the open file list and make sure that the
 36262                                  ; directory entries are correctly updated.
 36263                                  
 36264                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36265                                  COMMIT_ALL:
 36266 00006449 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36267 0000644B 16                      	push	ss
 36268 0000644C 1F                      	pop	ds
 36269 0000644D E8A8AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36270                                  CommitLoop:
 36271 00006450 53                      	push	bx
 36272 00006451 E82401                  	call	SFFromSFN
 36273 00006454 7222                    	JC	short CommitDone
 36274 00006456 26833D00                	cmp	word [es:di],0
 36275                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36276                                  					; if (ThisSFT->refcount != 0)
 36277 0000645A 7418                    	JZ	short CommitNext
 36278                                  	;cmp	word [es:di],0FFFFh ; -1
 36279 0000645C 26833DFF                	cmp	word [ES:DI],sf_busy
 36280                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36281                                  					; BUSY SFTs have god knows what
 36282 00006460 7412                    	JZ	short CommitNext	;   in them.
 36283                                  	; 17/12/2022
 36284 00006462 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36285                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36286 00006467 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36287                                  					;	doesn't deadlock
 36288 00006469 893E[9E05]              	MOV	[THISSFT],DI
 36289 0000646D 8C06[A005]              	MOV	[THISSFT+2],ES
 36290 00006471 E87ECB                  	call	DOS_COMMIT		;	DOSCommit ();
 36291                                  CommitNext:
 36292 00006474 5B                      	pop	bx
 36293 00006475 43                      	INC	BX
 36294 00006476 EBD8                    	JMP	short CommitLoop
 36295                                  CommitDone:
 36296 00006478 E898AE                  	call	LCritSFT
 36297 0000647B 5B                      	pop	bx
 36298                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36299                                  Commit_Ok:
 36300 0000647C E9BCA1                  	jmp	SYS_RET_OK
 36301                                  	
 36302                                  
 36303                                  CLOSE_NAME:
 36304                                  
 36305                                  ;if installed
 36306                                  
 36307                                  ;hkn; SS override
 36308                                  	;call	far [ss:MFTcloN]
 36309 0000647F 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36310                                  ;else
 36311                                  ;	Call	MFTcloN
 36312                                  ;endif
 36313                                  
 36314                                  CheckReturns:
 36315 00006484 7202                    	JC	short func_err
 36316                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36317                                  	;transfer SYS_RET_OK
 36318                                  Commit_Okj:
 36319 00006486 EBF4                    	jmp	short Commit_Ok
 36320                                  	;jmp	SYS_RET_OK
 36321                                  
 36322                                  func_err:
 36323                                  	;transfer SYS_RET_ERR
 36324                                  	;jmp	SYS_RET_ERR
 36325 00006488 EBBB                    	jmp	short servercall_error
 36326                                  
 36327                                  CLOSE_UID:
 36328                                  
 36329                                  ;if installed
 36330                                  ;hkn; SS override
 36331                                  	;call	far [ss:MFTclU]
 36332 0000648A 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36333                                  ;else
 36334                                  ;	Call	MFTclU
 36335                                  ;endif
 36336 0000648F EBF3                    	JMP	short CheckReturns
 36337                                  
 36338                                  CLOSE_UID_PID:
 36339                                  
 36340                                  ;if installed
 36341                                  ;hkn; SS override
 36342                                  	;call	far [ss:MFTCloseP]
 36343 00006491 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 36344                                  ;else
 36345                                  ;	Call	MFTCloseP
 36346                                  ;endif
 36347 00006496 EBEC                    	JMP	short CheckReturns
 36348                                  
 36349                                  GET_LIST:
 36350                                  
 36351                                  ;if installed
 36352                                  ;hkn; SS override
 36353                                  	;call	far [ss:MFT_get]
 36354 00006498 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36355                                  ;else
 36356                                  ;	Call	MFT_get
 36357                                  ;endif
 36358 0000649D 72E9                    	JC	short func_err
 36359 0000649F E8E39F                  	call	Get_User_Stack
 36360                                  	;mov	[si+2],bx
 36361 000064A2 895C02                  	MOV	[SI+user_env.user_BX],BX
 36362                                  	;mov	[si+10],di
 36363 000064A5 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36364                                  	;mov	[si+16],es
 36365 000064A8 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36366                                  SetCXOK:
 36367                                  	;mov	[si+4],cx
 36368 000064AB 894C04                  	MOV	[SI+user_env.user_CX],CX
 36369                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36370                                  	;transfer SYS_RET_OK
 36371                                  Commit_Okj2:
 36372                                  	; 17/12/2022
 36373 000064AE EBCC                    	jmp	short Commit_Ok
 36374                                  	;jmp	short Commit_Okj
 36375                                  	;;jmp	SYS_RET_OK
 36376                                  
 36377                                  SRV_CALL:
 36378 000064B0 58                      	POP	AX			; get rid of call to $srvcall
 36379 000064B1 1E                      	push	ds
 36380 000064B2 56                      	push	si
 36381 000064B3 E8CF9F                  	call	Get_User_Stack
 36382 000064B6 5F                      	pop	di
 36383 000064B7 07                      	pop	es
 36384                                  
 36385                                  ; DS:SI point to stack
 36386                                  ; ES:DI point to DPL
 36387                                  
 36388 000064B8 E82FAD                  	call	XCHGP
 36389                                  
 36390                                  ; DS:SI point to DPL
 36391                                  ; ES:DI point to stack
 36392                                  ;
 36393                                  ; We now copy the registers from DPL to save stack
 36394                                  
 36395 000064BB 56                      	push	si
 36396 000064BC B90600                  	MOV	CX,6
 36397 000064BF F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36398 000064C1 47                      	INC	DI
 36399 000064C2 47                      	INC	DI			; Skip user_BP
 36400 000064C3 A5                      	MOVSW				; DS
 36401 000064C4 A5                      	MOVSW				; ES
 36402 000064C5 5E                      	pop	si			; DS:SI -> DPL
 36403 000064C6 8B04                    	mov	ax,[SI]
 36404                                  	;MOV	AX,[SI+DPL.AX]
 36405                                  	;mov	bx,[si+2]
 36406 000064C8 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36407                                  	;mov	cx,[si+4]
 36408 000064CB 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36409                                  	;mov	dx,[si+6]
 36410 000064CE 8B5406                  	MOV	DX,[SI+DPL.DX]
 36411                                  	;mov	di,[si+10]
 36412 000064D1 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36413                                  	;mov	es,[si+14]
 36414 000064D4 8E440E                  	MOV	ES,[SI+DPL.ES]
 36415                                  	;push	word [si+8]
 36416 000064D7 FF7408                  	PUSH	word [SI+DPL.SI]
 36417                                  	;mov	ds,[si+12]
 36418 000064DA 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36419 000064DD 5E                      	POP	SI
 36420                                  
 36421                                  ;hkn; SS override for next 3
 36422 000064DE 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36423 000064E3 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36424 000064E8 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36425 000064EE E9969E                  	jmp	REDISP
 36426                                  
 36427                                  GET_DOS_DATA:
 36428 000064F1 16                      	push	ss
 36429 000064F2 07                      	pop	es
 36430 000064F3 BF[2003]                	MOV     DI,SWAP_START
 36431 000064F6 B9[AC0A]                	MOV     CX,SWAP_END
 36432 000064F9 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36433 000064FC 29F9                    	SUB     CX,DI
 36434 000064FE 29FA                    	SUB     DX,DI
 36435 00006500 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36436 00006502 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36437 00006505 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36438 00006507 E87B9F                  	call	Get_User_Stack
 36439                                  	;mov	[si+14],es
 36440 0000650A 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36441                                  	;mov	[si+8],di
 36442 0000650D 897C08                  	MOV     [SI+user_env.user_SI],DI
 36443                                  	;mov	[si+6],dx
 36444 00006510 895406                  	MOV     [SI+user_env.user_DX],DX
 36445 00006513 EB96                    	JMP	short SetCXOK
 36446                                  
 36447                                  SPOOL_OPER:
 36448                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36449                                  
 36450 00006515 50                      	push    ax
 36451 00006516 B82511                  	mov     ax,1125h
 36452 00006519 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36453                                  			; STACK: WORD subfunction
 36454                                  			; Return: CF set on error, AX = error code
 36455                                  			; STACK unchanged
 36456 0000651B 5B                      	pop	bx
 36457                                  	; 17/12/2022
 36458                                  	;JC	short func_err2
 36459 0000651C 7390                    	jnc	short Commit_Okj2
 36460                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36461                                  	;;jmp	SYS_RET_OK
 36462                                  	;jmp	short Commit_Okj2
 36463                                  	
 36464                                  func_err2:
 36465 0000651E E923A1                  	jmp	SYS_RET_ERR
 36466                                  
 36467                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36468                                  ;--------------------------------------------------------------------------
 36469                                  ;
 36470                                  ; Procedure Name : $SetExtendedError
 36471                                  ;
 36472                                  ; $SetExtendedError takes extended error information and loads it up for the
 36473                                  ; next extended error call. This is used by interrupt-level proccessors to
 36474                                  ; mask their actions.
 36475                                  ;
 36476                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36477                                  ;   Outputs: none
 36478                                  ;
 36479                                  ;---------------------------------------------------------------------------
 36480                                  
 36481                                  _$SetExtendedError:
 36482                                  
 36483                                  ;hkn; SS override for all variables used
 36484                                  
 36485 00006521 8B04                    	mov	ax,[si]
 36486                                  	;MOV	AX,[SI+DPL.AX]
 36487 00006523 36A3[2403]              	MOV	[SS:EXTERR],AX
 36488                                  	;mov	ax,[si+10]
 36489 00006527 8B440A                  	MOV	AX,[SI+DPL.DI]
 36490 0000652A 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36491                                  	;mov	ax,[si+14]
 36492 0000652E 8B440E                  	MOV	AX,[SI+DPL.ES]
 36493 00006531 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36494                                  	;mov	ax,[si+2]
 36495 00006535 8B4402                  	MOV	AX,[SI+DPL.BX]
 36496 00006538 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36497                                  	;mov	ax,[si+4]
 36498 0000653C 8B4404                  	MOV	AX,[SI+DPL.CX]
 36499 0000653F 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36500 00006544 C3                      	retn
 36501                                  
 36502                                  ;============================================================================
 36503                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36504                                  ;============================================================================
 36505                                  ; 05/08/2018 - Retro DOS v3.0
 36506                                  ; 05/05/2019 - Retro DOS v4.0
 36507                                  
 36508                                  ;**	Handle related utilities for MSDOS 2.X.
 36509                                  ;----------------------------------------------------------------------------
 36510                                  ;	pJFNFromHandle	written
 36511                                  ;	SFFromHandle	written
 36512                                  ;	SFFromSFN	written
 36513                                  ;	JFNFree 	written
 36514                                  ;	SFNFree 	written
 36515                                  ;
 36516                                  ;	Modification history:
 36517                                  ;
 36518                                  ;	    Created: MZ 1 April 1983
 36519                                  ;----------------------------------------------------------------------------
 36520                                  
 36521                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36522                                  
 36523                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36524                                  ;----------------------------------------------------------------------------
 36525                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36526                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36527                                  ;
 36528                                  ;	NOTE:
 36529                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36530                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36531                                  ;
 36532                                  ;	ENTRY	(bx) = handle
 36533                                  ;	EXIT	'C' clear if ok
 36534                                  ;		  (es:di) = address of JFN value
 36535                                  ;		'C' set if error
 36536                                  ;		  (ax) = error code
 36537                                  ;	USES	AX, DI, ES, Flags
 36538                                  ;----------------------------------------------------------------------------
 36539                                  
 36540                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36541                                  
 36542                                  pJFNFromHandle:
 36543                                  	; 05/05/2019 - Retro DOS v4.0
 36544                                  	;getdseg <es>			; es -> dosdata
 36545 00006545 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36546                                  	
 36547                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36548 0000654A 268E06[3003]            	mov	es,[es:CurrentPDB]
 36549                                  
 36550                                  	;cmp	bx,[ES:32h]
 36551 0000654F 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36552 00006554 7204                    	JB	short pjfn10		; no, get offset
 36553                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36554                                  	;mov	al,6
 36555 00006556 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36556                                  ReturnCarry:
 36557 00006558 F9                      	STC                             ; signal error
 36558 00006559 C3                      	retn				; go back
 36559                                  pjfn10: 
 36560                                  	;les	di,[es:34h]
 36561 0000655A 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36562 0000655F 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36563                                  	;clc
 36564                                  pJFNFromHandle_error:
 36565 00006561 C3                      	retn
 36566                                  
 36567                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36568                                  ;----------------------------------------------------------------------------
 36569                                  ;
 36570                                  ; Procedure Name : SFFromHandle
 36571                                  ;
 36572                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36573                                  ;
 36574                                  ;   Input:      BX has handle
 36575                                  ;   Output:     Carry Set
 36576                                  ;                   AX has error code
 36577                                  ;               Carry Reset
 36578                                  ;                   ES:DI has pointer to SF entry
 36579                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36580                                  ; NOTE:
 36581                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36582                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36583                                  ;
 36584                                  ;----------------------------------------------------------------------------
 36585                                  
 36586                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36587                                  
 36588                                  SFFromHandle:
 36589 00006562 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36590                                  	;retc				; return if error
 36591 00006565 72FA                    	jc	short pJFNFromHandle_error
 36592 00006567 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36593                                  	;JNZ	short GetSF		; nope, suck out SF
 36594                                  	;;mov	al,6
 36595                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36596                                  	;jmp	short ReturnCarry	; signal it
 36597                                  	; 17/12/2022
 36598                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36599 0000656B 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36600                                  	;JNZ	short GetSF		; nope, suck out SF
 36601                                  	;;mov	al,6
 36602                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36603                                  	;jmp	short ReturnCarry	; signal it
 36604                                  GetSF:
 36605 0000656D 53                      	push	bx			; save handle
 36606 0000656E 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36607 00006571 30FF                    	XOR     BH,BH                   ; ignore upper half
 36608 00006573 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36609 00006576 5B                      	pop	bx			; restore
 36610 00006577 C3                      	retn                        	; say goodbye
 36611                                  
 36612                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36613                                  
 36614                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36615                                  ;----------------------------------------------------------------------------
 36616                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36617                                  ;	is more than just a simple index instruction because the SF table
 36618                                  ;	can be made up of multiple pieces chained together. We follow the
 36619                                  ;	chain to the right piece and then do the index operation.
 36620                                  ;
 36621                                  ;   NOTE:
 36622                                  ;	This routine is called from SFFromHandle which is called
 36623                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36624                                  ;
 36625                                  ;	ENTRY	BX has SF index
 36626                                  ;	EXIT	'C' clear if OK
 36627                                  ;		  ES:DI points to SF entry
 36628                                  ;		'C' set if index too large
 36629                                  ;	USES	BX, DI, ES
 36630                                  ;----------------------------------------------------------------------------
 36631                                  
 36632                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36633                                  
 36634                                  SFFromSFN:
 36635                                  	; 05/05/2019 - Retro DOS v4.0
 36636                                  	;getdseg <es>			; es -> dosdata
 36637 00006578 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36638                                  
 36639                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36640 0000657D 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36641                                  sfsfn5:	
 36642                                  	;cmp	bx,[es:di+4]
 36643 00006582 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36644 00006586 720E                    	JB	short sfsfn7		; yes, go grab it
 36645                                  	;sub	bx,[es:di+4]
 36646 00006588 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36647 0000658C 26C43D                  	les	di,[es:di] ; 14/08/2018
 36648                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36649 0000658F 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36650 00006592 75EE                    	JNZ	short sfsfn5		; no, try again
 36651 00006594 F9                      	STC
 36652 00006595 C3                      	retn				; return with error, not found
 36653                                  sfsfn7:
 36654 00006596 50                      	push	ax
 36655                                  	;mov	ax,53 ; MSDOS 3.3
 36656                                  	;mov	ax,59 ; MSDOS 6.0
 36657                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36658                                  	
 36659                                  	; 17/12/2022
 36660 00006597 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36661                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36662                                  	;mov	ax,SF_ENTRY.size ; 59
 36663                                  	
 36664 00006599 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36665 0000659B 01C7                    	ADD	DI,AX			; add base of SF block
 36666 0000659D 58                      	pop	ax
 36667                                  	;add	di,6
 36668 0000659E 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36669 000065A1 C3                      	retn				; return with 'C' clear
 36670                                  
 36671                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36672                                  
 36673                                  ;**	JFNFree - Find a Free JFN Slot
 36674                                  ;----------------------------------------------------------------------------
 36675                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36676                                  ;
 36677                                  ;	ENTRY	(ss) = DOSDATA
 36678                                  ;	EXIT	'C' clear if OK
 36679                                  ;		  (bx) = new handle
 36680                                  ;		  (es:di) = pointer to JFN slot
 36681                                  ;		'C' set if error
 36682                                  ;		  (al) = error code
 36683                                  ;	USES	bx, di, es, flags
 36684                                  ;----------------------------------------------------------------------------
 36685                                  
 36686                                  JFNFree:
 36687 000065A2 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36688                                  jfnf1:	
 36689 000065A4 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36690 000065A7 7209                    	JC	short jfnf5		; no more handles
 36691 000065A9 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36692 000065AD 7405                    	je	short jfnfx		; yes, carry is clear
 36693 000065AF 43                      	INC     BX                      ; no, next handle
 36694 000065B0 EBF2                    	JMP	short jfnf1		; and try again
 36695                                  
 36696                                  	; Error. 'C' set
 36697                                  jfnf5:	
 36698                                  	;mov	al,4
 36699 000065B2 B004                    	MOV	AL,error_too_many_open_files
 36700                                  jfnfx:	
 36701 000065B4 C3                      	retn				; bye
 36702                                  
 36703                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36704                                  
 36705                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36706                                  ;----------------------------------------------------------------------------
 36707                                  ;	SFNFree scans through the sf table looking for a free entry
 36708                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36709                                  ;
 36710                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36711                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36712                                  ;	we can't just mark it busy because we may get blown out of our open
 36713                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36714                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36715                                  ;	an SFT with this value we look to see if it belongs to this user
 36716                                  ;	and process.  If it does belong to us then it must be an orphan
 36717                                  ;	and we reclaim it.
 36718                                  ;
 36719                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36720                                  ;		over and over, but we could at least set a high water mark...
 36721                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36722                                  ;		even though this is not a frequently called routine - jgl
 36723                                  ;
 36724                                  ;	ENTRY	(ss) = DOSDATA
 36725                                  ;	EXIT	'C' clear if no error
 36726                                  ;		  (bx) = SFN
 36727                                  ;		  (es:di) = pointer to SFT
 36728                                  ;		  es:[di].SFT_REF_COUNT = -1
 36729                                  ;		'C' set if error
 36730                                  ;		  (al) = error code
 36731                                  ;	USES	bx, di, es, Flags
 36732                                  ;----------------------------------------------------------------------------
 36733                                  
 36734                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36735                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36736                                  
 36737                                  SFNFree:
 36738                                  	; 12/08/2018
 36739                                  	; 05/08/2018 - Retro DOS v3.0
 36740                                  	;
 36741                                  	; MSDOS 6.0
 36742 000065B5 50                      	push	ax
 36743 000065B6 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36744                                  sfnf5:	
 36745 000065B8 53                      	push	bx
 36746 000065B9 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36747 000065BC 5B                      	pop	bx
 36748 000065BD 723A                    	jc	short sfnf95		; no more free SFNs
 36749 000065BF 26833D00                	cmp	word [ES:DI],0
 36750                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36751 000065C3 741D                    	je	short sfnf20			; yep, got one
 36752                                  	
 36753                                  	;cmp	word [es:di],0FFFFh ; -1
 36754 000065C5 26833DFF                	cmp	word [ES:DI],sf_busy
 36755                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36756 000065C9 7403                    	je	short sfnf10		; special busy mark
 36757                                  sfnf7:	
 36758 000065CB 43                      	inc	bx			; try the next one
 36759 000065CC EBEA                    	jmp	short sfnf5
 36760                                  
 36761                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36762                                  ;	it was abandoned during a earlier call and we can use it.
 36763                                  ;
 36764                                  ;	(bx)	= SFN
 36765                                  ;	(es:di) = pointer to SFT
 36766                                  ;	(TOS)	= caller's (ax)
 36767                                  
 36768                                  sfnf10:	
 36769 000065CE 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36770                                  	;cmp	[es:di+2Fh],ax
 36771 000065D2 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36772 000065D6 75F3                    	jnz	short sfnf7		; not ours
 36773 000065D8 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36774                                  	;cmp	[es:di+31h],ax
 36775 000065DC 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36776 000065E0 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36777                                  
 36778                                  ;	We have an SFT to allocate
 36779                                  ;
 36780                                  ;	(bx)	= SFN
 36781                                  ;	(es:di) = pointer to SFT
 36782                                  ;	(TOS)	= caller's (ax)
 36783                                  
 36784                                  sfnf20:
 36785                                  	; cf = 0 ;; Retro DOS v3.0
 36786                                  
 36787                                  	;mov	word [es:di],0FFFFh
 36788 000065E2 26C705FFFF              	mov	word [ES:DI],sf_busy
 36789                                  					; make sure that this is allocated
 36790                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36791                                  
 36792 000065E7 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36793                                  	;mov	[es:di+2Fh],ax
 36794 000065EB 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36795 000065EF 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36796                                  	;mov	[es:di+31h],ax
 36797 000065F3 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36798                                  sfnf21: ;; Retro DOS v3.0
 36799                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36800                                  	;pop	ax
 36801                                  	;;clc
 36802                                  	;retn				; return with no error
 36803                                  	; 17/12/2022
 36804 000065F7 58                      	pop	ax
 36805                                  	;clc
 36806 000065F8 C3                      	retn
 36807                                  
 36808                                  ;**	Error - no more free SFNs
 36809                                  ;
 36810                                  ;	'C' set
 36811                                  ;	(TOS) = saved ax
 36812                                  
 36813                                  sfnf95: 
 36814 000065F9 58                      	pop	ax
 36815                                  	;mov	al,4
 36816 000065FA B004                    	mov	al,error_too_many_open_files
 36817 000065FC C3                      	retn				; return with 'C' and error
 36818                                  
 36819                                  ;============================================================================
 36820                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36821                                  ;============================================================================
 36822                                  ; 13/07/2018 - Retro DOS v3.0
 36823                                  ; 20/05/2019 - Retro DOS v4.0
 36824                                  
 36825                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36826                                  
 36827                                  ;	BREAK <$Close - return a handle to the system>
 36828                                  ;----------------------------------------------------------------------------
 36829                                  ;
 36830                                  ;**	$Close - Close a file Handle
 36831                                  ;
 36832                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36833                                  ;		path
 36834                                  ;
 36835                                  ;	Assembler usage:
 36836                                  ;	    MOV     BX, handle
 36837                                  ;	    MOV     AH, Close
 36838                                  ;	    INT     int_command
 36839                                  ;
 36840                                  ;	ENTRY	(bx) = handle
 36841                                  ;	EXIT	<normal INT21 return convention>
 36842                                  ;	USES	all
 36843                                  ;
 36844                                  ;----------------------------------------------------------------------------
 36845                                  
 36846                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36847                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36848                                  
 36849                                  _$CLOSE:
 36850                                  ;	Grab the SFT pointer from the JFN.
 36851                                  
 36852 000065FD E85A02                  	call	CheckOwner		; get system file entry
 36853 00006600 722B                    	jc	short CloseError	; error return
 36854 00006602 16                      	push	ss
 36855 00006603 1F                      	pop	ds			; For DOS_CLOSE
 36856 00006604 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36857 00006608 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36858                                  
 36859                                  ; DS:SI point to JFN table entry.
 36860                                  ; ES:DI point to SFT
 36861                                  ;
 36862                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36863                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36864                                  ; If the file was not a net FCB, we free the JFN too.
 36865                                  
 36866                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36867 0000660C 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36868 00006610 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36869                                  	;mov	al,[ES:DI+2]
 36870 00006612 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36871                                  	;and	al,0F0h
 36872 00006616 24F0                    	AND	AL,SHARING_MASK
 36873                                  	;cmp	al,70h
 36874 00006618 3C70                    	CMP	AL,SHARING_NET_FCB
 36875 0000661A 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36876                                  
 36877                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36878                                  ; -1.
 36879                                  
 36880                                  FreeJFN:
 36881 0000661C E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36882 0000661F 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36883                                  PostFree:
 36884                                  
 36885                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36886                                  
 36887 00006623 E88AC8                  	call	DOS_CLOSE
 36888                                  
 36889                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36890                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36891                                  
 36892 00006626 7205                    	JC	short CloseError
 36893                                  	;mov	ah,3Eh
 36894 00006628 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36895                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36896                                  CloseOk:
 36897 0000662A E90EA0                  	jmp	SYS_RET_OK
 36898                                  CloseError:
 36899 0000662D E914A0                  	jmp	SYS_RET_ERR
 36900                                  
 36901                                  ;	BREAK <$Commit - commit the file>
 36902                                  ;----------------------------------------------------------------------------
 36903                                  ;
 36904                                  ;**	$Commit - Commit a File
 36905                                  ;
 36906                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36907                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36908                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36909                                  ;	and fix this!! jgl
 36910                                  ;
 36911                                  ;	Assembler usage:
 36912                                  ;	    MOV     BX, handle
 36913                                  ;	    MOV     AH, Commit
 36914                                  ;	    INT     int_command
 36915                                  ;
 36916                                  ;	ENTRY	(bx) = handle
 36917                                  ;	EXIT	none
 36918                                  ;	USES	all
 36919                                  ;;----------------------------------------------------------------------------
 36920                                  
 36921                                  _$COMMIT:
 36922                                  ;	Grab the SFT pointer from the JFN.
 36923                                  
 36924 00006630 E82702                  	call	CheckOwner		; get system file entry
 36925 00006633 7213                    	JC	short CommitError	; error return
 36926 00006635 16                      	push	ss
 36927 00006636 1F                      	pop	ds			; For DOS_COMMIT
 36928 00006637 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36929 0000663B 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36930                                  
 36931                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36932                                  ;
 36933                                  ;	ES:DI point to SFT
 36934                                  
 36935 0000663F E8B0C9                  	call	DOS_COMMIT
 36936 00006642 7204                    	JC	short CommitError
 36937                                  	; 07/12/2022
 36938                                  	;jc	short CloseError
 36939                                  	;mov	ah,68h
 36940 00006644 B468                    	MOV	AH,COMMIT
 36941                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36942                                  	;jmp	SYS_RET_OK
 36943                                  CommitOk:
 36944 00006646 EBE2                    	jmp	short CloseOk	
 36945                                  
 36946                                  CommitError:
 36947                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36948                                  	;jmp	SYS_RET_ERR
 36949 00006648 EBE3                    	jmp	short CloseError
 36950                                  
 36951                                  ;	BREAK <$ExtHandle - extend handle count>
 36952                                  
 36953                                  ;**	$ExtHandle - Extend Handle Count
 36954                                  ;----------------------------------------------------------------------------
 36955                                  ;	Assembler usage:
 36956                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36957                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36958                                  ;	    INT     int_command 		 busy )
 36959                                  ;
 36960                                  ;	ENTRY	(bx) = new number of handles
 36961                                  ;	EXIT	'C' clear if OK
 36962                                  ;		'C' set iff err
 36963                                  ;		  (ax) = error code
 36964                                  ;			 AX = error_not_enough_memory
 36965                                  ;			      error_too_many_open_files
 36966                                  ;	USES	all
 36967                                  ;----------------------------------------------------------------------------
 36968                                  
 36969                                  _$ExtHandle:
 36970 0000664A 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36971                                  	;cmp	bx,20
 36972 0000664C 83FB14                  	CMP	BX,FILPERPROC
 36973 0000664F 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36974 00006651 BB1400                  	MOV	BX,FILPERPROC
 36975                                  exth2:	
 36976 00006654 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36977                                  	;mov	cx,[ES:32h]
 36978 00006659 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36979 0000665E 39CB                    	CMP	BX,CX			; the requested == current
 36980 00006660 7455                    	JE	short ok_done 		; yes and exit
 36981 00006662 7722                    	JA	short larger		; go allocate new table
 36982                                  
 36983                                  ;	We're going to shrink the # of handles available
 36984                                  
 36985 00006664 BD0100                  	MOV	BP,1			; shrink
 36986                                  	;mov	ds,[ES:36h]
 36987 00006667 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36988 0000666C 89DE                    	MOV	SI,BX			;
 36989 0000666E 29D9                    	SUB	CX,BX			; get difference
 36990                                  
 36991                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36992                                  chck_handles:
 36993 00006670 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36994 00006673 753D                    	JNZ	short too_many_files	; status
 36995 00006675 46                      	INC	SI
 36996 00006676 E2F8                    	LOOP	chck_handles
 36997 00006678 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36998 0000667B 7709                    	JA	short larger		; no
 36999                                  
 37000 0000667D BD0200                  	MOV	BP,2			; psp
 37001                                  	;mov	di,24
 37002 00006680 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37003 00006683 53                      	PUSH	BX
 37004 00006684 EB1D                    	JMP	short movhandl
 37005                                  
 37006                                  larger:
 37007 00006686 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37008 00006689 747F                    	JZ	short invalid_func	; 10/08/2018
 37009 0000668B F8                      	CLC
 37010 0000668C 53                      	PUSH	BX			; save requested number
 37011 0000668D 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37012 00006690 B104                    	MOV	CL,4
 37013                                  	;ror	bx,cl			; MSDOS 3.3
 37014 00006692 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37015 00006694 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 37016                                  
 37017 00006698 55                      	PUSH	BP
 37018 00006699 E8DCFA                  	call	_$ALLOC			; allocate memory
 37019 0000669C 5D                      	POP	BP
 37020 0000669D 7266                    	JC	short no_memory		; not enough meory
 37021                                  
 37022 0000669F 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37023 000066A1 31FF                    	XOR	DI,DI
 37024                                  movhandl:
 37025 000066A3 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37026                                  
 37027 000066A8 F7C50300                	test	BP,3			; enlarge ?
 37028 000066AC 740C                    	JZ	short enlarge 		; yes
 37029 000066AE 59                      	POP	CX			; cx = the amount you shrink
 37030 000066AF 51                      	PUSH	CX
 37031 000066B0 EB0C                    	JMP	short copy_hand
 37032                                  
 37033                                  ;	Done.  'C' clear
 37034                                  
 37035                                  ; 17/12/2022
 37036                                  ;ok_done:
 37037                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37038                                  ;	;jmp	short CommitOk
 37039                                  ;	; 17/12/2022
 37040                                  ;	jmp	SYS_RET_OK
 37041                                  
 37042                                  too_many_files:
 37043                                  	;mov	al,4
 37044 000066B2 B004                    	MOV	AL,error_too_many_open_files
 37045                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37046                                  	;jmp	SYS_RET_ERR
 37047                                  CommitErrorj:
 37048                                  	;jmp	short CommitError
 37049                                  	; 17/12/2022
 37050 000066B4 E98D9F                  	jmp	SYS_RET_ERR
 37051                                  
 37052                                  ; 17/12/2022 
 37053                                  ok_done:
 37054                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37055                                  	;jmp	short CommitOk
 37056                                  	; 17/12/2022
 37057 000066B7 E9819F                  	jmp	SYS_RET_OK
 37058                                  
 37059                                  enlarge:
 37060                                  	;mov	cx,[32h]
 37061 000066BA 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37062                                  copy_hand:
 37063 000066BE 89CA                    	MOV	DX,CX
 37064                                  	;lds	si,[34h]
 37065 000066C0 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37066 000066C4 F3A4                    	REP	MOVSB			; copy infomation to new table
 37067 000066C6 59                      	POP	CX			; get new number of handles
 37068 000066C7 51                      	PUSH	CX			; save it again
 37069 000066C8 29D1                    	SUB	CX,DX			; get the difference
 37070 000066CA B0FF                    	MOV	AL,-1			; set availability to handles
 37071 000066CC F3AA                    	REP	STOSB
 37072 000066CE 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37073                                  	;cmp	word [34h],0
 37074 000066D3 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37075 000066D8 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37076 000066DA 55                      	PUSH	BP
 37077 000066DB 1E                      	PUSH	DS			; save old table segment
 37078 000066DC 06                      	PUSH	ES			; save new table segment
 37079 000066DD 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37080 000066E1 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 37081 000066E4 07                      	POP	ES			; restore new table segment
 37082 000066E5 1F                      	POP	DS			; restore old table segment
 37083 000066E6 5D                      	POP	BP
 37084                                  
 37085                                  update_info:
 37086 000066E7 F7C50200                	test	BP,2			; psp?
 37087 000066EB 7408                    	JZ	short non_psp 		; no
 37088                                  	;mov	word [34h],18h ; 24
 37089 000066ED C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37090 000066F3 EB06                    	JMP	short final
 37091                                  non_psp:
 37092                                  	;mov	word [34h],0
 37093 000066F5 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37094                                  final:
 37095                                  	;mov	[36h],es	
 37096 000066FB 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37097                                  	;pop	word [32h]
 37098 000066FF 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37099                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37100                                  	;jmp	SYS_RET_OK
 37101                                  ok_done_j:
 37102 00006703 EBB2                    	jmp	short ok_done
 37103                                  
 37104                                  no_memory:
 37105 00006705 5B                      	POP	BX			; clean stack
 37106                                  	;mov	al,8
 37107 00006706 B008                    	MOV	AL,error_not_enough_memory
 37108                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37109                                  	;jmp	SYS_RET_ERR
 37110                                  CommitErrorj2:
 37111 00006708 EBAA                    	jmp	short CommitErrorj
 37112                                  
 37113                                  invalid_func:
 37114                                  	;mov	al,1
 37115 0000670A B001                    	MOV	AL,error_invalid_function
 37116                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37117                                  	;jmp	SYS_RET_ERR
 37118                                  CommitErrorj3:
 37119                                  	;jmp	short CommitErrorj2
 37120                                  	; 17/12/2022
 37121 0000670C EBA6                    	jmp	short CommitErrorj
 37122                                  
 37123                                  ; 20/05/2019 - Retro DOS v4.0
 37124                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37125                                  
 37126                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37127                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37128                                  
 37129                                  ;	BREAK <$READ - Read from a file handle>
 37130                                  ;----------------------------------------------------------------------------
 37131                                  ;
 37132                                  ;**	$Read - Read from a File Handle
 37133                                  ;
 37134                                  ;   Assembler usage:
 37135                                  ;
 37136                                  ;	LDS	DX, buf
 37137                                  ;	MOV	CX, count
 37138                                  ;	MOV	BX, handle
 37139                                  ;	MOV	AH, Read
 37140                                  ;	INT	int_command
 37141                                  ;	  AX has number of bytes read
 37142                                  ;
 37143                                  ;	ENTRY	(bx) = file handle
 37144                                  ;		(cx) = byte count
 37145                                  ;		(ds:dx) = buffer address
 37146                                  ;	EXIT	Through system call return so that to user:
 37147                                  ;		  'C' clear if OK
 37148                                  ;		    (ax) = bytes read
 37149                                  ;		  'C' set if error
 37150                                  ;		    (ax) = error code
 37151                                  ;
 37152                                  ;----------------------------------------------------------------------------
 37153                                  
 37154                                  _$READ:
 37155 0000670E BE[4432]                	MOV	SI,DOS_READ
 37156                                  ReadDo:
 37157 00006711 E831FE                  	call	pJFNFromHandle
 37158 00006714 7208                    	JC	short ReadError
 37159                                  
 37160 00006716 268A05                  	MOV	AL,[ES:DI]
 37161 00006719 E83E01                  	call	CheckOwner		; get the handle
 37162 0000671C 7303                    	JNC	short ReadSetup		; no errors do the operation
 37163                                  
 37164                                  ;	Have an error. 'C' set
 37165                                  
 37166                                  ReadError:
 37167                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37168                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37169                                  	;jmp	short CommitErrorj3
 37170                                  	; 17/12/2022
 37171 0000671E E9239F                  	jmp	SYS_RET_ERR
 37172                                  
 37173                                  ReadSetup:
 37174 00006721 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37175 00006726 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37176                                  	; 20/05/2019 - Retro DOS v4.0
 37177                                  	; MSDOS 6.0 
 37178                                  ;; Extended Open
 37179                                  	;test	byte [es:di+3],20h
 37180 0000672B 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37181                                  						 ;AN000;;EO. need i24
 37182 00006730 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37183 00006732 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37184                                  					;AN000;;EO. set it off;smr;SS Override
 37185                                  needi24:				;AN000;
 37186                                  ;; Extended Open
 37187 00006738 36FF36[2C03]            	push	word [SS:DMAADD]
 37188 0000673D 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 37189                                  
 37190                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37191                                  
 37192                                  	; 26/07/2019
 37193                                  
 37194                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37195                                  	;
 37196                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37197                                  	; there is not another caller; it is better to put the code in this proc
 37198                                   	; here instead of calling it as a subroutine; but I have modified code
 37199                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37200                                  
 37201                                  	; MSDOS 6.0
 37202 00006742 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37203                                  	
 37204                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37205                                  	; MSDOS 3.3
 37206                                  	;MOV	BX,DX			; copy offset
 37207                                  	;push	cx			; don't stomp on count
 37208                                  	;MOV	CL,4			; bits to shift bytes->para
 37209                                  	;SHR	BX,CL			; get number of paragraphs
 37210                                  	;pop	cx			; get count back
 37211                                  	;MOV	AX,DS			; get original segment
 37212                                  	;ADD	AX,BX			; get new segment
 37213                                  	;MOV	DS,AX			; in seg register
 37214                                  	;AND	DX,0Fh			; normalize offset
 37215                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37216                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37217                                  						;smr;SS Override
 37218                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37219                                  	
 37220 00006745 16                      	push	ss			; go for DOS addressability
 37221 00006746 1F                      	pop	ds
 37222                                  
 37223 00006747 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37224                                  
 37225 00006749 8F06[2E03]              	pop	word [DMAADD+2]
 37226 0000674D 8F06[2C03]              	pop	word [DMAADD]
 37227                                  	;JNC	short READ_OK		;AN002;
 37228                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37229                                  	; 17/12/2022
 37230 00006751 72CB                    	jc	short ReadError
 37231                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37232                                  	;jnc	short READ_OK		;AN002;
 37233                                  	;jmp	short ReadError
 37234                                  
 37235                                  READ_OK:
 37236 00006753 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37237                                  Read_Okj:
 37238                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37239                                  	;;jmp	SYS_RET_OK		; successful return
 37240                                  	;jmp	short ok_done_j
 37241                                  	; 17/12/2022
 37242 00006755 E9E39E                  	jmp	SYS_RET_OK
 37243                                  
 37244                                  ; 13/07/2018 - Retro DOS v3.0
 37245                                  
 37246                                  ;----------------------------------------------------------------------------
 37247                                  
 37248                                  ;   Input: DS:DX points to user's buffer addr
 37249                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37250                                  ;   Output: [DMAADD] set
 37251                                  
 37252                                  ; 20/05/2019 - Retro DOS v4.0
 37253                                  ; 26/07/2019
 37254                                  ;	; MSDOS 6.0
 37255                                  ;Align_Buffer:
 37256                                  ;	MOV	BX,DX			; copy offset
 37257                                  ;	push	cx			; don't stomp on count
 37258                                  ;	MOV	CL,4			; bits to shift bytes->para
 37259                                  ;	SHR	BX,CL			; get number of paragraphs
 37260                                  ;	pop	cx			; get count back
 37261                                  ;	MOV	AX,DS			; get original segment
 37262                                  ;	ADD	AX,BX			; get new segment
 37263                                  ;	MOV	DS,AX			; in seg register
 37264                                  ;	AND	DX,0Fh			; normalize offset
 37265                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37266                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37267                                  ;						;smr;SS Override
 37268                                  ;	retn
 37269                                  
 37270                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37271                                  Align_Buffer:
 37272 00006758 89D3                    	MOV	BX,DX			; copy offset
 37273 0000675A 51                      	push	cx			; don't stomp on count
 37274 0000675B B104                    	MOV	CL,4			; bits to shift bytes->para
 37275 0000675D D3EB                    	SHR	BX,CL			; get number of paragraphs
 37276 0000675F 59                      	pop	cx			; get count back
 37277 00006760 8CD8                    	MOV	AX,DS			; get original segment
 37278 00006762 01D8                    	ADD	AX,BX			; get new segment
 37279 00006764 8ED8                    	MOV	DS,AX			; in seg register
 37280 00006766 83E20F                  	AND	DX,0Fh			; normalize offset
 37281 00006769 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37282 0000676E 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37283                                  						;smr;SS Override
 37284 00006773 C3                      	retn
 37285                                  
 37286                                  ; 20/05/2019 - Retro DOS v4.0
 37287                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37288                                  
 37289                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37290                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37291                                  
 37292                                  ;BREAK <$WRITE - write to a file handle>
 37293                                  ;----------------------------------------------------------------------------
 37294                                  ;
 37295                                  ;   Assembler usage:
 37296                                  ;	    LDS     DX, buf
 37297                                  ;	    MOV     CX, count
 37298                                  ;	    MOV     BX, handle
 37299                                  ;	    MOV     AH, Write
 37300                                  ;	    INT     int_command
 37301                                  ;	  AX has number of bytes written
 37302                                  ;   Errors:
 37303                                  ;	    AX = write_invalid_handle
 37304                                  ;	       = write_access_denied
 37305                                  ;
 37306                                  ;   Returns in register AX
 37307                                  ;
 37308                                  ;----------------------------------------------------------------------------
 37309                                  
 37310                                  _$WRITE:
 37311 00006774 BE[4534]                	MOV	SI,DOS_WRITE
 37312 00006777 EB98                    	JMP	short ReadDo
 37313                                  
 37314                                  ;BREAK <$LSEEK - move r/w pointer>
 37315                                  ;----------------------------------------------------------------------------
 37316                                  ;
 37317                                  ;   Assembler usage:
 37318                                  ;	    MOV     DX, offsetlow
 37319                                  ;	    MOV     CX, offsethigh
 37320                                  ;	    MOV     BX, handle
 37321                                  ;	    MOV     AL, method
 37322                                  ;	    MOV     AH, LSeek
 37323                                  ;	    INT     int_command
 37324                                  ;	  DX:AX has the new location of the pointer
 37325                                  ;   Error returns:
 37326                                  ;	    AX = error_invalid_handle
 37327                                  ;	       = error_invalid_function
 37328                                  ;   Returns in registers DX:AX
 37329                                  ;
 37330                                  ;----------------------------------------------------------------------------
 37331                                  
 37332                                  ; 21/05/2019 - Retro DOS v4.0
 37333                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37334                                  
 37335                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37336                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37337                                  
 37338                                  _$LSEEK:
 37339 00006779 E8DE00                  	call	CheckOwner		; get system file entry
 37340                                  
 37341                                  	; 17/12/2022
 37342                                  ;LSeekError:
 37343                                  	;JNC	short CHKOWN_OK		;AN002;
 37344                                  	;JMP	short ReadError		;AN002; error return
 37345                                  	; 17/12/2022
 37346                                  	; 02/06/2019
 37347 0000677C 72A0                    	jc	short ReadError
 37348                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37349                                  	;JNC	short CHKOWN_OK		;AN002;
 37350                                  	;JMP	short ReadError		;AN002; error return
 37351                                  
 37352                                  CHKOWN_OK:
 37353                                  					;AN002;
 37354 0000677E 3C02                    	CMP	AL,2			; is the seek value correct?
 37355 00006780 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37356                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37357 00006782 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37358                                  					;smr;SS Override
 37359                                  	;mov	al,1
 37360 00006788 B001                    	mov	al,error_invalid_function ; invalid method
 37361                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37362                                  LSeekError2:
 37363 0000678A EB92                    	jmp	short ReadError
 37364                                  
 37365                                  LSeekDisp:
 37366 0000678C 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37367 0000678E 720A                    	JB	short LSeekStore	; just store CX:DX
 37368 00006790 771B                    	JA	short LSeekEOF		; seek from end of file
 37369                                  	;add	dx,[es:di+21]
 37370 00006792 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37371                                  	;adc	cx,[es:di+23]
 37372 00006796 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37373                                  LSeekStore:
 37374 0000679A 89C8                    	MOV	AX,CX			; AX:DX
 37375 0000679C 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37376                                  LSeekSetpos:
 37377                                  	;mov	[es:di+21],ax
 37378 0000679D 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37379                                  	;mov	[es:di+23],dx
 37380 000067A1 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37381 000067A5 E8DD9C                  	call	Get_User_Stack
 37382                                  	;mov	[si+6],dx
 37383 000067A8 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37384                                  	;jmp	SYS_RET_OK		; successful return
 37385                                  	; 25/06/2019
 37386                                  	;jmp	SYS_RET_OK_clc
 37387                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37388                                  	;jmp	SYS_RET_OK_clc
 37389                                  LSeekOk:
 37390 000067AB EBA8                    	jmp     short Read_Okj
 37391                                  
 37392                                  LSeekEOF:
 37393                                  	;;test	word [es:di+5],8000h
 37394                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37395                                  	; 21/05/2019 - Retro DOS v4.0
 37396 000067AD 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37397 000067B2 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37398                                  LOCAL_LSeek:
 37399                                  	;add	dx,[es:di+17]
 37400 000067B4 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37401                                  	;adc	cx,[es:di+19]
 37402 000067B8 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37403 000067BC EBDC                    	JMP	short LSeekStore	; go and set the position
 37404                                  
 37405                                  Check_LSeek_Mode:
 37406                                  	;;test	word [es:di+2],8000h
 37407                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37408                                  	; 21/05/2019
 37409 000067BE 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37410 000067C3 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37411                                  	;mov	ax,[es:di+2]
 37412 000067C5 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37413                                  	;and	ax, 0F0h
 37414 000067C9 25F000                  	AND	AX,SHARING_MASK
 37415                                  	;cmp	ax,40h
 37416 000067CC 83F840                  	CMP	AX,SHARING_DENY_NONE
 37417 000067CF 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37418                                  	;cmp	ax,30h
 37419 000067D1 83F830                  	CMP	AX,SHARING_DENY_READ
 37420 000067D4 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37421                                  NET_LSEEK:
 37422                                  ;	JMP	short LOCAL_LSeek
 37423                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37424                                  	;CallInstall Net_Lseek,MultNET,33
 37425                                  	;JNC	short LSeekSetPos
 37426                                  
 37427 000067D6 B82111                  	mov     ax,1121h
 37428 000067D9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37429                                  			; CX:DX = offset (in bytes) from end
 37430                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37431                                  			; SS = DOS CS
 37432                                  			; Return: CF set on error
 37433                                  			; CF clear if successful, DX:AX = new file position
 37434 000067DB 73C0                    	jnb     short LSeekSetpos
 37435                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37436                                  	;jmp	SYS_RET_ERR
 37437                                  ;LSeekError3:
 37438                                  	; 17/12/2022
 37439                                  LSeekError:
 37440                                  	;jmp	short LSeekError2
 37441                                  DupErr:	; 17/12/2022
 37442 000067DD E9649E                  	jmp	SYS_RET_ERR
 37443                                  
 37444                                  ;BREAK <FileTimes - modify write times on a handle>
 37445                                  ;----------------------------------------------------------------------------
 37446                                  ;
 37447                                  ;   Assembler usage:
 37448                                  ;	    MOV AH, FileTimes (57H)
 37449                                  ;	    MOV AL, func
 37450                                  ;	    MOV BX, handle
 37451                                  ;	; if AL = 1 then then next two are mandatory
 37452                                  ;	    MOV CX, time
 37453                                  ;	    MOV DX, date
 37454                                  ;	    INT 21h
 37455                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37456                                  ;	; for the handle.
 37457                                  ;
 37458                                  ;	AL=02		 get extended attributes
 37459                                  ;	   BX=handle
 37460                                  ;	   CX=size of buffer (0, return max size )
 37461                                  ;	   DS:SI query list (si=-1, selects all EA)
 37462                                  ;	   ES:DI buffer to hold EA list
 37463                                  ;
 37464                                  ;	AL=03		 get EA name list
 37465                                  ;	   BX=handle
 37466                                  ;	   CX=size of buffer (0, return max size )
 37467                                  ;	   ES:DI buffer to hold name list
 37468                                  ;
 37469                                  ;	AL=04		 set extended attributes
 37470                                  ;	   BX=handle
 37471                                  ;	   ES:DI buffer of EA list
 37472                                  ;
 37473                                  ;
 37474                                  ;   Error returns:
 37475                                  ;	    AX = error_invalid_function
 37476                                  ;	       = error_invalid_handle
 37477                                  ;
 37478                                  ;----------------------------------------------------------------------------
 37479                                  
 37480                                  ; 21/05/2019 - Retro DOS v4.0
 37481                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37482                                  
 37483                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37484                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37485                                  
 37486                                  _$FILE_TIMES:
 37487                                  	; 13/07/2018 - Retro DOS v3.0
 37488                                  
 37489                                  	; MSDOS 3.3
 37490                                  	;cmp	al,2			; correct subfunction ?
 37491                                  	;jb	short ft1
 37492                                  
 37493                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37494                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37495                                  						;SS Overr
 37496                                  	;;mov	al,1
 37497                                  	;mov	al,error_invalid_function ; give bad return
 37498                                  	;jmp	SYS_RET_ERR
 37499                                  
 37500                                  	; MSDOS 6.0
 37501 000067E0 3C02                    	cmp	al,2			; correct subfunction ?
 37502 000067E2 7340                    	jae	short inval_func
 37503                                  ;ft1:
 37504 000067E4 E87300                  	call	CheckOwner		; get sft
 37505                                  	; 17/12/2022
 37506 000067E7 72F4                    	jc	short LSeekError	; bad handle
 37507                                  
 37508 000067E9 08C0                    	or	al,al			; get time/date ?
 37509 000067EB 7515                    	jnz	short ft_set_time
 37510                                  
 37511                                  ;------ here we get the time & date from the sft for the user
 37512                                  
 37513 000067ED FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37514                                  	;mov	cx,[es:di+13]
 37515 000067EE 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37516                                  	;mov	dx,[es:di+15]
 37517 000067F2 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37518 000067F6 FB                      	sti
 37519 000067F7 E88B9C                  	call	Get_User_Stack
 37520                                  	;mov	[si+4],cx
 37521 000067FA 894C04                  	mov	[si+user_env.user_CX],cx
 37522                                  	;mov	[si+6],dx
 37523 000067FD 895406                  	mov	[si+user_env.user_DX],dx
 37524 00006800 EB1F                    	jmp	short ok_ret
 37525                                  
 37526                                  ;------ here we set the time in sft
 37527                                  
 37528                                  ft_set_time:
 37529 00006802 E8F3AA                  	call    ECritSFT
 37530                                  	;mov	[es:di+13],cx
 37531 00006805 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37532                                  	;mov	[es:di+15],dx
 37533 00006809 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37534                                  
 37535 0000680D 31C0                    	xor	ax, ax
 37536 0000680F 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37537                                  
 37538                                  ;------ set the flags in SFT entry
 37539                                  	;and	word [es:di+5],0FFBFh
 37540                                  	; 18/12/2022
 37541                                  	;and	byte [es:di+5],0BFh
 37542 00006814 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37543                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37544                                  							; mark file as dirty
 37545                                  	;or	word [es:di+5],4000h
 37546                                  	; 17/12/2022
 37547                                  	;or	byte [es:di+6],40h
 37548 00006819 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37549                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37550                                  							; ask close not to
 37551                                  							;   bother about date
 37552                                  							;   and time
 37553 0000681E E8F2AA                  	call	LCritSFT
 37554                                  ok_ret:
 37555                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37556                                  	; 17/12/2022
 37557 00006821 E9179E                  	jmp	SYS_RET_OK
 37558                                  	;jmp	short LSeekOk
 37559                                  
 37560                                  inval_func:
 37561                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37562 00006824 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37563                                  						;SS Overr
 37564                                  	;mov	al,1
 37565 0000682A B001                    	mov	al,error_invalid_function ; give bad return
 37566                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37567                                  ft_error:
 37568                                  	;;jmp	SYS_RET_ERR
 37569                                  	;jmp	short LSeekError3
 37570                                  	; 17/12/2022
 37571 0000682C EBAF                    	jmp	short LSeekError
 37572                                  
 37573                                  ; 21/05/2019 - Retro DOS v4.0
 37574                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37575                                  
 37576                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37577                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37578                                  
 37579                                  ;BREAK <$DUP - duplicate a jfn>
 37580                                  ;----------------------------------------------------------------------------
 37581                                  ;
 37582                                  ;   Assembler usage:
 37583                                  ;	    MOV     BX, fh
 37584                                  ;	    MOV     AH, Dup
 37585                                  ;	    INT     int_command
 37586                                  ;	  AX has the returned handle
 37587                                  ;   Errors:
 37588                                  ;	    AX = dup_invalid_handle
 37589                                  ;	       = dup_too_many_open_files
 37590                                  ;
 37591                                  ;----------------------------------------------------------------------------
 37592                                  
 37593                                  _$DUP:
 37594 0000682E 89D8                    	MOV	AX,BX			; save away old handle in AX
 37595 00006830 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37596                                  DupErrorCheck:
 37597 00006833 72A8                    	JC	short DupErr		; nope, bye
 37598 00006835 06                      	push	es
 37599 00006836 57                      	push	di			; save away SFT
 37600 00006837 5E                      	pop	si			; into convenient place DS:SI
 37601 00006838 1F                      	pop	ds
 37602 00006839 93                      	XCHG	AX,BX			; get back old handle
 37603 0000683A E81D00                  	call	CheckOwner		; get sft in ES:DI
 37604 0000683D 729E                    	JC	short DupErr		; errors go home
 37605 0000683F E886C1                  	call	DOS_Dup_Direct
 37606 00006842 E800FD                  	call	pJFNFromHandle		; get pointer
 37607 00006845 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37608 00006848 881C                    	MOV	[SI],BL			; stuff in new SFT
 37609                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37610                                  	;jmp	SYS_RET_OK		; and go home
 37611 0000684A EBD5                    	jmp	short ok_ret
 37612                                  
 37613                                  	; 17/12/2022
 37614                                  ;DupErr:
 37615                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37616                                  	;;jmp	SYS_RET_ERR
 37617                                  	;jmp	short ft_error
 37618                                  
 37619                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37620                                  ;----------------------------------------------------------------------------
 37621                                  ;
 37622                                  ;   Assembler usage:
 37623                                  ;	    MOV     BX, fh
 37624                                  ;	    MOV     CX, newfh
 37625                                  ;	    MOV     AH, Dup2
 37626                                  ;	    INT     int_command
 37627                                  ;   Error returns:
 37628                                  ;	    AX = error_invalid_handle
 37629                                  ;
 37630                                  ;----------------------------------------------------------------------------
 37631                                  
 37632                                  _$DUP2:
 37633 0000684C 53                      	push	bx
 37634 0000684D 51                      	push	cx			; save source
 37635 0000684E 89CB                    	MOV	BX,CX			; get one to close
 37636 00006850 E8AAFD                  	call	_$CLOSE			; close destination handle
 37637 00006853 5B                      	pop	bx
 37638 00006854 58                      	pop	ax			; old in AX, new in BX
 37639 00006855 E8EDFC                  	call	pJFNFromHandle		; get pointer
 37640 00006858 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37641                                  
 37642                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37643                                  ;----------------------------------------------------------------------------
 37644                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37645                                  ;   process without the process knowing it (delete/rename of open files, for
 37646                                  ;   example), it is possible for the redirector to issue a call to a handle
 37647                                  ;   that it soes not rightfully own. We check here to make sure that the
 37648                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37649                                  ;   SFFromHandle to really make sure that the SFT is good.
 37650                                  ;
 37651                                  ;	ENTRY	BX has the handle
 37652                                  ;		User_ID is the current user
 37653                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37654                                  ;		Carry Set => AX has error code
 37655                                  ;	USES	none
 37656                                  ;----------------------------------------------------------------------------
 37657                                  
 37658                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37659                                  	; 21/05/2019 - Retro DOS v4.0
 37660                                  CheckOwner:
 37661                                  	; 13/07/2018 - Retro DOS v3.0
 37662                                  
 37663 0000685A E805FD                  	call	SFFromHandle
 37664 0000685D 721B                    	jc	short co_ret_label	; retc
 37665                                  
 37666 0000685F 50                      	push	ax
 37667                                  
 37668                                  	; MSDOS 6.0
 37669                                  
 37670                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37671                                  ;SR; are shared across multiple VMs in win386.
 37672                                  
 37673 00006860 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37674 00006866 7404                    	jz	short no_win386		;win386 is not present
 37675 00006868 31C0                    	xor	ax,ax			;set the zero flag
 37676 0000686A EB08                    	jmp	short _skip_win386	
 37677                                  
 37678                                  no_win386:
 37679 0000686C 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37680                                  	;cmp	ax,[es:di+47]
 37681 00006870 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37682                                  
 37683                                  _skip_win386:
 37684 00006874 58                      	pop	ax
 37685                                  	
 37686                                  	; 17/12/2022
 37687 00006875 7403                    	jz	short co_ret_label
 37688                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37689                                  	;jnz	short CheckOwner_err
 37690                                  	;retn
 37691                                  	
 37692                                  CheckOwner_err:
 37693                                  	;mov	al,6
 37694 00006877 B006                    	mov	al,error_invalid_handle
 37695 00006879 F9                      	stc
 37696                                  
 37697                                  co_ret_label:
 37698 0000687A C3                      	retn
 37699                                  
 37700                                  ;============================================================================
 37701                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37702                                  ;============================================================================
 37703                                  ; Retro	DOS v3.0 - 11/07/2018
 37704                                  ; 21/05/2019 - Retro DOS v4.0
 37705                                  
 37706                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37707                                  ;	NAME	MACRO
 37708                                  
 37709                                  ;	Microsoft Confidential
 37710                                  ;	Copyright (C) Microsoft Corporation 1991
 37711                                  ;	All Rights Reserved.
 37712                                  
 37713                                  ;**	MACRO.ASM
 37714                                  ;
 37715                                  ;	$AssignOper
 37716                                  ;	FIND_DPB
 37717                                  ;	InitCDS
 37718                                  ;	$UserOper
 37719                                  ;	GetVisDrv
 37720                                  ;	GetThisDrv
 37721                                  ;	GetCDSFromDrv
 37722                                  ;
 37723                                  ;   Revision history:
 37724                                  ;
 37725                                  ;	Created: MZ 4 April 1983
 37726                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37727                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37728                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37729                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37730                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37731                                  ;				    aliasing.
 37732                                  ;
 37733                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37734                                  ;   each valid drive letter the text of the current directory on that drive.
 37735                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37736                                  ;   be at the root. A current directory is either the raw local directory
 37737                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37738                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37739                                  ;
 37740                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37741                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37742                                  ;   this and all * are expanded into ?'s.
 37743                                  ;
 37744                                  ;   The second part of name translation involves subtree aliasing. A list of
 37745                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37746                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37747                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37748                                  ;   replaced with the other subtree in the pair.
 37749                                  ;
 37750                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37751                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37752                                  ;   The output of the previous translation is examined to see if any of the
 37753                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37754                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37755                                  ;   'mount' one device under another.
 37756                                  ;
 37757                                  ;   The final form of name translation involves the mapping of a user's
 37758                                  ;   logical drive number into the internal physical drive. This is
 37759                                  ;   accomplished by converting the drive number into letter:CON, performing
 37760                                  ;   the above translation and then converting the character back into a drive
 37761                                  ;   number.
 37762                                  ;
 37763                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37764                                  ;   take a path and form the real text of the pathname with all . and ..
 37765                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37766                                  ;   TransPath.
 37767                                  ;
 37768                                  ;	A000	version 4.00  Jan. 1988
 37769                                  
 37770                                  ;Installed = TRUE
 37771                                  
 37772                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37773                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37774                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37775                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37776                                  ;					; current drive)
 37777                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37778                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37779                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37780                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37781                                  ;	I_need	MYNAME,16		; machine name
 37782                                  ;	I_need	MYNUM,WORD		; machine number
 37783                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37784                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37785                                  ;	I_need	DrvErr,BYTE		; drive error
 37786                                  
 37787                                  ;BREAK <$AssignOper -- Set up a Macro>
 37788                                  ;----------------------------------------------------------------------------
 37789                                  ; Inputs:
 37790                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37791                                  ;	AL = 01 set assign mode 		    (SetMode)
 37792                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37793                                  ;	AL = 03 Define Macro (attch start)
 37794                                  ;	    BL = Macro type
 37795                                  ;	       = 0 alias
 37796                                  ;	       = 1 file/device
 37797                                  ;	       = 2 drive
 37798                                  ;	       = 3 Char device -> network
 37799                                  ;	       = 4 File device -> network
 37800                                  ;	    DS:SI -> ASCIZ source name
 37801                                  ;	    ES:DI -> ASCIZ destination name
 37802                                  ;	AL = 04 Cancel Macro
 37803                                  ;	    DS:SI -> ASCIZ source name
 37804                                  ;	AL = 05 Modified get attach list entry
 37805                                  ;	AL = 06 Get ifsfunc item
 37806                                  ;	AL = 07 set in_use of a drive's CDS
 37807                                  ;	     DL = drive number, 0=default  0=A,,
 37808                                  ;	AL = 08 reset in_use of a drive's CDS
 37809                                  ;	     DL = drive number, 0=A, 1=B,,,
 37810                                  ; Function:
 37811                                  ;	Do macro stuff
 37812                                  ; Returns:
 37813                                  ;	Std Xenix style error return
 37814                                  ;----------------------------------------------------------------------------
 37815                                  
 37816                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37817                                  	; 21/05/2019 - Retro DOS v4.0
 37818                                  _$AssignOper:
 37819                                  	; MSDOS 6.0
 37820 0000687B 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37821 0000687D 7525                    	JNZ	short chk08		      ; no			;AN000;
 37822                                  srinuse:								;AN000;
 37823 0000687F 50                      	PUSH	AX			      ; save al 		;AN000;
 37824 00006880 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37825 00006882 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37826 00006885 58                      	POP	AX			      ; 			;AN000;
 37827 00006886 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37828                                  	;cmp	word [si+45h],0
 37829 00006888 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37830 0000688C 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37831 0000688E 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37832 00006890 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37833                                  	;or	word [si+43h],4000h
 37834                                  	; 17/12/2022
 37835                                  	;or	byte [si+44h],40h
 37836 00006892 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37837                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37838 00006896 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37839                                  resetdrv:
 37840                                  	;and	word [si+43h],0BFFFh									;AN000;
 37841                                  	; 18/12/2022
 37842 00006898 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37843                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37844 0000689C EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37845                                  
 37846                                  	; 17/12/2022
 37847                                  baddrv: 								;AN000;
 37848 0000689E B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37849                                  
 37850                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37851                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37852                                  	; 17/12/2022
 37853                                  	; 21/05/2019
 37854                                  ASS_ERR:
 37855 000068A1 E9A09D                  	jmp	SYS_RET_ERR
 37856                                  
 37857                                  chk08:									;AN000;
 37858 000068A4 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37859 000068A6 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37860                                  
 37861                                    ;IF	NOT INSTALLED
 37862                                  	;transfer NET_ASSOPER
 37863                                    ;ELSE
 37864                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37865 000068A8 50                      	PUSH	AX
 37866                                  	;mov	ax,111Eh
 37867                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37868 000068A9 B81E11                  	mov	ax,(MultNET*256)+30
 37869 000068AC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37870                                  			; SS = DOS CS
 37871                                  			; STACK: WORD function to execute
 37872                                  			; Return: CF set on error, AX = error code
 37873                                  			; STACK unchanged
 37874 000068AE 5B                      	POP	BX			; Don't zap error code in AX
 37875 000068AF 72F0                    	JC	short ASS_ERR
 37876                                  okdone:
 37877 000068B1 E9879D                  	jmp	SYS_RET_OK
 37878                                  
 37879                                  	; 17/12/2022
 37880                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37881                                  ;ASS_ERR:
 37882                                  	;jmp	SYS_RET_ERR
 37883                                  
 37884                                    ;ENDIF
 37885                                  
 37886                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37887                                  ;----------------------------------------------------------------------------
 37888                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37889                                  ;
 37890                                  ;	ENTRY	AL has drive number A = 0
 37891                                  ;	EXIT	'C' set
 37892                                  ;		    No DPB for this drive number
 37893                                  ;		'C' clear
 37894                                  ;		    DS:SI points to DPB for drive
 37895                                  ;	USES	SI, DS, Flags
 37896                                  ;----------------------------------------------------------------------------
 37897                                  
 37898                                  	; 21/05/2019 - Retro DOS v4.0
 37899                                  FIND_DPB:
 37900 000068B4 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37901                                  fdpb5:	
 37902 000068B9 83FEFF                  	CMP	SI,-1
 37903 000068BC 7409                    	JZ	short fdpb10
 37904 000068BE 3A04                    	cmp	al,[si]
 37905                                  	;CMP	AL,[SI+DPB.DRIVE]
 37906 000068C0 7406                    	jz	short ret_label15	; Carry clear (retz)
 37907                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37908                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37909 000068C2 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37910 000068C5 EBF2                    	JMP	short fdpb5
 37911                                  fdpb10:	
 37912 000068C7 F9                      	STC
 37913                                  ret_label15:
 37914 000068C8 C3                      	retn
 37915                                  
 37916                                  ;	Break <InitCDS - set up an empty CDS>
 37917                                  ;----------------------------------------------------------------------------
 37918                                  ;**	InitCDS - Setup an Empty CDS
 37919                                  ;
 37920                                  ;	ENTRY	ThisCDS points to CDS
 37921                                  ;		AL has uppercase drive letter
 37922                                  ;	EXIT	ThisCDS is now empty
 37923                                  ;		(ES:DI) = CDS
 37924                                  ;		'C' set if no DPB associated with drive
 37925                                  ;	USES	AH,ES,DI, Flags
 37926                                  ;----------------------------------------------------------------------------
 37927                                  
 37928                                  ; 21/05/2019 - Retro DOS v4.0
 37929                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37930                                  
 37931                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37932                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37933                                  
 37934                                  InitCDS:
 37935                                  	; 19/08/2018
 37936                                  	; 05/08/2018 - Retro DOS v3.0
 37937                                  	; MSDOS 6.0
 37938 000068C9 50                      	push	ax			; save (AL) for caller
 37939 000068CA 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37940                                  	;mov	word [es:di+67],0
 37941 000068CF 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37942 000068D5 2C40                    	SUB	AL,"A"-1                ; A = 1
 37943 000068D7 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37944 000068DC 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37945 000068DE 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37946 000068DF 50                      	PUSH	AX			; save drive number for later
 37947 000068E0 0441                    	add	al,"A"
 37948 000068E2 B43A                    	MOV	AH,':'
 37949 000068E4 268905                  	mov	[ES:DI],ax
 37950                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37951                                  	;mov	ax,"\"
 37952                                  	;mov	[es:di+2],ax
 37953                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37954 000068E7 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37955                                  	;or	word [es:di+67],4000h
 37956                                  	;or	byte [es:di+68],40h
 37957 000068ED 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37958 000068F2 29C0                    	sub	ax,ax
 37959                                  	;MOV	[es:di+73],ax ; 0
 37960 000068F4 26894549                	MOV	[ES:DI+curdir.ID],ax
 37961                                  	;mov	[es:di+75],ax ; 0
 37962 000068F8 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37963 000068FC B002                    	mov	al,2
 37964                                  	;mov	[es:di+79],aX ; 2
 37965 000068FE 2689454F                	MOV	[ES:DI+curdir.end],ax
 37966 00006902 58                      	POP	AX			; (al) = drive number
 37967 00006903 1E                      	push	ds
 37968 00006904 56                      	push	si
 37969 00006905 E8ACFF                  	call	FIND_DPB
 37970 00006908 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37971                                  	;mov	[es:di+69],si
 37972 0000690A 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37973                                  	;mov	[es:di+71],ds
 37974 0000690E 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37975                                  icds5:	
 37976 00006912 5E                      	pop	si
 37977 00006913 1F                      	pop	ds
 37978                                  icdsx:	
 37979 00006914 58                      	pop	ax
 37980                                  RET45:
 37981 00006915 C3                      	retn
 37982                                  
 37983                                  ;Break <$UserOper - get/set current user ID (for net)>
 37984                                  ;----------------------------------------------------------------------------
 37985                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37986                                  ;	maintain this string and do no verifications.
 37987                                  ;
 37988                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37989                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37990                                  ;		DS:DX is user string pointer (calls 1,2)
 37991                                  ;		ES:DI is user buffer (call 3)
 37992                                  ;		BX is assign index (calls 2,3,4,5)
 37993                                  ;		CX is user number (call 1)
 37994                                  ;		DX is flag word (call 4)
 37995                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37996                                  ;			and user CX is set to the user number
 37997                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37998                                  ;		If AL = 5 then DX is flag word
 37999                                  ;----------------------------------------------------------------------------
 38000                                  
 38001                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38002                                  	; 21/05/2019 - Retro DOS v4.0
 38003                                  _$UserOper:
 38004                                  	; 05/08/2018 - Retro DOS v3.0
 38005                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38006 00006916 50                      	PUSH	AX
 38007 00006917 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 38008 00006919 58                      	POP	AX
 38009 0000691A 7211                    	JB	short UserGet 		; return to user the string
 38010 0000691C 742E                    	JZ	short UserSet 		; set the current user
 38011 0000691E 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38012 00006920 763D                    	JBE	short UserPrint		; yep
 38013                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38014 00006922 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38015                                  					; Extended Error Locus
 38016                                  	;error	error_invalid_function	; not 0,1,2,3
 38017                                  	;mov	al,1
 38018 00006928 B001                    	MOV	AL,error_invalid_function
 38019                                  useroper_error:
 38020                                  	; 17/12/2022
 38021                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38022 0000692A E9179D                  	JMP	SYS_RET_ERR
 38023                                  	;jmp	short ASS_ERR
 38024                                  
 38025                                  UserGet:
 38026                                  ; Transfer MYNAME to DS:DX
 38027                                  ; Set Return CX to MYNUM
 38028 0000692D 1E                      	PUSH	DS			; switch registers
 38029 0000692E 07                      	POP	ES
 38030 0000692F 89D7                    	MOV	DI,DX			; destination
 38031 00006931 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38032 00006936 E84C9B                  	call	Get_User_Stack
 38033                                  	;mov	[si+4],cx
 38034 00006939 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38035 0000693C 16                      	push	ss			; point to DOSDATA
 38036 0000693D 1F                      	pop	ds
 38037 0000693E BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38038                                  UserMove:
 38039 00006941 B90F00                  	MOV	CX,15
 38040 00006944 F3A4                    	REP	MOVSB			; blam.
 38041 00006946 31C0                    	XOR	AX,AX			; 16th byte is 0
 38042 00006948 AA                      	STOSB
 38043                                  UserBye:
 38044 00006949 E9EF9C                  	jmp	SYS_RET_OK		; no errors here
 38045                                  
 38046                                  UserSet:
 38047                                  ; Transfer DS:DX to MYNAME
 38048                                  ; CX to MYNUM
 38049 0000694C 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38050 00006951 89D6                    	MOV	SI,DX			; user space has source
 38051 00006953 16                      	push	ss
 38052 00006954 07                      	pop	es
 38053 00006955 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38054 00006958 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38055 0000695D EBE2                    	JMP	short UserMove
 38056                                  
 38057                                  UserPrint:
 38058                                  
 38059                                    ;IF NOT Installed
 38060                                    ;	transfer PRINTER_GETSET_STRING
 38061                                    ;ELSE
 38062 0000695F 50                      	PUSH	AX
 38063                                  	;mov	ax,111Fh
 38064                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38065 00006960 B81F11                  	mov	ax,(MultNET<<8)|31
 38066 00006963 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38067                                  			; STACK: WORD function
 38068                                  			; Return: CF set on error, AX = error code
 38069                                  			; STACK unchanged
 38070 00006965 5A                      	POP	DX			; Clean stack
 38071                                  	;JNC	short OKPA
 38072 00006966 73E1                    	jnc	short UserBye ; 21/05/2019
 38073                                  	; 17/12/2022
 38074 00006968 EBC0                    	jmp	short useroper_error
 38075                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38076                                  	;jnb     short OKPA
 38077                                  	;jmp     short useroper_error
 38078                                  
 38079                                  	; 17/12/2022
 38080                                  ;OKPA:
 38081                                  ;	jmp	short UserBye
 38082                                  
 38083                                    ;ENDIF
 38084                                  
 38085                                  
 38086                                  ;Break	<GetVisDrv - return visible drive>
 38087                                  ;----------------------------------------------------------------------------
 38088                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38089                                  ;
 38090                                  ;   Inputs:	AL has drive identifier (0=default)
 38091                                  ;   Outputs:	Carry Set - invalid drive/macro
 38092                                  ;		Carry Clear - AL has physical drive (0=A)
 38093                                  ;		    ThisCDS points to CDS
 38094                                  ;   Registers modified: AL
 38095                                  ;----------------------------------------------------------------------------
 38096                                  
 38097                                  	; 21/05/2019 - Retro DOS v4.0
 38098                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38099                                  
 38100                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38101                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38102                                  GetVisDrv:
 38103                                  	; 05/08/2018 - Retro DOS v3.0
 38104                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38105 0000696A E81900                  	CALL	GETTHISDRV		; get inuse drive
 38106 0000696D 72A6                    	jc	short RET45
 38107 0000696F 1E                      	push	ds
 38108 00006970 56                      	push	si
 38109 00006971 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38110                                  	;test	word [si+67],2000h
 38111                                  	; 17/12/2022
 38112                                  	;test	byte [si+68],20h
 38113 00006976 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38114                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38115 0000697A 5E                      	pop	si
 38116 0000697B 1F                      	pop	ds
 38117 0000697C 7497                    	jz	short RET45		; if not spliced, return OK
 38118                                  	; MSDOS 6.0
 38119                                  	;mov	byte [ss:DrvErr],0Fh
 38120 0000697E 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38121 00006984 F9                      	STC				; signal error
 38122 00006985 C3                      	retn
 38123                                  
 38124                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38125                                  ;----------------------------------------------------------------------------
 38126                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38127                                  ;	macro pointer
 38128                                  ;
 38129                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38130                                  ;   Outputs:
 38131                                  ;		Carry Set - invalid drive/macro
 38132                                  ;		Carry Clear - AL has physical drive (0=A)
 38133                                  ;		   ThisCDS points to macro
 38134                                  ;   Registers modified: AL
 38135                                  ;----------------------------------------------------------------------------
 38136                                  
 38137                                  	; 21/05/2019 - Retro DOS v4.0
 38138                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38139                                  
 38140                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38141                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 38142                                  GETTHISDRV:
 38143                                  	; 05/08/2018
 38144                                  	; 12/07/2018 - Retro DOS v3.0
 38145                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38146                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38147 00006986 08C0                    	OR	AL,AL			; are we using default drive?
 38148 00006988 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38149 0000698A 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38150                                  	;INC	ax			; Counteract next instruction
 38151                                  	; 04/09/2018
 38152                                  	;inc	al
 38153                                  	; 07/12/2022
 38154 0000698E 40                      	inc	ax
 38155                                  GTD10:	
 38156                                  	;DEC	AX
 38157                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38158 0000698F 48                      	dec	ax			; 0 = A
 38159                                  	;dec	al
 38160 00006990 1E                      	PUSH	DS			; save world
 38161 00006991 56                      	PUSH	SI
 38162                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38163 00006992 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38164 00006998 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38165 0000699E 7420                    	JZ	SHORT GTD20		; Logical
 38166 000069A0 50                      	PUSH	AX
 38167 000069A1 06                      	PUSH	ES
 38168 000069A2 57                      	PUSH	DI
 38169 000069A3 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38170                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38171 000069AA 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38172 000069AF 0441                    	ADD	AL,'A'
 38173 000069B1 E815FF                  	CALL	InitCDS			; InitCDS(c);
 38174                                  	;test	word [es:di+67],4000h
 38175                                  	; 17/12/2022
 38176                                  	;test	byte [es:di+68],40h
 38177 000069B4 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38178                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38179 000069B9 5F                      	POP	DI
 38180 000069BA 07                      	POP	ES
 38181 000069BB 58                      	POP	AX
 38182 000069BC 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38183 000069BE EB18                    	JMP	SHORT GTDX		; carry clear
 38184                                  GTD20:
 38185 000069C0 E81800                  	CALL	GetCDSFromDrv
 38186 000069C3 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38187                                  	;test	word [si+43h],4000h
 38188                                  	; 17/12/2022
 38189                                  	;test	byte [si+44h],40h
 38190 000069C5 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38191                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38192 000069C9 750D                    	JNZ	SHORT GTDX		; carry clear
 38193                                  GTD30:	
 38194                                  	; 21/05/2019
 38195                                  	; MSDOS 6.0
 38196 000069CB B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38197 000069CD 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38198                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38199 000069D1 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38200 000069D7 F9                      	STC
 38201                                  GTDX:	
 38202 000069D8 5E                      	POP	SI			; restore world
 38203 000069D9 1F                      	POP	DS
 38204 000069DA C3                      	RETN
 38205                                   
 38206                                  
 38207                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38208                                  ;----------------------------------------------------------------------------
 38209                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38210                                  ;	pointer, returning an error if the drive number is greater than the
 38211                                  ;	number of CDS's
 38212                                  ;
 38213                                  ;   Inputs:	AL is physical unit # A=0...
 38214                                  ;   Outputs:	Carry Set if Bad Drive
 38215                                  ;		Carry Clear
 38216                                  ;		    DS:SI -> CDS
 38217                                  ;		    [THISCDS] = DS:SI
 38218                                  ;   Registers modified: DS,SI
 38219                                  ;----------------------------------------------------------------------------
 38220                                  
 38221                                  	; 21/05/2019 - Retro DOS v4.0
 38222                                  GetCDSFromDrv:
 38223 000069DB 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38224                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38225                                  	;STC				; signal error
 38226                                  	;RETN				; bye
 38227                                  	; 23/09/2023
 38228 000069E0 F5                      	cmc	; cf=1 <-> cf=0
 38229 000069E1 7217                    	jc	short GetCDS_retn
 38230                                  GetCDS:
 38231                                  	; 23/09/2023
 38232                                  	;PUSH	BX
 38233 000069E3 50                      	PUSH	AX
 38234 000069E4 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38235                                  	;mov	bl,81 ; MSDOS 3.3
 38236                                  	;mov	bl,88 ; MSDOS 6.0 
 38237                                  	; 23/09/2023
 38238                                  	;MOV	BL,curdir.size		; size in convenient spot
 38239                                  	;MUL	BL			; get net offset
 38240 000069E9 B458                    	mov	ah,curdir.size
 38241 000069EB F6E4                    	mul	ah
 38242 000069ED 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38243 000069EF 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38244 000069F4 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38245 000069F9 58                      	POP	AX
 38246                                  	; 23/09/2023
 38247                                  	;POP	BX
 38248                                  	; (cf must be 0 here) ; *
 38249                                  	;CLC				; no error
 38250                                  GetCDS_retn:
 38251 000069FA C3                      	RETN				; bye!
 38252                                  
 38253                                  ;============================================================================
 38254                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38255                                  ;============================================================================
 38256                                  ; Retro	DOS v3.0 - 12/07/2018
 38257                                  ; 22/05/2019 - Retro DOS v4.0
 38258                                  
 38259                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38260                                  ;----------------------------------------------------------------------------
 38261                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38262                                  ;       gritty substitution.
 38263                                  ;
 38264                                  ;   Inputs:     DS:DX - pointer to FCB
 38265                                  ;               ES:DI - point to destination
 38266                                  ;   Outputs:    Carry Set - invalid path in final map
 38267                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38268                                  ;                   Sattrib is set from possibly extended FCB
 38269                                  ;                   ExtFCB set if extended FCB found
 38270                                  ;   Registers modified: most
 38271                                  ;----------------------------------------------------------------------------
 38272                                  
 38273                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38274                                  TransFCB:
 38275                                  	; 22/05/2019 - Retro DOS v4.0
 38276                                  	; 12/07/2018 - Retro DOS v3.0
 38277                                  	;LocalVar FCBTmp,16
 38278                                  	;ENTER
 38279 000069FB 55                      	push	bp
 38280 000069FC 89E5                    	mov	bp,sp
 38281                                  	;sub	sp,15	; MSDOS 3.3
 38282 000069FE 83EC10                  	sub	sp,16	; MSDOS 6.0
 38283 00006A01 16                      	push	ss
 38284 00006A02 07                      	pop	es
 38285 00006A03 06                      	push	es
 38286 00006A04 57                      	push	di
 38287                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38288                                  	;LEA	DI,FCBTmp 
 38289 00006A05 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38290 00006A08 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38291 00006A0E 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38292 00006A14 E825B2                  	call	GetExtended             ; get FCB, extended or not
 38293                                  	; 06/12/2022
 38294 00006A17 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38295 00006A19 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38296 00006A1C 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38297 00006A20 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38298                                  GetDrive:
 38299 00006A26 AC                      	lodsb				; get drive byte
 38300 00006A27 E85CFF                  	call	GETTHISDRV
 38301 00006A2A 722A                    	jc	short BadPack
 38302 00006A2C E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38303                                  
 38304                                  ; Scan the source to see if there are any illegal chars
 38305                                  
 38306                                  	;mov	bx,CharType		; load lookup table
 38307 00006A2F B90B00                  	mov	cx,11
 38308 00006A32 56                      	push	si			; back over name, ext
 38309                                  FCBScan:
 38310 00006A33 AC                      	lodsb				; get a byte
 38311                                  	
 38312                                  	; 09/08/2018
 38313                                  	;;xlat	byte [es:bx]
 38314                                  	;es	xlat
 38315                                  
 38316                                  	; 22/05/2019 - Retro DOS v4.0	
 38317 00006A34 E83CE5                  	call	GetCharType		; get flags
 38318                                  
 38319                                  	;test	al,8	
 38320 00006A37 A808                    	test	al,FFCB
 38321 00006A39 741B                    	jz	short BadPack
 38322                                  NextCh: 
 38323 00006A3B E2F6                    	loop	FCBScan
 38324 00006A3D 5E                      	pop	si
 38325 00006A3E 89FB                    	mov	bx,di
 38326 00006A40 E835B6                  	call	PackName                ; crunch the path
 38327 00006A43 5F                      	pop	di			; get original destination
 38328 00006A44 07                      	pop	es
 38329 00006A45 16                      	push	ss			; get DS addressability
 38330 00006A46 1F                      	pop	ds
 38331                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38332                                  	;LEA	SI,FCBTmp		; point at new pathname
 38333 00006A47 8D76F0                  	lea	si,[bp-16]
 38334 00006A4A 803F00                  	cmp	byte [bx],0
 38335 00006A4D 7407                    	jz	short BadPack
 38336 00006A4F 55                      	push	bp
 38337 00006A50 E80E00                  	call	TransPathSet            ; convert the path
 38338 00006A53 5D                      	pop	bp
 38339 00006A54 7303                    	jnc	short FCBRet		; bye with transPath error code
 38340                                  BadPack:
 38341 00006A56 F9                      	STC
 38342                                  	;mov	al,3
 38343 00006A57 B003                    	MOV     AL,error_path_not_found
 38344                                  FCBRet: 
 38345                                  	;LEAVE
 38346 00006A59 89EC                    	mov	sp,bp
 38347 00006A5B 5D                      	pop	bp
 38348                                  TransPath_retn:
 38349 00006A5C C3                      	retn
 38350                                  
 38351                                  ; 12/07/2018 - Retro DOS v3.0
 38352                                  
 38353                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38354                                  ;----------------------------------------------------------------------------
 38355                                  ;
 38356                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38357                                  ;       substitution, insertion of current directory and fixing . and ..
 38358                                  ;       entries. Perform splicing. Allow input string to match splice
 38359                                  ;       exactly.
 38360                                  ;
 38361                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38362                                  ;       matches splice.
 38363                                  ;
 38364                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38365                                  ;
 38366                                  ;   The following anomalous behaviour is required:
 38367                                  ;
 38368                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38369                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38370                                  ;       Raw net I/O sets ThisCDS => NULL.
 38371                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38372                                  ;
 38373                                  ;   Other behaviour:
 38374                                  ;
 38375                                  ;       ThisCDS set up.
 38376                                  ;       FatRead done on local CDS.
 38377                                  ;       ValidateCDS done on local CDS.
 38378                                  ;
 38379                                  ;   Brief flowchart:
 38380                                  ;
 38381                                  ;       if fSharing then
 38382                                  ;           set up DummyCDS (ThisCDS)
 38383                                  ;           canonicalize (sets cMeta)
 38384                                  ;           splice
 38385                                  ;           fatRead
 38386                                  ;           return
 38387                                  ;       if \\ or d:\\ lead then
 38388                                  ;           set up null CDS (ThisCDS)
 38389                                  ;           canonicalize (sets cMeta)
 38390                                  ;           return
 38391                                  ;       if device then
 38392                                  ;           set up dummyCDS (ThisCDS)
 38393                                  ;           canonicalize (sets cMeta)
 38394                                  ;           return
 38395                                  ;       if file then
 38396                                  ;           getCDS (sets (ThisCDS) from name)
 38397                                  ;           validateCDS (may reset current dir)
 38398                                  ;           Copy current dir
 38399                                  ;           canonicalize (set cMeta)
 38400                                  ;           splice
 38401                                  ;           generate correct CDS (ThisCDS)
 38402                                  ;           if local then
 38403                                  ;               fatread
 38404                                  ;           return
 38405                                  ;
 38406                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38407                                  ;               DI - point to buffer in DOSDATA
 38408                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38409                                  ;                   syntax, etc. or user FAILed to I 24.
 38410                                  ;               WFP_Start - points to beginning of buffer
 38411                                  ;               Curr_Dir_End - points to end of current dir in path
 38412                                  ;               DS - DOSDATA
 38413                                  ;   Registers modified: most
 38414                                  ;
 38415                                  ;----------------------------------------------------------------------------
 38416                                  
 38417                                  ; 22/05/2019
 38418                                  ; 13/05/2019 - Retro DOS v4.0
 38419                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38420                                  
 38421                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38422                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38423                                  
 38424                                  TransPath:
 38425 00006A5D 30C0                    	XOR     AL,AL
 38426 00006A5F EB02                    	JMP     SHORT SetSplice
 38427                                  TransPathSet:
 38428 00006A61 B0FF                    	MOV     AL,-1
 38429                                  SetSplice:
 38430 00006A63 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38431 00006A67 B0FF                    	MOV     AL,-1
 38432                                  TransPathNoSet:
 38433 00006A69 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38434 00006A6D 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38435 00006A73 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38436 00006A78 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38437 00006A7F 16                      	push	ss
 38438 00006A80 07                      	pop	es
 38439                                  	;lea	bp,[di+134]
 38440 00006A81 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38441                                  ;
 38442                                  ; if this is through the server dos call, fsharing is set. We set up a
 38443                                  ; dummy cds and let the operation go.
 38444                                  ;
 38445 00006A85 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38446 00006A8B 7435                    	JZ	short CheckUNC		; skip to UNC check
 38447                                  ;
 38448                                  ; ES:DI point to buffer
 38449                                  ;
 38450 00006A8D E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38451 00006A90 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38452 00006A93 722A                    	jc	short NoPath
 38453 00006A95 E80A03                  	CALL	TextFromDrive		; drop in new
 38454 00006A98 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38455 00006A9B E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38456 00006A9E 72BC                    	jc	short TransPath_retn	; errors
 38457                                  ;
 38458                                  ; Perform splices for net guys.
 38459                                  ;
 38460 00006AA0 16                      	push	ss
 38461 00006AA1 1F                      	pop	ds
 38462 00006AA2 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38463 00006AA6 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38464 00006AAB 7403                    	JZ	short NoServerSplice
 38465 00006AAD E83102                  	CALL    Splice
 38466                                  NoServerSplice:
 38467 00006AB0 16                      	push	ss
 38468 00006AB1 1F                      	pop	ds                      ; for FATREAD
 38469 00006AB2 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38470 00006AB6 E83FA8                  	call	ECritDisk
 38471 00006AB9 E807EB                  	call	FATREAD_CDS
 38472 00006ABC E854A8                  	call	LCritDisk
 38473                                  NoPath:
 38474                                  	;mov	al,3
 38475 00006ABF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38476 00006AC1 C3                      	retn				; any errors are in Carry flag
 38477                                  
 38478                                  ; Let the network decide if the name is for a spooled device. It will map
 38479                                  ; the name if so.
 38480                                  
 38481                                  CheckUNC:
 38482 00006AC2 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38483                                  	;CallInstall NetSpoolCheck,MultNET,35
 38484 00006AC9 B82311                  	mov	ax,1123h
 38485 00006ACC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38486                                  			; DS:SI -> ASCIZ filename to canonicalize
 38487                                  			; ES:DI -> 128-byte buffer for qualified name
 38488                                  			; Return: CF set if not resolved
 38489 00006ACE 7329                    	JNC	short UNCDone
 38490                                  
 38491                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38492                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38493                                  ; input, then the name has been changed to the remote spooler by the above net
 38494                                  ; call. Also, there may be a drive in front of the \\.
 38495                                  
 38496                                  NO_CHECK:
 38497 00006AD0 E8B902                  	CALL    DriveFromText		; eat drive letter
 38498 00006AD3 50                      	PUSH    AX                      ; save it
 38499 00006AD4 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38500 00006AD6 E8B7E4                  	call    PATHCHRCMP              ; convert to normal form
 38501 00006AD9 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38502 00006ADB E8B2E4                  	call    PATHCHRCMP              ; convert to normal form
 38503 00006ADE 751F                    	JNZ	short CheckDevice	; not a path char
 38504 00006AE0 38C4                    	CMP     AH,AL                   ; are they same?
 38505 00006AE2 751B                    	JNZ	short CheckDevice	; nope
 38506                                  
 38507                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38508                                  ; local machine root path
 38509                                  
 38510 00006AE4 58                      	POP     AX
 38511 00006AE5 A5                      	MOVSW                           ; get the lead \\.
 38512                                  UNCCpy:
 38513 00006AE6 AC                      	LODSB                           ; get a byte
 38514 00006AE7 E851E4                   	call	UCase                   ;AN000;; convert the char
 38515 00006AEA 08C0                    	OR      AL,AL
 38516 00006AEC 740E                    	JZ	short UNCTerm		; end of string. All done.
 38517 00006AEE E89FE4                  	call    PATHCHRCMP              ; is it a path char?
 38518 00006AF1 89FB                    	MOV     BX,DI                   ; backup position
 38519 00006AF3 AA                      	STOSB
 38520 00006AF4 75F0                    	JNZ	short UNCCpy		; no, go copy
 38521 00006AF6 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38522                                  UNCDone:
 38523 00006AF9 16                      	push	ss
 38524 00006AFA 1F                      	pop	ds
 38525 00006AFB C3                       	retn				; return error code
 38526                                  UNCTerm:
 38527 00006AFC AA                      	STOSB                           ;AN000;
 38528 00006AFD EBFA                    	JMP	short UNCDone		;AN000;
 38529                                  
 38530                                  CheckDevice:
 38531                                  
 38532                                  ; Check DS:SI for device. First eat any path stuff
 38533                                  
 38534 00006AFF 58                      	POP     AX                      ; retrieve drive info
 38535 00006B00 803C00                  	CMP     BYTE [SI],0		; check for null file
 38536 00006B03 7504                    	JNZ	short CheckPath
 38537                                  	;mov	al,2 
 38538 00006B05 B002                    	MOV     AL,error_file_not_found ; bad file error
 38539 00006B07 F9                      	STC                             ; signal error on null input
 38540 00006B08 C3                      	RETN				; bye!
 38541                                  CheckPath:
 38542 00006B09 50                      	push	ax
 38543 00006B0A 55                      	push	bp			; save drive number
 38544                                  
 38545                                  
 38546                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38547                                  %if 0
 38548                                  	; MSDOS 6.0
 38549                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38550                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38551                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38552                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38553                                  ;;;end up having a 5D in the opcode's displacement field. The
 38554                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38555                                  ;;;
 38556                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38557                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38558                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38559                                  ;;;
 38560                                  ;;;More info:
 38561                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38562                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38563                                  ;;;
 38564                                  	call	no5Dshere
 38565                                  start5Dhack:
 38566                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38567                                  backfrom5Dhack:
 38568                                  
 38569                                  %endif
 38570                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38571                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38572 00006B0B E814D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38573                                  
 38574 00006B0E 5D                      	pop	bp
 38575 00006B0F 58                      	pop	ax			; get drive letter back
 38576 00006B10 731C                    	JNC	short DoFile		; yes we have a file.
 38577                                  
 38578                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38579                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38580                                  ; call.
 38581                                  
 38582 00006B12 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38583 00006B18 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38584 00006B1B 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38585                                  
 38586                                  ; Now that we have noted that we have a device, we put it into a form that
 38587                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38588                                  ; string. We relax this to state that if the d:\ is present then the path
 38589                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38590                                  ; a device.
 38591                                  
 38592 00006B21 E87E02                  	CALL    TextFromDrive
 38593 00006B24 B02F                    	MOV     AL,'/'                  ; path sep.
 38594 00006B26 AA                      	STOSB
 38595 00006B27 E894A6                  	call	StrCpy			; move remainder of string
 38596                                  
 38597 00006B2A F8                      	CLC                             ; everything OK.
 38598 00006B2B 16                      	push	ss
 38599 00006B2C 1F                      	pop	ds                      ; remainder of OK stuff
 38600                                  DoFile_retn:
 38601 00006B2D C3                      	retn
 38602                                  
 38603                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38604                                  %if 0
 38605                                  
 38606                                  no5Dshere:
 38607                                  	; 10/08/2018
 38608                                  	jmp	CheckThisDevice		; snoop for device
 38609                                  %endif
 38610                                  
 38611                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38612                                  
 38613                                  ; We have a file. Get the raw CDS.
 38614                                  
 38615                                  DoFile:
 38616                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38617                                  
 38618 00006B2E E839FE                  	call	GetVisDrv               ; get proper CDS
 38619                                  	;mov	al,3 
 38620 00006B31 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38621 00006B33 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38622                                  
 38623                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38624                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38625                                  ; Use the one that we are going to use (ES:DI).
 38626                                  
 38627                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38628 00006B35 1E                      	push	ds
 38629 00006B36 56                      	push	si
 38630 00006B37 06                      	push	es
 38631 00006B38 57                      	push	di
 38632 00006B39 E82FD6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38633                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38634 00006B3C 5F                      	pop	di
 38635 00006B3D 07                      	pop	es
 38636 00006B3E 5E                      	pop	si
 38637 00006B3F 1F                      	pop	ds
 38638                                  	;mov	al,3
 38639 00006B40 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38640                                  	;retc				; someone failed an operation
 38641 00006B42 72E9                    	jc	short DoFile_retn
 38642                                  
 38643                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38644                                  ; current directory. Copy it in.
 38645                                  
 38646 00006B44 1E                      	push	ds
 38647 00006B45 56                      	push	si
 38648 00006B46 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38649 00006B4B 89FB                    	MOV     BX,DI                   ; point to destination
 38650                                  	;add	bx,[si+79] ; MSDOS 6.0
 38651 00006B4D 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38652                                  	;lea	bp,[di+134]
 38653 00006B50 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38654                                  					;AN000;
 38655 00006B54 E876A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38656 00006B57 4F                      	DEC     DI                      ; point to NUL byte
 38657                                  
 38658                                  ; Make sure that there is a path char at end.
 38659                                  
 38660 00006B58 B05C                    	MOV     AL,'\'
 38661 00006B5A 263845FF                	CMP     [ES:DI-1],AL
 38662 00006B5E 7401                    	JZ	short GetOrig
 38663 00006B60 AA                      	STOSB
 38664                                  
 38665                                  ; Now get original string.
 38666                                  
 38667                                  GetOrig:
 38668 00006B61 4F                      	DEC     DI                      ; point to path char
 38669 00006B62 5E                      	pop	si
 38670 00006B63 1F                      	pop	ds
 38671                                  
 38672                                  ; BX points to the end of the root part of the CDS (at where a path char
 38673                                  ; should be). Now, we decide whether we use this root or extend it with the
 38674                                  ; current directory. See if the input string begins with a leading 
 38676 00006B64 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38677 00006B67 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38678 00006B69 08C0                    	OR      AL,AL                   ; end of string?
 38679 00006B6B 7410                    	JZ	short DoCanon		; yes, skip.
 38680                                  ;
 38681                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38682                                  ; to this root. Make sure that there is a path char there and advance the
 38683                                  ; source string over all leading \'s.
 38684                                  ;
 38685 00006B6D 89DF                    	MOV     DI,BX                   ; back up to root point.
 38686                                  SkipPath:
 38687 00006B6F AC                      	LODSB
 38688 00006B70 E81DE4                  	call    PATHCHRCMP
 38689 00006B73 74FA                    	JZ	short SkipPath
 38690 00006B75 4E                      	DEC     SI
 38691 00006B76 08C0                    	OR      AL,AL
 38692 00006B78 7403                    	JZ	short DoCanon
 38693                                  
 38694                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38695                                  ; for yucks.
 38696                                  
 38697                                  PathAssure:
 38698 00006B7A B05C                    	MOV     AL,'\'	; 5Ch
 38699 00006B7C AA                      	STOSB
 38700                                  
 38701                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38702                                  ; BP is the max extent to advance DI
 38703                                  ; BX is the backup limit for ..
 38704                                  
 38705                                  DoCanon:
 38706 00006B7D E85200                  	CALL    Canonicalize            ; wham.
 38707                                  	;retc				; badly formatted path.
 38708 00006B80 72AB                    	jc	short DoFile_retn
 38709                                  
 38710                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38711                                  ; to wfp_start and do string substitution. BP is still the max position in
 38712                                  ; buffer.
 38713                                  
 38714 00006B82 16                      	push	ss
 38715 00006B83 1F                      	pop	ds
 38716 00006B84 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38717 00006B88 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38718 00006B8C E81B02                  	CALL    PathPref                ; is there a prefix?
 38719 00006B8F 7514                    	JNZ	short DoSplice		; no, do splice
 38720                                  
 38721                                  ; We have a match. Check to see if we ended in a path char.
 38722                                  
 38723 00006B91 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38724 00006B94 E8F9E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38725 00006B97 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38726                                  Pathline:                               ; 2/13/KK
 38727 00006B99 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38728 00006B9D 7406                    	JZ	short DoSplice
 38729 00006B9F 47                      	INC     DI                      ; point to after current path char
 38730 00006BA0 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38731                                  
 38732                                  ; Splice the result.
 38733                                  
 38734                                  DoSplice:
 38735 00006BA5 16                      	push	ss
 38736 00006BA6 1F                      	pop	ds			; back to DOSDATA
 38737 00006BA7 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38738 00006BAB 31C9                    	XOR     CX,CX
 38739 00006BAD F606[7105]FF            	TEST	byte [FSPLICE],-1
 38740 00006BB2 7403                    	JZ	short SkipSplice
 38741 00006BB4 E82A01                  	CALL    Splice                  ; replaces in place.
 38742                                  SkipSplice:
 38743                                  
 38744                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38745                                  ; device.
 38746                                  
 38747 00006BB7 16                      	push	ss
 38748 00006BB8 1F                      	pop	ds
 38749 00006BB9 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38750                                  	;test	word [es:di+67],8000h
 38751                                  	; 17/12/2022
 38752                                  	;test	byte [es:di+68],80h
 38753 00006BBD 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38754                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38755 00006BC2 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38756 00006BC4 E30B                    	JCXZ    Done
 38757 00006BC6 E82FA7                  	call	ECritDisk
 38758 00006BC9 E8F7E9                  	call	FATREAD_CDS
 38759 00006BCC E844A7                  	call	LCritDisk
 38760                                  	;mov	al, 3
 38761 00006BCF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38762                                  Done:   
 38763 00006BD1 C3                      	retn                         ; any errors in carry flag.
 38764                                  
 38765                                  ; 13/07/2018
 38766                                  
 38767                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38768                                  ;----------------------------------------------------------------------------
 38769                                  ;   Canonicalize - copy path removing . and .. entries.
 38770                                  ;
 38771                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38772                                  ;               ES:DI - point to buffer
 38773                                  ;               BX - backup limit (offset from ES) points to slash
 38774                                  ;               BP - end of buffer
 38775                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38776                                  ;                   syntax, etc.
 38777                                  ;               Carry Clear -
 38778                                  ;                   DS:DI - advanced to end of string
 38779                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38780                                  ;   Registers modified: AX CX DX (in addition to those above)
 38781                                  ;----------------------------------------------------------------------------
 38782                                  
 38783                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38784                                  
 38785                                  Canonicalize:
 38786                                  
 38787                                  ; We copy all leading path separators.
 38788                                  
 38789 00006BD2 AC                      	LODSB                           ;   while (PathChr (*s))
 38790 00006BD3 E8BAE3                  	call    PATHCHRCMP
 38791 00006BD6 7507                    	JNZ	short CanonDec
 38792 00006BD8 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38793 00006BDA 7319                    	JAE	short CanonBad		;           goto error;
 38794 00006BDC AA                      	STOSB
 38795 00006BDD EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38796                                  CanonDec:
 38797 00006BDF 4E                      	DEC     SI
 38798                                  
 38799                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38800                                  ; component (no leading path separators) and ES:DI being the destination
 38801                                  ; buffer.
 38802                                  
 38803                                  CanonLoop:
 38804                                  
 38805                                  ; If we are at the end of the source string, then we need to check to see that
 38806                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38807                                  ; Otherwise, do nothing
 38808                                  
 38809 00006BE0 31C0                    	XOR     AX,AX
 38810 00006BE2 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38811 00006BE4 751A                    	JNZ	short DoComponent
 38812 00006BE6 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38813 00006BEB 7505                    	JNZ	short DoTerminate
 38814 00006BED B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38815 00006BEF AA                      	STOSB
 38816 00006BF0 88E0                    	MOV     AL,AH
 38817                                  DoTerminate:
 38818 00006BF2 AA                      	STOSB                           ;           *d++ = 0;
 38819 00006BF3 F8                      	CLC                             ;           return (0);
 38820 00006BF4 C3                      	retn
 38821                                  
 38822                                  CanonBad:
 38823 00006BF5 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38824                                  	;mov	al,3
 38825 00006BF8 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38826 00006BFA 7402                    	JZ	short PathEnc		; path character encountered in string
 38827                                  	;mov	al,2
 38828 00006BFC B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38829                                  PathEnc:
 38830 00006BFE F9                      	STC
 38831                                  CanonBad_retn:
 38832 00006BFF C3                      	retn
 38833                                  
 38834                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38835                                  ; it to 8.3
 38836                                  
 38837                                  DoComponent:                            ;           }
 38838 00006C00 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38839 00006C03 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38840                                  
 38841                                  ; We special case the . and .. cases.  These will be backed up.
 38842                                  
 38843                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38844 00006C05 26833D2E                	CMP	WORD [ES:DI],002Eh
 38845 00006C09 7408                    	JZ	short Skip1
 38846                                  	;CMP	WORD PTR ES:[DI],'..'
 38847 00006C0B 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38848 00006C10 750A                    	JNZ	short CanonNormal
 38849 00006C12 4F                      	DEC     DI                      ;           d--;
 38850                                  Skip1:  
 38851 00006C13 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38852                                  	;mov	al,3
 38853 00006C16 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38854 00006C18 72E5                    	jc	short CanonBad_retn
 38855 00006C1A EB02                    	JMP     short CanonPath         ;           }
 38856                                  
 38857                                  ; We have a normal path. Advance destination pointer over it.
 38858                                  
 38859                                  CanonNormal:                            ;       else
 38860 00006C1C 01CF                    	ADD     DI,CX                   ;           d += ct;
 38861                                  
 38862                                  ; We have successfully copied a component. We are now pointing at a path
 38863                                  ; sep char or are pointing at a nul or are pointing at something else.
 38864                                  ; If we point at something else, then we have an error.
 38865                                  
 38866                                  CanonPath:
 38867 00006C1E E81600                  	CALL    PathSep
 38868 00006C21 75D2                    	JNZ	short CanonBad		; something else...
 38869                                  
 38870                                  ; Copy the first path char we see.
 38871                                  
 38872 00006C23 AC                      	LODSB                           ; get the char
 38873 00006C24 E869E3                  	call    PATHCHRCMP              ; is it path char?
 38874 00006C27 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38875 00006C29 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38876 00006C2B 73C8                    	JAE	short CanonBad		; yep, error.
 38877 00006C2D AA                      	STOSB                           ; copy the one byte
 38878                                  
 38879                                  ; Skip all remaining path chars
 38880                                  
 38881                                  CanonPathLoop:
 38882 00006C2E AC                      	LODSB                           ; get next byte
 38883 00006C2F E85EE3                  	call    PATHCHRCMP              ; path char again?
 38884 00006C32 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38885 00006C34 4E                      	DEC     SI                      ; back up
 38886 00006C35 EBA9                    	JMP	short  CanonLoop	; go copy component
 38887                                  
 38888                                  ;BREAK <PathSep - determine if char is a path separator>
 38889                                  ;----------------------------------------------------------------------------
 38890                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38891                                  ;   Inputs:     DS:SI - point to a char
 38892                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38893                                  ;               Zero set if AL is / \ or NUL
 38894                                  ;               Zero reset otherwise
 38895                                  ;   Registers modified: AL
 38896                                  ;----------------------------------------------------------------------------
 38897                                  
 38898                                  PathSep:
 38899 00006C37 8A04                    	MOV     AL,[SI]                 ; get the character
 38900                                  PathSepGotCh:				; already have character
 38901 00006C39 08C0                    	OR      AL,AL                   ; test for zero
 38902 00006C3B 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38903                                  	;call	PATHCHRCMP              ; check for path character
 38904                                  	;retn				; and return HIS determination
 38905                                  	; 18/12/2022
 38906 00006C3D E950E3                  	jmp	PATHCHRCMP
 38907                                  
 38908                                  
 38909                                  ;BREAK <SkipBack - move backwards to a path separator>
 38910                                  ;----------------------------------------------------------------------------
 38911                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38913                                  ;               BX has current directory back up limit (point to a / \)
 38914                                  ;   Outputs:    ES:DI backed up to point to a path char
 38915                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38916                                  ;               Carry set if illegal backup
 38917                                  ;               Carry Clear if ok
 38918                                  ;   Registers modified: DI,AL
 38919                                  ;----------------------------------------------------------------------------
 38920                                  
 38921                                  SkipBack:
 38922 00006C40 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38923 00006C42 720B                    	JB	short SkipBad		;       if (d < dlim)
 38924 00006C44 4F                      	DEC     DI                      ;           goto err;
 38925 00006C45 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38926 00006C48 E845E3                  	call    PATHCHRCMP              ;           break;
 38927 00006C4B 75F3                    	JNZ	short SkipBack		;       }
 38928 00006C4D F8                      	CLC                             ;   return (0);
 38929 00006C4E C3                      	retn				;
 38930                                  SkipBad:                                ;err:
 38931                                  	;mov	al,3
 38932 00006C4F B003                    	MOV     AL,error_path_not_found ; bad path error
 38933 00006C51 F9                      	STC                             ;   return (-1);
 38934 00006C52 C3                      	retn				;
 38935                                  
 38936                                  ;Break <CopyComponent - copy out a file path component>
 38937                                  ;----------------------------------------------------------------------------
 38938                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38939                                  ;
 38940                                  ;   Inputs:     DS:SI - source path
 38941                                  ;               ES:DI - destination
 38942                                  ;               ES:BP - end of buffer
 38943                                  ;   Outputs:    Carry Set - too long
 38944                                  ;               Carry Clear - DS:SI moved past component
 38945                                  ;                   CX has length of destination
 38946                                  ;   Registers modified: AX,CX,DX
 38947                                  ;----------------------------------------------------------------------------
 38948                                  
 38949                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38950                                  
 38951                                  CopyComponent:
 38952                                  
 38953                                  %define CopyBP	 [BP]		; word
 38954                                  %define CopyD	 [BP+2]		; dword
 38955                                  %define CopyDoff [BP+2]		; word
 38956                                  %define CopyS	 [BP+6]		; dword
 38957                                  %define CopySoff [BP+6]		; word
 38958                                  %define CopyTemp [BP+10]	; byte
 38959                                  
 38960 00006C53 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38961 00006C56 1E                      	push	ds
 38962 00006C57 56                      	push	si
 38963 00006C58 06                      	push	es
 38964 00006C59 57                      	push	di
 38965 00006C5A 55                      	push	bp
 38966 00006C5B 89E5                    	MOV     BP,SP
 38967 00006C5D B42E                    	MOV     AH,'.'
 38968 00006C5F AC                      	LODSB
 38969 00006C60 AA                      	STOSB
 38970 00006C61 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38971 00006C63 7518                    	JNZ	short NormalComp
 38972 00006C65 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38973 00006C68 740B                    	JZ	short NulTerm
 38974                                  TryTwoDot:
 38975 00006C6A AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38976 00006C6B AA                      	STOSB
 38977 00006C6C 38E0                    	CMP     AL,AH
 38978 00006C6E 7557                    	JNZ	short CopyBad
 38979 00006C70 E8C4FF                  	CALL    PathSep
 38980 00006C73 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38981                                  NulTerm:                                ;               return -1;
 38982 00006C75 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38983 00006C77 AA                      	STOSB
 38984 00006C78 897606                  	MOV     CopySoff,SI
 38985 00006C7B EB47                    	JMP     SHORT _GoodRet		;       }
 38986                                  NormalComp:                             ;   else {
 38987 00006C7D 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38988 00006C80 E84FE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38989 00006C83 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38990 00006C86 743F                    	JZ	short CopyBad		;           return (-1);
 38991 00006C88 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38992 00006C8E 7510                    	JNZ	short DoPack
 38993 00006C90 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38994 00006C93 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38995 00006C98 7F2D                    	JG	short CopyBad		;               return (-1);
 38996 00006C9A 7504                    	JNZ	short DoPack		;           else
 38997 00006C9C 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38998 00006C9E 742F                    	JZ	short CopyBadPath	;               return (-1);
 38999                                  DoPack:                                 ;           }
 39000 00006CA0 897606                  	MOV     CopySoff,SI ; [bp+6]
 39001 00006CA3 16                      	push	ss
 39002 00006CA4 1F                      	pop	ds
 39003 00006CA5 BE[4B05]                	MOV     SI,NAME1
 39004 00006CA8 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39005 00006CAB 57                      	push	di
 39006 00006CAC E8C9B3                  	call	PackName                ;       PackName (Name1, temp);
 39007 00006CAF 5F                      	pop	di
 39008 00006CB0 E823A5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39009 00006CB3 49                      	DEC     CX
 39010 00006CB4 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39011                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39012                                  	;cmp	cx,[bp+0]
 39013                                  	; 15/12/2022
 39014                                  	;cmp	cx,[bp]
 39015 00006CB7 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39016 00006CBA 730B                    	JAE	short CopyBad		;           return (-1);
 39017 00006CBC 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39018 00006CBE C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39019 00006CC1 E809A5                  	call	FStrCpy
 39020                                  _GoodRet:				;       }
 39021 00006CC4 F8                      	CLC
 39022 00006CC5 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39023                                  CopyBad:
 39024 00006CC7 F9                      	STC
 39025 00006CC8 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39026                                  	;mov	al,2
 39027 00006CCB B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39028 00006CCD 7503                    	JNZ	short CopyEnd
 39029                                  CopyBadPath:
 39030 00006CCF F9                      	STC
 39031                                  	;mov	al,3
 39032 00006CD0 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39033                                  CopyEnd:
 39034 00006CD2 5D                      	pop	bp
 39035 00006CD3 5F                      	pop	di
 39036 00006CD4 07                      	pop	es
 39037 00006CD5 5E                      	pop	si
 39038 00006CD6 1F                      	pop	ds
 39039 00006CD7 9F                      	LAHF
 39040 00006CD8 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39041 00006CDB E8F8A4                  	call	StrLen
 39042 00006CDE 49                      	DEC     CX
 39043 00006CDF 9E                      	SAHF
 39044 00006CE0 C3                      	retn
 39045                                  
 39046                                  ; 14/05/2019 - Retro DOS v4.0
 39047                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39048                                  
 39049                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39050                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39051                                  
 39052                                  ;Break <Splice - pseudo mount by string substitution>
 39053                                  ;----------------------------------------------------------------------------
 39054                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39055                                  ;       ThisCDS to point to physical drive CDS.
 39056                                  ;   Inputs:     DS:SI point to string
 39057                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39058                                  ;   Outputs:    DS:SI points to thisCDS
 39059                                  ;               ES:DI points to DPB
 39060                                  ;               String at DS:SI may be reduced in length by removing prefix
 39061                                  ;               and substituting drive letter.
 39062                                  ;               CX = 0 If no splice done
 39063                                  ;               CX <> 0 otherwise
 39064                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39065                                  ;                   left alone
 39066                                  ;               ThisDPB points to proper DPB
 39067                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39068                                  ;----------------------------------------------------------------------------
 39069                                  
 39070                                  Splice:
 39071 00006CE1 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39072 00006CE7 7469                    	JZ	short AllDone
 39073 00006CE9 36FF36[A205]            	push	word [SS:THISCDS]
 39074 00006CEE 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39075 00006CF3 1E                      	push	ds
 39076 00006CF4 56                      	push	si
 39077 00006CF5 5F                      	pop	di
 39078 00006CF6 07                      	pop	es
 39079 00006CF7 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39080                                  SpliceScan:
 39081 00006CF9 E8DFFC                  	call	GetCDSFromDrv
 39082 00006CFC 724A                    	JC	short SpliceDone
 39083 00006CFE FEC0                    	INC     AL
 39084                                  	; 17/12/2022
 39085                                  	;test	byte [si+68],20h
 39086 00006D00 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39087                                  	;;test	word [si+67],2000h
 39088                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39089 00006D04 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39090 00006D06 57                      	push	di
 39091 00006D07 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39092 00006D0A 7403                    	JZ	short SpliceFound	;
 39093                                  SpliceSkip:
 39094 00006D0C 5F                      	pop	di
 39095 00006D0D EBEA                    	JMP	short SpliceScan	;               continue;
 39096                                  SpliceFound:
 39097 00006D0F 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39098 00006D13 7508                    	JNZ	short SpliceDo
 39099 00006D15 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39100 00006D1B 75EF                    	JNZ	short SpliceSkip
 39101                                  SpliceDo:
 39102 00006D1D 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39103 00006D1F 06                      	push	es
 39104 00006D20 1F                      	pop	ds
 39105 00006D21 5F                      	pop	di
 39106 00006D22 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39107 00006D25 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39108 00006D29 09C0                    	OR      AX,AX
 39109 00006D2B 7808                    	JS	short NoPoke
 39110 00006D2D 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39111 00006D2F 29F0                    	SUB     AX,SI
 39112 00006D31 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39113                                  NoPoke:
 39114 00006D35 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39115 00006D38 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39116 00006D3A B05C                    	MOV     AL,"\"
 39117 00006D3C AA                      	STOSB
 39118                                  SpliceCopy:                             ;               strcpy (src, p);
 39119 00006D3D E88DA4                  	call	FStrCpy
 39120 00006D40 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39121 00006D43 80C901                  	OR      CL,1                    ; signal splice done.
 39122 00006D46 EB0C                    	JMP     SHORT DoSet             ;               return;
 39123                                  SpliceDone:                             ;               }
 39124 00006D48 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39125 00006D4D 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39126                                  AllDone:
 39127 00006D52 31C9                    	XOR     CX,CX
 39128                                  DoSet:
 39129 00006D54 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39130                                  	;les	di,[si+69]
 39131 00006D59 C47C45                  	LES     DI,[SI+curdir.devptr]	
 39132 00006D5C 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39133 00006D61 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39134                                  Splice_retn:
 39135 00006D66 C3                      	retn
 39136                                  
 39137                                  ; 15/05/2019 - Retro DOS v4.0
 39138                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39139                                  
 39140                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39141                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39142                                  
 39143                                  ;Break <$NameTrans - partially process a name>
 39144                                  ;----------------------------------------------------------------------------
 39145                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39146                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39147                                  ;   to Transpath playing games with devices, we need to insure that the output
 39148                                  ;   has drive letter and : in it.
 39149                                  ;
 39150                                  ;   Inputs:     DS:SI - source string for translation
 39151                                  ;               ES:DI - pointer to buffer
 39152                                  ;   Outputs:
 39153                                  ;       Carry Clear
 39154                                  ;               Buffer at ES:DI is filled in with data
 39155                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39156                                  ;       Carry Set
 39157                                  ;               AX = error_path_not_found
 39158                                  ;   Registers modified: all
 39159                                  ;----------------------------------------------------------------------------
 39160                                  
 39161                                  _$NameTrans:
 39162 00006D67 1E                      	push	ds
 39163 00006D68 56                      	push	si
 39164 00006D69 06                      	push	es
 39165 00006D6A 57                      	push	di
 39166 00006D6B 51                      	push	cx ; MSDOS 6.0
 39167                                  	
 39168                                  	; MSDOS 6.0	
 39169                                  ; M027 - Start
 39170                                  ;
 39171                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39172                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39173                                  ; device if the old call set the volume attribute bit. Note that devname in
 39174                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39175                                  ; and restore CX.
 39176                                  
 39177                                  	;mov	ch,16h
 39178 00006D6C B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39179 00006D6E E8B902                  	call	SetAttrib
 39180                                  
 39181                                  ; M027 - End
 39182                                  
 39183                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39184 00006D71 BF[BE03]                	MOV     DI,OPENBUF
 39185 00006D74 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39186 00006D77 59                      	pop	cx ; MSDOS 6.0
 39187 00006D78 5F                      	pop     di
 39188 00006D79 07                      	pop	es
 39189 00006D7A 5E                      	pop     si
 39190 00006D7B 1F                      	pop     ds
 39191 00006D7C 7303                    	JNC	short TransOK
 39192 00006D7E E9C398                  	jmp	SYS_RET_ERR
 39193                                  TransOK:
 39194 00006D81 BE[BE03]                	MOV     SI,OPENBUF
 39195 00006D84 16                      	push	ss
 39196 00006D85 1F                      	pop	ds
 39197                                  ;GotText:
 39198 00006D86 E844A4                  	call	FStrCpy
 39199 00006D89 E9AF98                  	jmp	SYS_RET_OK
 39200                                  
 39201                                  ;Break   <DriveFromText - return drive number from a text string>
 39202                                  ;----------------------------------------------------------------------------
 39203                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39204                                  ;   pointer.
 39205                                  ;
 39206                                  ;   Inputs:     DS:SI point to a text string
 39207                                  ;   Outputs:    AL has drive number
 39208                                  ;               DS:SI advanced
 39209                                  ;   Registers modified: AX,SI.
 39210                                  ;----------------------------------------------------------------------------
 39211                                  
 39212                                  DriveFromText:
 39213 00006D8C 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39214                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39215                                  	; 23/09/2023
 39216 00006D8E 3804                    	cmp	[si],al ; 0
 39217 00006D90 74D4                    	jz	short Splice_retn
 39218 00006D92 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39219 00006D96 75CE                    	jnz	short Splice_retn
 39220 00006D98 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39221 00006D99 0C20                    	OR      AL,20h
 39222                                  	;sub	al,60h
 39223 00006D9B 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39224 00006D9D 75C7                    	jnz	short Splice_retn
 39225 00006D9F B0FF                    	MOV	AL,-1                   ; nuke AL...
 39226                                  	; 23/09/2023
 39227                                  	;dec	al ; -1
 39228 00006DA1 C3                      	retn				;           }
 39229                                  
 39230                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39231                                  ;----------------------------------------------------------------------------
 39232                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39233                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39234                                  ;
 39235                                  ;   Inputs:     AL has 0-based drive number
 39236                                  ;   Outputs:    ES:DI advanced
 39237                                  ;   Registers modified: AX
 39238                                  ;----------------------------------------------------------------------------
 39239                                  
 39240                                  TextFromDrive:
 39241 00006DA2 FEC0                    	INC     AL
 39242                                  TextFromDrive1:
 39243                                  	;add	al,40h
 39244 00006DA4 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39245 00006DA6 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39246 00006DA8 AB                      	STOSW
 39247                                  PathPref_retn:
 39248 00006DA9 C3                      	retn
 39249                                  
 39250                                  ;Break   <PathPref - see if one path is a prefix of another>
 39251                                  ;----------------------------------------------------------------------------
 39252                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39253                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39254                                  ;   prefix: A:\ and A:\FOO
 39255                                  ;
 39256                                  ;   Inputs:     DS:SI potential prefix
 39257                                  ;               ES:DI string
 39258                                  ;   Outputs:    Zero set => prefix found
 39259                                  ;                   DI/SI advanced past matching part
 39260                                  ;               Zero reset => no prefix, DS/SI garbage
 39261                                  ;   Registers modified: CX
 39262                                  ;----------------------------------------------------------------------------
 39263                                  
 39264                                  PathPref:
 39265 00006DAA E837A4                  	call	DStrLen                 ; get length
 39266 00006DAD 49                      	DEC     CX                      ; do not include nul byte
 39267 00006DAE F3A6                    	REPZ    CMPSB                   ; compare
 39268 00006DB0 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39269 00006DB2 50                      	push	ax			; save char register
 39270 00006DB3 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39271 00006DB6 E8D7E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39272 00006DB9 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39273                                  NotSep:                                 ; 2/13/KK
 39274 00006DBB 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39275 00006DBE E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39276                                  Prefix:
 39277 00006DC1 58                      	pop	ax			; get back original
 39278 00006DC2 C3                      	retn
 39279                                  
 39280                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39281                                  ;----------------------------------------------------------------------------
 39282                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39283                                  ;     a path separator.
 39284                                  ;
 39285                                  ;     Input:    DS:SI target string (null terminated)
 39286                                  ;     Output:   Zero set => path separator encountered in string
 39287                                  ;               Zero clear => null encountered
 39288                                  ;     Registers modified: SI
 39289                                  ;----------------------------------------------------------------------------
 39290                                  
 39291                                  ScanPathChar:
 39292 00006DC3 AC                      	LODSB                           ; fetch a character
 39293 00006DC4 E872FE                  	call    PathSepGotCh
 39294 00006DC7 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39295                                  	;call	PATHCHRCMP              ; path separator?
 39296                                  	;retn
 39297                                  	; 18/12/2022
 39298 00006DC9 E9C4E1                  	jmp	PATHCHRCMP
 39299                                  
 39300                                  ;============================================================================
 39301                                  ; FILE.ASM, MSDOS 6.0, 1991
 39302                                  ;============================================================================
 39303                                  ; 14/07/2018 - Retro DOS v3.0
 39304                                  
 39305                                  ; 13/05/2019 - Retro DOS v4.0
 39306                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39307                                  
 39308                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39309                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39310                                  
 39311                                  ; MSDOS 2.11
 39312                                  ;BREAK <$Open - open a file handle>
 39313                                  ;----------------------------------------------------------------------------
 39314                                  ;   Assembler usage:
 39315                                  ;           LDS     DX, Name
 39316                                  ;           MOV     AH, Open
 39317                                  ;           MOV     AL, access
 39318                                  ;           INT     int_command
 39319                                  ;
 39320                                  ;       ACCESS          Function
 39321                                  ;       ------          --------
 39322                                  ;       open_for_read   file is opened for reading
 39323                                  ;       open_for_write  file is opened for writing
 39324                                  ;       open_for_both   file is opened for both reading and writing.
 39325                                  ;
 39326                                  ;   Error returns:
 39327                                  ;           AX = error_invalid_access
 39328                                  ;              = error_file_not_found
 39329                                  ;              = error_access_denied
 39330                                  ;              = error_too_many_open_files
 39331                                  ;----------------------------------------------------------------------------
 39332                                  
 39333                                  ; MSDOS 6.0
 39334                                  ;	BREAK <$Open - open a file from a path string>
 39335                                  ;----------------------------------------------------------------------------
 39336                                  ;
 39337                                  ;**	$OPen - Open a File
 39338                                  ;
 39339                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39340                                  ;	file and and returns a handle
 39341                                  ;
 39342                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39343                                  ;		(AL) = open mode
 39344                                  ;	EXIT	'C' clear if OK
 39345                                  ;		  (ax) = file handle
 39346                                  ;		'C' set if error
 39347                                  ;		  (ax) = error code
 39348                                  ;	USES	all
 39349                                  ;
 39350                                  ;----------------------------------------------------------------------------
 39351                                  
 39352                                  ; 13/05/2019 - Retro DOS v4.0
 39353                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39354                                  
 39355                                  _$OPEN:       
 39356 00006DCC 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39357                                  _$Open2:
 39358                                  	;mov	ch,16h
 39359 00006DCE B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39360 00006DD0 E85702                  	call	SetAttrib
 39361 00006DD3 B9[FA2A]                	mov	cx,DOS_OPEN
 39362                                  
 39363                                  	;xor	ah,ah  ; MSDOS 3.3
 39364                                  
 39365 00006DD6 50                      	push	ax
 39366                                  
 39367                                  ;*	General file open/create code. The $CREATE call and the various
 39368                                  ;	$OPEN calls all come here.
 39369                                  ;
 39370                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39371                                  ;	path names, etc., and then dispatch to our individual handlers.
 39372                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39373                                  ;
 39374                                  ;	(TOS) = create mode
 39375                                  ;	(CX) = address of routine to call to do actual function
 39376                                  ;	(DS:DX) = ASCIZ name
 39377                                  ;	SAttrib = Attribute mask
 39378                                  
 39379                                  ;	Get a free SFT and mark it "being allocated"
 39380                                  
 39381                                  AccessFile:
 39382 00006DD7 E81EA5                  	call	ECritSFT
 39383 00006DDA E8D8F7                  	call	SFNFree			; get a free sfn
 39384 00006DDD E833A5                  	call	LCritSFT
 39385 00006DE0 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39386 00006DE2 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39387 00006DE7 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39388 00006DEC 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39389                                  
 39390                                  ;	Find a free area in the user's JFN table.
 39391                                  
 39392 00006DF1 E8AEF7                  	call	JFNFree			; get a free jfn
 39393 00006DF4 7303                    	jnc	short SaveJFN
 39394                                  OpenFailJ:
 39395 00006DF6 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39396                                  
 39397                                  SaveJFN:
 39398 00006DF9 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39399 00006DFE 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39400 00006E03 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39401                                  
 39402                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39403                                  ;	reusing the same JFN.
 39404                                  
 39405 00006E08 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39406 00006E0D 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39407 00006E10 89D6                    	MOV	SI,DX			; get name in appropriate place
 39408 00006E12 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39409 00006E15 51                      	push	cx			; save routine to call
 39410 00006E16 E844FC                  	call	TransPath		; convert the path
 39411 00006E19 5B                      	pop	bx			; (bx) = routine to call
 39412                                  
 39413 00006E1A 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39414 00006E1F 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39415 00006E21 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39416 00006E27 7404                    	JZ	short SetSearch
 39417                                  	;mov	al,2
 39418 00006E29 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39419                                  OpenCleanJ:
 39420 00006E2B EB50                    	JMP	short OpenClean
 39421                                  
 39422                                  SetSearch:
 39423 00006E2D 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39424                                  
 39425                                  ;	We need to get the new inheritance bits.
 39426                                  
 39427 00006E2E 31C9                    	xor	cx,cx
 39428                                  	; MSDOS 6.0
 39429                                  	;mov	[si+2],cx ; 0
 39430 00006E30 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39431                                  	;mov    [si+51],cx ; 0
 39432 00006E33 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39433                                  	;
 39434 00006E36 81FB[FA2A]              	CMP	BX,DOS_OPEN
 39435 00006E3A 7509                    	JNZ	short _DoOper
 39436                                  	;test   al,80h
 39437 00006E3C A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39438 00006E3E 7405                    	JZ	short _DoOper ; 10/08/2018
 39439 00006E40 247F                    	AND	AL,7Fh			; mask off inherit bit
 39440                                  	;mov	cx,1000h
 39441 00006E42 B90010                  	MOV	CX,sf_no_inherit
 39442                                  _DoOper:
 39443                                  	;; MSDOS 3.3
 39444                                  	;;mov	word [si+2], 0
 39445                                  	;;mov	word [si+33h], 0
 39446                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39447                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39448                                  
 39449                                  	; MSDOS 6.0
 39450                                  ;**	Check if this is an extended open. If so you must set the
 39451                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39452                                  ;	Set_EXT_mode in creat.asm
 39453                                  
 39454                                  	; MSDOS 6.0
 39455                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39456 00006E45 57                      	push	di
 39457 00006E46 06                      	push	es
 39458 00006E47 1E                      	push	ds
 39459 00006E48 07                      	pop	es
 39460 00006E49 56                      	push	si
 39461 00006E4A 5F                      	pop	di			; (es:di) = SFT address
 39462 00006E4B E898BC                  	call	Set_EXT_mode
 39463                                  	;RESTORE <es, di>
 39464 00006E4E 07                      	pop	es
 39465 00006E4F 5F                      	pop	di
 39466                                  
 39467                                  	;Context DS
 39468 00006E50 16                      	push	ss
 39469 00006E51 1F                      	pop	ds	
 39470                                  
 39471 00006E52 51                      	push	cx
 39472 00006E53 FFD3                    	CALL	BX			; blam!
 39473 00006E55 59                      	pop	cx
 39474 00006E56 C536[9E05]              	LDS	SI,[THISSFT]
 39475 00006E5A 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39476                                  	;jc	short OpenE ; MSDOS 3.3
 39477                                  
 39478                                  ;	The SFT was successfully opened. Remove busy mark.
 39479                                  
 39480                                  OpenOK:
 39481                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39482 00006E5C C7040100                	mov	word [SI],1
 39483                                  	;or	[SI+5],cx
 39484 00006E60 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39485                                  
 39486                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39487                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39488                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39489                                  ;
 39490                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39491                                  ; sharer.
 39492                                  
 39493 00006E63 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39494 00006E67 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39495                                  
 39496 00006E6C 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39497                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39498                                  OpenOkj:
 39499 00006E73 E9C597                  	jmp	SYS_RET_OK		; bye with no errors
 39500                                  
 39501                                  	; MSDOS 6.0
 39502                                  ;Extended Open hooks check
 39503                                  OpenE2:					;AN000;;EO.
 39504 00006E76 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39505 00006E79 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39506 00006E7B EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39507                                  
 39508                                  ;	Extended Open hooks check
 39509                                  ;
 39510                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39511                                  
 39512                                  OpenClean:
 39513 00006E7D 5B                      	pop	bx			; clean off stack
 39514                                  OpenE:
 39515                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39516 00006E7E C7040000                	mov	word [SI],0
 39517 00006E82 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39518 00006E87 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39519 00006E8A EB02                    	JMP	SHORT OpenCritLeave
 39520                                  
 39521                                  OpenFail:
 39522 00006E8C FB                      	STI
 39523 00006E8D 59                      	pop	cx			; Clean stack
 39524                                  OpenCritLeave:
 39525 00006E8E 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39526                                  
 39527                                  	; MSDOS 6.0
 39528                                  ; File Tagging DOS 4.00
 39529 00006E95 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39530                                  					;AN000;;FT. code page mismatch
 39531 00006E9B 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39532 00006E9D E9AC97                  	jmp	From_GetSet		;AN000;;FT. yes
 39533                                  NORERR: 				;AN000;
 39534                                  ; File Tagging DOS 4.00
 39535                                  
 39536 00006EA0 E9A197                  	jmp	SYS_RET_ERR		; no free, return error
 39537                                  
 39538                                  ; MSDOS 2.11
 39539                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39540                                  ;----------------------------------------------------------------------------
 39541                                  ;   Assembler usage:
 39542                                  ;           LDS     DX, name
 39543                                  ;           MOV     AH, Creat
 39544                                  ;           MOV     CX, access
 39545                                  ;           INT     21h
 39546                                  ;       ; AX now has the handle
 39547                                  ;
 39548                                  ;   Error returns:
 39549                                  ;           AX = error_access_denied
 39550                                  ;              = error_path_not_found
 39551                                  ;              = error_too_many_open_files
 39552                                  ;----------------------------------------------------------------------------
 39553                                  
 39554                                  ; MSDOS 6.0
 39555                                  ;	BREAK <$Creat - create a brand-new file>
 39556                                  ;----------------------------------------------------------------------------
 39557                                  ;
 39558                                  ;**	$Creat - Create a File
 39559                                  ;
 39560                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39561                                  ;	initial attributes contained in CX
 39562                                  ;
 39563                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39564                                  ;		(CX) = initial attributes
 39565                                  ;	EXIT	'C' set if error
 39566                                  ;		  (ax) = error code
 39567                                  ;		'C' clear if OK
 39568                                  ;		  (ax) = file handle
 39569                                  ;	USES	all
 39570                                  ;
 39571                                  ;----------------------------------------------------------------------------
 39572                                  
 39573                                  _$CREAT:
 39574 00006EA3 51                      	push	cx			; Save attributes on stack
 39575 00006EA4 B9[D429]                	mov	CX,DOS_CREATE		; routine to call
 39576                                  AccessSet:
 39577                                  	;mov	byte [ss:SATTRIB],6
 39578 00006EA7 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39579                                  	; 10/08/2018
 39580 00006EAD E927FF                  	JMP	AccessFile		; use good ol' open
 39581                                  
 39582                                  ; MSDOS 6.0 (MSDOS 3.3)
 39583                                  ;	BREAK <$CHMOD - change file attributes>
 39584                                  ;----------------------------------------------------------------------------
 39585                                  ;
 39586                                  ;**	$CHMOD - Change File Attributes
 39587                                  ;
 39588                                  ;   Assembler usage:
 39589                                  ;	    LDS     DX, name
 39590                                  ;	    MOV     CX, attributes
 39591                                  ;	    MOV     AL,func (0=get, 1=set)
 39592                                  ;	    INT     21h
 39593                                  ;   Error returns:
 39594                                  ;	    AX = error_path_not_found
 39595                                  ;	    AX = error_access_denied
 39596                                  ;
 39597                                  ;----------------------------------------------------------------------------
 39598                                  
 39599                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39600                                  _$CHMOD:
 39601                                  	; 05/08/2018 - Retro DOS v3.0
 39602                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39603 00006EB0 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39604 00006EB3 50                      	push	ax
 39605 00006EB4 51                      	push	cx			; save function and attributes
 39606 00006EB5 89D6                    	MOV	SI,DX			; get things in appropriate places
 39607 00006EB7 E8A7FB                  	call	TransPathSet		; get correct path
 39608 00006EBA 59                      	pop	cx
 39609 00006EBB 58                      	pop	ax			; and get function and attrs back
 39610 00006EBC 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39611 00006EBE 16                      	push	ss			; set up for later possible calls
 39612 00006EBF 1F                      	pop	ds
 39613 00006EC0 803E[7A05]FF            	CMP	byte [CMETA],-1
 39614 00006EC5 754E                    	JNZ	short ChModErr
 39615                                  	;mov	byte [SATTRIB],16h
 39616 00006EC7 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39617 00006ECC 2C01                    	SUB	AL,1			; fast way to discriminate
 39618 00006ECE 720B                    	JB	short ChModGet		; 0 -> go get value
 39619 00006ED0 7417                    	JZ	short ChModSet		; 1 -> go set value
 39620                                  	;mov	byte [EXTERR_LOCUS],1
 39621 00006ED2 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39622                                  	;mov	al,1
 39623 00006ED7 B001                    	mov	al,error_invalid_function ; bad value
 39624                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39625                                  chmod_errj:	
 39626                                  	;;jmp	SYS_RET_ERR
 39627                                  	;jmp	short ChModE	
 39628 00006ED9 EBC5                    	jmp	short NORERR	; 06/12/2022
 39629                                  ChModGet:
 39630 00006EDB E8E1B9                  	call	GET_FILE_INFO		; suck out the ol' info
 39631 00006EDE 7237                    	JC	short ChModE		; error codes are already set for ret
 39632 00006EE0 E8A295                  	call	Get_User_Stack		; point to user saved vaiables
 39633                                  	;mov	[SI+4],ax
 39634 00006EE3 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39635                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39636                                  OpenOkj2:
 39637                                  	; 17/12/2022
 39638                                  	;;jmp	SYS_RET_OK		; say sayonara
 39639                                  	;jmp	short OpenOkj
 39640                                  	; 25/06/2019
 39641 00006EE6 E95597                  	jmp	SYS_RET_OK_clc
 39642                                  
 39643                                  ChModSet:
 39644 00006EE9 89C8                    	MOV	AX,CX			; get attrs in position
 39645 00006EEB E82FBA                  	call	SET_FILE_ATTRIBUTE	; go set
 39646 00006EEE 7227                    	JC	short ChModE		; errors are set
 39647                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39648                                  	;jmp	SYS_RET_OK
 39649                                  OpenOkj3:
 39650                                  	;jmp	short OpenOkj2
 39651                                  	; 17/12/2022
 39652 00006EF0 E94897                  	jmp	SYS_RET_OK
 39653                                  
 39654                                  ; 17/12/2022
 39655                                  %if 0
 39656                                  ChModErr:
 39657                                  NotFound:	; 17/12/2022
 39658                                  	;mov	al,3
 39659                                  	mov	al,error_path_not_found
 39660                                  ChModE:
 39661                                  UnlinkE:	; 17/12/2022
 39662                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39663                                  	;;jmp	SYS_RET_ERR
 39664                                  	;jmp	short chmod_errj
 39665                                  	; 17/12/2022
 39666                                  	jmp	short NORERR
 39667                                  %endif
 39668                                  
 39669                                  ; 22/05/2019 - Retro DOS v4.0
 39670                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39671                                  
 39672                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39673                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39674                                  
 39675                                  ;	BREAK <$UNLINK - delete a file entry>
 39676                                  ;----------------------------------------------------------------------------
 39677                                  ;
 39678                                  ;**	$UNLINK - Delete a File
 39679                                  ;
 39680                                  ;
 39681                                  ;	Assembler usage:
 39682                                  ;	    LDS     DX, name
 39683                                  ;	    IF VIA SERVER DOS CALL
 39684                                  ;	     MOV     CX,SEARCH_ATTRIB
 39685                                  ;	    MOV     AH, Unlink
 39686                                  ;	    INT     21h
 39687                                  ;
 39688                                  ;	ENTRY	(ds:dx) = path name
 39689                                  ;		(cx) = search_attribute, if via server_dos
 39690                                  ;	EXIT	'C' clear if no error
 39691                                  ;		'C' set if error
 39692                                  ;		  (ax) = error code
 39693                                  ;			= error_file_not_found
 39694                                  ;			= error_access_denied
 39695                                  ;
 39696                                  ;----------------------------------------------------------------------------
 39697                                  
 39698                                  _$UNLINK:
 39699 00006EF3 51                      	push	cx			; Save possible CX input parm
 39700 00006EF4 89D6                    	MOV	SI,DX			; Point at input string
 39701 00006EF6 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39702 00006EF9 E865FB                  	call	TransPathSet		; go get normalized path
 39703 00006EFC 59                      	pop	cx
 39704 00006EFD 7216                    	JC	short ChModErr		; badly formed path
 39705 00006EFF 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39706 00006F05 750E                    	JNZ	short NotFound
 39707 00006F07 16                      	push	ss
 39708 00006F08 1F                      	pop	ds
 39709                                  	;mov	ch,6
 39710 00006F09 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39711 00006F0B E81C01                  	call	SetAttrib
 39712 00006F0E E8B0B5                  	call	DOS_DELETE		; remove that file
 39713                                  	;JC	short UnlinkE 		; error is there
 39714                                  	; 17/12/2022
 39715 00006F11 728D                    	jc	short NORERR
 39716                                  
 39717                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39718                                  UnlinkOk:
 39719                                  	;jmp	SYS_RET_OK		; okey doksy
 39720 00006F13 EBDB                    	jmp	short OpenOkj3
 39721                                  
 39722                                  	; 17/12/2022
 39723                                  ChModErr:	; 17/12/2022
 39724                                  NotFound:
 39725                                  	;mov	al,3
 39726 00006F15 B003                    	MOV	AL,error_path_not_found
 39727                                  ChModE:		; 17/12/2022
 39728                                  UnlinkE:
 39729                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39730                                  	;;jmp	SYS_RET_ERR		; bye
 39731                                  	;jmp	short ChModE
 39732                                  	; 17/12/2022
 39733 00006F17 EB87                    	jmp	short NORERR
 39734                                  
 39735                                  ;BREAK <$RENAME - move directory entries around>
 39736                                  ;----------------------------------------------------------------------------
 39737                                  ;
 39738                                  ;   Assembler usage:
 39739                                  ;	    LDS     DX, source
 39740                                  ;	    LES     DI, dest
 39741                                  ;	    IF VIA SERVER DOS CALL
 39742                                  ;	      MOV   CX,SEARCH_ATTRIB
 39743                                  ;	    MOV     AH, Rename
 39744                                  ;	    INT     21h
 39745                                  ;
 39746                                  ;   Error returns:
 39747                                  ;	    AX = error_file_not_found
 39748                                  ;	       = error_not_same_device
 39749                                  ;	       = error_access_denied
 39750                                  ;
 39751                                  ;----------------------------------------------------------------------------
 39752                                  
 39753                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39754                                  _$RENAME:
 39755                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39756 00006F19 51                      	push	cx
 39757 00006F1A 1E                      	push	ds
 39758 00006F1B 52                      	push	dx			; save source and possible CX arg
 39759 00006F1C 06                      	PUSH	ES
 39760 00006F1D 1F                      	POP	DS			; move dest to source
 39761 00006F1E 89FE                    	MOV	SI,DI			; save for offsets
 39762 00006F20 BF[3E04]                	MOV	DI,RENBUF
 39763 00006F23 E83BFB                  	call	TransPathSet		; munge the paths
 39764 00006F26 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39765 00006F2B 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39766 00006F30 5E                      	pop	si
 39767 00006F31 1F                      	pop	ds
 39768 00006F32 59                      	pop	cx			; get back source and possible CX arg
 39769                                  epjc2:	
 39770 00006F33 72E0                    	JC	short ChModErr		; get old error
 39771 00006F35 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39772 00006F3B 75D8                    	JNZ	short NotFound
 39773 00006F3D 51                      	push	cx			; Save possible CX arg
 39774 00006F3E BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39775 00006F41 E81DFB                  	call	TransPathSet		; wham
 39776 00006F44 59                      	pop	cx
 39777 00006F45 72EC                    	JC	short epjc2
 39778 00006F47 16                      	push	ss
 39779 00006F48 1F                      	pop	ds
 39780 00006F49 803E[7A05]FF            	CMP	byte [CMETA],-1
 39781 00006F4E 72C5                    	JB	short NotFound
 39782                                  
 39783                                  	; MSDOS 6.0
 39784 00006F50 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39785 00006F54 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39786 00006F58 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39787 00006F5B 16                      	PUSH	SS			   ;AN000;;MS.
 39788 00006F5C 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39789 00006F5D 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39790                                  rnloop: 				   ;AN000;
 39791 00006F5F E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39792 00006F62 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39793 00006F64 E835A2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39794 00006F67 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39795 00006F69 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39796 00006F6B EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39797                                  rnerr:					   ;AN000;
 39798 00006F6D 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39799                                  	;error	error_current_directory    ;AN000;;MS.
 39800 00006F70 B010                    	mov	al,error_current_directory 
 39801                                  	;jmp	SYS_RET_ERR
 39802                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39803 00006F72 EBA3                    	jmp	short UnlinkE
 39804                                  dorn:					   ;AN000;
 39805 00006F74 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39806 00006F79 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39807                                  
 39808 00006F7E 16                      	push	ss
 39809 00006F7F 1F                      	pop	ds
 39810                                  
 39811                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39812                                  	;mov	ch,16h
 39813 00006F80 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39814                                  					; rename appropriate files
 39815 00006F82 E8A500                  	call	SetAttrib
 39816 00006F85 E80DB7                  	call	DOS_RENAME		; do the deed
 39817 00006F88 728D                    	JC	short UnlinkE 		; errors
 39818                                  
 39819                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39820                                  	;jmp	SYS_RET_OK
 39821 00006F8A EB87                    	jmp	short UnlinkOk
 39822                                  
 39823                                  
 39824                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39825                                  
 39826                                  ; 14/07/2018 - Retro DOS v3.0
 39827                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39828                                  
 39829                                  ;Break <$CreateNewFile - Create a new directory entry>
 39830                                  ;----------------------------------------------------------------------------
 39831                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39832                                  ;	was no previous directory entry, and fail if a directory entry with
 39833                                  ;	the same name existed previously.
 39834                                  ;
 39835                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39836                                  ;		CX contains default file attributes
 39837                                  ;   Outputs:	Carry Clear:
 39838                                  ;		    AX has file handle opened for read/write
 39839                                  ;		Carry Set:
 39840                                  ;		    AX has error code
 39841                                  ;   Registers modified: All
 39842                                  ;----------------------------------------------------------------------------
 39843                                  
 39844                                  _$CreateNewFile:
 39845 00006F8C 51                      	push	cx			; Save attributes on stack
 39846 00006F8D B9[9D2A]                	MOV	CX,DOS_Create_New	; routine to call
 39847 00006F90 E914FF                  	JMP	AccessSet		; use good ol' open
 39848                                  
 39849                                  ;**	BinToAscii - convert a number to a string.
 39850                                  ;----------------------------------------------------------------------------
 39851                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39852                                  ;	This routine is used to generate temp file names so we don't spend
 39853                                  ;	the time and code needed for a true hex number, we just use
 39854                                  ;	A thorugh O.
 39855                                  ;
 39856                                  ;	ENTRY	(ax) = value
 39857                                  ;		(es:di) = destination
 39858                                  ;	EXIT	(es:di) updated by 4
 39859                                  ;	USES	cx, di, flags
 39860                                  ;----------------------------------------------------------------------------
 39861                                  
 39862                                  ; MSDOS 3.3
 39863                                  ;BinToAscii:
 39864                                  ;	mov     cx,4
 39865                                  ;bta5:
 39866                                  ;	push    cx
 39867                                  ;	mov     cl,4
 39868                                  ;	rol     ax,cl
 39869                                  ;	push    ax
 39870                                  ;	and     al,0Fh
 39871                                  ;	add     al,'0'
 39872                                  ;	cmp     al,'9'
 39873                                  ;	jbe     short bta6
 39874                                  ;	add     al,7
 39875                                  ;bta6: 
 39876                                  ;	stosb
 39877                                  ;	pop     ax
 39878                                  ;	pop     cx
 39879                                  ;	loop    bta5
 39880                                  ;	retn
 39881                                  
 39882                                  ; MSDOS 6.0
 39883                                  BinToAscii:
 39884 00006F93 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39885                                  bta5:	
 39886 00006F96 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39887 00006F98 50                      	push	ax			; preserve remainder of digits
 39888 00006F99 240F                    	AND	AL,0Fh			; grab low nibble
 39889 00006F9B 0441                    	ADD	AL,'A'			; turn into ascii
 39890 00006F9D AA                      	STOSB				; drop in the character
 39891 00006F9E 58                      	pop	ax			; (ax) = shifted number
 39892 00006F9F FECD                    	dec	ch
 39893 00006FA1 75F3                    	jnz	short bta5		; process 4 digits
 39894 00006FA3 C3                      	retn
 39895                                  
 39896                                  ;Break	<$CreateTempFile - create a unique name>
 39897                                  ;----------------------------------------------------------------------------
 39898                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39899                                  ;	Method used is to get the current time, convert to a name and attempt
 39900                                  ;	a create new. Repeat until create new succeeds.
 39901                                  ;
 39902                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39903                                  ;		CX  contains default attributes
 39904                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39905                                  ;		AX has handle
 39906                                  ;   Registers modified: all
 39907                                  ;----------------------------------------------------------------------------
 39908                                  
 39909                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39910                                  
 39911                                  _$CreateTempFile:
 39912                                  	;Enter
 39913 00006FA4 55                      	push	bp
 39914 00006FA5 89E5                    	mov	bp,sp
 39915                                  
 39916                                  	;LocalVar  EndPtr,DWORD
 39917                                  	;LocalVar  FilPtr,DWORD
 39918                                  	;LocalVar  Attr,WORD
 39919                                  
 39920 00006FA7 83EC0A                  	sub	sp,10
 39921                                  
 39922                                  	;test	cx,0FFD8h
 39923 00006FAA F7C1D8FF                	test	CX,~attr_changeable
 39924 00006FAE 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39925                                  
 39926                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39927                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39928                                  ; below. The code loops on error_access_denied, but if one of the non
 39929                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39930                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39931                                  ; need to detect these cases before getting to the loop.
 39932                                  
 39933                                  	;mov	ax, 5
 39934 00006FB0 B80500                  	MOV	AX,error_access_denied
 39935 00006FB3 EB69                    	JMP	SHORT SETTMPERR
 39936                                  
 39937                                  OKatts:
 39938                                  	;MOV	attr,CX 		; save attribute
 39939 00006FB5 894EF6                  	mov     [bp-10],cx
 39940                                  	;MOV	FilPtrL,DX		; pointer to file
 39941 00006FB8 8956F8                  	mov	[bp-8],dx
 39942                                  	;MOV	FilPtrH,DS
 39943 00006FBB 8C5EFA                  	mov	[bp-6],ds
 39944                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39945 00006FBE 8C5EFE                  	mov	[bp-2],ds
 39946 00006FC1 1E                      	PUSH	DS
 39947 00006FC2 07                      	POP	ES			; destination for nul search
 39948 00006FC3 89D7                    	MOV	DI,DX
 39949 00006FC5 89F9                    	MOV	CX,DI
 39950 00006FC7 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39951                                  	; MSDOS 6.0
 39952 00006FC9 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39953 00006FCB 7501                    	JNZ	short okok		;AN000;MS. no
 39954                                  	;MOV	CX,-1			;AN000;MS.
 39955                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39956                                  	; 17/12/2022
 39957 00006FCD 49                      	dec	cx  ; mov cx,-1
 39958                                  	;mov	cx,-1 ; 0FFFh
 39959                                  okok:					;AN000;
 39960 00006FCE 31C0                    	XOR	AX,AX			;AN000;
 39961 00006FD0 F2AE                    	REPNZ	SCASB			;AN000;
 39962                                  					;AN000;
 39963 00006FD2 4F                      	DEC	DI			; point back to the null
 39964 00006FD3 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39965 00006FD7 E8B6DF                  	call	PATHCHRCMP		; Is it a path separator?
 39966 00006FDA 7403                    	JZ	short SETENDPTR		; Yes
 39967                                  STOREPTH:
 39968 00006FDC B05C                    	MOV	AL,'\'
 39969 00006FDE AA                      	STOSB				; Add a path separator (and INC DI)
 39970                                  SETENDPTR:
 39971                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39972 00006FDF 8856FC                  	mov	[bp-4],dl
 39973                                  CreateLoop:
 39974 00006FE2 16                      	push	ss			; let ReadTime see variables
 39975 00006FE3 1F                      	pop	ds
 39976 00006FE4 55                      	push	bp
 39977 00006FE5 E82D9B                  	call	READTIME		; go get time
 39978 00006FE8 5D                      	pop	bp
 39979                                  ;
 39980                                  ; Time is in CX:DX. Go drop it into the string.
 39981                                  ;
 39982                                  	;les	di,EndPtr		; point to the string
 39983 00006FE9 C47EFC                  	les	di,[BP-4]
 39984 00006FEC 89C8                    	mov	ax,cx
 39985 00006FEE E8A2FF                  	call	BinToAscii		; store upper word
 39986 00006FF1 89D0                    	mov	ax,dx
 39987 00006FF3 E89DFF                  	call	BinToAscii		; store lower word
 39988 00006FF6 30C0                    	xor	al,al
 39989 00006FF8 AA                      	STOSB				; nul terminate
 39990                                  	;LDS	DX,FilPtr		; get name
 39991 00006FF9 C556F8                  	lds	dx,[bp-8]
 39992                                  	;MOV	CX,Attr 		; get attr
 39993 00006FFC 8B4EF6                  	mov	cx,[bp-10]
 39994 00006FFF 55                      	push	bp
 39995 00007000 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39996 00007003 5D                      	pop	bp
 39997 00007004 7319                    	JNC	short CreateDone	; failed, go try again
 39998                                  
 39999                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40000                                  ; error and figure out what to do.
 40001                                  
 40002                                  	;; MSDOS 3.3			; M049 - start
 40003                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40004                                  ;;	cmp	al,error_file_exists
 40005                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40006                                  ;;	cmp	al,error_access_denied
 40007                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40008                                  
 40009                                  	; MSDOS 6.0
 40010                                  	;cmp	al,50h
 40011 00007006 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40012 00007008 74D8                    	JZ	short CreateLoop	; Y: try again
 40013                                  	;cmp	al,5
 40014 0000700A 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40015 0000700C 7510                    	JNZ	short SETTMPERR		; N: Error out
 40016                                  					; Y: Check to see if we got this due
 40017                                  					;    to the network drive. Note that
 40018                                  					;    the redir will set the exterr
 40019                                  					;    to error_cannot_make if this is 
 40020                                  					;    so. 
 40021 0000700E 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40022                                  					; See if it's REALLY an att mismatch
 40023 00007014 7408                    	je	short SETTMPERR		; no, network error, stop
 40024                                  ;M070
 40025                                  ; If the user failed on an I24, we do not want to try again
 40026                                  ;
 40027 00007016 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40028                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40029                                  
 40030                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40031                                  	; 17/12/2022
 40032 0000701C 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40033                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40034                                  	;jz	short SETTMPERR
 40035                                  	;jmp	short CreateLoop
 40036                                  
 40037                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40038                                  					; M049 - end
 40039                                  SETTMPERR:
 40040 0000701E F9                      	STC
 40041                                  CreateDone:
 40042                                  	;Leave
 40043 0000701F 89EC                    	mov	sp,bp
 40044 00007021 5D                      	pop	bp
 40045 00007022 7203                    	JC	short CreateFail
 40046 00007024 E91496                  	jmp	SYS_RET_OK		; success!
 40047                                  CreateFail:
 40048 00007027 E91A96                  	jmp	SYS_RET_ERR
 40049                                  
 40050                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40051                                  ;   (CH) or to the value in CL if the current system call is through
 40052                                  ;   serverdoscall.
 40053                                  ;
 40054                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40055                                  ;		fSharing == TRUE => set sattrib to CL
 40056                                  ;   Outputs:	none
 40057                                  ;   Registers changed:	CX
 40058                                  
 40059                                  SetAttrib:
 40060 0000702A 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 40061 00007030 7502                    	jnz	short Set
 40062 00007032 88E9                    	mov	cl,ch
 40063                                  Set:
 40064 00007034 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40065 00007039 C3                      	retn
 40066                                  
 40067                                  ; 14/07/2018 - Retro DOS v3.0
 40068                                  ; MSDOS 6.0
 40069                                  
 40070                                  ; 29/04/2019 - Retro DOS v4.0
 40071                                  
 40072                                  ;Break	<Extended_Open- Extended open the file>
 40073                                  ;----------------------------------------------------------------------------
 40074                                  ; Input: AL= 0 reserved  AH=6CH
 40075                                  ;	 BX= mode
 40076                                  ;	 CL= create attribute  CH=search attribute (from server)
 40077                                  ;	 DX= flag
 40078                                  ;	 DS:SI = file name
 40079                                  ;	 ES:DI = parm list
 40080                                  ;			   DD  SET EA list (-1) null
 40081                                  ;			   DW  n  parameters
 40082                                  ;			   DB  type (TTTTTTLL)
 40083                                  ;			   DW  IOMODE
 40084                                  ; Function: Extended Open
 40085                                  ; Output: carry clear
 40086                                  ;		     AX= handle
 40087                                  ;		     CX=1 file opened
 40088                                  ;			2 file created/opened
 40089                                  ;			3 file replaced/opened
 40090                                  ;	  carry set: AX has error code
 40091                                  ;----------------------------------------------------------------------------
 40092                                  
 40093                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40094                                  _$Extended_Open:			  ;AN000;
 40095                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40096 0000703A 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40097 0000703F 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40098                                  	; 17/12/2022
 40099 00007046 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40100                                  	;;test	dx,0FE00h
 40101                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 40102 00007049 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40103 0000704B 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40104 0000704D 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40105 00007050 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40106                                  	;and	dl,0Fh
 40107 00007052 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40108 00007055 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 40109 00007058 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 40110                                  	;and	ah,0F0h
 40111 0000705A 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40112 0000705D 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40113 00007060 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 40114                                  
 40115 00007062 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40116 00007067 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40117 0000706C 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40118 00007071 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40119 00007076 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40120 0000707B 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40121 00007080 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40122 00007085 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40123 0000708A 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40124 0000708C 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40125 0000708E EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40126                                  ext_inval2:				  ;AN000;;EO.
 40127                                  	;mov	al,1
 40128 00007090 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40129                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40130                                  eo_err:
 40131                                  	;jmp	SYS_RET_ERR
 40132 00007092 EB93                    	jmp	short CreateFail
 40133                                  
 40134                                  ext_inval_parm:				  ;AN000;EO..
 40135 00007094 59                      	POP	CX			  ;AN000;EO..  pop up satck
 40136 00007095 5E                      	POP	SI			  ;AN000;EO..
 40137                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40138                                  	;mov	al,13
 40139 00007096 B00D                    	mov	al,error_invalid_data
 40140                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40141                                  	;;jmp	SYS_RET_ERR
 40142                                  	;jmp	short eo_err
 40143                                  	; 17/12/2022
 40144 00007098 EB8D                    	jmp	short CreateFail
 40145                                  
 40146                                  	; 17/12/2022	
 40147                                  ;error_return:				  ;AN000;EO.
 40148                                  ;	retn				  ;AN000;EO.. return with error
 40149                                  
 40150                                  goopen2:				  ;AN000;
 40151                                  	; 17/12/2022
 40152                                  	;test	bh,20h				 
 40153 0000709A F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40154                                  	;;test	bx,2000h
 40155                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40156 0000709D 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40157                                  	;or	byte [SS:EXTOPEN_ON],2
 40158 0000709F 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40159                                  goopen:					  ;AN000;
 40160                                  	;or	byte [SS:EXTOPEN_ON],1 
 40161 000070A5 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40162                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40163                                  	; 18/12/2022
 40164 000070AB 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40165                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40166 000070B1 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40167 000070B7 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40168 000070B9 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40169 000070BC 723F                    	JC	short error_return	  ;AN000;;EO. error
 40170                                  
 40171 000070BE 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40172 000070C4 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40173                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40174 000070C6 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 40175 000070CD EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 40176                                  
 40177                                  	; 17/12/2022
 40178                                  ;ok_return2:
 40179                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40180                                  
 40181                                  chknext:
 40182                                  	; 17/12/2022
 40183 000070CF 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40184                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40185                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40186 000070D5 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40187 000070D7 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40188 000070DA 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40189 000070DC 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40190 000070E2 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40191 000070E4 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 40192 000070EB 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40193 000070F1 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40194 000070F3 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40195 000070FA EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40196                                  error_return2:
 40197 000070FC F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40198                                  error_return:	 ;17/12/2022
 40199 000070FD C3                      	retn				  ;AN000;;EO. return with error
 40200                                  
 40201                                  	; 17/12/2022
 40202                                  ok_return:
 40203                                  ok_return2:
 40204 000070FE E93A95                  	jmp	SYS_RET_OK
 40205                                  
 40206                                  exist_open:				  ;AN000;
 40207 00007101 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40208 00007107 7402                    	jz	short noserver		  ;AN000;;EO. no
 40209 00007109 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40210                                  noserver:
 40211 0000710B E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40212 0000710E 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40213 00007110 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40214 00007116 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40215                                  local_extopen:
 40216                                  	;cmp	ax,2
 40217 00007118 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40218 0000711B 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40219                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40220                                  	; 17/12/2022
 40221 0000711D 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40222                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40223                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40224                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40225                                  	; 17/12/2022
 40226 00007123 745D                    	jz	short extexit ; 10/06/2019
 40227                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40228                                  	;jnz	short do_creat
 40229                                  	;jmp	short extexit
 40230                                  do_creat:
 40231 00007125 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40232 0000712A 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40233 0000712F 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40234 00007131 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40235 00007134 724C                    	JC	short extexit 		  ;AN000;;EO. error
 40236                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40237 00007136 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40238                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40239 0000713D EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40240                                  
 40241                                  ext_ok:
 40242 0000713F 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40243 00007145 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40244                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40245 00007147 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40246                                  setXAttr:
 40247                                  	; 29/04/2019
 40248 0000714E 50                      	push	ax
 40249 0000714F E83393                  	call	Get_User_Stack		  ;AN000;;EO.
 40250 00007152 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40251                                  	;mov	[si+4],ax
 40252 00007156 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40253 00007159 58                      	pop	ax			  ;AN000;;EO.
 40254 0000715A 8904                    	mov	[si],ax
 40255                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40256                                  	; 17/12/2022
 40257 0000715C EBA0                    	jmp	short ok_return
 40258                                  ;ok_return:				  ;AN000;
 40259                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40260                                  
 40261                                  extexit2:				  ;AN000; ERROR RECOVERY
 40262 0000715E 5B                      	POP	BX			  ;AN000;EO. close the handle
 40263 0000715F 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 40264                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40265 00007160 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40266                                  					  ;AN000;EO. from create;smr;SS Override
 40267 00007166 750C                    	JNZ	short justopen		  ;AN000;EO.
 40268 00007168 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40269 0000716D C514                    	LDS	DX,[SI]			  ;AN000;EO.
 40270 0000716F E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40271 00007172 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 40272                                  
 40273                                  justopen:				  ;AN000;
 40274 00007174 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40275                                  reserror:				  ;AN000;
 40276 00007177 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 40277 00007178 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 40278                                  
 40279                                  ext_file_unfound:			  ;AN000;
 40280                                  	;mov	ax,2
 40281 0000717A B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40282 0000717D EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 40283                                  ext_inval:				  ;AN000;
 40284                                  	;mov	ax,1
 40285 0000717F B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 40286                                  lockoperr:	; 17/12/2022
 40287                                  extexit:
 40288 00007182 E9BF94                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40289                                  
 40290                                  ;============================================================================
 40291                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40292                                  ;============================================================================
 40293                                  ; 14/07/2018 - Retro DOS v3.0
 40294                                  ; 22/05/2019 - Retro DOS v4.0
 40295                                  
 40296                                  ;BREAK <$LockOper - Lock Calls>
 40297                                  ;----------------------------------------------------------------------------
 40298                                  ;
 40299                                  ;   Assembler usage:
 40300                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40301                                  ;	    MOV     CX, OffsetHigh
 40302                                  ;	    MOV     DX, OffsetLow
 40303                                  ;	    MOV     SI, LengthHigh
 40304                                  ;	    MOV     DI, LengthLow
 40305                                  ;	    MOV     AH, LockOper
 40306                                  ;	    MOV     AL, Request
 40307                                  ;	    INT     21h
 40308                                  ;
 40309                                  ;   Error returns:
 40310                                  ;	    AX = error_invalid_handle
 40311                                  ;	       = error_invalid_function
 40312                                  ;	       = error_lock_violation
 40313                                  ;
 40314                                  ;   Assembler usage:
 40315                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40316                                  ;
 40317                                  ;				    0? lock all
 40318                                  ;				    8? lock write
 40319                                  ;				    ?2 lock multiple
 40320                                  ;				    ?3 unlock multiple
 40321                                  ;				    ?4 lock/read
 40322                                  ;				    ?5 write/unlock
 40323                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40324                                  ;	    MOV     BX, Handle
 40325                                  ;	    MOV     CX, count or size
 40326                                  ;	    LDS     DX, buffer
 40327                                  ;	    INT     21h
 40328                                  ;
 40329                                  ;   Error returns:
 40330                                  ;	    AX = error_invalid_handle
 40331                                  ;	       = error_invalid_function
 40332                                  ;	       = error_lock_violation
 40333                                  ;
 40334                                  ;----------------------------------------------------------------------------
 40335                                  
 40336                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40337                                  _$LockOper:
 40338 00007185 3C01                    	CMP	AL,1
 40339 00007187 770B                    	JA	short lock_bad_func
 40340                                  
 40341 00007189 57                      	PUSH	DI			       ; Save LengthLow
 40342 0000718A E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 40343 0000718D 731D                    	JNC	short lock_do 		       ; have valid handle
 40344 0000718F 5F                      	POP	DI			       ; Clean stack
 40345                                  	;mov	al,6
 40346 00007190 B006                    	mov	al,error_invalid_handle
 40347                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40348                                  ;lockoperr:
 40349                                  	;jmp	SYS_RET_ERR
 40350                                  	; 17/12/2022
 40351 00007192 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 40352                                  
 40353                                  lock_bad_func:
 40354                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40355 00007194 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40356                                  	;mov	al,1
 40357 0000719A B001                    	mov	al,error_invalid_function
 40358                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40359                                  lockoperrj:
 40360                                  	;jmp	SYS_RET_ERR
 40361 0000719C EBE4                    	jmp	short lockoperr
 40362                                  
 40363                                  	; 22/05/2019 - Retro DOS v4.0
 40364                                  
 40365                                  	; MSDOS 6.0 
 40366                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40367                                  ; Dead code deleted, MD, 23 Mar 90
 40368                                  
 40369                                  ;lock_do:
 40370                                  ;	; MSDOS 3.3
 40371                                  ;	or	al,al
 40372                                  ;	pop	ax
 40373                                  ;	jz	short DOS_Lock
 40374                                  ;DOS_Unlock:
 40375                                  ;	;test	word [es:di+5],8000h
 40376                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40377                                  ;	JZ	short LOCAL_UNLOCK
 40378                                  ;	push    ax
 40379                                  ;	mov     ax,110Bh
 40380                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40381                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40382                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40383                                  ;			; SFT DPB field -> DPB of drive containing file
 40384                                  ;			; Return: CF set error
 40385                                  ;	pop     bx
 40386                                  ;	jmp     short ValChk
 40387                                  ;
 40388                                  ;LOCAL_UNLOCK:
 40389                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40390                                  ;ValChk:
 40391                                  ;	JNC	short Lock_OK
 40392                                  ;lockerror:
 40393                                  ;	jmp	SYS_RET_ERR
 40394                                  ;Lock_OK:
 40395                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40396                                  ;	jmp	SYS_RET_OK
 40397                                  ;DOS_Lock:
 40398                                  ;	;test	word [es:di+5],8000h
 40399                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40400                                  ;	JZ	short LOCAL_LOCK
 40401                                  ;	;CallInstall NET_XLock,MultNET,10
 40402                                  ;	mov     ax, 110Ah
 40403                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40404                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40405                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40406                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40407                                  ;			; Return: CF set error
 40408                                  ;	JMP	short ValChk
 40409                                  ;
 40410                                  ;LOCAL_LOCK:
 40411                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40412                                  ;	JMP	short ValChk
 40413                                  
 40414                                  ; 17/12/2022
 40415                                  LOCAL_UNLOCK:
 40416                                  	; MSDOS 3.3
 40417                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40418                                  	; MSDOS 6.0
 40419 0000719E FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40420                                  ValChk:
 40421 000071A2 7302                    	JNC	short Lock_OK
 40422                                  lockerror:
 40423                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40424                                  	;;jmp	SYS_RET_ERR
 40425                                  	;jmp	short lockoperrj
 40426                                  	; 17/12/2022
 40427 000071A4 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40428                                  Lock_OK:
 40429                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40430                                  	; 10/06/2019
 40431 000071A6 A1[0C06]                	mov	ax,[TEMP_VAR]
 40432 000071A9 E98F94                  	jmp	SYS_RET_OK
 40433                                  
 40434                                  	; 22/05/2019
 40435                                  lock_do:
 40436                                  	; MSDOS 6.0
 40437 000071AC 89C3                    	MOV	BX,AX				; save AX
 40438 000071AE BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40439                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40440                                  	;;mov	[bp+0],dx
 40441                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40442                                  	; 15/12/2022
 40443 000071B1 895600                  	mov	[bp],dx
 40444                                  	;mov	[bp+2],cx
 40445 000071B4 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40446 000071B7 59                      	POP	CX				; get low length
 40447                                  	;mov	[bp+4],cx
 40448 000071B8 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40449                                  	;mov	[bp+6],si
 40450 000071BB 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40451 000071BE B90100                  	MOV	CX,1				; one range
 40452                                  
 40453                                  ;	PUSH	CS				;
 40454                                  ;	POP	DS				; DS:DX points to
 40455                                  
 40456 000071C1 16                      	push	ss
 40457 000071C2 1F                      	pop	ds
 40458                                  
 40459 000071C3 89EA                    	MOV	DX,BP				; Lock_Buffer
 40460                                  	;test	al,1
 40461 000071C5 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40462                                  	;JNZ	short DOS_Unlock		; yes
 40463                                  	;JMP	short DOS_Lock			; function 0
 40464                                  	; 17/12/2022
 40465                                  	; 10/06/2019
 40466 000071C7 740E                    	jz	short DOS_Lock
 40467                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40468                                  	;JNZ	short DOS_Unlock
 40469                                  	;JMP	short DOS_Lock
 40470                                  
 40471                                  DOS_Unlock:
 40472                                  	;;test	word [es:di+5],8000h
 40473                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40474 000071C9 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40475 000071CE 74CE                    	JZ	short LOCAL_UNLOCK
 40476                                  
 40477                                  lock_unlock: ; 22/05/2019
 40478                                  	
 40479                                  	;CallInstall Net_Xlock,MultNET,10
 40480                                  	
 40481                                  	; MSDOS 3.3
 40482                                  	;mov     ax,110Bh
 40483                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40484                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40485                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40486                                  			; SFT DPB field -> DPB of drive containing file
 40487                                  			; Return: CF set error
 40488                                  	; MSDOS 6.0
 40489 000071D0 B80A11                  	mov     ax,110Ah
 40490 000071D3 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40491                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40492                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40493                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40494                                  			; Return: CF set error
 40495                                  
 40496 000071D5 EBCB                    	JMP	SHORT ValChk
 40497                                  
 40498                                  ; 17/12/2022
 40499                                  %if 0
 40500                                  LOCAL_UNLOCK:
 40501                                  	; MSDOS 3.3
 40502                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40503                                  	; MSDOS 6.0
 40504                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40505                                  ValChk:
 40506                                  	JNC	short Lock_OK
 40507                                  lockerror:
 40508                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40509                                  	;jmp	SYS_RET_ERR
 40510                                  	jmp	short lockoperrj
 40511                                  Lock_OK:
 40512                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40513                                  	; 10/06/2019
 40514                                  	mov	ax,[TEMP_VAR]
 40515                                  	jmp	SYS_RET_OK
 40516                                  %endif
 40517                                  
 40518                                  DOS_Lock:
 40519                                  	;;test	word [es:di+5],8000h
 40520                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40521 000071D7 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40522 000071DC 7407                    	JZ	short LOCAL_LOCK
 40523                                  
 40524                                  	;CallInstall NET_XLock,MultNET,10
 40525                                  
 40526 000071DE B80A11                  	mov     ax,110Ah
 40527 000071E1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40528                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40529                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40530                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40531                                  			; Return: CF set error
 40532                                  
 40533 000071E3 EBBD                    	JMP	short ValChk
 40534                                  
 40535                                  LOCAL_LOCK:
 40536                                  	; MSDOS 3.3
 40537                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40538                                  	; MSDOS 6.0
 40539 000071E5 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40540                                  
 40541 000071E9 EBB7                    	JMP	short ValChk
 40542                                  
 40543                                  ; 14/07/2018 - Retro DOS v3.0
 40544                                  ; LOCK_CHECK
 40545                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40546                                  
 40547                                  ;----------------------------------------------------------------------------
 40548                                  ; Inputs:
 40549                                  ;	Outputs of SETUP
 40550                                  ;	[USER_ID] Set
 40551                                  ;	[PROC_ID] Set
 40552                                  ; Function:
 40553                                  ;	Check for lock violations on local I/O
 40554                                  ;	Retries are attempted with sleeps in between
 40555                                  ; Outputs:
 40556                                  ;    Carry clear
 40557                                  ;	Operation is OK
 40558                                  ;    Carry set
 40559                                  ;	A lock violation detected
 40560                                  ; Outputs of SETUP preserved
 40561                                  ;----------------------------------------------------------------------------
 40562                                  
 40563                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40564                                  	; 22/05/2019 - Retro DOS v4.0
 40565                                  LOCK_CHECK:
 40566 000071EB 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40567                                  LockRetry:
 40568 000071EF 53                      	push	bx		; save regs
 40569 000071F0 50                      	push	ax ; MSDOS 6.0
 40570                                  
 40571                                  	;MSDOS 3.3
 40572                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40573                                  	;MSDOS 6.0
 40574 000071F1 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40575                                  
 40576 000071F5 58                      	pop	ax ; MSDOS 6.0
 40577 000071F6 5B                      	pop	bx		; restrore regs
 40578 000071F7 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40579                                  LockN:
 40580 000071F9 E8F59F                  	call	Idle		; wait a while
 40581 000071FC 4B                      	DEC	BX		; remember a retry
 40582 000071FD 75F0                    	JNZ	short LockRetry	; more retries left...
 40583 000071FF F9                      	STC
 40584                                  lc_ret_label:
 40585 00007200 C3                      	retn
 40586                                  
 40587                                  ; 14/07/2018 - Retro DOS v3.0
 40588                                  ; LOCK_VIOLATION
 40589                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40590                                  
 40591                                  ;----------------------------------------------------------------------------
 40592                                  ; Inputs:
 40593                                  ;	[THISDPB] set
 40594                                  ;	[READOP] indicates whether error on read or write
 40595                                  ; Function:
 40596                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40597                                  ; Outputs:
 40598                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40599                                  ;	Carry clear if user wants a retry
 40600                                  ;
 40601                                  ; DS, ES, DI, CX preserved, others destroyed
 40602                                  ;----------------------------------------------------------------------------
 40603                                  
 40604                                  LOCK_VIOLATION:
 40605 00007201 1E                      	PUSH	DS
 40606 00007202 06                      	PUSH	ES
 40607 00007203 57                      	PUSH	DI
 40608 00007204 51                      	PUSH	CX
 40609                                  	;mov	ax,21h
 40610 00007205 B82100                  	MOV	AX,error_lock_violation
 40611                                  	;mov	byte [ALLOWED],18h
 40612 00007208 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40613 0000720D C42E[8A05]              	LES	BP,[THISDPB]
 40614 00007211 BF0100                  	MOV	DI,1		; Fake some registers
 40615 00007214 89F9                    	MOV	CX,DI
 40616                                  	;mov	dx,[es:bp+11]
 40617 00007216 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40618 0000721A E8D8DF                  	call	HARDERR
 40619 0000721D 59                      	POP	CX
 40620 0000721E 5F                      	POP	DI
 40621 0000721F 07                      	POP	ES
 40622 00007220 1F                      	POP	DS
 40623 00007221 3C01                    	CMP	AL,1
 40624 00007223 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40625 00007225 F9                      	STC
 40626 00007226 C3                      	retn
 40627                                  
 40628                                  ; 14/07/2018 - Retro DOS v3.0
 40629                                  
 40630                                  ;----------------------------------------------------------------------------
 40631                                  
 40632                                  ;	do a retz to return error
 40633                                  
 40634                                  	; 22/05/2019 - Retro DOS v4.0
 40635                                  CheckShare:
 40636                                  	; MSDOS 3.3
 40637                                  	;cmp	byte [cs:fShare],0
 40638                                  	;retn
 40639                                  
 40640                                  	; MSDOS 6.0
 40641 00007227 1E                      	push	ds			;smr;
 40642                                  	;getdseg <ds>			; ds -> dosdata
 40643 00007228 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40644 0000722D 803E[0303]00            	cmp	byte [fShare],0
 40645 00007232 1F                      	pop	ds			;smr;
 40646 00007233 C3                      	retn
 40647                                  	
 40648                                  ;============================================================================
 40649                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40650                                  ;============================================================================
 40651                                  ; 14/07/2018 - Retro DOS v3.0
 40652                                  ; 22/05/2019 - Retro DOS v4.0
 40653                                  
 40654                                  ; SHARE_CHECK
 40655                                  ;----------------------------------------------------------------------------
 40656                                  ; Inputs:
 40657                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40658                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40659                                  ;       [WFP_START] has full path of name
 40660                                  ;       [USER_ID] Set
 40661                                  ;       [PROC_ID] Set
 40662                                  ; Function:
 40663                                  ;       Check for sharing violations on local file/device access
 40664                                  ; Outputs:
 40665                                  ;    Carry clear
 40666                                  ;       Sharing approved
 40667                                  ;    Carry set
 40668                                  ;       A sharing violation detected
 40669                                  ;           AX is error code
 40670                                  ; USES    ALL but DS
 40671                                  ;----------------------------------------------------------------------------
 40672                                  
 40673                                  	; 22/05/2019 - Retro DOS v4.0
 40674                                  SHARE_CHECK:
 40675                                  	; 26/07/2019
 40676 00007234 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40677                                  shchk_retn:
 40678 00007238 C3                      	retn
 40679                                  
 40680                                  ; SHARE_VIOLATION
 40681                                  ;----------------------------------------------------------------------------
 40682                                  ; Inputs:
 40683                                  ;       [THISDPB] Set
 40684                                  ;       AX has error code
 40685                                  ; Function:
 40686                                  ;       Handle Sharing errors
 40687                                  ; Outputs:
 40688                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40689                                  ;       Carry clear if user wants a retry
 40690                                  ;
 40691                                  ; DS, ES, DI preserved, others destroyed
 40692                                  ;----------------------------------------------------------------------------
 40693                                  
 40694                                  SHARE_VIOLATION:
 40695 00007239 1E                      	PUSH    DS
 40696 0000723A 06                      	PUSH	ES
 40697 0000723B 57                      	PUSH    DI
 40698 0000723C C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40699                                  	;mov	byte [ALLOWED],18h
 40700 00007241 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40701 00007246 C42E[8A05]              	LES     BP,[THISDPB]
 40702 0000724A BF0100                  	MOV     DI,1			; Fake some registers
 40703 0000724D 89F9                    	MOV     CX,DI
 40704                                  	;mov	dx,[es:bp+17]
 40705 0000724F 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40706 00007253 E89FDF                  	call	HARDERR
 40707 00007256 5F                      	POP     DI
 40708 00007257 07                      	POP	ES
 40709 00007258 1F                      	POP     DS
 40710 00007259 3C01                    	CMP     AL,1
 40711 0000725B 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40712 0000725D F9                      	STC
 40713 0000725E C3                      	retn
 40714                                  
 40715                                  ;----------------------------------------------------------------------------
 40716                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40717                                  ;       NOT perform a close, it merely asserts that the sharing information
 40718                                  ;       for the SFT/UID/PID may be safely released.
 40719                                  ;
 40720                                  ;   Inputs:     ES:DI points to an SFT
 40721                                  ;   Outputs:    None
 40722                                  ;   Registers modified: all except DS,ES,DI
 40723                                  ;----------------------------------------------------------------------------
 40724                                  
 40725                                  ShareEnd:
 40726                                  	; 26/07/2019
 40727 0000725F FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40728 00007263 C3                      	retn
 40729                                  
 40730                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40731                                  ;----------------------------------------------------------------------------
 40732                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40733                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40734                                  ;
 40735                                  ;   Inputs:     ThisSFT points to the SFT
 40736                                  ;               WFP_Start points to the WFP
 40737                                  ;   Outputs:    Carry clear => successful entry
 40738                                  ;               Carry set => failed system call
 40739                                  ;   Registers modified: all
 40740                                  ;----------------------------------------------------------------------------
 40741                                  
 40742                                  ShareEnter:
 40743 00007264 51                      	push	cx
 40744                                  retry:
 40745 00007265 8B0E[1A00]              	mov     cx,[RetryCount]
 40746                                  attempt:
 40747 00007269 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40748 0000726D 31C0                    	XOR     AX,AX
 40749                                   	;mov	[es:di+51],axfff
 40750 0000726F 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40751 00007273 51                      	push	cx
 40752 00007274 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40753 00007277 59                      	pop	cx
 40754 00007278 730A                    	jnc	short done		; success, let the user see this
 40755 0000727A E8749F                  	call	Idle                    ; wait a while
 40756 0000727D E2EA                    	loop    attempt                 ; go back for another attempt
 40757 0000727F E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40758 00007282 73E1                    	jnc	short retry		; user said to retry, go do it
 40759                                  done:
 40760 00007284 59                      	pop	cx
 40761 00007285 C3                      	retn
 40762                                  
 40763                                  ;============================================================================
 40764                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40765                                  ;============================================================================
 40766                                  ; 29/04/2019 - Retro DOS 4.0
 40767                                  
 40768                                  ;** EXEPATCH.ASM 
 40769                                  ;----------------------------------------------------------------------------
 40770                                  ;	Contains the foll:
 40771                                  ;
 40772                                  ;		- code to find and overlay buggy unpack code
 40773                                  ;		- new code to be overlayed on buggy unpack code 
 40774                                  ;		- old code sequence to identify buggy unpack code
 40775                                  ;
 40776                                  ;	Revision history:
 40777                                  ;
 40778                                  ;		Created: 5/14/90
 40779                                  ;----------------------------------------------------------------------------
 40780                                  
 40781                                  ;----------------------------------------------------------------------------
 40782                                  ;
 40783                                  ; M020 : Fix for rational bug - for details see routine header
 40784                                  ; M028 : 4b04 implementation
 40785                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40786                                  ; M032 : set turnoff bit only if DOS in HMA.
 40787                                  ; M033 : if IP < 2 then not exepacked.
 40788                                  ; M046 : support for a 4th version of exepacked files.
 40789                                  ; M068 : support for copy protected apps.
 40790                                  ; M071 : use A20OFF_COUNT of 10.
 40791                                  ;
 40792                                  ;----------------------------------------------------------------------------
 40793                                  
 40794                                  PATCH1_COM_OFFSET	EQU	06CH
 40795                                  PATCH1_OFFSET		EQU	028H
 40796                                  PATCH1_CHKSUM		EQU	0EF4EH
 40797                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40798                                  
 40799                                  PATCH2_COM_OFFSET	EQU	076H
 40800                                  PATCH2_OFFSET		EQU	032H
 40801                                  
 40802                                  	; The strings that start at offset 076h have two possible 
 40803                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40804                                  
 40805                                  PATCH2_CHKSUM		EQU	78B2H
 40806                                  CHKSUM2_LEN		EQU	119H/2
 40807                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40808                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40809                                  
 40810                                  PATCH3_COM_OFFSET	EQU	074H
 40811                                  PATCH3_OFFSET		EQU	032H
 40812                                  PATCH3_CHKSUM		EQU	4EDEH
 40813                                  CHKSUM3_LEN		EQU	117H/2
 40814                                  
 40815                                  ;**	Data structure passed for ExecReady call
 40816                                  ;
 40817                                  ;struc ERStruc
 40818                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40819                                  ; .ER_Flags:	resw	1
 40820                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40821                                  ; .ER_PSP:	resw	1	; PSP of the program
 40822                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40823                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40824                                  ; .size:
 40825                                  ;endstruc
 40826                                  
 40827                                  ;DOSCODE SEGMENT
 40828                                  
 40829                                  	; 22/05/2019 - Retro DOS v4.0
 40830                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40831                                  
 40832                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40833                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40834                                  
 40835                                  ; M028 - BEGIN
 40836                                  
 40837                                  ;--------------------------------------------------------------------------
 40838                                  ;
 40839                                  ;	Procedure Name		: ExecReady
 40840                                  ;
 40841                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40842                                  ;
 40843                                  ;--------------------------------------------------------------------------
 40844                                  
 40845                                  ExecReady:
 40846 00007286 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40847                                  	;;test	word [si+2],1
 40848                                  	; 17/12/2022
 40849 00007288 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40850                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40851 0000728C 7413                    	jz	short er_setver		; only setver for .COM files
 40852                                  
 40853                                  	;mov	ax,[si+8]
 40854 0000728E 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40855 00007291 83C010                  	add	ax,10h
 40856 00007294 8EC0                    	mov	es,ax
 40857                                  
 40858                                  	;mov	cx,[si+10]
 40859 00007296 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40860                                  	;mov	cx,[si+12]
 40861 00007299 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40862                                  
 40863                                  	;call	[ss:FixExePatch]
 40864 0000729C 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 40865                                  	
 40866                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40867                                  	;call	[ss:Rational386PatchPtr]
 40868                                  
 40869                                  er_setver:
 40870                                  	;;test	word [si+2],2		; Q: is this an overlay
 40871                                  	; 17/12/2022
 40872 000072A1 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40873                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40874 000072A5 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40875                                  					; N: set up lie version first
 40876 000072A7 1E                      	push	ds
 40877 000072A8 56                      	push	si
 40878                                  	;lds	si,[si+4]
 40879 000072A9 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40880 000072AC E876ED                  	call	Scan_Execname1
 40881 000072AF E887ED                  	call	Scan_Special_Entries
 40882 000072B2 5E                      	pop	si
 40883 000072B3 1F                      	pop	ds
 40884                                  	;mov	es,[si+8]
 40885 000072B4 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40886 000072B7 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40887 000072BB 26A34000                	mov	[es:PDB.Version],ax
 40888                                  
 40889                                  er_chkdoshi:
 40890 000072BF 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40891 000072C5 741F                    	je	short er_done		; M032: N: done
 40892                                  
 40893                                  					; M068 - Start
 40894                                  	;mov	ax,[si+8]
 40895 000072C7 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40896                                  
 40897                                  	;or	byte [ss:DOS_FLAG],4
 40898 000072CA 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40899                                  					; ah = 25 & ah= 49. See dossym.inc 
 40900                                  					; under TAG M003 & M009 for 
 40901                                  					; explanation
 40902                                  	;;test	word [si+2],1
 40903                                  	; 17/12/2022
 40904 000072D0 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40905                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40906 000072D4 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40907                                  					;    a20off_psp and ret
 40908 000072D6 1E                         	push	ds
 40909 000072D7 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40910 000072D9 E88E02                  	call	IsCopyProt		; check if copy protected
 40911 000072DC 1F                      	pop	ds
 40912                                  
 40913                                  er_setA20:
 40914                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40915                                  	; is non-zero at this point it indicates that the A20 is to be 
 40916                                  	; turned off for that many int 21 calls made by the app. In 
 40917                                  	; addition the A20 has to be turned off when we exit from this 
 40918                                  	; call. Hence the inc.
 40919                                  
 40920 000072DD 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40921 000072E2 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40922                                  					; turned OFF.
 40923                                  er_done:				; M068 - End
 40924 000072E6 31C0                    	xor	ax,ax
 40925 000072E8 C3                      	retn
 40926                                  
 40927                                  ; M028 - END
 40928                                  
 40929                                  
 40930                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40931                                  %if 0
 40932                                  
 40933                                  ;----------------------------------------------------------------------------
 40934                                  ;
 40935                                  ; procedure : Rational386Patch
 40936                                  ;
 40937                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40938                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40939                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40940                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40941                                  ;
 40942                                  ; This routine applies patches to the Rational DOS Extender to work around
 40943                                  ; most of the register trashing bugs.
 40944                                  ;
 40945                                  ; Note that there are additional register trashing bugs not fixed by these
 40946                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40947                                  ; may be modified on interrupts.
 40948                                  ;
 40949                                  ; There are two different Rational DOS Extender patchs in this module.
 40950                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40951                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40952                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40953                                  ; or not.
 40954                                  ;
 40955                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40956                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40957                                  ; running in the HMA.
 40958                                  ;
 40959                                  ; This patch detection and replacement is based on an example supplied by
 40960                                  ; Ben Williams at Rational.
 40961                                  ;
 40962                                  ;----------------------------------------------------------------------------
 40963                                  
 40964                                  ; 22/05/2019 - Retro DOS v4.0
 40965                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40966                                  
 40967                                  ;----------------------------------------------------------------------------
 40968                                  ;
 40969                                  ; INPUT : ES = segment where program got loaded
 40970                                  ;
 40971                                  ;----------------------------------------------------------------------------
 40972                                  
 40973                                  rpFind1:
 40974                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40975                                  
 40976                                  rpFind1Len equ	$ - rpFind1
 40977                                  
 40978                                  ;	cli
 40979                                  ;	in	al, 21h
 40980                                  ;	pusha
 40981                                  ;	xor	ax, ax
 40982                                  ;	out	43h, al
 40983                                  ;	mov	dx, ...
 40984                                  
 40985                                  rpFind1a:
 40986                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40987                                  
 40988                                  rpFind1aLen equ	$ - rpFind1a
 40989                                  
 40990                                  ;	mov	al, 0Eh
 40991                                  ;	out	37h, al
 40992                                  ;	xor	ax, ax
 40993                                  ;	out	0F2h, al
 40994                                  
 40995                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40996                                  
 40997                                  rpFind2:
 40998                                  	db	0Fh, 20h, 0C0h
 40999                                  
 41000                                  rpFind2Len equ	$ - rpFind2
 41001                                  
 41002                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41003                                  
 41004                                  rpFind3:
 41005                                  	db	0Fh, 22h, 0C0h, 0EAh
 41006                                  
 41007                                  rpFind3Len equ	$ - rpFind3
 41008                                  
 41009                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41010                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41011                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41012                                  
 41013                                  ; note, there is no rpRepl1 string
 41014                                  
 41015                                  rpRepl2:
 41016                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41017                                  
 41018                                  rpRepl2Len equ	$ - rpRepl2
 41019                                  
 41020                                  ;	push	eax
 41021                                  ;	push	cx
 41022                                  ;	mov	eax, cr0
 41023                                  
 41024                                  rpRepl3:
 41025                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41026                                  
 41027                                  rpRepl3Len equ	$ - rpRepl3
 41028                                  
 41029                                  ;	mov	ss, bx
 41030                                  ;	pop	cx
 41031                                  ;	pop	eax
 41032                                  
 41033                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41034                                  
 41035                                  rpFind4:
 41036                                  	db	93h, 58h, 8Bh, 0CCh
 41037                                  
 41038                                  rpFind4Len equ	$ - rpFind4
 41039                                  
 41040                                  ;	xchg	bx, ax
 41041                                  ;	pop	ax
 41042                                  ;	mov	cx, sp
 41043                                  
 41044                                  rpFind5:
 41045                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41046                                  
 41047                                  rpFind5Len equ	$ - rpFind5
 41048                                  
 41049                                  ;	mov	ax, DE0Ch
 41050                                  ;	int	67h
 41051                                  ;	mov	sp, cx
 41052                                  ;	jmp	bx
 41053                                  
 41054                                  rpRepl4:
 41055                                  	db	93h, 58h, 8Bh, 0CCh
 41056                                  	db	02Eh, 066h, 0A3h
 41057                                  
 41058                                  rpRepl4o1Len equ $ - rpRepl4
 41059                                  
 41060                                  	db	00h, 00h
 41061                                  	db	02Eh, 066h, 89h, 36h
 41062                                  
 41063                                  rpRepl4o2Len equ $ - rpRepl4
 41064                                  
 41065                                  	db	00h, 00h
 41066                                  
 41067                                  rpRepl4Len equ	$ - rpRepl4
 41068                                  
 41069                                  ;	xchg	bx, ax
 41070                                  ;	pop	ax
 41071                                  ;	mov	cx, sp
 41072                                  ;	mov	dword ptr cs:[xxxx], eax
 41073                                  ;	mov	dword ptr cs:[xxxx], esi
 41074                                  
 41075                                  rpRepl5:
 41076                                  	db	8Bh, 0E1h
 41077                                  	db	2Eh, 66h, 0A1h
 41078                                  
 41079                                  rpRepl5o1Len equ $ - rpRepl5
 41080                                  
 41081                                  	db	00h, 00h
 41082                                  	db	2Eh, 66h, 8Bh, 36h
 41083                                  
 41084                                  rpRepl5o2Len equ $ - rpRepl5
 41085                                  
 41086                                  	db	00h, 00h
 41087                                  	db	0FFh, 0E3h
 41088                                  
 41089                                  rpRepl5Len equ	$ - rpRepl5
 41090                                  
 41091                                  ;	mov	sp, cx
 41092                                  ;	mov	eax, dword ptr cs:[xxxx]
 41093                                  ;	mov	esi, dword ptr cs:[xxxx]
 41094                                  ;	jmp	bx
 41095                                  
 41096                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41097                                  
 41098                                  rpFind6:
 41099                                  	db	0FAh, 52h, 51h
 41100                                  
 41101                                  rpFind6Len equ	$ - rpFind6
 41102                                  
 41103                                  ;	cli
 41104                                  ;	push	dx
 41105                                  ;	push	cx
 41106                                  
 41107                                  rpFind7a:
 41108                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41109                                  
 41110                                  rpFind7aLen equ	$ - rpFind7a
 41111                                  
 41112                                  ;	mov	ax, 0DE0Ch
 41113                                  ;	call	fword ptr es:[xxxx]
 41114                                  
 41115                                  rpFind7b:
 41116                                  	db	59h, 5Ah, 5Bh
 41117                                  
 41118                                  rpFind7bLen equ	$ - rpFind7b
 41119                                  
 41120                                  ;	pop	cx
 41121                                  ;	pop	dx
 41122                                  ;	pop	bx
 41123                                  
 41124                                  rpRepl6 :
 41125                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41126                                  
 41127                                  rpRepl6Len equ	$ - rpRepl6
 41128                                  
 41129                                  ;	cli
 41130                                  ;	push	eax
 41131                                  ;	push	ebx
 41132                                  ;	push	ecx
 41133                                  ;	push	edx
 41134                                  
 41135                                  rpRepl7:
 41136                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41137                                  
 41138                                  rpRepl7Len equ	$ - rpRepl7
 41139                                  
 41140                                  ;	pop	edx
 41141                                  ;	pop	ecx
 41142                                  ;	pop	ebx
 41143                                  ;	pop	eax
 41144                                  ;	pop	bx
 41145                                  
 41146                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41147                                  
 41148                                  rpFind8:
 41149                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41150                                  
 41151                                  rpFind8Len equ	$ - rpFind8
 41152                                  
 41153                                  ;	pusha
 41154                                  ;	push	es
 41155                                  ;	push	ds
 41156                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41157                                  ;	mov	ds, ax
 41158                                  
 41159                                  rpFind9 :
 41160                                  	db	1Fh, 07h, 61h
 41161                                  
 41162                                  rpFind9Len equ	$ - rpFind9
 41163                                  
 41164                                  ;	pop	ds
 41165                                  ;	pop	es
 41166                                  ;	popa
 41167                                  
 41168                                  rpRepl8:
 41169                                   	db	66h, 60h, 06h, 1Eh
 41170                                  
 41171                                  rpRepl8Len equ	$ - rpRepl8
 41172                                  
 41173                                  ;	pushad
 41174                                  ;	push	es
 41175                                  ;	push	ds
 41176                                  
 41177                                  rpRepl9:
 41178                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41179                                  
 41180                                  rpRepl9Len equ	$ - rpRepl9
 41181                                  
 41182                                  ;	pop	ds
 41183                                  ;	pop	es
 41184                                  ;	popad
 41185                                  ;	retn			;no need to jmp back to main-line
 41186                                  
 41187                                  ;----------------------------------------------------------------------------
 41188                                  
 41189                                  struc SearchPair
 41190                                   .sp_off1: resw 1	; offset of 1st search string
 41191                                   .sp_len1: resw 1	; length of 1st search string
 41192                                   .sp_off2: resw 1	; 2nd string
 41193                                   .sp_len2: resw 1	; 2nd string
 41194                                   .sp_diff: resw 1	; max difference between offsets
 41195                                   .size:
 41196                                  endstruc
 41197                                  
 41198                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41199                                  
 41200                                  rpBug1Strs:
 41201                                  	dw	rpFind2
 41202                                  	dw	rpFind2Len ; 3
 41203                                  	dw	rpFind3
 41204                                  	dw	rpFind3Len ; 4
 41205                                  	dw	20h
 41206                                  
 41207                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41208                                  
 41209                                  rpBug2Strs:
 41210                                  	dw	rpFind4
 41211                                  	dw	rpFind4Len ; 4
 41212                                  	dw	rpFind5
 41213                                  	dw	rpFind5Len ; 9
 41214                                  	dw	80h
 41215                                  
 41216                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41217                                  
 41218                                  rpBug3Strs:
 41219                                  	dw	rpFind6
 41220                                  	dw	rpFind6Len ; 3
 41221                                  	dw	rpFind7a
 41222                                  	dw	rpFind7aLen ; 7
 41223                                  	dw	80h
 41224                                  
 41225                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41226                                  
 41227                                  rpBug4Strs:
 41228                                  	dw	rpFind8
 41229                                  	dw	4
 41230                                  	dw	rpFind9
 41231                                  	dw	rpFind9Len ; 3
 41232                                  	dw	80h
 41233                                  
 41234                                  ;----------------------------------------------------------------------------
 41235                                  
 41236                                  struc StackVars
 41237                                   .sv_wVersion:	resw 1		; Rational extender version #
 41238                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41239                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41240                                   .size:
 41241                                  endstruc
 41242                                  
 41243                                  ;----------------------------------------------------------------------------
 41244                                  
 41245                                  ; 22/05/2019 - Retro DOS v4.0
 41246                                  
 41247                                  Rational386Patch:
 41248                                  	; Do a few quick checks to see if this looks like a Rational
 41249                                  	; Extended application. Hopefully this will quickly weed out
 41250                                  	; most non Rational apps.
 41251                                  
 41252                                  	cmp	word [es:0],395		; version number goes here - versions
 41253                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41254                                  
 41255                                  	cmp	word [es:0Ch],20h	; always has this value here
 41256                                  	jne	short rp3QuickOut
 41257                                  
 41258                                  	push	ax
 41259                                  
 41260                                  	mov	ax,18h 			; extender has 18h at
 41261                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41262                                  	jne	short rp3QO_ax
 41263                                  	cmp	[es:28],ax
 41264                                  	jne	short rp3QO_ax
 41265                                  	cmp	[es:36],ax
 41266                                  	je	short rp3Maybe
 41267                                  rp3QO_ax:
 41268                                  	pop	ax
 41269                                  rp3QuickOut:
 41270                                  	retn
 41271                                  
 41272                                  ; It might be the rational extender, do more extensive checking
 41273                                  
 41274                                  rp3Maybe:
 41275                                  	cld
 41276                                  	push	bx			; note ax pushed above
 41277                                  	push	cx
 41278                                  	push	dx
 41279                                  	push	si
 41280                                  	push	di
 41281                                  	push	es
 41282                                  	push	ds			; we use all of them
 41283                                  	push	bp
 41284                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41285                                  	mov	bp,sp
 41286                                  
 41287                                  	push	cs
 41288                                  	pop	ds
 41289                                  
 41290                                  	mov	ax,[es:0]		; save version #
 41291                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41292                                  	mov	[bp],ax	
 41293                                  					; check that binary version # matches
 41294                                  	call	VerifyVersion		;   ascii string
 41295                                  	jne	short rp3Exit_j
 41296                                  
 41297                                  ; Looks like this is it, find where to put the patch code.  The
 41298                                  ; patch will be located on top of Rational code specific to 80286
 41299                                  ; processors, so these patchs MUST NOT be applied if running on
 41300                                  ; an 80286 system.
 41301                                  
 41302                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41303                                  
 41304                                  	mov	cx,4500h		; force search len to 4700h (searches
 41305                                  	;mov	[bp+2],cx
 41306                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41307                                  
 41308                                  	mov	es,[es:20h]		; es=code segment
 41309                                  
 41310                                  	mov	si,rpFind1		; string to find
 41311                                  	mov	dx,rpFind1Len ; 10	; length to match
 41312                                  	call	ScanCodeSeq		; look for code seq
 41313                                  	jz	short rpGotPatch
 41314                                  
 41315                                  ; According to Rational, some very old versions of the extender may not
 41316                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41317                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41318                                  
 41319                                  	mov	si,rpFind1a
 41320                                  	mov	dx,rpFind1aLen  ;8
 41321                                  	call	ScanCodeSeq
 41322                                  	jz	short rpGotPatch
 41323                                  
 41324                                  rp3Exit_j:
 41325                                  	jmp	rp3Exit
 41326                                  
 41327                                  ; Found the location to write patch code! DI = offset in code seg.
 41328                                  
 41329                                  rpGotPatch:
 41330                                  	;mov	[bp+4],di
 41331                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41332                                  
 41333                                  ;----------------------------------------------------------------------------
 41334                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41335                                  
 41336                                  	;cmp	word [bp+0],381
 41337                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41338                                  	cmp	word [bp],381
 41339                                  	jae	short rpBug2			;   < 3.81
 41340                                  
 41341                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41342                                  	call	FindBadCode
 41343                                  	jc	short rpBug2
 41344                                  
 41345                                  ; si = rpFind2 offset, di = rpFind3 offset
 41346                                  
 41347                                  	push	di
 41348                                  	mov	di,si				; rpFind2 offset
 41349                                  	mov	dx,rpFind2Len ; 3
 41350                                  
 41351                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41352                                  	jne	short rp_no_cx
 41353                                  
 41354                                  	dec	di				;   yes, gobble up push cx too
 41355                                  	inc	dx
 41356                                  rp_no_cx:
 41357                                  	mov	si,rpRepl2			; patch out find2 sequence
 41358                                  	mov	cx,rpRepl2Len  ; 6
 41359                                  	call	GenPatch
 41360                                  
 41361                                  	pop	di				; rpFind3 offset
 41362                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41363                                  	jne	short rp_no_cx2
 41364                                  
 41365                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41366                                  rp_no_cx2:
 41367                                  	;mov	ax,[bp+4]
 41368                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41369                                  	;mov	[es:di+4],ax
 41370                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41371                                  
 41372                                  	push	di				; save find3 offset
 41373                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41374                                  	mov	cx,rpRepl3Len ; 5
 41375                                  	call	CopyPatch
 41376                                  
 41377                                  	pop	bx				; find3 offset
 41378                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41379                                  	call	GenJump 			; jmp back from patch area
 41380                                  	;mov	[bp+4],di
 41381                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41382                                  						;   area pointer
 41383                                  
 41384                                  ;----------------------------------------------------------------------------
 41385                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41386                                  
 41387                                  rpBug2:
 41388                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41389                                  	call	FindBadCode
 41390                                  	jc	short rpBug3
 41391                                  
 41392                                  ; si = rpFind4 offset, di = rpFind5 offset
 41393                                  
 41394                                  	;push	word [bp+4]
 41395                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41396                                  						;   (where repl4 goes)
 41397                                  	push	di				; save find5 offset
 41398                                  
 41399                                  	mov	di,si
 41400                                  	mov	dx,rpFind4Len ; 4
 41401                                  	mov	si,rpRepl4
 41402                                  	mov	cx,rpRepl4Len ; 15
 41403                                  	call	GenPatch			; patch out find4 code
 41404                                  
 41405                                  	pop	di				; find5 offset
 41406                                  	add	di,5				; keep 5 bytes of find5 code
 41407                                  	;mov	bx,[bp+4]
 41408                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41409                                  	push	bx				; save repl5 location
 41410                                  	call	GenJump
 41411                                  
 41412                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41413                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41414                                  	call	CopyPatch			;   so no need to jmp back to
 41415                                  						;   main-line code
 41416                                  
 41417                                  ; patches have been made, now update the patch code to store/load dwords just
 41418                                  ; after the code in the patch area
 41419                                  
 41420                                  	pop	di				; repl5 location
 41421                                  	pop	si				; repl4 location
 41422                                  
 41423                                  	;mov	ax,[bp+4]
 41424                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41425                                  
 41426                                  	;mov	[es:si+7],ax
 41427                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41428                                  	;mov	[es:di+5],ax
 41429                                  	mov	[es:di+rpRepl5o1Len],ax
 41430                                  	add	ax,4
 41431                                  	;mov	[es:si+0Dh],ax
 41432                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41433                                  	;mov	[es:di+0Bh],ax
 41434                                  	mov	[es:di+rpRepl5o2Len],ax
 41435                                  
 41436                                  	;add	word [bp+4],8
 41437                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41438                                  						; patch area
 41439                                  
 41440                                  ;----------------------------------------------------------------------------
 41441                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41442                                  
 41443                                  rpBug3:
 41444                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41445                                  	call	FindBadCode
 41446                                  	jc	short rpBug4
 41447                                  
 41448                                  	;add	di,9
 41449                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41450                                  	push	si				;   code and locate find7b
 41451                                  	mov	si,rpFind7b			;   sequence
 41452                                  	mov	dx,rpFind7bLen ; 3
 41453                                  	call	ScanCodeSeq_di
 41454                                  	pop	si
 41455                                  	jnz	short rpBug4
 41456                                  
 41457                                  	push	di				; save find7b code offset
 41458                                  
 41459                                  	mov	di,si
 41460                                  	mov	dx,rpFind6Len ; 3
 41461                                  	mov	si,rpRepl6
 41462                                  	mov	cx,rpRepl6Len ; 9
 41463                                  	call	GenPatch			; patch out find6 code
 41464                                  
 41465                                  	pop	di
 41466                                  	mov	dx,rpFind7bLen ; 3
 41467                                  	mov	si,rpRepl7
 41468                                  	mov	cx,rpRepl7Len ; 9
 41469                                  	call	GenPatch			; patch out find7b code
 41470                                  
 41471                                  ;----------------------------------------------------------------------------
 41472                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41473                                  
 41474                                  rpBug4:
 41475                                  	;cmp	word [bp+0],360
 41476                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41477                                  	cmp	word [bp],360
 41478                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41479                                  
 41480                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41481                                  	call	FindBadCode
 41482                                  	jc	short rp3Exit
 41483                                  
 41484                                  	push	di				; save find9 code offset
 41485                                  
 41486                                  	mov	di,si
 41487                                  	mov	dx,3
 41488                                  	mov	si,rpRepl8
 41489                                  	mov	cx,rpRepl8Len ; 4
 41490                                  	call	GenPatch			; patch out find8 code
 41491                                  
 41492                                  	pop	di				; find9 offset
 41493                                  	;mov	bx,[bp+4]
 41494                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41495                                  	call	GenJump 			;   patch area
 41496                                  
 41497                                  	mov	si,rpRepl9			; copy replacement code to
 41498                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41499                                  	call	CopyPatch			;   so no jmp back to main-line
 41500                                  
 41501                                  rp3Exit:
 41502                                  	add	sp,StackVars.size
 41503                                  	pop	bp
 41504                                  	pop	ds
 41505                                  	pop	es
 41506                                  	pop	di
 41507                                  	pop	si
 41508                                  	pop	dx
 41509                                  	pop	cx
 41510                                  	pop	bx
 41511                                  	pop	ax
 41512                                  	retn
 41513                                  
 41514                                  ;----------------------------------------------------------------------------
 41515                                  ;
 41516                                  ; FindBadCode
 41517                                  ;
 41518                                  ; Searches Rational code segment looking for a pair of find strings (all
 41519                                  ; patches have at least two find strings).
 41520                                  ;
 41521                                  ; Entry:
 41522                                  ;	ES    = code segment to search
 41523                                  ;	DS:BX = search pair structure for this search
 41524                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41525                                  ;
 41526                                  ; Exit:
 41527                                  ;	CY flag clear if both strings found, and
 41528                                  ;	SI    = offset in ES of 1st string
 41529                                  ;	DI    = offset in ES of 2nd string
 41530                                  ;	CY set if either string not found, or strings too far apart
 41531                                  ;
 41532                                  ; Used:
 41533                                  ;	CX
 41534                                  ;
 41535                                  ;----------------------------------------------------------------------------
 41536                                  
 41537                                  ;struc SearchPair
 41538                                  ; .sp_off1: resw 1	; offset of 1st search string
 41539                                  ; .sp_len1: resw 1	; length of 1st search string
 41540                                  ; .sp_off2: resw 1	; 2nd string
 41541                                  ; .sp_len2: resw 1	; 2nd string
 41542                                  ; .sp_diff: resw 1	; max difference between offsets
 41543                                  ; .size:
 41544                                  ;endstruc
 41545                                  
 41546                                  FindBadCode:
 41547                                  	;mov	cx,[bp+2]
 41548                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41549                                  
 41550                                  	mov	si,[bx]	; mov si,[bx+0]
 41551                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41552                                  	
 41553                                  	;mov	dx,[bx+2]
 41554                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41555                                  	call	ScanCodeSeq
 41556                                  	jnz	short fbc_error		; done if 1st not found
 41557                                  
 41558                                  	push	di			; save 1st string offset
 41559                                  
 41560                                  	;mov	si,[bx+4]
 41561                                  	mov	si,[bx+SearchPair.sp_off2]
 41562                                  	;mov	dx,[bx+6]
 41563                                  	mov	dx,[bx+SearchPair.sp_len2]
 41564                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41565                                  
 41566                                  	pop	si			; restore 1st string offset
 41567                                  	jnz	short fbc_error
 41568                                  
 41569                                  	mov	ax,di			; sanity check that
 41570                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41571                                  	jc	short fbc_error
 41572                                  	;cmp	ax,[bx+8]
 41573                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41574                                  	ja	short fbc_error
 41575                                  
 41576                                  	clc
 41577                                  	retn
 41578                                  
 41579                                  fbc_error:
 41580                                  	stc
 41581                                  	retn
 41582                                  
 41583                                  ;----------------------------------------------------------------------------
 41584                                  ;
 41585                                  ; GenPatch
 41586                                  ;
 41587                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41588                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41589                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41590                                  ; code.
 41591                                  ;
 41592                                  ; Entry:
 41593                                  ;	ES:DI = start of buggy code to be patched
 41594                                  ;	DX    = length of buggy code to be patched
 41595                                  ;	DS:SI = replacement patch code
 41596                                  ;	CX    = length of replacement patch code
 41597                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41598                                  ;
 41599                                  ; Exit:
 41600                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41601                                  ;
 41602                                  ; Used:
 41603                                  ;	AX, BX, SI, Flags
 41604                                  ;
 41605                                  ;----------------------------------------------------------------------------
 41606                                  
 41607                                  GenPatch:
 41608                                  	push	di			;save offset of buggy code
 41609                                  
 41610                                  	;mov	bx,[bp+4]
 41611                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41612                                  					;jump from buggy code to patch area
 41613                                  	call	GenJump
 41614                                  
 41615                                  	call	CopyPatch		;copy replacement code to patch area
 41616                                  
 41617                                  	pop	bx			;offset of buggy code + buggy code
 41618                                  	add	bx,dx			;  length = return from patch offset
 41619                                  
 41620                                  	call	GenJump 		;jump from patch area back to main-
 41621                                  	;mov	[bp+4],di
 41622                                  	mov	[bp+StackVars.sv_pPatch],di
 41623                                  					;  line code, update patch pointer
 41624                                  	retn
 41625                                  
 41626                                  ;----------------------------------------------------------------------------
 41627                                  ;
 41628                                  ; CopyPatch
 41629                                  ;
 41630                                  ; Copies patch code to patch location.
 41631                                  ;
 41632                                  ; Entry:
 41633                                  ;	DS:SI = patch code to be copied
 41634                                  ;	ES    = segment of code to patch
 41635                                  ;	CX    = length of code to copy
 41636                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41637                                  ;
 41638                                  ; Exit:
 41639                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41640                                  ;
 41641                                  ; Used:
 41642                                  ;	SI, Flags
 41643                                  ;
 41644                                  ;----------------------------------------------------------------------------
 41645                                  
 41646                                  CopyPatch:
 41647                                  	push	cx
 41648                                  	;mov	di,[bp+4]
 41649                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41650                                  	cld
 41651                                  	rep movsb
 41652                                  	pop	cx
 41653                                  	;mov	[bp+4],di
 41654                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41655                                  	retn
 41656                                  
 41657                                  ;----------------------------------------------------------------------------
 41658                                  ;
 41659                                  ; GenJump
 41660                                  ;
 41661                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41662                                  ;
 41663                                  ; Entry:
 41664                                  ;	ES:DI = from location (where to put jmp instruction)
 41665                                  ;	BX    = to location (where to jump to)
 41666                                  ;
 41667                                  ; Exit:
 41668                                  ;	DI = byte after generated jump
 41669                                  ;
 41670                                  ; Used:
 41671                                  ;	AX
 41672                                  ;
 41673                                  ;----------------------------------------------------------------------------
 41674                                  
 41675                                  GenJump:
 41676                                  	mov	al,0E9h		; jmp rel16 opcode
 41677                                  	stosb
 41678                                  
 41679                                  	mov	ax,bx		; calc offset to 'to' location
 41680                                  	sub	ax,di
 41681                                  	sub	ax,2
 41682                                  
 41683                                  	stosw			; output offset
 41684                                  
 41685                                  	retn
 41686                                  
 41687                                  ;----------------------------------------------------------------------------
 41688                                  ;
 41689                                  ; ScanCodeSeq
 41690                                  ;
 41691                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41692                                  ;
 41693                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41694                                  ;
 41695                                  ;----------------------------------------------------------------------------
 41696                                  
 41697                                  ScanCodeSeq:
 41698                                  	mov	di,200h
 41699                                  ScanCodeSeq_di:
 41700                                  	push	cx
 41701                                  	sub	cx,dx
 41702                                  	inc	cx
 41703                                  scsagain:
 41704                                  	push	si
 41705                                  	push	di
 41706                                  	push	cx
 41707                                  	mov	cx,dx
 41708                                  	rep	cmpsb
 41709                                  	pop	cx
 41710                                  	pop	di
 41711                                  	pop	si
 41712                                  	je	short scsfound
 41713                                  	inc	di
 41714                                  	loop	scsagain
 41715                                  scsfound:
 41716                                  	pop	cx
 41717                                  vvexit:		; 18/12/2022
 41718                                  	retn
 41719                                  	
 41720                                  ;----------------------------------------------------------------------------
 41721                                  ;
 41722                                  ; VerifyVersion
 41723                                  ;
 41724                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41725                                  ; from ES:2A.
 41726                                  ;
 41727                                  ;       Entry: AX = binary version number 
 41728                                  ;       Exit : Z flag set if version numbers match
 41729                                  ;
 41730                                  ;----------------------------------------------------------------------------
 41731                                  
 41732                                  VerifyVersion:
 41733                                  	mov	si,[es:2Ah]		; offset of version number
 41734                                  					;  in ascii
 41735                                  	mov	bl,10
 41736                                  	add	si,3			; point to last digit
 41737                                  
 41738                                  	call	VVDigit
 41739                                  	jne	short vvexit
 41740                                  	call	VVDigit
 41741                                  	jne	short vvexit
 41742                                  	cmp	byte [es:si],'.'
 41743                                  	jne	short vvexit
 41744                                  	dec	si
 41745                                  	;call	VVDigit
 41746                                  	; 18/12/2022
 41747                                  	;jmp	short VVDigit
 41748                                  ;vvexit:
 41749                                  	;retn
 41750                                  VVDigit:
 41751                                  	div	bl
 41752                                  	add	ah,'0'
 41753                                  	dec	si
 41754                                  	cmp	[es:si+1],ah
 41755                                  	mov	ah,0			; do not xor or sub we need Z
 41756                                  	retn
 41757                                  
 41758                                  %endif
 41759                                  
 41760                                  ;-----------------------------------------------------------------------
 41761                                  
 41762                                  ; 23/05/2019 - Retro DOS v4.0
 41763                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41764                                  
 41765                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41766                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41767                                  
 41768                                  exepatch_start:	 ; label byte
 41769                                  
 41770                                  	; The following is the code that'll be layed over the buggy unpack
 41771                                  	; code.
 41772                                  str1:
 41773 000072E9 06                      	db  06h	  		;push	es		 
 41774 000072EA 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41775                                  
 41776                                  first_stop equ	$-str1
 41777                                  			
 41778 000072EC 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41779                                  
 41780                                  first:  ; label	byte
 41781                                  
 41782 000072EE 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41783 000072F0 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41784 000072F2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41785 000072F5 57                      	db  57h	    		;push	di
 41786 000072F6 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41787 000072F9 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41788 000072FB F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41789 000072FD 47                      	db  47h	    		;inc	di			
 41790 000072FE 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41791 00007300 5F                      	db  5Fh	    		;pop	di
 41792 00007301 58                      	db  58h	    		;pop	ax
 41793                                  
 41794                                  second_stop equ	$-first
 41795                                  
 41796 00007302 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41797                                  
 41798                                  second: ; label	byte
 41799                                  
 41800 00007304 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41801                                  		    		;NextRec:				
 41802 00007306 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41803                                  		    		;norm_agn:				
 41804 00007309 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41805 0000730B F7D0                    	db  0F7h,0D0h		;not	ax		
 41806 0000730D D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41807 0000730F 7413                    	db  74h,13h		;jz	short SI_ok			
 41808 00007311 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41809 00007313 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41810 00007316 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41811 00007318 7308                    	db  73h,08h		;jnc	short SItoDS			
 41812 0000731A F7DA                    	db  0F7h,0DAh		;neg	dx			
 41813 0000731C D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41814 0000731E 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41815 00007320 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41816                                  				;SItoDS: 				
 41817 00007322 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41818                                  				;SI_ok:					
 41819 00007324 87F7                    	db  87h,0F7h		;xchg	si,di			
 41820 00007326 1E                      	db  1Eh			;push	ds			
 41821 00007327 06                      	db  06h			;push	es			
 41822 00007328 1F                      	db  1Fh			;pop	ds			
 41823 00007329 07                      	db  07h			;pop	es			
 41824 0000732A FECD                    	db  0FEh,0CDh		;dec	ch			
 41825 0000732C 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41826 0000732E AC                      	db  0ACh		;lodsb			
 41827 0000732F 92                      	db  92h			;xchg	dx,ax
 41828 00007330 4E                      	db  4Eh			;dec	si
 41829 00007331 AD                      	db  0ADh		;lodsw			
 41830 00007332 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41831 00007334 46                      	db  46h			;inc	si		
 41832 00007335 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41833 00007337 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41834 00007339 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41835 0000733B 7505                    	db  75h,05h		;jne	short TryEnum
 41836 0000733D AC                      	db  0ACh		;lodsb				
 41837 0000733E F3AA                    	db  0F3h,0AAh		;rep stosb			
 41838                                  
 41839                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41840 00007340 EB06                    	db  0EBh,06h		;jmp	short TryNext
 41841                                  
 41842                                  				;TryEnum:
 41843 00007342 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41844 00007344 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41845 00007346 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41846                                  				;TryNext:
 41847                                  
 41848 00007348 92                      	db  92h			;xchg	dx,ax
 41849                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41850                                  
 41851 00007349 A801                    	db  0A8h,01h		;test	al,1			
 41852 0000734B 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41853 0000734D 9090                    	db  90h,90h		;nop,nop
 41854                                  	
 41855                                  last_stop equ $-second
 41856                                  size_str1 equ $-str1
 41857                                  
 41858                                  	; The following is the code that we need to look for in the exe
 41859                                  	; file.
 41860                                  
 41861                                  scan_patch1: ; label byte
 41862                                  
 41863 0000734F 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41864 00007351 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41865 00007353 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41866 00007355 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41867 00007357 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41868 00007359 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41869 0000735C B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41870 0000735F B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41871 00007361 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41872 00007363 47                      	db  47h			;inc	di			
 41873 00007364 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41874 00007366 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41875 00007368 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41876 0000736A 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41877 0000736C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41878                                  				;NextRec:
 41879 0000736F B104                    	db  0B1h,04h		;mov	cl,4
 41880 00007371 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41881 00007373 F7D0                    	db  0F7h,0D0h		;not	ax		
 41882 00007375 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41883 00007377 7409                    	db  74h,09h		;jz	short SI_ok
 41884 00007379 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41885 0000737B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41886 0000737D 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41887 0000737F 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41888                                  	       			;SI_ok:
 41889 00007382 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41890 00007384 F7D0                    	db  0F7h,0D0h		;not	ax
 41891 00007386 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41892 00007388 7409                    	db  74h,09h		;jz	short DI_ok
 41893 0000738A 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41894 0000738C 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41895 0000738E 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41896 00007390 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41897                                  				;DI_ok:
 41898                                  
 41899                                  size_scan_patch1 equ $-scan_patch1
 41900                                  
 41901                                  scan_patch2: ; label byte
 41902                                  			
 41903 00007393 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41904 00007395 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41905 00007397 48                      	db  48h			;dec	ax
 41906 00007398 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41907 0000739A 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41908 0000739C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41909 0000739F B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41910 000073A2 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41911 000073A4 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41912 000073A6 47                      	db  47h			;inc	di			
 41913 000073A7 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41914 000073A9 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41915 000073AB 48                      	db  48h			;dec	ax
 41916 000073AC 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41917 000073AE BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41918                                  				;NextRec:
 41919 000073B1 B104                    	db  0B1h,04h		;mov	cl,4
 41920 000073B3 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41921 000073B5 F7D0                    	db  0F7h,0D0h		;not	ax		
 41922 000073B7 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41923 000073B9 740A                    	db  74h,0Ah		;jz	short SI_ok
 41924 000073BB 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41925 000073BD 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41926 000073BF 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41927 000073C1 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41928                                  				;or	si,0FFF0H
 41929                                  				;SI_ok:
 41930 000073C5 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41931 000073C7 F7D0                    	db  0F7h,0D0h		;not	ax
 41932 000073C9 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41933 000073CB 740A                    	db  74h,0Ah		;jz	short DI_ok
 41934 000073CD 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41935 000073CF 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41936 000073D1 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41937 000073D3 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41938                                  				;or	di,0FFF0H
 41939                                  				;DI_ok:
 41940                                  
 41941                                  size_scan_patch2 equ $-scan_patch2
 41942                                  
 41943                                  scan_patch3: ; label byte
 41944                                  
 41945 000073D7 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41946 000073D9 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41947 000073DB 48                      	db  48h			;dec	ax
 41948 000073DC 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41949 000073DE 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41950 000073E0 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41951 000073E3 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41952 000073E6 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41953 000073E8 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41954 000073EA 47                      	db  47h			;inc	di			
 41955 000073EB 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41956 000073ED 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41957 000073EF 48                      	db  48h			;dec	ax
 41958 000073F0 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41959 000073F2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41960                                  				;NextRec:
 41961 000073F5 B104                    	db  0B1h,04h		;mov	cl,4
 41962 000073F7 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41963 000073F9 F7D0                    	db  0F7h,0D0h		;not	ax		
 41964 000073FB D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41965 000073FD 7409                    	db  74h,09h		;jz	short SI_ok
 41966 000073FF 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41967 00007401 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41968 00007403 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41969 00007405 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41970                                  				;SI_ok:
 41971 00007408 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41972 0000740A F7D0                    	db  0F7h,0D0h		;not	ax
 41973 0000740C D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41974 0000740E 7409                    	db  74h,09h		;jz	short DI_ok
 41975 00007410 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41976 00007412 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41977 00007414 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41978 00007416 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41979                                  				;DI_ok:
 41980                                  
 41981                                  size_scan_patch3 equ $-scan_patch3
 41982                                  
 41983                                  scan_com: ; label byte
 41984                                  
 41985 00007419 AC                      	db  0ACh		;lodsb			
 41986 0000741A 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41987 0000741C 4E                      	db  4Eh			;dec	si
 41988 0000741D AD                      	db  0ADh		;lodsw			
 41989 0000741E 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41990 00007420 46                      	db  46h			;inc	si		
 41991 00007421 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41992 00007423 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41993 00007425 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41994 00007427 7506                    	db  75h,06h		;jne	short TryEnum
 41995 00007429 AC                      	db  0ACh		;lodsb				
 41996 0000742A F3AA                    	db  0F3h,0AAh		;rep stosb			
 41997 0000742C EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41998                                  				;TryEnum:
 41999 0000742F 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42000 00007431 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 42001 00007433 F3A4                    	db  0F3h,0A4h		;rep movsb			
 42002                                  				;TryNext:
 42003 00007435 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 42004 00007437 A801                    	db  0A8h,01h		;test	al,1			
 42005                                  ;	db  74h,0BAh		;jz	short NextRec			
 42006                                  
 42007                                  size_scan_com	equ	$-scan_com
 42008                                  
 42009                                  ;-----------------------------------------------------------------------
 42010                                  
 42011                                  ; 23/05/2019 - Retro DOS v4.0
 42012                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42013                                  
 42014                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42015                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42016                                  
 42017                                  ExePatch:
 42018                                  	; 28/12/2022 - Retro DOS v4.1
 42019                                  	;call	ExePackPatch
 42020                                  	;;call	word [ss:RationalPatchPtr]
 42021                                  	;retn
 42022                                  	; 28/12/2022
 42023                                  	;jmp	short ExePackPatch
 42024                                  
 42025                                  ;-----------------------------------------------------------------------
 42026                                  ;
 42027                                  ; Procedure Name 	: ExePackPatch
 42028                                  ;
 42029                                  ; Inputs	 	: DS 			-> DOSDATA
 42030                                  ;			  ES:0 			-> read in image
 42031                                  ;			  ax:cx = start cs:ip of program
 42032                                  ; Output		:		
 42033                                  ;
 42034                                  ;	1. If ES <= 0fffh
 42035                                  ;	   2. if exepack signature ('RB') found
 42036                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42037                                  ;	       	 4. if rest of the code & checksum compares
 42038                                  ;	  	    5. overlay buggy code with code in 
 42039                                  ;		       doscode:str1.
 42040                                  ;		 6. endif
 42041                                  ;	      7. endif
 42042                                  ;	   8. endif
 42043                                  ;	9. endif
 42044                                  ;
 42045                                  ;
 42046                                  ; Uses			: NONE
 42047                                  ;
 42048                                  ;-----------------------------------------------------------------------
 42049                                  		
 42050                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42051                                  	; 23/05/2019 - Retro DOS v4.0	
 42052                                  ExePackPatch:
 42053 00007439 53                      	push	bx
 42054 0000743A 8CC3                    	mov	bx,es			; bx has load segment
 42055 0000743C 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42056 00007440 7602                    	jbe	short ep_cont		; N: 
 42057 00007442 5B                      	pop	bx			; Y: no need to patch
 42058 00007443 C3                      	retn
 42059                                  ep_cont:
 42060 00007444 1E                      	push	ds
 42061 00007445 06                      	push	es
 42062 00007446 50                      	push	ax
 42063 00007447 51                      	push	cx
 42064 00007448 56                      	push	si
 42065 00007449 57                      	push	di
 42066                                  	
 42067                                  		; M033 - start
 42068                                  		; exepacked programs have an IP of 12h (>=2)
 42069                                  
 42070 0000744A 83E902                  	sub	cx,2			; Q: is IP >=2 
 42071 0000744D 7303                    	jnb	short epp_1		; N: exit
 42072 0000744F E9C500                  	jmp	ep_notpacked
 42073                                  					; ax:cx now points to location of
 42074                                  					; 'RB' if this is an exepacked file.
 42075                                  		; M033 - end
 42076                                  epp_1:
 42077 00007452 89CF                    	mov	di,cx
 42078 00007454 8EC0                    	mov	es,ax
 42079 00007456 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 42080                                  					; unpack_offset
 42081                                  
 42082 0000745B 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42083                                  	;ljne	ep_notpacked
 42084 00007460 7403                    	je	short epp_2
 42085 00007462 E9B200                  	jmp	ep_notpacked
 42086                                  epp_2:
 42087 00007465 0E                      	push	cs
 42088 00007466 1F                      	pop	ds			; set ds to cs
 42089                                  
 42090                                  	;add	di,6Ch
 42091 00007467 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 42092                                  					;          file where we hope to find
 42093                                  					;	   scan string. 
 42094                                  
 42095 0000746A E8B200                  	call	chk_common_str		; check for match
 42096                                  
 42097 0000746D 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42098                                  					; N: check at patch2_offset
 42099                                  					; Y: check for rest of patch string
 42100 0000746F BE[4F73]                	mov	si,scan_patch1
 42101                                  					; ds:si -> scan string 
 42102 00007472 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42103                                  
 42104                                  	;add	di,28h
 42105                                  	; 07/12/2022
 42106 00007477 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 42107                                  					;          file where we hope to find
 42108                                  					;	   scan string. 
 42109                                  	;mov	cx,68
 42110 0000747A B94400                  	mov	cx,size_scan_patch1
 42111                                  	;mov	bx,142
 42112 0000747D BB8E00                  	mov	bx,CHKSUM1_LEN
 42113                                  	;mov	ax,0EF4Eh
 42114 00007480 B84EEF                  	mov	ax,PATCH1_CHKSUM
 42115 00007483 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 42116 00007486 7208                    	jc	short ep_done1		; Q: did we pass the test
 42117                                  					; N: exit
 42118                                  					; Y: overlay code with new 
 42119 00007488 BE[E972]                	mov	si,str1
 42120                                  	;mov	cx,102
 42121 0000748B B96600                  	mov	cx,size_str1
 42122                                  	
 42123 0000748E F3A4                    	rep	movsb
 42124                                  ep_done1:
 42125 00007490 E98400                  	jmp	ep_done
 42126                                  
 42127                                  ep_chkpatch2:
 42128                                  	;mov	di,76h
 42129 00007493 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42130                                  					; in another version of unpack
 42131 00007496 E88600                  	call	chk_common_str		; check for match
 42132                                  
 42133 00007499 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42134                                  					; N: check for patch3_offset
 42135                                  					; Y: check for rest of patch string
 42136                                  
 42137 0000749B BE[9373]                	mov	si,scan_patch2
 42138                                  					; ds:si -> scan string 
 42139                                  	;mov	di,32h
 42140 0000749E BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 42141                                  					;          file where we hope to find
 42142                                  	;mov	cx,68			;	   scan string. 
 42143 000074A1 B94400                  	mov	cx,size_scan_patch2
 42144                                  	;mov	bx,140
 42145 000074A4 BB8C00                  	mov	bx,CHKSUM2_LEN
 42146                                  	;mov	ax,78B2h
 42147 000074A7 B8B278                  	mov	ax,PATCH2_CHKSUM
 42148 000074AA E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 42149                                  
 42150                                  					; M046 - Start
 42151                                  					; Q: did we pass the test
 42152 000074AD 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 42153                                  					; N: try with a different chksum
 42154                                  
 42155                                  
 42156 000074AF BE[9373]                	mov	si,scan_patch2
 42157                                  					; ds:si -> scan string 
 42158                                  	;mov	cx,68
 42159 000074B2 B94400                  	mov	cx,size_scan_patch2
 42160                                  	;mov	bx,129
 42161 000074B5 BB8100                  	mov	bx,CHKSUM2A_LEN
 42162                                  	;mov	ax,1C47h
 42163 000074B8 B8471C                  	mov	ax,PATCH2A_CHKSUM
 42164 000074BB E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 42165                                  					; Q: did we pass the test
 42166 000074BE 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 42167                                  					; Y: overlay code with new 
 42168                                  						
 42169                                  ep_patchcode2:			       	; M046 - End
 42170 000074C0 BE[E972]                	mov	si,str1
 42171                                  	;mov	cx,3
 42172 000074C3 B90300                  	mov	cx,first_stop
 42173 000074C6 F3A4                    	rep	movsb
 42174 000074C8 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42175 000074CB AB                      	stosw
 42176 000074CC 83C602                  	add	si,2
 42177                                  	;mov	cx,20
 42178 000074CF B91400                  	mov	cx,second_stop
 42179 000074D2 F3A4                    	rep	movsb
 42180 000074D4 AB                      	stosw				; put in dec ax and nop
 42181 000074D5 83C602                  	add	si,2
 42182                                  	;mov	cx,75
 42183 000074D8 B94B00                  	mov	cx,last_stop
 42184 000074DB F3A4                    	rep	movsb
 42185 000074DD EB38                    	jmp	short ep_done
 42186                                  
 42187                                  ep_chkpatch3:
 42188                                  	;mov	di,74h
 42189 000074DF BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42190                                  					; in another version of unpack
 42191 000074E2 E83A00                  	call	chk_common_str		; check for match
 42192                                  
 42193 000074E5 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 42194                                  					; N: exit
 42195                                  					; Y: check for rest of patch string
 42196 000074E7 BE[D773]                	mov	si,scan_patch3
 42197                                  					; ds:si -> scan string 
 42198                                  	;mov	di,32h
 42199 000074EA BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 42200                                  					;          file where we hope to find
 42201                                  					;	   scan string. 
 42202                                  	;mov	cx,66
 42203 000074ED B94200                  	mov	cx,size_scan_patch3
 42204                                  	;mov	bx,139
 42205 000074F0 BB8B00                  	mov	bx,CHKSUM3_LEN
 42206                                  	;mov	ax,4EDEh
 42207 000074F3 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42208 000074F6 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42209 000074F9 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 42210                                  					; N: exit
 42211                                  					; Y: overlay code with new 
 42212 000074FB BE[E972]                	mov	si,str1
 42213                                  	;mv	cx,3
 42214 000074FE B90300                  	mov	cx,first_stop
 42215 00007501 F3A4                    	rep	movsb
 42216 00007503 B048                    	mov	al,48h			; al = opcode for dec ax
 42217 00007505 AA                      	stosb
 42218 00007506 83C602                  	add	si,2
 42219                                  	;mov	cx,20
 42220 00007509 B91400                  	mov	cx,second_stop
 42221 0000750C F3A4                    	rep	movsb
 42222 0000750E AA                      	stosb				; put in dec ax
 42223 0000750F 83C602                  	add	si,2
 42224                                  	;mov	cx,75
 42225 00007512 B94B00                  	mov	cx,last_stop
 42226 00007515 F3A4                    	rep	movsb
 42227                                  
 42228                                  ep_notpacked:
 42229                                  	;stc
 42230                                  ep_done:
 42231 00007517 5F                      	pop	di
 42232 00007518 5E                      	pop	si
 42233 00007519 59                      	pop	cx
 42234 0000751A 58                      	pop	ax
 42235 0000751B 07                      	pop	es
 42236 0000751C 1F                      	pop	ds
 42237 0000751D 5B                      	pop	bx
 42238 0000751E C3                      	retn
 42239                                  
 42240                                  ;-------------------------------------------------------------------------
 42241                                  ;
 42242                                  ; 	Procedure Name	: chk_common_str
 42243                                  ;
 42244                                  ;	Input		: DS = DOSCODE
 42245                                  ;			; ES:DI points to string in packed file
 42246                                  ;
 42247                                  ;	Output		; Z if match else NZ
 42248                                  ;
 42249                                  ;-------------------------------------------------------------------------
 42250                                  
 42251                                  	; 23/05/2019 - Retro DOS v4.0
 42252                                  chk_common_str:
 42253 0000751F BE[1974]                	mov	si,scan_com
 42254                                  					; ds:si -> scan string 
 42255                                  	;mov	cx,32
 42256 00007522 B92000                  	mov	cx,size_scan_com
 42257                                  
 42258 00007525 F3A6                    	repe	cmpsb	       
 42259                                  
 42260                                  					; M046 - start
 42261                                  	; a fourth possible version of these exepacked programs have a 
 42262                                  	; 056h instead of 06Bh. See scan_com above
 42263                                  	;
 42264                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 42265                                  	;
 42266                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 42267                                  	; we shall try to match the rest of the string
 42268                                  	;
 42269                                  
 42270 00007527 7409                    	jz	short ccs_done
 42271 00007529 26807DFF56              	cmp	byte [es:di-1],56h
 42272 0000752E 7502                    	jnz	short ccs_done
 42273                                  
 42274 00007530 F3A6                    	repe	cmpsb	    
 42275                                  ccs_done:				; M046 - end
 42276 00007532 C3                      	retn
 42277                                  
 42278                                  ;-------------------------------------------------------------------------
 42279                                  ;
 42280                                  ;	Procedure Name	: chk_patchsum
 42281                                  ;
 42282                                  ;	Input		: DS:SI -> string we're looking for
 42283                                  ;			: ES:DI -> offset in packed file
 42284                                  ;			: CX 	= scan length
 42285                                  ;			: BX	= length of check sum
 42286                                  ;			: AX 	= value of check sum
 42287                                  ;
 42288                                  ;	Output		: if patch & check sum compare
 42289                                  ;				NC
 42290                                  ;			  else
 42291                                  ;				CY
 42292                                  ;
 42293                                  ;	Uses		: AX, BX, CX, SI
 42294                                  ;
 42295                                  ;-------------------------------------------------------------------------
 42296                                  
 42297                                  	; 23/05/2019 - Retro DOS v4.0
 42298                                  chk_patchsum:
 42299 00007533 57                      	push	di
 42300                                  
 42301 00007534 F3A6                    	repe	cmpsb			   
 42302                                  
 42303 00007536 7518                    	jnz	short cp_fail		; Q: does the patch match
 42304                                  					; N: exit
 42305                                  					; Y:	
 42306                                  
 42307                                  		; we do a check sum starting from the location of the 
 42308                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42309                                  		; unpacking code.
 42310                                  
 42311 00007538 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42312 0000753D 89D9                    	mov	cx,bx			; cx = length of check sum
 42313                                  
 42314 0000753F 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42315 00007541 31C0                    	xor	ax,ax
 42316                                  ep_chksum:
 42317 00007543 260305                  	add	ax,[es:di]
 42318 00007546 83C702                  	add	di,2
 42319 00007549 E2F8                    	loop	ep_chksum
 42320                                  
 42321 0000754B 5F                      	pop	di			; restore di
 42322                                  
 42323 0000754C 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42324                                  	;jne	short cp_fail		; N: exit
 42325                                  					; Y: 
 42326                                  	; 25/09/2023
 42327                                  	;clc	
 42328                                  	;retn
 42329 0000754E 74E2                    	je	short ccs_done ; cf=0
 42330                                  	
 42331                                  cp_fail:
 42332 00007550 F9                      	stc
 42333 00007551 C3                      	retn
 42334                                  
 42335                                  ; 28/12/2022 - Retro DOS v4.1
 42336                                  %if 0
 42337                                  ;--------------------------------------------------------------------------- 
 42338                                  
 42339                                  
 42340                                  ; M020 : BEGIN
 42341                                  ;
 42342                                  ;---------------------------------------------------------------------------
 42343                                  ;
 42344                                  ; procedure : RationalPatch
 42345                                  ;
 42346                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42347                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42348                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42349                                  ;
 42350                                  ; THE BUG is in the following code sequence:
 42351                                  ;
 42352                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42353                                  ;90		even				; word align
 42354                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42355                                  ;e8 xx xx	call	set_A20			; enable A20
 42356                                  ;
 42357                                  ; This patch routine replaces the mov & the loop with a far call into a
 42358                                  ; routine in DOS data segment which is in low memory (because A20 line
 42359                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42360                                  ; a mov & loop.
 42361                                  ;
 42362                                  ; Identification of Buggy Rational EXE
 42363                                  ; ====================================
 42364                                  ;
 42365                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42366                                  ;
 42367                                  ; OFFSET				Contains
 42368                                  ; ------				--------
 42369                                  ; 0000h			100 times Version number in binary
 42370                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42371                                  ;
 42372                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42373                                  ;
 42374                                  ; 002ah			offset where version number is stored in ASCII
 42375                                  ;				e.g. '3.48A'
 42376                                  ;
 42377                                  ; 0030h			offset of copyright string. Copyright strings either
 42378                                  ;			start with "DOS/16M Copyright...." or
 42379                                  ;			"Copyright.....". The string contains
 42380                                  ;			"Rational Systems, Inc."
 42381                                  ;
 42382                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42383                                  ;				from the program image
 42384                                  ; 0016h			word : size of buggy code segment
 42385                                  ;
 42386                                  ;	Buggy code is definite to start after offset 200h in its segment
 42387                                  ;
 42388                                  ;----------------------------------------------------------------------------
 42389                                  
 42390                                  ; 23/05/2019 - Retro DOS v4.0
 42391                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42392                                  
 42393                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42394                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42395                                  
 42396                                  RScanPattern1:
 42397                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42398                                  
 42399                                  RLen1 equ $ - RScanPattern1
 42400                                  
 42401                                  RScanPattern2:
 42402                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42403                                  
 42404                                  RLen2 equ $ - RScanPattern2
 42405                                  
 42406                                  RScanPattern3:
 42407                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42408                                  
 42409                                  RLen3 equ $ - RScanPattern2
 42410                                  
 42411                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42412                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42413                                  
 42414                                  ;----------------------------------------------------------------------------
 42415                                  ;
 42416                                  ; INPUT : ES = segment where program got loaded
 42417                                  ;
 42418                                  ;----------------------------------------------------------------------------
 42419                                  
 42420                                  RationalPatch:
 42421                                  	cld
 42422                                  	push	ax
 42423                                  	push	bx
 42424                                  	push	cx
 42425                                  	push	dx
 42426                                  	push	si
 42427                                  	push	di
 42428                                  	push	es
 42429                                  	push	ds			; we use all of them
 42430                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42431                                  	push	cs
 42432                                  	pop	ds
 42433                                  	
 42434                                  	mov	si,RScanPattern1
 42435                                  	;mov	cx,10
 42436                                  	mov	cx,RLen1
 42437                                  	rep	cmpsb			; do we have the pattern ?
 42438                                  	jne	short rpexit
 42439                                  	mov	ax,[es:0]
 42440                                  	cmp	ax,348			; is it a buggy version ?
 42441                                  	jb	short rpexit
 42442                                  	cmp	ax,383			; is it a buggy version
 42443                                  	ja	short rpexit
 42444                                  
 42445                                  	call	VerifyVersion
 42446                                  	jne	short rpexit
 42447                                  
 42448                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42449                                  	sub	cx,200h			; Length we search (we start
 42450                                  					;  at offset 200h)
 42451                                  	mov	es,[es:20h]		; es=buggy code segment
 42452                                  	mov	si,RScanPattern2
 42453                                  	;mov	dx,8	
 42454                                  	mov	dx,RLen2
 42455                                  	call	ScanCodeSeq		; look for code seq with nop
 42456                                  	jz	short rpfound
 42457                                  
 42458                                  	mov	si,RScanPattern3
 42459                                  	;mov	dx,15
 42460                                  	mov	dx,RLen3
 42461                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42462                                  	jnz	short rpexit
 42463                                  
 42464                                  rpfound:
 42465                                  	
 42466                                  ;	we set up a far call into DOS data
 42467                                  ;	dx has the length of the code seq we were searching for
 42468                                  
 42469                                  	mov	al,9Ah			; far call opcode
 42470                                  	stosb
 42471                                  	mov	ax,RatBugCode
 42472                                  	stosw
 42473                                  	mov	ax,ss
 42474                                  	stosw
 42475                                  	mov	cx,dx
 42476                                  	sub	cx,6			; filler (with NOPs)
 42477                                  	mov	al,90h
 42478                                  	rep	stosb
 42479                                  rpexit:
 42480                                  	pop	ds
 42481                                  	pop	es
 42482                                  	pop	di
 42483                                  	pop	si
 42484                                  	pop	dx
 42485                                  	pop	cx
 42486                                  	pop	bx
 42487                                  	pop	ax
 42488                                  	retn
 42489                                  
 42490                                  ; M020 END
 42491                                  
 42492                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42493                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42494                                  
 42495                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42496                                  
 42497                                  ;----------------------------------------------------------------------------
 42498                                  ;
 42499                                  ; ScanCodeSeq
 42500                                  ;
 42501                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42502                                  ;
 42503                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42504                                  ;
 42505                                  ;----------------------------------------------------------------------------
 42506                                  
 42507                                  ScanCodeSeq:
 42508                                  	; 17/12/2022
 42509                                  	mov	di,200h
 42510                                  ;ScanCodeSeq_di:
 42511                                  	push	cx
 42512                                  	sub	cx,dx
 42513                                  	inc	cx
 42514                                  	; 17/12/2022
 42515                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42516                                  	;mov	di,200h
 42517                                  scsagain:
 42518                                  	push	si
 42519                                  	push	di
 42520                                  	push	cx
 42521                                  	mov	cx,dx
 42522                                  	rep	cmpsb
 42523                                  	pop	cx
 42524                                  	pop	di
 42525                                  	pop	si
 42526                                  	je	short scsfound
 42527                                  	inc	di
 42528                                  	loop	scsagain
 42529                                  scsfound:
 42530                                  	pop	cx
 42531                                  vvexit:		; 18/12/2022
 42532                                  	retn
 42533                                  
 42534                                  
 42535                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42536                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42537                                  
 42538                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42539                                  
 42540                                  ;----------------------------------------------------------------------------
 42541                                  ;
 42542                                  ; VerifyVersion
 42543                                  ;
 42544                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42545                                  ; from ES:2A.
 42546                                  ;
 42547                                  ;       Entry: AX = binary version number 
 42548                                  ;       Exit : Z flag set if version numbers match
 42549                                  ;
 42550                                  ;----------------------------------------------------------------------------
 42551                                  
 42552                                  VerifyVersion:
 42553                                  	mov	si,[es:2Ah]		; offset of version number
 42554                                  					;  in ascii
 42555                                  	mov	bl,10
 42556                                  	add	si,3			; point to last digit
 42557                                  
 42558                                  	call	VVDigit
 42559                                  	jne	short vvexit
 42560                                  	call	VVDigit
 42561                                  	jne	short vvexit
 42562                                  	cmp	byte [es:si],'.' ; 2Eh
 42563                                  	jne	short vvexit
 42564                                  	dec	si
 42565                                  	;call	VVDigit
 42566                                  	; 18/12/2022
 42567                                  	;jmp	short VVDigit
 42568                                  ;vvexit:
 42569                                  	;retn
 42570                                  VVDigit:
 42571                                  	div	bl
 42572                                  	add	ah,'0' ; 30h
 42573                                  	dec	si
 42574                                  	cmp	[es:si+1],ah
 42575                                  	mov	ah,0			; do not xor or sub we need Z
 42576                                  	retn
 42577                                  
 42578                                  ;--------------------------------------------------------------------------- 
 42579                                  %endif	; 28/12/2022
 42580                                  
 42581                                  ;---------------------------------------------------------------------------
 42582                                  ;
 42583                                  ;	M068
 42584                                  ;
 42585                                  ; 	Procedure Name	: IsCopyProt
 42586                                  ;
 42587                                  ;	Inputs		: DS:100 -> start of com file just read in
 42588                                  ;
 42589                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42590                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42591                                  ;			  copy protect scheme that relies on the A20 line
 42592                                  ;			  being turned off for it's scheme to work.
 42593                                  ;
 42594                                  ;			  Note: The int 21 function dispatcher will turn 
 42595                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42596                                  ;				and dec the A20OFF_COUNT before	iretting 
 42597                                  ;				to the user. 
 42598                                  ;
 42599                                  ;	Uses		: ES, DI, SI, CX
 42600                                  ;
 42601                                  ;---------------------------------------------------------------------------
 42602                                  
 42603                                  ; 23/05/2019 - Retro DOS v4.0
 42604                                  
 42605                                  CPStartOffset	EQU	0175h
 42606                                  CPID1Offset	EQU	011Bh
 42607                                  CPID2Offset	EQU	0173h
 42608                                  CPID3Offset	EQU	0146h
 42609                                  CPID4Offset	EQU	0124h
 42610                                  ID1		EQU	05343h
 42611                                  ID2		EQU	05044h
 42612                                  ID3		EQU	0F413h
 42613                                  ID4		EQU	08000h
 42614                                  
 42615                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42616                                  
 42617                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42618                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42619                                  
 42620                                  CPScanPattern:
 42621 00007552 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42622 00007556 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42623 0000755A C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42624 00007560 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42625 00007564 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42626 00007567 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42627                                  
 42628                                  CPSPlen	EQU $ - CPScanPattern
 42629                                  
 42630                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42631                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42632                                  
 42633                                  IsCopyProt:
 42634 0000756A 813E1B014353            	cmp	word [CPID1Offset],ID1
 42635 00007570 752D                    	jne	short CP_done
 42636                                  
 42637 00007572 813E73014450            	cmp	word [CPID2Offset],ID2
 42638 00007578 7525                    	jne	short CP_done
 42639                                  
 42640 0000757A 813E460113F4            	cmp	word [CPID3Offset],ID3
 42641 00007580 751D                    	jne	short CP_done
 42642                                  
 42643 00007582 813E24010080            	cmp	word [CPID4Offset],ID4
 42644 00007588 7515                    	jne	short CP_done
 42645                                  
 42646 0000758A 0E                      	push	cs
 42647 0000758B 07                      	pop	es
 42648 0000758C BF[5275]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42649                                  
 42650 0000758F BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42651                                  					; of pattern
 42652                                  
 42653 00007592 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42654 00007595 F3A6                    	repe	cmpsb
 42655 00007597 7506                    	jnz	short CP_done
 42656                                  
 42657 00007599 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42658                                  CP_done:
 42659 0000759F C3                      	retn
 42660                                  	
 42661                                  ;DOSCODE ENDS
 42662                                  
 42663                                  	;END
 42664                                  
 42665                                  ;----------------------------------------------------------------------------
 42666                                  
 42667                                  ;align 2 ; 05/09/2018 (Error!)
 42668                                  
 42669                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42670                                  ;align 16 ; 08/09/2018 (OK.)
 42671                                  align 2
 42672                                  
 42673                                  ; 06/08/2018 - Retro DOS v3.0
 42674                                  ;============================================================================
 42675                                  ; MSINIT.ASM
 42676                                  ;============================================================================
 42677                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42678                                  ;
 42679                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42680                                  ;
 42681                                  	; 15/07/2018 - Retro DOS v3.0
 42682                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42683                                  
 42684                                  ; temp iret instruction
 42685                                  
 42686                                  
 42687                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42688                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42689                                  
 42690                                  initiret: ; MSDOS 6.0
 42691                                  SYSBUF:
 42692                                  ;IRETT: ; 06/05/2019
 42693 000075A0 CF                      	iret
 42694                                  
 42695                                  ; 22/04/2019 - Retro DOS v4.0
 42696                                  
 42697                                  ; pointer to the BIOS data segment that will be available just to the
 42698                                  ; initialization code
 42699                                  
 42700 000075A1 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42701                                  
 42702                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42703                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42704                                  
 42705                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42706                                  
 42707                                  ParaRound:
 42708 000075A3 83C00F                  	add	ax, 15
 42709 000075A6 D1D8                    	rcr	ax, 1
 42710 000075A8 D1E8                    	shr	ax, 1
 42711 000075AA D1E8                    	shr	ax, 1
 42712 000075AC D1E8                    	shr	ax, 1
 42713 000075AE C3                      	retn
 42714                                  
 42715                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42716                                  
 42717                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42718                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42719                                  	
 42720                                  	; 30/05/2019
 42721                                  	; 22/04/2019 - Retro DOS v4.0
 42722                                  	; 07/07/2018 - Retro DOS v3.0
 42723                                  	; Retro DOS v2.0 - 03/03/2018
 42724                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42725                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42726                                  DOSINIT:
 42727                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42728                                  	;
 42729                                  	; Far call from SYSINIT
 42730                                  	; DX = Memory size in paragraphs
 42731                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42732                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42733                                  	;
 42734                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42735                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42736                                  
 42737 000075AF FA                              CLI
 42738 000075B0 FC                              CLD
 42739                                  
 42740                                  	; 03/11/2022
 42741                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42742                                  	
 42743                                  	; 17/12/2022
 42744                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42745                                  	;push	dx ; =*=		; save parameters from BIOS
 42746                                  	
 42747 000075B1 56                      	push	si
 42748 000075B2 1E                      	push	ds
 42749 000075B3 57                      	push	di			;save di (ptr to BiosComBlock)
 42750                                  
 42751 000075B4 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42752                                  
 42753                                  ; First, move the DOS data segment to its final location in low memory
 42754                                  
 42755                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42756                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42757 000075B6 B8[307A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42758                                  
 42759                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42760                                  	;and	ax,~15	; 0FFF0h	; boundary
 42761                                  
 42762                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42763                                  					; code segment
 42764                                  
 42765                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42766 000075B9 83C00F                  	add	ax,15			; round to nearest paragraph
 42767 000075BC 83E0F0                  	and	ax,~15			; boundary
 42768                                  
 42769 000075BF 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42770                                  					; code segment
 42771                                  	; 05/12/2022
 42772                                  	; 30/04/2019 - Retro DOS v4.0
 42773                                  	;xor	si,si
 42774                                  	
 42775 000075C1 8CC8                    	mov	ax,cs
 42776 000075C3 8ED8                    	mov	ds,ax			; ds = current code segment
 42777                                  					; DS:SI now points to dosdata
 42778                                  
 42779                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42780                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42781                                  					;  BData segment. Cannot use
 42782                                  					;  getdseg macro here!!!
 42783                                  	; 17/12/2022
 42784 000075C5 8E06[A175]              	mov	es,[InitBioDataSeg]
 42785                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42786                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42787                                  
 42788                                  	;mov	es,[es:3]
 42789 000075C9 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42790                                  
 42791 000075CE 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42792                                  
 42793                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42794                                  	;mov	cx,4976  ; 25/05/2019
 42795                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42796                                  	;mov	cx,4962
 42797                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42798 000075D0 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42799 000075D3 F3A4                    	rep	movsb			; move data to final location
 42800                                  	
 42801 000075D5 5F                      	pop	di			; restore ptr to BiosComBlock
 42802 000075D6 1F                      	pop	ds			; restore parms from BIOS
 42803 000075D7 5E                      	pop	si
 42804                                  	; 17/12/2022
 42805                                  	;pop	dx ; 30/05/2019	
 42806                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42807                                  	;pop	dx ; =*=		
 42808                                  
 42809 000075D8 06                      	push	es
 42810 000075D9 1E                      	push	ds
 42811 000075DA 07                      	pop	es			; es:si -> device chain
 42812 000075DB 1F                      	pop	ds			; ds points to dosdata
 42813                                  
 42814                                  ;SR;
 42815                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42816                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42817                                  ;lie table handling for device drivers. This can be expanded later on to
 42818                                  ;establish a communication block from the BIOS to the DOS.
 42819                                  
 42820                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42821                                  	;mov	[1042h],bx
 42822 000075DC 893E[4010]              	mov	[BiosDataPtr],di
 42823 000075E0 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42824                                  
 42825 000075E4 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42826                                  
 42827                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42828                                  
 42829 000075E9 2E8C1E[9F4F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42830 000075EE 2E8C1E[A34F]            	mov	[cs:LowInt24Addr+2],ds
 42831 000075F3 2E8C1E[A74F]            	mov	[cs:LowInt28Addr+2],ds
 42832                                  
 42833                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42834                                  	;mov	[584h],sp
 42835                                  	;mov	[586h],ss
 42836 000075F8 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42837 000075FC 8926[8405]              	mov	[USER_SP],sp
 42838 00007600 8C16[8605]              	mov	[USER_SS],ss
 42839                                  
 42840 00007604 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42841 00007606 8ED0                    	mov	ss,ax
 42842                                  
 42843                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42844                                  	;mov	sp,offset dosdata:dskstack
 42845 00007608 BC[2009]                	mov	sp,DSKSTACK
 42846                                  
 42847                                  ;M023
 42848                                  ; Init patch ptrs to default values
 42849                                  
 42850                                  	;mov	word [1212h],RetExePatch
 42851                                  	;mov	word [1214h],RetExePatch
 42852                                  	;mov	word [61h],RetExePatch
 42853 0000760B C706[F811][0B61]        	mov	word [FixExePatch],RetExePatch	; M023
 42854                                  	; 28/12/2022 - Retro DOS v4.1
 42855                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42856 00007611 C706[6100][0B61]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42857                                  
 42858                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42859                                  %if 0	
 42860                                  
 42861                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42862                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42863                                  ; running in the HMA.
 42864                                  
 42865                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42866                                  	cmp	al,2		;   386 or later?
 42867                                  	mov	ax,Rational386Patch
 42868                                  	jae	short di_set_patch
 42869                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42870                                  di_set_patch:
 42871                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42872                                  
 42873                                  %endif
 42874                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42875                                  
 42876 00007617 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42877                                  
 42878                                  	; ax now holds segment of DOS code
 42879 00007619 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42880                                  
 42881 0000761C 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42882 00007620 8936[4800]              	mov	word [NULDEV],si
 42883                                  ;SR;
 42884                                  ; There are some locations in the Win386 instance data structures
 42885                                  ; which need to be set up with the DOS data segment. First, initialize
 42886                                  ; the segment part of the instance table pointer in the SIS.
 42887                                  
 42888                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42889 00007624 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42890                                  
 42891                                  ; Now initialize the segment part of the pointer to the data in each
 42892                                  ; instance table entry.
 42893                                  
 42894 00007628 56                      	push	si		; preserve pointer to device chain
 42895                                  	; 18/12/2022
 42896                                  	; cx = 0
 42897 00007629 B107                    	mov	cl,7
 42898                                  	;mov	cx,7		; There are 7 entries in the instance table
 42899                                  				; M019
 42900                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42901 0000762B BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42902                                  Instance_init_loop:
 42903 0000762E 8C1C                    	mov	[si],ds		; set offset in instance entry
 42904                                  	;add	si,6
 42905 00007630 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42906 00007633 E2F9                    	loop	Instance_init_loop
 42907                                  
 42908                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42909                                  
 42910                                  	; 18/12/2022
 42911 00007635 B105                    	mov	cl,5
 42912                                  	;mov	cx,5		; There are five entries in the instance table
 42913                                  
 42914                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42915                                  	;mov	si,11EDh	; point si to segment field
 42916 00007637 BE[D311]                	mov	si,OldInstanceJunk+6
 42917                                  OldInstance_init_loop:
 42918 0000763A 8C1C                    	mov	[si],ds		; set offset in instance entry
 42919 0000763C 83C606                  	add	si,6		; move on to next entry
 42920 0000763F E2F9                    	loop	OldInstance_init_loop
 42921 00007641 5E                      	pop	si		; restore pointer to device chain
 42922                                  
 42923                                  ; End of WIN386 2.xx compatibility bullshit
 42924                                  
 42925                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42926                                  %if 0	
 42927                                     	; 30/04/2019
 42928                                  	;push	es
 42929                                  	;pop	ds
 42930                                  			; ds:si points to console device
 42931                                  
 42932                                  	; 24/04/2019 - Retro DOS v4.0
 42933                                  
 42934                                  	; 15/07/2018
 42935                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42936                                  	; (Set INT 2Ah handler address to an 'IRET')
 42937                                  
 42938                                  	; need crit vector inited to use deviocall
 42939                                  	;push	ds			; preserve segment of device chain
 42940                                  	push	es ; 30/04/2019
 42941                                  
 42942                                  %endif
 42943                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42944 00007642 06                      	push	es
 42945                                  	; 17/12/2022
 42946                                  	;pop	ds
 42947                                  	;push	ds
 42948                                  
 42949 00007643 31C0                    	xor	ax,ax
 42950 00007645 8ED8                    	mov	ds,ax			; point DS to int vector table
 42951 00007647 B8[A075]                	mov	ax,initiret
 42952                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42953 0000764A A3A800                  	mov	[addr_int_ibm],ax
 42954 0000764D 8CC8                    	mov	ax,cs
 42955                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42956 0000764F A3AA00                  	mov	[addr_int_ibm+2],ax
 42957 00007652 1F                      	pop	ds			; restore segment of device chain
 42958                                  
 42959 00007653 E81C02                  	call	CHARINIT  		; initialize console driver
 42960 00007656 56                      	push	si			; save pointer to header
 42961                                  
 42962 00007657 16                      	push	ss			; move pointer to dos data...
 42963 00007658 07                      	pop	es			; ...into ES
 42964                                  
 42965                                  	;initialize sft for file 0 (CON)
 42966                                  
 42967                                          ; 07/07/2018 - Retro DOS v3.0
 42968                                  	; 24/04/2019 - Retro DOS v4.0
 42969                                  	;mov	di,SFTABL+6 
 42970 00007659 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42971 0000765C B80300                          MOV     AX,3
 42972 0000765F AB                              STOSW           	; Refcount
 42973 00007660 FEC8                            DEC     AL
 42974 00007662 AB                              STOSW           	; Access rd/wr, compatibility
 42975 00007663 30C0                            XOR     AL,AL
 42976 00007665 AA                              STOSB           	; attribute
 42977                                  	;mov	al,0C3h
 42978 00007666 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42979 00007668 AB                      	STOSW			; flags
 42980 00007669 89F0                            mov	ax,si
 42981 0000766B AB                              stosw			; device pointer in devptr	
 42982 0000766C 8CD8                            mov	ax,ds
 42983 0000766E AB                      	stosw
 42984 0000766F 31C0                    	xor	ax,ax	; 0
 42985 00007671 AB                      	stosw			; firclus
 42986 00007672 AB                      	stosw			; time
 42987 00007673 AB                      	stosw			; date
 42988 00007674 48                      	dec	ax	; -1
 42989 00007675 AB                      	stosw			; size
 42990 00007676 AB                      	stosw
 42991 00007677 40                      	inc	ax	; 0
 42992 00007678 AB                      	stosw			; position
 42993 00007679 AB                      	stosw
 42994                                  	;add	di,7
 42995 0000767A 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42996                                  				; point at name
 42997                                  	;add	si,10
 42998 0000767D 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42999                                  				; point to name
 43000 00007680 B90400                  	mov	cx,4
 43001 00007683 F3A5                    	rep	movsw		; name
 43002 00007685 B103                    	mov	cl,3
 43003 00007687 B020                    	mov	al," "
 43004 00007689 F3AA                    	rep	stosb		; extension
 43005                                  
 43006 0000768B 5E                      	pop	si		; get back pointer to header
 43007                                  
 43008                                  				; mark device as CON I/O
 43009                                  	; 15/07/2018
 43010                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43011 0000768C 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43012                                  	; 12/03/2018
 43013                                  	;mov	[ss:32h],si
 43014 00007690 368936[3200]            	MOV     [SS:BCON],SI
 43015                                  	;mov	[ss:34h],ds
 43016 00007695 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43017                                  
 43018                                  	; initialize each device until the clock device is found
 43019                                  
 43020                                  CHAR_INIT_LOOP:
 43021 0000769A C534                            LDS     SI,[SI]			; AUX device
 43022 0000769C E8D301                  	call	CHARINIT 
 43023                                         	;15/07/2018
 43024                                  	;test	byte [SI+4],8
 43025 0000769F F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43026 000076A3 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43027                                  	; 12/03/2018
 43028                                  	;mov	[ss:2Eh],si
 43029 000076A5 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43030                                  	;mov	[ss:30h],ds
 43031 000076AA 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43032                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43033                                  
 43034                                  	;mov	bp,4970			; bp = pointer to free mem
 43035                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43036                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43037                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43038 000076AF BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43039                                  
 43040 000076B2 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43041 000076B7 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43042                                  PERDRV:
 43043                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43044 000076BC C534                            LDS	SI,[SI]			; Next device
 43045 000076BE 83FEFF                          CMP	SI,-1	; 0FFFFh
 43046 000076C1 7479                    	JZ	SHORT CONTINIT
 43047                                  
 43048 000076C3 E8AC01                          call	CHARINIT
 43049                                  
 43050                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43051                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43052                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43053                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43054                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43055                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43056                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43057                                  
 43058                                          ; 15/07/2018
 43059                                  	;test	word [SI+4],8000h		; DEVTYP
 43060                                          ; 17/12/2022
 43061                                  	;test	byte [SI+5],80h
 43062 000076C6 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43063                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43064 000076CA 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43065                                  
 43066 000076CC 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43067 000076D1 30ED                    	XOR     CH,CH
 43068                                          ; 07/07/2018
 43069                                  	;MOV	[SI+10],CL		; Number of units in name field
 43070 000076D3 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 43071 000076D6 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43072 000076DB 30F6                    	XOR     DH,DH
 43073 000076DD 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43074 000076E2 1E                      	PUSH    DS
 43075 000076E3 56                              PUSH    SI
 43076 000076E4 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43077                                  
 43078                                  PERUNIT:
 43079 000076E9 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43080 000076EB 43                              INC     BX
 43081 000076EC 43                              INC     BX                      ; On to next BPB
 43082                                  	; 15/12/2022
 43083                                  	; 07/07/2018
 43084                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43085 000076ED 26885600                	MOV     [ES:BP],DL
 43086                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43087                                  	;;mov	[ES:BP+0],DL
 43088                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43089                                  
 43090                                  	;MOV	[ES:BP+1],DH
 43091 000076F1 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43092 000076F5 53                              PUSH    BX
 43093 000076F6 51                              PUSH    CX
 43094 000076F7 52                              PUSH    DX
 43095                                  
 43096                                          ;invoke	$SETDPB
 43097 000076F8 E8C098                          CALL	_$SETDPB		; build DPB!
 43098                                  
 43099                                  	; 07/07/2018
 43100                                  	;MOV	AX,[ES:BP+2]
 43101 000076FB 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43102                                          ; 12/03/2018
 43103 000076FF 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43104 00007704 7604                    	JBE     SHORT NOTMAX		; N:
 43105 00007706 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43106                                  NOTMAX:					
 43107                                  	; set the next dpb field in the currently built bpb
 43108                                  	; and mark as never accessed
 43109                                          
 43110                                  	; 24/04/2019
 43111 0000770A 89E8                    	mov	ax,bp			; get pointer to DPB
 43112                                  	;add	ax,33
 43113 0000770C 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43114                                  					; set seg & offset of next DPB
 43115                                  	;mov	[es:bp+25],ax
 43116 0000770F 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43117                                  	;mov	[es:bp+27],es
 43118 00007713 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43119                                  					; mark as never accessed
 43120                                  	;mov	byte [es:bp+24],0FFh
 43121 00007717 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43122                                  
 43123 0000771C 5A                      	POP     DX
 43124 0000771D 59                              POP     CX
 43125 0000771E 5B                              POP     BX
 43126 0000771F 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43127 00007721 5E                              POP     SI
 43128 00007722 1F                              POP     DS
 43129                                  					; ds:si -> device header
 43130                                  					; store it in the corresponding dpb
 43131                                  	; 07/07/2018
 43132                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 43133 00007723 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43134                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 43135 00007727 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43136                                  
 43137 0000772B 1E                              PUSH    DS			; save pointer to device header
 43138 0000772C 56                              PUSH    SI
 43139 0000772D FEC6                            INC     DH			; inc unit #
 43140 0000772F FEC2                            INC     DL			; inc drive #
 43141 00007731 8ED8                            MOV     DS,AX			; restore segment of BPB array
 43142                                          ;add	bp,33 ; 24/04/2019
 43143 00007733 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 43144 00007736 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 43145                                          
 43146 00007738 5E                      	POP     SI			; restore pointer to device header
 43147 00007739 1F                              POP     DS
 43148 0000773A EB80                    	JMP	PERDRV			; process all drivers in chain
 43149                                  
 43150                                  CONTINIT:
 43151                                  	; 24/04/2019
 43152                                  	;sub	bp,33			; set link in last DPB to -1
 43153 0000773C 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43154                                  					; set last link offset & segment
 43155                                  	;mov	word [bp+25],0FFFFh
 43156 0000773F C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 43157                                  	;mov	word [bp+27],0FFFFh
 43158 00007744 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 43159                                  	;add	bp,33
 43160 00007749 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43161                                  					; the DPB chain is done.  
 43162 0000774C 16                      	push	ss
 43163 0000774D 1F                      	pop	ds
 43164                                  
 43165 0000774E 89E8                    	mov	ax,bp
 43166 00007750 E850FE                  	call	ParaRound		; round up to segment
 43167                                  
 43168 00007753 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43169 00007755 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43170                                  
 43171 00007757 BB0F00                  	mov	bx,0Fh
 43172                                  	
 43173                                  	; 24/05/2019
 43174                                  	;mov	cx,[ENDMEM]
 43175                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43176                                  	; 17/12/2022
 43177                                  	;mov	cx,[ENDMEM] 
 43178                                  					; set seg inpacketto dosdata					
 43179 0000775A 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 43180                                  
 43181                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43182                                  ; Also patch in the segment of the pointers in the dosdata area.
 43183                                  ;
 43184                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43185                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43186                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43187                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43188                                  
 43189 0000775E 52                      	push	dx			; preserve first free segment
 43190                                  
 43191 0000775F A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43192 00007762 8EC0                    	mov	es,ax			; es = segment of DOS
 43193 00007764 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43194                                  
 43195 0000776A E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43196 0000776D E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 43197                                  					; other tables with seg in ES.
 43198                                  	; 17/12/2022
 43199                                  	; cx = 0
 43200 00007770 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43201                                  
 43202 00007774 5A                      	pop	dx			; restore first free segment
 43203                                  
 43204                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43205                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43206                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43207                                  ; low_mem_stub by seg_reinit.
 43208                                  
 43209                                  	;xor	ax,ax ; 0
 43210                                  	;mov	ds,ax
 43211                                  	;mov	es,ax
 43212                                  	; 17/12/2022
 43213                                  	; cx = 0
 43214                                  	;xor	cx,cx ; 0
 43215 00007775 8ED9                    	mov	ds,cx
 43216 00007777 8EC1                    	mov	es,cx
 43217                                  
 43218                                  	; set the segment of int 24 vector that was 
 43219                                  	; left out by patch_vec_segments above.
 43220                                  
 43221                                  	; 17/12/2022
 43222                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43223                                  ;%if 0
 43224                                  	; 24/05/2019
 43225                                  	;;mov	di,90h
 43226                                  	;;mov	di,4*int_fatal_abort
 43227                                  	;mov	di,addr_int_fatal_abort
 43228 00007779 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43229                                  
 43230 0000777C 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43231                                  	;mov	[di+2],ax  ; int 24h segment
 43232 00007780 8905                    	mov	[di],ax ; 24/05/2019
 43233                                  
 43234                                  	;;mov	di,82h
 43235                                  	;mov	di,INTBASE+2
 43236                                  
 43237                                  ;%endif
 43238                                  	; 17/12/2022
 43239                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43240                                  	;;mov	di,90h
 43241                                  	;;mov	di,4*int_fatal_abort
 43242                                  	;mov	di,addr_int_fatal_abort
 43243                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43244                                  	;mov	[di+2],ax  ; int 24h segment
 43245                                  	;;mov	di,82h
 43246                                  	;mov	di,INTBASE+2
 43247                                  
 43248                                  	; set default divide trap offset
 43249                                  
 43250                                  	;mov	word ptr ds:[0],offset doscode:divov
 43251 00007782 C7060000[7651]          	mov	word [0],DIVOV	
 43252                                  
 43253                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43254                                  
 43255                                  	;mov	di,80h
 43256 00007788 BF8000                  	mov	di,INTBASE
 43257                                  	;mov	ax,offset doscode:irett
 43258 0000778B B8[E102]                	mov	ax,IRETT
 43259                                  
 43260                                  	; 17/12/2022
 43261                                  	; cx = 0
 43262 0000778E B109                    	mov	cl,9
 43263                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43264                                  					;   sets offsets for ints 20h-28h
 43265                                  iset1:
 43266 00007790 AB                      	stosw
 43267                                  	;add	di,2
 43268                                  	; 20/06/2023
 43269 00007791 47                      	inc	di
 43270 00007792 47                      	inc	di
 43271 00007793 E2FB                    	loop	iset1
 43272                                  
 43273 00007795 83C704                  	add	di,4			; skip vector 29h
 43274                                  
 43275                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43276                                  ;					;   sets offsets for ints 2ah-2fh
 43277                                  ;iset2:
 43278                                  ;	stosw
 43279                                  ;	add	di,2
 43280                                  ;	loop	iset2
 43281                                  
 43282                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43283                                  ; patch_vec_segments above. So skip it.
 43284                                  
 43285                                  ;	add	di,8			; skip vector 30h & 31h 
 43286                                  
 43287                                  	;;;
 43288                                  	; 06/05/2019 - Retro DOS v4.0
 43289                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43290                                  	; 17/12/2022
 43291 00007798 B105                    	mov	cl,5 ; 28/06/2019
 43292                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43293                                  	;mov	cx,6
 43294                                  iset2:
 43295 0000779A AB                      	stosw
 43296                                  	;add	di,2
 43297                                  	; 20/09/2023
 43298 0000779B 47                      	inc	di
 43299 0000779C 47                      	inc	di	
 43300 0000779D E2FB                    	loop	iset2
 43301                                  
 43302                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43303                                  	; 17/12/2022
 43304 0000779F 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43305                                  	;add	di,8
 43306                                  	;;;
 43307                                  
 43308                                  	; 17/12/2022
 43309 000077A2 B10E                    	mov	cl,14
 43310                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43311                                  					;   sets offsets for ints 32h-3fh
 43312                                  iset3:
 43313 000077A4 AB                      	stosw
 43314                                  	;add	di,2
 43315                                  	; 20/09/2023
 43316 000077A5 47                      	inc	di
 43317 000077A6 47                      	inc	di
 43318 000077A7 E2FB                    	loop	iset3
 43319                                  
 43320                                  ;if installed
 43321                                  	; set the offset of int2f handler
 43322                                  	;mov	word [0BCh],INT2F
 43323 000077A9 C706BC00[0707]          	mov	word [02Fh*4],INT2F
 43324                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43325 000077AF 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43326                                  	;mov	[0BEh],ax
 43327 000077B3 A3BE00                  	mov	[(02Fh*4)+2],ax
 43328                                  ;endif
 43329                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43330                                  	; long jump will be patched in by seg_reinit
 43331                                  
 43332                                  	;mov	byte [C0h],0EAh
 43333 000077B6 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43334                                  	;mov	byte [C1h],CALL_ENTRY
 43335 000077BB C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43336                                  
 43337 000077C1 C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43338 000077C7 C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43339 000077CD C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43340 000077D3 89168A00                	mov	word [addr_int_terminate+2],dx	
 43341 000077D7 C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43342 000077DD C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43343 000077E3 C7069C00[AE60]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43344                                  
 43345 000077E9 16                      	push	ss
 43346 000077EA 1F                      	pop	ds
 43347                                  	
 43348                                  	; 24/05/2019
 43349                                  	;push	ss
 43350                                  	;pop	es
 43351                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43352                                  	; 17/12/2022
 43353                                  	;push	ss
 43354                                  	;pop	es
 43355                                  
 43356 000077EB 52                      	push	dx			; remember address of arena
 43357                                  
 43358 000077EC 42                      	inc	dx			; leave room for arena header
 43359                                  	;mov	[330h],dx
 43360 000077ED 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43361                                  
 43362 000077F1 31FF                    	xor	di,di			; point es:di at end of memory
 43363 000077F3 8EC2                    	mov	es,dx			; ...where psp will be
 43364 000077F5 31C0                    	xor	ax,ax
 43365                                  	;mov	cx,80h			; psp is 128 words
 43366                                  	; 17/12/2022
 43367 000077F7 B180                    	mov	cl,128 ; 28/06/2019
 43368                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43369                                  	;mov	cx,128
 43370                                  
 43371 000077F9 F3AB                    	rep	stosw			; zero out psp area
 43372 000077FB A1[4603]                        mov     ax,[ENDMEM]
 43373                                  	
 43374                                  	; 17/12/2022
 43375                                  	; cx = 0
 43376 000077FE E80899                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43377                                  
 43378                                  	; ds, es now point to PSP
 43379                                  
 43380 00007801 16                      	push	ss
 43381 00007802 1F                      	pop	ds
 43382                                  
 43383                                  	;mov	di,24
 43384 00007803 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43385 00007806 31C0                    	xor	ax,ax
 43386 00007808 AB                      	stosw
 43387 00007809 AA                      	stosb				; 0,1 and 2 are con device
 43388 0000780A B0FF                    	mov	al,0FFh
 43389                                  	;mov	cx,FILPERPROC-3 ; 17
 43390                                  	; 17/12/2022
 43391                                  	; cx = 4
 43392 0000780C B111                    	mov	cl,FILPERPROC-3 ; 17
 43393 0000780E F3AA                    	rep	stosb			; rest are unused
 43394                                  
 43395 00007810 16                      	push	ss
 43396 00007811 07                      	pop	es
 43397                                  					; must be set to print messages
 43398 00007812 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 43399                                  
 43400                                  ; after this point the char device functions for con will work for
 43401                                  ; printing messages
 43402                                  
 43403                                  	; 24/04/2019 - Retro DOS v4.0
 43404                                  
 43405                                  ; 12/05/2019
 43406                                  ;
 43407                                  ;write_version_msg:
 43408                                  ;
 43409                                  ;	;if	(not ibm)
 43410                                  ;	;mov	si,offset doscode:header
 43411                                  ;	mov	si,HEADER
 43412                                  ;outmes:
 43413                                  ;	;lods	cs:byte ptr [si]
 43414                                  ;	cs
 43415                                  ;	lodsb
 43416                                  ;	cmp	al,"$"
 43417                                  ;	je	short outdone
 43418                                  ;	call	OUTT
 43419                                  ;	jmp	short outmes
 43420                                  ;outdone:
 43421                                  ;	push	ss			; out stomps on segments
 43422                                  ;	pop	ds
 43423                                  ;	push	ss
 43424                                  ;	pop	es
 43425                                  ;	;endif
 43426                                  
 43427                                  	; at this point es is dosdata
 43428                                  
 43429                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43430                                  	; in sysinittable (ms_data.asm)
 43431                                  
 43432                                  	;mov	si,0D28h
 43433 00007816 BE[280D]                	mov	si,SysInitTable
 43434                                  
 43435                                  	; 17/12/2022
 43436                                  	; ds = es = ss
 43437                                  
 43438                                  	; 17/12/2022
 43439                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43440                                  ;%if 0
 43441                                  	;;mov	[es:si+6],es
 43442                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43443                                  	;;mov	[es:si+2],es
 43444                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43445                                  	
 43446 00007819 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43447 0000781C 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43448                                  
 43449                                  	; buffhead -> dosdata:hashinitvar 
 43450                                  
 43451                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43452 0000781F 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43453                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43454                                  	;mov	si,6Dh
 43455 00007823 BE[6D00]                	mov	si,HASHINITVAR
 43456                                  	;mov	[es:BUFFHEAD],si
 43457 00007826 8936[3800]              	mov	[BUFFHEAD],si
 43458                                  
 43459 0000782A 5A                              pop     dx                      ; restore address of arena
 43460                                  
 43461                                  	;mov	[032Ch+2],dx
 43462 0000782B 8916[2E03]                      mov     [DMAADD+2],dx
 43463                                  
 43464                                  	;mov	[es:arena_head],dx
 43465 0000782F 8916[2400]              	mov	[arena_head],dx
 43466                                  
 43467                                  ;%endif
 43468                                  
 43469                                  ; 17/12/2022
 43470                                  %if 0
 43471                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43472                                  	;;;
 43473                                  	;mov	[es:si+6],es
 43474                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43475                                  	;mov	[es:si+2],es
 43476                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43477                                  
 43478                                  	; buffhead -> dosdata:hashinitvar 
 43479                                  
 43480                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43481                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43482                                  	;mov	si,6Dh
 43483                                  	mov	si,HASHINITVAR
 43484                                  	mov	[es:BUFFHEAD],si
 43485                                  
 43486                                          pop     dx                      ; restore address of arena
 43487                                  
 43488                                  	;mov	[032Ch+2],dx
 43489                                          mov     [DMAADD+2],dx
 43490                                  
 43491                                  	mov	[es:arena_head],dx
 43492                                  	;;;
 43493                                  %endif
 43494                                  
 43495 00007833 8EDA                            mov     ds,dx
 43496                                  
 43497                                  	;mov	byte [0],'Z'
 43498 00007835 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43499                                          ;mov	word [1],0
 43500 0000783A C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43501                                  
 43502 00007840 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43503 00007844 29D0                    	sub	ax,dx
 43504 00007846 48                              dec     ax
 43505 00007847 A30300                          mov     [ARENA.SIZE],ax
 43506                                  
 43507                                  	; point to sft 0
 43508                                  
 43509                                  	;mov	di,offset dosdata:sftabl + sftable
 43510                                  	;mov	di,SFTABL+6
 43511 0000784A BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43512 0000784D B80300                          mov     ax,3
 43513 00007850 AB                              stosw           		; adjust refcount
 43514                                  
 43515                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43516                                  
 43517                                          ;mov	di,offset dosdata:sysinittable
 43518                                  	;mov	di,0D28h
 43519 00007851 BF[280D]                	mov	di,SysInitTable	
 43520                                  
 43521 00007854 42                      	inc	dx			; advance dx from arena to psp
 43522 00007855 8EDA                    	mov	ds,dx			; point ds to psp
 43523                                  
 43524                                  					; pass the address os seg_reinit 
 43525                                  					; in dx
 43526 00007857 BA[C578]                	mov	dx,seg_reinit
 43527 0000785A B9[E972]                	mov	cx,exepatch_start
 43528 0000785D 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43529                                  
 43530 00007861 B8[A075]                	mov	ax,SYSBUF
 43531 00007864 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43532                                  	
 43533 00007867 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43534 0000786C 368E16[8605]                    mov     ss,[ss:USER_SS]
 43535                                  
 43536 00007871 CB                              retf
 43537                                  
 43538                                  ;
 43539                                  ; END OF DOSINIT
 43540                                  ;
 43541                                  ;--------------------------------------------------------------------------
 43542                                  
 43543                                  CHARINIT:
 43544                                  	; 24/04/2019 - Retro DOS v4.0
 43545                                  	; 07/07/2018 - Retro DOS v3.0
 43546                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43547 00007872 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43548                                  	;mov	byte [ss:035Bh],0
 43549 00007878 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43550                                  	;mov	byte [ss:035Ch],0
 43551 0000787E 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43552                                  	;mov	word [ss:035BD],0
 43553 00007884 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43554 0000788B 06                              PUSH	ES
 43555 0000788C 53                              PUSH	BX
 43556 0000788D 50                              PUSH	AX
 43557 0000788E BB[5A03]                        MOV	BX,DEVCALL
 43558                                          ;PUSH	CS
 43559 00007891 16                      	PUSH	SS ; 30/04/2019
 43560 00007892 07                              POP	ES
 43561 00007893 E8D8CC                          CALL	DEVIOCALL2	
 43562 00007896 58                      	POP	AX
 43563 00007897 5B                              POP	BX
 43564 00007898 07                              POP	ES
 43565 00007899 C3                              RETN
 43566                                  
 43567                                  ; 25/04/2019 - Retro DOS v4.0
 43568                                  
 43569                                  ;-----------------------------------------------------------------------------
 43570                                  ;
 43571                                  ;	check_XMM: routine to check presence of XMM driver
 43572                                  ;
 43573                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43574                                  ;
 43575                                  ;	USED:	none
 43576                                  ;
 43577                                  ;-----------------------------------------------------------------------------
 43578                                  
 43579                                  check_XMM: ; proc near
 43580                                  ;
 43581                                  ; determine whether or not an XMM driver is installed
 43582                                  ;
 43583 0000789A 50                      	push	ax
 43584                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43585 0000789B B80043                  	mov	ax,4300h
 43586 0000789E CD2F                    	int	2Fh
 43587                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43588                                  		; Return: AL = 80h XMS driver installed
 43589                                  		; AL <> 80h no driver
 43590 000078A0 3C80                    	cmp	al,80h			; Q: installed
 43591 000078A2 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43592                                  ;
 43593                                  ; get the XMM control functions entry point, save it, we
 43594                                  ; need to call it later.
 43595                                  ;
 43596 000078A4 53                      	push	bx
 43597 000078A5 52                      	push	dx
 43598 000078A6 1E                      	push	ds
 43599 000078A7 06                      	push	es
 43600                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43601 000078A8 B81043                  	mov	ax,4310h
 43602 000078AB CD2F                    	int	2Fh
 43603                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43604                                  		; Return: ES:BX -> driver entry point
 43605                                  
 43606 000078AD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43607                                  
 43608 000078B2 891E[4911]              	mov	[XMMcontrol],bx
 43609 000078B6 8C06[4B11]              	mov	[XMMcontrol+2],es
 43610                                  cXMMexit:
 43611 000078BA F8                      	clc
 43612 000078BB 07                      	pop	es
 43613 000078BC 1F                      	pop	ds
 43614 000078BD 5A                      	pop	dx
 43615 000078BE 5B                      	pop	bx
 43616 000078BF 58                      	pop	ax
 43617 000078C0 C3                      	retn				; done
 43618                                  ;
 43619                                  ; set carry if XMM driver not present
 43620                                  ;
 43621                                  cXMM_no_driver:
 43622 000078C1 F9                      	stc
 43623 000078C2 58                      	pop	ax
 43624 000078C3 C3                      	retn
 43625                                  
 43626                                  ;-----------------------------------------------------------------------------
 43627                                  ;
 43628                                  ; Procedure Name : seg_reinit
 43629                                  ;
 43630                                  ; Inputs	 : ES has final dos code location
 43631                                  ;		   AX = 0 / 1
 43632                                  ;
 43633                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43634                                  ;		   if AX =0
 43635                                  ;		      if first entry
 43636                                  ;			 patch segment & offset of vectors with stub
 43637                                  ;			 and stub with segment in ES
 43638                                  ;		      else
 43639                                  ;			 patch stub with segment in ES
 43640                                  ;
 43641                                  ;		   else if AX = 1
 43642                                  ;			patch segment of vectors with segment in ES	
 43643                                  ;
 43644                                  ; NOTE		 : This routine can be called at most twice!
 43645                                  ;
 43646                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43647                                  ;-----------------------------------------------------------------------------
 43648                                  
 43649 000078C4 00                      num_entry: db	0		; keeps track of the # of times this routine
 43650                                  				; has been called. (0 or 1)
 43651                                  
 43652                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43653                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43654                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43655                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43656                                  
 43657                                  seg_reinit:	; proc	far
 43658 000078C5 1E                      	push	ds
 43659                                  
 43660 000078C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43661                                  
 43662 000078CB E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43663                                  					; other tables with seg in ES.
 43664                                  	; 17/12/2022
 43665                                  	; cx = 0
 43666 000078CE 39C8                    	cmp	ax,cx ; 0
 43667                                  	;cmp	ax,0
 43668 000078D0 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43669                                  
 43670                                  	; 17/12/2022
 43671 000078D2 2E380E[C478]            	cmp	[cs:num_entry],cl ; 0
 43672                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43673 000078D7 7508                    	jne	short second_entry	; N: just patch the stub with 
 43674                                  					;    segment in ES
 43675                                  					; Y: patch the vectors with stub 
 43676 000078D9 8CD8                    	mov	ax,ds
 43677 000078DB E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43678 000078DE E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43679                                  					; with those in the stub.
 43680                                  	; 17/12/2022
 43681                                  	; cx = 0
 43682                                  second_entry:
 43683 000078E1 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43684                                  
 43685                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43686                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43687 000078E3 BF[4810]                	mov	di,DOSINTTABLE
 43688                                  	; 17/12/2022
 43689                                  	; cx = 0
 43690                                  	;mov	cx,9
 43691 000078E6 B109                    	mov	cl,9
 43692 000078E8 1E                      	push	ds			
 43693 000078E9 07                      	pop	es			; es:di -> DOSINTTABLE
 43694                                  
 43695                                  dosinttabloop:
 43696                                  	;add	di,2
 43697                                  	; 19/09/2023
 43698 000078EA 47                      	inc	di
 43699 000078EB 47                      	inc	di
 43700 000078EC AB                      	stosw
 43701 000078ED E2FB                    	loop	dosinttabloop	
 43702                                  
 43703                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43704                                  ; use the HMA, so we don't want to check CS
 43705                                  
 43706                                  ;ifndef ROMDOS
 43707 000078EF 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43708 000078F2 7220                    	jb	short sr_done		; N: done
 43709                                  ;endif
 43710 000078F4 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43711 000078F7 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43712                                  					; A20 toggling in the stub.
 43713                                  	; 17/12/2022
 43714                                  	; cx = 0
 43715 000078F9 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43716                                  ; M021-
 43717                                  	;mov	byte [1211h],1
 43718 000078FC C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43719                                  				
 43720                                  					; set pointer to the routine that 
 43721                                  					; patches buggy exepacked code.
 43722                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43723 00007901 C706[F811][3974]        	mov	word [FixExePatch],ExePatch
 43724                                  					; M068: set pointer to the routine 
 43725                                  					; M068: that detects copy protected
 43726                                  					; M068: apps
 43727                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43728 00007907 C706[6100][6A75]        	mov	word [ChkCopyProt],IsCopyProt
 43729                                  
 43730                                  ; 28/12/2022 - Retro DOS v4.1
 43731                                  %if 0
 43732                                  ;----------------------------------------------------------------------------
 43733                                  
 43734                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43735                                  
 43736                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43737                                  ;
 43738                                  ;; M020 - begin
 43739                                  ;
 43740                                  ;	call	WhatCPUType
 43741                                  ;	cmp	al,1
 43742                                  ;	jne	short sr_done 		; we need Rational Patch only
 43743                                  ;					;  on 286 systems
 43744                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43745                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43746                                  ;
 43747                                  ;; M020 - end
 43748                                  ;
 43749                                  ;	jmp	short sr_done
 43750                                  ;
 43751                                  ;patch_vec_seg:				; patch vectors with segment in es
 43752                                  ;	mov	ax,es
 43753                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43754                                  ;					; NOTE we don't have to patch the 
 43755                                  ;					; offsets as they have been already
 43756                                  ;					; set to the doscode offsets at
 43757                                  ;					; DOSINIT.
 43758                                  ;sr_done:
 43759                                  ;	mov	byte [cs:num_entry],1
 43760                                  ;	pop	ds
 43761                                  ;	retf	; ! far return !
 43762                                  
 43763                                  ;----------------------------------------------------------------------------
 43764                                  ;
 43765                                  ; Procedure Name : WhatCPUType
 43766                                  ;
 43767                                  ; Inputs	 : none
 43768                                  ;
 43769                                  ; Outputs	 : AL = 0 if CPU <  286
 43770                                  ;		      = 1 if CPU == 286
 43771                                  ;		      = 2 if CPU >= 386
 43772                                  ;
 43773                                  ; Regs. Mod.	 : AX
 43774                                  ;
 43775                                  ;----------------------------------------------------------------------------
 43776                                  
 43777                                  WhatCPUType:
 43778                                  	; 25/04/2019 - Retro DOS v4.0
 43779                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43780                                  
 43781                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43782                                  
 43783                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43784                                  ; 	it is called from both CODE and SYSINITSEG.
 43785                                  ;
 43786                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43787                                  ;  Returns: AX = 0 if 8086 or 8088
 43788                                  ;              = 1 if 80286
 43789                                  ;              = 2 if 80386
 43790                                  
 43791                                  	; 04/11/2022
 43792                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43793                                  
 43794                                  Get_CPU_Type:	;macro
 43795                                  	pushf
 43796                                  	push	bx			; preserve bx
 43797                                  	xor	bx,bx			; init bx to zero
 43798                                  
 43799                                  	xor	ax,ax			; 0000 into AX
 43800                                  	push	ax			; put it on the stack...
 43801                                  	popf				; ...then shove it into the flags
 43802                                  	pushf				; get it back out of the flags...
 43803                                  	pop	ax			; ...and into ax
 43804                                  	and	ax,0F000h		; mask off high four bits
 43805                                  	cmp	ax,0F000h		; was it all 1's?
 43806                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43807                                  
 43808                                  	mov	ax,0F000h		; now try to set the high four bits..
 43809                                  	push	ax
 43810                                  	popf
 43811                                  	pushf
 43812                                  	pop	ax			; ...and see what happens
 43813                                  	and	ax,0F000h		; any high bits set ?
 43814                                  	jz	short cpu_286		; nay; it's an 80286
 43815                                  
 43816                                  cpu_386:				; bx starts as zero
 43817                                  	inc	bx			; inc twice if 386
 43818                                  cpu_286:				; just inc once if 286
 43819                                  	inc	bx
 43820                                  cpu_8086:				; don't inc at all if 086
 43821                                  	mov	ax,bx			; put CPU type value in ax
 43822                                  	pop	bx			; restore original bx
 43823                                  	popf
 43824                                  	
 43825                                  	;endm
 43826                                  
 43827                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43828                                  	;retn
 43829                                  
 43830                                  	; 04/11/2022
 43831                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43832                                  	cmp	al,1
 43833                                  	jne	short sr_done 		; we need Rational Patch only
 43834                                  					;  on 286 systems
 43835                                  	mov	word [RationalPatchPtr],RationalPatch
 43836                                  
 43837                                  ;----------------------------------------------------------------------------
 43838                                  %endif	; 28/12/2022
 43839                                  
 43840 0000790D EB05                    	jmp	short sr_done
 43841                                  
 43842                                  patch_vec_seg:				; patch vectors with segment in es
 43843 0000790F 8CC0                    	mov	ax,es
 43844 00007911 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43845                                  					; NOTE we don't have to patch the 
 43846                                  					; offsets as they have been already
 43847                                  					; set to the doscode offsets at
 43848                                  					; DOSINIT.
 43849                                  sr_done:
 43850 00007914 2EC606[C478]01          	mov	byte [cs:num_entry],1
 43851 0000791A 1F                      	pop	ds
 43852 0000791B CB                      	retf	; ! far return !
 43853                                  
 43854                                  ;----------------------------------------------------------------------------
 43855                                  ;
 43856                                  ; Procedure Name : patch_vec_segments
 43857                                  ;
 43858                                  ; Inputs	 : ax -> has segment address to patch in
 43859                                  ;		   ds -> DOSDATA
 43860                                  ;
 43861                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43862                                  ;			
 43863                                  ;			0,20-28,3a-3f
 43864                                  ;
 43865                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43866                                  ;
 43867                                  ;----------------------------------------------------------------------------
 43868                                  
 43869                                  patch_vec_segments:
 43870                                  
 43871 0000791C 06                      	push	es
 43872                                  
 43873 0000791D 31C9                    	xor	cx,cx ; 0
 43874 0000791F 8EC1                    	mov	es,cx
 43875                                  
 43876                                  	;mov	di,82h
 43877 00007921 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43878                                  
 43879 00007924 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43880                                  
 43881                                  					; set vectors 20 & 21
 43882                                  	; 04/11/2022
 43883                                  	;mov	cx,2
 43884                                  	; 17/12/2022
 43885                                  	;mov	cl,2
 43886                                  ps_set1:
 43887 00007928 AB                      	stosw	
 43888                                  	;add	di,2
 43889                                  	; 17/12/2022
 43890 00007929 47                      	inc	di
 43891 0000792A 47                      	inc	di
 43892                                  	;loop	ps_set1
 43893                                  
 43894                                  	; 17/12/2022
 43895 0000792B AB                      	stosw	; int 21h segment
 43896                                  	;inc	di
 43897                                  	;inc	di
 43898                                  
 43899                                  	;add	di,4			; skip int 22h vector
 43900 0000792C 83C706                  	add	di,6 ; *
 43901                                  
 43902 0000792F AB                      	stosw				; set int 23h
 43903 00007930 83C706                  	add	di,6			; skip int 24h
 43904                                  
 43905                                  					; set vectors 25-28 and 2a-3f 
 43906                                  	; 04/11/2022
 43907                                  	;mov	cx,4			; set 4 segments
 43908                                  	; 17/12/2022
 43909 00007933 B104                    	mov	cl,4
 43910                                  ps_set2:
 43911 00007935 AB                      	stosw				
 43912                                  	;add	di,2
 43913                                  	; 17/12/2022
 43914 00007936 47                      	inc	di
 43915 00007937 47                      	inc	di
 43916 00007938 E2FB                    	loop	ps_set2
 43917                                  
 43918 0000793A 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43919                                  					;   already be set.
 43920                                  	; 04/11/2022
 43921                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43922                                  	; 17/12/2022
 43923 0000793D B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43924                                  ps_set3:
 43925 0000793F AB                      	stosw
 43926                                  	;add	di,2
 43927                                  	; 17/12/2022
 43928 00007940 47                      	inc	di
 43929 00007941 47                      	inc	di
 43930 00007942 E2FB                    	loop	ps_set3
 43931                                  
 43932                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43933                                  ; below. So skip it.
 43934                                  
 43935 00007944 83C708                  	add	di,8			; skip vector 30h & 31h 
 43936                                  	
 43937                                  	; 04/11/2022
 43938                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43939                                  	; 17/12/2022
 43940 00007947 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43941                                  ps_set4:
 43942 00007949 AB                      	stosw
 43943                                  	;add	di,2
 43944                                  	; 17/12/2022
 43945 0000794A 47                      	inc	di
 43946 0000794B 47                      	inc	di
 43947 0000794C E2FB                    	loop	ps_set4
 43948                                  
 43949                                  ; set offset of int2f
 43950                                  
 43951                                  ;if installed
 43952                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43953                                  ;endif
 43954                                  	;mov	[es:0C3h],ax
 43955 0000794E 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43956                                  	; 17/12/2022
 43957                                  	; cx = 0
 43958 00007952 07                      	pop	es
 43959 00007953 C3                      	retn
 43960                                  
 43961                                  ;---------------------------------------------------------------------------
 43962                                  ;
 43963                                  ; Procedure Name : patch_misc_segments
 43964                                  ;
 43965                                  ; Inputs	 : es = segment to patch in
 43966                                  ;		   ds = dosdata
 43967                                  ;
 43968                                  ; outputs	 : patches in the sharer and other tables in the dos
 43969                                  ;		   with right dos code segment in es
 43970                                  ;
 43971                                  ; Regs Mod	 : DI,SI,CX
 43972                                  ;
 43973                                  ;---------------------------------------------------------------------------
 43974                                  
 43975                                  patch_misc_segments:
 43976                                  
 43977 00007954 53                      	push	bx
 43978 00007955 06                      	push	es
 43979 00007956 50                      	push	ax
 43980                                  
 43981 00007957 8CC0                    	mov	ax,es			; ax - > DOS segment
 43982                                  	
 43983 00007959 1E                      	push	ds
 43984 0000795A 07                      	pop	es			; es -> DOSDATA
 43985                                  	
 43986                                  ; initialize the jump table for the sharer...
 43987                                  
 43988                                  	;mov	di,offset dosdata:jshare
 43989                                  	;mov	di,90h
 43990 0000795B BF[9000]                	mov	di,JShare
 43991                                  	;mov	bx,[0AAAh]
 43992 0000795E 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43993                                  					; table was patched during the first
 43994                                  					; call to this routine
 43995 00007962 B90F00                  	mov	cx,15
 43996                                  jumptabloop:
 43997                                  	;add	di,2			; skip offset
 43998                                  	; 17/12/2022
 43999 00007965 47                      	inc	di
 44000 00007966 47                      	inc	di
 44001 00007967 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44002 0000796A 7405                    	je	short share_patch	; Y: patch in sharer table
 44003                                  					; N: 
 44004 0000796C 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44005 0000796F 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44006                                  share_patch:
 44007 00007971 AB                      	stosw				; drop in segment
 44008                                  no_share_patch:
 44009 00007972 E2F1                    	loop	jumptabloop
 44010                                  					; BUGBUG patching the country info 
 44011                                  					; with dosdata can be done inline
 44012                                  					; in dosinit.
 44013                                  					; for dos 3.3 country info
 44014                                  					; table address
 44015                                  
 44016                                  	;mov	si,offset dosdata:country_cdpg
 44017                                  	;mov	si,122Ah   
 44018 00007974 BE[0512]                	mov	si,COUNTRY_CDPG
 44019                                  					; initialize double word
 44020                                  					; pointers with dosdata in ds
 44021                                  	;mov	[si+4Fh],ds
 44022                                  	;mov	[si+54h],ds
 44023                                  	;mov	[si+59h],ds
 44024                                  	;mov	[si+5Eh],ds
 44025                                  	;mov	[si+80h],ds
 44026                                  	;mov	[si+63h],ds
 44027 00007977 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44028 0000797A 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44029 0000797D 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44030 00007980 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44031 00007983 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44032 00007987 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44033                                  
 44034                                  					; fastopen routines are in doscode
 44035                                  					; so patch with doscode seg in ax
 44036                                  
 44037                                  	;mov	si,offset dosdata:fastopentable
 44038                                  	;mov	si,0D30h
 44039 0000798A BE[300D]                	mov	si,FastOpenTable
 44040                                  
 44041                                  	; 17/12/2022
 44042                                  	; bx = [TEMP_DOSLOC]
 44043 0000798D 83FBFF                  	cmp	bx,-1
 44044                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44045 00007990 7405                    	je	short fast_patch	; Y: patch segment
 44046                                  	;mov	cx,[TEMP_DOSLOC]
 44047                                  					; Q: has fastopen patched in it's
 44048                                  					;    segment
 44049                                  	; 17/12/2022
 44050 00007992 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44051                                  	;;cmp	cx,[si+4]
 44052                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44053 00007995 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44054                                  
 44055                                  fast_patch:
 44056                                  	;mov	[si+4],ax
 44057 00007997 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44058                                  no_fast_patch:
 44059                                  	; 17/12/2022
 44060                                  	; cx = 0
 44061 0000799A 58                      	pop	ax
 44062 0000799B 07                      	pop	es
 44063 0000799C 5B                      	pop	bx
 44064                                  
 44065 0000799D C3                      	retn
 44066                                  
 44067                                  ;--------------------------------------------------------------------------
 44068                                  ;
 44069                                  ; Procedure Name : patch_offset
 44070                                  ; 
 44071                                  ; Inputs	 : NONE
 44072                                  ;
 44073                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44074                                  ;		   0,20-28,3a-3f, and 30,31
 44075                                  ;
 44076                                  ;
 44077                                  ; Regs. Mod	 : AX,DI,CX
 44078                                  ;--------------------------------------------------------------------------
 44079                                  
 44080                                  patch_offset:
 44081 0000799E 06                      	push	es		; preserve es
 44082                                  
 44083 0000799F 31C0                    	xor	ax,ax
 44084 000079A1 8EC0                    	mov	es,ax
 44085                                  				; set default divide trap address
 44086                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 44087                                  	;mov	word [es:0],108Ah
 44088 000079A3 26C7060000[7010]        	mov	word [es:0],ldivov
 44089                                  
 44090                                  	;mov	di,80h
 44091 000079AA BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44092                                  	;mov	ax,offset dosdata:lirett
 44093                                  	;mov	ax,10DAh
 44094 000079AD B8[C010]                	mov	ax,lirett
 44095                                  				; set vectors 20 & 21 to point to iret.
 44096                                  	; 17/12/2022
 44097                                  	; cx = 0
 44098                                  
 44099                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44100                                  po_iset1:
 44101 000079B0 AB                      	stosw	; int 20h offset
 44102                                  	;add	di,2 ; *
 44103                                  	;loop	po_iset1
 44104                                  	; 17/12/2022
 44105 000079B1 47                      	inc	di
 44106 000079B2 47                      	inc	di
 44107 000079B3 AB                      	stosw	; int 21h offset
 44108                                  
 44109                                  	;add	di,4		; skip vector 22h
 44110                                  	; 17/12/2022
 44111 000079B4 83C706                  	add	di,6 ; *	
 44112                                  
 44113 000079B7 AB                      	stosw			; set offset of 23h
 44114                                  	;add	di,6		; skip 24h
 44115                                  	; 19/09/2023
 44116 000079B8 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44117                                  
 44118                                  				; set vectors 25-28 and 2a-3f to iret.
 44119                                  	; 04/11/2022
 44120                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44121                                  	; 19/09/2023
 44122                                  	; 17/12/2022
 44123                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 44124                                  po_iset2:
 44125 000079BB AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44126                                  	;add	di,2
 44127                                  	; 19/09/2023
 44128                                  	; 17/12/2022
 44129                                  	;inc	di
 44130                                  	;inc	di
 44131                                  	; 19/09/2023
 44132                                  	;loop	po_iset2
 44133                                  
 44134                                  	;add	di,4		; skip vector 29h
 44135                                  	; 19/09/2023
 44136 000079BC 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44137                                  
 44138                                  	; 04/11/2022
 44139                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44140                                  	; 17/12/2022
 44141                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 44142 000079BF B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44143                                  po_iset3:
 44144 000079C1 AB                      	stosw
 44145                                  	;add	di,2
 44146                                  	; 17/12/2022
 44147 000079C2 47                      	inc	di
 44148 000079C3 47                      	inc	di
 44149 000079C4 E2FB                    	loop	po_iset3
 44150                                  
 44151                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44152                                  ; below. So skip it.
 44153                                  
 44154                                  	;add	di,8		; skip vector 30h & 31h 
 44155                                  	; 17/12/2022
 44156 000079C6 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44157                                  
 44158                                  	; 04/11/2022
 44159                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44160                                  				;   sets offsets for ints 32h-3fh
 44161                                  	; 17/12/2022
 44162 000079C9 B10E                    	mov	cl,14 ; 26/06/2019
 44163                                  po_iset4:
 44164 000079CB AB                      	stosw
 44165                                  	;add	di,2
 44166                                  	; 17/12/2022
 44167 000079CC 47                      	inc	di
 44168 000079CD 47                      	inc	di
 44169 000079CE E2FB                    	loop	po_iset4
 44170                                  
 44171                                  ;if installed
 44172                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44173                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44174 000079D0 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 44175                                  ;endif
 44176                                  
 44177                                  ; set up entry point call at vectors 30-31h
 44178                                  	;mov	byte [es:0C0h],0EAh
 44179 000079D7 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44180                                  	;mov	word [es:0C1h],10D0h
 44181                                  
 44182 000079DD 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44183                                  
 44184                                  							; 19/09/2023
 44185                                  	;mov	word [es:80h],1094h
 44186 000079E4 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44187                                  	;mov	word [es:84h],109Eh
 44188 000079EB 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44189                                  	;mov	word [es:94h],10A8h
 44190 000079F2 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44191                                  	;mov	word [es:98h],10B2h
 44192 000079F9 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44193                                  	;mov	word [es:9Ch],10BCh
 44194 00007A00 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44195                                  
 44196                                  	; 17/12/2022
 44197                                  	; CX = 0
 44198 00007A07 07                      	pop	es		; restore es
 44199 00007A08 C3                      	retn
 44200                                  
 44201                                  ;--------------------------------------------------------------------------
 44202                                  ;
 44203                                  ; 	Procedure Name	:	patch_in_nops
 44204                                  ;
 44205                                  ; 	Entry		: 	ES -> DOSDATA
 44206                                  ;
 44207                                  ;	Regs Mod	: 	cx, di
 44208                                  ;
 44209                                  ;	Description:
 44210                                  ;		This routine patches in 2 nops at the offsets specified in 
 44211                                  ;	patch_table. This basically enables the low mem stub to start 
 44212                                  ;	making XMS calls.
 44213                                  ;
 44214                                  ;--------------------------------------------------------------------------
 44215                                  
 44216                                  	; 04/11/2022
 44217                                  	; (MSDOS 5.0 MSDOS.SYS)
 44218                                  	; DOSCODE:0BC50h
 44219                                  
 44220                                  patch_table:	; label	byte
 44221                                  	;dw	offset dosdata:i0patch
 44222                                  	;dw	offset dosdata:i20patch
 44223                                  	;dw	offset dosdata:i21patch
 44224                                  	;dw	offset dosdata:i25patch
 44225                                  	;dw	offset dosdata:i26patch
 44226                                  	;dw	offset dosdata:i27patch
 44227                                  	;dw	offset dosdata:i2fpatch
 44228                                  	;dw	offset dosdata:cpmpatch
 44229 00007A09 [7010]                  	dw	i0patch
 44230 00007A0B [7A10]                  	dw	i20patch
 44231 00007A0D [8410]                  	dw	i21patch
 44232 00007A0F [8E10]                  	dw	i25patch
 44233 00007A11 [9810]                  	dw	i26patch
 44234 00007A13 [A210]                  	dw	i27patch
 44235 00007A15 [AC10]                  	dw	i2fpatch
 44236 00007A17 [B610]                  	dw	cpmpatch
 44237                                  
 44238                                  patch_table_size equ ($-patch_table)/2
 44239                                  
 44240                                  patch_in_nops:
 44241 00007A19 50                      	push	ax
 44242 00007A1A 56                      	push	si
 44243 00007A1B BE[097A]                	mov	si,patch_table
 44244 00007A1E B89090                  	mov	ax,9090h ; nop, nop
 44245                                  	; 17/12/2022
 44246                                  	; cx = 0
 44247                                  	;mov	cx,8
 44248                                  	;mov	cx,patch_table_size ; 8
 44249 00007A21 B108                    	mov	cl,patch_table_size ; 8
 44250                                  pin_loop:
 44251 00007A23 2E8B3C                  	mov	di,[cs:si]
 44252 00007A26 AB                      	stosw
 44253                                  	;add	si,2
 44254                                  	; 17/12/2022
 44255 00007A27 46                      	inc	si
 44256 00007A28 46                      	inc	si
 44257 00007A29 E2F8                    	loop	pin_loop
 44258 00007A2B 5E                      	pop	si
 44259 00007A2C 58                      	pop	ax
 44260 00007A2D C3                      	retn
 44261                                  
 44262                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44263                                  ; ---------------------------------------------------------------------------
 44264                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44265                                  ; ---------------------------------------------------------------------------
 44266                                  
 44267                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 44268                                  DOSCODE_END:
 44269                                  	;times	9 db 0	; db 9 dup(0)
 44270                                  	; 18/12/2022
 44271 00007A2E 0000                    	dw	0  ;	times 2 db 0
 44272                                  
 44273                                  ;align 16
 44274                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44275                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44276                                  
 44277                                  ; ---------------------------------------------------------------------------
 44278                                  
 44279                                  
 44280                                  ;memstrt label word
 44281                                  ; ---------------------------------------------------------------------------
 44282                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44283                                  ; ---------------------------------------------------------------------------
 44284                                  
 44285                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44286                                  
 44287                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44288                                  ; the dos initialization segment
 44289                                  
 44290                                  ;ifndef ROMDOS
 44291                                  
 44292                                  ;doscode ends
 44293                                  
 44294                                  ;else
 44295                                  
 44296                                  ;;dosinitseg ends
 44297                                  
 44298                                  ;endif ; ROMDOS
 44299                                  
 44300                                  ;============================================================================
 44301                                  
 44302                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44303                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44304                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44305                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44306                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44307                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44308                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44309                                  
 44310                                  ;; burasý doscode sonu
 44311                                  
 44312                                  ;============================================================================
 44313                                  ; DOSDATA
 44314                                  ;============================================================================
 44315                                  ; 29/04/2019 - Retro DOS 4.0
 44316                                  
 44317                                  ;[BITS 16]
 44318                                  
 44319                                  ;[ORG 0]
 44320                                  
 44321                                  ; 25/04/2019 - Retro DOS v4.0
 44322                                  
 44323                                  ;============================================================================
 44324                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44325                                  ;============================================================================
 44326                                  
 44327                                  ;align 16
 44328                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44329                                  	; (4970 bytes for MSDOS 6.21)
 44330                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44331                                  
 44332                                  ;============================================================================
 44333                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44334                                  ;============================================================================
 44335                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44336                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44337                                  ; 16/07/2018 - Retro DOS 3.0	
 44338                                  
 44339                                  ;Break <Initialized data and data used at DOS initialization>
 44340                                  ;----------------------------------------------------------------------------
 44341                                  
 44342                                  ; We need to identify the parts of the data area that are relevant to tasks
 44343                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44344                                  ; data will be gathered with the system code. The process data under 2.x will
 44345                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44346                                  ;
 44347                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44348                                  ; describing that data item.
 44349                                  
 44350                                  ;DOSDATA SEGMENT
 44351                                  
 44352                                  ; 04/11/2022
 44353                                  ;[ORG 0]
 44354                                  
 44355                                  ; ----------------------------------------------------------------------------
 44356                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44357                                  ; ----------------------------------------------------------------------------
 44358                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44359                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44360                                  ; ----------------------------------------------------------------------------
 44361                                  
 44362                                  ; 04/11/2022
 44363                                  
 44364                                  ;DOSDATA:0000h
 44365                                  
 44366                                  align 16
 44367                                  
 44368                                  ; ----------------------------------------------------------------------------
 44369                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44370                                  ; ----------------------------------------------------------------------------
 44371                                  
 44372                                  segment .data  vstart=0 ; 06/12/2022
 44373                                  								
 44374                                  ; ============================================================================
 44375                                  
 44376                                  ; 06/12/2022
 44377                                  ;DOSDATASTART equ $
 44378                                  DOSDATASTART:
 44379                                  
 44380                                  
 44381                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44382                                  
 44383                                  	;; 03/11/2022
 44384                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44385                                  
 44386                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44387                                  	;db	4 dup (?)	
 44388 00000000 00<rep 4h>              	times	4 db 0
 44389                                  
 44390                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44391                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44392                                  	;dw	0
 44393                                  
 44394                                  	;EVEN
 44395                                  
 44396                                  ;align 2
 44397                                  
 44398                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44399                                  ; area compatability. This location must be incremented EACH TIME the data
 44400                                  ; area here gets mucked with.
 44401                                  ;
 44402                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44403                                  
 44404                                  MSCT001S:	; LABEL BYTE
 44405                                  	
 44406                                  DataVersion:	
 44407 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44408                                  
 44409                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44410                                  ;hkn; been removed to DOSCODE above
 44411                                  
 44412                                  ;M044
 44413                                  ; First part of save area for saving last para of Window memory
 44414                                  
 44415                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44416 00000006 00<rep 8h>              	times	8 db 0
 44417                                  
 44418                                  	; MSDOS 6.21 DOSDATA:000Eh
 44419                                  MYNUM:			; Offset 000Eh
 44420 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44421                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44422 00000010 0000                    	dw	0
 44423                                  OpenLRU:
 44424 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44425                                  OEM_HANDLER: 		
 44426 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44427                                  
 44428                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44429                                  ;;			way that we leave DOS???? - jgl
 44430                                  
 44431                                  LeaveAddr:
 44432 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44433                                  RetryCount:		
 44434 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44435                                  RetryLoop:
 44436 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44437                                  LastBuffer:
 44438 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44439                                  CONTPOS:
 44440 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44441                                  arena_head:
 44442 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44443                                  
 44444                                  ;; 16/07/2018
 44445                                  ;;***************************************************************************
 44446                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44447                                  ;;***************************************************************************
 44448                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44449                                  ;;
 44450                                  ;;	AH = 52h
 44451                                  ;;
 44452                                  ;;	on return:
 44453                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44454                                  ;;		Known "invars" fields follow (varies with DOS version):
 44455                                  ;;
 44456                                  ;;	Offset Size		 Description
 44457                                  ;;
 44458                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44459                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44460                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44461                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44462                                  ;;		      0 indicates no unread input (DOS 3.x)
 44463                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44464                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44465                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44466                                  ;;	  08   dword  pointer to $CLOCK device driver
 44467                                  ;;	  0C   dword  pointer to CON device driver
 44468                                  ;;	  10   byte   number of logical drives in system
 44469                                  ;;	  11   word   maximum bytes/block of any block device
 44470                                  ;;	  13   dword  pointer to DOS cache buffer header
 44471                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44472                                  ;;		      point to the next device in device chain
 44473                                  ;;
 44474                                  ;;***************************************************************************
 44475                                  
 44476                                  ; The following block of data is used by SYSINIT. 
 44477                                  ; Do not change the order or size of this block
 44478                                  
 44479                                  ;SYSINITVAR:
 44480                                  ;----------------------------------------------------------------------------
 44481                                  SYSINITVARS:
 44482                                  DPBHEAD:
 44483 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44484                                  SFT_ADDR:
 44485 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44486                                  BCLOCK:
 44487 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44488                                  BCON:
 44489 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44490                                  MAXSEC:
 44491 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44492                                  BUFFHEAD:
 44493 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44494                                  CDSADDR:
 44495 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44496                                  SFTFCB:
 44497 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44498                                  KEEPCOUNT:
 44499 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44500                                  NUMIO:
 44501 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44502                                  CDSCOUNT:
 44503 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44504                                  
 44505                                  ; A fake header for the NUL device
 44506                                  NULDEV:
 44507 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44508                                  	;dw	8004h
 44509 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44510 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44511 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44512 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44513                                  SPLICES:
 44514 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44515                                  
 44516                                  Special_Entries:
 44517 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44518                                  UU_IFS_DOS_CALL:
 44519 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44520                                  ; 
 44521                                  ; UU_IFS_HEADER:
 44522                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44523                                  
 44524                                  ChkCopyProt:
 44525 00000061 0000                    	dw	0	; M068
 44526                                  A20OFF_PSP:
 44527 00000063 0000                    	dw	0	; M068
 44528                                  BUFFERS_PARM1:
 44529 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44530                                  BUFFERS_PARM2:
 44531 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44532                                  BOOTDRIVE:
 44533 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44534                                  DDMOVE:
 44535 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44536                                  EXT_MEM_SIZE:
 44537 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44538                                  
 44539                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44540                                  ;
 44541                                  ; Replaced by next two declarations
 44542                                  ;
 44543                                  ;UU_BUF_HASH_PTR:
 44544                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44545                                  ;UU_BUF_HASH_COUNT:
 44546                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44547                                  
 44548                                  BufferQueue:
 44549 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44550                                  DirtyBufferCount:
 44551 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44552                                  			; BUGBUG ---- change to byte
 44553                                  SC_CACHE_PTR:
 44554 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44555                                  SC_CACHE_COUNT:
 44556 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44557                                  BuffInHMA:
 44558 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44559                                  LoMemBuff:
 44560 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44561                                  			;  in Low mem when buffs are in HMA
 44562                                  ;
 44563                                  ; All variables which have UU_ as prefix can be reused for other
 44564                                  ; purposes and can be renamed. All these variables were used for
 44565                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44566                                  ; manager ---- MOHANS
 44567                                  ;
 44568                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44569                                  UU_BUF_EMS_FIRST_PAGE:	
 44570 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44571                                  
 44572                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44573                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44574                                  ;	dw	0			
 44575                                  
 44576                                  CL0FATENTRY:
 44577 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44578                                  			; is used in pack/unpack rts.
 44579                                  			; in fat.asm if cluster 0 is specified.
 44580                                  			; SR;
 44581                                  IoStatFail:
 44582 00000083 00                      	db	0	; IoStatFail has been added to 
 44583                                  			; record a fail on an I24 
 44584                                  			; issued from IOFUNC on a status call. 
 44585                                  
 44586                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44587                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44588                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44589                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44590                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44591                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44592                                  ;
 44593                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44594                                  						; state of the 	buffers page.
 44595                                  						; This one byte is retained to 
 44596                                  						; keep the size of this data 
 44597                                  						; block the same.;
 44598                                  ALLOCMSAVE:
 44599 00000084 00                      	db	0	; M063: temp var. used to 
 44600                                  			; M063: save alloc method in
 44601                                  			; M063: msproc.asm
 44602                                  A20OFF_COUNT:
 44603 00000085 00                      	db	0	; M068: indiactes the # of 
 44604                                  			; M068: int 21 calls for 
 44605                                  			; M068: which A20 is off
 44606                                  DOS_FLAG:
 44607 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44608                                  			; definitions
 44609                                  UNPACK_OFFSET:
 44610 00000087 0000                    	dw	0	; saves pointer to the start
 44611                                  			; of unpack code in exepatch.
 44612                                  			; asm.
 44613                                  UMBFLAG:
 44614 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44615                                  			; M003: link state of the UMBs
 44616                                  			; M003: whether linked or not 
 44617                                  			; M003: to the DOS arena chain
 44618                                  SAVE_AX:
 44619 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44620                                  			; M000: in msproc.asm
 44621                                  UMB_HEAD:
 44622 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44623                                  			; M000: the first umb arena by 
 44624                                  			; M000: BIOS sysinit.
 44625                                  START_ARENA:
 44626 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44627                                  			; M000: from which DOS will 
 44628                                  			; M000: start its scan for alloc.
 44629                                  
 44630                                  ; End of SYSINITVar block
 44631                                  ;----------------------------------------------------------------------------
 44632                                  
 44633                                  ; 25/04/2019 - Retro DOS v4.0
 44634                                  
 44635                                  ; 16/07/2018
 44636                                  ; MSDOS 3.3 (& MDOS 6.0)
 44637                                  
 44638                                  ;
 44639                                  ; Sharer jump table
 44640                                  ;
 44641                                  
 44642                                  ;PUBLIC	JShare
 44643                                  	;EVEN
 44644                                  
 44645                                  ;JShare	LABEL	DWORD
 44646                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44647                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44648                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44649                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44650                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44651                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44652                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44653                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44654                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44655                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44656                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44657                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44658                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44659                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44660                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44661                                  
 44662                                  align 2
 44663                                  
 44664                                  JShare:
 44665 00000090 [0107]0000              		DW	BadCall,0
 44666 00000094 [0507]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44667 00000098 [0507]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44668 0000009C [0107]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44669 000000A0 [0107]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44670 000000A4 [0107]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44671 000000A8 [0107]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44672 000000AC [0107]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44673 000000B0 [0507]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44674 000000B4 [0107]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44675 000000B8 [0107]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44676 000000BC [0107]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44677 000000C0 [0507]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44678 000000C4 [0107]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44679 000000C8 [0107]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44680                                  
 44681                                  
 44682                                  ;============================================================================
 44683                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44684                                  ;============================================================================
 44685                                  ; 25/04/2019 - Retro DOS 4.0 
 44686                                  ; 16/07/2018 - Retro DOS 3.0	
 44687                                  
 44688                                  ;Break <Initialized data and data used at DOS initialization>
 44689                                  ;----------------------------------------------------------------------------
 44690                                  
 44691                                  ; We need to identify the parts of the data area that are relevant to tasks
 44692                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44693                                  ; data will be gathered with the system code.  The process data under 2.x will
 44694                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44695                                  ;
 44696                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44697                                  ; describing that data item.
 44698                                  
 44699                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44700                                  
 44701                                  ;
 44702                                  ; Table of routines for assignable devices
 44703                                  ;
 44704                                  ; MSDOS allows assignment if the following standard devices:
 44705                                  ;   stdin  (usually CON input)
 44706                                  ;   stdout (usually CON output)
 44707                                  ;   auxin  (usually AUX input)
 44708                                  ;   auxout (usually AUX output)
 44709                                  ;   stdlpt (usually PRN output)
 44710                                  ;
 44711                                  ; SPECIAL NOTE:
 44712                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44713                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44714                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44715                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44716                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44717                                  ;   as EOF).
 44718                                  
 44719                                  ; Default SFTs for boot up
 44720                                  
 44721                                  		;PUBLIC	SFTABL
 44722                                  
 44723                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44724 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44725 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44726 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44727                                  		;times 295 db 0 ; MSDOS 6.0
 44728 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44729                                  
 44730                                  ; the next two variables relate to the position of the logical stdout/stdin
 44731                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44732                                  ; console.
 44733                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44734 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44735 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44736                                  					;	   of buffered input call
 44737 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44738 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44739                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44740 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44741 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44742 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44743                                  switch_character:
 44744 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44745 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44746 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44747 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44748 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44749                                  
 44750                                  ; The following table is a list of addresses that the sharer patches to be
 44751                                  ; PUSH AX to enable the critical sections
 44752                                  
 44753                                  		; DOSDATA:0315h (MSDOS 6.21)
 44754                                  
 44755                                  ;PUBLIC	CritPatch
 44756                                  
 44757                                  CritPatch:	; LABEL WORD
 44758                                  
 44759                                  ;IRP sect,<critDisk,critDevice>
 44760                                  
 44761                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44762                                  ;
 44763                                  ;SR; Change code patch address to a variable in data segment
 44764                                  ;
 44765                                  ;       dw OFFSET DOSDATA: redir_patch
 44766                                  ;       dw OFFSET DOSDATA: redir_patch
 44767                                  ;
 44768                                  ;;hkn	Short_Addr  E&sect
 44769                                  ;;hkn	Short_Addr  L&sect
 44770                                  ;
 44771                                  ;ELSE
 44772                                  ;	DW	0
 44773                                  ;	DW	0
 44774                                  ;ENDIF
 44775                                  ;ENDM
 44776                                  ;	DW	0
 44777                                  
 44778                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44779                                   
 44780 00000315 [0C0D]                  	dw 	redir_patch
 44781 00000317 [0C0D]                  	dw 	redir_patch			
 44782 00000319 [0C0D]                  	dw	redir_patch
 44783 0000031B [0C0D]                  	dw 	redir_patch
 44784                                  
 44785 0000031D 0000                    	dw	0
 44786                                  
 44787                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44788                                  ; Also, IBM server 1.0 requires this also.
 44789                                  
 44790                                  	;EVEN			; Force swap area to start on word boundry
 44791 0000031F 90                      align 2
 44792                                  	;PUBLIC	SWAP_START
 44793                                  SWAP_START:	; LABEL BYTE
 44794 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44795 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44796 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44797 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44798 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44799                                  
 44800                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44801 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44802 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44803                                  ; end warning
 44804                                   
 44805 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44806                                  
 44807 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44808 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44809 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44810 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44811 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44812 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44813                                  ;				; F.C. 2/17/86
 44814 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44815 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44816                                  ;align 2
 44817                                  SWAP_ALWAYS:	; 05/08/2018
 44818 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44819                                  				;   extended error type stuff.
 44820                                  				;   NOTE: does not have Correct value on
 44821                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44822                                  				;   GetExtendedError system calls)
 44823 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44824 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44825 00000340 0000                    FirstArena:	dw 0		; first free block found
 44826 00000342 0000                    BestArena:	dw 0		; best free block found
 44827 00000344 0000                    LastArena:	dw 0		; last free block found
 44828 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44829 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44830 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44831 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44832 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44833 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44834 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44835                                  
 44836                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44837                                  	;EVEN
 44838 0000034F 90                      align 2
 44839                                  		; DOSDATA:0350h (MSDOS 6.21)
 44840 00000350 00                      DAY:		db 0		; Day of month
 44841 00000351 00                      MONTH:		db 0		; Month of year
 44842 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44843 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44844 00000356 00                      WEEKDAY:	db 0		; Day of week
 44845                                  ; end warning
 44846                                  
 44847 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44848 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44849 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44850                                  
 44851                                  ; Combination of all device call parameters
 44852                                  	;PUBLIC	DEVCALL 	;
 44853                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44854                                  DEVCALL: ; 08/08/2018
 44855 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44856 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44857 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44858 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44859 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44860                                  
 44861                                  	;PUBLIC	CALLUNIT
 44862                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44863                                  CALLFLSH: ; LABEL   WORD	;
 44864 00000367 00                      CALLMED:	db 0		; media byte
 44865                                  CALLBR:	  ; LABEL   DWORD	;
 44866                                  	;PUBLIC	CALLXAD 	;
 44867                                  CALLXAD:  ; LABEL   DWORD	;
 44868 00000368 00                      CALLRBYT:	db 0		;
 44869                                  	;PUBLIC	CALLVIDM	;
 44870                                  CALLVIDM: ; LABEL   DWORD	;
 44871 00000369 00<rep 3h>              	times 3 db 0	;
 44872                                  	;PUBLIC CallBPB		;
 44873                                  CALLBPB:  ; LABEL   DWORD	;
 44874                                  CALLSCNT:			;
 44875 0000036C 0000                    		dw 0		;
 44876                                  	;PUBLIC	CALLSSEC	;
 44877                                  CALLSSEC: ; LABEL   WORD	;
 44878 0000036E 0000                    		dw 0		;
 44879 00000370 00000000                CALLVIDRW:	dd 0		;
 44880                                  ;MSDOS 6.0
 44881 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44882 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44883                                  
 44884                                  ; Same as above for I/O calls	;
 44885                                  				;
 44886                                  	;PUBLIC	IOCall		;
 44887                                  ;IOCALL	SRHEAD	<>		;
 44888                                  IOCALL:	; 07/08/2018
 44889 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44890 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44891 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44892 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44893 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44894                                  IOFLSH:	  ; LABEL   WORD	;
 44895                                          ;PUBLIC  IORCHR		;
 44896                                  IORCHR:	  ; LABEL   BYTE	;
 44897 00000389 00                      IOMED:		db 0		;
 44898 0000038A 00000000                IOXAD:		dd 0		;
 44899 0000038E 0000                    IOSCNT:		dw 0		;	
 44900 00000390 0000                    IOSSEC:		dw 0		;
 44901                                  
 44902                                  ; Call struct for DSKSTATCHK	;
 44903 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44904 00000393 00                      		db 0
 44905 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44906 00000395 0000                    DSKSTST:	dw 0		;
 44907 00000397 00<rep 8h>              	times 8	db 0		;
 44908 0000039F 00                      DSKCHRET:	db 0		;
 44909                                  
 44910                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44911                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44912                                  ;hkn   short_addr  DEVIOBUF	;
 44913                                  	
 44914 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44915 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44916 000003A4 0100                    DSKSTCNT:	dw 1		;
 44917 000003A6 0000                    		dw 0		;
 44918                                  
 44919 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44920                                  
 44921                                  ;MSDOS 6.0
 44922                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44923 000003A9 00000000                		dd 0		;MS. position
 44924 000003AD 00000000                		dd 0		;MS. length
 44925                                  
 44926                                  ;hkn; the foll. was moved from dosmes.asm.
 44927                                  
 44928                                  	;EVEN
 44929 000003B1 90                      align 2				; needed to maintain offsets
 44930                                  
 44931                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44932                                  USERNUM:
 44933 000003B2 0000                     		dw 0		; 24 bit user number
 44934 000003B4 00                      		db 0
 44935                                  ;IF IBM
 44936                                  ;IF IBMCOPYRIGHT
 44937                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44938                                  ;ELSE
 44939                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44940                                  ;ENDIF
 44941                                  ;ELSE
 44942 000003B5 FF                      OEMNUM:		DB 0FFh
 44943                                  ;ENDIF
 44944                                  
 44945                                  ;============================================================================
 44946                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44947                                  ;============================================================================
 44948                                  ; 25/04/2019 - Retro DOS 4.0
 44949                                  
 44950                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44951                                  ; ----------------------------------------------------------
 44952                                  ; This data section which was named as uninitialized data
 44953                                  ; (as overlayed by initialization code) but follows 
 44954                                  ; initialized data section from DOSDATA:03B6h address
 44955                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44956                                  ; and there is not overlaying..)
 44957                                  ; **********************************************************
 44958                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44959                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44960                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44961                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44962                                  ; TIMEBUF is at offset 03B6h.
 44963                                  ; **********************************************************	
 44964                                  
 44965                                  ;Break <Uninitialized data overlayed by initialization code>
 44966                                  ;----------------------------------------------------------------------------
 44967                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44968                                  ; Init code overlaps with data area below
 44969                                  
 44970                                  ; 	ORG     0
 44971                                  
 44972                                  MSDAT001S:	; label byte
 44973                                  
 44974                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44975                                  TIMEBUF: ;	times 6 db 0
 44976 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44977 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44978                                  
 44979                                  ; The following areas are used as temp buffer in EXEC system call
 44980                                  
 44981                                  ; DOSDATA:03BEh
 44982                                  OPENBUF: ;times 64  dw	0
 44983 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44984                                  RENBUF:	
 44985 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44986                                  
 44987                                  ; Buffer for search calls
 44988                                  SEARCHBUF:	
 44989 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44990                                  DUMMYCDS:  ;times 88 db 0
 44991 000004F3 00<rep 58h>             	times	curdirLen db 0
 44992                                  
 44993                                  ; End of contiguous buffer
 44994                                   
 44995                                  ; Temporary directory entry for use by many routines. Device directory
 44996                                  ; entries (bogus) are built here.
 44997                                  
 44998                                  ; DOSDATA:054Bh
 44999                                  
 45000                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45001                                  
 45002                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45003                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45004                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45005                                  
 45006                                  NAME1:	
 45007 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45008                                  NAME2:
 45009 00000557 00<rep Dh>              	times	13 db	0 		;
 45010                                  DESTSTART:
 45011 00000564 0000                    	dw	0			;
 45012                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45013                                  	;times	5  db	0
 45014 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45015                                  
 45016                                  ; End Temporary directory entry.
 45017                                  
 45018 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45019                                  EXTFCB:	
 45020 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45021                                  SATTRIB:
 45022 0000056D 00                      	db	0		; Storage for search attributes
 45023                                  OPEN_ACCESS:
 45024 0000056E 00                      	db	0		; access of open system call
 45025                                  FOUNDDEL:
 45026 0000056F 00                      	db	0		; true => file was deleted
 45027                                  FOUND_DEV:
 45028 00000570 00                      	db	0		; true => search found a device
 45029                                  FSPLICE:
 45030 00000571 00                      	db	0		; true => do a splice in transpath
 45031                                  FSHARING:
 45032 00000572 00                      	db	0		; TRUE => no redirection
 45033                                  SECCLUSPOS:
 45034 00000573 00                      	db	0		; Position of first sector within cluster
 45035 00000574 00                      TRANS:	db	0		;
 45036 00000575 00                      READOP:	db	0		;
 45037                                  THISDRV:
 45038 00000576 00                      	db	0		;
 45039                                  CLUSFAC:
 45040 00000577 00                      	db	0		;
 45041                                  CLUSSPLIT:
 45042 00000578 00                      	db	0		;
 45043                                  INSMODE:
 45044 00000579 00                      	db	0		; true => insert mode in buffered read
 45045 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45046 0000057B 00                      VOLID:	db	0		;
 45047                                  EXIT_TYPE:
 45048 0000057C 00                      	db	0		; type of exit...
 45049                                   
 45050                                  	;EVEN
 45051                                  
 45052 0000057D 90                      align 2
 45053                                  
 45054                                  ; DOSDATA:057Eh
 45055                                  
 45056                                  ; WARNING - the following two items are accessed as a word
 45057                                  
 45058                                  CREATING:
 45059 0000057E 00                      	db	0		; true => creating a file
 45060 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45061                                  				; = DIRFREE iff BUGBUG
 45062                                  EXITHOLD:
 45063 00000580 00000000                	dd	0		; Temp location for proc terminate
 45064                                  USER_SP:
 45065 00000584 0000                    	dw	0		; User SP for system call
 45066                                  USER_SS:
 45067 00000586 0000                    	dw	0		; User SS for system call
 45068                                  CONTSTK:
 45069 00000588 0000                    	dw	0		;
 45070                                  THISDPB:
 45071 0000058A 00000000                	dd	0		;
 45072                                  CLUSSAVE:
 45073 0000058E 0000                    	dw	0		;
 45074                                  CLUSSEC:
 45075 00000590 00000000                	dd	0		;>32mb			AC0000
 45076                                  PREREAD:
 45077 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45078 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45079                                  FATBYTE:
 45080 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45081                                  ; DOSDATA:059Ah
 45082 0000059A 00000000                DEVPT:	dd	0		;
 45083                                  THISSFT:
 45084 0000059E 00000000                	dd	0		; Address of user SFT
 45085                                  THISCDS:
 45086 000005A2 00000000                	dd	0		; Address of current CDS
 45087                                  THISFCB:
 45088 000005A6 00000000                	dd	0		; Address of user FCB
 45089 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45090 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45091 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45092                                  WFP_START:
 45093 000005B2 0000                    	dw	0		;
 45094                                  REN_WFP:
 45095 000005B4 0000                    	dw	0		;
 45096                                  CURR_DIR_END:
 45097 000005B6 0000                    	dw	0		;
 45098                                  NEXTADD:
 45099 000005B8 0000                    	dw	0		;
 45100                                  LASTPOS:
 45101 000005BA 0000                    	dw	0		;
 45102                                  CLUSNUM:
 45103 000005BC 0000                    	dw	0		;
 45104 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45105                                  DIRSTART:
 45106 000005C2 0000                    	dw	0		;
 45107 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45108 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45109                                                                  ; sectors
 45110                                  BYTSECPOS:
 45111 000005CC 0000                    	dw	0		; Position of first byte within sector
 45112                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45113 000005CE 0000<rep 2h>                    times	2 dw 0
 45114                                  BYTCNT1:
 45115 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45116                                  BYTCNT2:
 45117 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45118 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45119                                  ; DOSDATA:05D8h
 45120                                  ENTFREE:
 45121 000005D8 0000                    	dw	0		;
 45122                                  ENTLAST:
 45123 000005DA 0000                    	dw	0		;
 45124                                  NXTCLUSNUM:
 45125 000005DC 0000                    	dw	0		;
 45126                                  GROWCNT:
 45127 000005DE 00000000                	dd	0		;
 45128 000005E2 00000000                CURBUF:	dd	0		;
 45129 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45130 000005EA 0000                    SAVEBX:	dw	0		;
 45131 000005EC 0000                    SAVEDS:	dw	0		;
 45132                                  RESTORE_TMP:
 45133 000005EE 0000                    	dw	0		; return address for restore world
 45134 000005F0 0000                    NSS:	dw	0
 45135 000005F2 0000                    NSP:	dw	0
 45136                                  ; DOSDATA:05F4h
 45137                                  EXTOPEN_FLAG:
 45138 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45139                                  EXTOPEN_ON:
 45140 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45141                                  EXTOPEN_IO_MODE:
 45142 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45143                                  SAVE_DI:
 45144 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45145                                  SAVE_ES:
 45146 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45147                                  SAVE_DX:
 45148 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45149                                  SAVE_CX:
 45150 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45151                                  SAVE_BX:
 45152 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45153                                  SAVE_SI:
 45154 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45155                                  SAVE_DS:
 45156 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45157                                  
 45158                                  ; DOSDATA:0607h
 45159                                  
 45160                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45161                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45162                                  ; the high 16, the low 16 are still in the register.
 45163                                  
 45164                                  HIGH_SECTOR:	
 45165 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45166                                  ;OffsetMagicPatch:
 45167                                  ;	dw	MagicPatch ;scottq 8/6/92
 45168                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45169 00000609 0000                    	dw	0
 45170                                  				;see dos\mpatch.asm
 45171                                  DISK_FULL:
 45172 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45173                                  TEMP_VAR:
 45174 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45175                                  TEMP_VAR2:
 45176 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45177 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45178                                  DOS34_FLAG:
 45179 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45180                                  NO_FILTER_PATH:
 45181 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45182                                  NO_FILTER_DPATH:
 45183 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45184                                  ; M008
 45185                                  AbsRdWr_SS:
 45186 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45187                                  AbsRdWr_SP:
 45188 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45189                                  
 45190                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 45191                                  ; M008
 45192                                   
 45193                                   
 45194                                  ; make those pushes fast!!!
 45195                                  
 45196                                  ;EVEN
 45197                                  
 45198 0000061F 90                      align 2
 45199                                  
 45200                                  StackSize   equ 180h  ; 384	; gross but effective
 45201                                  
 45202                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45203                                  ;				; made up their minds about
 45204                                   
 45205                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45206                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45207                                  
 45208                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45209                                   
 45210 00000620 00<rep 180h>                    times	StackSize db	0	;
 45211                                  AUXSTACK:			; LABEL   BYTE
 45212                                   
 45213 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45214                                  DSKSTACK:			; LABEL   BYTE
 45215                                   
 45216 00000920 00<rep 180h>                    times	StackSize db	0	;
 45217                                  IOSTACK:			; LABEL   BYTE
 45218                                  
 45219                                  ; DOSDATA:0AA0h 
 45220                                   
 45221                                  ; patch space for Boca folks.
 45222                                  ; Say What????!!! This does NOT go into the swappable area!
 45223                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45224                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45225                                   
 45226                                  IBMPATCH: ; label byte
 45227                                  PRINTER_FLAG:
 45228 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45229                                  VOLCHNG_FLAG:
 45230 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45231                                  VIRTUAL_OPEN:
 45232 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45233                                   
 45234                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45235                                  
 45236                                  FSeek_drive:
 45237 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45238                                  FSeek_firclus:
 45239 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45240                                  FSeek_logclus:
 45241 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45242                                  FSeek_logsave:
 45243 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45244                                  
 45245                                  ; DOSDATA:0AAAh
 45246                                  
 45247                                  TEMP_DOSLOC:
 45248 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45249                                  				;at SYSINIT time.
 45250                                  SWAP_END:  ; LABEL   BYTE
 45251                                   
 45252                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45253                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45254                                  ; to include this byte.
 45255                                   
 45256 00000AAC 00                      	db	0
 45257                                  
 45258                                  ; DOSDATA:0AADh
 45259                                   
 45260                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45261                                  
 45262                                  ;DOSDATA    ENDS
 45263                                  
 45264                                  ;============================================================================
 45265                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45266                                  ;============================================================================
 45267                                  ; 27/04/2019 - Retro DOS 4.0
 45268                                  ; 16/07/2018 - Retro DOS 3.0
 45269                                  
 45270                                  ;DOSDATA Segment
 45271                                  
 45272                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45273                                  
 45274                                  ;
 45275                                  ; upper case table
 45276                                  ; ---------------------------------------------------------------------------
 45277                                  UCASE_TAB:	; label   byte
 45278 00000AAD 8000                    	dw	128
 45279 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45280 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45281 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45282 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45283 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45284 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45285 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45286 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45287 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45288 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45289 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45290 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45291 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45292 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45293 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45294 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45295                                  ;
 45296                                  ; file upper case table
 45297                                  ; ---------------------------------------------------------------------------
 45298                                  FILE_UCASE_TAB:	; label  byte
 45299 00000B2F 8000                    	dw	128
 45300 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45301 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45302 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45303 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45304 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45305 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45306 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45307 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45308 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45309 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45310 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45311 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45312 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45313 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45314 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45315 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45316                                  ;
 45317                                  ; file char list
 45318                                  ; ---------------------------------------------------------------------------
 45319                                  FILE_CHAR_TAB:	; label  byte
 45320 00000BB1 1600                    	dw	22				; length
 45321 00000BB3 0100FF                  	db	1,0,255 			; include all
 45322 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45323 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45323 00000BC2 7C3C3E2B3D3B2C     
 45324                                  	;db	24 dup (?)			; reserved
 45325 00000BC9 00<rep 18h>             	times	24 db 0
 45326                                  
 45327                                  ;
 45328                                  ; collate table
 45329                                  ; ---------------------------------------------------------------------------
 45330                                  COLLATE_TAB:	; label   byte
 45331 00000BE1 0001                    	dw	256
 45332 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45333 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45334 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45335 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45336 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45337 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45338 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45339 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45340 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45341 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45342 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45343 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45344 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45345 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45346 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45347 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45348 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45349 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45350 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45351 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45352 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45353 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45354 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45355 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45356 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45357 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45358 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45359 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45360 00000CC3 E053                    	db	224,"S"
 45361 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45362 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45363 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45364 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45365                                  
 45366                                  ; ------------------------------------------------<MSKK01>----------------------
 45367                                  
 45368                                  ; DOSDATA:0CE3h
 45369                                  
 45370                                  ; 29/04/2019
 45371                                  
 45372                                  ; dbcs is not supported in DOS 3.3
 45373                                  ;		   DBCS_TAB	    CC_DBCS <>
 45374                                  ;
 45375                                  ; DBCS for DOS 4.00			   2/12/KK
 45376                                  
 45377                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45378                                  ; ------------------------------------------------<MSKK01>----------------------
 45379                                  ;ifdef	DBCS
 45380                                  ; ifdef	  JAPAN
 45381                                  ;		dw	6		; <MSKK01>
 45382                                  ;		db	081h,09fh	; <MSKK01>
 45383                                  ;		db	0e0h,0fch	; <MSKK01>
 45384                                  ;		db	0,0		; <MSKK01>
 45385                                  ;
 45386                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45387                                  ; endif
 45388                                  ; ifdef	  TAIWAN
 45389                                  ;		dw	4		; <TAIWAN>
 45390                                  ;		db	081h,0FEh	; <TAIWAN>
 45391                                  ;		db	0,0		; <TAIWAN>
 45392                                  ;
 45393                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45394                                  ; endif
 45395                                  ; ifdef   KOREA                         ; Keyl
 45396                                  ;               dw      4               ; <KOREA>
 45397                                  ;               db      0A1h,0FEh       ; <KOREA>
 45398                                  ;               db      0,0             ; <KOREA>
 45399                                  ;
 45400                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45401                                  ;  endif
 45402                                  ;else
 45403 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45404                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45405 00000CE5 00<rep 10h>             		times	16 db 0
 45406                                  
 45407                                  ;		dw	6		;  2/12/KK
 45408                                  ;		db	081h,09Fh	;  2/12/KK
 45409                                  ;		db	0E0h,0FCh	;  2/12/KK
 45410                                  ;		db	0,0		;  2/12/KK
 45411                                  ;
 45412                                  ;endif
 45413                                  ; ------------------------------------------------<MSKK01>----------------------
 45414                                  
 45415                                  ; DOSDATA:0CF5h
 45416                                  
 45417                                  ; ---------------------------------------------------------------------------
 45418                                  ;
 45419                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45420                                  ;     ENTRY: AL = Character to map
 45421                                  ;     EXIT:  AL = The converted character
 45422                                  ; Alters no registers except AL and flags.
 45423                                  ; The routine should do nothing to chars below 80H.
 45424                                  ; ---------------------------------------------------------------------------
 45425                                  ; Example:
 45426                                  
 45427                                  MAP_CASE:
 45428                                  ;Procedure MAP_CASE,FAR
 45429                                  
 45430 00000CF5 3C80                    	CMP	AL,80h
 45431 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45432 00000CF9 CB                      	RETF
 45433                                  Map1:
 45434 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45435 00000CFC 1E                      	PUSH	DS
 45436 00000CFD 53                      	PUSH	BX
 45437 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45438                                  FINISH:
 45439 00000D01 0E                      	PUSH	CS		;Move to DS
 45440 00000D02 1F                      	POP	DS
 45441 00000D03 D7                      	XLAT			;Get upper case character
 45442 00000D04 5B                      	POP	BX
 45443 00000D05 1F                      	POP	DS
 45444                                  L_RET:	
 45445 00000D06 CB                      	RETF
 45446                                  
 45447                                  ;EndProc MAP_CASE
 45448                                  
 45449                                  ; ---------------------------------------------------------------------------
 45450                                  
 45451                                  ; The variables for ECS version are moved here for the same data alignments
 45452                                  ; as IBM-DOS and MS-DOS.
 45453                                  
 45454                                  InterChar:
 45455 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45456                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45457                                  DUMMY:	; LABEL   WORD
 45458                                  InterCon:  
 45459 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45460                                  SaveCurFlg:
 45461 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45462                                  
 45463                                  ; ---------------------------------------------------------------------------
 45464                                  
 45465 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45466                                  redir_patch:
 45467 00000D0C 00                      	  db	0
 45468                                  
 45469                                  ; DOSDATA:0D0Dh
 45470                                  
 45471                                  Mark1:	; label byte
 45472                                  
 45473                                  ;IF2
 45474                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45475                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45476                                  ;	ENDIF
 45477                                  ;ENDIF
 45478                                  
 45479 00000D0D 00<rep 5h>              	  times 5 db 0
 45480                                  
 45481                                  ;############################################################################
 45482                                  ;
 45483                                  ; ** HACK FOR DOS 4.0 REDIR **
 45484                                  ; 
 45485                                  ; The redir requires the following:
 45486                                  ;
 45487                                  ;	MSVERS	offset D12H
 45488                                  ;	YRTAB	offset D14H
 45489                                  ; 	MONTAB	offset D1CH
 45490                                  ;
 45491                                  ; WARNING! WARNING!
 45492                                  ; 
 45493                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45494                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45495                                  ;
 45496                                  ; CURRENTLY MARK1 = 0D0DH
 45497                                  ;
 45498                                  ;############################################################################
 45499                                  
 45500                                  	;ORG	0D12h
 45501                                  
 45502                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45503                                  
 45504                                  	;db	6
 45505                                  	;db	20
 45506                                  
 45507                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45508                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45509 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45510 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45511                                  
 45512                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45513                                  ;
 45514                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45515                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45516                                  
 45517                                  ; Days in year
 45518                                  
 45519                                  YRTAB:   
 45520 00000D14 C8A6                    	DB	200,166			; Leap year
 45521 00000D16 C8A5                    	DB	200,165
 45522 00000D18 C8A5                    	DB	200,165
 45523 00000D1A C8A5                    	DB	200,165
 45524                                  
 45525                                  ; Days of each month
 45526                                  
 45527                                  MONTAB:        
 45528 00000D1C 1F                      	DB      31                      ; January
 45529                                  february:
 45530 00000D1D 1C                      	DB	28 			; February--reset each 
 45531                                  					; time year changes
 45532 00000D1E 1F                              DB      31                      ; March
 45533 00000D1F 1E                              DB      30                      ; April
 45534 00000D20 1F                              DB      31                      ; May
 45535 00000D21 1E                              DB      30                      ; June
 45536 00000D22 1F                              DB      31                      ; July
 45537 00000D23 1F                              DB      31                      ; August
 45538 00000D24 1E                              DB      30                      ; September
 45539 00000D25 1F                              DB      31                      ; October
 45540 00000D26 1E                              DB      30                      ; November
 45541 00000D27 1F                              DB      31                      ; December
 45542                                  
 45543                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45544                                  
 45545                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45546                                  
 45547                                  SysInitTable:
 45548                                  	;dw	SYSINITVAR
 45549 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45550 00000D2A 0000                            dw      0		; segment
 45551 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45552 00000D2E 0000                            dw      0		; segment of pointer
 45553                                  
 45554                                  ; DOS 3.3 F.C. 6/12/86
 45555                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45556                                  
 45557                                  FastTable:				; a better name
 45558                                  FastOpenTable:
 45559 00000D30 0200                    	dw      2                       ; number of entries
 45560 00000D32 [8F12]                  	dw      FastRet			; pointer to ret instr.
 45561 00000D34 0000                    	dw      0                       ; and will be modified by
 45562 00000D36 [8F12]                  	dw      FastRet			; FASTxxx when loaded in
 45563 00000D38 0000                    	dw      0                       
 45564                                  
 45565                                  ; DOS 3.3 F.C. 6/12/86
 45566                                  
 45567                                  FastFlg:				; flags
 45568                                  FastOpenFlg:
 45569 00000D3A 00                      	db	0			; don't change the foll: order  
 45570                                  
 45571                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45572                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45573                                  ; or filled by FastOPen when calling FastOpen Lookup
 45574                                  
 45575                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45576                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45577                                  	;times	11 db 0
 45578 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45579                                  
 45580                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45581                                  ; when calling FastOpen Lookup
 45582                                  
 45583                                  Dir_Info_Buff:	; label  byte
 45584                                  	;db   	SIZE dir_entry dup (0)
 45585                                  	;times	32 db 0
 45586 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45587                                  
 45588                                  Next_Element_Start:
 45589 00000D66 0000                    	dw	0			; save next element start offset
 45590                                  Del_ExtCluster:
 45591 00000D68 0000                    	dw	0			; for dos_delete                       
 45592                                  
 45593                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45594                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45595                                  ; not to destroy the INT 21 stack saved for the user.
 45596                                  
 45597                                  USER_SP_2F:	; LABEL  WORD
 45598 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45599                                  
 45600                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45601                                  DOS_TEMP:	; label  word		; temporary word
 45602                                  FAKE_STACK_2F:  
 45603                                  	; dw  14 dup (0)		; 12 register temporary storage
 45604 00000D6C 0000<rep Eh>            	times 14 dw 0
 45605                                  
 45606                                  Hash_Temp: 	;label  word		; temporary word             
 45607                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45608 00000D88 0000<rep 4h>            	times 4 dw 0
 45609                                              	
 45610                                  SCAN_FLAG:	
 45611 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45612                                  DATE_FLAG:
 45613 00000D91 0000                    	dw     0                	; flag to update the date
 45614                                  
 45615                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45616 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45617                                  
 45618                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45619 00000D95 00000000                	dd     0               		; for extended error                   
 45620 00000D99 00000000                	dd     0			; for parser                           
 45621 00000D9D 00000000                	dd     0			; for critical errror                  
 45622 00000DA1 00000000                	dd     0			; for IFS                              
 45623 00000DA5 00000000                	dd     0			; for code reduction                   
 45624                                  
 45625                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45626 00000DA9 FFFFFFFF                	dd     -1                                                        
 45627                                  SC_SECTOR_SIZE:
 45628 00000DAD 0000                    	dw	0			; sector size for SC                 
 45629                                  SC_DRIVE:
 45630 00000DAF 00                      	db	0			; drive # for secondary cache        
 45631                                  CurSC_DRIVE:
 45632 00000DB0 FF                      	db	-1			; current SC drive                   
 45633                                  CurSC_SECTOR:
 45634 00000DB1 00000000                	dd	0			; current SC starting sector         
 45635                                  SC_STATUS:
 45636 00000DB5 0000                    	dw	0			; SC status word                     
 45637                                  SC_FLAG:
 45638 00000DB7 00                      	db	0			; SC flag                            
 45639                                  AbsDskErr:
 45640 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45641                                                                                            
 45642                                  NO_NAME_ID:	; label byte                                                           
 45643 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45643 00000DC3 2020               
 45644                                  
 45645                                  ;hkn; moved from TABLE segment in kstrin.asm
 45646                                  
 45647                                  KISTR001S:	; label	byte		; 2/17/KK
 45648 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45649                                  KISTR001E:	; label	byte		; 2/17/KK
 45650                                  
 45651                                  ; the nul device driver used to be part of the code. However, since the 
 45652                                  ; header is in the data, and the entry points are only given as an offset,
 45653                                  ; the strategy and interrupt entry points must also be in the data now.
 45654                                  
 45655                                  ; DOSDATA:0DC6h
 45656                                  
 45657                                  SNULDEV:
 45658                                  ;procedure snuldev,far
 45659                                  	;or	word [es:bx+3],100h
 45660                                  	; 17/12/2022
 45661                                  	;or	byte [es:bx+4],01h
 45662                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45663                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45664 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45665                                  INULDEV:
 45666 00000DCC CB                      	retf				; must not be a return!
 45667                                  ;endproc snuldev
 45668                                  
 45669                                  ;M044
 45670                                  ; Second part of save area for saving last para of Windows memory
 45671                                  
 45672                                  WinoldPatch2:
 45673                                  	;db	8 dup (?)	; M044
 45674 00000DCD 00<rep 8h>              	times	8 db 0	
 45675                                  UmbSave2:
 45676                                  	;db	5 dup (?)	; M062
 45677 00000DD5 00<rep 5h>              	times	5 db 0
 45678                                  UmbSaveFlag:
 45679 00000DDA 00                      	db	0		; M062
 45680                                  
 45681                                  ; DOSDATA:0DDBh
 45682                                  
 45683                                  Mark2:	; label byte
 45684                                  
 45685                                  ;IF2
 45686                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45687                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45688                                  ;	ENDIF
 45689                                  ;ENDIF
 45690                                  
 45691                                  ;############################################################################
 45692                                  ;
 45693                                  ; ** HACK FOR DOS 4.0 REDIR **
 45694                                  ; 
 45695                                  ; The redir requires the following:
 45696                                  ;
 45697                                  ;	ERR_TABLE_21	offset DDBH
 45698                                  ;	ERR_TABLE_24	offset E5BH
 45699                                  ; 	ErrMap24	offset EABH
 45700                                  ;
 45701                                  ; WARNING! WARNING!
 45702                                  ;
 45703                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45704                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45705                                  ;
 45706                                  ; CURRENTLY MARK2 = 0DD0H
 45707                                  ;
 45708                                  ;############################################################################
 45709                                  
 45710                                  	;ORG	0DDBh
 45711                                  
 45712                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45713                                  
 45714                                  ; ---------------------------------------------------------------------------
 45715                                  ;
 45716                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45717                                  ; errors. Each entry is 4 bytes long:
 45718                                  ;
 45719                                  ;       Err#,Class,Action,Locus
 45720                                  ;
 45721                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45722                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45723                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45724                                  ;
 45725                                  ; ---------------------------------------------------------------------------
 45726                                  
 45727                                  ;ErrTab  Macro   err,class,action,locus
 45728                                  ;ifidn <locus>,<0FFh>
 45729                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45730                                  ;ELSE
 45731                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45732                                  ;ENDIF
 45733                                  ;ENDM
 45734                                  
 45735                                  ERR_TABLE_21: ; LABEL   BYTE
 45736 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45737 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45738 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45739 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45740 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45741 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45742 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45743 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45744 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45745 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45746 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45747 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45748 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45749 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45750 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45751 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45752 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45753 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45754 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45755 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45756 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45757 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45758 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45759 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45760 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45761 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45762 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45763 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45764                                      ; MSDOS 6.0
 45765 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45766 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45767 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45768 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45769                                  
 45770                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45771                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45772                                  ;		db 2,8,3,2
 45773                                  ;		db 3,8,3,2
 45774                                  ;		db 4,1,4,1
 45775                                  ;		db 5,3,3,0FFh
 45776                                  ;		db 6,7,4,1
 45777                                  ;		db 7,7,5,5
 45778                                  ;		db 8,1,4,5
 45779                                  ;		db 9,7,4,5
 45780                                  ;		db 0Ah,7,4,5
 45781                                  ;		db 0Bh,9,3,1
 45782                                  ;		db 0Ch,7,4,1
 45783                                  ;		db 0Dh,9,4,1
 45784                                  ;		db 0Fh,8,3,2
 45785                                  ;		db 10h,3,3,2
 45786                                  ;		db 11h,0Dh,3,2
 45787                                  ;		db 12h,8,3,2
 45788                                  ;		db 50h,0Ch,3,2
 45789                                  ;		db 20h,0Ah,2,2
 45790                                  ;		db 21h,0Ah,2,2
 45791                                  ;		db 54h,1,4,0FFh
 45792                                  ;		db 56h,3,3,1
 45793                                  ;		db 52h,1,4,2
 45794                                  ;		db 32h,9,3,3
 45795                                  ;		db 55h,0Ch,3,3
 45796                                  ;		db 57h,9,3,1
 45797                                  ;		db 53h,0Dh,4,1
 45798                                  ;		db 24h,1,4,5
 45799                                  ; MSDOS 6.0 (MSDOS 6.21)
 45800                                  ;		db 26h,1,4,1
 45801                                  ;		db 27h,1,4,1
 45802                                  ;		db 5Ah,0Dh,4,2
 45803                                  ; MSDOS 6.0 & MSDOS 3.3
 45804                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45805                                  
 45806                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45807                                  
 45808                                  ; ---------------------------------------------------------------------------
 45809                                  ;
 45810                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45811                                  ; errors. Each entry is 4 bytes long:
 45812                                  ;
 45813                                  ;       Err#,Class,Action,Locus
 45814                                  ;
 45815                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45816                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45817                                  ; THE END.
 45818                                  ;
 45819                                  ; ---------------------------------------------------------------------------
 45820                                  
 45821                                  ERR_TABLE_24: ; LABEL   BYTE
 45822 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45823 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45824 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45825 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45826 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45827 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45828 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45829 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45830 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45831 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45832 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45833 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45834 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45835 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45836 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45837 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45838 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45839 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45840 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45841 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45842                                  
 45843                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45844                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45845                                  ;		db 14h,4,5,1
 45846                                  ;		db 15h,5,7,0FFh
 45847                                  ;		db 16h,4,5,1
 45848                                  ;		db 17h,0Bh,4,2
 45849                                  ;		db 18h,4,5,1
 45850                                  ;		db 19h,5,1,2
 45851                                  ;		db 1Ah,0Bh,7,2
 45852                                  ;		db 1Bh,0Bh,4,2
 45853                                  ;		db 1Ch,2,7,4
 45854                                  ;		db 1Dh,5,4,0FFh
 45855                                  ;		db 1Eh,5,4,0FFh
 45856                                  ;		db 1Fh,0Dh,4,0FFh
 45857                                  ;		db 20h,0Ah,2,2
 45858                                  ;		db 21h,0Ah,2,2
 45859                                  ;		db 22h,0Bh,7,2
 45860                                  ;		db 32h,9,3,3
 45861                                  ;		db 23h,7,4,1
 45862                                  ;		db 24h,1,4,5
 45863                                  ;		db 0FFh,0Dh,5,0FFh
 45864                                  
 45865                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45866                                  
 45867                                  ; ---------------------------------------------------------------------------
 45868                                  ;
 45869                                  ; We need to map old int 24 errors and device driver errors into the new set
 45870                                  ; of errors. The following table is indexed by the new errors
 45871                                  ;
 45872                                  ; ---------------------------------------------------------------------------
 45873                                  
 45874                                  ;Public  ErrMap24
 45875                                  ErrMap24: ; Label   BYTE
 45876 00000EAB 13                          DB  error_write_protect	; 0
 45877 00000EAC 14                          DB  error_bad_unit		; 1
 45878 00000EAD 15                          DB  error_not_ready		; 2
 45879 00000EAE 16                          DB  error_bad_command	; 3
 45880 00000EAF 17                          DB  error_CRC		; 4
 45881 00000EB0 18                          DB  error_bad_length	; 5
 45882 00000EB1 19                          DB  error_seek		; 6
 45883 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45884 00000EB3 1B                          DB  error_sector_not_found	; 8
 45885 00000EB4 1C                          DB  error_out_of_paper	; 9
 45886 00000EB5 1D                          DB  error_write_fault	; A
 45887 00000EB6 1E                          DB  error_read_fault	; B
 45888 00000EB7 1F                          DB  error_gen_failure	; C
 45889 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45890 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45891 00000EBA 22                          DB  error_wrong_disk	; F
 45892                                  
 45893                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45894                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45895                                  	
 45896                                  ErrMap24End: ; LABEL   BYTE
 45897                                  
 45898                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45899                                  
 45900                                  ; ---------------------------------------------------------------------------
 45901                                  
 45902                                  ; 27/04/2019 - Retro DOS v4.0
 45903                                  
 45904                                  FIRST_BUFF_ADDR:
 45905 00000EBB 0000                    	dw	0			; first buffer address               
 45906                                  SPECIAL_VERSION:
 45907 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45908                                  FAKE_COUNT:
 45909 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45910                                  OLD_FIRSTCLUS:
 45911 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45912                                  
 45913                                  ; ---------------------------------------------------------------------------
 45914                                  
 45915                                  ;smr; moved from TABLE segment in exec.asm
 45916                                  
 45917 00000FC0 0000                    exec_init_SP: dw 0
 45918 00000FC2 0000                    exec_init_SS: dw 0
 45919 00000FC4 0000                    exec_init_IP: dw 0
 45920 00000FC6 0000                    exec_init_CS: dw 0
 45921                                  
 45922                                  exec_signature:
 45923 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45924                                  exec_len_mod_512:
 45925 00000FCA 0000                    	dw	0	; low 9 bits of length
 45926                                  exec_pages:
 45927 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45928                                  exec_rle_count:
 45929 00000FCE 0000                    	dw	0	; count of reloc entries
 45930                                  exec_par_dir:
 45931 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45932                                  exec_min_BSS:
 45933 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45934                                  exec_max_BSS:
 45935 00000FD4 0000                    	dw	0	; max number of para of BSS
 45936                                  exec_SS:
 45937 00000FD6 0000                    	dw	0	; stack of image
 45938                                  exec_SP:
 45939 00000FD8 0000                    	dw	0	; SP of image
 45940                                  exec_chksum:
 45941 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45942                                  exec_IP:
 45943 00000FDC 0000                    	dw	0	; IP of entry
 45944                                  exec_CS:
 45945 00000FDE 0000                    	dw	0	; CS of entry
 45946                                  exec_rle_table:
 45947 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45948                                  
 45949                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45950                                  
 45951                                  ;smr; eom
 45952                                  
 45953                                  ; ---------------------------------------------------------------------------
 45954                                  
 45955                                  ;SR;
 45956                                  ; WIN386 instance table for DOS
 45957                                  
 45958                                  Win386_Info:
 45959 00000FE2 0300                    	db	3, 0
 45960 00000FE4 000000000000000000-     	dd	0, 0, 0
 45960 00000FED 000000             
 45961 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45962                                  
 45963                                  Instance_Table:
 45964 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45965 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45966 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45967 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45968 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45969 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45970 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45971 0000101E 00000000                	dw	0, 0
 45972                                  
 45973                                  ; M001; SR;
 45974                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45975                                  ; M001; some DOS variables. Note that the only really important variable in 
 45976                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45977                                  ; M001; which does not need to be done in DOS 5.0. 
 45978                                  
 45979                                  ; 29/12/2022
 45980                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45981                                  
 45982                                  Win386_DOSVars:
 45983 00001022 05                      	db	5	;Major version 5 ; M001
 45984 00001023 00                      	db	0	;Minor version 0 ; M001
 45985 00001024 [EC05]                  	dw	SAVEDS	; M001
 45986 00001026 [EA05]                  	dw	SAVEBX	; M001
 45987 00001028 [2103]                  	dw	INDOS	; M001
 45988 0000102A [3E03]                  	dw	USER_ID	; M001
 45989 0000102C [1503]                  	dw	CritPatch ; M001
 45990 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45991                                  
 45992                                  ;SR;
 45993                                  ; Flag to indicate whether WIN386 is running or not
 45994                                  
 45995 00001030 00                      IsWin386: db	0
 45996                                  
 45997                                  ;M018
 45998                                  ; This variable contains the path to the VxD device needed for Win386
 45999                                  
 46000 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46000 0000103A 2E33383600         
 46001                                  
 46002                                  ;End WIN386 support
 46003                                  
 46004                                  ; ---------------------------------------------------------------------------
 46005                                  
 46006                                  ;SR;
 46007                                  ; These variables have been added for the special lie support for device
 46008                                  ;drivers.
 46009                                  ;
 46010                                  
 46011                                  DriverLoad:	
 46012 0000103F 01                      	db	1	;initialized to do special handling
 46013                                  BiosDataPtr:
 46014 00001040 00000000                	dd	0
 46015                                  
 46016                                  ; 29/12/2022 - Retro DOS v4.1
 46017                                  %if 0
 46018                                  
 46019                                  ; 27/04/2019 - Retro DOS v4.0
 46020                                  ; 04/11/2022
 46021                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46022                                  
 46023                                  ;------------------------------------------------------------------------
 46024                                  ; Patch for Sidekick
 46025                                  ;
 46026                                  ; A documented method for finding the offset of the Errormode flag in the 
 46027                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 46028                                  ; for the following sequence of instructions.
 46029                                  ;
 46030                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46031                                  ;
 46032                                  ; The Offset of Errormode flag is 0320h
 46033                                  ;
 46034                                  ;------------------------------------------------------------------------
 46035                                  
 46036                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46037                                  	db	075h, 0Ch			 ; jnz  NearLabel
 46038                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46039                                  	db	0CDh, 028h			 ; int  28h
 46040                                  
 46041                                  ;--------------------------------------------------------------------------
 46042                                  ; Patch for PortOfEntry - M036
 46043                                  ;
 46044                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46045                                  ; the offset of Errormode flag. The following patch is to support them in 
 46046                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46047                                  ;
 46048                                  ;---------------------------------------------------------------------------
 46049                                  
 46050                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46051                                  	db	075h, 037h			 ; jnz	NearLabel
 46052                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46053                                  
 46054                                  %endif ; 29/12/2022
 46055                                  
 46056                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46057                                  
 46058                                  ;--------------------------------------------------------------------------
 46059                                  
 46060                                  ;*** New FCB Implementation
 46061                                  ; This variable is used as a cache in the new FCB implementation to remember
 46062                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46063                                  
 46064 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46065                                  
 46066                                  ;DOSDATA ENDS
 46067                                  
 46068                                  ;============================================================================
 46069                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46070                                  ;============================================================================
 46071                                  ; 27/04/2019 - Retro DOS 4.0
 46072                                  
 46073                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46074                                  
 46075                                  ;---------------------------------------------------------------------------
 46076                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46077                                  ;----------------------------------------------------------------------------
 46078                                  	
 46079                                  	;db	90h
 46080                                  
 46081                                  	;EVEN
 46082                                  align 2
 46083                                  
 46084                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46085                                  
 46086                                  DOSINTTABLE:	; LABEL	DWORD
 46087                                  
 46088                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46089                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46090                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46091                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46092                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46093                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46094                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46095                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46096                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46097                                  	
 46098 00001048 [7651]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46099 0000104C [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 46100 00001050 [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46101 00001054 [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46102 00001058 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46103 0000105C [AE60]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46104 00001060 [0707]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46105 00001064 [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46106 00001068 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46107                                  
 46108 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 46109 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 46110                                  
 46111                                  ;-------------------------------------------------------------------------
 46112                                  ;
 46113                                  ; LOW MEM STUB:
 46114                                  ;
 46115                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 46116                                  ; handled by DOS. This stub is installed if the user specifies that the 
 46117                                  ; DOS load in HIMEM. Each entry point does this.
 46118                                  ;
 46119                                  ; 	1. if jmp to 8 has been patched out
 46120                                  ;	   2. if A20 OFF
 46121                                  ;	      3. Enable A20
 46122                                  ;	   4. else 
 46123                                  ;	      5. just go to dos entry
 46124                                  ;	   6. endif
 46125                                  ;	7. else
 46126                                  ;	   8. just go to dos entry
 46127                                  ;	9. endif
 46128                                  ;
 46129                                  ;--------------------------------------------------------------------------
 46130                                  
 46131                                  ; 27/04/2019 - Retro DOS v4.0
 46132                                  
 46133                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46134                                  
 46135                                  ;--------------------------------------------------------------------------
 46136                                  ;
 46137                                  ; DIVIDE BY 0 handler
 46138                                  ;
 46139                                  ;--------------------------------------------------------------------------
 46140                                  
 46141                                  ldivov:
 46142                                  	; The following jump, skipping the XMS calls will be patched to 
 46143                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46144                                  	; needed because the stub is installed even before the XMS driver
 46145                                  	; is loaded if the user specifies dos=high in the config.sys
 46146                                  i0patch:
 46147 00001070 EB03                    	jmp	short divov_cont	
 46148                                  
 46149 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46150                                  divov_cont:
 46151 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46152                                  
 46153                                  ;------------------------------------------------------------------------
 46154                                  ;
 46155                                  ; INT 20 Handler
 46156                                  ;
 46157                                  ; Here we do not have to set up the stack to return here as the abort call
 46158                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46159                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46160                                  ; will be restored then.
 46161                                  ;
 46162                                  ;-------------------------------------------------------------------------
 46163                                  
 46164                                  lquit:
 46165                                  	; The following jump, skipping the XMS calls will be patched to 
 46166                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46167                                  	; needed because the stub is installed even before the XMS driver
 46168                                  	; is loaded if the user specifies dos=high in the config.sys
 46169                                  i20patch:
 46170 0000107A EB03                    	jmp	short quit_cont	
 46171                                  
 46172 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46173                                  quit_cont:
 46174 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46175                                  
 46176                                  ;--------------------------------------------------------------------------
 46177                                  ;
 46178                                  ; INT 21 Handler
 46179                                  ;
 46180                                  ;--------------------------------------------------------------------------
 46181                                  
 46182                                  lcommand:
 46183                                  	; The following jump, skipping the XMS calls will be patched to 
 46184                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46185                                  	; needed because the stub is installed even before the XMS driver
 46186                                  	; is loaded if the user specifies dos=high in the config.sys
 46187                                  i21patch:
 46188 00001084 EB03                    	jmp	short command_cont	
 46189                                  
 46190 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46191                                  command_cont:
 46192 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46193                                  
 46194                                  ;------------------------------------------------------------------------
 46195                                  ;
 46196                                  ; INT 25 
 46197                                  ;
 46198                                  ;----------------------------------------------------------------------------
 46199                                  
 46200                                  labsdrd:
 46201                                  	; The following jump, skipping the XMS calls will be patched to 
 46202                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46203                                  	; needed because the stub is installed even before the XMS driver
 46204                                  	; is loaded if the user specifies dos=high in the config.sys
 46205                                  i25patch:
 46206 0000108E EB03                    	jmp	short absdrd_cont	
 46207                                  
 46208 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46209                                  absdrd_cont:
 46210 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46211                                  
 46212                                  ;-------------------------------------------------------------------------
 46213                                  ;
 46214                                  ; INT 26
 46215                                  ;
 46216                                  ;-----------------------------------------------------------------------
 46217                                  
 46218                                  labsdwrt:
 46219                                  	; The following jump, skipping the XMS calls will be patched to 
 46220                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46221                                  	; needed because the stub is installed even before the XMS driver
 46222                                  	; is loaded if the user specifies dos=high in the config.sys
 46223                                  i26patch:
 46224 00001098 EB03                    	jmp	short absdwrt_cont	
 46225                                  
 46226 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46227                                  absdwrt_cont:
 46228 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46229                                  
 46230                                  ;------------------------------------------------------------------------
 46231                                  ;
 46232                                  ; INT 27
 46233                                  ;
 46234                                  ;-----------------------------------------------------------------------
 46235                                  
 46236                                  lstay_resident:
 46237                                  	; The following jump, skipping the XMS calls will be patched to 
 46238                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46239                                  	; needed because the stub is installed even before the XMS driver
 46240                                  	; is loaded if the user specifies dos=high in the config.sys
 46241                                  i27patch:
 46242 000010A2 EB03                    	jmp	short sr_cont	
 46243                                  
 46244 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46245                                  sr_cont:
 46246 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46247                                  
 46248                                  ;-----------------------------------------------------------------------------
 46249                                  ;
 46250                                  ; INT 2f
 46251                                  ;
 46252                                  ;-------------------------------------------------------------------------
 46253                                  
 46254                                  lint2f:
 46255                                  	; The following jump, skipping the XMS calls will be patched to 
 46256                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46257                                  	; needed because the stub is installed even before the XMS driver
 46258                                  	; is loaded if the user specifies dos=high in the config.sys
 46259                                  i2fpatch:
 46260 000010AC EB03                    	jmp	short int2f_cont	
 46261                                  
 46262 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46263                                  int2f_cont:
 46264 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46265                                  
 46266                                  ;-----------------------------------------------------------------------------
 46267                                  ;
 46268                                  ; CPM entry
 46269                                  ;
 46270                                  ;------------------------------------------------------------------------
 46271                                  
 46272                                  lcall_entry:
 46273                                  	; The following jump, skipping the XMS calls will be patched to 
 46274                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46275                                  	; needed because the stub is installed even before the XMS driver
 46276                                  	; is loaded if the user specifies dos=high in the config.sys
 46277                                  cpmpatch:
 46278 000010B6 EB03                    	jmp	short callentry_cont	
 46279                                  
 46280 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46281                                  callentry_cont:
 46282 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46283                                  
 46284                                  ;--------------------------------------------------------------------------
 46285                                  
 46286                                  lirett:
 46287 000010C0 CF                      	iret
 46288                                  
 46289                                  ;---------------------------------------------------------------------------
 46290                                  ;
 46291                                  ; LowIntXX:
 46292                                  ;
 46293                                  ; Interrupts from DOS that pass control to a user program must be done from
 46294                                  ; low memory, as the user program may change the state of the A20 line or
 46295                                  ; they may require that the A20 line be OFF. The following piece of code is
 46296                                  ; far call'd from the following places in DOS:
 46297                                  ;
 46298                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46299                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46300                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46301                                  ;
 46302                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46303                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46304                                  ; before doing the ints and then do a far junp back into DOS.
 46305                                  ;
 46306                                  ;---------------------------------------------------------------------------
 46307                                  
 46308 000010C1 00000000                DosRetAddr23:	dd	0
 46309 000010C5 00000000                DosRetAddr24:	dd	0
 46310 000010C9 00000000                DosRetAddr28:	dd	0
 46311                                  
 46312                                  	; Execute int 23h from low memory
 46313                                  LowInt23:
 46314                                  					; save the return address that is on
 46315                                  					; the stack
 46316 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 46317 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 46318                                  
 46319 000010D7 CD23                    	int	23h			; ctrl C
 46320                                  					; turn on A20 it has been turned OFF
 46321                                  					; by int 28/23/24 handler.
 46322                                  
 46323 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46324                                  
 46325 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46326                                  
 46327                                  
 46328                                  	; Execute int 24h from low memory
 46329                                  LowInt24:
 46330                                  					; save the return address that is on
 46331                                  					; the stack
 46332 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 46333 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 46334                                  
 46335 000010EB CD24                    	int	24h			; crit error
 46336                                  					; turn on A20 it has been turned OFF
 46337                                  					; by int 28/23/24 handler.
 46338                                  
 46339 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46340                                  
 46341 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46342                                  
 46343                                  
 46344                                   
 46345                                  	; Execute int 28h from low memory
 46346                                  LowInt28:
 46347 000010F5 CD28                    	int	28h			; idle int
 46348                                  					; turn on A20 it has been turned OFF
 46349                                  					; by int 28/23/24 handler.
 46350                                  
 46351 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46352                                  
 46353 000010FA CB                      	retf
 46354                                  
 46355                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46356                                  
 46357                                  ;-------------------------------------------------------------------------
 46358                                  ;
 46359                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46360                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46361                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46362                                  ; This is so because exepac'd programs rely on address wrap.
 46363                                  ;
 46364                                  ;------------------------------------------------------------------------- 
 46365                                  
 46366                                  disa20_xfer:
 46367 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 46368                                  
 46369                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46370                                  
 46371                                  	; DS:SI points to entry point
 46372                                  	; AX:DI points to initial stack
 46373                                  	; DX has PDB pointer
 46374                                  	; BX has initial AX value
 46375                                  
 46376 000010FE FA                      	cli
 46377 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46378                                  
 46379 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 46380 00001107 89FC                    	mov	SP,DI			; and SP
 46381 00001109 FB                      	sti
 46382                                  
 46383 0000110A 1E                      	push	DS			; fake long call to entry
 46384 0000110B 56                      	push	SI
 46385 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 46386 0000110E 8EDA                    	mov	DS,DX
 46387 00001110 89D8                    	mov	AX,BX			; set up proper AX
 46388 00001112 CB                      	retf
 46389                                  
 46390                                  ;-------------------------------------------------------------------------
 46391                                  ;
 46392                                  ; M003:
 46393                                  ;
 46394                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46395                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 46396                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 46397                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 46398                                  ; more info.	
 46399                                  ;
 46400                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 46401                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46402                                  ; stack to avoid additional stack overhead for the user.
 46403                                  ;
 46404                                  ; -------------------------------------------------------------------------
 46405                                  
 46406                                  disa20_iret:
 46407 00001113 E82700                  	call	XMMDisableA20
 46408 00001116 FE0E[2103]              	dec	byte [INDOS]
 46409 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46410 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46411 00001122 89E5                    	mov	BP,SP
 46412                                  	;mov	[BP+user_env.user_AX],AL
 46413 00001124 884600                  	mov	[bp],al
 46414 00001127 A1[F205]                	mov	AX,[NSP]
 46415 0000112A A3[8405]                	mov	[USER_SP],AX
 46416 0000112D A1[F005]                	mov	AX,[NSS]
 46417 00001130 A3[8605]                	mov	[USER_SS],AX
 46418                                  
 46419 00001133 58                      	pop	AX			; restore user regs
 46420 00001134 5B                      	pop	BX
 46421 00001135 59                      	pop	CX
 46422 00001136 5A                      	pop	DX
 46423 00001137 5E                      	pop	SI
 46424 00001138 5F                      	pop	DI
 46425 00001139 5D                      	pop	BP
 46426 0000113A 1F                      	pop	DS
 46427 0000113B 07                      	pop	ES
 46428 0000113C CF                      	iret
 46429                                  
 46430                                  ;**************************************************************************
 46431                                  ;***	XMMDisableA20 - switch 20th address line			      
 46432                                  ;									      
 46433                                  ;	This routine is used to disable the 20th address line in 	      
 46434                                  ;	the system using XMM calls.					      
 46435                                  ;									      
 46436                                  ;	ENTRY	none		;ds = _DATA				      
 46437                                  ;	EXIT	A20 line disabled					      
 46438                                  ;	USES	NOTHING					      
 46439                                  ;									      
 46440                                  ;**************************************************************************
 46441                                  
 46442                                  XMMDisableA20:
 46443 0000113D 53                      	push	bx
 46444 0000113E 50                      	push	ax
 46445                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46446 0000113F B406                    	mov	ah,6
 46447 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46448 00001146 58                      	pop	ax
 46449 00001147 5B                      	pop	bx
 46450 00001148 C3                      	retn
 46451                                  
 46452                                  ; The entry point in the BIOS XMS driver is defined here.
 46453                                  
 46454                                  XMMcontrol:
 46455 00001149 00000000                	dd	0
 46456                                  
 46457                                  ;--------------------------------------------------------------------------
 46458                                  ;
 46459                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46460                                  ;									      
 46461                                  ;	This routine is used to query the A20 state in		 	      
 46462                                  ;	the system using XMM calls.					      
 46463                                  ;									      
 46464                                  ;	ENTRY: none		
 46465                                  ;
 46466                                  ;	EXIT : A20 will be ON
 46467                                  ;		
 46468                                  ; 	USES : NONE								      
 46469                                  ;									      
 46470                                  ;--------------------------------------------------------------------------
 46471                                  
 46472                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46473 0000114D 8000                    	dw	00080h
 46474 0000114F 0000                    	dw	00000h
 46475                                  
 46476                                  HighMemory:	; label dword
 46477 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 46478 00001153 FFFF                    	dw	0FFFFh
 46479                                  
 46480                                  EnsureA20ON:
 46481 00001155 9C                      	pushf
 46482 00001156 1E                      	push    ds
 46483 00001157 06                      	push	es
 46484 00001158 51                      	push	cx
 46485 00001159 56                      	push	si
 46486 0000115A 57                      	push	di
 46487                                  
 46488 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46489 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46490 00001165 B90400                  	mov	cx,4
 46491 00001168 FC                      	cld
 46492 00001169 F3A7                    	repe    cmpsw
 46493                                  
 46494 0000116B 7407                    	jz	short EA20_OFF
 46495                                  EA20_RET:
 46496 0000116D 5F                      	pop	di
 46497 0000116E 5E                      	pop	si
 46498 0000116F 59                      	pop	cx
 46499 00001170 07                      	pop	es
 46500 00001171 1F                      	pop	ds
 46501 00001172 9D                      	popf
 46502 00001173 C3                      	retn
 46503                                  
 46504                                  EA20_OFF:
 46505                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46506                                  	; NOTE: ints are disabled at this point.
 46507                                  
 46508 00001174 53                      	push	bx
 46509 00001175 50                      	push	ax
 46510                                  
 46511 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 46512 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46513 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46514 00001181 8CC8                    	mov	ax,cs
 46515 00001183 8ED0                    	mov	ss,ax
 46516 00001185 BC[A007]                	mov	sp,AUXSTACK
 46517                                  					; ss:sp -> DOSDATA:AuxStack
 46518                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46519 00001188 B405                    	mov	ah,5
 46520 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46521 0000118F 09C0                    	or	ax,ax
 46522 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46523                                  
 46524 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46525 00001197 8ED0                    	mov	ss,ax
 46526 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46527                                  
 46528 0000119E 58                      	pop	ax
 46529 0000119F 5B                      	pop	bx
 46530                                  
 46531 000011A0 EBCB                    	jmp	short EA20_RET
 46532                                  
 46533                                  XMMerror:				; M006 - Start
 46534 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 46535 000011A4 CD10                    	int	10h
 46536 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 46537 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 46538 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 46539 000011AC B002                    	mov	al,02h			; 80 X 25 text
 46540 000011AE CD10                    	int	10h
 46541                                  XMMcont:
 46542 000011B0 B405                    	mov	ah,05h			; set display page
 46543 000011B2 30C0                    	xor	al,al			; page 0
 46544 000011B4 CD10                    	int	10h
 46545                                  	
 46546 000011B6 BE[9312]                	mov	si,XMMERRMSG
 46547 000011B9 0E                      	push	cs
 46548 000011BA 1F                      	pop	ds
 46549 000011BB FC                      	cld				; clear direction flag
 46550                                  XMMprnt:
 46551 000011BC AC                      	lodsb
 46552 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46553 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 46554 000011C1 B40E                    	mov	ah,0Eh
 46555 000011C3 BB0700                  	mov	bx,7
 46556 000011C6 CD10                    	int	10h
 46557 000011C8 EBF2                    	jmp	short XMMprnt
 46558                                  
 46559                                  XMMStall:
 46560 000011CA FB                      	sti				; allow the user to warm boot
 46561 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 46562                                  
 46563                                  ;---------------------------------------------------------------------------
 46564                                  
 46565                                  ; 27/04/2019 - Retro DOS v4.0
 46566                                  
 46567                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46568                                  ALTAH	equ 0Ch
 46569                                  
 46570                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46571                                  ;table was different for this. Segments will be patched in at init time.
 46572                                  
 46573                                  OldInstanceJunk:
 46574 000011CD 7000                    	dw	70h	;segment of BIOS
 46575 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 46576 000011D1 0600                    	dw	6	;5 instance items
 46577                                  
 46578                                  	;dw	0,offset dosdata:contpos, 2
 46579                                  	;dw	0,offset dosdata:bcon, 4
 46580                                  	;dw	0,offset dosdata:carpos,106h
 46581                                  	;dw	0,offset dosdata:charco, 1
 46582                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46583                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46584                                  
 46585 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 46586 000011D9 0000[3200]0400          	dw	0,BCON,4
 46587 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 46588 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 46589 000011EB 0000[C00F]2200          	dw	0,exec_init_SP,34
 46590 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46591                                  
 46592                                  ;---------------------------------------------------------------------------
 46593                                  
 46594                                  ; M021-
 46595                                  ;
 46596                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46597                                  ; 	takes control of the HMA. When running, this word is a reliable
 46598                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46599                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46600                                  
 46601                                  DosHasHMA:
 46602 000011F7 00                      	db	0
 46603                                  FixExePatch:
 46604 000011F8 0000                    	dw	0		; M012
 46605                                  ; 28/12/2022 - Retro DOS v4.1
 46606                                  ;RationalPatchPtr:
 46607                                  ;	dw	0		; M012
 46608                                  
 46609                                  ; End M021
 46610                                  
 46611                                  ;---------------------------------------------------------------------------
 46612                                  
 46613                                  ; 28/12/2022 - Retro DOS v4.1
 46614                                  %if 0
 46615                                  ; M020 Begin
 46616                                  
 46617                                  RatBugCode:	; proc	far
 46618                                  	push	cx
 46619                                  	mov	cx,[10h]
 46620                                  rbc_loop:
 46621                                  	;loop	$
 46622                                  	loop	rbc_loop
 46623                                  	pop	cx
 46624                                  	retf
 46625                                  		
 46626                                  ; M020 End
 46627                                  %endif
 46628                                  
 46629                                  ;---------------------------------------------------------------------------
 46630                                  	
 46631                                  UmbSave1:
 46632                                  	;db	11 dup (?)	; M023
 46633 000011FA 00<rep Bh>              	times	11 db 0	
 46634                                  
 46635                                  ; DOSDATA:122Ah
 46636                                  
 46637                                  Mark3:	; label byte
 46638                                  
 46639                                  ;IF2
 46640                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46641                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46642                                  ;	ENDIF
 46643                                  ;ENDIF
 46644                                  
 46645                                  ;############################################################################
 46646                                  ;
 46647                                  ; ** HACK FOR DOS 4.0 REDIR **
 46648                                  ;
 46649                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46650                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46651                                  ; COUNTRY_CDPG if it can. 
 46652                                  ;
 46653                                  ; MARK3 SHOULD NOT BE > 122AH 
 46654                                  ;
 46655                                  ; As of 9/6/90, this area is FULL!
 46656                                  ;
 46657                                  ;############################################################################
 46658                                   
 46659                                  	;ORG	0122Ah
 46660                                  
 46661                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46662                                  
 46663                                  ; The following table is used for DOS 3.3
 46664                                  ;DOS country and code page information is defined here for DOS 3.3.
 46665                                  ;The initial value for ccDosCountry is 1 (USA).
 46666                                  ;The initial value for ccDosCodepage is 850.
 46667                                  
 46668                                  ; country and code page information
 46669                                  ; ---------------------------------------------------------------------------
 46670                                  COUNTRY_CDPG:	; label  byte
 46671 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46672 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46672 00001216 53595300           
 46673                                  	;db   51 dup (?)
 46674 0000121A 00<rep 33h>             	times 51 db 0
 46675                                  ; ------------------------------------------------<MSKK01>-------------------
 46676                                  ;ifdef	DBCS
 46677                                  ;  ifdef JAPAN
 46678                                  ;	dw   932			; system code page id (JAPAN)
 46679                                  ;  endif
 46680                                  ;  ifdef TAIWAN
 46681                                  ;	dw   938			; system code page id (TAIWAN)
 46682                                  ;  endif
 46683                                  ;  ifdef KOREA
 46684                                  ;	dw   934			; system code page id (KOREA IBM)
 46685                                  ;  endif
 46686                                  ;else
 46687 0000124D B501                    	dw   437			; system code page id
 46688                                  ;endif
 46689                                  ; ------------------------------------------------<MSKK01>-------------------
 46690 0000124F 0600                    	dw   6				; number of entries
 46691 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 46692 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46693 00001254 0000                    	dw   0				; segment of poiter
 46694 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46695 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46696 00001259 0000                    	dw   0				; segment of poiter
 46697 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 46698 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46699 0000125E 0000                    	dw   0				; segment of poiter
 46700 00001260 06                      	db   SetCollate	; 6		; collate type
 46701 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46702 00001263 0000                    	dw   0				; segment of poiter
 46703 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46704 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46705 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46706 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 46707 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46708                                  ; ------------------------------------------------<MSKK01>-------------------
 46709                                  ;ifdef	DBCS
 46710                                  ;	...... 
 46711                                  ;else
 46712 0000126D 0100                    	dw   1				; USA country id
 46713 0000126F B501                    	dw   437			; USA system code page id
 46714 00001271 0000                    	dw   0 				; date format
 46715 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 46716 00001278 2C00                    	db   ',',0			; thousand separator
 46717 0000127A 2E00                    	db   '.',0			; decimal separator
 46718 0000127C 2D00                    	db   '-',0			; date separator
 46719 0000127E 3A00                    	db   ':',0			; time separator
 46720 00001280 00                      	db   0				; currency format flag
 46721 00001281 02                      	db   2				; # of digits in currency
 46722 00001282 00                      	db   0 				; time format
 46723 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46724 00001285 0000                    	dw   0				; segment of entry point
 46725 00001287 2C00                    	db   ',',0			; data list separator
 46726 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46726 00001292 00                 
 46727                                  ;endif
 46728                                  ; ------------------------------------------------<MSKK01>-------------------
 46729                                  
 46730                                  ; 27/04/2019 - Retro DOS v4.0
 46731                                  
 46732                                  ;include msdos.cl2			; XMMERRMSG
 46733                                  
 46734                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 46735                                  
 46736                                  XMMERRMSG:
 46737 00001293 0D0A                    	db	0Dh,0Ah
 46738 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46738 0000129E 617265204572726F72-
 46738 000012A7 0D0A24             
 46739                                  
 46740                                  ; DOSDATA ends
 46741                                  
 46742                                  ; 05/11/2022
 46743                                  ;----------------------------------------------------------------------------
 46744                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46745                                  ;----------------------------------------------------------------------------
 46746                                  
 46747                                  ; 28/12/2022 - Retro DOS v4.1
 46748                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46749                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46750                                  ;----------------------------------------------------------------------------
 46751                                  %if 0
 46752                                  ;----------------------------------------------------------------------------
 46753                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46754                                  
 46755                                  ;============================================================================
 46756                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46757                                  ;============================================================================
 46758                                  ; 27/04/2019 - Retro DOS 4.0
 46759                                  
 46760                                  ;DOSDATA Segment
 46761                                  
 46762                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46763                                  
 46764                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46765                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46766                                  
 46767                                  ; first and second DOS patches
 46768                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46769                                  ;
 46770                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46771                                  ;	DVRDLP:
 46772                                  ;	DVWRTLP:
 46773                                  ;
 46774                                  ;
 46775                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46776                                  ;	lds	si,si+7 				  ; sf_devptr
 46777                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46778                                  
 46779                                  DOSP1_ID:	db	036h,0C5h,036h
 46780                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46781                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46782                                  
 46783                                  		db	90h, 90h
 46784                                  
 46785                                  DOSP12_ID:	db	036h,0C5h,036h
 46786                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46787                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46788                                  
 46789                                  ; DOSDATA:12E3h
 46790                                  
 46791                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46792                                  ;
 46793                                  ; Code in disk.asm, 1 location
 46794                                  ;	GETBUF:
 46795                                  ;
 46796                                  ; 051h	push	cx	<- begin special int28 mode
 46797                                  ;	push	es
 46798                                  ;	push	di
 46799                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46800                                  ;	call	????	; $STD_CON_STRING_INPUT
 46801                                  ;	pop	di
 46802                                  ;	pop	es
 46803                                  ; 059h	pop	cx	<- end special int28 mode
 46804                                  
 46805                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46806                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46807                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46808                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46809                                  DOSP4_ID:	db	059h			; pop cx
 46810                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46811                                  	
 46812                                  ; DOSDATA:12EFh
 46813                                  
 46814                                  ; Fifth DOS patch - System call 40h (Write) to console
 46815                                  ;
 46816                                  ; Code in disk.asm, 1 location
 46817                                  ;
 46818                                  ;		push	cx
 46819                                  ;      WRCONLP: lodsb
 46820                                  ;		cmp	al,1Ah
 46821                                  ;		jz	????
 46822                                  ;		call	????	<- "simulate" int28 event
 46823                                  ;		loop	WRCONLP
 46824                                  ;      CONEOF:	pop	ax
 46825                                  
 46826                                  DOSP5_ID:	db	051h			; push cx
 46827                                  		db	0ACh,03Ch,01Ah,074h,005h
 46828                                  		db	0E8h			; call
 46829                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46830                                  
 46831                                  ; DOSDATA:12F6h
 46832                                  
 46833                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46834                                  ;
 46835                                  ; Code in disp.asm, 1 location
 46836                                  ;
 46837                                  ;
 46838                                  ;	mov [SaveDS],ds
 46839                                  ;	mov [SaveBX],bx
 46840                                  ;	mov bx,cs
 46841                                  ;	mov ds,bx
 46842                                  ;	inc [indos]
 46843                                  ;	xor ax,ax
 46844                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46845                                  
 46846                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46847                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46848                                  		db	02Eh,089h,01Eh
 46849                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46850                                  		db	08Ch,0CBh		; mov bx,cs
 46851                                  		db	08Eh,0DBh		; mov ds,bx
 46852                                  		db	0FEh,006h
 46853                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46854                                  		db	033h,0C0h		; xor ax,ax
 46855                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46856                                  
 46857                                  ; DOSDATA:130Ah
 46858                                  
 46859                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46860                                  ;
 46861                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46862                                  ;
 46863                                  ;
 46864                                  ;
 46865                                  ;	push	ax
 46866                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46867                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46868                                  ;	pop	ax
 46869                                  ;	jz	????
 46870                                  
 46871                                  DOSP8_ID:	db	050h			; push ax
 46872                                  		db	036h,0A1h
 46873                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46874                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46875                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46876                                  		db	02Fh,058h		; pop  ax
 46877                                  
 46878                                  ; DOSDATA:1314h
 46879                                  
 46880                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46881                                  ;
 46882                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46883                                  ;   a yeild when a character is not ready to be read.
 46884                                  ;
 46885                                  ; Code in disk.asm, 3 locations
 46886                                  ;
 46887                                  ;   DVRDRAW:
 46888                                  ;	    PUSH    ES
 46889                                  ;	    POP     DS
 46890                                  ;   ReadRawRetry:				<- Patch 10
 46891                                  ;	    MOV     BX,DI
 46892                                  ;	    XOR     AX,AX			<- Reenter #2
 46893                                  ;	    MOV     DX,AX
 46894                                  ;	    call    SETREAD
 46895                                  ;	    PUSH    DS				<- Reenter #1
 46896                                  ;	    LDS     SI,[THISSFT]
 46897                                  ;	    call    DEVIOCALL
 46898                                  ;	    MOV     DX,DI
 46899                                  ;	    MOV     AH,86H
 46900                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46901                                  ;	    TEST    DI,STERR
 46902                                  ;	    JZ	    CRDROK
 46903                                  ;	    call    CHARHARD
 46904                                  ;	    MOV     DI,DX
 46905                                  ;	    OR	    AL,AL
 46906                                  ;	    JZ	    CRDROK
 46907                                  ;	    CMP     AL,3
 46908                                  ;	    JZ	    CRDFERR
 46909                                  ;	    POP     DS
 46910                                  ;	    JMP     ReadRawRetry
 46911                                  ;
 46912                                  ;   CRDFERR:
 46913                                  ;	    POP     DI				<- Patch 11
 46914                                  ;   DEVIOFERR:
 46915                                  ;	    LES     DI,[THISSFT]
 46916                                  ;	    jmp     SET_ACC_ERR_DS
 46917                                  ;
 46918                                  ;   CRDROK:
 46919                                  ;	    POP     DI				<- Patch 12
 46920                                  ;	    MOV     DI,DX
 46921                                  ;	    ADD     DI,[CALLSCNT]
 46922                                  ;	    JMP     SHORT ENDRDDEVJ3
 46923                                  
 46924                                  DOSP10_ID:		db	006H,01FH
 46925                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46926                                  DOSP10_LOC:		db	08BH,0DFH
 46927                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46928                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46929                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46930                                  			db	0DFH,00EH
 46931                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46932                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46933                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46934                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46935                                  			db	009H,003H
 46936                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46937                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46938                                  			db	01FH,0EBH,0CFH
 46939                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46940                                  			db	05FH
 46941                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46942                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46943                                  
 46944                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46945                                  			db	05FH,08BH,0FAH
 46946                                  ; DOSDATA:1353h
 46947                                  
 46948                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46949                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46950                                  ;
 46951                                  ;	    Sets focus to current VM so user can see fatal message.
 46952                                  ;
 46953                                  ;
 46954                                  ;	l0: lodsb		<- Setfocus here
 46955                                  ;	    cmp al, '$'
 46956                                  ;	    je l1
 46957                                  ;	    mov bl, 7
 46958                                  ;	    mov ah, 0Eh
 46959                                  ;	    int 10h
 46960                                  ;	    jmp l0
 46961                                  ;	l1: jmp $
 46962                                  
 46963                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46964                                  		db	03Ch,024h		;     cmp al, '$'
 46965                                  		db	074h,008h		;     je l1
 46966                                  		db	0B3h,007h		;     mov bl, 7
 46967                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46968                                  		db	0CDh,010h		;     int 10h
 46969                                  		db	0EBh,0F3h		;     jmp l0
 46970                                  		db	0EBh,0FEh		; l1: jmp $
 46971                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46972                                  
 46973                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46974                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46975                                  
 46976                                  ; 06/12/2022
 46977                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46978                                  
 46979                                  ; DOSDATA ends
 46980                                  
 46981                                  ;============================================================================
 46982                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46983                                  ;============================================================================
 46984                                  ; 27/04/2019 - Retro DOS 4.0
 46985                                  
 46986                                  ;mpatch.asm -- holds data patch location for callouts 
 46987                                  ; -- allocate cluster in rom.asm
 46988                                  ;
 46989                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46990                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46991                                  ; cluster allocation, however it can be expanded to be used by other
 46992                                  ; patches. This is important since we have an easy-access pointer to
 46993                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46994                                  ; only patch out a far call/retf, so any space after that could be
 46995                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46996                                  ; to call out here.
 46997                                  ;
 46998                                  ; Currently, we allocate only the minimum space required for the 6
 46999                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47000                                  ; to reserve space here if your new data will be position dependent
 47001                                  ; and would prohibit growing of this table.
 47002                                  ;       
 47003                                  ;history	-	created 8-7-92 by scottq
 47004                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47005                                  ;
 47006                                  ;Exported Functions
 47007                                  ;==================
 47008                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47009                                  
 47010                                  ; DosData Segment
 47011                                  
 47012                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47013                                  
 47014                                  ; ---------------------------------------------------------------------------
 47015                                  
 47016                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47017                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47018                                  ; greater). Added to this file because it needed to be somewhere and is
 47019                                  ; 'patch' related.
 47020                                  
 47021                                  Rational386PatchPtr:
 47022                                  	dw	0	; points to patch routine or RET instr.
 47023                                  ; ---------------------------------------------------------------------------
 47024                                  
 47025                                  MagicPatch:
 47026                                  ;MagicPatch proc far
 47027                                          retf            ;default is to just return to allocate
 47028                                          nop             ;however, this code will be patched
 47029                                          nop             ;by magicdrv.sys to
 47030                                          nop             ; call far ?:?     
 47031                                          nop             ; retf or perhaps just jmp far
 47032                                          nop             ;retf/nop take one byte, so we need six instructions
 47033                                                          ;for 6 byte patch
 47034                                  ;MagicPatch endp
 47035                                  
 47036                                  ; ---------------------------------------------------------------------------
 47037                                  
 47038                                  ;DosData Ends
 47039                                  
 47040                                  ; DOSDATA:136Ah
 47041                                  
 47042                                  ;----------------------------------------------------------------------------
 47043                                  
 47044                                  ;DOSDATALAST SEGMENT
 47045                                  
 47046                                  ; 29/04/2019 - Retro DOS v4.0
 47047                                  
 47048                                  ;----------------------------------------------------------------------------
 47049                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47050                                  
 47051                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 47052                                  
 47053                                  ;align 16
 47054                                  
 47055                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47056                                  
 47057                                  ;----------------------------------------------------------------------------
 47058                                  
 47059                                  %endif	; 05/11/2022
 47060                                  
 47061                                  ; 05/12/2022
 47062                                  ;MSDAT001E:	; label byte
 47063                                  
 47064                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47065                                  DOSDATAEND equ $
 47066                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47067                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 47068                                  
 47069                                  ;DOSDATALAST ENDS
 47070                                  
 47071                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47072                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47073                                  ;============================================================================
 47074                                  ;	END
 47075                                  ;============================================================================
 47076                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47077                                  ; -----------------------------
 47078                                  ; MAY 2019, ISTANBUL - TURKIYE.
