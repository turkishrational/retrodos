     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 04/02/2024 - Retro DOS v4.1 ((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E93E76                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [7361]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [5816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [6116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [1317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [2E17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [3417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [A215]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [CE15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [7C13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [D513]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [E113]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [4817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [5217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [A00F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [870E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [211E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [F117]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [101F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [561F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [9717]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [781C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [7C1C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [001F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [5D18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5706]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [820E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [770E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [2F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [310F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5706]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5706]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [700F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5706]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [801C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [841C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [A917]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [7F17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [A80E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [AD10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [741C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [701C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [240F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [630A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [800A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [9F0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [B00A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [680C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [640E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [3F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [1761]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [720F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [5A0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [990E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [410E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [D50E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [6F0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [DC21]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [2821]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [6321]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [356F]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [5E6E]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [8F66]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [A067]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [0668]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [856F]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [0B68]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [426F]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [3D22]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [C068]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [DE68]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [C420]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [0A62]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [8463]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [6063]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [F15A]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [4F61]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [E75A]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [0E20]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [6220]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [660F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [D50F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [630C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [9C10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [AB6F]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [7268]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [B963]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [E90E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [3670]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [1E70]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [1772]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [9F64]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [A869]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [0D69]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [F96D]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5706]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [090F]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [F20C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [EF0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [DC66]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [C266]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [9F11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [C266]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5706]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [CC70]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [1407]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3909]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [CA2E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [CA0E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [3309]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [1C50]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [6316]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [F252]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [7158]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [BF2F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [365A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [CB72]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [162C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [002C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [F50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [0B12]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [6A58]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [0B12]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [D811]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [F011]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [C74F]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [AE58]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [0D5A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [0A66]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [6D6A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [186A]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [1E6E]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [9C0B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [350C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [920B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [B611]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [5B69]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [D765]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [F96D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7E06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [5541]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [0B12]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [FE11]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [AD12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [8F66]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [B312]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [A067]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [6F12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [F012]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [DF12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [0D13]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [1113]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5706]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[F711]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8464C                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E8B455                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8B20D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8C40D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E87631                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E8B533                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E82B0D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E89203                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E83A0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E85236                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E81031                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL, 1		; No increment; need carry flag
  4981 00000600 7216                    	JC	SHORT SKIPGET
  4982 00000602 E81364                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985 00000607 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4986 00000609 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4987 0000060C 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4988 0000060E F9                      	STC				;DCR.			;AN000;
  4989 0000060F A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4990 00000612 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4991                                  SKIPGET:
  4992 00000618 58                      	POP	AX
  4993 00000619 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4994                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4995                                  	;jnc	short getbp_t
  4996                                  	;retn
  4997                                  getbp_t:
  4998 0000061B C42E[A205]              	LES	BP,[THISCDS]
  4999                                  	; 15/12/2022
  5000 0000061F 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5001                                  	; 07/12/2022
  5002                                  	;TEST	WORD [ES:BP+43H],8000H
  5003                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5004 00000624 7408                    	JZ	SHORT GETBP_CDS
  5005 00000626 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5006 0000062C F9                      	STC
  5007                                  GETBP_RETN:
  5008 0000062D C3                      	RETN
  5009                                  
  5010                                  GETBP_CDS:
  5011                                  	;LES	BP,[ES:BP+45H]
  5012 0000062E 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5013                                  GOTDPB:
  5014                                  	; Load THISDPB from ES:BP
  5015 00000632 892E[8A05]              	MOV	[THISDPB],BP
  5016 00000636 8C06[8C05]              	MOV	[THISDPB+2],ES
  5017 0000063A C3                      	RETN
  5018                                  
  5019                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5020                                  
  5021                                  ;----------------------------------------------------------------------------
  5022                                  ;
  5023                                  ; Procedure Name : SYS_RETURN
  5024                                  ;
  5025                                  ; These are the general system call exit mechanisms. All internal system
  5026                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5027                                  ; is to set the user's flags and set his AX register for return.
  5028                                  ;
  5029                                  ;----------------------------------------------------------------------------
  5030                                  
  5031                                          ;procedure   SYS_RETURN,NEAR
  5032                                  SYS_RETURN:        
  5033                                          ;entry	SYS_RET_OK
  5034                                  SYS_RET_OK:   
  5035 0000063B E847FE                  	call    Get_User_Stack
  5036                                  		; turn off user's carry flag
  5037                                  SYS_RET_OK_clc: ; 25/06/2019 
  5038                                          ;;and	word [SI+16h],0FFFEh 
  5039                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5040                                          ; 25/06/2019
  5041 0000063E 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5042 00000642 EB10                    	JMP     SHORT DO_RET
  5043                                  
  5044                                          ;entry   SYS_RET_ERR
  5045                                  SYS_RET_ERR:        
  5046 00000644 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5047 00000646 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5048 00000649 E81A00                  	CALL	ErrorMap
  5049                                  
  5050                                  	;entry	From_GetSet
  5051                                  From_GetSet:
  5052 0000064C E836FE                          call    Get_User_Stack
  5053                                  		 ; signal carry to user
  5054                                  	;;or	word [SI+16h],1
  5055                                  	;OR	word [SI+user_env.user_F],f_Carry
  5056                                  	; 25/06/2019
  5057 0000064F 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5058 00000653 F9                      	STC			; also, signal internal error
  5059                                  DO_RET:
  5060                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5061 00000654 8904                    	MOV	[SI],AX
  5062 00000656 C3                      	RETN
  5063                                  
  5064                                  	;entry	FCB_RET_OK
  5065                                  FCB_RET_OK:
  5066                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5067                                  NO_OP:
  5068 00000657 30C0                    	XOR	AL,AL
  5069 00000659 C3                      	retn
  5070                                  
  5071                                  	;entry	FCB_RET_ERR
  5072                                  FCB_RET_ERR:
  5073 0000065A 30E4                    	XOR	AH,AH
  5074 0000065C 36A3[2403]              	mov	[ss:EXTERR],AX
  5075 00000660 E80300                  	CALL	ErrorMap
  5076 00000663 B0FF                    	MOV	AL,-1
  5077 00000665 C3                      	retn
  5078                                  
  5079                                  	;entry	ErrorMap
  5080                                  ErrorMap:
  5081 00000666 56                      	PUSH	SI
  5082                                  				; ERR_TABLE_21 is now in DOSDATA
  5083 00000667 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5084                                  				; SS override for FAILERR and EXTERR
  5085 0000066A 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5086 00000670 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5087                                  		 ; Ooops, this is the REAL reason
  5088                                  	;mov	word [SS:EXTERR],53h
  5089 00000672 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5090                                  EXTENDED_NORMAL:
  5091 00000679 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5092 0000067C 5E                      	POP	SI
  5093 0000067D C3                      	retn
  5094                                  
  5095                                  	;EndProc SYS_RETURN
  5096                                  
  5097                                  ;---------------------------------------------------------------------------
  5098                                  ;
  5099                                  ; Procedure Name : CAL_LK
  5100                                  ;
  5101                                  ; Inputs:
  5102                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5103                                  ;		(DS NEED not be DOSDATA)
  5104                                  ;	[EXTERR] is set with error
  5105                                  ; Function:
  5106                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5107                                  ; Outputs:
  5108                                  ;	[EXTERR_CLASS] set
  5109                                  ;	[EXTERR_ACTION] set
  5110                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5111                                  ; Destroys SI, FLAGS
  5112                                  ;
  5113                                  ;---------------------------------------------------------------------------
  5114                                  
  5115                                  	;procedure CAL_LK,NEAR
  5116                                  CAL_LK:
  5117 0000067E 1E                      	PUSH	DS
  5118 0000067F 50                      	PUSH	AX
  5119 00000680 53                      	PUSH	BX
  5120                                  
  5121                                  ;M048	Context DS		; DS:SI -> Table
  5122                                  ;
  5123                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5124                                  ; is DOSDATA
  5125                                  
  5126                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5127                                  	; 15/05/2019 - Retro DOS v4.0
  5128 00000681 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5129                                  
  5130                                  	; 18/07/2018
  5131                                  	;push	ss
  5132                                  	;pop	ds
  5133                                  
  5134 00000686 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5135                                  TABLK1:
  5136 0000068A AC                      	LODSB
  5137                                  
  5138 0000068B 3CFF                    	CMP	AL,0FFH
  5139 0000068D 7409                    	JZ	short GOT_VALS	; End of table
  5140 0000068F 38D8                    	CMP	AL,BL
  5141 00000691 7405                    	JZ	short GOT_VALS	; Got entry
  5142 00000693 83C603                  	ADD	SI,3		; Next table entry
  5143                                  	; 15/08/2018
  5144 00000696 EBF2                    	JMP	short TABLK1
  5145                                  
  5146                                  GOT_VALS:
  5147 00000698 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5148                                  
  5149 00000699 80FCFF                  	CMP	AH,0FFH
  5150 0000069C 7404                    	JZ	short NO_SET_ACT
  5151 0000069E 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5152                                  NO_SET_ACT:
  5153 000006A2 3CFF                    	CMP	AL,0FFH
  5154 000006A4 7403                    	JZ	short NO_SET_CLS
  5155 000006A6 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5156                                  NO_SET_CLS:
  5157 000006A9 AC                      	LODSB			; Get LOCUS
  5158                                  
  5159 000006AA 3CFF                    	CMP	AL,0FFH
  5160 000006AC 7403                    	JZ	short NO_SET_LOC
  5161 000006AE A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5162                                  NO_SET_LOC:
  5163 000006B1 5B                      	POP	BX
  5164 000006B2 58                      	POP	AX
  5165 000006B3 1F                      	POP	DS
  5166 000006B4 C3                      	retn
  5167                                  
  5168                                  	;EndProc CAL_LK
  5169                                  
  5170                                  ;---------------------------------------------------------------------------
  5171                                  ;
  5172                                  ; Procedure Name : ETAB_LK
  5173                                  ;
  5174                                  ; Inputs:
  5175                                  ;	AX is error code
  5176                                  ;	[USER_IN_AX] has AH value of system call involved
  5177                                  ; Function:
  5178                                  ;	Make sure error code is appropriate to this call.
  5179                                  ; Outputs:
  5180                                  ;	AX MAY be mapped error code
  5181                                  ;	[EXTERR] = Input AX
  5182                                  ; Destroys ONLY AX and FLAGS
  5183                                  ;
  5184                                  ;---------------------------------------------------------------------------
  5185                                  
  5186                                  	;procedure ETAB_LK,NEAR
  5187                                  
  5188                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5189 000006B5 1E                      	PUSH	DS
  5190 000006B6 56                      	PUSH	SI
  5191 000006B7 51                      	PUSH	CX
  5192 000006B8 53                      	PUSH	BX
  5193                                  
  5194                                  	;Context DS			; SS is DOSDATA
  5195                                  
  5196 000006B9 16                      	push	ss
  5197 000006BA 1F                      	pop	ds
  5198                                  
  5199 000006BB A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5200                                  
  5201                                  					; I21_MAP_E_TAB is now in DOSCODE
  5202 000006BE BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5203 000006C1 88C7                    	MOV	BH,AL			; Real code to BH
  5204 000006C3 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5205                                  TABLK2:
  5206                                  	; 15/05/2019 - Retro DOS v4.0
  5207 000006C7 2E                      	cs
  5208 000006C8 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5209                                  	
  5210                                  	; 18/07/2018 - Retro DOS v3.0
  5211                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5212                                  
  5213 000006C9 3CFF                    	CMP	AL,0FFH 		; End of table?
  5214 000006CB 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5215 000006CD 38D8                    	CMP	AL,BL			; Found call?
  5216 000006CF 740C                    	JZ	short GOT_CALL		; Yes
  5217 000006D1 86E0                    	XCHG	AH,AL			; Count to AL
  5218 000006D3 30E4                    	XOR	AH,AH			; Make word for add
  5219 000006D5 01C6                    	ADD	SI,AX			; Next table entry
  5220 000006D7 EBEE                    	JMP	short TABLK2
  5221                                  
  5222                                  NOT_IN_TABLE:
  5223 000006D9 88F8                    	MOV	AL,BH			; Restore original code
  5224 000006DB EB0C                    	JMP	SHORT NO_MAP
  5225                                  
  5226                                  GOT_CALL:
  5227 000006DD 88E1                    	MOV	CL,AH
  5228 000006DF 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5229                                  CHECK_CODE:
  5230                                  	; 15/05/2019 - Retro DOS v4.0
  5231 000006E1 2E                      	cs
  5232 000006E2 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5233                                  
  5234                                  	; 18/07/2018
  5235                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5236                                  
  5237 000006E3 38F8                    	CMP	AL,BH			; Code OK?
  5238 000006E5 7402                    	JZ	short NO_MAP		; Yes
  5239 000006E7 E2F8                    	LOOP	CHECK_CODE
  5240                                  NO_MAP:
  5241 000006E9 30E4                    	XOR	AH,AH			; AX is now valid code
  5242 000006EB 5B                      	POP	BX
  5243 000006EC 59                      	POP	CX
  5244 000006ED 5E                      	POP	SI
  5245 000006EE 1F                      	POP	DS
  5246 000006EF C3                      	retn
  5247                                  
  5248                                  	;EndProc ETAB_LK
  5249                                  
  5250                                  ; 18/07/2018 - Retro DOS v3.0
  5251                                  ;---------------------------------------------------------------------------
  5252                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5253                                  
  5254                                  ;IF installed ; (*)
  5255                                  
  5256                                  ;---------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : SetBad
  5259                                  ;
  5260                                  ; SetBad sets up info for bad functions
  5261                                  ;
  5262                                  ;---------------------------------------------------------------------------
  5263                                  
  5264                                  SetBad:
  5265                                  	;mov	ax,1
  5266 000006F0 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5267                                  
  5268                                  	; MSDOS 3.3
  5269                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5270                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5271                                  
  5272                                  ;	set up ds to point to DOSDATA
  5273                                  
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275                                  	; MSDOS 6.0
  5276 000006F3 1E                      	push	ds
  5277                                  
  5278                                  	;getdseg <ds>
  5279 000006F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5280                                  
  5281 000006F9 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5282                                  
  5283 000006FE 1F                      	pop	ds	  	;hkn; restore ds
  5284                                  
  5285 000006FF F9                      	STC
  5286 00000700 C3                      	retn
  5287                                  
  5288                                  ;--------------------------------------------------------------------------
  5289                                  ;
  5290                                  ; Procedure Name : BadCall
  5291                                  ;
  5292                                  ; BadCall is the initial routine for bad function calls
  5293                                  ;
  5294                                  ;--------------------------------------------------------------------------
  5295                                  
  5296                                  BadCall:
  5297 00000701 E8ECFF                  	call	SetBad
  5298 00000704 CB                      	retf
  5299                                  
  5300                                  ;--------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; OKCall always sets carry to off.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------
  5305                                  
  5306                                  OKCall:
  5307 00000705 F8                      	CLC
  5308 00000706 CB                      	retf
  5309                                  
  5310                                  ;---------------------------------------------------------------------------
  5311                                  ;
  5312                                  ; Procedure Name : INT2F
  5313                                  ;
  5314                                  ; INT 2F handler works as follows:
  5315                                  ;   PUSH    AX
  5316                                  ;   MOV     AX,multiplex:function
  5317                                  ;   INT     2F
  5318                                  ;   POP     ...
  5319                                  ; The handler itself needs to make the AX available for the various routines.
  5320                                  ;
  5321                                  ;----------------------------------------------------------------------------
  5322                                  
  5323                                  ; 15/05/2019 - Retro DOS v4.0
  5324                                  
  5325                                  ;KERNEL_SEGMENT equ 70h
  5326                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5327                                  DOSBIODATASEG equ 70h
  5328                                  
  5329                                  ; retrodos4.s - offset in BIOSDATA
  5330                                  bios_i2f equ 5
  5331                                  
  5332                                  ;PUBLIC	Int2F
  5333                                  ;INT2F	PROC	FAR
  5334                                  
  5335                                  ; 15/05/2019
  5336                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5337                                  
  5338                                  ; 04/11/2022
  5339                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5340                                  
  5341                                  	; 05/01/2024	
  5342                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5343                                  	; 18/07/2018 - Retro DOS v3.0
  5344                                  INT2F:
  5345                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5346                                  INT2FNT:
  5347                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5348 00000707 FB                      	STI
  5349                                  	;cmp	ah,11h
  5350 00000708 80FC11                  	CMP	AH,MultNET
  5351 0000070B 750A                    	JNZ	short INT2FSHR
  5352                                  TestInstall:
  5353 0000070D 08C0                    	OR	AL,AL
  5354 0000070F 7403                    	JZ	short Leave2F
  5355                                  BadFunc:
  5356 00000711 E8DCFF                  	CALL	SetBad
  5357                                  
  5358                                  	;entry	Leave2F
  5359                                  Leave2F:
  5360 00000714 CA0200                  	RETF	2			; long return + clear flags off stack
  5361                                  
  5362                                  INT2FSHR:
  5363                                  	;cmp	ah,10h
  5364 00000717 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5365 0000071A 74F1                    	JZ	short TestInstall	; yes, check for installation
  5366                                  INT2FNLS:
  5367                                  	;cmp	ah,14h
  5368 0000071C 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5369 0000071F 74EC                    	JZ	short TestInstall	; yes check for installation
  5370                                  INT2FDOS:
  5371                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5372                                  
  5373                                  	; 18/07/2018
  5374                                  	; MSDOS 3.3
  5375                                  	;;cmp	ah,12h	
  5376                                  	;CMP	AH,MultDOS
  5377                                  	;jz	short DispatchDOS
  5378                                  	;iret
  5379                                  
  5380                                  	; 15/05/2019
  5381                                  	; MSDOS 6.0
  5382                                  	;cmp	ah,12h	; 07/12/2022
  5383 00000721 80FC12                  	CMP	AH,MultDOS
  5384 00000724 7503                    	JNZ	short check_win		;check if win386 broadcast
  5385 00000726 E9F201                  	jmp	DispatchDOS
  5386                                  
  5387                                  	; .... win386 .... 
  5388                                  
  5389                                  check_win:
  5390                                  	;cmp	ah,16h
  5391 00000729 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5392 0000072C 7408                    	je	short Win386_Msg
  5393                                  
  5394                                  	; M044
  5395                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5396                                  	; of Windows. If so, do special action of going and saving last para
  5397                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5398                                  	; bug
  5399                                  
  5400 0000072E 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5401                                  	;jne	short next_i2f		; no, chain on
  5402                                  	; 15/12/2022
  5403                                  	;jmp	winold_swap		; yes, do desired action
  5404 00000731 7442                    	je	short winold_swap
  5405 00000733 E90501                  	jmp	next_i2f
  5406                                  
  5407                                  	; 15/12/2022
  5408                                  ;next_i2f:
  5409                                  ;	;;;jmp	bios_i2f
  5410                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5411                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5412                                  ;	; 04/11/2022
  5413                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5414                                  
  5415                                  ;	IRET				; This assume that we are at the head
  5416                                  					; of the list
  5417                                  ;INT2F	ENDP
  5418                                  
  5419                                  ; 15/05/2019 - Retro DOS v4.0
  5420                                  
  5421                                  ; We have received a message from Win386. There are three possible
  5422                                  ; messages we could get from Win386:
  5423                                  ;
  5424                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5425                                  ;		  to the Win386 startup info structure.
  5426                                  ; Exit		- for this, we clear the IsWin386 flag.
  5427                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5428                                  ;		  has already been handled. this is indicated by setting
  5429                                  ;		  CX to a non-zero value.
  5430                                  
  5431                                  Win386_Msg:
  5432 00000736 1E                      	push	ds
  5433                                  
  5434                                  	;getdseg <DS>			; ds is DOSDATA
  5435 00000737 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5436                                  
  5437                                  	; For WIN386 2.xx instance data
  5438                                  
  5439 0000073C 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5440 0000073E 7503                    	jne	short Win386_Msg_exit
  5441 00000740 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5442                                  Win386_Msg_exit:
  5443 00000743 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5444 00000745 7503                    	jne	short Win386_Msg_devcall
  5445 00000747 E92C01                  	jmp	Win386_Leaving
  5446                                  Win386_Msg_devcall:
  5447 0000074A 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5448 0000074C 7503                    	jne	short Win386_Msg_init
  5449 0000074E E96001                  	jmp	Win386_Query
  5450                                  Win386_Msg_init:
  5451 00000751 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5452 00000753 7403                    	je	short Win386_Starting
  5453 00000755 E9E200                  	jmp	win_nexti2f		; no, return
  5454                                  Win386_Starting:
  5455                                  	; 17/12/2022
  5456 00000758 F6C201                  	test	dl,1
  5457                                  	;test	dx,1			; is this really win386?
  5458 0000075B 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5459 0000075D E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5460                                  Win386_vchk:
  5461                                  	; M018 -- start of block changes
  5462                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5463                                  	; than 030Ah, we skip the VxD presence check
  5464                                  
  5465                                  ;M067 -- Begin changes
  5466                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5467                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5468                                  ;So, we null out the VxD ptr before the check.
  5469                                  
  5470                                  	;mov	word [Win386_Info+6],0
  5471 00000760 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5472                                  	;mov	word [Win386_Info+8],0
  5473 00000766 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5474                                  
  5475                                  ;M067 -- End changes
  5476                                  
  5477                                  ;ifdef JAPAN
  5478                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5479                                  ;else
  5480 0000076C 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5481                                  ;endif
  5482                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5483 00000770 724E                    	jb	short Win386_vxd
  5484 00000772 E9DD00                  	jmp	noVxD31
  5485                                  
  5486                                  	; 15/12/2022
  5487                                  winold_swap:
  5488 00000775 1E                      	push	ds
  5489 00000776 06                      	push	es
  5490 00000777 56                      	push	si
  5491 00000778 57                      	push	di
  5492 00000779 51                      	push	cx
  5493                                  
  5494                                  	;getdseg <ds>			;ds = DOSDATA
  5495 0000077A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5496                                  
  5497 0000077F 3C01                    	cmp	al,1			;swap Windows out call
  5498 00000781 751B                    	jne	short swapin		;no, check if Swap in call
  5499 00000783 E88801                  	call	getwinlast
  5500 00000786 1E                      	push	ds
  5501 00000787 07                      	pop	es
  5502 00000788 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5503 0000078A 31F6                    	xor	si,si
  5504 0000078C BF[0600]                	mov	di,WinoldPatch1
  5505 0000078F B90800                  	mov	cx,8
  5506 00000792 FC                      	cld
  5507 00000793 51                      	push	cx
  5508 00000794 F3A4                    	rep	movsb			;save first 8 bytes
  5509 00000796 59                      	pop	cx
  5510 00000797 BF[CD0D]                	mov	di,WinoldPatch2
  5511 0000079A F3A4                    	rep	movsb			;save next 8 bytes
  5512 0000079C EB1B                    	jmp	short winold_done
  5513                                  swapin:
  5514 0000079E 3C02                    	cmp	al,2			;swap Windows in call?
  5515 000007A0 7517                    	jne	short winold_done	;no, something else, pass it on
  5516 000007A2 E86901                  	call	getwinlast
  5517 000007A5 8EC6                    	mov	es,si
  5518 000007A7 31FF                    	xor	di,di
  5519 000007A9 BE[0600]                	mov	si,WinoldPatch1
  5520 000007AC B90800                  	mov	cx,8
  5521 000007AF FC                      	cld
  5522 000007B0 51                      	push	cx
  5523 000007B1 F3A4                    	rep	movsb			;restore first 8 bytes
  5524 000007B3 59                      	pop	cx
  5525 000007B4 BE[CD0D]                	mov	si,WinoldPatch2
  5526 000007B7 F3A4                    	rep	movsb			;restore next 8 bytes
  5527                                  winold_done:
  5528 000007B9 59                      	pop	cx
  5529 000007BA 5F                      	pop	di
  5530 000007BB 5E                      	pop	si
  5531 000007BC 07                      	pop	es
  5532 000007BD 1F                      	pop	ds
  5533 000007BE EB7B                    	jmp	short next_i2f		;chain on
  5534                                  	; 15/12/2022
  5535                                  	;jmp	next_i2f	
  5536                                  
  5537                                  Win386_vxd:
  5538 000007C0 50                      	push	ax
  5539 000007C1 53                      	push	bx
  5540 000007C2 51                      	push	cx
  5541 000007C3 52                      	push	dx
  5542 000007C4 56                      	push	si
  5543 000007C5 57                      	push	di			; save regs !!dont change order!!
  5544                                  
  5545 000007C6 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5546 000007CA 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5547 000007CD 741F                    	je	short Vxd31		; N: continue
  5548                                  					; Y: save arena associated with 
  5549                                  					;    umb_head
  5550                                  
  5551 000007CF C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5552                                  					; umb_arena
  5553 000007D4 1E                      	push	ds
  5554 000007D5 06                      	push	es
  5555                                  
  5556                                  	;mov	ax,ds
  5557                                  	;mov	es,ax			; es - > dosdata
  5558                                  	; 05/01/2024
  5559 000007D6 1E                      	push	ds
  5560 000007D7 07                      	pop	es
  5561                                  
  5562 000007D8 8EDB                    	mov	ds,bx
  5563 000007DA 31F6                    	xor	si,si			; ds:si -> umb_head
  5564                                  
  5565 000007DC FC                      	cld
  5566                                  
  5567 000007DD BF[FA11]                	mov	di,UmbSave1
  5568 000007E0 B90B00                  	mov	cx,11
  5569 000007E3 F3A4                    	rep	movsb
  5570                                  
  5571 000007E5 BF[D50D]                	mov	di,UmbSave2
  5572                                  	;mov	cx,5
  5573                                  	; 18/12/2022
  5574 000007E8 B105                    	mov	cl,5
  5575 000007EA F3A4                    	rep	movsb	
  5576                                  
  5577 000007EC 07                      	pop	es
  5578 000007ED 1F                      	pop	ds			; M062 - End
  5579                                  
  5580                                  Vxd31:
  5581                                  	;test	byte [DOS_FLAG],2
  5582 000007EE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5583 000007F3 7408                    	jz	short Dont_Supress		; M066
  5584 000007F5 5F                      	pop	di				; M066
  5585 000007F6 5E                      	pop	si				; M066
  5586 000007F7 5A                      	pop	dx				; M066
  5587 000007F8 59                      	pop	cx				; M066
  5588 000007F9 5B                      	pop	bx				; M066
  5589 000007FA 58                      	pop	ax				; M066
  5590 000007FB EB55                    	jmp	short noVxD31			; M066
  5591                                  
  5592                                  	; We check here if the VxD is available in the root of the boot drive. 
  5593                                  	; We do an extended open to suppress any error messages
  5594                                  	
  5595                                  Dont_Supress:
  5596 000007FD A0[6900]                	mov	al,[BOOTDRIVE]
  5597 00000800 0440                    	add	al,'A' - 1		; get drive letter
  5598 00000802 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5599                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5600                                  	;mov	al,0			; no extended attributes
  5601                                  	; 18/12/2022
  5602 00000805 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5603 00000808 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5604                                  					; no inherit, suppress crit err
  5605 0000080B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5606 0000080E BA0100                  	mov	dx,1			; fail if file does not exist
  5607 00000811 BE[3110]                	mov	si,VxDpath	
  5608                                  					; path of VxD file
  5609 00000814 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5610                                  
  5611 00000817 CD21                    	int	21h			; do extended open
  5612                                  
  5613 00000819 5F                      	pop	di
  5614 0000081A 5E                      	pop	si
  5615 0000081B 5A                      	pop	dx
  5616 0000081C 59                      	pop	cx
  5617                                  
  5618 0000081D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5619                                  
  5620                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5621                                  	; to indicate error to Windows after displaying message to user that 
  5622                                  	; VxD needs to be present to run Windows in enhanced mode.
  5623                                  
  5624 0000081F 52                      	push	dx
  5625 00000820 1E                      	push	ds
  5626 00000821 56                      	push	si
  5627 00000822 BE[B709]                	mov	si,NoVxDErrMsg
  5628 00000825 0E                      	push	cs
  5629 00000826 1F                      	pop	ds
  5630 00000827 B96300                  	mov	cx,VxDMesLen ; 99	;
  5631 0000082A B402                    	mov	ah,2			; write char to console
  5632 0000082C FC                      	cld
  5633                                  vxdlp:
  5634 0000082D AC                      	lodsb
  5635 0000082E 86D0                    	xchg	dl,al			; get char in dl
  5636 00000830 CD21                    	int	21h
  5637 00000832 E2F9                    	loop	vxdlp
  5638                                  
  5639 00000834 5E                      	pop	si
  5640 00000835 1F                      	pop	ds
  5641 00000836 5A                      	pop	dx
  5642 00000837 5B                      	pop	bx
  5643 00000838 58                      	pop	ax			;all registers restored
  5644 00000839 41                      	inc	cx			;cx != 0 to indicate error
  5645                                  	; 15/12/22022
  5646                                  	;jmp	win_nexti2f		;chain on
  5647                                  	;jmp	short win_nexti2f
  5648                                  
  5649                                  	; 15/12/2022
  5650                                  win_nexti2f:
  5651 0000083A 1F                      	pop	ds
  5652                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5653                                  	; 15/12/2022
  5654                                  next_i2f:
  5655                                  	;;;jmp	bios_i2f
  5656                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5657                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5658                                  	; 04/11/2022
  5659 0000083B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5660                                  
  5661                                  VxDthere:
  5662 00000840 89C3                    	mov	bx,ax
  5663 00000842 B43E                    	mov	ah,CLOSE ; 3Eh
  5664 00000844 CD21                    	int	21h			;close the file
  5665                                  
  5666                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5667                                  
  5668                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5669                                  	;mov	bx,Win386_Info
  5670                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5671                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5672                                  	; 15/12/2022
  5673 00000846 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5674 0000084C 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5675                                  
  5676 00000850 5B                      	pop	bx
  5677 00000851 58                      	pop	ax
  5678                                  noVxD31:
  5679                                  	; M018; End of block changes
  5680                                  
  5681 00000852 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5682 00000857 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5683                                  
  5684                                  	; M002;
  5685                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5686                                  
  5687 0000085C 52                      	push	dx			; M002
  5688 0000085D 89DA                    	mov	dx,bx			; M002
  5689                                  					; point ES:BX to Win386_Info ; M002
  5690 0000085F BB[E20F]                	mov	bx,Win386_Info 
  5691 00000862 895702                  	mov	[bx+2],dx		; M002
  5692 00000865 8C4704                  	mov	[bx+4],es		; M002
  5693 00000868 5A                      	pop	dx			; M002
  5694 00000869 1E                      	push	ds			; M002
  5695 0000086A 07                      	pop	es			; M002
  5696                                  	;jmp	win_nexti2f		; M002
  5697                                  	; 15/12/2022
  5698 0000086B EBCD                    	jmp	short win_nexti2f
  5699                                  
  5700                                  	; 15/12/2022
  5701                                  	; Code to return Win386 2.xx instance table
  5702                                  OldWin386Init:
  5703 0000086D 58                      	pop	ax			; discard ds pushed on stack
  5704 0000086E BE[CD11]                	mov	si,OldInstanceJunk 
  5705                                  					; ds:si = instance table
  5706 00000871 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5707                                  	;jmp	next_i2f
  5708                                  	; 15/12/2022
  5709 00000874 EBC5                    	jmp	short next_i2f
  5710                                  
  5711                                  Win386_Leaving:
  5712                                  	; 15/12/2022
  5713 00000876 F6C201                  	test 	dl,1
  5714                                  	;test	dx,1			; is this really win386?
  5715                                  	;jz	short Win386_Leaving_c
  5716                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5717                                  	; 15/12/2022
  5718 00000879 75BF                    	jnz	short win_nexti2f	
  5719                                  
  5720                                  Win386_Leaving_c:
  5721                                  					; M062 - Start
  5722 0000087B 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5723                                  					;    up.
  5724 00000880 7523                    	jne	short noumb		; N: not saved 
  5725 00000882 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5726                                  					;    previously saved umb_head
  5727                                  	; 05/01/2024
  5728                                  	;push	ax ; (not necessary)
  5729 00000887 06                      	push	es
  5730 00000888 51                      	push	cx
  5731 00000889 56                      	push	si
  5732 0000088A 57                      	push	di
  5733                                  
  5734                                  	;mov	ax,[UMB_HEAD]
  5735                                  	;mov	es,ax
  5736                                  	; 05/01/2024
  5737 0000088B 8E06[8C00]              	mov	es,[UMB_HEAD]
  5738 0000088F 31FF                    	xor	di,di			; es:di -> umb_head
  5739                                  
  5740 00000891 FC                      	cld
  5741                                  
  5742 00000892 BE[FA11]                	mov	si,UmbSave1
  5743 00000895 B90B00                  	mov	cx,11
  5744 00000898 F3A4                    	rep	movsb
  5745 0000089A BE[D50D]                	mov	si,UmbSave2
  5746                                  	;mov	cx,5
  5747                                  	; 18/12/2022
  5748 0000089D B105                    	mov	cl,5
  5749 0000089F F3A4                    	rep	movsb
  5750                                  
  5751 000008A1 5F                      	pop	di
  5752 000008A2 5E                      	pop	si
  5753 000008A3 59                      	pop	cx
  5754 000008A4 07                      	pop	es
  5755                                  	; 05/01/2024
  5756                                  	;pop	ax
  5757                                  noumb:					; M062 - End
  5758 000008A5 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5759 000008AA 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5760 000008AF EB89                    	jmp	short win_nexti2f
  5761                                  
  5762                                  ;	; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  Win386_Query:
  5774 000008B1 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5775 000008B4 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5776 000008B6 09C9                    	or	cx,cx			; is it an instance query?
  5777 000008B8 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5778 000008BA 41                      	inc	cx			; indicate that data is instanced
  5779                                  ;
  5780                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5781                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5782                                  ; M001;  
  5783                                  ; M001; OFFSETS STRUC
  5784                                  ; M001; 	Major_version	db	?
  5785                                  ; M001; 	Minor_version	db	?
  5786                                  ; M001; 	SaveDS		dw	?
  5787                                  ; M001; 	SaveBX		dw	?
  5788                                  ; M001; 	Indos		dw	?
  5789                                  ; M001; 	User_id		dw	?
  5790                                  ; M001; 	CritPatch	dw	?
  5791                                  ; M001; OFFSETS	ENDS
  5792                                  ; M001; 
  5793                                  ; M001; User_Id is the only variable really important for proper functioning  
  5794                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5795                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5796                                  ; M001; pass this table because Win386 depends on this table to get the 
  5797                                  ; M001; User_Id offset.
  5798                                  ; M001; 
  5799 000008BB BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5800 000008BE 1E                      	push	ds			; M001
  5801 000008BF 07                      	pop	es			; es:bx points at offset table ; M001
  5802 000008C0 EB40                    	jmp	short PopIret		; M001
  5803                                  
  5804                                  ; 15/12/2022
  5805                                  ;	; Code to return Win386 2.xx instance table
  5806                                  ;OldWin386Init:
  5807                                  ;	pop	ax			; discard ds pushed on stack
  5808                                  ;	mov	si,OldInstanceJunk 
  5809                                  ;					; ds:si = instance table
  5810                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5811                                  ;	;jmp	next_i2f
  5812                                  ;	; 15/12/2022
  5813                                  ;	jmp	short _next_i2f
  5814                                  
  5815                                  dosmgr_func:
  5816 000008C2 49                      	dec	cx
  5817 000008C3 7435                    	jz	short win386_patch	; call to patch DOS
  5818 000008C5 49                      	dec	cx
  5819 000008C6 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5820 000008C8 49                      	dec	cx
  5821 000008C9 7439                    	jz	short win386_size	; get size of DOS data structures
  5822 000008CB 49                      	dec	cx
  5823 000008CC 7428                    	jz	short win386_inst	; instance more data
  5824                                  	;dec	cx
  5825                                  	;jnz	short PopIret		; no functions above this
  5826                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5827 000008CE E232                    	loop	PopIret
  5828                                  
  5829                                  	; Get DOS device driver size -- es:di points at device driver header
  5830                                  	; In DOS 4.x, the para before the device header contains an arena 
  5831                                  	; header for the driver.
  5832                                  
  5833 000008D0 8CC0                    	mov	ax,es			; ax = device header segment
  5834                                  
  5835                                  	; We check to see if we have a memory arena for this device driver. 
  5836                                  	; The way to do this would be to look at the previous para to see if
  5837                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5838                                  	; in the arena is the same as the device header segment. These two 
  5839                                  	; checks together should take care of all cases
  5840                                  
  5841 000008D2 48                      	dec	ax			; get arena header
  5842 000008D3 06                      	push	es
  5843 000008D4 8EC0                    	mov	es,ax			; arena header for device driver
  5844                                  
  5845 000008D6 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5846 000008DA 7517                    	jnz	short cantsize		; no, cant size this driver
  5847 000008DC 40                      	inc	ax			; get back device header segment
  5848 000008DD 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5849 000008E1 7510                    	jnz	short cantsize		; no, not a proper arena
  5850                                  
  5851 000008E3 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5852 000008E7 07                      	pop	es
  5853                                  
  5854                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5855                                  	; Speed is not critical and so we choose the shortest method 
  5856                                  	; -- use "mul"
  5857                                  
  5858 000008E8 BB1000                  	mov	bx,16
  5859 000008EB F7E3                    	mul	bx
  5860 000008ED 89C1                    	mov	cx,ax
  5861 000008EF 89D3                    	mov	bx,dx
  5862 000008F1 EB09                    	jmp	short win386_done	; return with device driver size
  5863                                  cantsize:
  5864 000008F3 07                      	pop	es
  5865 000008F4 31C0                    	xor	ax,ax
  5866                                  win386_inst:	; 05/01/2024
  5867 000008F6 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5868 000008F8 EB08                    	jmp	short PopIret		; return
  5869                                  
  5870                                  win386_patch:
  5871                                  	; dx contains bits marking the patches to be applied. We return 
  5872                                  	; the field with all bits set to indicate that all patches have been
  5873                                  	; done
  5874                                  
  5875 000008FA 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5876                                   	;jmp	short win386_done	; done, return
  5877                                  	; 15/12/2022
  5878                                  	; 15/12/2022
  5879                                  win386_done:
  5880 000008FC B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5881 000008FF BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5882                                  PopIret:
  5883 00000902 1F                      	pop	ds
  5884 00000903 CF                      	iret	
  5885                                  
  5886                                  win386_size:
  5887                                  	; Return the size of DOS data structures -- currently only CDS size
  5888                                  
  5889                                  	; 17/12/2022
  5890 00000904 F6C201                  	test	dl,1
  5891                                  	;test	dx,1			; check for CDS size bit
  5892 00000907 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5893                                  
  5894 00000909 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5895 0000090C EBEE                    	jmp	short win386_done	; return with the size
  5896                                  
  5897                                  ; 05/01/2024
  5898                                  %if 0
  5899                                  win386_inst:
  5900                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5901                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5902                                  	; this by returning a status of not previously instanced. The basic
  5903                                  	; structure of these things have not changed and so the current
  5904                                  	; DOSMGR code should be able to work it out
  5905                                  
  5906                                  	xor	dx,dx			; make sure dx has a not done value
  5907                                  	jmp	short PopIret		; skip done indication
  5908                                  %endif
  5909                                  
  5910                                  	; 15/12/2022
  5911                                  ;win386_done:
  5912                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5913                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5914                                  ;PopIret:
  5915                                  ;	pop	ds
  5916                                  ;	iret				; return back up the chain
  5917                                  
  5918                                  	; 15/12/2022
  5919                                  ;win_nexti2f:
  5920                                  	;pop	ds
  5921                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5922                                  
  5923                                  ;End WIN386 support
  5924                                  
  5925                                  ; 15/05/2019
  5926                                  
  5927                                  ;M044; Start of changes
  5928                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5929                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5930                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5931                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5932                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5933                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5934                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5935                                  ; last para of the Windows memory block and then restore this para on the
  5936                                  ; Windows swapin callout. 
  5937                                  
  5938                                  getwinlast:
  5939                                  	; 07/12/2022
  5940 0000090E 8B36[3003]              	mov	si,[CurrentPDB]
  5941 00000912 4E                      	dec	si
  5942 00000913 8EC6                    	mov	es,si
  5943 00000915 2603360300              	add	si,[es:3]
  5944 0000091A C3                      	retn
  5945                                  
  5946                                  ; 15/12/2022
  5947                                  %if 0
  5948                                  winold_swap:
  5949                                  	push	ds
  5950                                  	push	es
  5951                                  	push	si
  5952                                  	push	di
  5953                                  	push	cx
  5954                                  
  5955                                  	;getdseg <ds>			;ds = DOSDATA
  5956                                  	mov	ds,[cs:DosDSeg]
  5957                                  
  5958                                  	cmp	al,1			;swap Windows out call
  5959                                  	jne	short swapin		;no, check if Swap in call
  5960                                  	call	getwinlast
  5961                                  	push	ds
  5962                                  	pop	es
  5963                                  	mov	ds,si			;ds = memory arena of Windows
  5964                                  	xor	si,si
  5965                                  	mov	di,WinoldPatch1
  5966                                  	mov	cx,8
  5967                                  	cld
  5968                                  	push	cx
  5969                                  	rep	movsb			;save first 8 bytes
  5970                                  	pop	cx
  5971                                  	mov	di,WinoldPatch2
  5972                                  	rep	movsb			;save next 8 bytes
  5973                                  	jmp	short winold_done
  5974                                  swapin:
  5975                                  	cmp	al,2			;swap Windows in call?
  5976                                  	jne	short winold_done	;no, something else, pass it on
  5977                                  	call	getwinlast
  5978                                  	mov	es,si
  5979                                  	xor	di,di
  5980                                  	mov	si,WinoldPatch1
  5981                                  	mov	cx,8
  5982                                  	cld
  5983                                  	push	cx
  5984                                  	rep	movsb			;restore first 8 bytes
  5985                                  	pop	cx
  5986                                  	mov	si,WinoldPatch2
  5987                                  	rep	movsb			;restore next 8 bytes
  5988                                  winold_done:
  5989                                  	pop	cx
  5990                                  	pop	di
  5991                                  	pop	si
  5992                                  	pop	es
  5993                                  	pop	ds
  5994                                  	jmp	next_i2f		;chain on
  5995                                  
  5996                                  %endif
  5997                                  
  5998                                  ;M044; End of changes
  5999                                  
  6000                                  ; 15/05/2019
  6001                                  
  6002                                  DispatchDOS:
  6003 0000091B 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6004 00000920 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6005 00000925 50                      	PUSH	AX			; push index
  6006 00000926 55                      	PUSH	BP
  6007 00000927 89E5                    	MOV	BP,SP
  6008                                  		; stack looks like:
  6009                                  		;   0	BP
  6010                                  		;   2	DISPATCH
  6011                                  		;   4	TABLE
  6012                                  		;   6	RETURN
  6013                                  		;   8	LONG-RETURN
  6014                                  		;   C	FLAGS
  6015                                  		;   E	AX
  6016                                  	
  6017 00000929 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6018 0000092C 5D                      	POP	BP
  6019 0000092D E8F508                  	call	TableDispatch
  6020 00000930 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6021                                  
  6022                                  INT2F_etcetera:
  6023                                  	;entry	DosGetGroup
  6024                                  DosGetGroup:
  6025                                  	; MSDOS 3.3
  6026                                  	;push	cs
  6027                                  	;pop	ds
  6028                                  	;retn
  6029                                  
  6030                                  	; MSDOS 6.0
  6031                                  ;SR; Cannot use CS now
  6032                                  ;
  6033                                  ;	PUSH	CS
  6034                                  ;	POP	DS
  6035                                  
  6036                                  	; 04/11/2022
  6037                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6038                                  
  6039                                  	;getdseg <ds>
  6040 00000933 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6041 00000938 C3                      	retn
  6042                                  
  6043                                  	;entry	DOSInstall
  6044                                  DOSInstall:
  6045 00000939 B0FF                    	MOV	AL,0FFh
  6046 0000093B C3                      	retn
  6047                                  
  6048                                  ;ENDIF ; (*)
  6049                                  
  6050                                  
  6051                                  ; 15/05/2019 - Retro DOS v4.0
  6052                                  
  6053                                  ;------------------------------------------------------------------------
  6054                                  ;
  6055                                  ; Procedure Name : RW32_CONVERT
  6056                                  ;
  6057                                  ;Input: same as ABSDRD and ABSDWRT
  6058                                  ;	 ES:BP -> DPB
  6059                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6060                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6061                                  ;	 carry clear, parms ok
  6062                                  ;
  6063                                  ;------------------------------------------------------------------------
  6064                                  
  6065                                  	; 06/01/2024
  6066                                  RW32_CONVERT:
  6067 0000093C 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6068 0000093F 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6069 00000941 49                      	dec	cx ; *
  6070 00000942 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6071 00000943 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6072 00000944 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6073 00000948 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6074 0000094C 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6075 0000094F 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6076                                  	;INC	DL			;>32mb			;AN000;
  6077                                  	; 17/12/2022
  6078 00000951 42                      	inc	dx
  6079 00000952 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6080 00000954 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6081 00000956 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6082                                  letold:
  6083 00000958 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6084 00000959 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6085 0000095A 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6086                                  
  6087 0000095C 1E                      	push	ds
  6088                                  	;getdseg <ds>
  6089 0000095D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6090 00000962 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6091 00000968 1F                      	pop	ds
  6092                                  
  6093 00000969 F9                      	STC				;>32mb			;AN000;
  6094 0000096A C3                      	retn				;>32mb			;AN000;
  6095                                  
  6096                                  new32format:
  6097                                  	;mov	dx,[bx+2]
  6098 0000096B 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6099                                  
  6100 0000096E 1E                      	push	ds			; set up ds to DOSDATA
  6101                                  	;getdseg <ds>
  6102 0000096F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6103 00000974 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6104 00000978 1F                      	pop	ds
  6105                                  
  6106 00000979 8B17                    	mov	dx,[bx]
  6107                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6108                                  	;mov	cx,[bx+4]
  6109 0000097B 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6110                                  	;lds	bx,[bx+6]
  6111 0000097E C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6112                                  old_style:				;>32mb			;AN000;
  6113                                  	; 06/01/2024
  6114                                  	; cf=0
  6115                                  	;CLC				;>32mb			;AN000;
  6116 00000981 C3                      	retn				;>32mb			;AN000;
  6117                                  
  6118                                  ;------------------------------------------------------------------------
  6119                                  ;
  6120                                  ; Procedure Name : Fastxxx_Purge
  6121                                  ;
  6122                                  ; Input: None
  6123                                  ; Functions: Purge Fastopen/ Cache Buffers
  6124                                  ; Output: None
  6125                                  ;
  6126                                  ;------------------------------------------------------------------------
  6127                                  
  6128                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6129                                  
  6130                                  Fastxxx_Purge:
  6131 00000982 50                      	PUSH	AX			; save regs.	;AN000;
  6132 00000983 56                      	PUSH	SI						;AN000;
  6133 00000984 52                      	PUSH	DX						;AN000;
  6134                                  topen:
  6135 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6136                                  	;getdseg <ds>
  6137 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6138                                  
  6139 0000098B F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6140                                  					; fastopen installed ?	;AN000;
  6141 00000990 1F                      	pop	ds
  6142 00000991 740B                    	JZ	short nofast		; no			;AN000;
  6143 00000993 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6144                                  dofast:
  6145 00000995 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6146                                  	;;mov	dl,[es:bp+0]
  6147                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6148                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6149                                  	; 15/12/2022
  6150 00000997 268A5600                	mov	dl,[es:bp]
  6151                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6152 0000099B E80A1D                  	call	Fast_Dispatch
  6153                                  nofast:
  6154 0000099E 5A                      	POP	DX						;AN000;
  6155 0000099F 5E                      	POP	SI			; restore regs		;AN000;
  6156 000009A0 58                      	POP	AX			 			;AN000;
  6157 000009A1 C3                      	retn				; exit
  6158                                  
  6159                                  ;============================================================================
  6160                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6161                                  ;============================================================================
  6162                                  ; 29/04/2019 - Retro DOS v4.0
  6163                                  
  6164                                  ;include dossym.inc
  6165                                  ;include dosmac.inc
  6166                                  ;include doscntry.inc
  6167                                  
  6168                                  ; DOSCODE Segment
  6169                                  
  6170                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6171                                  ; ---------------------------------------------------------------------------
  6172                                  ;include divmes.inc
  6173                                  
  6174                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6175                                  ; -------------------------------------
  6176                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6177                                  
  6178                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6179                                  	;PUBLIC	DIVMES
  6180                                  
  6181 000009A2 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6181 000009AB 6F766572666C6F770D-
  6181 000009B4 0A                 
  6182                                  
  6183                                  	;PUBLIC	DivMesLen
  6184                                  DivMesLen:
  6185 000009B5 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6186                                  
  6187                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6188                                  ; -------------------------------------
  6189                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6190                                  
  6191                                  ; (MSDOS 6.0)
  6192                                  ; VxD not found error message
  6193                                  
  6194                                  NoVxDErrMsg:
  6195 000009B7 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6195 000009C0 686176652074686520-
  6195 000009C9 66696C652057494E41-
  6195 000009D2 32302E33383620696E-
  6195 000009DB 2074686520726F6F74-
  6195 000009E4 206F6620796F757220-
  6195 000009ED 626F6F742064726976-
  6195 000009F6 65                 
  6196 000009F7 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6196 00000A00 57696E646F77732069-
  6196 00000A09 6E20456E68616E6365-
  6196 00000A12 64204D6F64650D0A   
  6197                                  
  6198                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6199                                  
  6200                                  ; 13/05/2019 - Retro DOS v4.0
  6201                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6202                                  
  6203                                  ;include yesno.asm  (MNSDOS 6.0)
  6204                                  ; -------------------------------------
  6205                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6206                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6207                                  
  6208                                  ; This is for country Yes and No
  6209                                  
  6210 00000A1A 59                      NLS_YES:	db 'Y'
  6211 00000A1B 4E                      NLS_NO:		db 'N'
  6212 00000A1C 79                      NLS_yes2:	db 'y'
  6213 00000A1D 6E                      NLS_no2:	db 'n'
  6214                                  
  6215                                  ; ---------------------------------------------------------------------------
  6216                                  
  6217                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6219                                  
  6220                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6221                                  
  6222                                  ; The following two tables implement the current buffered input editing
  6223                                  ; routines. The tables are pairwise associated in reverse order for ease
  6224                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6225                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6226                                  
  6227                                  	;PUBLIC	CANCHAR
  6228                                  CANCHAR:
  6229 00000A1E 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6230                                  	
  6231                                  	;PUBLIC	ESCCHAR
  6232                                  ESCCHAR:
  6233 00000A1F 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6234                                  	
  6235                                  	;IF	NOT Rainbow
  6236                                  
  6237                                  ESCTAB:	; LABEL BYTE
  6238                                  
  6239                                  	;IF	IBM
  6240 00000A20 40                      	DB	64		; Ctrl-Z - F6
  6241 00000A21 4D                      	DB	77		; Copy one char - -->
  6242 00000A22 3B                      	DB	59		; Copy one char - F1
  6243 00000A23 53                      	DB	83		; Skip one char - DEL
  6244 00000A24 3C                      	DB	60		; Copy to char - F2
  6245 00000A25 3E                      	DB	62		; Skip to char - F4
  6246 00000A26 3D                      	DB	61		; Copy line - F3
  6247 00000A27 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6248 00000A28 3F                      	DB	63		; Reedit line (new template) - F5
  6249 00000A29 4B                      	DB	75		; Backspace - <--
  6250 00000A2A 52                      	DB	82		; Enter insert mode - INS (toggle)
  6251 00000A2B 52                      	DB	82		; Exit insert mode - INS (toggle)
  6252 00000A2C 41                      	DB	65		; Escape character - F7
  6253 00000A2D 41                      	DB	65		; End of table
  6254                                  	;ENDIF
  6255                                  
  6256                                  ESCEND: ; LABEL BYTE
  6257                                  
  6258                                  ESCTABLEN EQU ESCEND-ESCTAB
  6259                                  
  6260                                  ESCFUNC: ; LABEL WORD
  6261                                  	
  6262 00000A2E [1A14]                  	short_addr  GETCH	; Ignore the escape sequence
  6263 00000A30 [9714]                  	short_addr  TWOESC
  6264 00000A32 [8C15]                  	short_addr  EXITINS
  6265 00000A34 [8C15]                  	short_addr  ENTERINS
  6266 00000A36 [9214]                  	short_addr  BACKSP
  6267 00000A38 [7815]                  	short_addr  REEDIT
  6268 00000A3A [7F14]                  	short_addr  KILNEW
  6269 00000A3C [0E15]                  	short_addr  COPYLIN
  6270 00000A3E [4015]                  	short_addr  SKIPSTR
  6271 00000A40 [1415]                  	short_addr  COPYSTR
  6272 00000A42 [3715]                  	short_addr  SKIPONE
  6273 00000A44 [1915]                  	short_addr  COPYONE
  6274 00000A46 [1915]                  	short_addr  COPYONE
  6275 00000A48 [9315]                  	short_addr  CTRLZ
  6276                                  
  6277                                  	;ENDIF
  6278                                  
  6279                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6280                                  ; ---------------------------------------------------------------------------
  6281                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6282                                  
  6283                                  ; OEMFunction key is expected to process a single function
  6284                                  ;   key input from a device and dispatch to the proper
  6285                                  ;   routines leaving all registers UNTOUCHED.
  6286                                  ;
  6287                                  ; Inputs:   CS, SS are DOSGROUP
  6288                                  ; Outputs:  None. This function is expected to JMP to onw of
  6289                                  ;           the following labels:
  6290                                  ;
  6291                                  ;           GetCh       - ignore the sequence
  6292                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6293                                  ;           ExitIns     - toggle insert mode
  6294                                  ;           EnterIns    - toggle insert mode
  6295                                  ;           BackSp      - move backwards one space
  6296                                  ;           ReEdit      - reedit the line with a new template
  6297                                  ;           KilNew      - discard the current line and start from scratch
  6298                                  ;           CopyLin     - copy the rest of the template into the line
  6299                                  ;           SkipStr     - read the next character and skip to it in the template
  6300                                  ;           CopyStr     - read next char and copy from template to line until char
  6301                                  ;           SkipOne     - advance position in template one character
  6302                                  ;           CopyOne     - copy next character in template into line
  6303                                  ;           CtrlZ       - place a ^Z into the template
  6304                                  ; Registers that are allowed to be modified by this function are:
  6305                                  ;           AX, CX, BP
  6306                                  
  6307                                  ; 13/05/2019 - Retro DOS v4.0
  6308                                  ; -------------------------------------
  6309                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6310                                  
  6311                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6314                                  
  6315                                  OEMFunctionKey:
  6316 00000A4A E82F09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6317 00000A4D B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6318 00000A4F 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6319 00000A50 BF[200A]                	MOV     DI,ESCTAB		; offset of second byte table
  6320 00000A53 06                      	push	es
  6321 00000A54 0E                      	push	cs
  6322 00000A55 07                      	pop	es
  6323 00000A56 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6324 00000A58 07                      	pop	es
  6325 00000A59 5F                      	POP     DI                      ; restore DI
  6326 00000A5A D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6327 00000A5C 89CD                    	MOV     BP,CX                   ; move to indexable register
  6328                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6329 00000A5E 2EFFA6[2E0A]            	JMP	word [CS:BP+ESCFUNC]
  6330                                  
  6331                                  ;DOSCODE ENDS
  6332                                  	
  6333                                  ;============================================================================
  6334                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6335                                  ;============================================================================
  6336                                  ; Retro DOS v3.0 - 18/07/2018
  6337                                  
  6338                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6339                                  ;----------------------------------------------------------------------------
  6340                                  ; Retro DOS v2.0 - 13/03/2018
  6341                                  
  6342                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6343                                  
  6344                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6345                                  
  6346                                  ;**	$GET_DATE - Get Current Date
  6347                                  ;----------------------------------------
  6348                                  ;	ENTRY	none
  6349                                  ;	EXIT	(cx:dx) = current date
  6350                                  ;	USES	all
  6351                                  
  6352                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6353                                  
  6354                                  _$GET_DATE:	;System call 42
  6355                                  
  6356 00000A63 16                      	PUSH	SS
  6357 00000A64 1F                      	POP	DS
  6358 00000A65 E8B700                  	CALL	READTIME	;Check for rollover to next day
  6359 00000A68 A1[5203]                	MOV	AX,[YEAR]
  6360                                  
  6361                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6362                                  
  6363 00000A6B 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6364 00000A6F E813FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6365                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6366 00000A72 895C06                  	MOV	[SI+user_env.user_DX],BX
  6367 00000A75 05BC07                  	ADD	AX,1980		;Put bias back
  6368                                  	;MOV	[SI+4],AX	;CX=year
  6369 00000A78 894404                  	MOV	[SI+user_env.user_CX],AX
  6370 00000A7B 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6371                                  RET20:	; 05/11/2022
  6372                                  RET24:	; 18/12/2022
  6373 00000A7F C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_DATE - Set Current Date
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = current date
  6378                                  ;	EXIT	(al) = -1 iff bad date
  6379                                  ;		(al) = 0 if ok
  6380                                  ;	USES	all
  6381                                  
  6382                                  _$SET_DATE:	;System call 43
  6383                                  
  6384 00000A80 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6385 00000A82 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6386                                  	;JC	SHORT RET24	;Error if not big enough
  6387                                  	; 05/11/2022
  6388 00000A86 72F7                    	jc	short RET20
  6389 00000A88 83F977                  	CMP	CX,119		;Year must be less than 2100
  6390 00000A8B 77F2                    	JA	SHORT RET24
  6391 00000A8D 08F6                    	OR	DH,DH
  6392                                  	;JZ	SHORT RET24
  6393                                   	; 05/11/2022
  6394 00000A8F 74EE                    	jz	short RET20
  6395 00000A91 08D2                    	OR	DL,DL
  6396                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6397                                  	; 05/11/2022
  6398 00000A93 74EA                    	jz	short RET20
  6399 00000A95 80FE0C                  	CMP	DH,12		;Check against max. month
  6400 00000A98 77E5                    	JA	SHORT RET24
  6401 00000A9A 16                      	PUSH	SS
  6402 00000A9B 1F                      	POP	DS
  6403                                  	;CALL	DODATE
  6404                                  	; 18/12/2022
  6405 00000A9C E91301                  	jmp	DODATE
  6406                                  ;RET24:  
  6407                                  	;RETN
  6408                                  
  6409                                  ;**	$GET_TIME - Get Current Time
  6410                                  ;----------------------------------------
  6411                                  ;	ENTRY	none
  6412                                  ;	EXIT	(cx:dx) = current time
  6413                                  ;	USES	all
  6414                                  
  6415                                  _$GET_TIME:			;System call 44
  6416                                  
  6417 00000A9F 16                      	PUSH	SS
  6418 00000AA0 1F                      	POP	DS
  6419 00000AA1 E87B00                  	CALL	READTIME
  6420 00000AA4 E8DEF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6421                                  	;MOV	[SI+6],DX
  6422 00000AA7 895406                  	MOV	[SI+user_env.user_DX],DX
  6423                                  	;MOV	[SI+4],CX
  6424 00000AAA 894C04                  	MOV	[SI+user_env.user_CX],CX
  6425                                  set_time_ok:	; 06/01/2024
  6426 00000AAD 30C0                    	XOR	AL,AL
  6427                                  RET26:  
  6428 00000AAF C3                      	RETN
  6429                                  
  6430                                  ;**	$SET_TIME - Set Current Time
  6431                                  ;----------------------------------------
  6432                                  ;	ENTRY	(cx:dx) = time
  6433                                  ;	EXIT	(al) = 0 if 0k
  6434                                  ;		(al) = -1 if invalid
  6435                                  ;	USES	ALL
  6436                                  
  6437                                  _$SET_TIME:			;System call 45
  6438                                  
  6439 00000AB0 B0FF                    	MOV	AL,-1		;Flag in case of error
  6440 00000AB2 80FD18                  	CMP	CH,24		;Check hours
  6441 00000AB5 73F8                    	JAE	SHORT RET26
  6442 00000AB7 80F93C                  	CMP	CL,60		;Check minutes
  6443 00000ABA 73F3                    	JAE	SHORT RET26
  6444 00000ABC 80FE3C                  	CMP	DH,60		;Check seconds
  6445 00000ABF 73EE                    	JAE	SHORT RET26
  6446 00000AC1 80FA64                  	CMP	DL,100		;Check 1/100's
  6447 00000AC4 73E9                    	JAE	SHORT RET26
  6448 00000AC6 51                      	PUSH	CX
  6449 00000AC7 52                      	PUSH	DX
  6450 00000AC8 16                      	PUSH	SS
  6451 00000AC9 1F                      	POP	DS
  6452 00000ACA BB[B603]                	MOV	BX,TIMEBUF
  6453 00000ACD B90600                  	MOV	CX,6
  6454                                  	;XOR	DX,DX
  6455                                  	;MOV	AX,DX
  6456 00000AD0 31C0                    	xor	ax,ax
  6457 00000AD2 99                      	cwd	; 06/01/2024
  6458 00000AD3 53                      	PUSH	BX
  6459 00000AD4 E8913B                  	CALL	SETREAD
  6460 00000AD7 1E                      	PUSH	DS
  6461 00000AD8 C536[2E00]              	LDS	SI,[BCLOCK]
  6462 00000ADC E8133B                  	CALL	DEVIOCALL2	;Get correct day count
  6463 00000ADF 1F                      	POP	DS
  6464 00000AE0 5B                      	POP	BX
  6465 00000AE1 E8B73B                  	CALL	SETWRITE
  6466 00000AE4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6467 00000AE8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6468 00000AEC C536[2E00]              	LDS	SI,[BCLOCK]
  6469 00000AF0 E8FF3A                  	CALL	DEVIOCALL2	;Set the time
  6470                                  	; 06/01/2024
  6471                                  	;XOR	AL,AL
  6472                                  	;RETN
  6473 00000AF3 EBB8                    	jmp	short set_time_ok
  6474                                  
  6475                                  ; 11/07/2018 - Retro DOS v3.0
  6476                                  ; Retro DOS v2.0 - 14/03/2018
  6477                                  
  6478                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6479                                  
  6480                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6481                                  ;----------------------------------------------------------
  6482                                  ; Date16 returns the current date in AX, current time in DX
  6483                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6484                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6485                                  
  6486                                  DATE16:
  6487                                  	
  6488                                  ;M048	Context DS
  6489                                  ;
  6490                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6491                                  ; is DOSDATA
  6492                                  
  6493                                  	;push	ss
  6494                                  	;pop	ds
  6495                                  
  6496                                  	;getdseg <ds>		; M048
  6497                                  
  6498                                  	; 13/05/2019 - Retro DOS v4.0
  6499 00000AF5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6500                                  
  6501 00000AFA 51                      	PUSH	CX
  6502 00000AFB 06                      	PUSH	ES
  6503 00000AFC E82000                  	CALL	READTIME
  6504 00000AFF 07                      	POP	ES
  6505 00000B00 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6506 00000B02 D0E1                    	SHL	CL,1
  6507 00000B04 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6508 00000B06 D1E1                    	SHL	CX,1
  6509 00000B08 D1E1                    	SHL	CX,1
  6510 00000B0A D0EE                    	SHR	DH,1		;Count every two seconds
  6511 00000B0C 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6512 00000B0E 89CA                    	MOV	DX,CX
  6513                                  
  6514                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6515                                  
  6516 00000B10 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6517 00000B13 B104                    	MOV	CL,4
  6518 00000B15 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6519 00000B17 D1E0                    	SHL	AX,1
  6520 00000B19 59                      	POP	CX
  6521 00000B1A 0A06[5003]              	OR	AL,[DAY]
  6522                                  RET21:
  6523 00000B1E C3                      	RETN
  6524                                  
  6525                                  ;----------------------------------------------------------
  6526                                  
  6527                                  READTIME:
  6528                                  
  6529                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6530                                  ;Uses AX, CX, DX.
  6531                                  
  6532 00000B1F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6533 00000B25 56                      	PUSH	SI
  6534 00000B26 53                      	PUSH	BX
  6535                                  
  6536 00000B27 BB[B603]                	MOV	BX,TIMEBUF
  6537                                  
  6538 00000B2A B90600                  	MOV	CX,6
  6539                                  	;XOR	DX,DX
  6540                                  	;MOV	AX,DX
  6541                                  	; 06/01/2024
  6542 00000B2D 31C0                    	xor	ax,ax
  6543 00000B2F 99                      	cwd
  6544 00000B30 E8353B                  	CALL	SETREAD
  6545 00000B33 1E                      	PUSH	DS
  6546 00000B34 C536[2E00]              	LDS	SI,[BCLOCK]
  6547 00000B38 E8B73A                  	CALL	DEVIOCALL2	;Get correct date and time
  6548 00000B3B 1F                      	POP	DS
  6549 00000B3C 5B                      	POP	BX
  6550 00000B3D 5E                      	POP	SI
  6551 00000B3E A1[B603]                	MOV	AX,[TIMEBUF]
  6552 00000B41 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6553 00000B45 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6554 00000B49 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6555                                  	;JZ	SHORT RET22
  6556 00000B4D 74CF                    	JZ	SHORT RET21 ; 18/07/2018
  6557                                  	;cmp	ax,43830
  6558 00000B4F 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6559 00000B52 733D                    	JAE	SHORT RET22	;Ignore if too large
  6560 00000B54 A3[5403]                	MOV	[DAYCNT],AX
  6561 00000B57 56                      	PUSH	SI
  6562 00000B58 51                      	PUSH	CX
  6563 00000B59 52                      	PUSH	DX		;Save time
  6564 00000B5A 31D2                    	XOR	DX,DX
  6565                                  	;mov	cx,1461
  6566 00000B5C B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6567 00000B5F F7F1                    	DIV	CX		;Compute number of 4-year units
  6568 00000B61 D1E0                    	SHL	AX,1
  6569 00000B63 D1E0                    	SHL	AX,1
  6570 00000B65 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6571 00000B67 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6572                                  
  6573 00000B69 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6574                                  
  6575 00000B6C E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6576 00000B6F D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6577 00000B71 7304                    	JNC	SHORT SK	;Extra half-year?
  6578 00000B73 81C2C800                	ADD	DX,200
  6579                                  SK:
  6580 00000B77 E82200                  	CALL	SETYEAR
  6581 00000B7A B101                    	MOV	CL,1		;At least at first month in year
  6582                                  
  6583 00000B7C BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6584                                  	
  6585 00000B7F E81000                  	CALL	DSLIDE		;Find out which month we're in
  6586 00000B82 880E[5103]              	MOV	[MONTH],CL
  6587 00000B86 42                      	INC	DX		;Remainder is day of month (start with one)
  6588 00000B87 8816[5003]              	MOV	[DAY],DL
  6589 00000B8B E89400                  	CALL	WKDAY		;Set day of week
  6590 00000B8E 5A                      	POP	DX
  6591 00000B8F 59                      	POP	CX
  6592 00000B90 5E                      	POP	SI
  6593                                  RET22:  
  6594 00000B91 C3                      	RETN
  6595                                  
  6596                                  ;----------------------------------------------------------
  6597                                  
  6598                                  DSLIDE:
  6599                                  	;MOV	AH,0
  6600                                  	; 06/01/2024
  6601                                  	; (AH = 0)
  6602                                  DSLIDE1:
  6603 00000B92 AC                      	LODSB			;Get count of days
  6604 00000B93 39C2                    	CMP	DX,AX		;See if it will fit
  6605                                  	;JB	SHORT RET23	;If not, done
  6606 00000B95 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6607 00000B97 29C2                    	SUB	DX,AX
  6608 00000B99 41                      	INC	CX		;Count one more month/year
  6609 00000B9A EBF6                    	JMP	SHORT DSLIDE1
  6610                                  
  6611                                  ;----------------------------------------------------------
  6612                                  
  6613                                  SETYEAR:
  6614                                  
  6615                                  ;Set year with value in CX. Adjust length of February for this year.
  6616                                  
  6617                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6618                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6619                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6620                                  ;	preserve DS as CHKYR is also called as a routine.
  6621                                  
  6622                                  	; MSDOS 6.0 (18/07/2018) ; *
  6623                                  
  6624                                  	;GETDSEG DS
  6625                                  
  6626                                  	;PUSH	CS  ; *
  6627                                  	;POP	DS  ; *
  6628                                  
  6629                                  	; 13/05/2019 - Retro DOS v4.0
  6630 00000B9C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6631                                  
  6632                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6633                                  	; 05/11/2022 
  6634                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6635                                  
  6636 00000BA1 880E[5203]              	MOV	[YEAR],CL
  6637                                  CHKYR:
  6638 00000BA5 F6C103                  	TEST	CL,3		;Check for leap year
  6639 00000BA8 B01C                    	MOV	AL,28
  6640 00000BAA 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6641 00000BAC FEC0                    	INC	AL		;Add leap day
  6642                                  SAVFEB:
  6643 00000BAE A2[1D0D]                	mov	[february],al
  6644                                  	;MOV	[MONTAB+1],AL	;Store for February
  6645                                  RET23:  
  6646 00000BB1 C3                      	RETN
  6647                                  
  6648                                  ;----------------------------------------------------------
  6649                                  
  6650                                  DODATE:
  6651 00000BB2 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6652 00000BB5 88F0                    	MOV	AL,DH
  6653                                  
  6654 00000BB7 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6655                                  
  6656 00000BBA D7                      	XLAT			;Look up days in month
  6657 00000BBB 38D0                    	CMP	AL,DL
  6658 00000BBD B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6659                                  	;JB	SHORT RET25	;Error if too many days
  6660 00000BBF 72F0                    	jb	short RET23 ; 18/07/2018
  6661 00000BC1 E8D8FF                  	CALL	SETYEAR
  6662                                  ;
  6663                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6664                                  ;
  6665 00000BC4 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6666 00000BC8 D1E9                    	SHR	CX,1
  6667 00000BCA D1E9                    	SHR	CX,1
  6668                                  	;mov	ax,1461
  6669 00000BCC B8B505                  	MOV	AX,FOURYEARS
  6670 00000BCF 89D3                    	MOV	BX,DX
  6671 00000BD1 F7E1                    	MUL	CX
  6672 00000BD3 8A0E[5203]              	MOV	CL,[YEAR]
  6673 00000BD7 80E103                  	AND	CL,3
  6674                                  
  6675 00000BDA BE[140D]                	MOV	SI,YRTAB
  6676                                  
  6677 00000BDD 89C2                    	MOV	DX,AX
  6678 00000BDF D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6679 00000BE1 E85100                  	CALL	DSUM		;Add up the days in each year
  6680 00000BE4 88F9                    	MOV	CL,BH		;Month of year
  6681                                  
  6682 00000BE6 BE[1C0D]                	MOV	SI,MONTAB
  6683                                  
  6684 00000BE9 49                      	DEC	CX		;Account for months starting with one
  6685 00000BEA E84800                  	CALL	DSUM		;Add up days in each month
  6686 00000BED 88D9                    	MOV	CL,BL		;Day of month
  6687 00000BEF 49                      	DEC	CX		;Account for days starting with one
  6688 00000BF0 01CA                    	ADD	DX,CX		;Add in to day total
  6689 00000BF2 92                      	XCHG	AX,DX		;Get day count in AX
  6690 00000BF3 A3[5403]                	MOV	[DAYCNT],AX
  6691 00000BF6 56                      	PUSH	SI
  6692 00000BF7 53                      	PUSH	BX
  6693 00000BF8 50                      	PUSH	AX
  6694                                  
  6695 00000BF9 BB[B603]                	MOV	BX,TIMEBUF
  6696                                  
  6697 00000BFC B90600                  	MOV	CX,6
  6698                                  	;XOR	DX,DX
  6699                                  	;MOV	AX,DX
  6700                                  	; 06/01/2024
  6701 00000BFF 31C0                    	xor	ax,ax
  6702 00000C01 99                      	cwd
  6703 00000C02 53                      	PUSH	BX
  6704 00000C03 E8623A                  	CALL	SETREAD
  6705                                  
  6706 00000C06 1E                      	PUSH	DS
  6707 00000C07 C536[2E00]              	LDS	SI,[BCLOCK]
  6708 00000C0B E8E439                  	CALL	DEVIOCALL2	;Get correct date and time
  6709 00000C0E 1F                      	POP	DS
  6710 00000C0F 5B                      	POP	BX
  6711 00000C10 E8883A                  	CALL	SETWRITE
  6712 00000C13 8F06[B603]              	POP	WORD [TIMEBUF]
  6713 00000C17 1E                      	PUSH	DS
  6714 00000C18 C536[2E00]              	LDS	SI,[BCLOCK]
  6715 00000C1C E8D339                  	CALL	DEVIOCALL2	;Set the date
  6716 00000C1F 1F                      	POP	DS
  6717 00000C20 5B                      	POP	BX
  6718 00000C21 5E                      	POP	SI
  6719                                  WKDAY:
  6720 00000C22 A1[5403]                	MOV	AX,[DAYCNT]
  6721 00000C25 31D2                    	XOR	DX,DX
  6722 00000C27 B90700                  	MOV	CX,7
  6723 00000C2A 40                      	INC	AX
  6724 00000C2B 40                      	INC	AX		;First day was Tuesday
  6725 00000C2C F7F1                    	DIV	CX		;Compute day of week
  6726 00000C2E 8816[5603]              	MOV	[WEEKDAY],DL
  6727 00000C32 30C0                    	XOR	AL,AL		;Flag OK
  6728                                  RET25:
  6729 00000C34 C3                      	RETN
  6730                                  
  6731                                  ;----------------------------------------------------------
  6732                                  
  6733                                  ;**	DSUM - Compute the sum of a string of bytes
  6734                                  ;
  6735                                  ;	ENTRY	(cx) = byte count
  6736                                  ;		(ds:si) = byte address
  6737                                  ;		(dx) = sum register, initialized by caller
  6738                                  ;	EXIT	(dx) updated
  6739                                  ;	USES	ax, cx, dx, si, flags
  6740                                  
  6741                                  DSUM:
  6742 00000C35 B400                    	MOV	AH,0
  6743 00000C37 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6744                                  	;JCXZ	RET25 ; 18/07/2018
  6745                                  DSUM1:
  6746 00000C39 AC                      	LODSB
  6747 00000C3A 01C2                    	ADD	DX,AX
  6748 00000C3C E2FB                    	LOOP	DSUM1
  6749                                  DSUM9:
  6750 00000C3E C3                      	RETN
  6751                                  
  6752                                  ;============================================================================
  6753                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6754                                  ;============================================================================
  6755                                  ; 29/04/2019 - Retro DOS v4.0
  6756                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6757                                  
  6758                                  ; 12/03/2018 - Retro DOS v2.0 
  6759                                  
  6760                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6761                                  ;NAME	GETSET
  6762                                  
  6763                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6764                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6765                                  
  6766                                  ;USERNUM:
  6767                                  ;	DW	0			; 24 bit user number
  6768                                  ;       DB      0
  6769                                  ;;	IF      IBM
  6770                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6771                                  ;;	ELSE
  6772                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6773                                  ;;	ENDIF
  6774                                  
  6775                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6776                                  ;; 08/07/2018 - Retro DOS v3.0
  6777                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6778                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6779                                  
  6780                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6781                                  ;----------------------------------------------------------------------------
  6782                                  
  6783                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6784                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6785                                  
  6786                                  _$GET_VERSION:
  6787                                  
  6788                                  ; Inputs:
  6789                                  ;       None
  6790                                  ; Function:
  6791                                  ;       Return MS-DOS version number
  6792                                  ; Outputs:
  6793                                  ;       OEM number in BH
  6794                                  ;       User number in BL:CX (24 bits)
  6795                                  ;       Version number as AL.AH in binary
  6796                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6797                                  
  6798                                  ; MSDOS 6.0
  6799                                  ;
  6800                                  ;	Fake_Count is used to lie about the version numbers to support
  6801                                  ;	old binarys. See ms_table.asm for more info.
  6802                                  ;
  6803                                  ;		if input al = 00
  6804                                  ;		  (bh) = OEM number			
  6805                                  ;		else if input al = 01
  6806                                  ;		  (bh) = version flags
  6807                                  ;		 
  6808                                  ;		       	 bits 0-2 = DOS internal revision
  6809                                  ;		       	 bits 3-7 = DOS type flags
  6810                                  ;		              bit 3    = DOS is in ROM
  6811                                  ;		              bit 4    = DOS in in HMA
  6812                                  ;		              bits 5-7 = reserved
  6813                                  ;               M007 change - only bit 3 is now valid. Other bits
  6814                                  ;               are 0 when AL = 1
  6815                                  
  6816                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6817 00000C3F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6818 00000C44 8CDB                    	mov	bx, ds
  6819                                  
  6820                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6821                                  	;--------------------------------------
  6822                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6823                                  
  6824 00000C46 16                              PUSH    SS
  6825 00000C47 1F                              POP     DS
  6826                                          
  6827                                  	; 06/01/2024
  6828                                  	;MOV	BX,[USERNUM+2]
  6829                                          ;MOV	CX,[USERNUM]
  6830                                  
  6831                                  	; 13/05/2019 - Retro DOS v4.0
  6832                                  
  6833                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6834                                  	;DOS flags
  6835                                  
  6836 00000C48 3C01                    	cmp	AL,1
  6837 00000C4A 7502                    	jne	short Norm_Vers
  6838                                  
  6839                                  ;ifdef ROMDOS
  6840                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6841                                  ;				(DOSINROM = 8)
  6842                                  ;else
  6843 00000C4C 30FF                            xor     bh,bh		; Otherwise return 0
  6844                                  ;endif				;M007 end
  6845                                  
  6846                                  Norm_Vers:
  6847                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6848                                  
  6849                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6850                                  	; 13/05/2019 - Retro DOS v4.0
  6851 00000C4E 1E                      	push	ds		; Get the version number from the
  6852 00000C4F 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6853                                  	;mov	ax,[40h]
  6854 00000C53 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6855                                  	; 07/12/2022
  6856 00000C56 1F                      	pop	ds
  6857 00000C57 E82BF8                  	call	Get_User_Stack
  6858                                  				; Put values for return registers
  6859                                  				; in the proper place on the user's	 
  6860                                  				; stack addressed by DS:SI
  6861                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6862                                  gdrvfspc_ret:
  6863                                          ;MOV	[SI+user_env.user_AX],AX
  6864 00000C5A 8904                            MOV	[SI],AX
  6865                                          ;MOV	[SI+4],CX
  6866 00000C5C 894C04                  	mov	[SI+user_env.user_CX],CX
  6867                                  set_user_bx:
  6868                                  	;MOV	[SI+2],BX
  6869 00000C5F 895C02                  	mov	[SI+user_env.user_BX],BX
  6870                                  
  6871 00000C62 C3                      	RETN
  6872                                  
  6873                                  ; 18/07/2018 - Retro DOS v3.0
  6874                                  
  6875                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6876                                  ;----------------------------------------------------------------------------
  6877                                  
  6878                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6879                                  ;
  6880                                  ;	ENTRY	none
  6881                                  ;	EXIT	(al) = value of VERIFY flag
  6882                                  ;	USES	all
  6883                                  
  6884                                  
  6885                                  _$GET_VERIFY_ON_WRITE:
  6886                                  
  6887                                  ;hkn; SS override
  6888 00000C63 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6889 00000C67 C3                      	retn
  6890                                  
  6891                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6892                                  ;
  6893                                  ;	ENTRY	(al) = value of VERIFY flag
  6894                                  ;	EXIT	none
  6895                                  ;	USES	all
  6896                                  
  6897                                  _$SET_VERIFY_ON_WRITE:
  6898                                  
  6899 00000C68 2401                    	AND	AL,1
  6900                                  ;hkn; SS override
  6901 00000C6A 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6902                                  RET27:	; 18/07/2018
  6903 00000C6E C3                      	retn
  6904                                  
  6905                                  ; 19/07/2018 - Retro DOS v3.0
  6906                                  
  6907                                  ;BREAK <$International - return country-dependent information>
  6908                                  ;----------------------------------------------------------------------------
  6909                                  ;
  6910                                  ; Procedure Name : $INTERNATIONAL
  6911                                  ;
  6912                                  ; Inputs:
  6913                                  ;	MOV	AH,International
  6914                                  ;	MOV	AL,country	(al = 0 => current country)
  6915                                  ;      [MOV	BX,country]
  6916                                  ;	LDS	DX,block
  6917                                  ;	INT	21
  6918                                  ; Function:
  6919                                  ;	give users an idea of what country the application is running
  6920                                  ; Outputs:
  6921                                  ;	IF DX != -1 on input (get country)
  6922                                  ;	  AL = 0 means return current country table.
  6923                                  ;	  0<AL<0FFH means return country table for country AL
  6924                                  ;	  AL = 0FF means return country table for country BX
  6925                                  ;	  No Carry:
  6926                                  ;	     Register BX will contain the 16-bit country code.
  6927                                  ;	     Register AL will contain the low 8 bits of the country code.
  6928                                  ;	     The block pointed to by DS:DX is filled in with the information
  6929                                  ;	     for the particular country.
  6930                                  ;		BYTE  Size of this table excluding this byte and the next
  6931                                  ;		BYTE  Country code represented by this table
  6932                                  ;			A sequence of n bytes, where n is the number specified
  6933                                  ;			by the first byte above and is not > internat_block_max,
  6934                                  ;			in the correct order for being returned by the
  6935                                  ;			INTERNATIONAL call as follows:
  6936                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6937                                  ;		5 BYTE	Currency symbol null terminated
  6938                                  ;		2 BYTE	thousands separator null terminated
  6939                                  ;		2 BYTE	Decimal point null terminated
  6940                                  ;		2 BYTE	Date separator null terminated
  6941                                  ;		2 BYTE	Time separator null terminated
  6942                                  ;		1 BYTE	Bit field.  Currency format.
  6943                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6944                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6945                                  ;		1 BYTE	No. of significant decimal digits in currency
  6946                                  ;		1 BYTE	Bit field.  Time format.
  6947                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6948                                  ;		DWORD	Call address of case conversion routine
  6949                                  ;		2 BYTE	Data list separator null terminated.
  6950                                  ;	  Carry:
  6951                                  ;	     Register AX has the error code.
  6952                                  ;	IF DX = -1 on input (set current country)
  6953                                  ;	  AL = 0 is an error
  6954                                  ;	  0<AL<0FFH means set current country to country AL
  6955                                  ;	  AL = 0FF means set current country to country BX
  6956                                  ;	  No Carry:
  6957                                  ;	    Current country SET
  6958                                  ;	    Register AL will contain the low 8 bits of the country code.
  6959                                  ;	  Carry:
  6960                                  ;	     Register AX has the error code.
  6961                                  ;-----------------------------------------------------------------------------
  6962                                  
  6963                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6964                                  
  6965                                  ; 13/05/2019 - Retro DOS v4.0
  6966                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6967                                  
  6968                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6969                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6970                                  
  6971                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6972                                  	 
  6973 00000C6F 3CFF                    	CMP	AL,0FFH
  6974 00000C71 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6975 00000C73 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6976 00000C75 30FF                    	XOR	BH,BH
  6977                                  BX_HAS_CODE:
  6978 00000C77 1E                      	PUSH	DS
  6979 00000C78 07                      	POP	ES
  6980 00000C79 52                      	PUSH	DX
  6981 00000C7A 5F                      	POP	DI			; User buffer to ES:DI
  6982                                  
  6983                                  ;hkn; SS is DOSDATA
  6984                                  ;	context DS
  6985                                  
  6986 00000C7B 16                      	push	ss
  6987 00000C7C 1F                      	pop	ds
  6988                                  
  6989 00000C7D 83FFFF                  	CMP	DI,-1
  6990 00000C80 745D                    	JZ	short international_set
  6991 00000C82 09DB                    	OR	BX,BX
  6992 00000C84 7505                    	JNZ	short international_find
  6993                                  
  6994                                  ;hkn; country_cdpg is in DOSDATA segment.
  6995 00000C86 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6996                                  
  6997 00000C89 EB39                    	JMP	SHORT international_copy
  6998                                  
  6999                                  international_find:
  7000                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7001                                  	; 06/01/2024
  7002 00000C8B 31ED                    	xor	bp,bp ; 0
  7003 00000C8D E80A00                  	CALL	international_get
  7004 00000C90 7255                    	JC	short errtn
  7005                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7006                                  	; 06/01/2024
  7007 00000C92 09DB                    	or	bx,bx
  7008 00000C94 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7009 00000C96 89D3                    	MOV	BX,DX			 ; put country back
  7010 00000C98 EB3A                    	JMP	SHORT international_ok3
  7011                                  
  7012                                  international_get:
  7013 00000C9A BE[0512]                	MOV	SI,COUNTRY_CDPG
  7014                                  
  7015                                  ;hkn; country_cdpg is in DOSDATA segment.
  7016                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7017                                  
  7018                                  	; MSDOS 3.3
  7019                                  	;;cmp	bx,[SI+63h]
  7020                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7021                                  	;jz	short RET27
  7022                                  
  7023                                  	; 13/05/2019 - Retro DOS v4.0
  7024                                  
  7025                                  	; MSDOS 6.0
  7026                                  	;cmp	bx,[ss:si+68h]
  7027 00000C9D 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7028 00000CA1 74CB                    	jz	short RET27			; return if equal
  7029                                  
  7030 00000CA3 89DA                    	MOV	DX,BX
  7031 00000CA5 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7032                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7033 00000CA7 B80014                  	mov	ax,1400h
  7034 00000CAA CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7035                                  			; Return: AL = 00h not installed, OK to install
  7036                                  			; 01h not installed, not OK
  7037                                  			; FFh installed
  7038 00000CAC 3CFF                    	CMP	AL,0FFH
  7039 00000CAE 7510                    	JNZ	short interr		; not in memory
  7040                                  	
  7041                                  	; 06/01/2024
  7042 00000CB0 B80314                  	mov	ax,1403h		; set country info
  7043                                  
  7044                                  	;cmp	bp,0
  7045 00000CB3 09ED                    	or	bp,bp			; GetCntry ?
  7046 00000CB5 7501                    	JNZ	short stcdpg
  7047                                  	
  7048                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7049                                  	;mov	ax,1404h
  7050 00000CB7 40                      	inc	ax	; AX = 1404h ; get country info
  7051                                  
  7052                                  	; 06/01/2024
  7053                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7054                                  	;		; BX = code page, DX = country code,
  7055                                  	;		; DS:SI -> internal code page structure
  7056                                  	;		; ES:DI -> user buffer
  7057                                  	;		; Return: AL = status
  7058                                  	;
  7059                                  	;JMP	short chkok
  7060                                  	
  7061                                  	;nop
  7062                                  
  7063                                  stcdpg:
  7064                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7065                                  	; 06/01/2024
  7066                                  	;mov     ax,1403h
  7067                                  gscdpg:
  7068 00000CB8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7069                                  			; DS:SI -> internal code page structure
  7070                                  			; BX = code page, DX = country code
  7071                                  			; Return: AL = status
  7072                                  chkok:
  7073 00000CBA 08C0                    	or	al,al			; success ?
  7074                                  	;retz				; yes
  7075 00000CBC 74B0                    	jz	short RET27
  7076                                  
  7077                                  setcarry:
  7078 00000CBE F9                      	STC				; set carry
  7079 00000CBF C3                      	retn
  7080                                  interr:
  7081 00000CC0 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7082 00000CC2 EBFA                    	JMP	short setcarry
  7083                                  
  7084                                  international_copy:
  7085                                  
  7086                                  ;hkn; country_cdpg is in DOSDATA segment.
  7087                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7088                                  
  7089                                  	; MSDOS 3.3
  7090                                  	;;mov	bx,[SI+63h]
  7091                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7092                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7093                                  
  7094                                  	; 13/05/2019 - Retro DOS v4.0
  7095                                  
  7096                                  	; MSDOS 6.0
  7097                                  	;mov	bx,[ss:si+68h]
  7098 00000CC4 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7099 00000CC8 BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7100                                  
  7101                                  	;mov	cx,24
  7102 00000CCB B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7103                                  
  7104                                  	; MSDOS 6.0
  7105                                  
  7106                                  ;hkn;	must set up DS to SS so that international info can be copied
  7107                                  	
  7108 00000CCE 1E                      	push	ds
  7109                                  
  7110 00000CCF 16                      	push	ss			; cs -> ss
  7111 00000CD0 1F                      	pop	ds
  7112                                  
  7113 00000CD1 F3A4                    	REP	MOVSB			; copy country info
  7114                                  
  7115                                  	; MSDOS 6.0
  7116                                  
  7117 00000CD3 1F                      	pop	ds	;hkn;	restore ds
  7118                                  
  7119                                  international_ok3:
  7120 00000CD4 E8AEF7                  	call	Get_User_Stack
  7121                                  ;ASSUME	DS:NOTHING
  7122                                  	;MOV	[SI+2],BX
  7123 00000CD7 895C02                  	MOV	[SI+user_env.user_BX],BX
  7124                                  international_ok:
  7125 00000CDA 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7126                                  ;SYS_RET_OK_jmp:
  7127                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7128                                  nono:	; 15/12/2022
  7129                                  SYS_RET_OK_jmp:
  7130 00000CDC E95CF9                  	jmp	SYS_RET_OK
  7131                                  
  7132                                  international_set:
  7133                                  
  7134                                  ;hkn; ASSUME	DS:DOSGROUP
  7135                                  ;ASSUME	DS:DOSDATA
  7136                                  
  7137 00000CDF BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7138 00000CE2 E8B5FF                  	CALL	international_get
  7139 00000CE5 73F3                    	JNC	short international_ok
  7140                                  errtn:
  7141 00000CE7 3CFF                    	CMP	AL,0FFH
  7142 00000CE9 7403                    	JZ	short errtn2
  7143                                  errtn1:
  7144 00000CEB E956F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7145                                  errtn2:
  7146                                  	;error	error_invalid_function	; NLSFUNC not existent
  7147                                  
  7148                                  	;mov	al,1
  7149 00000CEE B001                    	mov	al,error_invalid_function 
  7150 00000CF0 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7151                                  ;errtn3:
  7152                                  ;	jmp	SYS_RET_ERR
  7153                                  
  7154                                  ;EndProc $INTERNATIONAL
  7155                                  
  7156                                  ; 19/07/2018
  7157                                  
  7158                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7159                                  
  7160                                  ;----------------------------------------------------------------------------
  7161                                  ;
  7162                                  ; Procedure Name : $GetExtCntry
  7163                                  ;
  7164                                  ; Inputs:
  7165                                  ;	if AL >= 20H
  7166                                  ;	  AL= 20H    capitalize single char, DL= char
  7167                                  ;	      21H    capitalize string, CX= string length
  7168                                  ;	      22H    capitalize ASCIIZ string
  7169                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7170                                  ;	      80H bit 0 = use normal upper case table
  7171                                  ;		      1 = use file upper case table
  7172                                  ;	   DS:DX points to string
  7173                                  ;
  7174                                  ;	else
  7175                                  ;
  7176                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7177                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7178                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7179                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7180                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7181                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7182                                  ;	INT	21
  7183                                  ; Function:
  7184                                  ;	give users extended country dependent information
  7185                                  ;	or capitalize chars
  7186                                  ; Outputs:
  7187                                  ;	  No Carry:
  7188                                  ;	     extended country info is succesfully returned
  7189                                  ;	  Carry:
  7190                                  ;	     Register AX has the error code.
  7191                                  ;	     AX=0, NO	 for YES/NO CHECK
  7192                                  ;		1, YES
  7193                                  ;----------------------------------------------------------------------------
  7194                                  
  7195                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7196                                  
  7197                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7198                                  
  7199                                  	; MSDOS 6.0
  7200                                  _$GetExtCntry:
  7201 00000CF2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7202 00000CF4 7269                    	JB	short notcap
  7203                                  capcap: 				;
  7204 00000CF6 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7205 00000CF8 7505                    	JNZ	short fileupper		; file upper case
  7206                                  
  7207                                  ;hkn; UCASE_TAB in DOSDATA
  7208 00000CFA BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7209 00000CFD EB05                    	JMP	SHORT capit
  7210                                  
  7211                                  fileupper:
  7212                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7213                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7214                                  	; AL >= 80h
  7215 00000CFF 247F                    	and	al,7Fh
  7216                                  
  7217                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7218 00000D01 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7219                                  capit:					;
  7220 00000D04 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7221 00000D06 750D                    	JNZ	short chkyes		; no
  7222 00000D08 88D0                    	MOV	AL,DL			; set up AL
  7223 00000D0A E8DF42                  	call	GETLET3 		; upper case it
  7224 00000D0D E875F7                  	call	Get_User_Stack		; get user stack
  7225                                  	;mov	[si+6],al
  7226 00000D10 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7227 00000D13 EBC7                    	JMP	SHORT nono		; done
  7228                                  chkyes: 				;
  7229 00000D15 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7230 00000D17 7522                    	JNZ	short capstring		; no
  7231                                  
  7232 00000D19 31C0                    	XOR	AX,AX			; presume NO
  7233                                  		      
  7234                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7235                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7236                                  
  7237                                  	; 06/08/2018 - Retro DOS v3.0
  7238                                  	; 13/05/2019 - Retro DOS v4.0
  7239                                  	;cmp	dl,'Y'
  7240 00000D1B 2E3A16[1A0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7241 00000D20 7416                    	JZ	short yesyes		; yes
  7242                                  	;cmp	dl,'y'
  7243 00000D22 2E3A16[1C0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7244 00000D27 740F                    	JZ	short yesyes		; yes
  7245                                  	;cmp	dl,'N'
  7246 00000D29 2E3A16[1B0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7247 00000D2E 74AC                    	JZ	short nono		; no
  7248                                  	;cmp	dl,'n'
  7249 00000D30 2E3A16[1D0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7250 00000D35 74A5                    	JZ	short nono		; no
  7251                                  ;dbcs_char:				;
  7252 00000D37 40                      	INC	AX			; not YES or NO
  7253                                  yesyes: 				;
  7254 00000D38 40                      	INC	AX			; return 1
  7255                                  	; 15/12/2022
  7256                                  ;nono:	
  7257 00000D39 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7258                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7259                                  	;jmp	SYS_RET_OK		; done
  7260                                  
  7261                                  capstring:				;
  7262 00000D3B 89D6                    	MOV	SI,DX			; si=dx
  7263 00000D3D 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7264 00000D3F 750D                    	JNZ	short capascii		; no
  7265                                  	;OR	CX,CX			; check count 0
  7266                                  	;JZ	short nono		; yes finished
  7267                                  	; 06/01/2024
  7268 00000D41 E399                    	jcxz	nono
  7269                                  concap: 				;
  7270 00000D43 AC                      	LODSB				; get char
  7271 00000D44 E8A542                  	call	GETLET3 		; upper case it
  7272 00000D47 8844FF                  	MOV	byte [SI-1],AL		; store back
  7273                                  ;next99: 				;
  7274 00000D4A E2F7                    	LOOP	concap			; continue
  7275 00000D4C EB8E                    	JMP	short nono		; done
  7276                                  capascii:				;
  7277 00000D4E 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7278 00000D50 7545                    	JNZ	short capinval		; no
  7279                                  concap2:				;
  7280 00000D52 AC                      	LODSB				; get char
  7281 00000D53 08C0                    	or	al,al			; end of string ?
  7282 00000D55 7485                    	JZ	short nono		; yes
  7283 00000D57 E89242                  	call	GETLET3 		; upper case it
  7284 00000D5A 8844FF                  	MOV	[SI-1],AL		; store back
  7285 00000D5D EBF3                    	JMP	short concap2 		; continue
  7286                                  
  7287                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7288                                  
  7289                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7290                                  ; _$GetExtCntry:
  7291                                  
  7292                                  notcap:
  7293 00000D5F 83F905                  	CMP	CX,5			; minimum size is 5
  7294 00000D62 7277                    	jb	short sizeerror
  7295                                  
  7296                                  GEC_CONT:
  7297                                  ;hkn; SS is DOSDATA
  7298                                  	;context DS
  7299                                  
  7300 00000D64 16                      	push	ss
  7301                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7302 00000D65 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7303                                  	
  7304                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7305 00000D66 BE[0512]                	MOV	SI,COUNTRY_CDPG
  7306                                  
  7307 00000D69 83FAFF                  	CMP	DX,-1			; active country ?
  7308 00000D6C 7503                    	JNZ	short GETCDPG 		; no
  7309                                  
  7310                                  ;hkn; use DS override to accesss country_cdpg fields
  7311                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7312                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7313 00000D6E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7314                                  					; get active country id;smr;use DS
  7315                                  GETCDPG:
  7316 00000D71 83FBFF                  	CMP	BX,-1			; active code page?
  7317 00000D74 7503                    	JNZ	short CHKAGAIN		; no, check again
  7318                                  
  7319                                  ;hkn; use DS override to accesss country_cdpg fields
  7320                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7321                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7322 00000D76 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7323                                  					; get active code page id;smr;Use DS
  7324                                  CHKAGAIN:
  7325                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7326 00000D79 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7327                                  					; same as active country id?;smr;use DS
  7328 00000D7C 7550                    	JNZ	short CHKNLS		; no
  7329                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7330 00000D7E 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7331                                  					; same as active code pg id?;smr;use DS
  7332 00000D81 754B                    	JNZ	short CHKNLS		; no
  7333                                  CHKTYPE:
  7334                                  	;mov	bx,[si+48h]
  7335 00000D83 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7336                                  					; bx = sys code page id;smr;use DS
  7337 00000D86 51                      	PUSH	CX			; save cx
  7338                                  	;mov	cx,[si+4Ah]
  7339 00000D87 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7340                                  	;mov	si,COUNTRY_CDPG+76
  7341 00000D8A BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7342                                  NXTENTRY:
  7343 00000D8D 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7344 00000D8F 740B                    	JZ	short FOUNDIT
  7345 00000D91 83C605                  	ADD	SI,5			; next entry
  7346 00000D94 E2F7                    	LOOP	NXTENTRY
  7347 00000D96 59                      	POP	CX
  7348                                  capinval:
  7349                                  	;error	error_invalid_function	; info type not found
  7350                                  	;mov	al,1
  7351 00000D97 B001                    	mov	al,error_invalid_function
  7352                                  ;SYS_RET_ERR_jmp:
  7353                                  	;jmp	SYS_RET_ERR
  7354                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7355                                  SYS_RET_ERR_jmp:
  7356 00000D99 E9A8F8                  	jmp	SYS_RET_ERR	
  7357                                  
  7358                                  FOUNDIT:
  7359 00000D9C A4                      	MOVSB				; move info id byte
  7360 00000D9D 59                      	POP	CX			; restore char count
  7361                                  	;cmp	al,1
  7362 00000D9E 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7363 00000DA0 7415                    	JZ	short setsize
  7364 00000DA2 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7365 00000DA5 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7366                                  OK_RETN:
  7367 00000DA8 F3A4                    	REP	MOVSB			; copy info
  7368 00000DAA 89C1                    	MOV	CX,AX			; CX = actual length returned
  7369 00000DAC 89D8                    	MOV	AX,BX			; return sys code page in ax
  7370                                  GETDONE:
  7371 00000DAE E8D4F6                  	call	Get_User_Stack		; return actual length to user's CX
  7372                                  	;mov	[si+4],cx 
  7373 00000DB1 894C04                  	MOV	[SI+user_env.user_CX],CX
  7374                                  	;jmp	SYS_RET_OK
  7375                                  	; 15/12/2022
  7376                                  	; 25/06/2019
  7377 00000DB4 E987F8                  	jmp	SYS_RET_OK_clc
  7378                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7379                                  	; 15/12/2022
  7380                                  ;nono_jmp:
  7381                                  	;jmp	short nono
  7382                                  setsize:
  7383 00000DB7 83E903                  	SUB	CX,3			; size after length field
  7384 00000DBA 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7385 00000DBC 7302                    	JAE	short setsize2		; no
  7386 00000DBE 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7387                                  setsize2:
  7388 00000DC0 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7389                                  	;ADD	DI,2			; update index
  7390                                  	;ADD	SI,2
  7391                                  	; 06/01/2024
  7392 00000DC3 47                      	inc	di
  7393 00000DC4 47                      	inc	di
  7394 00000DC5 46                      	inc	si
  7395 00000DC6 46                      	inc	si
  7396 00000DC7 89C8                    	MOV	AX,CX
  7397 00000DC9 83C003                  	ADD	AX,3			; AX has the actual length
  7398 00000DCC EBDA                    	JMP	short OK_RETN 		; go move it
  7399                                  CHKNLS:
  7400 00000DCE 30E4                    	XOR	AH,AH
  7401                                  	;PUSH	AX			; save info type
  7402                                  	;POP	BP			; bp = info type
  7403                                  	; 06/01/2024
  7404 00000DD0 89C5                    	mov	bp,ax
  7405                                  	
  7406                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7407 00000DD2 B80014                  	mov     ax,1400h
  7408 00000DD5 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7409                                  			; Return: AL = 00h not installed, OK to install
  7410                                  			; 01h not installed, not OK
  7411                                  			; FFh installed
  7412 00000DD7 3CFF                    	CMP	AL,0FFH
  7413 00000DD9 7404                    	JZ	short NLSNXT		; in memory
  7414                                  
  7415                                  sizeerror:
  7416                                  	;error	error_invalid_function
  7417                                  	;mov	al,1
  7418 00000DDB B001                    	mov	al,error_invalid_function
  7419                                  	;jmp	SYS_RET_ERR
  7420                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7421                                  sys_ret_err_jmp2:
  7422 00000DDD EBBA                    	jmp	short SYS_RET_ERR_jmp
  7423                                  
  7424                                  NLSNXT: 
  7425                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7426 00000DDF B80214                  	mov     ax,1402h
  7427 00000DE2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7428                                  			; BP = subfunction, BX = code page
  7429                                  			; DX = country code, DS:SI -> internal code page structure
  7430                                  			; ES:DI -> user buffer, CX = size of user buffer
  7431                                  			; Return: AL = status
  7432                                  			; 00h successful
  7433                                  			; else DOS error code
  7434                                  
  7435 00000DE4 3C00                    	CMP	AL,0			; success ?
  7436 00000DE6 7505                    	JNZ	short NLSERROR
  7437                                  	;mov	ax,[si+48h] ; 13/05/2019
  7438 00000DE8 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7439                                  			; ax = sys code page id;smr;use ds;
  7440                                  			;BUGBUG;check whether DS is OK after the above calls
  7441 00000DEB EBC1                    	JMP	short GETDONE
  7442                                  seterr:
  7443                                  	; 15/12/2022
  7444                                  NLSERROR:
  7445                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7446                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7447                                  	;jmp	short sys_ret_err_jmp2
  7448                                  	; 15/12/2022
  7449 00000DED EBAA                    	jmp	short SYS_RET_ERR_jmp
  7450                                  
  7451                                  ;EndProc $GetExtCntry
  7452                                  
  7453                                  ; 13/05/2019 - Retro DOS v4.0
  7454                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7455                                  
  7456                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7457                                  ;----------------------------------------------------------------------------
  7458                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7459                                  ;
  7460                                  ;   System call format:
  7461                                  ;
  7462                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7463                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7464                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7465                                  ;	INT	21
  7466                                  ;
  7467                                  ;	ENTRY	(al) = n
  7468                                  ;		(bx) = code page
  7469                                  ;	EXIT	'C' clear
  7470                                  ;		  global code page is set	(set global code page)
  7471                                  ;		  (BX) = active code page id	(get global code page)
  7472                                  ;		  (DX) = system code page id	(get global code page)
  7473                                  ;		'C' set
  7474                                  ;		  (AX) = error code
  7475                                  
  7476                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7477                                  
  7478                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7479                                  	; DOSCODE:4BC9h
  7480                                  
  7481                                  _$GetSetCdPg:
  7482                                  
  7483                                  ;hkn; SS is DOSDATA
  7484                                  	;context DS
  7485                                  
  7486 00000DEF 16                      	push	ss
  7487 00000DF0 1F                      	pop	ds
  7488                                  
  7489                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7490 00000DF1 BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7491                                  
  7492 00000DF4 3C01                    	CMP	AL,1		       ; get global code page
  7493 00000DF6 7512                    	JNZ	short setglpg 	       ; set global code page
  7494                                  	
  7495                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7496                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7497 00000DF8 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7498                                  					; get active code page id;smr;use ds
  7499                                  	;mov	dx,[si+48h]
  7500 00000DFB 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7501                                  				  	; get sys code page id;smr;use ds
  7502 00000DFE E884F6                  	call	Get_User_Stack
  7503                                  ;ASSUME DS:NOTHING
  7504                                  	;;mov	[si+2],bx
  7505                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7506                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7507 00000E01 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7508                                  	;mov	[si+6],dx
  7509 00000E04 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7510                                  OK_RETURN:
  7511                                  	; 15/12/2022
  7512                                  	;transfer SYS_RET_OK
  7513 00000E07 E931F8                  	jmp	SYS_RET_OK
  7514                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7515                                  	;jmp	short nono_jmp
  7516                                  
  7517                                  ;hkn; ASSUME DS:DOSGROUP
  7518                                  ;ASSUME	DS:DOSDATA
  7519                                  
  7520                                  setglpg:
  7521 00000E0A 3C02                    	CMP	AL,2
  7522 00000E0C 752F                    	JNZ	short nomem
  7523                                  	
  7524                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7525                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7526 00000E0E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7527                                  	
  7528                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7529 00000E11 B80014                  	mov     ax,1400h
  7530 00000E14 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7531                                  			; Return: AL = 00h not installed, OK to install
  7532                                  			; 01h not installed, not OK
  7533                                  			; FFh installed
  7534 00000E16 3CFF                    	CMP	AL,0FFH
  7535 00000E18 7523                    	JNZ	short nomem		; not in memory
  7536                                  
  7537                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7538 00000E1A B80114                  	mov     ax,1401h
  7539 00000E1D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7540                                  			; DS:SI -> internal code page structure
  7541                                  			; BX = new code page, DX = country code???
  7542                                  			; Return: AL = status
  7543                                  			; 00h successful
  7544                                  			; else DOS error code
  7545                                  	;cmp	al,0
  7546 00000E1F 08C0                    	or	al,al			; success ?
  7547 00000E21 74E4                    	JZ	short OK_RETURN		; yes
  7548                                  
  7549 00000E23 3C41                    	CMP	AL,65			; set device code page failed
  7550 00000E25 75C6                    	JNZ	short seterr
  7551                                  	;MOV	AX,65
  7552                                  	; 06/01/2024
  7553 00000E27 98                      	cbw
  7554 00000E28 A3[2403]                	MOV	[EXTERR],AX
  7555                                  	;mov	byte [EXTERR_ACTION],6
  7556                                  	;mov	byte [EXTERR_CLASS],5
  7557                                  	;mov	byte [EXTERR_LOCUS],4
  7558 00000E2B C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7559 00000E30 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7560 00000E35 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7561                                  	;transfer From_GetSet
  7562 00000E3A E90FF8                  	jmp	From_GetSet
  7563                                  
  7564                                  	; 15/12/2022
  7565                                  ;seterr:
  7566                                  	;;;transfer SYS_RET_ERR
  7567                                  	;;jmp	SYS_RET_ERR
  7568                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7569                                  	;jmp	short NLSERROR
  7570                                  
  7571                                  nomem:
  7572                                  	;error	error_invalid_function	; function not defined
  7573                                  	;mov	al,1
  7574 00000E3D B001                    	mov	al,error_invalid_function
  7575 00000E3F EBAC                    	jmp	short seterr
  7576                                  
  7577                                  ;EndProc $GetSetCdPg
  7578                                  
  7579                                  ; 09/01/2024
  7580                                  ; 13/05/2019 - Retro DOS v4.0
  7581                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7582                                  
  7583                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7584                                  ;----------------------------------------------------------------------------
  7585                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7586                                  ;
  7587                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7588                                  ;		drive.
  7589                                  ;
  7590                                  ;	This call returns the same info in the same registers (except for the
  7591                                  ;	FAT pointer) as the old FAT pointer calls
  7592                                  ;
  7593                                  ;	ENTRY	DL = Drive number
  7594                                  ;	EXIT	AX = Sectors per allocation unit
  7595                                  ;		   = -1 if bad drive specified
  7596                                  ;		On User Stack
  7597                                  ;		    BX = Number of free allocation units
  7598                                  ;		    DX = Total Number of allocation units on disk
  7599                                  ;		    CX = Sector size
  7600                                  
  7601                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7602                                  
  7603                                  _$GET_DRIVE_FREESPACE:
  7604                                  
  7605                                  ;hkn; SS is DOSDATA
  7606                                  	;context DS
  7607 00000E41 16                      	push	ss
  7608 00000E42 1F                      	pop	ds
  7609                                  
  7610 00000E43 88D0                    	MOV	AL,DL
  7611                                  	;invoke	GetThisDrv		; Get drive
  7612 00000E45 E8D05B                  	call	GETTHISDRV
  7613                                  SET_AX_RET:
  7614 00000E48 7212                    	JC	short BADFDRV
  7615                                  	;invoke	DISK_INFO
  7616 00000E4A E82F1E                  	call	DISK_INFO
  7617 00000E4D 87D3                    	XCHG	DX,BX
  7618                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7619                                  	; 06/01/2024
  7620 00000E4F 720B                    	jc	short BADFDRV
  7621 00000E51 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7622                                  DoSt:
  7623 00000E53 E82FF6                  	call	Get_User_Stack
  7624                                  ;ASSUME	DS:NOTHING
  7625                                  	;mov	[si+6],dx
  7626                                  	;;mov	[si+4],cx
  7627                                  	;;mov	[si+2],bx
  7628                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7629 00000E56 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7630                                  	;MOV	[SI+user_env.user_CX],CX
  7631                                  	;MOV	[SI+user_env.user_BX],BX
  7632                                  	;;MOV	[SI+user_env.user_AX],AX
  7633                                  	;mov	[si],ax
  7634                                  	;;return
  7635                                  	;retn
  7636                                  	; 09/01/2024
  7637 00000E59 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7638                                  
  7639                                  BADFDRV:
  7640                                  	; MSDOS 3.3
  7641                                  	;;mov	al,0Fh
  7642                                  	;mov	al,error_invalid_drive	; Assume error
  7643                                  
  7644                                  	; 13/05/2019 - Retro DOS v4.0
  7645                                  
  7646                                  	; MSDOS 6.0 & MSDOS 3.3
  7647                                  	;invoke	FCB_RET_ERR
  7648 00000E5C E8FBF7                  	call	FCB_RET_ERR
  7649                                  	
  7650 00000E5F B8FFFF                  	MOV	AX,-1
  7651 00000E62 EBEF                    	JMP	short DoSt
  7652                                  
  7653                                  ;EndProc $GET_DRIVE_FREESPACE
  7654                                  
  7655                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7656                                  ;----------------------------------------------------------------------------
  7657                                  ;**	$Get_DMA - Get Disk Transfer Address
  7658                                  ;
  7659                                  ;	ENTRY	none
  7660                                  ;	EXIT	ES:BX is current transfer address
  7661                                  ;	USES	all
  7662                                  
  7663                                  	; 09/01/2024
  7664                                  _$GET_DMA:
  7665 00000E64 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7666 00000E69 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7667 00000E6E E814F6                  	call	Get_User_Stack
  7668                                  	;mov	[si+2],bx
  7669                                  	;mov	[si+10h],cx
  7670                                  	; 09/01/2024
  7671                                  	;MOV	[SI+user_env.user_BX],BX
  7672 00000E71 894C10                  	MOV	[SI+user_env.user_ES],CX
  7673                                  	;retn
  7674                                  	; 09/01/2024
  7675 00000E74 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7676                                  
  7677                                  ;**	$Set_DMA - Set Disk Transfer Address
  7678                                  ;----------------------------------------------------------------------------
  7679                                  ;	ENTRY	DS:DX is current transfer address
  7680                                  ;	EXIT	none
  7681                                  ;	USES	all
  7682                                  
  7683                                  _$SET_DMA:
  7684 00000E77 368916[2C03]            	MOV	[SS:DMAADD],DX
  7685 00000E7C 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7686 00000E81 C3                      	retn
  7687                                  
  7688                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7689                                  ;------------------------------------------------------------------------------
  7690                                  
  7691                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7692                                  ;-----------------------------------------------------
  7693                                  ;	ENTRY	none
  7694                                  ;	EXIT	(AL) = drive number
  7695                                  ;	USES	all
  7696                                  
  7697                                  _$GET_DEFAULT_DRIVE:
  7698 00000E82 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7699 00000E86 C3                      	retn
  7700                                  
  7701                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7702                                  ;-----------------------------------------------------
  7703                                  ;	ENTRY	(DL) = Drive number for new default drive
  7704                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7705                                  
  7706                                  _$SET_DEFAULT_DRIVE:
  7707 00000E87 88D0                    	MOV	AL,DL
  7708 00000E89 FEC0                    	INC	AL			; A=1, B=2...
  7709 00000E8B E86E5B                  	call	GetVisDrv		; see if visible drive
  7710 00000E8E 7204                    	JC	short SETRET		; errors do not set
  7711 00000E90 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7712                                  
  7713                                  SETRET:
  7714 00000E94 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7715 00000E98 C3                      	retn
  7716                                  
  7717                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7718                                  ;----------------------------------------------------------------------------
  7719                                  
  7720                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7721                                  ;---------------------------------------------------
  7722                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7723                                  ;	contents of an interrupt vector.
  7724                                  ;
  7725                                  ;	ENTRY	(AL) = interrupt number
  7726                                  ;	EXIT	(ES:BX) = current interrupt vector
  7727                                  
  7728                                  _$GET_INTERRUPT_VECTOR:
  7729 00000E99 E82E00                  	CALL	RECSET
  7730 00000E9C 26C41F                  	LES	BX,[ES:BX]
  7731 00000E9F E8E3F5                  	call	Get_User_Stack
  7732                                  set_user_es_bx:
  7733                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7734                                  	;;mov	[si+2],bx
  7735                                  	;mov	[si+10h],es
  7736                                  	;MOV	[SI+user_env.user_BX],BX
  7737 00000EA2 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7738                                  	;retn
  7739 00000EA5 E9B7FD                  	jmp	set_user_bx
  7740                                  
  7741                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7742                                  ;---------------------------------------------------
  7743                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7744                                  ;	contents of an interrupt vector.
  7745                                  ;
  7746                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7747                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7748                                  ;	for explanation.
  7749                                  ;
  7750                                  ;	ENTRY	(AL) = interrupt number
  7751                                  ;		(ds:dx) = desired new vector value
  7752                                  ;	EXIT	none
  7753                                  ;	USES	all
  7754                                  
  7755                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7756                                  ; 13/05/2019 - Retro DOS v4.0
  7757                                  
  7758                                  _$SET_INTERRUPT_VECTOR:
  7759 00000EA8 E81F00                  	CALL	RECSET
  7760 00000EAB FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7761 00000EAC 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7762 00000EAF 268C5F02                	MOV	[ES:BX+2],DS
  7763 00000EB3 FB                      	STI
  7764                                  					; M004, M068 - Start
  7765                                  	; MSDOS 6.0
  7766 00000EB4 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7767                                  					; Q: was the previous call an int 21h
  7768                                  					;    exec call
  7769                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7770                                  	;jnz	short siv_1		; Y: go set count
  7771                                  	;retn				; N: return
  7772                                  	; 15/12/2022
  7773 00000EBA 740D                    	jz	short siv_2
  7774                                  siv_1:	
  7775 00000EBC 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7776 00000EC2 7505                    	jnz	short siv_2		 ; N: done
  7777                                  	; 20/09/2023
  7778 00000EC4 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7779                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7780                                  					 ; dispatcher to turn A20 Off before
  7781                                  					 ; returning to user.
  7782                                  siv_2:
  7783                                  	; 07/12/2022
  7784 00000EC9 C3                      	retn				; M004, M068 - End
  7785                                  	
  7786                                  RECSET:
  7787 00000ECA 31DB                    	XOR	BX,BX
  7788 00000ECC 8EC3                    	MOV	ES,BX
  7789 00000ECE 88C3                    	MOV	BL,AL
  7790 00000ED0 D1E3                    	SHL	BX,1
  7791 00000ED2 D1E3                    	SHL	BX,1
  7792 00000ED4 C3                      	retn
  7793                                  
  7794                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7795                                  ;-------------------------------------------------------------------------------------
  7796                                  
  7797                                  ;**	$Char_Oper - Manipulate Switch Character
  7798                                  ;
  7799                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7800                                  ;
  7801                                  ;	ENTRY	AL = function:
  7802                                  ;		    0 - read switch char
  7803                                  ;		    1 - set switch char (char in DL)
  7804                                  ;		    2 - read device availability
  7805                                  ;			Always returns available
  7806                                  ;		    3 - set device availability
  7807                                  ;			No longer supported (NOP)
  7808                                  ;	EXIT	(al) = 0xff iff error
  7809                                  ;		(al) != 0xff if ok
  7810                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7811                                  ;	USES	AL, DL
  7812                                  ;
  7813                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7814                                  ;		The character / is always returned for subfunction 0,
  7815                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7816                                  
  7817                                  ; 13/05/2019 - Retro DOS v4.0
  7818                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7819                                  
  7820                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7821                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7822                                  
  7823                                  _$CHAR_OPER:
  7824                                  	; MSDOS 6.0
  7825 00000ED5 08C0                    	or	al,al				; get switch?
  7826 00000ED7 B22F                    	mov	dl,'/'				; assume yes
  7827 00000ED9 7407                    	jz	short chop_1			; jump if yes
  7828 00000EDB 3C02                    	cmp	al,2				; check device availability?
  7829 00000EDD B2FF                    	mov	dl,-1				; assume yes
  7830 00000EDF 7401                    	jz	short chop_1			; jump if yes
  7831 00000EE1 C3                      	retn					; otherwise just quit
  7832                                  
  7833                                  ; subfunctions requiring return of value to user come here. DL holds
  7834                                  ; value to return
  7835                                  
  7836                                  chop_1:
  7837 00000EE2 E8A0F5                  	call	Get_User_Stack
  7838 00000EE5 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7839 00000EE8 C3                      	retn
  7840                                  
  7841                                  	; MSDOS 3.3
  7842                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7843                                  	;push	ss
  7844                                  	;pop	ds
  7845                                  	;cmp	al,1
  7846                                  	;jb	short chop_1
  7847                                  	;jz	short chop_2
  7848                                  	;cmp	al,3
  7849                                  	;jb	short chop_3
  7850                                  	;jz	short chop_5
  7851                                  	;mov	al,0FFh
  7852                                  	;retn
  7853                                  ;chop_1:
  7854                                  	;mov	dl,[chSwitch]
  7855                                  	;jmp	short chop_4
  7856                                  ;chop_2:
  7857                                  	;mov	[chSwitch],dl
  7858                                  	;retn
  7859                                  ;chop_3:
  7860                                  	;mov	dl, FFh
  7861                                  ;chop_4:
  7862                                  	;call	Get_User_Stack
  7863                                  	;mov	[si+6],dx
  7864                                  ;chop_5:
  7865                                  	;retn
  7866                                  
  7867                                  ;**	$GetExtendedError - Return Extended error code
  7868                                  ;----------------------------------------------------------------------------
  7869                                  ;	This function reads up the extended error info from the static
  7870                                  ;	variables where it was stored.
  7871                                  ;
  7872                                  ;	ENTRY	none
  7873                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7874                                  ;		BL = recommended action
  7875                                  ;		BH = class of error
  7876                                  ;		CH = locus of error
  7877                                  ;		ES:DI = may be pointer
  7878                                  ;	USES	ALL
  7879                                  
  7880                                  	; 09/01/2024
  7881                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7882                                  
  7883                                  _$GetExtendedError:
  7884 00000EE9 16                      	push	ss
  7885 00000EEA 1F                      	pop	ds
  7886 00000EEB A1[2403]                	MOV	AX,[EXTERR]
  7887 00000EEE C43E[2803]              	LES	DI,[EXTERRPT]
  7888 00000EF2 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7889 00000EF6 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7890 00000EFA E888F5                  	call	Get_User_Stack
  7891                                  	;mov	[si+0Ah],di
  7892 00000EFD 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7893                                  
  7894                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7895                                  	;;mov	[si+10h],es
  7896                                  	;MOV	[SI+user_env.user_ES],ES
  7897                                  	;;mov	[si+2],bx
  7898                                  	;MOV	[SI+user_env.user_BX],BX
  7899 00000F00 E89FFF                  	call	set_user_es_bx
  7900                                  
  7901                                  	;mov	[si+4],cx
  7902 00000F03 894C04                  	MOV	[SI+user_env.user_CX],CX
  7903                                  jmp_SYS_RET_OK:
  7904                                  	; 15/12/2022
  7905                                  	;jmp	SYS_RET_OK
  7906                                  	; 25/06/2019
  7907 00000F06 E935F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7908                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7909                                  ;jmp_SYS_RET_OK:
  7910                                  	;jmp	SYS_RET_OK
  7911                                  
  7912                                  ; --------------------------------------------------------------------------
  7913                                  ; 09/01/2024
  7914                                  %if 0
  7915                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7916                                  	; DOSCODE:4CF3h
  7917                                  ;patch_or_unknown:
  7918                                  ;get_code_page:
  7919                                  	push    si
  7920                                  	mov     si, COUNTRY_CDPG
  7921                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7922                                  	mov     ax, [ss:si+6Ah]
  7923                                  	pop     si
  7924                                  	retn
  7925                                  %endif
  7926                                  ; --------------------------------------------------------------------------
  7927                                  
  7928                                  ; 29/04/2019 - Retro DOS v4.0
  7929                                  
  7930                                  ;BREAK	<ECS_call - Extended Code System support function>
  7931                                  ;---------------------------------------------------------------------------
  7932                                  ; Inputs:
  7933                                  ;	AL = 0	get lead byte table
  7934                                  ;		on return DS:SI has the table location
  7935                                  ;
  7936                                  ;	AL = 1	set / reset interim console flag
  7937                                  ;		DL = flag (00H or 01H)
  7938                                  ;		no return
  7939                                  ;
  7940                                  ;	AL = 2	get interim console flag
  7941                                  ;		on return DL = current flag value
  7942                                  ;
  7943                                  ;	AL = OTHER then error, and returns with:
  7944                                  ;		AX = error_invalid_function
  7945                                  ;
  7946                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7947                                  ;	 SS:SP WILL BE PRESERVED!
  7948                                  ;---------------------------------------------------------------------------
  7949                                  
  7950                                  _$ECS_Call:
  7951 00000F09 08C0                    	or	al,al			; AL = 0 (get table)?
  7952                                  	;jnz	short _okok
  7953                                  	; 15/12/2022
  7954 00000F0B 7403                    	jz	short get_lbt
  7955                                  ;_okok:
  7956 00000F0D E92BF7                  	jmp	SYS_RET_OK
  7957                                  get_lbt:
  7958 00000F10 E872F5                  	call	Get_User_Stack		; *
  7959                                  
  7960                                  ;hkn; dbcs_table moved low to dosdata
  7961                                  	;mov	word [si+8],DBCS_TAB+2
  7962 00000F13 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7963                                  
  7964 00000F18 06                      	push	es
  7965                                  	;getdseg <es>			; es = DOSDATA
  7966 00000F19 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7967                                  	;mov	[si+14],es
  7968 00000F1E 8C440E                  	mov	[SI+user_env.user_DS],es
  7969 00000F21 07                      	pop	es
  7970                                  
  7971                                  	; 15/12/2022
  7972 00000F22 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7973                                  ;_okok:
  7974                                  	; 15/12/2022	
  7975                                  	;;transfer SYS_RET_OK
  7976                                  	;jmp	short jmp_SYS_RET_OK
  7977                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7978                                  	;;jmp	SYS_RET_OK
  7979                                  	;jmp	short jmp_SYS_RET_OK
  7980                                  
  7981                                  ;============================================================================
  7982                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7983                                  ;============================================================================
  7984                                  ; 19/07/2018 - Retro DOS v3.0
  7985                                  ; 15/05/2019 - Retro DOS v4.0
  7986                                  
  7987                                  ; System calls for parsing command lines
  7988                                  ;
  7989                                  ;   $PARSE_FILE_DESCRIPTOR
  7990                                  ;
  7991                                  ;   Modification history:
  7992                                  ;
  7993                                  ;       Created: ARR 30 March 1983
  7994                                  ;               EE PathParse 10 Sept 1983
  7995                                  ;
  7996                                  
  7997                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7998                                  ;---------------------------------------------------------------------------
  7999                                  ; Inputs:
  8000                                  ;       DS:SI Points to a command line
  8001                                  ;       ES:DI Points to an empty FCB
  8002                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8003                                  ;                   = 0 Parse stops if separator encountered
  8004                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8005                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8006                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8007                                  ;                   = 0  "       "      "       - put blanks in FCB
  8008                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8009                                  ;                   = 0  "       "      "        - put blanks in FCB
  8010                                  ; Function:
  8011                                  ;       Parse command line into FCB
  8012                                  ; Returns:
  8013                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8014                                  ;       DS:SI points to first character after filename
  8015                                  ;---------------------------------------------------------------------------
  8016                                  
  8017                                  _$PARSE_FILE_DESCRIPTOR:
  8018 00000F24 E8673F                  	call	MAKEFCB
  8019 00000F27 56                      	PUSH    SI
  8020 00000F28 E85AF5                  	call	Get_User_Stack
  8021                                  	;pop	word [si+8]
  8022 00000F2B 8F4408                  	POP     word [SI+user_env.user_SI]
  8023 00000F2E C3                      	retn
  8024                                  
  8025                                  ;============================================================================
  8026                                  ; MISC.ASM, MSDOS 6.0, 1991
  8027                                  ;============================================================================
  8028                                  ; 19/07/2018 - Retro DOS v3.0
  8029                                  
  8030                                  ; 29/04/2019 - Retro DOS v4.0
  8031                                  
  8032                                  ;ENTRYPOINTSEG	EQU	0CH
  8033                                  ;MAXDIF		EQU	0FFFH
  8034                                  ;SAVEXIT 	EQU	10
  8035                                  ;WRAPOFFSET	EQU	0FEF0h
  8036                                  
  8037                                  ;
  8038                                  ;----------------------------------------------------------------------------
  8039                                  ;
  8040                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8041                                  ;
  8042                                  ;	Return Stuff sort of like old get fat call
  8043                                  ;
  8044                                  ;	ENTRY	none
  8045                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8046                                  ;			GOD help anyone who tries to do ANYTHING except
  8047                                  ;			READ this ONE byte.
  8048                                  ;		DX = Total Number of allocation units on disk
  8049                                  ;		CX = Sector size
  8050                                  ;		AL = Sectors per allocation unit
  8051                                  ;		   = -1 if bad drive specified
  8052                                  ;	USES	all
  8053                                  ;
  8054                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8055                                  ;
  8056                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8057                                  ;
  8058                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8059                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8060                                  ;			GOD help anyone who tries to do ANYTHING except
  8061                                  ;			READ this ONE byte.
  8062                                  ;		DX = Total Number of allocation units on disk
  8063                                  ;		CX = Sector size
  8064                                  ;		AL = Sectors per allocation unit
  8065                                  ;		   = -1 if bad drive specified
  8066                                  ;	USES	all
  8067                                  ;
  8068                                  ;----------------------------------------------------------------------------
  8069                                  ;
  8070                                  
  8071                                  _$SLEAZEFUNC:
  8072                                  	; 10/01/2024
  8073                                  	; 15/05/2019 - Retro DOS v4.0
  8074 00000F2F B200                    	MOV	DL,0
  8075                                  _$SLEAZEFUNCDL:
  8076 00000F31 16                      	push	ss
  8077 00000F32 1F                      	pop	ds
  8078                                  	
  8079 00000F33 88D0                    	MOV	AL,DL
  8080 00000F35 E8E05A                  	call	GETTHISDRV		; Get CDS structure
  8081                                  SET_AL_RET:
  8082                                  	; MSDOS 3.3
  8083                                  	;;mov	al, 0Fh
  8084                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8085                                  	
  8086                                  	; MSDOS 6.0 & MSDOS 3.3
  8087 00000F38 721D                    	JC	short BADSLDRIVE
  8088                                  
  8089 00000F3A E83F1D                  	call	DISK_INFO
  8090                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8091 00000F3D 7218                    	jc	short BADSLDRIVE
  8092 00000F3F 8826[9805]              	MOV	[FATBYTE],AH
  8093                                  
  8094                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8095                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8096                                  ; CALL AGAIN
  8097                                  
  8098                                  	; 10/01/2024
  8099                                  	;MOV	DI,FATBYTE
  8100 00000F43 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8101 00000F45 E83DF5                  	call	Get_User_Stack
  8102                                  	;mov	[si+4],cx
  8103                                  	;mov	[si+6],bx
  8104                                  	;mov	[si+2],di
  8105 00000F48 894C04                  	MOV	[SI+user_env.user_CX],CX
  8106 00000F4B 895C06                  	MOV	[SI+user_env.user_DX],BX
  8107                                  	;MOV	[SI+user_env.user_BX],DI
  8108                                  	; 10/01/2024
  8109 00000F4E C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8110                                  	
  8111                                  	;mov	[si+0Eh],ss
  8112 00000F53 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8113                                  
  8114 00000F56 C3                      	retn
  8115                                  
  8116                                  BADSLDRIVE:
  8117 00000F57 E900F7                  	jmp	FCB_RET_ERR
  8118                                  
  8119                                  ;
  8120                                  ;----------------------------------------------------------------------------
  8121                                  ;
  8122                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8123                                  ;
  8124                                  ;	Returns location of DOS status for interrupt routines
  8125                                  ;
  8126                                  ;	ENTRY	none
  8127                                  ;	EXIT	(es:bx) = flag location
  8128                                  ;	USES	all
  8129                                  ;
  8130                                  ;----------------------------------------------------------------------------
  8131                                  ;
  8132                                  
  8133                                  _$GET_INDOS_FLAG:
  8134 00000F5A E828F5                          CALL	Get_User_Stack
  8135                                          ;MOV	WORD [SI+2],INDOS
  8136 00000F5D C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8137                                  getin_segm:	; 13/01/2024
  8138                                  	;MOV	[SI+10H],SS
  8139 00000F62 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8140 00000F65 C3                      	RETN 
  8141                                  ;
  8142                                  ;----------------------------------------------------------------------------
  8143                                  ;
  8144                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8145                                  ;
  8146                                  ;	Return a pointer to interesting DOS variables This call is version
  8147                                  ;	dependent and is subject to change without notice in future versions.
  8148                                  ;	Use at risk.
  8149                                  ;
  8150                                  ;	ENTRY	none
  8151                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8152                                  ;	uses	ALL
  8153                                  ;
  8154                                  ;----------------------------------------------------------------------------
  8155                                  ;
  8156                                  
  8157                                  	; 13/01/2024
  8158                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8159                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8160                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8161                                  
  8162                                  _$GET_IN_VARS:
  8163 00000F66 E81CF5                  	CALL	Get_User_Stack
  8164                                  	;MOV	WORD [SI+2],SYSINITVAR
  8165                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8166 00000F69 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8167                                  	; 13/01/2024
  8168                                  	;;MOV	[SI+10H],SS
  8169                                  	;MOV	[SI+user_env.user_ES],SS
  8170                                  	;RETN
  8171 00000F6E EBF2                    	jmp	short getin_segm
  8172                                  
  8173                                  ;
  8174                                  ;----------------------------------------------------------------------------
  8175                                  ;
  8176                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8177                                  ;
  8178                                  ;	Return pointer to drive parameter table for default drive
  8179                                  ;
  8180                                  ;	ENTRY	none
  8181                                  ;	EXIT	(ds:bx) = DPB address
  8182                                  ;	USES	all
  8183                                  ;
  8184                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8185                                  ;
  8186                                  ;	Return pointer to a specified drive parameter table
  8187                                  ;
  8188                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8189                                  ;	EXIT	(al) = 0 iff ok
  8190                                  ;		  (ds:bx) = DPB address
  8191                                  ;		(al) = -1 if bad drive
  8192                                  ;	USES	all
  8193                                  ;
  8194                                  ;----------------------------------------------------------------------------
  8195                                  ;
  8196                                  
  8197                                  ; 15/05/2019 - Retro DOS v4.0
  8198                                  
  8199                                  _$GET_DEFAULT_DPB:
  8200 00000F70 B200                    	MOV	DL,0
  8201                                  _$GET_DPB:
  8202 00000F72 16                      	push	ss
  8203 00000F73 1F                      	pop	ds
  8204                                  
  8205 00000F74 88D0                    	MOV	AL,DL
  8206 00000F76 E89F5A                  	call	GETTHISDRV		; Get CDS structure
  8207 00000F79 7222                    	JC	short ISNODRV 		; no valid drive
  8208 00000F7B C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8209                                  	;;test	word [es:di+43h],8000h
  8210                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8211                                  	;test	byte [es:di+44h],80h
  8212 00000F7F 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8213 00000F84 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8214 00000F86 E88903                  	call	ECritDisk
  8215 00000F89 E8C946                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8216 00000F8C E89E03                  	call	LCritDisk
  8217 00000F8F 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8218                                  					;   have.
  8219 00000F91 E8F1F4                  	call	Get_User_Stack
  8220                                  	;mov	[si+2],bp
  8221 00000F94 896C02                  	MOV	[SI+user_env.user_BX],BP
  8222                                  	;mov	[si+0Eh],es
  8223 00000F97 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8224 00000F9A 30C0                    	XOR	AL,AL
  8225 00000F9C C3                      	retn
  8226                                  ISNODRV:
  8227 00000F9D B0FF                    	MOV	AL,-1
  8228 00000F9F C3                      	retn
  8229                                  
  8230                                  ;
  8231                                  ;----------------------------------------------------------------------------
  8232                                  ;
  8233                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8234                                  ;
  8235                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8236                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8237                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8238                                  ;
  8239                                  ;	ENTRY	none
  8240                                  ;	EXIT	none
  8241                                  ;	USES	all
  8242                                  ;
  8243                                  ;----------------------------------------------------------------------------
  8244                                  ;
  8245                                  
  8246                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8247                                  	; DOSCODE:4D94h
  8248                                  _$DISK_RESET:
  8249                                  	; 15/05/2019 - Retro DOS v4.0
  8250 00000FA0 B0FF                    	mov	al,0FFh	; -1
  8251 00000FA2 16                      	push	ss
  8252 00000FA3 1F                      	pop	ds
  8253                                  	; 06/11/2022
  8254                                  	;MOV	AL,-1
  8255 00000FA4 E86B03                  	call	ECritDisk
  8256                                  	; MSDOS 6.0
  8257                                  	;;or	word [DOS34_FLAG],4
  8258                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8259 00000FA7 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8260 00000FAC E81F4A                  	call	FLUSHBUF
  8261                                  	; MSDOS 6.0
  8262                                  	;and	word [DOS34_FLAG],0FFFBh
  8263                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8264                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8265                                  	; 15/12/2022
  8266 00000FAF 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8267 00000FB4 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8268                                  ;
  8269                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8270                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8271                                  ; let's do it.
  8272                                  ;
  8273                                  ; Invalidate 'last-buffer' used
  8274                                  ;
  8275 00000FBA BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8276 00000FBD 891E[2000]              	MOV	[LastBuffer+2],BX
  8277 00000FC1 891E[1E00]              	MOV	[LastBuffer],BX
  8278                                  
  8279                                  	; MSDOS 3.3 
  8280                                  	; IBMDOS.COM, Offset 1C66h
  8281                                  	;;;;
  8282                                  	;lds	si,[BUFFHEAD]
  8283                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8284                                  				; .buf_flags, AH = 0, reset/clear
  8285                                  ;DRST_1:
  8286                                  	;;mov	[si+4],ax
  8287                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8288                                  	;lds	si,[SI]
  8289                                  	;cmp	si,bx ; -1
  8290                                  	;je	short DRST_2
  8291                                  	;;mov	[si+4],ax
  8292                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8293                                  	;lds	si,[SI]
  8294                                  	;cmp	si,bx
  8295                                  	;jne	short DRST_1
  8296                                  	;;;;
  8297                                  ;DRST_2:
  8298 00000FC5 E86503                  	call	LCritDisk
  8299 00000FC8 B8FFFF                  	MOV	AX,-1
  8300                                  	; 07/12/2022
  8301                                  	;mov	ax,0FFFFh
  8302                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8303 00000FCB 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8304 00000FCC B82011                  	mov     ax,1120h
  8305 00000FCF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8306                                  			; DS = DOS CS
  8307                                  			; Return: CF clear (successful)
  8308 00000FD1 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8309                                  	
  8310 00000FD2 C3                      	retn
  8311                                  
  8312                                  	; 19/07/2018 - Retro DOS v3.0
  8313                                  
  8314                                  ;
  8315                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8316                                  ;
  8317                                  ;----------------------------------------------------------------------------
  8318                                  ;
  8319                                  ;**	$SetDPB - Create a DPB
  8320                                  ;
  8321                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8322                                  ;
  8323                                  ;	ENTRY	ES:BP Points to DPB
  8324                                  ;		DS:SI Points to BPB
  8325                                  ;	EXIT	DPB setup
  8326                                  ;	USES	ALL but BP, DS, ES
  8327                                  ;
  8328                                  ;----------------------------------------------------------------------------
  8329                                  ;
  8330                                  
  8331                                  ; 10/05/2019 - Retro DOS v4.0
  8332                                  
  8333                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8334                                  
  8335                                  ; MSDOS 6.0
  8336 00000FD3 0300                    word3:	dw	3			; M008 -- word value for divides
  8337                                  
  8338                                  ; 13/01/2024
  8339                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8340                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8341                                  
  8342                                  ;procedure   $SETDPB,NEAR
  8343                                  
  8344                                  _$SETDPB:
  8345 00000FD5 89EF                    	MOV	DI,BP
  8346                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8347                                  	; 13/01/2024
  8348 00000FD7 47                      	inc	di
  8349 00000FD8 47                      	inc	di
  8350 00000FD9 AD                      	LODSW
  8351 00000FDA AB                      	STOSW				; dpb_sector_size
  8352                                  	; MSDOS 6.0
  8353                                  	;cmp	byte [si+3],0
  8354 00000FDB 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8355 00000FDF 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8356                                  	;mov	byte [es:di+4],0
  8357 00000FE1 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8358                                  	; 13/01/2024
  8359 00000FE6 89C3                    	mov	bx,ax
  8360 00000FE8 EB70                    	JMP	short setend			     ; NO		;AN000;
  8361                                  
  8362                                  yesfat: ; 10/08/2018
  8363 00000FEA 89C2                    	MOV	DX,AX
  8364 00000FEC AC                      	LODSB
  8365                                  	;DEC	AL
  8366                                  	; 17/12/2022
  8367 00000FED 48                      	dec	ax
  8368 00000FEE AA                      	STOSB				; dpb_cluster_mask
  8369                                  	;INC	AL
  8370 00000FEF 40                      	inc	ax
  8371 00000FF0 30E4                    	XOR	AH,AH
  8372                                  LOG2LOOP:
  8373 00000FF2 A801                    	test	AL,1
  8374 00000FF4 7506                    	JNZ	short SAVLOG
  8375 00000FF6 FEC4                    	INC	AH
  8376 00000FF8 D0E8                    	SHR	AL,1
  8377 00000FFA EBF6                    	JMP	SHORT LOG2LOOP
  8378                                  SAVLOG:
  8379 00000FFC 88E0                    	MOV	AL,AH
  8380 00000FFE AA                      	STOSB				; dpb_cluster_shift
  8381 00000FFF 88C3                    	MOV	BL,AL
  8382 00001001 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8383 00001002 AC                      	LODSB
  8384 00001003 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8385                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8386                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8387 00001004 88C7                    	MOV	BH,AL
  8388 00001006 AD                      	LODSW
  8389 00001007 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8390 00001008 B105                    	MOV	CL,5
  8391 0000100A D3EA                    	SHR	DX,CL			; Directory entries per sector
  8392 0000100C 48                      	DEC	AX
  8393 0000100D 01D0                    	ADD	AX,DX			; Cause Round Up
  8394 0000100F 89D1                    	MOV	CX,DX
  8395 00001011 31D2                    	XOR	DX,DX
  8396 00001013 F7F1                    	DIV	CX
  8397 00001015 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8398 00001017 47                      	INC	DI
  8399 00001018 47                      	INC	DI			; Skip dpb_first_sector
  8400 00001019 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8401 0000101A AC                      	LODSB
  8402                                  	;mov	[es:bp+17h],al
  8403 0000101B 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8404 0000101F AD                      	LODSW				; Number of sectors in a FAT
  8405                                  	
  8406                                  	;;;
  8407                                  	;MSDOS 3.3
  8408                                  	;
  8409                                  	;STOSB		; DPB.FAT_SIZE
  8410                                  	;MUL	BH
  8411                                  	
  8412                                  	;MSDOS 6.0
  8413                                  	;
  8414 00001020 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8415 00001021 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8416 00001023 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8417 00001025 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8418                                  	;;;
  8419                                  	
  8420                                  	;add	ax,[es:bp+6]
  8421 00001027 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8422 0000102B AB                      	STOSW				; dpb_dir_sector
  8423 0000102C 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8424                                  	;mov	[es:bp+0Bh],ax
  8425 0000102E 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8426                                  	
  8427                                  	; MSDOS 6.0
  8428 00001032 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8429                                  	;;cmp	word [es:bp+0Dh],0
  8430                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8431                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8432                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8433                                  	; 15/12/2022
  8434                                  	; 28/07/2019
  8435 00001034 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8436 00001038 09DB                    	or	bx,bx
  8437 0000103A 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8438                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8439                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8440                                  	
  8441                                  
  8442 0000103C 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8443                                  	;mov	bx,[si+8]
  8444 0000103E 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8445                                  	;mov	dx,[si+10]
  8446 00001041 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8447 00001044 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8448 00001046 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8449 00001049 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8450 0000104B 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8451                                  rott:					;AN000;;F.C. >32mb
  8452 0000104D F8                      	CLC				;AN000;;F.C. >32mb
  8453 0000104E D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8454 00001050 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8455 00001052 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8456                                  norot:					;AN000;
  8457                                  	; 15/12/2022
  8458                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8459 00001054 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8460                                  normal_dpb:
  8461                                  	;;sub	ax,[es:bp+0Dh]
  8462                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8463                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8464                                  	; 15/12/2022
  8465                                  	; bx = [es:bp+DSKSIZ]
  8466                                  	;sub	ax,bx ; 28/07/2019
  8467                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8468                                  	; 15/12/2022
  8469 00001056 29C3                    	sub	bx,ax
  8470                                  	;NEG	AX			; Sectors in data area
  8471                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8472                                  	; 15/12/2022
  8473                                  	; CL = cluster shift
  8474                                  	; BX = number of data sectors 
  8475                                  	;SHR	AX,CL			; Div by sectors/cluster
  8476 00001058 D3EB                    	shr	bx,cl 
  8477                                  setend:
  8478                                  ;	M008 - CAS
  8479                                  ;
  8480                                  	; 15/12/2022
  8481 0000105A 43                      	inc	bx
  8482                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8483                                  ;
  8484                                  ;	There has been a bug in our fatsize calculation for so long
  8485                                  ;	  that we can't correct it now without causing some user to
  8486                                  ;	  experience data loss. There are even cases where allowing
  8487                                  ;	  the number of clusters to exceed the fats is the optimal
  8488                                  ;	  case -- where adding 2 more fat sectors would make the
  8489                                  ;	  data field smaller so that there's nothing to use the extra
  8490                                  ;	  fat sectors for.
  8491                                  ;
  8492                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8493                                  ;	  still report that there was a cluster left when the disk was
  8494                                  ;	  actually full. Very graceful failure for a corrupt system
  8495                                  ;	  configuration. There may be worse cases that were never
  8496                                  ;	  properly traced back to this bug. The problem cases only
  8497                                  ;	  occurred when partition sizes were very near FAT sector
  8498                                  ;	  rounding boundaries, which were rare cases.
  8499                                  ;
  8500                                  ;	Also, it's possible that some third-party partition program might
  8501                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8502                                  ;	  scheme. In this hypothetical case, the number of allocation
  8503                                  ;	  clusters which don't actually have FAT entries to represent
  8504                                  ;	  them might be larger and might create a more catastrophic
  8505                                  ;	  failure. So we'll provide the safeguard of limiting the
  8506                                  ;	  max_cluster to the amount that will fit in the FATs.
  8507                                  ;
  8508                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8509                                  
  8510                                  ;	make sure the number of fat sectors is actually enough to
  8511                                  ;	  hold that many clusters. otherwise, back the number of
  8512                                  ;	  clusters down
  8513                                  
  8514                                  	; 15/12/2022
  8515                                  	; bx = number of clusters
  8516                                  
  8517                                  	; 19/07/2018 - Retro DOS v3.0
  8518                                  	; MSDOS 6.0
  8519                                  	; 15/12/2022
  8520                                  	;mov	bx,ax			; remember calculated # clusters
  8521                                  
  8522                                  	; 01/08/2018 (MSDOS 3.3)
  8523                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8524                                  	;xor	ah,ah 
  8525                                  
  8526                                  	; 10/05/2019 - Retro DOS v4.0
  8527                                  	;mov	ax,[ES:BP+0Fh]
  8528 0000105B 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8529                                  
  8530                                  	;mul	word [es:bp+2]	
  8531 0000105F 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8532 00001063 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8533 00001067 720D                    	jb	short setend_fat12
  8534 00001069 D1EA                    	shr	dx,1
  8535                                  
  8536                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8537                                  	; 15/12/2022
  8538                                  ;cs3 7/2/92
  8539 0000106B 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8540                                  					; than enough for the maximum FAT,
  8541                                  					; so go ahead and use the calculated
  8542                                  					; number of clusters.
  8543                                  ;cs3 7/2/92
  8544                                  
  8545 0000106D D1D8                    	rcr	ax,1			; find number of entries
  8546 0000106F 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8547                                  ;					;  into 12-bit fatland?
  8548 00001072 7215                    	jb	short setend_faterr	; then go ahead and let the
  8549                                  ;					;  inconsistency pass through
  8550                                  ;					;  rather than lose data by
  8551                                  ;					;  correcting the fat type
  8552 00001074 EB0E                    	jmp	short setend_fat16
  8553                                  
  8554                                  setend_fat12:
  8555 00001076 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8556 00001078 11D2                    	adc	dx,dx
  8557                                  
  8558                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8559                                  ;cs3 7/2/92
  8560                                  	; 15/12/2022
  8561 0000107A 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8562 0000107D 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8563                                  					; here. Check for it and use
  8564                                  					; the calculated size in this case.
  8565                                  ;cs3 7/2/92
  8566                                  
  8567 0000107F 2EF736[D30F]            	div	word [cs:word3]
  8568                                  
  8569                                  setend_fat16:
  8570 00001084 48                      	dec	ax			; limit at 1
  8571 00001085 39D8                    	cmp	ax,bx			; is fat big enough?
  8572 00001087 7602                    	jbe	short setend_fat	; use max value that'll fit
  8573                                  
  8574                                  setend_faterr:
  8575 00001089 89D8                    	mov	ax,bx			; use calculated value
  8576                                  
  8577                                  setend_fat:
  8578                                  
  8579                                  ;	now ax = maximum legal cluster
  8580                                  
  8581                                  ;	end M008
  8582                                  
  8583                                  	;mov	[es:bp+0Dh], ax
  8584 0000108B 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8585                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8586                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8587 0000108F 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8588                                  					; Init so first ALLOC starts at
  8589                                  					; begining of FAT
  8590                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8591                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8592 00001095 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8593                                  
  8594 0000109B C3                      	retn
  8595                                  
  8596                                  ;EndProc $SETDPB
  8597                                  
  8598                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8599                                  
  8600                                  ;
  8601                                  ;----------------------------------------------------------------------------
  8602                                  ;
  8603                                  ;**	$Dup_PDB
  8604                                  ;
  8605                                  ; Inputs:   DX is new segment address of process
  8606                                  ;	    SI is end of new allocation block
  8607                                  ;
  8608                                  ;----------------------------------------------------------------------------
  8609                                  ;
  8610                                  
  8611                                  _$DUP_PDB:
  8612                                  
  8613                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8614                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8615                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8616                                  
  8617                                  	; MSDOS 3.3
  8618                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8619                                  	;MOV	DS,[CS:CurrentPDB]
  8620                                  
  8621                                  	; 15/05/2019 - Retro DOS v4.0
  8622                                  	; MSDOS 6.0
  8623 0000109C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8624 000010A1 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8625 000010A6 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8626                                  
  8627 000010AA 56                      	PUSH	SI
  8628 000010AB EB0A                    	JMP	SHORT CreateCopy
  8629                                  
  8630                                  ;
  8631                                  ;----------------------------------------------------------------------------
  8632                                  ;
  8633                                  ; Inputs:
  8634                                  ;	DX = Segment number of new base
  8635                                  ; Function:
  8636                                  ;	Set up program base and copy term and ^C from int area
  8637                                  ; Returns:
  8638                                  ;	None
  8639                                  ; Called at DOS init
  8640                                  ;
  8641                                  ;----------------------------------------------------------------------------
  8642                                  ;
  8643                                  
  8644                                  ; 15/05/2019 - Retro DOS v4.0
  8645                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8646                                  
  8647                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8648                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8649                                  
  8650                                  _$CREATE_PROCESS_DATA_BLOCK:
  8651                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8652 000010AD E8D5F3                  	CALL	Get_User_Stack
  8653                                  	;mov	ds,[si+14h]
  8654 000010B0 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8655                                  	;push	word [2]
  8656 000010B3 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8657                                  CreateCopy:
  8658 000010B7 8EC2                    	MOV	ES,DX
  8659                                  
  8660 000010B9 31F6                    	XOR	SI,SI			; copy entire PDB
  8661 000010BB 89F7                    	MOV	DI,SI
  8662 000010BD B98000                  	MOV	CX,128
  8663 000010C0 F3A5                    	REP	MOVSW
  8664                                  
  8665                                  ; DOS 3.3 7/9/86
  8666                                  	;mov	cx,20
  8667                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8668                                  	; 15/12/2022
  8669 000010C2 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8670                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8671                                  	;mov	cx,FILPERPROC
  8672                                  
  8673                                  	;mov	di,18h
  8674 000010C4 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8675                                  	;;PUSH	DS ; * 15/05/2019
  8676                                  	;;lds	si,[34h]
  8677                                  	;LDS	SI,[PDB.JFN_Pointer]
  8678                                  	;REP	MOVSB
  8679                                  	;;POP	DS ; * 15/05/2019
  8680                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8681                                  	; 05/12/2022
  8682                                  	; (push ds then pop ds is not needed here!)
  8683                                  	;push	ds
  8684                                  	;lds	si,[34h]
  8685 000010C7 C5363400                	lds	si,[PDB.JFN_Pointer]
  8686 000010CB F3A4                    	rep	movsb
  8687                                  	;pop	ds
  8688                                  
  8689                                  ; DOS 3.3 7/9/86
  8690                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8691                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8692                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8693                                  
  8694 000010CD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8695                                  
  8696                                  	;;test	byte [cs:CreatePDB],0FFh
  8697                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8698                                  	; 17/12/2022
  8699 000010D2 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8700                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8701 000010D6 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8702                                  
  8703                                  ; Here we set up for a new process...
  8704                                  
  8705                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8706                                  	;POP	DS
  8707                                  
  8708                                  	; MSDOS 6.0
  8709                                  	;;getdseg <ds>			; ds -> dosdata
  8710                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8711                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8712                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8713                                  	; 15/12/2022
  8714                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8715                                  
  8716 000010D8 31DB                    	XOR	BX,BX			; dup all jfns
  8717                                  	;mov	cx,20
  8718                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8719                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8720                                  	; 15/12/2022
  8721 000010DA B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8722                                  
  8723                                  Create_dup_jfn:
  8724 000010DC 06                      	PUSH	ES ;**			; save new PDB
  8725 000010DD E81455                  	call	SFFromHandle		; get sf pointer
  8726 000010E0 B0FF                    	MOV	AL,-1			; unassigned JFN
  8727 000010E2 7224                    	JC	short CreateStash	; file was not really open
  8728                                  	;;test	word [es:di+5],1000h
  8729                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8730                                  	; 15/05/2019
  8731                                  	;test	byte [es:di+6],10h
  8732 000010E4 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8733 000010E9 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8734                                  
  8735                                  ; We do not inherit network file handles.
  8736                                  
  8737                                  	;mov	ah,[es:di+2]
  8738 000010EB 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8739                                  	;and	ah,0F0h
  8740 000010EF 80E4F0                  	AND	AH,SHARING_MASK
  8741                                  	;cmp	ah,70h
  8742 000010F2 80FC70                  	CMP	AH,SHARING_NET_FCB
  8743 000010F5 7411                    	jz	short CreateStash
  8744                                  
  8745                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8746                                  ; duplication operation.
  8747                                  
  8748 000010F7 893E[9E05]              	MOV	[THISSFT],DI
  8749 000010FB 8C06[A005]              	MOV	[THISSFT+2],ES
  8750 000010FF E8D618                  	call	DOS_DUP 		; signal duplication
  8751                                  
  8752                                  ; get the old sfn for copy
  8753                                  
  8754 00001102 E8D254                  	call	pJFNFromHandle		; ES:DI is jfn
  8755 00001105 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8756                                  
  8757                                  ; Take AL (old sfn or -1) and stash it into the new position
  8758                                  
  8759                                  CreateStash:
  8760 00001108 07                      	POP	ES ;**
  8761                                  	;mov	[es:bx+18h],al
  8762 00001109 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8763 0000110D 43                      	INC	BX			; next jfn...
  8764 0000110E E2CC                    	LOOP	Create_dup_jfn
  8765                                  
  8766 00001110 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8767                                  	; 06/11/2022
  8768                                  	;mov	[es:16h],bx
  8769 00001114 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8770 00001119 8C06[3003]              	MOV	[CurrentPDB],ES
  8771                                  	;MOV	DS,BX ; 28/07/2019
  8772                                  	; 07/12/2022
  8773                                  	;mov	ds,[cs:DosDSeg]
  8774                                  	; 15/12/2022
  8775                                  	; ds = [cs:DosDSeg]
  8776 0000111D C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8777                                  	;mov	ds,bx
  8778                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8779                                  	; 15/12/2022
  8780                                  	;mov	ds,bx
  8781                                  
  8782                                  ; end of new process create
  8783                                  
  8784                                  Create_PDB_cont:
  8785                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8786                                  
  8787                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8788                                  
  8789                                  	;; 28/07/2019
  8790                                  	;;push	ds
  8791                                  	;;mov	ds,[cs:DosDSeg]
  8792                                  	;mov	byte [CreatePDB],0
  8793                                  	;;pop	ds
  8794                                  
  8795                                  ; 05/12/2022
  8796                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8797                                  ;	; (push-pop ds is nonsense here! 
  8798                                  ;	;  but i am using same code with original MSDOS.SYS
  8799                                  ;	;  for address compatibility.)
  8800                                  ;	push	ds
  8801                                  ;	; ds = [cs:DosDSeg] !
  8802                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8803                                  ;	mov	byte [CreatePDB],0
  8804                                  ;	pop	ds
  8805                                  
  8806 00001122 58                      	POP	AX ;*
  8807                                  
  8808                                  	;entry	SETMEM
  8809                                  
  8810                                  	; 17/12/2022
  8811                                  	; cx = 0
  8812                                  
  8813                                  ;---------------------------------------------------------------------------
  8814                                  ; Inputs:
  8815                                  ;	AX = Size of memory in paragraphs
  8816                                  ;	DX = Segment
  8817                                  ; Function:
  8818                                  ;	Completely prepares a program base at the
  8819                                  ;	specified segment.
  8820                                  ; Called at DOS init
  8821                                  ; Outputs:
  8822                                  ;	DS = DX
  8823                                  ;	ES = DX
  8824                                  ;	[0] has INT int_abort
  8825                                  ;	[2] = First unavailable segment
  8826                                  ;	[5] to [9] form a long call to the entry point
  8827                                  ;	[10] to [13] have exit address (from int_terminate)
  8828                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8829                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8830                                  ; DX,BP unchanged. All other registers destroyed.
  8831                                  ;---------------------------------------------------------------------------
  8832                                  
  8833                                  SETMEM:
  8834                                  	;XOR	CX,CX
  8835                                  	; 17/12/2022
  8836                                  	; cx = 0
  8837 00001123 8ED9                    	MOV	DS,CX
  8838 00001125 8EC2                    	MOV	ES,DX
  8839                                  	;mov	si,88h
  8840 00001127 BE8800                  	MOV	SI,addr_int_terminate
  8841                                  	;mov	di,10 ; 0Ah
  8842 0000112A BF0A00                  	MOV	DI,SAVEXIT
  8843                                  	;MOV	CX,6
  8844                                  	; 15/12/2022
  8845 0000112D B106                    	mov	cl,6
  8846 0000112F F3A5                    	REP	MOVSW
  8847 00001131 26A30200                	MOV	[ES:2],AX
  8848 00001135 29D0                    	SUB	AX,DX
  8849 00001137 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8850 0000113A 7603                    	JBE	short HAVDIF
  8851 0000113C B8FF0F                  	MOV	AX,MAXDIF
  8852                                  HAVDIF:
  8853 0000113F 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8854 00001142 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8855 00001145 29C3                    	SUB	BX,AX
  8856 00001147 B104                    	MOV	CL,4
  8857 00001149 D3E0                    	SHL	AX,CL
  8858 0000114B 8EDA                    	MOV	DS,DX
  8859                                  
  8860                                  	; (MSDOS 6.0 note)
  8861                                  	;
  8862                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8863                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8864                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8865                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8866                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8867                                  	; making this equvalence valid for this particular case. If however
  8868                                  	; there is less than 64K remaining the address in BX:AX will not 
  8869                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8870                                  	; into the PSP.
  8871                                  	;
  8872                                  	; Therefore for the case where there is less than 64K remaining in 
  8873                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8874                                  	; requirements will not work. Call 5, however will continue to work
  8875                                  	; for all cases.
  8876                                  	;
  8877                                  
  8878                                  	;mov	[6],ax
  8879                                  	;mov	[8],bx
  8880                                  
  8881 0000114D A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8882 00001150 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8883                                  
  8884                                  	; 06/05/2019 - Retro DOS v4.0
  8885 00001154 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8886                                  					;    memory left
  8887 00001157 740C                    	je	short addr_ok		; Y: the above calculated address is
  8888                                  					;    OK
  8889                                  					; N: 
  8890                                  
  8891 00001159 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8892 0000115F C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8893                                  addr_ok:
  8894                                  	;mov	word [0],20CDh
  8895 00001165 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8896                                  	;mov	byte [5],9Ah
  8897 0000116B C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8898                                  	;mov	word [50h],21CDh
  8899 00001170 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8900                                  	;mov	byte [52h],0CBh
  8901 00001176 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8902                                  	;mov	word [34h],18h
  8903 0000117B C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8904                                  	;mov	word [36h],ds
  8905 00001181 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8906                                  	;mov	word [32h],20
  8907 00001185 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8908                                  ;
  8909                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8910                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8911                                  ; particular SFT.  We perform this by requiring that the server link together
  8912                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8913                                  ; initialize this pointer.
  8914                                  ;
  8915                                   	;mov	word [38h],-1
  8916 0000118B C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8917                                  	;mov	word [3Ah],-1
  8918 00001191 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8919                                  
  8920                                  	; 06/05/2019
  8921                                  	; Set the real version number in the PSP - 5.00
  8922                                  
  8923                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8924                                  	; 07/12/2022
  8925 00001197 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8926                                  
  8927 0000119E C3                      	retn
  8928                                  
  8929                                  ; 29/04/2019 - Retro DOS v4.0
  8930                                  
  8931                                  ;BREAK <$GSetMediaID -- get set media ID>
  8932                                  
  8933                                  ;---------------------------------------------------------------------------
  8934                                  ; Inputs:
  8935                                  ;	BL= drive number as defined in IOCTL
  8936                                  ;	AL= 0 get media ID
  8937                                  ;	    1 set media ID
  8938                                  ;	DS:DX= buffer containing information
  8939                                  ;		DW  0  info level (set on input)
  8940                                  ;		DD  ?  serial #
  8941                                  ;		DB  11 dup(?)  volume id
  8942                                  ;		DB   8 dup(?)  file system type
  8943                                  ; Function:
  8944                                  ;	Get or set media ID
  8945                                  ; Returns:
  8946                                  ;	carry clear, DS:DX is filled
  8947                                  ;	carry set, error
  8948                                  ;---------------------------------------------------------------------------
  8949                                  
  8950                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8951                                  _$GSetMediaID:
  8952                                  	; RAWIO - GET_MEDIA_ID
  8953 0000119F B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8954 000011A2 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8955 000011A4 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8956                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8957                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8958                                  	; 15/12/2022
  8959 000011A6 FEC8                    	dec	al
  8960 000011A8 7507                    	jnz	short errorfunc ; al > 1
  8961                                  	; RAWIO - SET_MEDIA_ID
  8962                                  	;mov	cx,0846h	      ;AN001;MS.;
  8963                                  	; 15/12/2022
  8964 000011AA B146                    	mov	cl,46h	; cx = 0846h 
  8965                                  doioctl:			      ;AN000;
  8966 000011AC B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8967                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8968                                  	;call	_$IOCTL
  8969                                  	;retn			      ;AN000;MS.;
  8970                                  	; 15/12/2022
  8971 000011AE E98C10                  	jmp	_$IOCTL
  8972                                  errorfunc:			      ;AN000;
  8973                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8974                                  	;mov	al,1
  8975 000011B1 B001                    	mov	al,error_invalid_function
  8976 000011B3 E98EF4                  	jmp	SYS_RET_ERR
  8977                                  
  8978                                  ; 16/05/2019 - Retro DOS v4.0
  8979                                  
  8980                                  ;============================================================================
  8981                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8982                                  ;============================================================================
  8983                                  ; 20/07/2018 - Retro DOS v3.0
  8984                                  ; 29/04/2019 - Retro DOS v4.0
  8985                                  
  8986                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8987                                  ;----------------------------------------------------------------------------
  8988                                  ;
  8989                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8990                                  ;	     Strings of different lengths don't match.
  8991                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8992                                  ;   Outputs: Z if strings same, NZ if different
  8993                                  ;   Registers modified: NONE
  8994                                  ;----------------------------------------------------------------------------
  8995                                  
  8996                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8997                                  StrCmp:
  8998 000011B6 56                      	push	si
  8999 000011B7 57                      	push	di
  9000 000011B8 50                      	push	ax
  9001                                  Cmplp:
  9002 000011B9 AC                      	LODSB
  9003 000011BA E80A3E                  	call	UCase			; convert to upper case
  9004 000011BD E85C3E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9005 000011C0 88C4                    	MOV	AH,AL
  9006 000011C2 268A05                  	MOV	AL,[ES:DI]
  9007 000011C5 47                      	INC	DI
  9008 000011C6 E8FE3D                  	call	UCase			; convert to upper case
  9009 000011C9 E8503E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9010 000011CC 38C4                    	CMP	AH,AL
  9011 000011CE 7504                    	JNZ	short PopRet		; Strings dif
  9012                                  
  9013 000011D0 08C0                    	OR	AL,AL
  9014 000011D2 75E5                    	JNZ	short Cmplp		; More string
  9015                                  PopRet:
  9016 000011D4 58                      	pop	ax
  9017 000011D5 5F                      	pop	di
  9018 000011D6 5E                      	pop	si
  9019 000011D7 C3                      	retn
  9020                                  
  9021                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9022                                  ;----------------------------------------------------------------------------
  9023                                  ;
  9024                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9025                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9026                                  ;	characters.
  9027                                  ;
  9028                                  ;   Inputs:	DS:SI - pointer to source string
  9029                                  ;		ES:DI - pointer to destination string
  9030                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9031                                  ;		DS:SI point byte after nul byte at end of source string
  9032                                  ;   Registers modified: SI,DI
  9033                                  ;----------------------------------------------------------------------------
  9034                                  
  9035                                  StrCpy:
  9036 000011D8 50                      	push	ax
  9037                                  CPYLoop:
  9038 000011D9 AC                      	LODSB
  9039 000011DA E8EA3D                  	call	UCase			; convert to upper case
  9040 000011DD E83C3E                  	call	PATHCHRCMP		; convert / to \ ;
  9041 000011E0 AA                      	STOSB
  9042                                  
  9043 000011E1 08C0                    	OR	AL,AL
  9044 000011E3 75F4                    	JNZ	short CPYLoop
  9045 000011E5 58                      	pop	ax
  9046 000011E6 C3                      	retn
  9047                                  
  9048                                  ;----------------------------------------------------------------------------
  9049                                  ; Procedure Name : FStrCpy
  9050                                  ;----------------------------------------------------------------------------
  9051                                  
  9052                                  FStrCpy:
  9053 000011E7 50                      	push	ax
  9054                                  FCPYLoop:
  9055 000011E8 AC                      	LODSB
  9056 000011E9 AA                      	STOSB
  9057 000011EA 08C0                    	OR	AL,AL
  9058 000011EC 75FA                    	JNZ	short FCPYLoop
  9059 000011EE 58                      	pop	ax
  9060 000011EF C3                      	retn
  9061                                  
  9062                                  ; 20/07/2018 - Retro DOS v3.0
  9063                                  ;----------------------------------------------------------------------------
  9064                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9065                                  ;----------------------------------------------------------------------------
  9066                                  ;
  9067                                  ;UCase:	
  9068                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9069                                  ;	retn
  9070                                  
  9071                                  ;Break <StrLen - compute length of string ES:DI>
  9072                                  ;----------------------------------------------------------------------------
  9073                                  ;**	StrLen - Compute Length of String
  9074                                  ;
  9075                                  ;	StrLen computes the length of a string, including the trailing 00
  9076                                  ;
  9077                                  ;	ENTRY	(es:di) = address of string
  9078                                  ;	EXIT	(cx) = size of string
  9079                                  ;	USES	cx, flags
  9080                                  ;----------------------------------------------------------------------------
  9081                                  
  9082                                  StrLen:
  9083 000011F0 57                      	push	di
  9084 000011F1 50                      	push	ax
  9085                                  	;MOV	CX,-1
  9086 000011F2 B9FFFF                  	mov	cx,65535
  9087 000011F5 30C0                    	XOR	AL,AL
  9088 000011F7 F2AE                    	REPNE	SCASB
  9089 000011F9 F7D1                    	NOT	CX
  9090 000011FB 58                      	pop	ax
  9091 000011FC 5F                      	pop	di
  9092 000011FD C3                      	retn
  9093                                  
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;**	DStrLen - Compute Length of String
  9096                                  ;
  9097                                  ;	ENTRY	(ds:si) = address of string
  9098                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9099                                  ;	USES	cx, flags
  9100                                  ;----------------------------------------------------------------------------
  9101                                  
  9102                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9103 000011FE E80300                  	CALL	XCHGP
  9104 00001201 E8ECFF                  	CALL	StrLen
  9105                                  	;CALL	XCHGP
  9106                                  	;retn
  9107                                  	; 18/12/2022
  9108                                  	;jmp	short XCHGP
  9109                                  
  9110                                  ;----------------------------------------------------------------------------
  9111                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9112                                  ;
  9113                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9114                                  ;
  9115                                  ;	ENTRY	none
  9116                                  ;	EXIT	pairs exchanged
  9117                                  ;	USES	SI, DI, DS, ES
  9118                                  ;----------------------------------------------------------------------------
  9119                                  
  9120                                  XCHGP:
  9121 00001204 1E                      	push	ds
  9122 00001205 06                      	push	es
  9123 00001206 1F                      	pop	ds
  9124 00001207 07                      	pop	es
  9125 00001208 87F7                    	XCHG	SI,DI
  9126                                  xchgp_retn:
  9127 0000120A C3                      	retn
  9128                                  
  9129                                  ;Break	<Idle - wait for a specified amount of time>
  9130                                  ;----------------------------------------------------------------------------
  9131                                  ;
  9132                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9133                                  ;   	   we spin until RetryLoop is exhausted.
  9134                                  ;
  9135                                  ;   Inputs:	RetryLoop is the number of times we spin
  9136                                  ;   Outputs:	Wait
  9137                                  ;   Registers modified: none
  9138                                  ;----------------------------------------------------------------------------
  9139                                  
  9140                                  Idle:
  9141                                  	;test	byte [SS:FSHARING],0FFh
  9142 0000120B 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9143                                  	;retnz
  9144 00001211 75F7                    	jnz	short xchgp_retn
  9145                                  	;SAVE	<CX>
  9146 00001213 51                      	push	cx
  9147 00001214 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9148 00001219 E308                    	JCXZ	Idle3
  9149                                  Idle1:	
  9150 0000121B 51                      	PUSH	CX
  9151 0000121C 31C9                    	XOR	CX,CX
  9152                                  Idle2:	
  9153 0000121E E2FE                    	LOOP	Idle2
  9154 00001220 59                      	POP	CX
  9155 00001221 E2F8                    	LOOP	Idle1
  9156                                  Idle3:	
  9157                                  	;RESTORE <CX>
  9158 00001223 59                      	pop	cx
  9159 00001224 C3                      	retn
  9160                                  
  9161                                  ;Break	<TableDispatch - dispatch to a table>
  9162                                  ;----------------------------------------------------------------------------
  9163                                  ;
  9164                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9165                                  ;   routine. Preserve all input registers to the routine.
  9166                                  ;
  9167                                  ;   Inputs:	Push	return address
  9168                                  ;		Push	Table address
  9169                                  ;		Push	index (byte)
  9170                                  ;   Outputs:	appropriate routine gets jumped to.
  9171                                  ;		return indicates invalid index
  9172                                  ;   Registers modified: none.
  9173                                  ;----------------------------------------------------------------------------
  9174                                  
  9175                                  struc TFrame	 ; TableFrame
  9176 00000000 ????                    .OldBP:	 resw 1  ; 0
  9177 00000002 ????                    .OldRet: resw 1  ; 2
  9178 00000004 ??                      .Index:	 resb 1  ; 4
  9179 00000005 ??                      .Pad:	 resb 1  ; 5  
  9180 00000006 ????                    .Tab:	 resw 1  ; 6
  9181 00000008 ????                    .NewRet: resw 1  ; 8
  9182                                  endstruc
  9183                                  
  9184                                  TableDispatch:
  9185 00001225 55                      	PUSH	BP
  9186 00001226 89E5                    	MOV	BP,SP
  9187 00001228 53                      	PUSH	BX			; save BX
  9188                                  	;mov	bx,[bp+6]
  9189 00001229 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9190 0000122C 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9191                                  	;cmp	[bp+4],bl
  9192 0000122F 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9193 00001232 7317                    	JAE	short TableError	; yes
  9194                                  	;mov	bl,[bp+4]
  9195 00001234 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9196 00001237 30FF                    	XOR	BH,BH			; convert to word
  9197 00001239 D1E3                    	SHL	BX,1			; convert to word pointer
  9198 0000123B 43                      	INC	BX			; point past first length byte
  9199                                  	; 17/08/2018
  9200                                  	;add	bx,[bp+6]
  9201 0000123C 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9202 0000123F 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9203                                  	;mov	[bp+6],bx
  9204 00001242 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9205 00001245 5B                      	POP	BX			; restore BX
  9206 00001246 5D                      	POP	BP			; restore BP
  9207 00001247 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9208 0000124A C3                      	retn				; do operation
  9209                                  TableError:
  9210 0000124B 5B                      	POP	BX			; restore BX
  9211 0000124C 5D                      	POP	BP			; restore BP
  9212 0000124D C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9213                                  
  9214                                  ;Break	<TestNet - determine if a CDS is for the network>
  9215                                  ;----------------------------------------------------------------------------
  9216                                  ;
  9217                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9218                                  ;	network CDS. This will handle NULL cds also.
  9219                                  ;
  9220                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9221                                  ;   Outputs:	ES:DI = ThisCDS
  9222                                  ;		carry Set => network
  9223                                  ;		carry Clear => local
  9224                                  ;   Registers modified: none.
  9225                                  ;----------------------------------------------------------------------------
  9226                                  
  9227                                  TestNet:
  9228                                  	;LES	DI,[CS:THISCDS]
  9229                                  
  9230                                  	; 16/05/2019 - Retro DOS v4.0
  9231 00001250 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9232 00001255 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9233 0000125A 83FFFF                  	CMP	DI,-1
  9234 0000125D 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9235                                  	;;test	word [es:di+43h],8000h
  9236                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9237                                  	;test	byte [es:di+44h],80h
  9238 0000125F 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9239 00001264 7501                    	JNZ	short CMCRet		; jump has carry clear
  9240 00001266 C3                      	retn				; carry is clear
  9241                                  CMCRet: 
  9242 00001267 F5                      	CMC
  9243 00001268 C3                      	retn
  9244                                  
  9245                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9246                                  ;----------------------------------------------------------------------------
  9247                                  ;
  9248                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9249                                  ;	network file.
  9250                                  ;
  9251                                  ;   Inputs:	ES:DI point to SFT
  9252                                  ;   Outputs:	Zero set if not network sft
  9253                                  ;		zero reset otherwise
  9254                                  ;		Carry CLEAR!!!
  9255                                  ;   Registers modified: none.
  9256                                  ;----------------------------------------------------------------------------
  9257                                  
  9258                                  IsSFTNet:
  9259                                  	;;test	word [es:di+5],8000h
  9260                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9261                                  	; 16/05/2019 
  9262                                  	;test	byte [es:di+6],80h
  9263 00001269 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9264 0000126E C3                      	retn
  9265                                  
  9266                                  ;Break	<FastInit - Initialize FastTable entries >
  9267                                  ;----------------------------------------------------------------------------
  9268                                  ;   DOS 4.00   2/9/87
  9269                                  ;   FastInit  - initialize the FASTXXX routine entry
  9270                                  ;		  in the FastTable
  9271                                  ;
  9272                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9273                                  ;		DS:SI = address of FASTXXX routine entry
  9274                                  ;		   SI = -1 for query only
  9275                                  ;   Outputs:	Carry flag clear, if success
  9276                                  ;		Carry flag set,   if failure
  9277                                  ;
  9278                                  ;
  9279                                  ;----------------------------------------------------------------------------
  9280                                  
  9281                                  ;Procedure FastInit,NEAR
  9282                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9283                                  
  9284                                  ;	; MSDOS 3.3
  9285                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9286                                  ;FastInit:
  9287                                  ;	mov	di,FastTable ; FastOpenTable
  9288                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9289                                  ;	mov	bx,cs			; get DOS segment
  9290                                  ;	cmp	ax,bx			; first time installed ?	
  9291                                  ;	je	short ok_install	; yes
  9292                                  ;	stc				; set carry
  9293                                  ;	retn				; (cf=1 means) already installed !
  9294                                  ;
  9295                                  ;ok_install:
  9296                                  ;	mov	bx,FastTable ; FastOpenTable
  9297                                  ;	mov	cx,ds
  9298                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9299                                  ;	mov	[cs:bx+4],cx
  9300                                  ;	mov	[cs:bx+2],si
  9301                                  ;	retn
  9302                                  
  9303                                  ; 16/05/2019 - Retro DOS v4.0
  9304                                  
  9305                                  FastInit:
  9306                                  	; MSDOS 6.0
  9307                                  	;hkn; set up es to dosdataseg.
  9308 0000126F 06                      	push	es
  9309                                  	;getdseg <es>			; es -> dosdata
  9310 00001270 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9311                                  
  9312                                  	;hkn; FastTable is in DOSDATA
  9313 00001275 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9314 00001278 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9315 00001279 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9316 0000127B D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9317 0000127D D1E3                    	SHL	BX,1			;AN000;FO.
  9318 0000127F 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9319 00001281 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9320                                  fcheck: 				;AN000;
  9321 00001285 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9322 00001287 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9323 00001289 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9324 0000128B 09C0                    	OR	AX,AX			;AN000;FO.;
  9325                                  	;JZ	short ok_install	;AN000;FO.;
  9326                                  	;STC				;AN000;FO.;; already installed !
  9327                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9328                                  	; 14/01/2024
  9329 0000128D F9                      	stc
  9330 0000128E 7517                    	jnz	short FSret
  9331                                  ok_install:				;AN000;
  9332 00001290 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9333 00001293 7412                    	JZ	short FSret		;AN000;FO.; yes
  9334 00001295 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9335 00001297 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9336 0000129B 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9337                                  
  9338                                  ;hkn; FastFlg moved to DOSDATA
  9339 0000129E BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9340 000012A1 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9341                                  	;or	byte [es:di],80h
  9342 000012A3 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9343                                  FSret:					;AN000;
  9344 000012A7 07                      	pop	es
  9345 000012A8 C3                      	retn				;AN000;FO.
  9346                                  
  9347                                  ;EndProc FastInit
  9348                                  
  9349                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9350                                  ;----------------------------------------------------------------------------
  9351                                  ;   DOS 3.3   6/10/86
  9352                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9353                                  ;
  9354                                  ;   Inputs:	None
  9355                                  ;   Outputs:	AX = -1 and carry flag set
  9356                                  ;
  9357                                  ;   Registers modified: none.
  9358                                  ;----------------------------------------------------------------------------
  9359                                  
  9360                                  FastRet:
  9361                                  	;mov	ax,-1
  9362                                  	;stc
  9363                                  	;retf
  9364 000012A9 F9                      	STC
  9365 000012AA 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9366 000012AC CB                      	RETF
  9367                                  
  9368                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9369                                  ;----------------------------------------------------------------------------
  9370                                  ;   DOS 3.3   6/10/86
  9371                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9372                                  ;
  9373                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9374                                  ;   Outputs:	same output as $OPEN
  9375                                  ;
  9376                                  ;----------------------------------------------------------------------------
  9377                                  
  9378                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9379                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9380                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9381                                  
  9382                                  NLS_OPEN:
  9383                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9384                                  ;	MOV	BYTE [CPSWFLAG],0
  9385                                  ;	PUSH	BX		 ; save current state
  9386                                  
  9387 000012AD 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9388 000012AF E8AC5B                  	call	_$OPEN
  9389                                  
  9390                                  ;	POP	BX		 ; restore current state
  9391                                  ;	MOV	[CPSWFLAG],BL
  9392                                  	
  9393 000012B2 C3                      	RETN
  9394                                  
  9395                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9396                                  ;----------------------------------------------------------------------------
  9397                                  ;   DOS 3.3   6/10/86
  9398                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9399                                  ;
  9400                                  ;   Inputs:	BP = open mode
  9401                                  ;   Outputs:	same output as $LSEEK
  9402                                  ;
  9403                                  ;----------------------------------------------------------------------------
  9404                                  
  9405                                  ; 16/05/2019 - Retro DOS v4.0
  9406                                  
  9407                                  NLS_LSEEK:
  9408 000012B3 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9409 000012B8 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9410 000012BD E81000                  	CALL	Fake_User_Stack
  9411 000012C0 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9412 000012C2 E84655                  	call	_$LSEEK
  9413 000012C5 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9414 000012CA 368F06[8405]            	POP	word [SS:USER_SP]
  9415 000012CF C3                      	RETN
  9416                                  
  9417                                  ;Break	<Fake_User_Stack - save user stack>
  9418                                  ;----------------------------------------------------------------------------
  9419                                  ;   DOS 3.3   6/10/86
  9420                                  ;   Fake_User_Stack - save user stack pointer
  9421                                  ;
  9422                                  ;----------------------------------------------------------------------------
  9423                                  
  9424                                  Fake_User_Stack:
  9425 000012D0 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9426 000012D4 36A3[8405]              	MOV	[SS:USER_SP],AX
  9427 000012D8 8CD0                    	MOV	AX,SS
  9428 000012DA 36A3[8605]              	MOV	[SS:USER_SS],AX
  9429 000012DE C3                      	RETN
  9430                                  
  9431                                  ;Break	<GetDevList - get device header list pointer>
  9432                                  ;----------------------------------------------------------------------------
  9433                                  ;   DOS 3.3   7/25/86
  9434                                  ;   GetDevList - get device header list pointer
  9435                                  ;
  9436                                  ;   Output: AX:BX points to the device header list
  9437                                  ;----------------------------------------------------------------------------
  9438                                  
  9439                                  GetDevList:
  9440                                  	; 16/05/2019 - Retro DOS v4.0
  9441 000012DF BE[280D]                	MOV	SI,SysInitTable
  9442 000012E2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9443 000012E7 C534                    	LDS	SI,[SI]
  9444                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9445 000012E9 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9446                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9447 000012EC 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9448 000012EF C3                      	RETN
  9449                                  
  9450                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9451                                  ;----------------------------------------------------------------------------
  9452                                  ;   DOS 3.3   7/25/86
  9453                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9454                                  ;
  9455                                  ;   Inputs:	BP = function code 0CH
  9456                                  ;   Outputs:	same output as generic $IOCTL
  9457                                  ;
  9458                                  ;----------------------------------------------------------------------------
  9459                                  
  9460                                  NLS_IOCTL:
  9461                                  	; 16/05/2019 - Retro DOS v4.0
  9462 000012F0 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9463 000012F5 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9464 000012FA E8D3FF                  	CALL	Fake_User_Stack
  9465 000012FD 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9466 000012FF E83B0F                  	call	_$IOCTL
  9467 00001302 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9468 00001307 368F06[8405]            	POP	word [SS:USER_SP]
  9469 0000130C C3                      	RETN
  9470                                  
  9471                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9472                                  ;----------------------------------------------------------------------------
  9473                                  ;   DOS 3.3   7/25/86
  9474                                  ;   NLS_GETEXT	-
  9475                                  ;
  9476                                  ;   Inputs:	none
  9477                                  ;   Outputs:	AX = extended error
  9478                                  ;
  9479                                  ;----------------------------------------------------------------------------
  9480                                  
  9481                                  NLS_GETEXT:
  9482                                  	; 16/05/2019 - Retro DOS v4.0
  9483 0000130D 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9484                                  	; 23/09/2023
  9485                                  MSG_RETRIEVAL:
  9486 00001311 C3                      	RETN
  9487                                  
  9488                                  ; 29/04/2019 - Retro DOS v4.0
  9489                                  
  9490                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9491                                  
  9492                                  ;----------------------------------------------------------------------------
  9493                                  ;   DOS 4.00
  9494                                  ;
  9495                                  ;   Inputs:	DL=0 get extended error message addr
  9496                                  ;		  =1 set extended error message addr
  9497                                  ;		  =2 get parser error message addr
  9498                                  ;		  =3 set parser error message addr
  9499                                  ;		  =4 get critical error message addr
  9500                                  ;		  =5 set critical error message addr
  9501                                  ;		  =6 get file system error message addr
  9502                                  ;		  =7 set file system error message addr
  9503                                  ;		  =8 get address for code reduction
  9504                                  ;		  =9 set address for code reduction
  9505                                  ;   Function:	get/set message address
  9506                                  ;   Outputs:	ES:DI points to addr when get
  9507                                  ;----------------------------------------------------------------------------
  9508                                  
  9509                                  ;Procedure MSG_RETRIEVAL,NEAR
  9510                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9511                                  
  9512                                  ; 23/09/2023
  9513                                  ;MSG_RETRIEVAL:
  9514                                  
  9515                                  ;;	NOTE:  This function lives in command.com resident code now.
  9516                                  ;;	If the int 2F ever gets this far, we'll return registers
  9517                                  ;;	unchanged, which produces the same result as before, if
  9518                                  ;;	command.com wasn't present (and therefore no messages available).
  9519                                  ;;
  9520                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9521                                  ;;	No_Op zeroes AL.
  9522                                  ;;
  9523                                  ;;;hkn; set up ds to point to DOSDATA
  9524                                  ;;	push	ds
  9525                                  ;;	getdseg	<ds>			; ds -> dosdata
  9526                                  ;;
  9527                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9528                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9529                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9530                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9531                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9532                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9533                                  ;;	DEC	AL		    ;AN000;;MS.
  9534                                  ;;toget:				    ;AN000;
  9535                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9536                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9537                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9538                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9539                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9540                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9541                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9542                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9543                                  ;;getget: 				     ;AN000;
  9544                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9545                                  ;;MSGret: 				     ;AN000;
  9546                                  ;;	POP	SI			     ;AN000;;MS.
  9547                                  ;;	POP	AX			     ;AN000;;MS.
  9548                                  ;;
  9549                                  ;;	pop	ds
  9550                                  
  9551                                  ;	return				     ;AN000;;MS. exit
  9552                                  
  9553                                  ; 23/09/2023
  9554                                  ;	retn	; 29/04/2019
  9555                                  
  9556                                  ;============================================================================
  9557                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9558                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9559                                  ;============================================================================
  9560                                  ; 20/07/2018 - Retro DOS v3.0
  9561                                  
  9562                                  ;	; MSDOS 3.3
  9563                                  ;	; 08/08/2018 - Retro DOS v3.0
  9564                                  ;ECritMEM:
  9565                                  ;ECritSFT:
  9566                                  ;	;
  9567                                  ;ECritDisk:
  9568                                  ;	retn
  9569                                  ;	;push	ax
  9570                                  ;	
  9571                                  ;	mov	ax,8001h
  9572                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9573                                  ;			; AL = critical section number (00h-0Fh)
  9574                                  ;	pop	ax
  9575                                  ;	retn
  9576                                  ;
  9577                                  ;	; MSDOS 3.3
  9578                                  ;	; 08/08/2018 - Retro DOS v3.0
  9579                                  ;LCritMEM:
  9580                                  ;LCritSFT:
  9581                                  ;	;
  9582                                  ;LCritDisk:
  9583                                  ;	retn
  9584                                  ;	;push	ax
  9585                                  ;	
  9586                                  ;	mov	ax,8101h
  9587                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9588                                  ;			; AL = critical section number (00h-0Fh)
  9589                                  ;	pop	ax
  9590                                  ;	retn
  9591                                  ;
  9592                                  ;ECritDevice:
  9593                                  ;	retn
  9594                                  ;	;push	ax
  9595                                  ;	
  9596                                  ;	mov	ax,8002h
  9597                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9598                                  ;			; AL = critical section number (00h-0Fh)
  9599                                  ;	pop	ax
  9600                                  ;	retn
  9601                                  ;
  9602                                  ;LCritDevice:
  9603                                  ;	retn
  9604                                  ;	;push	ax
  9605                                  ;	
  9606                                  ;	mov	ax,8102h
  9607                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9608                                  ;			; AL = critical section number (00h-0Fh)
  9609                                  ;	pop	ax
  9610                                  ;	retn
  9611                                  
  9612                                  ;============================================================================
  9613                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9614                                  ;============================================================================
  9615                                  ; 12/05/2019 - Retro DOS v4.0
  9616                                  
  9617                                  ; Critical Section Routines
  9618                                  
  9619                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9620                                  
  9621                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9622                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9623                                  
  9624                                  ; ---------------------------------------------------------------------------
  9625                                  ; Each handler must leave everything untouched; including flags!
  9626                                  ;
  9627                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9628                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9629                                  ; ---------------------------------------------------------------------------
  9630                                  
  9631                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9632                                  ; ---------------------------------------------------------------------------
  9633                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9634                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9635                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9636                                  ; ---------------------------------------------------------------------------
  9637                                  
  9638                                  ;%macro POPFF 0
  9639                                  ;	jmp	$+3
  9640                                  ;	iret
  9641                                  ;	push	cs
  9642                                  ;	call	$-2
  9643                                  ;%endmacro
  9644                                  
  9645                                  ; ---------------------------
  9646                                  
  9647                                  ;Procedure  ECritDisk,NEAR
  9648                                  	;public  ECritMEM
  9649                                  	;public  ECritSFT
  9650                                  ECritMEM:
  9651                                  ECritSFT:
  9652                                  ;
  9653                                  ECritDisk:
  9654                                  
  9655                                  ;SR; Check if critical section is to be entered
  9656                                  
  9657 00001312 9C                      	pushf
  9658 00001313 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9659 00001319 740D                    	jz	short ECritDisk_2
  9660                                  
  9661                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9662                                  ;	;popff  ; * (macro)
  9663                                  ;	jmp	short ECritDisk_1 ; *
  9664                                  ;
  9665                                  ;ECritDisk_iret: ; *
  9666                                  ;	iret ; *
  9667                                  
  9668                                  	; 16/12/2022
  9669                                  	; 13/11/2022
  9670                                  	;jmp	short ECritDisk_1
  9671                                  	; 06/11/2022
  9672                                  ;ECritDisk_iret:
  9673                                  ;	iret	
  9674                                  
  9675                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9676                                  ECritDisk_1:
  9677 0000131B 0E                      	push	cs ; *
  9678 0000131C E80800                  	call	ECritDisk_iret ; *		
  9679                                  	
  9680                                  ECritDisk_0:
  9681 0000131F 50                      	PUSH    AX
  9682                                  	;MOV	AX,8000h+critDisk
  9683                                  	;INT	int_IBM
  9684 00001320 B80180                  	mov	ax,8001h
  9685 00001323 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9686                                  			; AL = critical section number (00h-0Fh)
  9687 00001325 58                      	POP     AX
  9688 00001326 C3                      	retn
  9689                                  
  9690                                  	; 16/12/2022
  9691                                  	; 13/11/2022
  9692                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9693                                  LCritDisk_iret: 
  9694 00001327 CF                      	iret
  9695                                  
  9696                                  ECritDisk_2:
  9697                                  	;;popff ; *
  9698                                  	;;retn
  9699                                  ;	jmp	short ECritDisk_3 ; *
  9700                                  ;ECritDisk_iret2: ; *
  9701                                  ;	iret
  9702                                  	
  9703                                  	; 16/12/2022
  9704                                  	; 13/11/2022
  9705                                  	;jmp	short ECritDisk_3
  9706                                  ;ECritDisk_iret2:
  9707                                  	;iret
  9708                                  
  9709                                  ECritDisk_3:
  9710 00001328 0E                      	push    cs ; *
  9711                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9712                                  	;call	ECritDisk_iret2 ; *
  9713                                  	;retn
  9714                                  	; 16/12/2022
  9715 00001329 E8FBFF                  	call	ECritDisk_iret
  9716 0000132C C3                      	retn
  9717                                  
  9718                                  ;EndProc ECritDisk
  9719                                  
  9720                                  ; ---------------------------
  9721                                  
  9722                                  ;Procedure   LCritDisk,NEAR
  9723                                  	;public  LCritMEM
  9724                                  	;public  LCritSFT
  9725                                  LCritMEM:
  9726                                  LCritSFT:
  9727                                  ;
  9728                                  LCritDisk:
  9729                                  
  9730                                  ;SR; Check if critical section is to be entered
  9731                                  
  9732 0000132D 9C                      	pushf
  9733 0000132E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9734 00001334 740C                    	jz	short LCritDisk_2
  9735                                  	;popff  ; * (macro)
  9736                                  ;	jmp	short LCritDisk_1 ; *
  9737                                  ;
  9738                                  ;LCritDisk_iret: ; *
  9739                                  ;	iret ; *
  9740                                  
  9741                                  	; 16/12/2022
  9742                                  	; 13/11/2022
  9743                                  	;jmp	short LCritDisk_1
  9744                                  ;LCritDisk_iret:
  9745                                  	;iret
  9746                                  
  9747                                  LCritDisk_1:
  9748 00001336 0E                      	push	cs ; *
  9749 00001337 E8EDFF                  	call	LCritDisk_iret ; *		
  9750                                  	
  9751                                  LCritDisk_0:
  9752 0000133A 50                      	PUSH	AX
  9753                                  	;MOV	AX,8100h+critDisk
  9754                                  	;INT	int_IBM
  9755 0000133B B80181                  	mov	ax,8101h
  9756 0000133E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9757                                  			; AL = critical section number (00h-0Fh)
  9758 00001340 58                      	POP	AX
  9759 00001341 C3                      	retn
  9760                                  
  9761                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9762                                  ;	iret
  9763                                  
  9764                                  LCritDisk_2:
  9765                                  	;;popff ; *
  9766                                  	;;retn
  9767                                  ;	jmp	short LCritDisk_3 ; *
  9768                                  ;LCritDisk_iret2: ; *
  9769                                  ;	iret
  9770                                  
  9771                                  	; 16/12/2022
  9772                                  	; 13/11/2022
  9773                                  	;jmp	short LCritDisk_3
  9774                                  ;LCritDisk_iret2:
  9775                                  	;iret
  9776                                  
  9777                                  LCritDisk_3:
  9778 00001342 0E                      	push    cs ; *
  9779                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9780                                  	;call	LCritDisk_iret2 ; *
  9781                                  	;retn
  9782                                  	; 16/12/2022
  9783 00001343 E8E1FF                  	call	LCritDisk_iret
  9784 00001346 C3                      	retn
  9785                                  
  9786                                  ;EndProc LCritDisk
  9787                                  
  9788                                  ; ---------------------------
  9789                                  
  9790                                  ;Procedure   ECritDevice,NEAR
  9791                                  
  9792                                  ECritDevice:
  9793                                  
  9794                                  ;SR; Check if critical section is to be entered
  9795                                  
  9796 00001347 9C                      	pushf
  9797 00001348 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9798 0000134E 740D                    	jz	short ECritDevice_2
  9799                                  	;popff  ; * (macro)
  9800                                  ;	jmp	short ECritDevice_1 ; *
  9801                                  ;
  9802                                  ;ECritDevice_iret: ; *
  9803                                  ;	iret ; *
  9804                                  
  9805                                  	; 16/12/2022	
  9806                                  	; 13/11/2022
  9807                                  	;jmp	short ECritDevice_1
  9808                                  ;ECritDevice_iret:
  9809                                  	;iret
  9810                                  
  9811                                  ECritDevice_1:
  9812 00001350 0E                      	push	cs ; *
  9813 00001351 E80800                  	call	ECritDevice_iret ; *		
  9814                                  	
  9815                                  ECritDevice_0:
  9816 00001354 50                      	PUSH	AX
  9817                                  	;MOV	AX,8000h+critDevice
  9818                                  	;INT	int_IBM
  9819 00001355 B80280                  	mov	ax,8002h
  9820 00001358 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9821                                  			; AL = critical section number (00h-0Fh)
  9822 0000135A 58                      	POP     AX
  9823 0000135B C3                      	retn
  9824                                  
  9825                                  	; 16/12/2022
  9826                                  	; 06/12/2022
  9827                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9828                                  LCritDevice_iret: 
  9829 0000135C CF                      	iret
  9830                                  
  9831                                  ECritDevice_2:
  9832                                  	;;popff ; *
  9833                                  	;;retn
  9834                                  ;	jmp	short ECritDevice_3 ; *
  9835                                  ;ECritDevice_iret2: ; *
  9836                                  ;	iret
  9837                                  
  9838                                  	; 16/12/2022
  9839                                  	; 13/11/2022
  9840                                  	;jmp	short ECritDevice_3
  9841                                  ;ECritDevice_iret2:
  9842                                  	;iret
  9843                                  
  9844                                  ECritDevice_3:
  9845 0000135D 0E                      	push    cs ; *
  9846                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9847                                  	;call	ECritDevice_iret2 ; *
  9848                                  	;retn
  9849                                  	; 16/12/2022
  9850 0000135E E8FBFF                  	call	ECritDevice_iret
  9851 00001361 C3                      	retn
  9852                                  
  9853                                  ;EndProc ECritDevice
  9854                                  
  9855                                  ; ---------------------------
  9856                                  
  9857                                  ;Procedure   LCritDevice,NEAR
  9858                                  
  9859                                  LCritDevice:
  9860                                  
  9861                                  ;SR; Check if critical section is to be entered
  9862                                  
  9863 00001362 9C                      	pushf
  9864 00001363 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9865 00001369 740C                    	jz	short LCritDevice_2
  9866                                  	;popff  ; * (macro)
  9867                                  ;	jmp	short LCritDevice_1 ; *
  9868                                  ;
  9869                                  ;LCritDevice_iret: ; *
  9870                                  ;	iret ; *
  9871                                  
  9872                                  	; 16/12/2022
  9873                                  	; 13/11/2022
  9874                                  	;jmp	short LCritDevice_1
  9875                                  ;LCritDevice_iret:
  9876                                  	;iret
  9877                                  
  9878                                  LCritDevice_1:
  9879 0000136B 0E                      	push	cs ; *
  9880 0000136C E8EDFF                  	call	LCritDevice_iret ; *		
  9881                                  	
  9882                                  LCritDevice_0:
  9883 0000136F 50                      	PUSH	AX
  9884                                  	;MOV	AX,8100h+critDevice
  9885                                  	;INT	int_IBM
  9886 00001370 B80281                  	mov	ax,8102h
  9887 00001373 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9888                                  			; AL = critical section number (00h-0Fh)
  9889 00001375 58                      	POP     AX
  9890 00001376 C3                      	retn
  9891                                  
  9892                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9893                                  ;	iret
  9894                                  
  9895                                  LCritDevice_2:
  9896                                  	;;popff ; *
  9897                                  	;;retn
  9898                                  ;	jmp	short LCritDevice_3 ; *
  9899                                  ;LCritDevice_iret2: ; *
  9900                                  ;	iret
  9901                                  
  9902                                  	; 16/12/2022
  9903                                  	; 13/11/2022
  9904                                  	;jmp	short LCritDevice_3
  9905                                  ;LCritDevice_iret2:
  9906                                  	;iret
  9907                                  
  9908                                  LCritDevice_3:
  9909 00001377 0E                      	push    cs ; *
  9910                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9911                                  	;call	LCritDevice_iret2 ; *
  9912                                  	;retn
  9913                                  	; 16/12/2022
  9914 00001378 E8E1FF                  	call	LCritDevice_iret
  9915 0000137B C3                      	retn
  9916                                  
  9917                                  ;EndProc LCritDevice
  9918                                  
  9919                                  ;============================================================================
  9920                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9921                                  ;============================================================================
  9922                                  ; 20/07/2018 - Retro DOS v3.0
  9923                                  
  9924                                  ;============================================================================
  9925                                  ; STDIO.ASM - (MSDOS 2.0)
  9926                                  ;============================================================================
  9927                                  
  9928                                  ;
  9929                                  ; Standard device IO for MSDOS (first 12 function calls)
  9930                                  ;
  9931                                  
  9932                                  ;.xlist
  9933                                  ;.xcref
  9934                                  ;INCLUDE STDSW.ASM
  9935                                  ;INCLUDE DOSSEG.ASM
  9936                                  ;.cref
  9937                                  ;.list
  9938                                  
  9939                                  ;TITLE   STDIO - device IO for MSDOS
  9940                                  ;NAME    STDIO
  9941                                  
  9942                                  ;INCLUDE IO.ASM
  9943                                  
  9944                                  ; ---------------------------------------------------------------------------
  9945                                  ;
  9946                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9947                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9948                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9949                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9950                                  ;			    to restore MSDOS 2.0 device IO source code 
  9951                                  ;
  9952                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9953                                  	
  9954                                  ;============================================================================
  9955                                  ; STDIO.ASM - (MSDOS 2.0)
  9956                                  ;============================================================================
  9957                                  
  9958                                  ;
  9959                                  ; Standard device IO for MSDOS (first 12 function calls)
  9960                                  ;
  9961                                  
  9962                                  ;.xlist
  9963                                  ;.xcref
  9964                                  ;INCLUDE STDSW.ASM
  9965                                  ;INCLUDE DOSSEG.ASM
  9966                                  ;.cref
  9967                                  ;.list
  9968                                  
  9969                                  ;TITLE   STDIO - device IO for MSDOS
  9970                                  ;NAME    STDIO
  9971                                  
  9972                                  ;INCLUDE IO.ASM
  9973                                  
  9974                                  ; ---------------------------------------------------------------------------
  9975                                  ;
  9976                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9977                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9978                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9979                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9980                                  ;			    to restore MSDOS 2.0 device IO source code 
  9981                                  ;
  9982                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9983                                  ;
  9984                                  ;============================================================================
  9985                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9986                                  ;============================================================================
  9987                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9988                                  
  9989                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9990                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9991                                  
  9992                                  ;============================================================================
  9993                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9994                                  ;============================================================================
  9995                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9996                                  
  9997                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9998                                  
  9999                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10000                                  ;
 10001                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10002                                  ;	NAME	IBMCPMIO
 10003                                  
 10004                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10005                                  ;
 10006                                  ;	$Std_Con_Input_No_Echo
 10007                                  ;	$Std_Con_String_Output
 10008                                  ;	$Std_Con_String_Input
 10009                                  ;	$RawConIO
 10010                                  ;	$RawConInput
 10011                                  ;	RAWOUT
 10012                                  ;	RAWOUT2
 10013                                  ;
 10014                                  
 10015                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10016                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10017                                  ; references to be SS or CS relative which is desired.
 10018                                  
 10019                                  ; ---------------------------------------------------------------------------
 10020                                  
 10021                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10022                                  ;	NAME	CPMIO2
 10023                                  
 10024                                  ;
 10025                                  ;	Microsoft Confidential
 10026                                  ;	Copyright (C) Microsoft Corporation 1991
 10027                                  ;	All Rights Reserved.
 10028                                  ;
 10029                                  
 10030                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10031                                  ;
 10032                                  ;	$Std_Con_Input
 10033                                  ;	$Std_Con_Output
 10034                                  ;	OUTT
 10035                                  ;	TAB
 10036                                  ;	BUFOUT
 10037                                  ;	$Std_Aux_Input
 10038                                  ;	$Std_Aux_Output
 10039                                  ;	$Std_Printer_Output
 10040                                  ;	$Std_Con_Input_Status
 10041                                  ;	$Std_Con_Input_Flush
 10042                                  ;
 10043                                  ;	Revision History:
 10044                                  ;
 10045                                  ;	  AN000	 version 4.00 - Jan. 1988
 10046                                  
 10047                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10048                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10049                                  ; references to be SS or CS relative which is desired.
 10050                                  
 10051                                  ;DOSCODE SEGMENT
 10052                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10053                                  
 10054                                  
 10055                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10056                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10057                                  ;hkn;	not valid. 
 10058                                  
 10059                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10060                                  ; 08/11/2022
 10061                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10062                                  
 10063                                  ;
 10064                                  ;----------------------------------------------------------------------------
 10065                                  ;
 10066                                  ; Procedure : $Std_Con_Input_No_Echo
 10067                                  ;
 10068                                  ;----------------------------------------------------------------------------
 10069                                  ;
 10070                                  
 10071                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10072                                  
 10073                                  ; Inputs:
 10074                                  ;	None
 10075                                  ; Function:
 10076                                  ;	Input character from console, no echo
 10077                                  ; Returns:
 10078                                  ;	AL = character
 10079                                  
 10080 0000137C 1E                      	push	ds
 10081 0000137D 56                      	push	si
 10082                                  INTEST:
 10083 0000137E E8653D                  	call	STATCHK
 10084 00001381 753B                    	jnz	short GET ; 08/09/2018
 10085                                  ;*************************************************************************
 10086                                  ;hkn; SS override
 10087 00001383 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10088 00001389 7505                    	jnz	short no_sys_wait
 10089 0000138B B405                    	mov	ah,5			; get input status with system wait
 10090 0000138D E88D30                  	call	IOFUNC
 10091                                  no_sys_wait:
 10092                                  ;**************************************************************************
 10093 00001390 B484                    	MOV	AH,84h
 10094 00001392 CD2A                    	INT	int_IBM	 ; int 2Ah
 10095                                  
 10096                                  ;;; 7/15/86  update the date in the idle loop
 10097                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10098                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10099                                  
 10100                                  ;hkn; SS override
 10101 00001394 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10102 0000139A 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10103                                  
 10104 0000139C 50                      	PUSH	AX
 10105 0000139D 53                      	PUSH	BX			; following is tricky,
 10106 0000139E 51                      	PUSH	CX			; it may be called by critical handler
 10107 0000139F 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10108                                  					; other's READ or WRITE
 10109 000013A0 1E                      	PUSH	DS			; save DS = SFT's segment
 10110                                  
 10111                                  ;hkn; READTIME must use ds = DOSDATA
 10112                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10113                                  
 10114 000013A1 16                      	PUSH	SS ; 04/05/2019
 10115 000013A2 1F                      	POP	DS
 10116                                  
 10117 000013A3 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10118 000013A6 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10119                                  	;invoke	READTIME		; readtime
 10120 000013A9 E873F7                  	call	READTIME
 10121 000013AC B80100                  	MOV	AX,1
 10122 000013AF E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10123                                  
 10124                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10125                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10126                                  ;	push	bx
 10127                                  ;	mov	bx,DATE_FLAG
 10128                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10129                                  ;	cmp	word [cs:bx],5872h
 10130                                  ;	jz	short FETCHI_TAG_chk_ok
 10131                                  ;	call	DOSINIT
 10132                                  ;FETCHI_TAG_chk_ok:
 10133                                  ;	pop	bx
 10134                                  
 10135 000013B2 1F                      	POP	DS			; restore DS
 10136 000013B3 5A                      	POP	DX
 10137 000013B4 59                      	POP	CX
 10138 000013B5 5B                      	POP	BX
 10139 000013B6 58                      	POP	AX
 10140                                  NoUpdate:
 10141                                  
 10142                                  ;hkn; SS override
 10143 000013B7 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10144                                  
 10145                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10146 000013BC EBC0                    	JMP	short INTEST
 10147                                  GET:
 10148 000013BE 30E4                    	XOR	AH,AH
 10149 000013C0 E85A30                  	call	IOFUNC
 10150 000013C3 5E                      	POP	SI
 10151 000013C4 1F                      	POP	DS
 10152                                  ;;; 7/15/86
 10153                                  
 10154                                  ;hkn; SS override
 10155                                  	; MSDOS 6.0
 10156 000013C5 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10157                                  	;
 10158 000013CB 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10159 000013CD 7505                    	JNZ	short noscan
 10160                                  
 10161                                  ;hkn; SS override
 10162                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10163                                  	; 20/06/2023
 10164 000013CF 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10165                                  noscan:
 10166 000013D4 C3                      	retn
 10167                                  ;
 10168                                  ;----------------------------------------------------------------------------
 10169                                  ;
 10170                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10171                                  ;
 10172                                  ;
 10173                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10174                                  ;	EXIT	none
 10175                                  ;	USES	ALL
 10176                                  ;
 10177                                  ;----------------------------------------------------------------------------
 10178                                  ;
 10179                                  
 10180                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10181                                  
 10182 000013D5 89D6                    	mov	si,dx
 10183                                  STRING_OUT1:	
 10184 000013D7 AC                      	lodsb
 10185 000013D8 3C24                    	cmp	al,'$'
 10186 000013DA 74F8                    	je	short noscan
 10187                                  NEXT_STR1:
 10188 000013DC E88402                  	call	OUTT
 10189 000013DF EBF6                    	jmp	short STRING_OUT1
 10190                                  
 10191                                  ;----------------------------------------------------------------------------
 10192                                  ;
 10193                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10194                                  ;
 10195                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10196                                  ;
 10197                                  ;	ENTRY	(ds:dx) = input buffer
 10198                                  ;	EXIT	none
 10199                                  ;	USES	ALL
 10200                                  ;
 10201                                  ;----------------------------------------------------------------------------
 10202                                  
 10203                                  	; 15/01/2024
 10204                                  
 10205                                  _$STD_CON_STRING_INPUT:		;System call 10
 10206                                  
 10207                                  	; 15/01/2024
 10208                                  	;mov	ax,ss
 10209                                  	;mov	es,ax
 10210 000013E1 16                      	push	ss
 10211 000013E2 07                      	pop	es
 10212                                  
 10213 000013E3 89D6                    	mov	si,dx
 10214 000013E5 30ED                    	xor	ch,ch
 10215 000013E7 AD                      	lodsw
 10216                                  
 10217                                  ;	(AL) = the buffer length
 10218                                  ;	(AH) = the template length
 10219                                  
 10220 000013E8 08C0                            or	al,al
 10221 000013EA 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10222 000013EC 88E3                    	mov	bl,ah		;Init template counter
 10223 000013EE 88EF                            mov	bh,ch		;Init template counter
 10224                                  
 10225                                  ;	(BL) = the number of bytes in the template
 10226                                  
 10227 000013F0 38D8                            cmp	al,bl
 10228 000013F2 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10229 000013F4 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10230 000013F7 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10231                                  
 10232                                  ; The number of chars in the template is >= the number of chars in buffer or
 10233                                  ; there is no CR at the end of the template. This is an inconsistant state
 10234                                  ; of affairs. Pretend that the template was empty:
 10235                                  ;
 10236                                  
 10237                                  NOEDIT:	
 10238 000013F9 88EB                    	mov	bl,ch		;Reset buffer
 10239                                  EDITON: 
 10240 000013FB 88C2                    	mov	dl,al
 10241 000013FD 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10242                                  
 10243                                  ;	Top level. We begin to read a line in.
 10244                                  
 10245                                  NEWLIN: 
 10246 000013FE 36A0[F901]              	mov	al,[SS:CARPOS]
 10247 00001402 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10248                                  
 10249 00001406 56                      	push	si
 10250 00001407 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10251 0000140A 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10252 0000140F 88EF                    	mov	bh,ch		;No chars from template yet
 10253 00001411 88EE                    	mov	dh,ch		;No chars to new line yet
 10254 00001413 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10255 00001416 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10256 00001418 7503                    	jnz	short GOTCH
 10257                                  
 10258                                  ;	This is the main loop of reading in a character and processing it.
 10259                                  ;
 10260                                  ;	(BH) = the index of the next byte in the template
 10261                                  ;	(BL) = the length of the template
 10262                                  ;	(DH) = the number of bytes in the buffer
 10263                                  ;	(DL) = the length of the buffer
 10264                                  
 10265                                  GETCH:
 10266 0000141A E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10267                                  GOTCH:
 10268                                  ;
 10269                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10270                                  ; input queue.
 10271                                  ;
 10272 0000141D 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10273 0000141F 74F9                    	jz	short GETCH
 10274                                  
 10275                                  ;	If the leading char is the function-key lead byte
 10276                                  
 10277                                  	;cmp	al,[SS:ESCCHAR]
 10278                                  
 10279                                  	; 04/05/2019 - Retro DOS v4.0
 10280                                  
 10281                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10282                                  
 10283 00001421 2E3A06[1F0A]            	CMP	AL,[cs:ESCCHAR]
 10284 00001426 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10285                                  
 10286                                  ;	Rubout and ^H are both destructive backspaces.
 10287                                  
 10288 00001428 3C7F                            cmp	al,c_DEL ; 7FH
 10289                                          ;jz	short BACKSPJ
 10290                                          ; 15/01/2024
 10291 0000142A 7466                    	je	short BACKSP
 10292 0000142C 3C08                    	cmp	al,c_BS  ; 8
 10293                                          ;jz	short BACKSPJ
 10294                                          ; 15/01/2024
 10295 0000142E 7462                    	je	short BACKSP
 10296                                  
 10297                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10298                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10299                                  	;	   	after CMP and a CMP again!
 10300                                  	;		
 10301                                  	;		-It would be better if they use a 'JMP short' to 
 10302                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10303                                  	;		between them. Then, they would be able use a patch
 10304                                  	;		between 5271h and 5279h when if it will be required.
 10305                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10306                                  	;	
 10307                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10308                                  
 10309                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10310                                  	;
 10311                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10312                                  
 10313                                  ;DOSCODE:526D	cmp     al, 8
 10314                                  ;DOSCODE:526F	jz      short BACKSPJ
 10315                                  ;DOSCODE:5271	cmp     al, 17h
 10316                                  ;DOSCODE:5273	nop
 10317                                  ;DOSCODE:5274	nop
 10318                                  ;DOSCODE:5275	cmp     al, 15h
 10319                                  ;DOSCODE:5277	nop
 10320                                  ;DOSCODE:5278	nop
 10321                                  ;DOSCODE:5279	cmp     al, 0Dh
 10322                                  ;DOSCODE:527B	jz      short ENDLIN
 10323                                  ;DOSCODE:527D	cmp     al, 0Ah
 10324                                  ;DOSCODE:527F	jz      short PHYCRLF
 10325                                  	
 10326                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10327                                  	; DOSCODE:525Dh
 10328                                  
 10329                                  ; 16/12/2022
 10330                                  %if 0
 10331                                  	; MSDOS 6.0
 10332                                  ;	^W deletes backward once and then backs up until a letter is before the
 10333                                  ;	cursor
 10334                                  
 10335                                  	CMP     AL,"W"-"@" ; 17h
 10336                                  
 10337                                  ;	The removal of the comment characters before the jump statement will
 10338                                  ;	cause ^W to backup a word.
 10339                                  
 10340                                  ;***	JZ	short WordDel
 10341                                  	NOP
 10342                                  	NOP
 10343                                  
 10344                                  	CMP     AL,"U"-"@" ; 15h
 10345                                  
 10346                                  ;	The removal of the comment characters before the jump statement will
 10347                                  ;	cause ^U to clear a line.
 10348                                  
 10349                                  ;***	JZ	short LineDel
 10350                                  	NOP
 10351                                  	NOP
 10352                                  
 10353                                  %endif
 10354                                  
 10355                                  ;	CR terminates the line.
 10356                                  
 10357 00001430 3C0D                            cmp	al,c_CR ; 0Dh
 10358 00001432 7430                            jz	short ENDLIN
 10359                                  
 10360                                  ;	LF goes to a new line and keeps on reading.
 10361                                  
 10362 00001434 3C0A                            cmp	al,c_LF ; 0Ah
 10363 00001436 7442                    	jz	short PHYCRLF
 10364                                  
 10365                                  ;	^X (or ESC) deletes the line and starts over
 10366                                  
 10367                                  	; MSDOS 3.3
 10368                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10369                                  	;jz	short KILNEW
 10370                                  
 10371                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10372                                  
 10373                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10374                                  
 10375 00001438 2E3A06[1E0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10376 0000143D 7440                    	jz	short KILNEW
 10377                                  	
 10378                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10379                                  	;jz	short KILNEW
 10380                                  
 10381                                  ; Otherwise, we save the input character.
 10382                                  
 10383                                  SAVCH:	
 10384 0000143F 38D6                    	cmp	dh,dl
 10385 00001441 7317                    	jnb	short BUFFUL		; buffer is full.
 10386 00001443 AA                              stosb
 10387 00001444 FEC6                    	inc	dh                      ; increment count in buffer.
 10388 00001446 E8AE02                  	call	BUFOUT			; Print control chars nicely
 10389                                  
 10390 00001449 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10391 0000144F 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10392 00001451 38DF                            cmp	bh,bl
 10393 00001453 73C5                            jnb	short GETCH		; no more characters in template
 10394 00001455 46                              inc	si                      ; Skip to next char in template
 10395 00001456 FEC7                            inc	bh                      ; remember position in template
 10396 00001458 EBC0                            jmp	short GETCH
 10397                                  
 10398                                  	; 15/01/2024
 10399                                  ;BACKSPJ: 
 10400                                  	;jmp	short BACKSP
 10401                                  
 10402                                  BUFFUL: 
 10403 0000145A B007                    	mov	al, 7			; Bell to signal full buffer
 10404 0000145C E80402                  	call	OUTT
 10405 0000145F EBB9                    	jmp	short GETCH
 10406                                  
 10407                                  ESCAPE: 
 10408                                  	;transfer OEMFunctionKey
 10409 00001461 E9E6F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10410                                  
 10411                                  ENDLIN:
 10412 00001464 AA                              stosb				; Put the CR in the buffer
 10413 00001465 E8FB01                  	call	OUTT                    ; Echo it
 10414 00001468 5F                              pop	di                      ; Get start of user buffer
 10415 00001469 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10416 0000146C FEC6                            inc	dh			; DH is length including CR
 10417                                  
 10418                                  COPYNEW:
 10419                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10420                                  	;mov	bp, es
 10421                                  	;mov	bx, ds
 10422                                  	;mov	es, bx
 10423                                  	;mov	ds, bp
 10424                                  	;mov	si, INBUF
 10425                                  	;mov	cl, dh
 10426                                  	;rep	movsb
 10427                                  	;retn
 10428                                  
 10429                                  	; CPMIO.ASM (MSDOS 6.0)
 10430                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10431                                  	;SAVE	<DS,ES>
 10432 0000146E 1E                      	PUSH	DS
 10433 0000146F 06                      	PUSH	ES
 10434                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10435 00001470 1F                      	POP	DS
 10436 00001471 07                      	POP	ES
 10437                                  
 10438                                  ;;hkn; INBUF is in DOSDATA
 10439 00001472 BE[FB01]                        MOV     SI,INBUF
 10440 00001475 88F1                            MOV     CL,DH                   ; set up count
 10441 00001477 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10442                                  OLDBAK_RETN:
 10443 00001479 C3                              RETN
 10444                                  
 10445                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10446                                  
 10447                                  PHYCRLF:
 10448 0000147A E81B01                  	CALL	CRLF
 10449 0000147D EB9B                            JMP	short GETCH
 10450                                  
 10451                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10452                                  
 10453                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10454                                  
 10455                                  	; Note: Following routines were not used in IBMDOS.COM
 10456                                  	;	-CRTL+W, CRTL+U is not activated-
 10457                                  	;	but they were in the kernel code!?)
 10458                                  
 10459                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10460                                  	; DOSCODE:52B6h
 10461                                  
 10462                                  ;;;;;;;;
 10463                                  
 10464                                  ; 16/12/2022
 10465                                  %if 0
 10466                                  ;
 10467                                  ; Delete the previous line
 10468                                  ;
 10469                                  LineDel:
 10470                                  	OR      DH,DH
 10471                                  	JZ	short GETCH	 ; 06/12/2022
 10472                                  	Call    BackSpace
 10473                                  	JMP	short LineDel
 10474                                  
 10475                                  %endif
 10476                                  
 10477                                  ;
 10478                                  ; delete the previous word.
 10479                                  ;
 10480                                  WordDel:
 10481                                  WordLoop:
 10482                                  ;	Call    BackSpace               ; backspace the one spot
 10483                                  ;	OR      DH,DH
 10484                                  ;	JZ	short GetChj
 10485                                  ;	MOV     AL,[ES:DI-1]
 10486                                  ;	cmp     al,'0'
 10487                                  ;	jb	short GetChj
 10488                                  ;	cmp     al,'9'
 10489                                  ;	jbe	short WordLoop
 10490                                  ;	OR      AL,20h
 10491                                  ;	CMP     AL,'a'
 10492                                  ;	JB	short GetChj
 10493                                  ;	CMP     AL,'z'
 10494                                  ;	JBE	short WordLoop
 10495                                  ;GetChj: 
 10496                                  ;	JMP	GETCH
 10497                                  
 10498                                  ; 16/12/2022
 10499                                  %if 0
 10500                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10501                                  	; (Worddel is not called or jumped from anywhere!)
 10502                                  WordDel:
 10503                                  WordLoop:
 10504                                  	Call    BackSpace               ; backspace the one spot
 10505                                  	OR      DH,DH
 10506                                  	JZ	short GetChj
 10507                                  	MOV     AL,[ES:DI-1]
 10508                                  	cmp     al,'0'
 10509                                  	jb	short GetChj
 10510                                  	cmp     al,'9'
 10511                                  	jbe	short WordLoop
 10512                                  	OR      AL,20h
 10513                                  	CMP     AL,'a'
 10514                                  	JB	short GetChj
 10515                                  	CMP     AL,'z'
 10516                                  	JBE	short WordLoop
 10517                                  GetChj: 
 10518                                  	JMP	GETCH
 10519                                  
 10520                                  %endif
 10521                                  
 10522                                  ;;;;;;;;
 10523                                  
 10524                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10525                                  
 10526                                  ; The user wants to throw away what he's typed in and wants to start over.
 10527                                  ; We print the backslash and then go to the next line and tab to the correct
 10528                                  ; spot to begin the buffered input.
 10529                                  
 10530                                  KILNEW:
 10531 0000147F B05C                            mov	al,'\'
 10532 00001481 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10533 00001484 5E                              pop	si		;Remember start of edit buffer
 10534                                  PUTNEW:
 10535 00001485 E81001                  	call	CRLF            ;Go to next line on screen
 10536 00001488 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10537 0000148C E84802                  	call	TAB             ;Tab over
 10538 0000148F E96CFF                          JMP     NEWLIN		;Start over again
 10539                                  
 10540                                  ;	Destructively back up one character position
 10541                                  
 10542                                  BACKSP:
 10543                                  	; 09/09/2018
 10544 00001492 E80800                  	Call    BackSpace
 10545 00001495 EB83                    	JMP     short GETCH	; 15/01/2024
 10546                                  
 10547                                  	; 15/01/2024
 10548                                  ;User really wants an ESC character in his line
 10549                                  TWOESC:	
 10550 00001497 2EA0[1F0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10551 0000149B EBA2                    	jmp	short SAVCH
 10552                                  
 10553                                  BackSpace:
 10554 0000149D 08F6                    	or	dh,dh
 10555 0000149F 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10556 000014A1 E85800                  	call	BACKUP          ;Do the backup
 10557 000014A4 268A05                  	mov	al,[es:di]	;Get the deleted char
 10558 000014A7 3C20                            cmp	al,20h	; ' '
 10559 000014A9 730F                    	jnb	short OLDBAK	;Was a normal char
 10560 000014AB 3C09                            cmp	al,c_HT ; 9
 10561 000014AD 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10562                                  ;; 9/27/86 fix for ctrl-U backspace
 10563 000014AF 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10564 000014B1 7407                    	JZ	short OLDBAK
 10565 000014B3 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10566 000014B5 7403                    	JZ	short OLDBAK
 10567                                  ;; 9/27/86 fix for ctrl-U backspace
 10568 000014B7 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10569                                  OLDBAK:
 10570 000014BA 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10571 000014C0 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10572 000014C2 08FF                    	or	bh,bh
 10573 000014C4 74B3                            jz	short OLDBAK_RETN 
 10574                                  				;Not advanced in template, stay where we are
 10575 000014C6 FECF                    	dec	bh		;Go back in template
 10576 000014C8 4E                              dec	si
 10577 000014C9 C3                      	retn
 10578                                  BAKTAB:
 10579 000014CA 57                              push	di
 10580 000014CB 4F                              dec	di		;Back up one char
 10581 000014CC FD                              std			;Go backward
 10582 000014CD 88F1                            mov	cl,dh		;Number of chars currently in line
 10583 000014CF B020                            mov	al,20h	; ' '
 10584 000014D1 53                              push	bx
 10585 000014D2 B307                            mov	bl,7		;Max
 10586 000014D4 E30E                            jcxz	FIGTAB		;At start, do nothing
 10587                                  FNDPOS:
 10588 000014D6 AE                              scasb			;Look back
 10589 000014D7 7609                    	jbe	short CHKCNT
 10590 000014D9 26807D0109              	cmp	byte [es:di+1],9
 10591 000014DE 7409                    	jz	short HAVTAB	;Found a tab
 10592 000014E0 FECB                    	dec	bl		;Back one char if non tab control char
 10593                                  CHKCNT:
 10594 000014E2 E2F2                            loop	FNDPOS
 10595                                  FIGTAB:		
 10596 000014E4 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10597                                  HAVTAB:
 10598 000014E9 28F3                    	sub	bl,dh
 10599 000014EB 00D9                    	add	cl,bl
 10600 000014ED 80E107                  	and	cl,7		;CX has correct number to erase
 10601 000014F0 FC                      	cld			;Back to normal
 10602 000014F1 5B                      	pop	bx
 10603 000014F2 5F                      	pop	di
 10604 000014F3 74C5                    	jz	short OLDBAK	;Nothing to erase
 10605                                  TABBAK:
 10606 000014F5 E80700                  	call	BACKMES
 10607 000014F8 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10608 000014FA EBBE                    	jmp	short OLDBAK
 10609                                  
 10610                                  BACKUP:
 10611 000014FC FECE                            dec	dh		;Back up in line
 10612 000014FE 4F                              dec	di
 10613                                  BACKMES:
 10614 000014FF B008                            mov	al,c_BS ; 8	;Backspace
 10615 00001501 E85F01                          call	OUTT
 10616 00001504 B020                            mov	al,20h ; ' '	;Erase
 10617 00001506 E85A01                          call	OUTT
 10618 00001509 B008                            mov	al,c_BS ; 8	;Backspace
 10619 0000150B E95501                  	jmp	OUTT		;Done
 10620                                  
 10621                                  	; 15/01/2024
 10622                                  ;User really wants an ESC character in his line
 10623                                  ;TWOESC:	
 10624                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10625                                  ;	jmp	SAVCH
 10626                                  
 10627                                  ;Copy the rest of the template
 10628                                  COPYLIN:
 10629 0000150E 88D9                            mov	cl,bl		;Total size of template
 10630 00001510 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10631 00001512 EB07                            jmp	short COPYEACH
 10632                                  
 10633                                  COPYSTR:
 10634 00001514 E83200                  	call	FINDOLD         ;Find the char
 10635 00001517 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10636                                  
 10637                                  ;Copy one char from template to line
 10638                                  COPYONE:
 10639 00001519 B101                            mov	cl,1
 10640                                  ;Copy CX chars from template to line
 10641                                  COPYEACH:
 10642 0000151B 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10643 00001521 38D6                    	cmp	dh,dl
 10644 00001523 740F                            jz	short GETCH2		;At end of line, can't do anything
 10645 00001525 38DF                            cmp	bh,bl
 10646 00001527 740B                            jz	short GETCH2		;At end of template, can't do anything
 10647 00001529 AC                              lodsb
 10648 0000152A AA                              stosb
 10649 0000152B E8C901                  	call	BUFOUT
 10650 0000152E FEC7                            inc	bh			;Ahead in template
 10651 00001530 FEC6                            inc	dh			;Ahead in line
 10652 00001532 E2E7                            loop	COPYEACH
 10653                                  GETCH2:
 10654 00001534 E9E3FE                          jmp	GETCH
 10655                                  
 10656                                  ;Skip one char in template
 10657                                  SKIPONE:
 10658 00001537 38DF                    	cmp	bh,bl
 10659 00001539 74F9                    	jz	short GETCH2		;At end of template
 10660 0000153B FEC7                    	inc	bh			;Ahead in template
 10661 0000153D 46                      	inc	si
 10662                                          ;jmp	GETCH
 10663                                  	; 15/01/2024
 10664 0000153E EBF4                    	jmp	short GETCH2
 10665                                  
 10666                                  SKIPSTR:
 10667 00001540 E80600                  	call	FINDOLD                 ;Find out how far to go
 10668 00001543 01CE                            add	si,cx			;Go there
 10669 00001545 00CF                            add	bh,cl
 10670                                          ;jmp	GETCH
 10671                                  	; 15/01/2024
 10672 00001547 EBEB                    	jmp	short GETCH2
 10673                                  
 10674                                  ;Get the next user char, and look ahead in template for a match
 10675                                  ;CX indicates how many chars to skip to get there on output
 10676                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10677                                  ;       address is popped off and a jump to GETCH is taken.
 10678                                  ;       Make sure nothing extra on stack when this routine
 10679                                  ;       is called!!! (no PUSHes before calling it).
 10680                                  
 10681                                  FINDOLD:
 10682 00001549 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10683                                  
 10684                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10685                                  
 10686                                  	;CMP	AL,[SS:ESCCHAR]	
 10687                                  	;JNZ	SHORT FINDSETUP
 10688                                  
 10689                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10690                                  
 10691                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10692                                  
 10693 0000154C 2E3A06[1F0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10694 00001551 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10695                                  
 10696 00001553 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10697 00001556 EB1D                            JMP	SHORT NOTFND		; go try again
 10698                                  FINDSETUP:
 10699 00001558 88D9                    	mov	cl,bl
 10700 0000155A 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10701 0000155C 7417                    	jz	short NOTFND	;At end of template
 10702 0000155E 49                              dec	cx		;Cannot point past end, limit search
 10703 0000155F 7414                            jz	short NOTFND	;If only one char in template, forget it
 10704 00001561 06                      	push	es
 10705 00001562 1E                      	push	ds
 10706 00001563 07                      	pop	es
 10707 00001564 57                      	push	di
 10708 00001565 89F7                    	mov	di,si		;Template to ES:DI
 10709 00001567 47                      	inc	di
 10710 00001568 F2AE                    	repne	scasb		;Look
 10711 0000156A 5F                      	pop	di
 10712 0000156B 07                      	pop	es
 10713 0000156C 7507                    	jnz	short NOTFND	;Didn't find the char
 10714 0000156E F6D1                            not	cl		;Turn how far to go into how far we went
 10715 00001570 00D9                            add	cl,bl		;Add size of template
 10716 00001572 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10717                                  FINDOLD_RETN:
 10718 00001574 C3                      	retn
 10719                                  
 10720                                  NOTFND:
 10721 00001575 5D                      	pop	bp              ;Chuck return address
 10722                                  	;jmp	GETCH
 10723                                  	; 15/01/2024
 10724                                  GETCH2_j:
 10725 00001576 EBBC                    	jmp	short GETCH2
 10726                                  
 10727                                  REEDIT:
 10728 00001578 B040                    	mov	al,'@'		;Output re-edit character
 10729 0000157A E8E600                  	call	OUTT
 10730 0000157D 5F                      	pop	di
 10731 0000157E 57                      	push	di
 10732 0000157F 06                      	push	es
 10733 00001580 1E                      	push	ds
 10734 00001581 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10735 00001584 1F                      	pop	ds
 10736 00001585 07                      	pop	es
 10737 00001586 5E                      	pop	si
 10738 00001587 88F3                    	mov	bl,dh		;Size of line is new size template
 10739 00001589 E9F9FE                  	jmp	PUTNEW		;Start over again
 10740                                  
 10741                                  EXITINS:
 10742                                  ENTERINS:
 10743 0000158C 36F616[7905]            	not	byte [SS:INSMODE]
 10744                                  	;jmp	GETCH
 10745                                  	; 15/01/2024
 10746 00001591 EBE3                    	jmp	short GETCH2_j
 10747                                  
 10748                                  ;Put a real live ^Z in the buffer (embedded)
 10749                                  CTRLZ:
 10750 00001593 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10751 00001595 E9A7FE                          jmp	SAVCH
 10752                                  
 10753                                  ;Output a CRLF
 10754                                  CRLF:
 10755 00001598 B00D                    	mov	al,c_CR ; 0Dh 
 10756 0000159A E8C600                  	call	OUTT
 10757 0000159D B00A                    	mov	al,c_LF ; 0Ah
 10758 0000159F E9C100                  	jmp	OUTT
 10759                                  
 10760                                  ;
 10761                                  ;----------------------------------------------------------------------------
 10762                                  ;
 10763                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10764                                  ;
 10765                                  ;	Input or output raw character from console, no echo
 10766                                  ;
 10767                                  ;	ENTRY	DL = -1 if input
 10768                                  ;		   =  output character if output
 10769                                  ;	EXIT	(AL) = input character if input
 10770                                  ;	USES	all
 10771                                  ;
 10772                                  ;----------------------------------------------------------------------------
 10773                                  ; 20/07/2018 - Retro DOS v3.0
 10774                                  
 10775                                  ; 04/05/2019 - Retro DOS v4.0
 10776                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10777                                  
 10778                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10779                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10780                                  
 10781                                  _$RAW_CON_IO:			; System call 6
 10782 000015A2 88D0                    	MOV	AL,DL
 10783 000015A4 3CFF                    	CMP	AL,-1
 10784 000015A6 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10785                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10786                                  	;jz	short rci1
 10787                                  	;jmp	short RAWOUT
 10788                                  	; 16/12/202
 10789                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10790                                  	;nop
 10791                                  rci1:
 10792                                  			; Get pointer to register save area
 10793 000015A8 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10794 000015AD 31DB                    	XOR	BX,BX
 10795                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10796 000015AF E82820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10797                                          ;JC	SHORT RET17
 10798 000015B2 72C0                            jc	short FINDOLD_RETN
 10799 000015B4 B401                    	MOV	AH,1
 10800 000015B6 E8642E                  	CALL	IOFUNC
 10801 000015B9 750B                    	JNZ	SHORT RESFLG
 10802 000015BB E8FA3A                  	CALL	SPOOLINT
 10803                                  	;OR	BYTE [ES:DI+16H],40H
 10804 000015BE 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10805 000015C3 30C0                    	XOR	AL,AL
 10806                                  RET17:
 10807 000015C5 C3                      	RETN
 10808                                  
 10809                                  RESFLG:
 10810                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10811 000015C6 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10812                                  				; Reset user's zero flag
 10813                                  ;RILP:
 10814                                  rci0:
 10815 000015CB E8EA3A                  	CALL	SPOOLINT
 10816                                  ;
 10817                                  ;----------------------------------------------------------------------------
 10818                                  ;
 10819                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10820                                  ;
 10821                                  ;	Input raw character from console, no echo
 10822                                  ;
 10823                                  ;	ENTRY	none
 10824                                  ;	EXIT	(al) = character
 10825                                  ;	USES	all
 10826                                  ;
 10827                                  ;----------------------------------------------------------------------------
 10828                                  ;
 10829                                  
 10830                                  ;rci0:	invoke	SPOOLINT
 10831                                  
 10832                                  	;entry	$RAW_CON_INPUT
 10833                                  
 10834                                  	; 04/05/2019 - Retro DOS v4.0
 10835                                  
 10836                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10837                                  
 10838                                  _$RAW_CON_INPUT:		; System call 7
 10839 000015CE 53                      	push	bx
 10840 000015CF 31DB                    	XOR	BX,BX
 10841                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10842 000015D1 E80620                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10843 000015D4 5B                      	pop	bx
 10844 000015D5 72EE                    	JC	SHORT RET17
 10845 000015D7 B401                    	MOV	AH,1
 10846 000015D9 E8412E                  	CALL	IOFUNC
 10847                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10848                                  	;XOR	AH,AH
 10849                                          ;CALL	IOFUNC
 10850                                          ;RETN
 10851 000015DC 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10852 000015DE B484                    	MOV	AH,84h
 10853 000015E0 CD2A                    	INT	int_IBM  ; int 2Ah
 10854 000015E2 EBE7                    	JMP	short rci0
 10855                                  rci5:	
 10856 000015E4 30E4                    	XOR	AH,AH
 10857                                  	;CALL	IOFUNC
 10858                                  	;RETN
 10859                                  	; 18/12/2022
 10860 000015E6 E9342E                  	jmp	IOFUNC
 10861                                  
 10862                                  ;       Output the character in AL to stdout
 10863                                  ;
 10864                                  	;entry	RAWOUT
 10865                                  RAWOUT:
 10866 000015E9 53                      	PUSH    BX
 10867 000015EA BB0100                  	MOV     BX,1
 10868                                  
 10869                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10870 000015ED E8EA1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10871 000015F0 721B                    	JC	SHORT RAWRET1
 10872                                  
 10873                                  	;
 10874                                  	; MSDOS 2.11
 10875                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10876                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10877                                          ;PUSH	DS
 10878                                          ;PUSH	SI
 10879                                          ;LDS	SI,[SI+19H]		; output to special?
 10880                                  	;TEST	BYTE [SI+4],ISSPEC
 10881                                  	;POP	SI
 10882                                  	;
 10883                                          
 10884                                  	; MSDOS 3.3 & MSDOS 6.0
 10885                                  	;mov	bx,[si+5]
 10886 000015F2 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10887                                   ;
 10888                                   ; If we are a network handle OR if we are not a local device then go do the
 10889                                   ; output the hard way.
 10890                                   ;	
 10891                                  	;and	bx,8080h
 10892 000015F5 81E38080                	AND	BX,sf_isnet+devid_device
 10893                                  	;cmp	bx,80h
 10894 000015F9 81FB8000                	CMP	BX,devid_device
 10895 000015FD 7510                    	jnz     short RAWNORM
 10896 000015FF 1E                      	push    ds
 10897                                  	;lds	bx,[si+7]
 10898 00001600 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10899                                  	;test	byte [bx+4],10h
 10900 00001603 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10901                                  	;
 10902                                  
 10903 00001607 1F                      	POP	DS
 10904 00001608 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10905                                  
 10906 0000160A CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10907                                  
 10908                                  	;JMP	SHORT RAWRET
 10909                                  ;RAWNORM:
 10910                                  ;	CALL    RAWOUT3
 10911                                  RAWRET: 
 10912 0000160C F8                      	CLC
 10913                                  RAWRET1:
 10914 0000160D 5B                      	POP     BX
 10915                                  RAWRET2:
 10916 0000160E C3                      	RETN
 10917                                  RAWNORM:
 10918 0000160F E80700                  	CALL    RAWOUT3
 10919 00001612 EBF8                    	jmp	short RAWRET
 10920                                  
 10921                                  ;	Output the character in AL to handle in BX
 10922                                  ;
 10923                                  ;	entry	RAWOUT2
 10924                                  
 10925                                  RAWOUT2:
 10926                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10927                                  	;JC	SHORT RET18
 10928 00001614 E8C31F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10929 00001617 72F5                    	JC	SHORT RAWRET2
 10930                                  RAWOUT3:
 10931 00001619 50                      	PUSH	AX
 10932 0000161A EB0C                    	JMP	SHORT RAWOSTRT
 10933                                  ROLP:
 10934 0000161C E8993A                  	CALL	SPOOLINT
 10935                                  
 10936                                  	; 01/05/2019 - Retro DOS v4.0
 10937                                  
 10938                                  	; MSDOS 6.0
 10939                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10940                                  	; 17/12/2022
 10941 0000161F 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10942                                  	;or	word [ss:DOS34_FLAG],200h
 10943                                  				;AN002; set control break
 10944                                  	;invoke DSKSTATCHK
 10945 00001625 E80D3A                  	call	DSKSTATCHK	;AN002; check control break
 10946                                  RAWOSTRT:
 10947 00001628 B403                    	MOV	AH,3
 10948 0000162A E8F02D                  	CALL	IOFUNC
 10949 0000162D 74ED                    	JZ	SHORT ROLP
 10950                                  
 10951                                  	; MSDOS 6.0
 10952                                  ;SR;
 10953                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10954                                  ;the user failed. We do not send a char if this happens. We however return
 10955                                  ;to the caller with carry clear because this DOS call does not return any
 10956                                  ;status. 
 10957                                  ;
 10958 0000162F 40                      	inc	ax		;fail on I24 if ax = -1
 10959 00001630 58                      	POP	AX
 10960 00001631 7405                    	jz	short nosend	;yes, do not send char
 10961 00001633 B402                    	MOV	AH,2
 10962 00001635 E8E52D                  	call	IOFUNC
 10963                                  nosend:
 10964 00001638 F8                      	CLC			; Clear carry indicating successful
 10965 00001639 C3                      	retn
 10966                                  
 10967                                  	; MSDOS 3.3 & MSDOS 2.11
 10968                                  	;POP	AX
 10969                                  	;MOV	AH,2
 10970                                          ;CALL	IOFUNC
 10971                                  	;CLC			; Clear carry indicating successful
 10972                                  ;RET18:    
 10973                                  	;RETN
 10974                                  
 10975                                  ;;10/08/2018
 10976                                  ; 20/07/2018 - Retro DOS v3.0
 10977                                  ; ---------------------------------------------------------------------------
 10978                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10979                                  ; ---------------------------------------------------------------------------
 10980                                  
 10981                                  ; This routine is called at DOS init
 10982                                  
 10983                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10984                                  ;;OUTMES:
 10985                                  ;;	;LODS	CS:BYTE PTR [SI]
 10986                                  ;;	CS	LODSB
 10987                                  ;;	CMP     AL,"$" ; 24h
 10988                                  ;;	JZ	SHORT RET18
 10989                                  ;;	CALL	OUTT
 10990                                  ;;	JMP     SHORT OUTMES
 10991                                  
 10992                                  ; ---------------------------------------------------------------------------
 10993                                  
 10994                                  ; 20/07/2018 - Retro DOS v3.0
 10995                                  
 10996                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10997                                  
 10998                                  ;
 10999                                  ;----------------------------------------------------------------------------
 11000                                  ;
 11001                                  ; Inputs:
 11002                                  ;	AX=0 save the DEVCALL request packet
 11003                                  ;	  =1 restore the DEVCALL request packet
 11004                                  ; Function:
 11005                                  ;	save or restore the DEVCALL packet
 11006                                  ; Returns:
 11007                                  ;	none
 11008                                  ;
 11009                                  ;----------------------------------------------------------------------------
 11010                                  ;
 11011                                  
 11012                                  ; 04/05/2019 - Retro DOS v4.0
 11013                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11014                                  
 11015                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11016                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11017                                  
 11018                                  ; 12/05/2019
 11019                                  
 11020                                  	; 15/01/2024
 11021                                  
 11022                                  Save_Restore_Packet:
 11023 0000163A 1E                      	PUSH	DS
 11024 0000163B 06                      	PUSH	ES
 11025 0000163C 56                      	PUSH	SI
 11026 0000163D 57                      	PUSH	DI
 11027                                  
 11028                                  	; 16/12/2022
 11029                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11030                                  	; 09/09/2018
 11031 0000163E BF[6C0D]                	mov	di,FAKE_STACK_2F
 11032 00001641 BE[5A03]                	mov	si,DEVCALL
 11033                                  	;
 11034                                  	; 21/09/2023
 11035 00001644 09C0                    	or	ax,ax
 11036                                  	;CMP	AX,0		; save packet
 11037 00001646 7402                    	JZ	short save_packet ; 16/12/2022
 11038                                  	;je	short set_seg
 11039                                  
 11040                                  	; MSDOS 6.0
 11041                                  restore_packet:
 11042                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11043                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11044                                  	; MSDOS 3.3
 11045                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11046                                  	;mov	di,DEVCALL  ; 09/09/2018
 11047                                  	;
 11048                                  	;JMP	short set_seg
 11049                                  
 11050                                  	; 16/12/2022	
 11051                                  	; 09/09/2018
 11052 00001648 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11053                                  
 11054                                  ; 16/12/2022
 11055                                  %if 0
 11056                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11057                                  	cmp	ax,0		; save packet
 11058                                  	jz	short save_packet
 11059                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11060                                  	mov	di,DEVCALL 
 11061                                  	jmp	short set_seg
 11062                                  
 11063                                  	; MSDOS 6.0
 11064                                  save_packet:
 11065                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11066                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11067                                  	; 09/09/2018
 11068                                  	; MSDOS 3.3
 11069                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11070                                  	;mov	si,DEVCALL ; 09/09/2018
 11071                                  
 11072                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11073                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11074                                  	mov	si,DEVCALL
 11075                                  %endif
 11076                                  
 11077                                  ; 15/01/2024
 11078                                  ; 16/12/2022
 11079                                  save_packet:
 11080                                  ;set_seg:
 11081                                  	; MSDOS 3.3
 11082                                  	;mov	ax,cs
 11083                                  
 11084                                  	; MSDOS 6.0
 11085                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11086                                  	;MOV	DS,AX
 11087                                  	;MOV	ES,AX
 11088                                  	; 15/01/2024
 11089 0000164A 16                      	push	ss
 11090 0000164B 1F                      	pop	ds
 11091 0000164C 1E                      	push	ds
 11092 0000164D 07                      	pop	es
 11093                                  
 11094 0000164E B90B00                  	MOV	CX,11		; 11 words to move
 11095 00001651 F3A5                    	REP	MOVSW
 11096                                  
 11097 00001653 5F                      	POP	DI
 11098 00001654 5E                      	POP	SI
 11099 00001655 07                      	POP	ES
 11100 00001656 1F                      	POP	DS
 11101 00001657 C3                      	retn
 11102                                  
 11103                                  ;============================================================================
 11104                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11105                                  ;============================================================================
 11106                                  ; 20/07/2018 - Retro DOS v3.0
 11107                                  ; 01/05/2019 - Retro DOS v4.0
 11108                                  
 11109                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11110                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11111                                  ;hkn;	not valid. 
 11112                                  
 11113                                  ;
 11114                                  ;----------------------------------------------------------------------------
 11115                                  ;
 11116                                  ;**	$STD_CON_INPUT - System Call 1
 11117                                  ;
 11118                                  ;	Input character from console, echo
 11119                                  ;
 11120                                  ;	ENTRY	none
 11121                                  ;	EXIT	(al) = character
 11122                                  ;	USES	ALL
 11123                                  ;
 11124                                  ;----------------------------------------------------------------------------
 11125                                  ;
 11126                                  
 11127                                  _$STD_CON_INPUT:	;System call 1
 11128                                  	
 11129 00001658 E821FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11130 0000165B 50                      	PUSH	AX
 11131 0000165C E80400                  	CALL	OUTT
 11132 0000165F 58                      	POP	AX
 11133                                  CON_INPUT_RETN:	
 11134 00001660 C3                      	RETN
 11135                                  
 11136                                  ;
 11137                                  ;----------------------------------------------------------------------------
 11138                                  ;
 11139                                  ;**	$STD_CON_OUTPUT - System Call 2
 11140                                  ;
 11141                                  ;	Output character to console
 11142                                  ;
 11143                                  ;	ENTRY	(dl) = character
 11144                                  ;	EXIT	none
 11145                                  ;	USES	all
 11146                                  ;
 11147                                  ;----------------------------------------------------------------------------
 11148                                  ;
 11149                                  
 11150                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11151                                  
 11152                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11153                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11154                                  
 11155                                  _$STD_CON_OUTPUT:	;System call 2
 11156                                  
 11157 00001661 88D0                    	MOV	AL,DL
 11158                                  OUTT:
 11159 00001663 3C20                    	CMP	AL,20H ; " "
 11160 00001665 725C                    	JB	SHORT CTRLOUT
 11161 00001667 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11162 00001669 7405                    	JZ	SHORT OUTCH
 11163                                  OUTCHA:	
 11164                                  	;INC	BYTE PTR [CARPOS]
 11165 0000166B 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11166                                  OUTCH:
 11167 00001670 1E                      	PUSH	DS
 11168 00001671 56                      	PUSH	SI
 11169                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11170                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11171 00001672 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11172                                  	;AND	BYTE [SS:CHARCO],00111111B
 11173                                  	; 01/05/2019 - Retro DOS v4.0
 11174 00001677 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11175 0000167D 7505                    	JNZ	SHORT OUTSKIP
 11176                                  
 11177 0000167F 50                      	PUSH	AX
 11178 00001680 E8633A                  	CALL	STATCHK
 11179 00001683 58                      	POP	AX
 11180                                  OUTSKIP:
 11181 00001684 E862FF                  	CALL	RAWOUT				;output the character
 11182                                  
 11183 00001687 5E                      	POP	SI
 11184 00001688 1F                      	POP	DS
 11185                                  
 11186                                  	;TEST	BYTE PTR [PFLAG],-1
 11187                                  	;retz
 11188 00001689 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11189 0000168F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11190                                  
 11191 00001691 53                      	PUSH	BX
 11192 00001692 1E                      	PUSH	DS
 11193 00001693 56                      	PUSH	SI
 11194 00001694 BB0100                  	MOV	BX,1
 11195                                  	; 20/07/2018 - Retro DOS v3.0
 11196                                  	; MSDOS 3.3
 11197                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11198 00001697 E8401F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11199                                  					;hkn; to sft entry
 11200 0000169A 7224                    	JC	SHORT TRIPOPJ
 11201                                  
 11202                                  	; 01/05/2019 - Retro DOS v4.0
 11203                                  
 11204                                  	;mov	bx,[si+5]
 11205 0000169C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11206                                  	;test	bx,8000h
 11207                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11208 0000169F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11209 000016A2 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11210                                  	;;test	bx,80h
 11211                                  	;TEST	BX,devid_device 		; output to file?
 11212 000016A4 F6C380                  	test	bl,devid_device ; 80h
 11213 000016A7 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11214                                  	; 14/03/2018
 11215                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11216                                  	;jc	short TRIPOPJ
 11217                                  	; MSDOS 2.11
 11218                                  	;test	byte [SI+18H], 80h
 11219                                  	;jz	short TRIPOPJ
 11220 000016A9 BB0400                  	MOV	BX,4
 11221 000016AC E82B1F                  	CALL	GET_IO_SFT
 11222 000016AF 720F                    	JC	SHORT TRIPOPJ
 11223                                  	;;test	word [si+5], 800h
 11224                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11225                                  	;test	byte [si+6],8 ; 08/11/2022
 11226 000016B1 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11227                                  						; StdPrn redirected?
 11228                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11229                                  	;jz	LISSTRT2 ; 10/08/2018 
 11230                                  	; 16/12/2022
 11231 000016B5 7503                    	jnz	short outch1
 11232 000016B7 E98700                  	jmp	LISSTRT2
 11233                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11234                                  	;jz	short LISSTRT2J
 11235                                  outch1:
 11236                                  	;MOV	BYTE [PFLAG],0
 11237 000016BA 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11238                                  	; MSDOS 2.11
 11239                                  	;mov	bx,4
 11240                                  	;jmp	short LISSTRT2
 11241                                  	
 11242                                  TRIPOPJ:
 11243                                  	; 20/07/2018
 11244 000016C0 E98100                  	JMP	TRIPOP
 11245                                  
 11246                                  	; 16/12/2022
 11247                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11248                                  ;LISSTRT2J:
 11249                                  ;	JMP	LISSTRT2
 11250                                  
 11251                                  CTRLOUT:
 11252 000016C3 3C0D                    	CMP	AL,c_CR ; 0Dh
 11253 000016C5 7420                    	JZ	SHORT ZERPOS
 11254 000016C7 3C08                    	CMP	AL,c_BS ; 8
 11255 000016C9 7424                    	JZ	SHORT BACKPOS
 11256 000016CB 3C09                    	CMP	AL,c_HT ; 9
 11257 000016CD 75A1                    	JNZ	SHORT OUTCH
 11258                                  	;MOV	AL,[CARPOS]
 11259 000016CF 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11260 000016D3 0CF8                    	OR	AL,0F8H
 11261 000016D5 F6D8                    	NEG	AL
 11262                                  TAB:
 11263 000016D7 51                      	PUSH	CX
 11264 000016D8 88C1                    	MOV	CL,AL
 11265 000016DA B500                    	MOV	CH,0
 11266 000016DC E307                    	JCXZ	POPTAB
 11267                                  TABLP:
 11268 000016DE B020                    	MOV	AL," "
 11269 000016E0 E880FF                  	CALL	OUTT
 11270 000016E3 E2F9                    	LOOP	TABLP
 11271                                  POPTAB:
 11272 000016E5 59                      	POP	CX
 11273                                  
 11274 000016E6 C3                      	RETN
 11275                                  
 11276                                  ZERPOS:
 11277                                  	;MOV	BYTE PTR [CARPOS],0
 11278 000016E7 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11279                                  	; 10/08/2018
 11280 000016ED EB81                    	JMP	short OUTCH ; 04/05/2019
 11281                                  	
 11282                                  	; 18/12/2022
 11283                                  ;OUTJ:	
 11284                                  	;JMP	OUTT
 11285                                  
 11286                                  BACKPOS:
 11287                                  	;DEC	BYTE PTR [CARPOS]
 11288 000016EF 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11289 000016F4 E979FF                  	JMP	OUTCH
 11290                                  
 11291                                  BUFOUT:
 11292 000016F7 3C20                    	CMP	AL," "
 11293 000016F9 7315                    	JAE	SHORT OUTJ		;Normal char
 11294 000016FB 3C09                    	CMP	AL,9
 11295 000016FD 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11296                                  	;DOS 3.3  7/14/86
 11297 000016FF 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11298 00001701 740D                    	JZ	short CTRLU
 11299 00001703 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11300 00001705 7409                    	JZ	short CTRLU
 11301                                  NOT_CTRLU:
 11302                                  	;DOS 3.3  7/14/86
 11303 00001707 50                      	PUSH	AX
 11304 00001708 B05E                    	MOV	AL,"^"
 11305 0000170A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11306 0000170D 58                      	POP	AX
 11307 0000170E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11308                                  CTRLU:
 11309                                  	;CALL	OUTT
 11310                                  	; 18/12/2022
 11311                                  OUTJ:
 11312 00001710 E950FF                  	jmp	OUTT
 11313                                  ;BUFOUT_RETN:
 11314                                  	;RETN
 11315                                  
 11316                                  ;
 11317                                  ;----------------------------------------------------------------------------
 11318                                  ;
 11319                                  ;**	$STD_AUX_INPUT - System Call 3
 11320                                  ;
 11321                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11322                                  ;
 11323                                  ;	ENTRY	none
 11324                                  ;	EXIT	(al) = character
 11325                                  ;	USES	all
 11326                                  ;
 11327                                  ;----------------------------------------------------------------------------
 11328                                  ;
 11329                                  
 11330                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11331                                  
 11332                                  _$STD_AUX_INPUT:	;System call 3
 11333                                  
 11334 00001713 E8D039                  	CALL	STATCHK
 11335 00001716 BB0300                  	MOV	BX,3
 11336 00001719 E8BE1E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11337                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11338                                  	;retc
 11339                                  	; 16/12/2022
 11340                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11341                                  	;JC	SHORT BUFOUT_RETN
 11342                                  	;JMP	SHORT TAISTRT
 11343                                  	; 07/12/2022
 11344 0000171C 7304                    	jnc	SHORT TAISTRT
 11345 0000171E C3                      	retn	
 11346                                  
 11347                                  AUXILP:
 11348 0000171F E89639                  	CALL	SPOOLINT
 11349                                  TAISTRT:
 11350 00001722 B401                    	MOV	AH,1
 11351 00001724 E8F62C                  	CALL	IOFUNC
 11352 00001727 74F6                    	JZ	SHORT AUXILP
 11353 00001729 30E4                    	XOR	AH,AH
 11354                                  	; 16/12/2022
 11355                                  	;CALL	IOFUNC
 11356                                  	;RETN
 11357                                  	; 07/12/2022
 11358 0000172B E9EF2C                  	jmp	IOFUNC
 11359                                  
 11360                                  ;
 11361                                  ;----------------------------------------------------------------------------
 11362                                  ;
 11363                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11364                                  ;
 11365                                  ;	ENTRY	(dl) = character
 11366                                  ;	EXIT	none
 11367                                  ;	USES	all
 11368                                  ;
 11369                                  ;----------------------------------------------------------------------------
 11370                                  ;
 11371                                  
 11372                                  _$STD_AUX_OUTPUT:	;System call 4
 11373                                  
 11374 0000172E 53                      	PUSH	BX
 11375 0000172F BB0300                  	MOV	BX,3
 11376 00001732 EB04                    	JMP	SHORT SENDOUT
 11377                                  
 11378                                  ;
 11379                                  ;----------------------------------------------------------------------------
 11380                                  ;
 11381                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11382                                  ;
 11383                                  ;	ENTRY	(dl) = character
 11384                                  ;	EXIT	none
 11385                                  ;	USES	all
 11386                                  ;
 11387                                  ;----------------------------------------------------------------------------
 11388                                  ;
 11389                                  
 11390                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11391                                  
 11392 00001734 53                      	PUSH	BX
 11393 00001735 BB0400                  	MOV	BX,4
 11394                                  
 11395                                  SENDOUT:
 11396 00001738 88D0                    	MOV	AL,DL
 11397 0000173A 50                      	PUSH	AX
 11398 0000173B E8A839                  	CALL	STATCHK
 11399 0000173E 58                      	POP	AX
 11400 0000173F 1E                      	PUSH	DS
 11401 00001740 56                      	PUSH	SI
 11402                                  LISSTRT2:
 11403 00001741 E8D0FE                  	CALL	RAWOUT2
 11404                                  TRIPOP:
 11405 00001744 5E                      	POP	SI
 11406 00001745 1F                      	POP	DS
 11407 00001746 5B                      	POP	BX
 11408                                  SCIS_RETN:	; 20/07/2018
 11409 00001747 C3                      	RETN
 11410                                  ;
 11411                                  ;----------------------------------------------------------------------------
 11412                                  ;
 11413                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11414                                  ;
 11415                                  ;	Check console input status
 11416                                  ;
 11417                                  ;	ENTRY	none
 11418                                  ;	EXIT	AL = -1 character available, = 0 no character
 11419                                  ;	USES	all
 11420                                  ;
 11421                                  ;----------------------------------------------------------------------------
 11422                                  ;
 11423                                  
 11424                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11425                                  
 11426 00001748 E89B39                  	CALL	STATCHK
 11427 0000174B B000                    	MOV	AL,0		; no xor!!
 11428                                  	;retz
 11429 0000174D 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11430 0000174F 0CFF                    	OR	AL,-1
 11431                                  ;SCIS_RETN:
 11432 00001751 C3                      	RETN
 11433                                  
 11434                                  ;
 11435                                  ;----------------------------------------------------------------------------
 11436                                  ;
 11437                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11438                                  ;
 11439                                  ;	Flush console input buffer and perform call in AL
 11440                                  ;
 11441                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11442                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11443                                  ;		return arguments for the fcn supplied in (AL)
 11444                                  ;	USES	all
 11445                                  ;
 11446                                  ;----------------------------------------------------------------------------
 11447                                  ;
 11448                                  
 11449                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11450                                  
 11451 00001752 50                      	PUSH	AX
 11452 00001753 52                      	PUSH	DX
 11453 00001754 31DB                    	XOR	BX,BX
 11454 00001756 E8811E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11455                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11456 00001759 7205                    	JC	SHORT BADJFNCON
 11457 0000175B B404                    	MOV	AH,4
 11458 0000175D E8BD2C                  	CALL	IOFUNC
 11459                                  
 11460                                  BADJFNCON:
 11461 00001760 5A                      	POP	DX
 11462 00001761 58                      	POP	AX
 11463 00001762 88C4                    	MOV	AH,AL
 11464 00001764 3C01                    	CMP	AL,1
 11465 00001766 7413                    	JZ	SHORT REDISPJ
 11466 00001768 3C06                    	CMP	AL,6
 11467 0000176A 740F                    	JZ	SHORT REDISPJ
 11468 0000176C 3C07                    	CMP	AL,7
 11469 0000176E 740B                    	JZ	SHORT REDISPJ
 11470 00001770 3C08                    	CMP	AL,8
 11471 00001772 7407                    	JZ	SHORT REDISPJ
 11472 00001774 3C0A                    	CMP	AL,10
 11473 00001776 7403                    	JZ	SHORT REDISPJ
 11474 00001778 B000                    	MOV	AL,0
 11475 0000177A C3                      	RETN
 11476                                  
 11477                                  REDISPJ:
 11478 0000177B FA                      	CLI
 11479                                  	;transfer REDISP
 11480 0000177C E908EC                  	JMP	REDISP
 11481                                  
 11482                                  ;============================================================================
 11483                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11484                                  ;============================================================================
 11485                                  ; 20/07/2018 - Retro DOS v3.0
 11486                                  ; 17/05/2019 - Retro DOS v4.0
 11487                                  
 11488                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11489                                  ;
 11490                                  ;	$GET_FCB_POSITION
 11491                                  ;	$FCB_DELETE
 11492                                  ;	$GET_FCB_FILE_LENGTH
 11493                                  ;	$FCB_CLOSE
 11494                                  ;	$FCB_RENAME
 11495                                  ;	SaveFCBInfo
 11496                                  ;	ResetLRU
 11497                                  ;	SetOpenAge
 11498                                  ;	LRUFCB
 11499                                  ;	FCBRegen
 11500                                  ;	BlastSFT
 11501                                  ;	CheckFCB
 11502                                  ;	SFTFromFCB
 11503                                  ;	FCBHardErr
 11504                                  ;
 11505                                  ;	Revision history:
 11506                                  ;
 11507                                  ;		Created: ARR 4 April 1983"
 11508                                  ;			 MZ  6 June  1983 completion of functions
 11509                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11510                                  ;					  times.  Change so successive closes work by
 11511                                  ;					  always returning OK.	Also, detect I/O to
 11512                                  ;					  already closed FCB and return EOF.
 11513                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11514                                  ;					  out of sft into FCB for reconnection
 11515                                  ;
 11516                                  ;		A000	 version 4.00  Jan. 1988
 11517                                  
 11518                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11519                                  ;----------------------------------------------------------------------------
 11520                                  ;
 11521                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11522                                  ;	extent and next record field and set the random record field to point
 11523                                  ;	to that record
 11524                                  ;
 11525                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11526                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11527                                  ;   Registers modified: all
 11528                                  ;
 11529                                  ;----------------------------------------------------------------------------
 11530                                  ;
 11531                                  
 11532                                  _$GET_FCB_POSITION:
 11533 0000177F E8D404                  	call	GetExtended		; point to FCB
 11534 00001782 E8A504                  	call	GetExtent		; DX:AX is current record
 11535                                  	;mov	[si+21h],ax
 11536 00001785 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11537                                  	;mov	[si+23h],dl
 11538 00001788 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11539                                  	;cmp	word [si+0Eh],64
 11540 0000178B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11541 0000178F 7303                    	JAE	short GetFCBBye
 11542                                  	;mov	[si+24h],dh
 11543 00001791 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11544                                  GoodPath:	; 16/12/2022
 11545                                  GetFCBBye:
 11546 00001794 E9C0EE                  	jmp	FCB_RET_OK
 11547                                  
 11548                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11549                                  ;----------------------------------------------------------------------------
 11550                                  ;
 11551                                  ;**	$FCB_Delete - Delete from FCB Template
 11552                                  ;
 11553                                  ;	given an FCB, remove all directory entries in the current
 11554                                  ;	directory that have names that match the FCB's ?  marks.
 11555                                  ;
 11556                                  ;	ENTRY	(DS:DX) = address of FCB
 11557                                  ;	EXIT	entries matching the FCB are deleted
 11558                                  ;		(al) = ff iff no entries were deleted
 11559                                  ;	USES	all
 11560                                  ;
 11561                                  ;----------------------------------------------------------------------------
 11562                                  ;
 11563                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11564                                  
 11565                                  _$FCB_DELETE:		; System call 19
 11566                                  					; OpenBuf is in DOSDATA
 11567 00001797 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11568                                  
 11569 0000179A E8F052                  	call	TransFCB		; convert FCB to path
 11570 0000179D 7207                    	JC	short BadPath 		; signal no deletions
 11571                                  
 11572 0000179F 16                      	push	SS
 11573 000017A0 1F                      	pop	DS			; SS is DOSDATA
 11574                                  
 11575 000017A1 E8370D                  	call	DOS_DELETE		; wham
 11576                                  	;JC	short BadPath
 11577                                  	; 16/12/2022
 11578 000017A4 73EE                    	jnc 	short GoodPath
 11579                                  ;GoodPath:
 11580                                  ;	;jmp	FCB_RET_OK		; do a good return
 11581                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11582                                  ;	jmp	short GetFCBBye
 11583                                  
 11584                                  BadPath:
 11585                                  	; Error code is in AX
 11586                                  
 11587 000017A6 E9B1EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11588                                  
 11589                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11590                                  ;----------------------------------------------------------------------------
 11591                                  ;
 11592                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11593                                  ;	file in records (rounded up if partial).
 11594                                  ;
 11595                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11596                                  ;   Outputs:	Random record field updated to reflect the number of records
 11597                                  ;   Registers modified: all
 11598                                  ;
 11599                                  ;----------------------------------------------------------------------------
 11600                                  ;
 11601                                  	; 15/01/2024
 11602                                  
 11603                                  _$GET_FCB_FILE_LENGTH:
 11604                                  
 11605 000017A9 E8AA04                  	call	GetExtended		; get real FCB pointer
 11606                                  					; DX points to Input FCB
 11607                                  
 11608                                  					; OpenBuf is in DOSDATA
 11609 000017AC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11610                                  
 11611 000017AF 1E                      	push	ds			; save pointer to true FCB
 11612 000017B0 56                      	push	si
 11613 000017B1 E8D952                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11614 000017B4 5E                      	pop	si
 11615 000017B5 1F                      	pop	ds
 11616 000017B6 72EE                    	JC	short BadPath
 11617 000017B8 1E                      	push	ds			; save pointer
 11618 000017B9 56                      	push	si
 11619 000017BA 16                      	push	ss		
 11620 000017BB 1F                      	pop	ds
 11621 000017BC E81A11                  	call	GET_FILE_INFO		; grab the info
 11622 000017BF 5E                      	pop	si			; get pointer back
 11623 000017C0 1F                      	pop	ds
 11624 000017C1 72E3                    	JC	short BadPath 		; invalid something
 11625                                  	; 15/01/2024
 11626                                  	;MOV	DX,BX (*)		; get high order size
 11627                                  	;MOV	AX,DI (**)		; get low order size
 11628 000017C3 89D8                    	mov	ax,bx ; hw of file size
 11629                                  	;
 11630                                  	;mov	bx,[si+0Eh]
 11631 000017C5 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11632 000017C8 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11633 000017CA 7502                    	JNZ	short GetSize 		; not empty
 11634                                  	;MOV	BX,128
 11635 000017CC B380                    	mov	bl,128	; 15/01/2024
 11636                                  GetSize:
 11637                                  	; 15/01/2024
 11638                                  	;MOV	DI,AX			; save low order word
 11639                                  	;MOV	AX,DX			; move high order for divide
 11640                                  	;xchg	ax,dx ; (*)
 11641                                  	; ax = hw of file size
 11642                                  
 11643 000017CE 31D2                    	XOR	DX,DX			; clear out high
 11644 000017D0 F7F3                    	DIV	BX			; wham
 11645 000017D2 50                      	PUSH	AX			; save dividend
 11646 000017D3 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11647 000017D5 F7F3                    	DIV	BX			; wham
 11648 000017D7 89D1                    	MOV	CX,DX			; save remainder
 11649 000017D9 5A                      	POP	DX			; get high order dividend
 11650 000017DA E306                    	JCXZ	LengthStore		; no roundup
 11651 000017DC 83C001                  	ADD	AX,1
 11652 000017DF 83D200                  	ADC	DX,0			; 32-bit increment
 11653                                  LengthStore:
 11654                                  	;mov	[si+21h],ax
 11655 000017E2 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11656                                  	;mov	[si+23h],dl
 11657 000017E5 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11658 000017E8 08F6                    	OR	DH,DH
 11659 000017EA 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11660                                  	;mov	[si+24h],dh
 11661 000017EC 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11662                                  	; 16/12/2022
 11663                                  GoodRet:
 11664                                  	;jmp	FCB_RET_OK
 11665 000017EF EBA3                    	jmp	short GoodPath
 11666                                  
 11667                                  ;Break <$FCB_Close - close a file>
 11668                                  ;----------------------------------------------------------------------------
 11669                                  ;
 11670                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11671                                  ;	as the FCB may be used for further I/O
 11672                                  ;
 11673                                  ;   Inputs:	DS:DX point to FCB
 11674                                  ;   Outputs:	AL = FF if file was not found on disk
 11675                                  ;   Registers modified: all
 11676                                  ;
 11677                                  ;----------------------------------------------------------------------------
 11678                                  ;
 11679                                  	; 16/01/2024
 11680                                  
 11681                                  _$FCB_CLOSE:		; System call 16
 11682                                  
 11683 000017F1 30C0                    	XOR	AL,AL			; default search attributes
 11684 000017F3 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11685 000017F6 7403                    	JZ	short NoAttr		; not extended
 11686 000017F8 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11687                                  NoAttr:
 11688                                  					; SS override
 11689 000017FB 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11690 000017FF E8C303                  	call	SFTFromFCB
 11691 00001802 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11692                                  
 11693                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11694                                  	; there is no need to set the SFT's attribute.
 11695                                  
 11696                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11697                                  	;;; done
 11698                                  
 11699                                  	;mov	al,[es:di+4]
 11700 00001804 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11701 00001808 30E4                    	XOR	AH,AH
 11702 0000180A 50                      	PUSH	AX
 11703                                  
 11704                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11705                                  	;;; done
 11706                                  
 11707 0000180B E8AB5A                  	call	CheckShare
 11708 0000180E 7508                    	JNZ	short NoStash
 11709 00001810 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11710                                  	;mov	[es:di+4],al
 11711 00001814 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11712                                  NoStash:
 11713                                  
 11714                                  ; 16/01/2024
 11715                                  %if 0
 11716                                  	;mov	ax,[si+14h]
 11717                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11718                                  	;mov	[es:di+0Fh],ax
 11719                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11720                                  	;mov	ax,[si+16h]
 11721                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11722                                  	;mov	[es:di+0Dh],ax
 11723                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11724                                  	;mov	ax,[si+10h]
 11725                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11726                                  	;mov	[es:di+11h],ax
 11727                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11728                                  	;mov	ax,[si+12h]
 11729                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11730                                  	;mov	[es:di+13h],ax
 11731                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11732                                  	;or	word [es:di+5],4000h
 11733                                  	; 17/12/2022
 11734                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11735                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11736                                  %else
 11737                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11738 00001818 1E                      	push	ds
 11739                                  	;lds	ax,[si+14h]
 11740 00001819 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11741                                  	;mov	[es:di+0Fh],ax
 11742 0000181C 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11743                                  	;mov	[es:di+0Dh],ds		
 11744 00001820 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11745 00001824 1F                      	pop	ds
 11746                                  	;lds	ax,[si+10h]
 11747 00001825 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11748                                  	;mov	[es:di+11h],ax
 11749 00001828 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11750                                  	;mov	[es:di+13h],ds
 11751 0000182C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11752                                  	; 16/01/2024
 11753                                  	;;or	word [es:di+5], 4000h
 11754                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11755 00001830 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11756                                  %endif
 11757                                  
 11758 00001835 16                      	push	ss
 11759 00001836 1F                      	pop	ds
 11760 00001837 E89016                  	call	DOS_CLOSE	; wham
 11761 0000183A C43E[9E05]              	LES	DI,[THISSFT]
 11762                                  
 11763                                  	;;; 9/8/86 F.C. restore SFT attribute
 11764 0000183E 59                      	POP	CX
 11765                                  	;mov	[es:di+4],cl
 11766 0000183F 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11767                                  	;;; 9/8/86 F.C. restore SFT attribute
 11768                                  
 11769 00001843 9C                      	PUSHF
 11770                                  	;test	word [es:di],0FFFFh
 11771                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11772                                  				; zero ref count gets blasted
 11773 00001844 26833D00                	cmp	word [ES:DI],0
 11774 00001848 7507                    	jnz     short CloseOK
 11775 0000184A 50                      	PUSH	AX
 11776 0000184B B04D                    	MOV	AL,'M' ; 4Dh
 11777 0000184D E8F202                  	call	BlastSFT
 11778 00001850 58                      	POP	AX
 11779                                  CloseOK:
 11780 00001851 9D                      	POPF
 11781 00001852 739B                    	JNC	short GoodRet
 11782                                  	;cmp	al,6
 11783 00001854 3C06                    	CMP	AL,error_invalid_handle
 11784 00001856 7497                    	JZ	short GoodRet
 11785                                  	;mov	al,2
 11786 00001858 B002                    	MOV	AL,error_file_not_found
 11787                                  fren90:
 11788                                  	; 16/12/2022
 11789                                  fcb_close_err:
 11790 0000185A E9FDED                  	jmp	FCB_RET_ERR
 11791                                  
 11792                                  ;
 11793                                  ;----------------------------------------------------------------------------
 11794                                  ;
 11795                                  ;**	$FCB_Rename - Rename a File
 11796                                  ;
 11797                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11798                                  ;	multiple files copying from the meta characters.
 11799                                  ;
 11800                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11801                                  ;		    name of the files to be renamed. Starting at offset 11h
 11802                                  ;		    in the FCB is the destination name.
 11803                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11804                                  ;		AL = FF -> some files may have been renamed but:
 11805                                  ;			rename to existing file or source file not found
 11806                                  ;	USES	ALL
 11807                                  ;
 11808                                  ;----------------------------------------------------------------------------
 11809                                  ;
 11810                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11811                                  
 11812                                  _$FCB_RENAME:		; System call 23
 11813                                  
 11814 0000185D E8F603                  	call	GetExtended		; get pointer to real FCB
 11815 00001860 52                      	push	dx
 11816 00001861 8A04                    	MOV	AL,[SI] 		; get drive byte
 11817 00001863 83C610                  	ADD	SI,10h			; point to destination
 11818                                  
 11819                                  					; RenBuf is in DOSDATA
 11820 00001866 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11821 00001869 FF34                    	push	word [SI]
 11822 0000186B 1E                      	push	ds
 11823                                  	;push	di			; save source pointer for TransFCB
 11824                                  	; 16/01/2024 - BugFix !
 11825 0000186C 56                      	push	si
 11826 0000186D 8804                    	MOV	[SI],AL			; drop in real drive
 11827 0000186F 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11828 00001871 E81952                  	call	TransFCB		; munch this pathname
 11829 00001874 5E                      	pop	si
 11830 00001875 1F                      	pop	ds	
 11831 00001876 8F04                    	pop	WORD [SI]		; get path back
 11832 00001878 5A                      	pop	dx			; Original FCB pointer
 11833 00001879 72DF                    	JC	short fren90		; bad path -> error
 11834                                  
 11835                                  					; SS override for WFP_Start & Ren_WFP
 11836 0000187B 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11837 00001880 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11838                                  
 11839                                  					; OpenBuf is in DOSDATA
 11840 00001885 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11841 00001888 E80252                  	call	TransFCB		; wham
 11842                                  					; NOTE that this call is pointing
 11843                                  					;  back to the ORIGINAL FCB so
 11844                                  					;  SATTRIB gets set correctly
 11845 0000188B 72CD                    	JC	short fren90		; error
 11846 0000188D E81F0E                  	call	DOS_RENAME
 11847 00001890 72C8                    	JC	short fren90
 11848                                  	; 16/12/2022
 11849 00001892 E9C2ED                  	jmp	FCB_RET_OK
 11850                                  	
 11851                                  ;	Error -
 11852                                  ;
 11853                                  ;	(al) = error code
 11854                                  
 11855                                  	; 16/12/2022
 11856                                  ;fren90:	
 11857                                  ;	;jmp	FCB_RET_ERR
 11858                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11859                                  ;	jmp	short fcb_close_err
 11860                                  
 11861                                  ;Break <Misbehavior fixers>
 11862                                  ;
 11863                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11864                                  ;   user's space so he may move them at will. Second, they have a small
 11865                                  ;   reserved area that may be used for system information. Third, there was
 11866                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11867                                  ;   usage.
 11868                                  ;
 11869                                  ;   This results in the following misbehavior:
 11870                                  ;
 11871                                  ;	infinite opens of the same file:
 11872                                  ;
 11873                                  ;	While (TRUE) {			While (TRUE) {
 11874                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11875                                  ;	    Read (FCB); 		    Write (FCB);
 11876                                  ;	    }				    }
 11877                                  ;
 11878                                  ;	infinite opens of different files:
 11879                                  ;
 11880                                  ;	While (TRUE) {			While (TRUE) {
 11881                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11882                                  ;	    Read (FCB); 		    Write (FCB);
 11883                                  ;	    }				    }
 11884                                  ;
 11885                                  ;	multiple closes of the same file:
 11886                                  ;
 11887                                  ;	FCBOpen (FCB);
 11888                                  ;	while (TRUE)
 11889                                  ;	    FCBClose (FCB);
 11890                                  ;
 11891                                  ;	I/O after closing file:
 11892                                  ;
 11893                                  ;	FCBOpen (FCB);
 11894                                  ;	while (TRUE) {
 11895                                  ;	    FCBWrite (FCB);
 11896                                  ;	    FCBClose (FCB);
 11897                                  ;	    }
 11898                                  ;
 11899                                  ;   The following is am implementation of a methodology for emulating the
 11900                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11901                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11902                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11903                                  ;   the local machine.
 11904                                  ;
 11905                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11906                                  ;   structures depending on the file itself and the state of operations of the
 11907                                  ;   OS. The information contained in this reserved field is enough to
 11908                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11909                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11910                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11911                                  ;
 11912                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11913                                  ;
 11914                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11915                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11916                                  ;   regenerated.
 11917                                  ;
 11918                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11919                                  ;   longer available. We can make up for this by using the following
 11920                                  ;   information:
 11921                                  ;
 11922                                  ;	The Drive number (from the DPB).
 11923                                  ;	The physical sector of the directory that contains the entry.
 11924                                  ;	The relative position of the entry in the sector.
 11925                                  ;	The first cluster field.
 11926                                  ;	The last used SFT.
 11927                                  ;      OR In the case of a device FCB
 11928                                  ;	The low 6 bits of sf_flags (indicating device type)
 11929                                  ;	The pointer to the device header
 11930                                  ;
 11931                                  ;   We read in the particular directory sector and examine the indicated
 11932                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11933                                  ;
 11934                                  ;   Some key items need to be remembered:
 11935                                  ;
 11936                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11937                                  ;	information. We enforce good behavior on the FCBs.
 11938                                  ;
 11939                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11940                                  ;	open VCs. The VCs may be closed only at process termination.
 11941                                  ;
 11942                                  ;	If this is not an installed version of the DOS, file sharing will
 11943                                  ;	always be present.
 11944                                  ;
 11945                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11946                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11947                                  ;
 11948                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11949                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11950                                  ;	proper OI record.
 11951                                  ;
 11952                                  ;   The test bits are:
 11953                                  ;
 11954                                  ;	00 -> local file
 11955                                  ;	40 -> sharing local
 11956                                  ;	80 -> network
 11957                                  ;	C0 -> local device
 11958                                  
 11959                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11960                                  ;----------------------------------------------------------------------------
 11961                                  ;
 11962                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11963                                  ;	pieces of information into the FCB to allow for subsequent
 11964                                  ;	regeneration. Poke LRU also.
 11965                                  ;
 11966                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11967                                  ;		DS:SI point to the FCB (not an extended one)
 11968                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11969                                  ;		DS:SI preserved
 11970                                  ;		ES:DI point to sft
 11971                                  ;   Registers modified: All
 11972                                  ;
 11973                                  ;
 11974                                  ;----------------------------------------------------------------------------
 11975                                  ;
 11976                                  	; 20/01/2024
 11977                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11978                                  
 11979                                  SaveFCBInfo:
 11980                                  
 11981 00001895 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11982 0000189A E8CCF9                  	call	IsSFTNet
 11983 0000189D 740B                    	JZ	short SaveLocal		; if not network then save local info
 11984                                  ;
 11985                                  ;----- In net support -----
 11986                                  ;
 11987                                  	; 17/05/2019 - Retro DOS v4.0
 11988                                  
 11989                                  	; MSDOS 3.3
 11990                                  	;;mov	ax,[es:di+1Dh]
 11991                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11992                                  	;;mov	[si+1Ah],ax
 11993                                  	;mov	[si+fcb_net_handle],ax
 11994                                  	;push	es
 11995                                  	;push	di
 11996                                  	;;les	di,[es:di+19h]
 11997                                  	;LES	DI,[ES:DI+sf_netid]
 11998                                  	;;mov	[si+1Ch],di
 11999                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12000                                  	;;mov 	[si+1Eh],es
 12001                                  	;MOV	[SI+fcb_netID+2],ES
 12002                                  	;pop	di
 12003                                  	;pop	es
 12004                                  
 12005                                  	; MSDOS 6.0
 12006                                  	;mov	ax,[es:di+0Bh]
 12007 0000189F 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12008                                  	;mov	[si+1Ch],ax
 12009 000018A3 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12010                                  	
 12011                                  	;mov	bl,80h
 12012 000018A6 B380                    	MOV	BL,FCBNETWORK
 12013                                  ;
 12014                                  ;----- END In net support -----
 12015                                  ;
 12016 000018A8 EB63                    	jmp	SHORT SaveSFN
 12017                                  
 12018                                  SaveLocal:
 12019                                  	;IF	Installed
 12020 000018AA E80C5A                  	call	CheckShare
 12021                                  	;JZ	short SaveNoShare	; no sharer
 12022                                  	;JMP	short SaveShare		; sharer present
 12023                                  	; 16/12/2022
 12024                                  	; 28/07/2019
 12025 000018AD 7559                    	jnz	short SaveShare
 12026                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12027                                  	;JZ	short SaveNoShare	; no sharer
 12028                                  	;JMP	short SaveShare		; sharer present
 12029                                  
 12030                                  SaveNoShare:
 12031                                  	;;test 	word [es:di+5],80h
 12032                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12033 000018AF 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12034 000018B4 7542                    	JNZ	short SaveNoShareDev	; Device
 12035                                  
 12036                                  	; Save no sharing local file information
 12037                                  
 12038                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12039                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12040 000018B6 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12041                                  	;mov	[si+1Dh],ax
 12042 000018BA 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12043                                  
 12044                                  	; MSDOS 6.0
 12045                                  
 12046                                  	;SR; Store high byte of directory sector
 12047                                  	;mov	ax,[es:di+1Dh]
 12048 000018BD 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12049                                  	
 12050                                  	; SR;
 12051                                  	; We have to store the read-only and archive attributes of the file.
 12052                                  	; We extract it from the SFT and store it in the top two bits of the 
 12053                                  	; sector number ( sector number == 22 bits only )
 12054                                  
 12055                                  	;mov	bl,[es:di+4]
 12056 000018C1 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12057 000018C5 88DF                    	mov	bh,bl
 12058 000018C7 D0CB                    	ror	bl,1
 12059 000018C9 D0E7                    	shl	bh,1
 12060 000018CB 08FB                    	or	bl,bh
 12061 000018CD 80E3C0                  	and	bl,0C0h
 12062 000018D0 08D8                    	or	al,bl
 12063                                  	;mov	[si+18h],al ; 08/11/2022
 12064 000018D2 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12065                                  
 12066                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12067                                  	;mov	al,[es:di+1Fh]
 12068 000018D5 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12069                                  	;mov	[si+1Fh],al
 12070 000018D9 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12071                                  	;mov	ax,[es:di+0Bh]
 12072 000018DC 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12073                                  	;mov	[si+1Bh],ax
 12074 000018E0 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12075 000018E3 B300                    	MOV	BL,0
 12076                                  
 12077                                  	; Create the bits field from the dirty/device bits of the flags word 
 12078                                  	; and the mode byte
 12079                                  
 12080                                  SetFCBBits:
 12081                                  	;mov	ax,[es:di+5]
 12082 000018E5 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12083 000018E9 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12084                                  	;or	al,[es:di+2]
 12085 000018EB 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12086                                  	;mov	[si+1Ah], al
 12087 000018EF 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12088                                  
 12089                                  	; MSDOS 6.0
 12090                                  	
 12091                                  	; SR;
 12092                                  	; Check if we came here for local file or device. If for local file, 
 12093                                  	; skip setting of SFT index
 12094                                  	
 12095 000018F2 08DB                    	or	bl,bl
 12096 000018F4 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12097                                  
 12098 000018F6 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12099                                  
 12100                                  	; Save no sharing local device information
 12101                                  
 12102                                  SaveNoShareDev:
 12103                                  	; 20/01/2024
 12104                                  	;;mov	ax,[es:di+7]
 12105                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12106                                  	;;mov	[si+1Ah],ax
 12107                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12108                                  	;;mov	ax,[es:di+9]
 12109                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12110                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12111                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12112 000018F8 06                      	push	es
 12113 000018F9 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12114 000018FD 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12115 00001900 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12116 00001903 07                      	pop	es
 12117                                  	
 12118                                  	;mov	bl,40h
 12119 00001904 B340                    	MOV	BL,FCBDEVICE
 12120                                  	; 28/12/2022
 12121 00001906 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12122                                  
 12123                                  SaveShare:
 12124                                  	;ENDIF
 12125                                  
 12126                                  ;----- In share support -----
 12127                                  
 12128                                  	;call	far [ss:ShSave]
 12129 00001908 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12130                                  
 12131                                  ;----- end in share support -----
 12132                                  
 12133                                  	; 17/05/2019
 12134                                  
 12135                                  SaveSFN:
 12136                                  	;lea	ax,[di-6]
 12137 0000190D 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12138                                  	
 12139                                  	; Adjust for offset to table.
 12140                                  	
 12141 00001910 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12142                                  
 12143 00001915 53                      	push	bx			;bx = FCB type (net/Share or local)
 12144                                  	;;mov	bl,53 ; MSDOS 3.3
 12145                                  	;mov	bl,59 ; MSDOS 6.0
 12146 00001916 B33B                    	MOV	BL,SF_ENTRY.size
 12147 00001918 F6F3                    	DIV	BL
 12148                                  	;mov	[si+18h],al
 12149 0000191A 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12150 0000191D 5B                      	pop	bx			;restore bx
 12151                                  
 12152                                  SaveNoSFN:
 12153                                  	;mov	ax,[es:di+5]
 12154 0000191E 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12155 00001922 243F                    	AND	AL,3Fh			; get real drive
 12156 00001924 08D8                    	OR	AL,BL
 12157                                  	;mov	[si+19h],al
 12158 00001926 884419                  	MOV	[SI+fcb_l_drive],AL
 12159                                  
 12160 00001929 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12161 0000192D 40                      	INC	AX
 12162                                  	;mov	[es:di+15h],ax
 12163 0000192E 26894515                	MOV	[ES:DI+sf_LRU],AX
 12164 00001932 7506                    	JNZ	short SimpleStuff
 12165                                  	
 12166                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12167                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12168                                  	
 12169                                  	;mov	bx,15h
 12170 00001934 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12171 00001937 E80500                  	call	ResetLRU
 12172                                  
 12173                                  	; Set new LRU to AX
 12174                                  SimpleStuff:
 12175 0000193A 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12176 0000193E C3                      	retn
 12177                                  
 12178                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12179                                  ;----------------------------------------------------------------------------
 12180                                  ;
 12181                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12182                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12183                                  ;   at 0.
 12184                                  ;
 12185                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12186                                  ;		ES:DI point to SFT currently being updated
 12187                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12188                                  ;		AX has 8000h
 12189                                  ;   Registers modified: none
 12190                                  ;
 12191                                  ;----------------------------------------------------------------------------
 12192                                  ;
 12193                                  
 12194                                  	; 17/05/2019 - Retro DOS v4.0
 12195                                  ResetLRU:
 12196                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12197                                  	; DOSDATA
 12198                                  
 12199 0000193F B80080                  	MOV	AX,8000h
 12200 00001942 06                      	push	es
 12201 00001943 57                      	push	di
 12202                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12203 00001944 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12204                                  	;mov	cx,[es:di+4]
 12205 00001949 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12206                                  	;lea	di,[di+6]
 12207 0000194D 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12208                                  ovScan:
 12209 00001950 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12210 00001953 7703                    	JA	short ovLoop
 12211 00001955 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12212                                  ovLoop:
 12213                                  	;;add	di,53	; MSDOS 3.3
 12214                                  	;add	di,59	; MSDOS 6.0	
 12215 00001958 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12216 0000195B E2F3                    	LOOP	ovScan
 12217 0000195D 5F                      	pop	di
 12218 0000195E 07                      	pop	es
 12219 0000195F 268901                  	MOV	[ES:DI+BX],AX
 12220 00001962 C3                      	retn
 12221                                  
 12222                                  ;IF  0  ; We dont need this routine any more.
 12223                                  ;
 12224                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12225                                  ;----------------------------------------------------------------------------
 12226                                  ;
 12227                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12228                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12229                                  ;   count here and fill in the appropriate field.
 12230                                  ;
 12231                                  ;   Inputs:	ES:DI point to SFT
 12232                                  ;   Outputs:	ES:DI has the open age field filled in.
 12233                                  ;		If open age has wraparound, we will have subtracted 8000h
 12234                                  ;		    from all open ages.
 12235                                  ;   Registers modified: AX
 12236                                  ;
 12237                                  ;----------------------------------------------------------------------------
 12238                                  ;
 12239                                  ;SetOpenAge:
 12240                                  ;	; 20/07/2018 - Retro DOS v3.0
 12241                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12242                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12243                                  ;
 12244                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12245                                  ;
 12246                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12247                                  ;	INC	AX
 12248                                  ;	;mov	[es:di+17h],ax
 12249                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12250                                  ;	JNZ	short SetDone
 12251                                  ;	;mov	bx,17h
 12252                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12253                                  ;	call	ResetLRU
 12254                                  ;SetDone:
 12255                                  ;	MOV	[CS:OpenLRU],AX
 12256                                  ;	retn
 12257                                  ;
 12258                                  ;ENDIF	; SetOpenAge no longer needed
 12259                                  
 12260                                  ; 21/07/2018 - Retro DOS v3.0
 12261                                  ; LRUFCB for MSDOS 6.0 !
 12262                                  
 12263                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12264                                  ;----------------------------------------------------------------------------
 12265                                  ;
 12266                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12267                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12268                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12269                                  ;
 12270                                  ;   Inputs:	none
 12271                                  ;   Outputs:	ES:DI point to SFT
 12272                                  ;		ThisSFT points to SFT
 12273                                  ;		SFT is zeroed
 12274                                  ;		Carry set of closes failed
 12275                                  ;   Registers modified: none
 12276                                  ;
 12277                                  ;----------------------------------------------------------------------------
 12278                                  ;
 12279                                  ; MSDOS 6.0
 12280                                  ;IF 0	; rewritten this routine
 12281                                  ;
 12282                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12283                                  ;	call	save_world
 12284                                  ;	
 12285                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12286                                  ; to find the lease recently used one that is younger than the open age.  We
 12287                                  ; operate be scanning the list n times finding the least age that is greater
 12288                                  ; or equal to the previous minimum age.
 12289                                  ;
 12290                                  ;   BP is the count of times we need to go through this loop.
 12291                                  ;   AX is the current acceptable minimum age to consider
 12292                                  ;
 12293                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12294                                  ;	XOR	AX,AX			; low = 0;
 12295                                  ;
 12296                                  ; If we've scanned the table n times, then we are done.
 12297                                  ;
 12298                                  ;lru1:
 12299                                  ;	CMP	bp,0			; while (k--) {
 12300                                  ;	JZ	short lru75
 12301                                  ;	DEC	bp
 12302                                  ;
 12303                                  ; Set up for scan.
 12304                                  ;
 12305                                  ;   AX is the minimum age for consideration
 12306                                  ;   BX is the minimum age found during the scan
 12307                                  ;   SI is the position of the entry that corresponds to BX
 12308                                  ;
 12309                                  ;	MOV	BX,-1			;     min = 0xffff;
 12310                                  ;	MOV	si,BX			;     pos = 0xffff;
 12311                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12312                                  ;	;mov	cx,[es:di+4]
 12313                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12314                                  ;	;lea	di,[di+6]
 12315                                  ;	LEA	DI,[DI+SFT.SFTable]
 12316                                  ;
 12317                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12318                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12319                                  ; are done.  In both cases, we use the found entry.
 12320                                  ;
 12321                                  ;lru2:
 12322                                  ;	cmp	word [es:di],0
 12323                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12324                                  ;	jz	short lru25
 12325                                  ;	;cmp	word [es:di],-1
 12326                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12327                                  ;	cmp	word [es:di],sf_busy
 12328                                  ;	jnz	short lru3
 12329                                  ;
 12330                                  ; The entry is usable without further scan.  Go and use it.
 12331                                  ;
 12332                                  ;lru25:
 12333                                  ;	MOV	si,DI			;	      pos = i;
 12334                                  ;	JMP	short lru11		;	      goto got;
 12335                                  ;
 12336                                  ; See if the entry is for the network or for the sharer.
 12337                                  ;
 12338                                  ;  If for the sharer or network then
 12339                                  ;	if the age < current minimum AND >= allowed minimum then
 12340                                  ;	    this entry becomes current minimum
 12341                                  ;
 12342                                  ;lru3:
 12343                                  ;	;test	word [es:di+5],8000h
 12344                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12345                                  ;					;	  if (!net[i]
 12346                                  ;	JNZ	short lru35
 12347                                  ;if installed
 12348                                  ;	call	CheckShare		;		&& !sharing)
 12349                                  ;	JZ	short lru5		;	  else
 12350                                  ;ENDIF
 12351                                  ;
 12352                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12353                                  ; current minimum.
 12354                                  ;
 12355                                  ;lru35:
 12356                                  ;	;mov	dx,[es:di+17h]
 12357                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12358                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12359                                  ;	JB	short lru5
 12360                                  ;	CMP	DX,BX
 12361                                  ;	JAE	short lru5		;	      age[i] < min) {
 12362                                  ;
 12363                                  ; entry is new minimum.  Remember his age.
 12364                                  ;
 12365                                  ;	mov	bx,DX			;	      min = age[i];
 12366                                  ;	mov	si,di			;	      pos = i;
 12367                                  ;
 12368                                  ; End of loop.	gp back for more
 12369                                  ;
 12370                                  ;lru5:
 12371                                  ;	;add	di,53
 12372                                  ;	add	di,SF_ENTRY.size
 12373                                  ;	loop	lru2			;	      }
 12374                                  ;
 12375                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12376                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12377                                  ; complete.  Go find LRU.
 12378                                  ;
 12379                                  ;lru6:	
 12380                                  ;	cmp	si,-1			; position not -1?
 12381                                  ;	jz	short lru75		; no, done with everything
 12382                                  ;	lea	ax,[bx+1]		; set new threshold age
 12383                                  ;	jmp	short lru1		; go and loop for more
 12384                                  ;lru65:	
 12385                                  ;	stc
 12386                                  ;	jmp	short LRUDead		;	  return -1;
 12387                                  ;
 12388                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12389                                  ; network entry. We now make a second pass through to find the LRU entry
 12390                                  ; that is local-no-share or has age >= AX
 12391                                  ;
 12392                                  ;lru75:
 12393                                  ;	mov	bx,-1			; min = 0xffff;
 12394                                  ;	mov	si,bx			; pos = 0xffff;
 12395                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12396                                  ;	;mov	cx,[es:di+4]
 12397                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12398                                  ;	;lea	di,[di+6]
 12399                                  ;	LEA	DI,[DI+SFT.SFTable]
 12400                                  ;
 12401                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12402                                  ; then check for lru.
 12403                                  ;
 12404                                  ;lru8:
 12405                                  ;	;test	word [es:di+5],8000h
 12406                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12407                                  ;	jnz	short lru85		; is for network, go check age
 12408                                  ;	call	CheckShare		; sharer here?
 12409                                  ;	jz	short lru86		; no, go check lru
 12410                                  ;
 12411                                  ; Network or sharer.  Check age
 12412                                  ;
 12413                                  ;lru85:
 12414                                  ;	;cmp	[es:di+17h],ax
 12415                                  ;	cmp	[es:di+sf_OpenAge],ax
 12416                                  ;	jb	short lru9		; age is before threshold, skip it
 12417                                  ;
 12418                                  ; Check LRU
 12419                                  ;
 12420                                  ;lru86:
 12421                                  ;	;cmp	[es:di+15h],bx
 12422                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12423                                  ;	jae	short lru9		; no, skip this
 12424                                  ;	mov	si,di			; remember position
 12425                                  ;	;mov	bx,[es:di+15h]
 12426                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12427                                  ;
 12428                                  ; Done with this entry, go back for more.
 12429                                  ;
 12430                                  ;lru9:
 12431                                  ;	;add	di, 53
 12432                                  ;	add	di,SF_ENTRY.size
 12433                                  ;	loop	lru8
 12434                                  ;
 12435                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12436                                  ; out. The conditions here are:
 12437                                  ;
 12438                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12439                                  ;
 12440                                  ;lru10:
 12441                                  ;	cmp	si,-1			; if no one f
 12442                                  ;	jz	short lru65		;     return -1;
 12443                                  ;lru11:
 12444                                  ;	mov	di,si
 12445                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12446                                  ;	MOV	[CS:THISSFT+2],ES
 12447                                  ;
 12448                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12449                                  ; is 0.
 12450                                  ;
 12451                                  ;	;test	word [es:di+5],8000h
 12452                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12453                                  ;	JNZ	short LRUClose
 12454                                  ;IF INSTALLED
 12455                                  ;	call	CheckShare
 12456                                  ;	JZ	short LRUDone
 12457                                  ;ENDIF
 12458                                  ;
 12459                                  ; Repeat close until ref count is 0
 12460                                  ;
 12461                                  ;LRUClose:
 12462                                  ;	push	ss
 12463                                  ;	pop	ds
 12464                                  ;	LES	DI,[THISSFT]
 12465                                  ;	cmp     word [es:di],0
 12466                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12467                                  ;	JZ	short LRUDone 		; nope, all done
 12468                                  ;	call	DOS_CLOSE
 12469                                  ;	jnc	short LRUClose		; no error => clean up
 12470                                  ;	;cmp	al,6
 12471                                  ;	cmp	al,error_invalid_handle
 12472                                  ;	jz	short LRUClose
 12473                                  ;	stc
 12474                                  ;	JMP	short LRUDead
 12475                                  ;LRUDone:
 12476                                  ;	XOR	AL,AL
 12477                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12478                                  ;
 12479                                  ;LRUDead:
 12480                                  ;	call	restore_world
 12481                                  ;	LES     DI,[CS:THISSFT]
 12482                                  ;	jnc	short LRUFCB_retn
 12483                                  ;LRUFCB_err:
 12484                                  ;	; mov	al, 23h	
 12485                                  ;	MOV	AL,error_FCB_unavailable
 12486                                  ;LRUFCB_retn:	
 12487                                  ;	retn:
 12488                                  ;
 12489                                  ;ENDIF	; LRUFCB has been rewritten below.
 12490                                  
 12491                                  ; 17/05/2019 - Retro DOS v4.0
 12492                                  ; LRUFCB for MSDOS 6.0 !
 12493                                  ;----------------------------------------------------------------------------
 12494                                  ;
 12495                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12496                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12497                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12498                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12499                                  ; optimize regeneration operations by keeping track of the current local
 12500                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12501                                  ; local SFT in the SFT Block.
 12502                                  ;
 12503                                  ; Inputs: al = 0 => Regenerate SFT operation
 12504                                  ;	    = 1 => Allocate new SFT for Open/Create
 12505                                  ;
 12506                                  ; Outputs: Carry clear
 12507                                  ;	 	es:di = Address of allocated SFT
 12508                                  ;	  	ThisSFT = Address of allocated SFT
 12509                                  ;
 12510                                  ;	  carry set if closes of net/Share files failed 
 12511                                  ;		al = error_FCB_unavailable
 12512                                  ;
 12513                                  ; Registers affected: None
 12514                                  ;
 12515                                  ;----------------------------------------------------------------------------
 12516                                  
 12517                                  ;LruFCB	PROC	NEAR
 12518                                  LRUFCB:
 12519                                  	; 17/05/2019 - Retro DOS v4.0
 12520                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12521                                  
 12522                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12523                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12524                                  
 12525                                  	; 20/01/2024
 12526                                  
 12527 00001963 06                      	push	es	; * (MSDOS 6.21)
 12528                                  	
 12529 00001964 E8FFEA                  	call	save_world
 12530                                  	
 12531                                  	;getdseg <ds>		;ds = DOSDATA
 12532 00001967 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12533                                  
 12534 0000196C 08C0                    	or	al,al		;Check if regenerate allocation
 12535 0000196E 7516                    	jnz	short lru1	;Try to find SFT to use
 12536                                  
 12537                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12538                                  	; local SFT, just return that SFT to reuse
 12539                                  
 12540                                  	; 20/01/2024
 12541                                  	;mov	di,[LocalSFT]
 12542                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12543                                  	;jz	short lru1	;invalid local SFT, find one
 12544                                  
 12545                                  	; We have found a valid local SFT. Recycle this SFT
 12546                                  
 12547 00001970 C43E[4410]              	les	di,[LocalSFT]
 12548                                  
 12549                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12550 00001974 8CC1                    	mov	cx,es
 12551 00001976 09F9                    	or	cx,di		; is address == 0?
 12552 00001978 740C                    	jz	short lru1	; invalid local SFT, find one
 12553                                  
 12554                                  gotlocalSFT:
 12555 0000197A 893E[9E05]              	mov	[THISSFT],di
 12556 0000197E 8C06[A005]              	mov	[THISSFT+2],es
 12557 00001982 F8                      	clc
 12558 00001983 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12559                                  
 12560                                  lru1:
 12561 00001986 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12562                                  	;mov	cx,[es:di+4]
 12563 0000198A 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12564                                  	;lea	di,[di+6]
 12565 0000198E 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12566                                  
 12567                                  	; We scan through all the SFTs scanning for a free one. It also 
 12568                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12569                                  	; bx = min. LRU for local SFTs
 12570                                  	; si = pos. of local SFT with min. LRU
 12571                                  	; dx = min. LRU for net/Share SFTs
 12572                                  	; bp = pos. of net/Share SFT with min. LRU
 12573                                  
 12574 00001991 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12575 00001994 89DE                    	mov	si,bx
 12576 00001996 89DA                    	mov	dx,bx
 12577 00001998 89DD                    	mov	bp,bx
 12578                                  
 12579                                  findSFT:
 12580                                  	;See if this SFT is a free one. If so, return it
 12581 0000199A 26830D00                	or	word [es:di],0
 12582                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12583 0000199E 744C                    	jz	short gotSFT	;yes, SFT is free
 12584                                  	;;cmp	word [es:di],-1
 12585                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12586 000019A0 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12587 000019A4 7446                    	jz	short gotSFT	;no, can use it
 12588                                  
 12589                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12590                                  	; used for a later regen.
 12591                                  
 12592                                  	; 16/12/2022
 12593                                  	; 08/11/2022
 12594                                  	;test	byte [es:di+6],80h
 12595 000019A6 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12596                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12597                                  	;;test	word [es:di+5],8000h
 12598                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12599 000019AB 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12600                                  
 12601                                  ;IF installed
 12602 000019AD E80959                  	call	CheckShare	;Share present?
 12603                                  ;ENDIF
 12604 000019B0 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12605                                  
 12606                                  	;Local SFT, register its address
 12607                                  
 12608                                  	; !!HACK!!!
 12609                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12610                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12611                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12612                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12613                                  	; out the code that previously existed at label 'gotSFT'
 12614                                  
 12615                                  hackpoint:
 12616 000019B2 893E[4410]              	mov	[LocalSFT],di
 12617 000019B6 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12618                                  
 12619 000019BA 08C0                    	or	al,al		;Is operation = REGEN?
 12620 000019BC 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12621                                  
 12622                                  	;Get LRU for local files
 12623                                  	
 12624                                  	;cmp	[es:di+15h],bx
 12625 000019BE 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12626 000019C2 7306                    	jae	short lru4	;no, skip
 12627                                  
 12628                                  	;mov	bx,[es:di+15h]
 12629 000019C4 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12630 000019C8 89FE                    	mov	si,di		;store SFT position
 12631                                  lru4:
 12632                                  	;add	di,59
 12633 000019CA 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12634 000019CD E2CB                    	loop	findSFT
 12635                                  	
 12636                                  	; 20/01/2024
 12637 000019CF 49                      	dec	cx ; -1
 12638                                  
 12639                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12640                                  	; available, we will reuse it instead of net/Share LRU
 12641                                  
 12642 000019D0 89F7                    	mov	di,si
 12643                                  	;cmp	si,-1		;local SFT available?
 12644 000019D2 39CE                    	cmp	si,cx ; 20/01/2024
 12645 000019D4 7516                    	jnz	short gotSFT	;yes, return it
 12646                                  
 12647                                  	;No local SFT, see if we got a net/Share SFT
 12648                                  
 12649 000019D6 89EF                    	mov	di,bp
 12650                                  
 12651 000019D8 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12652                                  	;cmp	bp,-1		;net/Share SFT available?
 12653 000019DA 752D                    	jnz	short gotnetSFT	;yes, return it
 12654                                  noSFT:
 12655                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12656                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12657                                  	; count is not maintained properly.
 12658                                  
 12659 000019DC EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12660                                  
 12661                                  	; Handle the LRU for net/Share SFTs
 12662                                  lru5:
 12663                                  	;cmp	[es:di+15h],dx
 12664 000019DE 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12665 000019E2 73E6                    	jae	short lru4	;no, skip
 12666                                  
 12667                                  	;mov	dx,[es:di+15h]
 12668 000019E4 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12669                                  
 12670 000019E8 89FD                    	mov	bp,di		;store SFT position
 12671 000019EA EBDE                    	jmp	short lru4	;continue with next SFT
 12672                                  
 12673                                  gotSFT:
 12674 000019EC 08C0                    	or	al,al
 12675 000019EE 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12676                                  
 12677                                  	; HACK!!!
 12678                                  	; The code here differs from the code at 'hackpoint' only in the
 12679                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12680                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12681                                  	; has been commented out below and replaced by the code just above.
 12682                                  
 12683                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12684                                  ;
 12685                                  ;	or	al,al		  ;Regen?
 12686                                  ;	jnz	short notlocaluse ;yes, register it and return
 12687                                  ;
 12688                                  ;Register this SFT as a local one
 12689                                  ;
 12690                                  ;	mov	[LocalSFT],di
 12691                                  ;	mov	[LocalSFT+2],es
 12692                                  ;	jmp	gotlocalSFT	;return to caller
 12693                                  ;
 12694                                  ;notlocaluse:
 12695                                  
 12696                                  	; The caller is probably going to use this SFT for a net/Share file.
 12697                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12698                                  	; does not really know whether it is a local file or not. We
 12699                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12700                                  	; registered as a local SFT that can be recycled.
 12701                                  
 12702 000019F0 8CC0                    	mov	ax,es
 12703 000019F2 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12704 000019F6 750E                    	jne	short notinvalid
 12705 000019F8 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12706                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12707                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12708 000019FC 7508                    	jne	short notinvalid
 12709                                  zerolocalSFT:	
 12710 000019FE 31C0                    	xor	ax,ax ; 0
 12711 00001A00 A3[4410]                	mov	[LocalSFT],ax
 12712 00001A03 A3[4610]                	mov	[LocalSFT+2],ax
 12713                                  	
 12714                                  notinvalid:
 12715 00001A06 E971FF                  	jmp	gotlocalSFT
 12716                                  
 12717                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12718                                  	; Invalidate this variable i.e LocalSFT = NULL
 12719                                  
 12720                                  ;zerolocalSFT:
 12721                                  	;xor	ax,ax ; 0
 12722                                  	;mov	[LocalSFT],ax
 12723                                  	;mov	[LocalSFT+2],ax
 12724                                  	;
 12725                                  	;jmp	gotlocalSFT
 12726                                  
 12727                                  gotnetSFT:
 12728                                  	; We have an SFT that is currently net/Share. If it is going to be
 12729                                  	; used for a regen, we know it has to be a local SFT. Update the
 12730                                  	; LocalSFT variable
 12731                                  
 12732 00001A09 08C0                    	or	al,al
 12733 00001A0B 7508                    	jnz	short closenet
 12734                                  
 12735 00001A0D 893E[4410]              	mov	[LocalSFT],di
 12736 00001A11 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12737                                  closenet:
 12738 00001A15 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12739 00001A19 8C06[A005]              	mov	[THISSFT+2],es
 12740                                  
 12741                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12742                                  	; count is 0.
 12743                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12744                                  	; recycled -- no need to check for this.
 12745                                  
 12746                                  LRUClose:
 12747 00001A1D 26833D00                	cmp	word [es:di],0
 12748                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12749 00001A21 740C                    	jz	short LRUDone	; nope, all done
 12750                                  
 12751 00001A23 E8A414                  	call	DOS_CLOSE
 12752 00001A26 73F5                    	jnc	short LRUClose	; no error => clean up
 12753                                  
 12754                                  	; Bugbug: I dont know why we are trying to close after we get an
 12755                                  	; error closing. Seems like we could have a potential infinite loop
 12756                                  	; here. This has to be verified.
 12757                                  
 12758 00001A28 3C06                    	cmp	al,error_invalid_handle ; 6
 12759 00001A2A 74F1                    	je	short LRUClose
 12760                                  errorbadSFT:
 12761 00001A2C F9                      	stc
 12762 00001A2D EB05                    	JMP	short LRUDead
 12763                                  LRUDone:
 12764 00001A2F 30C0                    	XOR	AL,AL
 12765 00001A31 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12766                                  
 12767                                  LRUDead:
 12768 00001A34 E818EA                  	call	restore_world		; use macro
 12769                                  	
 12770 00001A37 07                      	pop	es ; * (MSDOS 6.21)
 12771                                  
 12772                                  	;getdseg <es>
 12773 00001A38 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12774 00001A3D 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12775                                  
 12776                                  	;;retnc
 12777                                  	;jc	short LruFCB_err
 12778                                  	;retn
 12779                                  
 12780                                  	; 16/12/2022
 12781                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12782 00001A42 7302                    	jnc	short LruFCB_retn
 12783                                  	;jc	short LruFCB_err
 12784                                  	;retn
 12785                                  		
 12786                                  LruFCB_err:
 12787 00001A44 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12788                                  LruFCB_retn:
 12789 00001A46 C3                      	retn
 12790                                  	
 12791                                  ;LruFCB	ENDP
 12792                                  
 12793                                  ; 17/05/2019 - Retro DOS v4.0
 12794                                  
 12795                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12796                                  
 12797                                  ; --------------------------------------------------------------------------
 12798                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12799                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12800                                  ; to copy the name to different destinations
 12801                                  ;
 12802                                  ; Inputs: ds:si = source string
 12803                                  ;	 es:di = destination string
 12804                                  ;	 cx = length of string
 12805                                  ;
 12806                                  ; Outputs: String copied to destination
 12807                                  ;
 12808                                  ; Registers affected: cx,di,si
 12809                                  ; --------------------------------------------------------------------------
 12810                                  
 12811                                  RegenCopyName:
 12812                                  CopyName:
 12813 00001A47 AC                      	lodsb			;load character
 12814 00001A48 E87C35                  	call	UCase		; convert char to upper case
 12815                                  StuffChar2:
 12816 00001A4B AA                      	STOSB			;store converted character
 12817 00001A4C E2F9                    	LOOP	CopyName	;
 12818                                  DoneName:
 12819 00001A4E C3                      	retn
 12820                                  
 12821                                  ; --------------------------------------------------------------------------
 12822                                  
 12823                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12824                                  FCBRegen:
 12825                                  	; called from SFTFromFCB. SS already DOSDATA
 12826                                  
 12827                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12828                                  	; we do not fill, size we do no fill, position we do not fill,
 12829                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12830                                  
 12831                                  	;mov	al,[si+19h]
 12832 00001A4F 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12833                                  
 12834                                  	; We discriminate based on the first two bits in the reserved field.
 12835                                  	
 12836                                  	;test	al,80h
 12837 00001A52 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12838 00001A54 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12839                                  
 12840                                  	; The FCB is for a network or a sharing based system. At this point 
 12841                                  	; we have already closed the SFT for this guy and reconnection is 
 12842                                  	; impossible.
 12843                                  	;
 12844                                  	; Remember that he may have given us a FCB with bogus information in
 12845                                  	; it. Check to see if sharing is present or if the redir is present.
 12846                                  	; If either is around, presume that we have cycled out the FCB and 
 12847                                  	; give the hard error. Otherwise, just return with carry set.
 12848                                  
 12849 00001A56 E86058                  	call	CheckShare		; test for sharer
 12850 00001A59 7509                    	JNZ	short RegenFail		; yep, fail this.
 12851                                  	
 12852                                  	;mov	ax,1100h
 12853 00001A5B B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12854 00001A5E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12855                                  			; Return: AL = 00h  not installed, OK to install
 12856                                  			; 01h  not installed, not OK to install
 12857                                  			; FFh  installed
 12858 00001A60 08C0                    	OR	AL,AL			; is it there?
 12859 00001A62 740C                    	JZ	short RegenDead		; no, just fail the operation
 12860                                  RegenFail:
 12861                                  	; 17/05/2019 - Retro DOS v4.0
 12862                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12863 00001A64 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12864                                  
 12865                                  	;cmp	ah,10h
 12866 00001A68 80FC10                  	cmp	AH,FCB_CLOSE
 12867 00001A6B 7403                    	jz	short RegenDead
 12868 00001A6D E88B01                  	call	FCBHardErr		; massive hard error.
 12869                                  RegenDead:
 12870 00001A70 F9                      	STC				; carry set
 12871                                  FCBRegen_retn:
 12872 00001A71 C3                      	retn
 12873                                  
 12874                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12875                                  	; so fail the operation.
 12876                                  
 12877                                  RegenNoSharing:
 12878 00001A72 E84458                  	call	CheckShare		; Sharing around?
 12879 00001A75 75ED                    	JNZ	short RegenFail
 12880                                  	
 12881                                  	; Find an SFT for this guy.
 12882                                  	
 12883                                  	; 17/05/2019 - Retro DOS v4.0
 12884                                  
 12885                                  	; MSDOS 3.3
 12886                                  	;call	LRUFCB
 12887                                  	;jc	short FCBRegen_retn
 12888                                  	
 12889                                  	; MSDOS 6.0
 12890 00001A77 50                      	push	ax
 12891 00001A78 B000                    	mov	al,0			;indicate it is a regen operation
 12892 00001A7A E8E6FE                  	call	LRUFCB
 12893 00001A7D 58                      	pop	ax
 12894 00001A7E 72F1                    	jc	short FCBRegen_retn
 12895                                  
 12896                                  	;mov	word [es:di+2],8002h
 12897 00001A80 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12898 00001A86 243F                    	AND	AL,3Fh			; get drive number for flags
 12899 00001A88 98                      	CBW
 12900                                  	;or	ax,4000h
 12901 00001A89 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12902                                  
 12903                                  	; The bits field consists of the upper two bits (dirty and device) 
 12904                                  	; from the SFT and the low 4 bits from the open mode.
 12905                                  
 12906                                  	;mov	cl,[si+1Ah]
 12907 00001A8C 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12908 00001A8F 88CD                    	MOV	CH,CL
 12909 00001A91 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12910 00001A94 08E8                    	OR	AL,CH
 12911                                  	;and	cl,0Fh
 12912 00001A96 80E10F                  	AND	CL,access_mask		; get the mode bits
 12913                                  	;mov	[es:di+2],cl
 12914 00001A99 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12915                                  	;mov	[es:di+5],ax
 12916 00001A9D 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12917                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12918 00001AA1 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12919                                  	;mov	[es:di+31h],ax
 12920 00001AA5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12921 00001AA9 1E                      	push	ds
 12922 00001AAA 56                      	push	si
 12923 00001AAB 06                      	push	es
 12924 00001AAC 57                      	push	di
 12925 00001AAD 16                      	push	ss
 12926 00001AAE 07                      	pop	es
 12927 00001AAF BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12928                                  
 12929 00001AB2 B90800                  	MOV	CX,8
 12930 00001AB5 46                      	INC	SI			; Skip past drive byte to name in FCB
 12931                                  
 12932                                  	; MSDOS 3.3
 12933                                  ;RegenCopyName:
 12934                                  	;lodsb
 12935                                  	;call	UCase
 12936                                  	;stosb
 12937                                  	;loop	RegenCopyName
 12938                                  
 12939                                  	; MSDOS 6.0
 12940 00001AB6 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12941                                  
 12942 00001AB9 16                      	push	ss	; SS is DOSDATA
 12943 00001ABA 1F                      	pop	ds
 12944                                  
 12945                                  	;mov	byte [ATTRIB],16h
 12946 00001ABB C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12947                                  					; Must set this to something interesting
 12948                                  					; to call DEVNAME.
 12949 00001AC0 E89226                  	call	DEVNAME 		; check for device
 12950 00001AC3 5E                      	pop	si
 12951 00001AC4 07                      	pop	es
 12952 00001AC5 5E                      	pop	si
 12953 00001AC6 1F                      	pop	ds
 12954 00001AC7 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12955                                  
 12956                                  	; Device found. We can ignore disk-specific info
 12957                                  
 12958                                  	;mov	[es:di+5],bh
 12959 00001AC9 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12960                                  	;mov	byte [es:di+4],0
 12961 00001ACD 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12962                                  					; SS override
 12963                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12964 00001AD2 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12965                                  	;mov	[es:di+7],si
 12966 00001AD7 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12967                                  	;mov	[es:di+9],ds
 12968 00001ADB 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12969 00001ADF C3                      	retn				; carry is clear
 12970                                  
 12971                                  RegenDeadJ:
 12972 00001AE0 EB8E                    	JMP	short RegenDead
 12973                                  
 12974                                  	; File found. Just copy in the remaining pieces.
 12975                                  
 12976                                  RegenFileNoSharing:
 12977                                  	;mov	ax,[es:di+5]
 12978 00001AE2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12979 00001AE6 83E03F                  	AND	AX,03Fh
 12980 00001AE9 1E                      	push	ds
 12981 00001AEA 56                      	push	si
 12982 00001AEB E8584E                  	call	FIND_DPB
 12983                                  	;mov	[es:di+7],si
 12984 00001AEE 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12985                                  	;mov	[es:di+9],ds
 12986 00001AF2 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12987 00001AF6 5E                      	pop	si
 12988 00001AF7 1F                      	pop	ds
 12989 00001AF8 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12990                                  					; indicator was bogus
 12991                                  	;mov	ax,[si+1Dh]
 12992 00001AFA 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12993                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12994                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12995 00001AFD 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12996                                  
 12997                                  	; MSDOS 6.0
 12998                                  
 12999                                  	; SR;
 13000                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13001                                  	; number
 13002                                  
 13003                                  	;mov	al,[si+18h]
 13004 00001B01 8A4418                  	mov	al,[si+fcb_sfn]
 13005 00001B04 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13006 00001B06 88C4                    	mov	ah,al
 13007 00001B08 D0C4                    	rol	ah,1
 13008 00001B0A D0E8                    	shr	al,1
 13009 00001B0C 08E0                    	or	al,ah
 13010 00001B0E 243F                    	and	al,03Fh		;mask off unused bits
 13011                                  	;mov	[es:di+4],al
 13012 00001B10 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13013                                  
 13014                                  	; SR;
 13015                                  	; Update the higher word of the directory sector from the FCB
 13016                                  
 13017                                  	;;mov	al,[si+18h]
 13018 00001B14 8A4418                  	mov	al,[si+fcb_sfn]
 13019 00001B17 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13020 00001B19 28E4                    	sub	ah,ah
 13021                                  	;mov	[es:di+1Dh],ax
 13022 00001B1B 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13023                                  
 13024                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13025                                  	;mov	ax,[si+1Bh]
 13026 00001B1F 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13027                                  	;mov	[es:di+0Bh],ax
 13028 00001B22 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13029                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13030                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13031 00001B26 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13032                                  	;mov	al,[si+1Fh]
 13033 00001B2A 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13034                                  	;mov  	[es:di+1Fh],al
 13035 00001B2D 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13036                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13037 00001B31 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13038                                  					; Existing FCB entries would be
 13039                                  					; flushed unnecessarily because of
 13040                                  					; check in CheckFCB of the ref_count.
 13041                                  					; July 22/85 - BAS
 13042                                  	;lea	si,[si+1]
 13043 00001B34 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13044                                  	;lea	di,[di+20h]
 13045 00001B37 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13046                                  	;mov	cx,11
 13047 00001B3A B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13048                                  	
 13049                                  	; MSDOS 6.0
 13050 00001B3D E807FF                  	call	RegenCopyName	;copy name to SFT 
 13051                                  	
 13052                                  	; MSDOS 3.3
 13053                                  ;RegenCopyName2:
 13054                                  	;lodsb
 13055                                  	;call    UCase
 13056                                  	;stosb
 13057                                  	;loop    RegenCopyName2
 13058                                  
 13059 00001B40 F8                      	clc
 13060 00001B41 C3                      	retn
 13061                                  
 13062                                  ; 17/05/2019 - Retro DOS v4.0
 13063                                  
 13064                                  ;**	BlastSFT - FIll SFT with Garbage
 13065                                  ; --------------------------------------------------------------------------
 13066                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13067                                  ;	various garbage values to put into the SFT.  I don't know why,
 13068                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13069                                  ;	necessary to show that the SFT is free after filling it.
 13070                                  ;
 13071                                  ;	ENTRY	(es:di) = address of SFT
 13072                                  ;		(al) = fill character
 13073                                  ;	EXIT	(ax) = -1
 13074                                  ;		'C' clear
 13075                                  ;	USES	AX, CX, Flags
 13076                                  
 13077                                  BlastSFT:
 13078 00001B42 57                      	push	di
 13079                                  	;mov	cx,53 ; MSDOS 3.3
 13080                                  	;mov	cx,59 ; MSDOS 6.0
 13081 00001B43 B93B00                  	mov	cx,SF_ENTRY.size
 13082 00001B46 F3AA                    	rep	stosb
 13083 00001B48 5F                      	pop	di
 13084 00001B49 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13085 00001B4B 268905                  	mov	[es:di],ax
 13086                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13087                                  	;mov	[es:di+15h],ax
 13088 00001B4E 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13089 00001B52 48                      	dec	ax	; -1					    ;
 13090                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13091 00001B53 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13092                                  BlastSFT_retn:
 13093 00001B57 C3                      	retn				; return with 'C' clear     ;
 13094                                  
 13095                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13096                                  ; --------------------------------------------------------------------------
 13097                                  ;
 13098                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13099                                  ;   regenerated.
 13100                                  ;
 13101                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13102                                  ;		AL is SFT index
 13103                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13104                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13105                                  ;   Registers modified: AX and BX
 13106                                  ;
 13107                                  ; --------------------------------------------------------------------------
 13108                                  
 13109                                  	; 21/01/2024
 13110                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13111                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13112                                  CheckFCB:
 13113                                  		
 13114                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13115                                  
 13116                                  	; MSDOS 3.3
 13117                                  
 13118                                  	; LES	DI,[CS:SFTFCB]
 13119                                  
 13120                                  	; MSDOS 6.0
 13121                                  	
 13122                                  	; SR;
 13123                                  	; We check if the given FCB is for a local file. If so, we return a 
 13124                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13125                                  
 13126                                  	;test	byte [si+19h],0C0h
 13127 00001B58 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13128 00001B5C 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13129 00001B5E 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13130                                  
 13131                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13132                                  	;cmp	[es:di+4],al
 13133 00001B63 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13134 00001B67 723C                    	JC	short BadSFT
 13135                                  	;;mov	bl,53 ; MSDOS 3.3
 13136                                  	;mov	bl,59 ; MSDOS 6.0
 13137 00001B69 B33B                    	MOV	BL,SF_ENTRY.size
 13138 00001B6B F6E3                    	MUL	BL
 13139                                  	;lea	di,[di+6]
 13140 00001B6D 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13141 00001B70 01C7                    	ADD	DI,AX
 13142                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13143 00001B72 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13144                                  	;cmp	[es:di+31h],ax
 13145 00001B76 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13146 00001B7A 7529                    	JNZ	short BadSFT		; must match process
 13147 00001B7C 26833D00                	cmp	word [es:di],0
 13148                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13149 00001B80 7423                    	JZ	short BadSFT		; must also be in use
 13150                                  	;mov	al,[si+19h]
 13151 00001B82 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13152                                  	;test	al,80h
 13153 00001B85 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13154 00001B87 7428                    	JZ	short CheckNoShare	; No. try local or device
 13155                                  
 13156                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13157                                  	; FCBSHARE is a superset of FCBNETWORK.
 13158                                  
 13159 00001B89 50                      	PUSH	AX
 13160                                  	;and	al,0C0h
 13161 00001B8A 24C0                    	AND	AL,FCBMASK
 13162                                  	;cmp	al,0C0h
 13163 00001B8C 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13164 00001B8E 58                      	POP	AX
 13165 00001B8F 7516                    	JNZ	short CheckNet		; yes
 13166                                  ;
 13167                                  ;----- In share support -----
 13168                                  ;
 13169                                  	;call	far [cs:JShare+(11*4)]
 13170 00001B91 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13171 00001B96 720D                    	JC	short BadSFT
 13172                                  
 13173                                  ; 21/01/2024
 13174                                  %if 0
 13175                                  	JMP	SHORT CheckD
 13176                                  ;
 13177                                  ;----- End in share support -----
 13178                                  ;
 13179                                  	; 09/11/2022
 13180                                  	; (There is not any procedure/sub
 13181                                  	;  which calls or jumps to CheckFirClus here)
 13182                                  	;;;
 13183                                  CheckFirClus:
 13184                                  	;cmp     bx,[es:di+0Bh]
 13185                                  	; 07/12/2022
 13186                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13187                                  	JNZ	short BadSFT
 13188                                  	;;;
 13189                                  %endif
 13190                                  
 13191                                  CheckD: 
 13192 00001B98 243F                    	AND	AL,3Fh
 13193                                  	;mov	ah,[es:di+5]
 13194 00001B9A 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13195 00001B9E 80E43F                  	AND	AH,3Fh
 13196 00001BA1 38C4                    	CMP	AH,AL
 13197                                  	; 16/12/2022
 13198 00001BA3 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13199                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13200                                  	;jnz	short BadSFT
 13201                                  ;CheckD_retn:
 13202                                  	;retn
 13203                                  BadSFT: 
 13204 00001BA5 F9                      	STC
 13205 00001BA6 C3                      	retn
 13206                                  				
 13207                                  CheckNet:
 13208                                  	; 17/05/2019 - Retro DOS v4.0
 13209                                  	
 13210                                  ;----- In net support -----
 13211                                  
 13212                                  	; MSDOS 3.3
 13213                                  	;;mov	ax,[si+1Ah]
 13214                                  	;mov	ax,[si+fcb_net_handle]
 13215                                  	;;cmp	ax,[es:di+1Dh]
 13216                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13217                                  	;jnz	short BadSFT
 13218                                  	;;cmp	ax,[es:di+19h]
 13219                                  	;cmp	ax,[ES:DI+sf_netid]
 13220                                  	;jnz     short BadSFT
 13221                                  	;;mov	ax,[si+1Eh]
 13222                                  	;mov	ax,[si+fcb_l_attr]
 13223                                  	;;cmp	ax,[es:di+1Bh]
 13224                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13225                                  	;jnz     short BadSFT
 13226                                  
 13227                                  	; MSDOS 6.0
 13228                                  	;mov	ax,[si+1Ch]
 13229 00001BA7 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13230                                  	; 09/11/2022
 13231                                  	;cmp	ax,[es:di+0Bh] 
 13232 00001BAA 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13233 00001BAE 75F5                    	JNZ	short BadSFT
 13234                                  
 13235                                  ;----- END In net support -----
 13236                                  
 13237                                  CheckNet_retn:
 13238 00001BB0 C3                      	retn
 13239                                  
 13240                                  CheckNoShare:
 13241                                  
 13242                                  ; 16/12/2022
 13243                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13244                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13245                                  ;	;test	al,40h
 13246                                  ;	test	AL,FCBDEVICE		; Device?
 13247                                  ;	;jnz	short $+2 ; 09/11/2022
 13248                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13249                                  
 13250                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13251                                  	;;mov	bx,[si+1Dh]
 13252                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13253                                  	;;cmp	bx,[es:di+1Dh]
 13254                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13255                                  	;jnz	short BadSFT
 13256                                  	;;mov	bl,[si+1Fh]
 13257                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13258                                  	;;cmp	bl,[es:di+1Fh]
 13259                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13260                                  	;jnz	short BadSFT
 13261                                  	;;mov	bl,[si+1Ah]
 13262                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13263                                  	;;mov	bh,[es:di+5]
 13264                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13265                                  	;xor	bh,bl
 13266                                  	;and	bh,0C0h
 13267                                  	;jnz	short BadSFT
 13268                                  	;;xor	bl,[es:di+2]
 13269                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13270                                  	;and	bl,0Fh
 13271                                  	;jnz	short BadSFT
 13272                                  	;push	di
 13273                                  	;push	si
 13274                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13275                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13276                                  	;;lea	si,[si+1]
 13277                                  	;LEA	SI,[SI+SYS_FCB.name]
 13278                                  	;;mov	cx,11
 13279                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13280                                  	;repe	cmpsb
 13281                                  	;pop	si
 13282                                  	;pop	di
 13283                                  	;jnz	short BadSFT
 13284                                  	;;mov	bx,[si+1Bh]
 13285                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13286                                  	;jmp	short CheckFirClus
 13287                                  
 13288                                  	; MSDOS 6.0
 13289                                  
 13290                                  	; SR;
 13291                                  	; The code below to match a local FCB with its SFT can no longer be
 13292                                  	; used. We just return a no-match status. This check is done right
 13293                                  	; at the top.
 13294                                  
 13295                                  CheckNoShareDev:
 13296                                  	;mov	bx,[si+1Ah]
 13297 00001BB1 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13298                                  	;cmp	bx,[es:di+7]
 13299 00001BB4 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13300 00001BB8 75EB                    	JNZ	short BadSFT
 13301                                  	;mov	bx,[si+1Ch]
 13302 00001BBA 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13303                                  	;cmp	bx,[es:di+9]
 13304 00001BBD 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13305 00001BC1 75E2                    	JNZ	short BadSFT
 13306 00001BC3 EBD3                    	JMP	short CheckD
 13307                                  
 13308                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13309                                  ;----------------------------------------------------------------------------
 13310                                  ;
 13311                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13312                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13313                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13314                                  ;	with PID
 13315                                  ;
 13316                                  ;   Inputs:	DS:SI point to FCB
 13317                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13318                                  ;		Carry clear -> OK ES:DI -> SFT
 13319                                  ;		Carry set -> error in ax
 13320                                  ;   Registers modified: ES,DI, AX
 13321                                  ;
 13322                                  ;----------------------------------------------------------------------------
 13323                                  
 13324                                  SFTFromFCB:
 13325                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13326                                  
 13327                                  	; 17/05/2019 - Retro DOS v4.0
 13328                                  
 13329 00001BC5 50                      	push	ax
 13330 00001BC6 53                      	push	bx
 13331                                  	;mov	al,[si+18h]
 13332 00001BC7 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13333 00001BCA E88BFF                  	call	CheckFCB
 13334 00001BCD 5B                      	pop	bx
 13335 00001BCE 58                      	pop	ax
 13336                                  	;MOV	[CS:THISSFT],DI		; SS override
 13337                                  	;MOV	[CS:THISSFT+2],ES
 13338 00001BCF 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13339 00001BD4 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13340 00001BD9 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13341                                  	
 13342                                  	; 09/11/2022 (MSDOS 5.0)
 13343                                  	; 31/05/2019
 13344 00001BDB 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13345 00001BDC E887E8                  	call	save_world
 13346 00001BDF E86DFE                  	call	FCBRegen
 13347 00001BE2 E86AE8                  	call	restore_world		; use macro restore world
 13348 00001BE5 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13349                                  
 13350                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13351 00001BE6 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13352 00001BEA 72C4                    	jc	short CheckNet_retn
 13353                                  
 13354                                  Set_SFT: 
 13355                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13356 00001BEC 36C43E[9E05]            	les	di,[ss:THISSFT]
 13357                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13358 00001BF1 36FF36[3C03]            	push	word [ss:PROC_ID]
 13359                                  	;pop	word [es:di+31h]
 13360 00001BF6 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13361 00001BFA C3                      	retn				; carry is clear
 13362                                  
 13363                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13364                                  ;----------------------------------------------------------------------------
 13365                                  ;
 13366                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13367                                  ;	unavailable FCB.
 13368                                  ;
 13369                                  ;   Inputs:	none.
 13370                                  ;   Outputs:	none.
 13371                                  ;   Registers modified: all
 13372                                  ;
 13373                                  ;----------------------------------------------------------------------------
 13374                                  
 13375                                  FCBHardErr:
 13376                                  	; 17/05/2019 - Retro DOS v4.0
 13377 00001BFB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13378                                  	;
 13379                                  	;mov	ax,23h
 13380 00001C00 B82300                  	MOV	AX,error_FCB_unavailable
 13381                                  	;;mov	byte [cs:ALLOWED],8
 13382                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13383 00001C03 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13384                                  	
 13385                                  	;LES	BP,[CS:THISDPB]
 13386 00001C09 26C42E[8A05]            	les	bp,[es:THISDPB]
 13387                                  	
 13388 00001C0E BF0100                  	MOV	DI,1			; Fake some registers
 13389 00001C11 89F9                    	MOV	CX,DI
 13390                                  	;mov	dx,[es:bp+0Bh]
 13391 00001C13 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13392 00001C17 E86B36                  	call	HARDERR
 13393 00001C1A F9                      	STC
 13394 00001C1B C3                      	retn
 13395                                  
 13396                                  ;============================================================================
 13397                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13398                                  ;============================================================================
 13399                                  ; 21/07/2018 - Retro DOS v3.0
 13400                                  ; 17/05/2019 - Retro DOS v4.0
 13401                                  
 13402                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13403                                  ;
 13404                                  ;	GetRR
 13405                                  ;	GetExtent
 13406                                  ;	SetExtent
 13407                                  ;	GetExtended
 13408                                  ;	GetRecSize
 13409                                  ;	FCBIO
 13410                                  ;	$FCB_OPEN
 13411                                  ;	$FCB_CREATE
 13412                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13413                                  ;	$FCB_RANDOM_READ_BLOCK
 13414                                  ;	$FCB_SEQ_READ
 13415                                  ;	$FCB_SEQ_WRITE
 13416                                  ;	$FCB_RANDOM_READ
 13417                                  ;	$FCB_RANDOM_WRITE
 13418                                  ;
 13419                                  ;	Revision history:
 13420                                  ;
 13421                                  ;		Created: ARR 4 April 1983
 13422                                  ;			 MZ  6 June  1983 completion of functions
 13423                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13424                                  ;				  times.  Change so successive closes work by
 13425                                  ;				  always returning OK.	Also, detect I/O to
 13426                                  ;				  already closed FCB and return EOF.
 13427                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13428                                  ;				  out of sft into FCB for reconnection
 13429                                  ;
 13430                                  ;	    A000   version 4.00	Jan. 1988
 13431                                  
 13432                                  ; Defintions for FCBOp flags
 13433                                  
 13434                                  RANDOM	equ 2				; random operation
 13435                                  FCBREAD equ 4				; doing a read
 13436                                  BLOCK	equ 8				; doing a block I/O
 13437                                  
 13438                                  ;Break <GetRR - return the random record field in DX:AX>
 13439                                  ;---------------------------------------------------------------------------
 13440                                  ;
 13441                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13442                                  ;	from the FCB pointed to by DS:SI
 13443                                  ;
 13444                                  ;   Inputs:	DS:SI point to an FCB
 13445                                  ;		BX has record size
 13446                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13447                                  ;   Registers modified: none
 13448                                  ;---------------------------------------------------------------------------
 13449                                  
 13450                                  GetRR:
 13451                                  	;mov	ax,[si+21h]
 13452 00001C1C 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13453                                  	;mov	dx,[si+23h]
 13454 00001C1F 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13455 00001C22 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13456 00001C25 7202                    	JB	short GetRRBye
 13457                                  GetExtent_bye:	; 21/01/2024
 13458 00001C27 30F6                    	XOR	DH,DH
 13459                                  GetRRBye:
 13460 00001C29 C3                      	retn
 13461                                  
 13462                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13463                                  ;---------------------------------------------------------------------------
 13464                                  ;
 13465                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13466                                  ;	NR fields in the FCB.
 13467                                  ;
 13468                                  ;   Inputs:	DS:SI - point to FCB
 13469                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13470                                  ;   Registers modified: none
 13471                                  ;---------------------------------------------------------------------------
 13472                                  
 13473                                  GetExtent:
 13474                                  	;mov	al,[si+20h]
 13475 00001C2A 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13476                                  	;mov	dx,[si+0Ch]
 13477 00001C2D 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13478 00001C30 D0E0                    	SHL	AL,1
 13479 00001C32 D1EA                    	SHR	DX,1
 13480 00001C34 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13481 00001C36 88D4                    	MOV	AH,DL
 13482 00001C38 88F2                    	MOV	DL,DH
 13483                                  	; 21/01/2024
 13484                                  	;XOR	DH,DH
 13485                                  	;retn
 13486 00001C3A EBEB                    	jmp	short GetExtent_bye
 13487                                  
 13488                                  ;Break <SetExtent - update the extent/NR field>
 13489                                  ;---------------------------------------------------------------------------
 13490                                  ;
 13491                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13492                                  ;	fields
 13493                                  ;
 13494                                  ;   Inputs:	DS:SI point to FCB
 13495                                  ;		DX:AX is a record location in file
 13496                                  ;   Outputs:	Extent/NR fields are filled in
 13497                                  ;   Registers modified: CX
 13498                                  ;---------------------------------------------------------------------------
 13499                                  
 13500                                  SetExtent:
 13501 00001C3C 50                      	push	ax
 13502 00001C3D 52                      	push	dx
 13503 00001C3E 89C1                    	MOV	CX,AX
 13504 00001C40 247F                    	AND	AL,7FH			; next rec field
 13505                                  	;mov	[si+20h],al
 13506 00001C42 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13507 00001C45 80E180                  	AND	CL,80H			; save upper bit
 13508 00001C48 D1E1                    	SHL	CX,1
 13509 00001C4A D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13510 00001C4C 88E8                    	MOV	AL,CH
 13511 00001C4E 88D4                    	MOV	AH,DL
 13512                                  	;mov	[si+0Ch], ax
 13513 00001C50 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13514 00001C53 5A                      	pop	dx
 13515 00001C54 58                      	pop	ax
 13516 00001C55 C3                      	retn
 13517                                  
 13518                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13519                                  ;---------------------------------------------------------------------------
 13520                                  ;
 13521                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13522                                  ;
 13523                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13524                                  ;   Outputs:	DS:SI point to the FCB part
 13525                                  ;		zeroflag set if not extended fcb
 13526                                  ;   Registers modified: SI
 13527                                  ;---------------------------------------------------------------------------
 13528                                  
 13529                                  GetExtended:
 13530 00001C56 89D6                    	MOV	SI,DX			; point to Something
 13531 00001C58 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13532 00001C5B 7503                    	JNZ	short GetBye		; not there
 13533 00001C5D 83C607                  	ADD	SI,7			; point to FCB
 13534                                  GetBye:
 13535 00001C60 39D6                    	CMP	SI,DX			; set condition codes
 13536                                  getextd_retn:
 13537 00001C62 C3                      	retn
 13538                                  
 13539                                  ;Break <GetRecSize - return in BX the FCB record size>
 13540                                  ;---------------------------------------------------------------------------
 13541                                  ;
 13542                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13543                                  ;
 13544                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13545                                  ;   Outputs:	BX contains the record size
 13546                                  ;   Registers modified: None
 13547                                  ;---------------------------------------------------------------------------
 13548                                  
 13549                                  	; 22/01/2024
 13550                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13551                                  GetRecSize:
 13552                                  	;mov	bx,[si+0Eh]
 13553 00001C63 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13554 00001C66 09DB                    	OR	BX,BX			; is it nul?
 13555                                  	;jz	short getextd_retn
 13556                                  	; 22/01/2024 (BugFix)
 13557 00001C68 75F8                    	jnz	short getextd_retn
 13558                                  	;MOV	BX,128			; use default size
 13559 00001C6A B380                    	mov	bl,128
 13560                                  	;mov	[si+0Eh],bx
 13561 00001C6C 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13562 00001C6F C3                      	retn
 13563                                  
 13564                                  ; 23/01/2024 - Retro DOS v5.0
 13565                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13566                                  ; 23/01/2024 - Retro DOS v4.2
 13567                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13568                                  ; 23/01/2024 - Retro DOS v4.1
 13569                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13570                                  
 13571                                  ; 22/07/2018 - Retro DOS v3.0
 13572                                  
 13573                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13574                                  ;----------------------------------------------------------------------------
 13575                                  ;
 13576                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13577                                  ;	and write a number of blocks from it.
 13578                                  ;
 13579                                  ;   Inputs:	DS:DX point to an FCB
 13580                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13581                                  ;		AL <> 0 Not enough room on disk for the output
 13582                                  ;
 13583                                  ;----------------------------------------------------------------------------
 13584                                  
 13585                                  _$FCB_RANDOM_WRITE_BLOCK:
 13586                                  	;mov	AL,0Ah
 13587 00001C70 B00A                    	MOV	AL,RANDOM+BLOCK
 13588 00001C72 EB12                    	JMP	short FCBIO	; 23/01/2024
 13589                                  
 13590                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13591                                  ;----------------------------------------------------------------------------
 13592                                  ;
 13593                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13594                                  ;	and read a number of blocks from it.
 13595                                  ;
 13596                                  ;   Inputs:	DS:DX point to an FCB
 13597                                  ;   Outputs:	AL = error codes defined above
 13598                                  ;
 13599                                  ;----------------------------------------------------------------------------
 13600                                  
 13601                                  _$FCB_RANDOM_READ_BLOCK:
 13602                                  	;mov	AL,0Eh
 13603 00001C74 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13604 00001C76 EB0E                    	JMP	short FCBIO	; 23/01/2024
 13605                                  
 13606                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13607                                  ;----------------------------------------------------------------------------
 13608                                  ;
 13609                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13610                                  ;	memory
 13611                                  ;
 13612                                  ;   Inputs:	DS:DX point to an FCB
 13613                                  ;   Outputs:	AL = error codes defined above
 13614                                  ;
 13615                                  ;----------------------------------------------------------------------------
 13616                                  
 13617                                  _$FCB_SEQ_READ:
 13618                                  	;mov	AL,4
 13619 00001C78 B004                    	MOV	AL,FCBREAD
 13620 00001C7A EB0A                    	JMP	short FCBIO	; 23/01/2024
 13621                                  
 13622                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13623                                  ;----------------------------------------------------------------------------
 13624                                  ;
 13625                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13626                                  ;	file
 13627                                  ;
 13628                                  ;   Inputs:	DS:DX point to an FCB
 13629                                  ;   Outputs:	AL = error codes defined above
 13630                                  ;
 13631                                  ;----------------------------------------------------------------------------
 13632                                  
 13633                                  _$FCB_SEQ_WRITE:
 13634 00001C7C B000                    	MOV	AL,0
 13635 00001C7E EB06                    	JMP	short FCBIO	; 23/01/2024
 13636                                  
 13637                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13638                                  ;----------------------------------------------------------------------------
 13639                                  ;
 13640                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13641                                  ;	record from it.
 13642                                  ;
 13643                                  ;   Inputs:	DS:DX point to an FCB
 13644                                  ;   Outputs:	AL = error codes defined above
 13645                                  ;
 13646                                  ;----------------------------------------------------------------------------
 13647                                  
 13648                                  _$FCB_RANDOM_READ:
 13649                                  	;mov	AL,6
 13650 00001C80 B006                    	MOV	AL,RANDOM+FCBREAD
 13651                                  	; 23/01/2024
 13652                                  	;jmp	FCBIO 		; single block
 13653 00001C82 EB02                    	jmp	short FCBIO
 13654                                  
 13655                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13656                                  ;----------------------------------------------------------------------------
 13657                                  ;
 13658                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13659                                  ;	a record to it.
 13660                                  ;
 13661                                  ;   Inputs:	DS:DX point to an FCB
 13662                                  ;   Outputs:	AL = error codes defined above
 13663                                  ;
 13664                                  ;----------------------------------------------------------------------------
 13665                                  
 13666                                  _$FCB_RANDOM_WRITE:
 13667                                  	;mov	AL,2
 13668 00001C84 B002                    	MOV	AL,RANDOM
 13669                                  	; 23/01/2024
 13670                                  	;;jmp	FCBIO
 13671                                  	;jmp	short FCBIO
 13672                                  
 13673                                  ;BREAK <FCBIO - do internal FCB I/O>
 13674                                  ;---------------------------------------------------------------------------
 13675                                  ;
 13676                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13677                                  ;
 13678                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13679                                  ;		DS:DX point to FCB
 13680                                  ;		CX may have count of number of records to xfer
 13681                                  ;   Outputs:	AL has error code
 13682                                  ;   Registers modified: all
 13683                                  ;---------------------------------------------------------------------------
 13684                                  
 13685                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13686                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13687                                  
 13688                                  	; 23/01/2024
 13689                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13690                                  
 13691                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13692                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13693                                  
 13694                                  FCBIO:
 13695                                  
 13696                                  FEOF	EQU	1
 13697                                  FTRIM	EQU	2
 13698                                  
 13699                                  %define	FCBErr	byte [bp-1]  ; byte
 13700                                  %define	cRec	word [bp-3]  ; word
 13701                                  ;%define RecPos	word [bp-7]  ; dword
 13702                                  %define RecPosL	word [bp-7]  ; word
 13703                                  %define RecPosH	word [bp-5]  ; word
 13704                                  %define	RecSize	word [bp-9]  ; word
 13705                                  ;%define bPos	word [bp-13] ; dword
 13706                                  %define bPosL	word [bp-13] ; word
 13707                                  %define bPosH	word [bp-11] ; word
 13708                                  %define cByte	word [bp-15] ; word
 13709                                  %define cResult word [bp-17] ; word
 13710                                  %define	cRecRes	word [bp-19] ; word
 13711                                  %define	FCBOp	byte [bp-20] ; byte
 13712                                  ; 23/01/2024
 13713                                  %define bPos bp-13
 13714                                  
 13715                                  	;Enter
 13716                                  
 13717 00001C86 55                      	push	bp
 13718 00001C87 89E5                    	mov	bp,sp
 13719 00001C89 83EC14                  	sub	sp,20
 13720                                  	;mov	[bp-20],al
 13721 00001C8C 8846EC                  	MOV	FCBOp,AL
 13722                                  	;mov	byte [bp-1],0
 13723 00001C8F C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13724 00001C93 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13725                                  	;test	byte [bp-20],8
 13726 00001C96 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13727 00001C9A 7503                    	JNZ	short GetPos
 13728 00001C9C B90100                  	MOV	CX,1			;	cRec = 1;
 13729                                  GetPos:
 13730                                  	;mov	[bp-3],cx
 13731 00001C9F 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13732 00001CA2 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13733 00001CA5 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13734                                  	;mov	[bp-9],bx
 13735 00001CA8 895EF7                  	MOV	RecSize,BX
 13736                                  	;test	byte [bp-20],2
 13737 00001CAB F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13738 00001CAF 7403                    	JZ	short GetRec
 13739 00001CB1 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13740                                  GetRec:
 13741                                  	;mov	[bp-7],ax
 13742 00001CB4 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13743                                  	;mov	[bp-5],dx
 13744 00001CB7 8956FB                  	MOV	RecPosH,DX
 13745 00001CBA E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13746                                  	;mov	ax,[bp-5]
 13747 00001CBD 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13748 00001CC0 F7E3                    	MUL	BX
 13749 00001CC2 89C7                    	MOV	DI,AX
 13750                                  	;mov	ax,[bp-7]
 13751 00001CC4 8B46F9                  	MOV	AX,RecPosL
 13752 00001CC7 F7E3                    	MUL	BX
 13753 00001CC9 01FA                    	ADD	DX,DI
 13754                                  	;mov	[bp-13],ax
 13755 00001CCB 8946F3                  	MOV	bPosL,AX
 13756                                  	;mov	[bp-11],dx
 13757 00001CCE 8956F5                  	MOV	bPosH,DX
 13758                                  	;mov	ax,[bp-3]
 13759 00001CD1 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13760 00001CD4 F7E3                    	MUL	BX
 13761                                  	;mov	[bp-15],ax
 13762 00001CD6 8946F1                  	MOV	cByte,AX
 13763                                  
 13764                                  ;hkn; 	SS override
 13765 00001CD9 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13766 00001CDE 83D200                  	ADC	DX,0
 13767 00001CE1 7419                    	JZ	short DoOper
 13768                                  	;mov	byte [bp-1],2
 13769 00001CE3 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13770                                  
 13771                                  ;hkn; 	SS override
 13772 00001CE7 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13773 00001CEB F7D8                    	NEG	AX
 13774 00001CED 7501                    	JNZ	short DoDiv
 13775 00001CEF 48                      	DEC	AX
 13776                                  DoDiv:
 13777 00001CF0 31D2                    	XOR	DX,DX
 13778 00001CF2 F7F3                    	DIV	BX
 13779                                  	;mov	[bp-3],ax
 13780 00001CF4 8946FD                  	MOV	cRec,AX
 13781 00001CF7 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13782                                  	;mov	[bp-15],ax
 13783 00001CF9 8946F1                  	MOV	cByte,AX		;	}
 13784                                  DoOper:
 13785 00001CFC 31DB                    	XOR	BX,BX
 13786                                  	;mov	[bp-17],bx
 13787 00001CFE 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13788                                  	;cmp	[bp-15],bx
 13789 00001D01 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13790 00001D04 7506                    	JNZ	short DoGetExt
 13791                                  	;test	byte [bp-1],2
 13792 00001D06 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13793                                  	;JZ	short DoGetExt
 13794                                  	;JMP	short SkipOp
 13795                                  	; 16/12/2022
 13796 00001D0A 7572                    	jnz	short SkipOp
 13797                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13798                                  	;JZ	short DoGetExt
 13799                                  	;JMP	short SkipOp
 13800                                  DoGetExt:
 13801 00001D0C E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13802 00001D0F 730F                    	JNC	short ContinueOp
 13803                                  FCBDeath:
 13804 00001D11 E846E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13805                                  	;mov	word [bp-19],0
 13806 00001D14 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13807                                  	;mov	byte [bp-1],1
 13808 00001D19 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13809 00001D1D E9EB00                  	JMP	FCBSave 		; bam!
 13810                                  ContinueOp:
 13811                                  	; 23/01/2024
 13812                                  	; (PCDOS 7.1 IBMDOS.COM)
 13813                                  	;
 13814                                  	;;mov	ax,[si+10h]
 13815                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13816                                  	;;mov	[es:di+11h],ax
 13817                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13818                                  	;;mov	ax,[si+12h]
 13819                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13820                                  	;;mov	[es:di+13h],ax
 13821                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13822                                  	;;;
 13823 00001D20 1E                      	push	ds
 13824 00001D21 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13825 00001D24 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13826 00001D28 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13827 00001D2C C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13828 00001D2F 8CDA                    	mov	dx,ds
 13829 00001D31 1F                      	pop	ds
 13830                                  	;;;
 13831                                  	;;mov	ax,[bp-13]
 13832                                  	;MOV	AX,bPosL
 13833                                  	;;mov	dx,[bp-11]
 13834                                  	;MOV	DX,bPosH
 13835                                  
 13836                                  	;mov	[es:di+15h],ax
 13837 00001D32 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13838                                  	;xchg	dx,[es:di+17h]
 13839 00001D36 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13840 00001D3A 52                      	PUSH	DX			; save away Open age.
 13841                                  	;mov	cx,[bp-15]
 13842 00001D3B 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13843                                  
 13844                                  ;hkn; DOS_Read is in DOSCODE
 13845 00001D3E BF[5E32]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13846                                  	;test	byte [bp-20],4
 13847 00001D41 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13848 00001D45 7503                    	JNZ	short DoContext
 13849                                  
 13850                                  ;hkn; DOS_Write is in DOSCODE
 13851 00001D47 BF[8734]                	MOV	DI,DOS_WRITE
 13852                                  DoContext:
 13853 00001D4A 55                      	push	bp
 13854 00001D4B 1E                      	push	ds
 13855 00001D4C 56                      	push	si
 13856                                  
 13857                                  ;hkn; SS is DOSDATA
 13858 00001D4D 16                      	push	ss
 13859 00001D4E 1F                      	pop	ds
 13860                                  
 13861                                  ;; Fix for disk full
 13862 00001D4F FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13863                                  	
 13864 00001D51 5E                      	pop	si
 13865 00001D52 1F                      	pop	ds
 13866 00001D53 5D                      	pop	bp
 13867 00001D54 72BB                    	JC	short FCBDeath
 13868                                  	
 13869 00001D56 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13870 00001D5C 740A                    	JZ	short NODSKFULL
 13871 00001D5E 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13872                                  
 13873                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13874                                  	;mov	byte [bp-1],1 
 13875 00001D64 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13876                                  
 13877                                  	; 23/01/2024
 13878                                  	; (PCDOS 7.1 IBMDOS.COM)
 13879                                  	;;mov	byte [bp-1],1 
 13880                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13881                                  
 13882                                  NODSKFULL:
 13883                                  ;; Fix for disk full
 13884                                  	;mov	[bp-17],cx
 13885 00001D68 894EEF                  	MOV	cResult,CX
 13886 00001D6B E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13887                                  	;pop	word [es:di+17h]	
 13888 00001D6E 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13889                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13890                                  
 13891                                  	; 23/01/2024
 13892                                  	; (PCDOS 7.1 IBMDOS.COM)
 13893                                  	;
 13894                                  	;;mov	ax,[es:di+11h]
 13895                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13896                                  	;;mov	[si+10h],ax
 13897                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13898                                  	;;mov	ax,[es:di+13h]
 13899                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13900                                  	;;mov	[si+12h],ax
 13901                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13902                                  	;;;
 13903 00001D72 06                      	push	es
 13904 00001D73 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13905 00001D77 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13906 00001D7A 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13907 00001D7D 07                      	pop	es
 13908                                  	;;;
 13909                                  					;	}
 13910                                  SkipOp:
 13911                                  	;mov	ax,[bp-17]
 13912 00001D7E 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13913 00001D81 31D2                    	XOR	DX,DX
 13914                                  	;div	word [bp-9]
 13915 00001D83 F776F7                  	DIV	RecSize
 13916                                  	;mov	[bp-19],ax
 13917 00001D86 8946ED                  	MOV	cRecRes,AX
 13918                                  	;add	[bp-7],ax
 13919 00001D89 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13920                                  	;adc	word [bp-5],0
 13921 00001D8C 8356FB00                	ADC	RecPosH,0
 13922                                  
 13923                                  ; If we have not gotten the expected number of records, we signal an EOF
 13924                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13925                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13926                                  ; do we.
 13927                                  
 13928                                  	;cmp	ax,[bp-3]
 13929 00001D90 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13930 00001D93 7411                    	JZ	short TryBlank
 13931                                  	;test	byte [bp-20],4
 13932 00001D95 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13933 00001D99 7507                    	JNZ	short SetEOF
 13934                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13935                                  	; MSDOS 3.3
 13936                                  	;;test	word [es:di+5],80h
 13937                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13938                                  	;JNZ	short TryBlank
 13939                                  	; MSDOS 5.0 & MSDOS 6.0
 13940                                  	;test	byte [es:di+5],80h
 13941 00001D9B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13942 00001DA0 7504                    	jnz	short TryBlank
 13943                                  
 13944                                  SetEOF:
 13945                                  	;mov	byte [bp-1],1
 13946 00001DA2 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13947                                  TryBlank:				;
 13948 00001DA6 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13949 00001DA8 7426                    	JZ	short SetExt
 13950                                  	;add	word [bp-7],1
 13951 00001DAA 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13952                                  	;adc	word [bp-5],0
 13953 00001DAE 8356FB00                	ADC	RecPosH,0
 13954                                  	;test	byte [bp-20],4
 13955 00001DB2 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13956 00001DB6 7418                    	JZ	short SetExt
 13957                                  	;inc	word [bp-19]
 13958 00001DB8 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13959                                  	;mov	byte [bp-1],3
 13960 00001DBB C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13961                                  	;mov	cx,[bp-9]
 13962 00001DBF 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13963 00001DC2 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13964 00001DC4 30C0                    	XOR	AL,AL
 13965                                  ;hkn; 	SS override
 13966 00001DC6 36C43E[2C03]            	les     di,[ss:DMAADD]
 13967                                  	;add	di,[bp-17]
 13968 00001DCB 037EEF                  	ADD	DI,cResult
 13969 00001DCE F3AA                    	REP	STOSB			;   }	}
 13970                                  SetExt:
 13971                                  	;mov	dx,[bp-5]
 13972 00001DD0 8B56FB                  	MOV	DX,RecPosH
 13973                                  	;mov	ax,[bp-7]
 13974 00001DD3 8B46F9                  	MOV	AX,RecPosL
 13975                                  	;test	byte [bp-20],2
 13976 00001DD6 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13977 00001DDA 7406                    	JZ	short DoSetExt
 13978                                  	;test	byte [bp-20],8
 13979 00001DDC F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13980 00001DE0 7403                    	JZ	short TrySetRR
 13981                                  DoSetExt:
 13982 00001DE2 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13983                                  TrySetRR:
 13984                                  	;test	byte [bp-20],8
 13985 00001DE5 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13986 00001DE9 740F                    	JZ	short TryReturn
 13987                                  	;mov	[si+21h],ax
 13988 00001DEB 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13989                                  	;mov	[si+23h],dl
 13990 00001DEE 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13991                                  	;cmp	word [si+0Eh],64
 13992 00001DF1 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13993 00001DF5 7303                    	JAE	short TryReturn
 13994                                  	;mov	[si+24h],dh
 13995 00001DF7 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13996                                  TryReturn: 
 13997                                  	;test	byte [bp-20],4
 13998 00001DFA F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13999 00001DFE 750B                    	JNZ	short FCBSave
 14000 00001E00 1E                      	push	ds			;	FCB->FDate = date;
 14001 00001E01 E8F1EC                  	call	DATE16			;	FCB->FTime = time;
 14002 00001E04 1F                      	pop	ds
 14003                                  	;mov	[si+14h],ax
 14004 00001E05 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14005                                  	;mov	[si+16h],dx
 14006 00001E08 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14007                                  FCBSave: 
 14008                                  	;test	byte [bp-20],8
 14009 00001E0B F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14010 00001E0F 7409                    	jz	short DoReturn
 14011                                  	;mov	cx,[bp-19]
 14012 00001E11 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14013 00001E14 E86EE6                  	call    Get_User_Stack
 14014                                  	;mov	[si+4],cx
 14015 00001E17 894C04                  	MOV	[SI+user_env.user_CX],CX
 14016                                  DoReturn:
 14017                                  	;mov	al,[bp-1]
 14018 00001E1A 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14019                                  	;Leave	
 14020 00001E1D 89EC                    	mov     sp,bp
 14021 00001E1F 5D                      	pop     bp
 14022 00001E20 C3                      	retn
 14023                                  
 14024                                  ; 22/07/2018 - Retro DOS v3.0
 14025                                  
 14026                                  ;Break <$FCB_Open - open an old-style FCB>
 14027                                  ;---------------------------------------------------------------------------
 14028                                  ;
 14029                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14030                                  ;	for us and asked to have the rest filled in.
 14031                                  ;
 14032                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14033                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14034                                  ;		FCB has the following fields filled in:
 14035                                  ;		    Time/Date Extent/NR Size
 14036                                  ;---------------------------------------------------------------------------
 14037                                  
 14038                                  _$FCB_OPEN:			; System call 15
 14039                                  
 14040 00001E21 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14041                                  
 14042                                  ;hkn; DOS_Open is in DOSCODE
 14043 00001E24 B9[142B]                	MOV	CX,DOS_OPEN
 14044                                  
 14045                                  ; The following is common code for Creation and openning of FCBs. AX is
 14046                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14047                                  ; the FCB
 14048                                  
 14049                                  DoAccess:
 14050 00001E27 1E                      	push	ds
 14051 00001E28 52                      	push	dx
 14052 00001E29 51                      	push	cx
 14053 00001E2A 50                      	push	ax			; save FCB pointer away
 14054                                  
 14055                                  ;hkn; 	OpenBuf is in DOSDATA
 14056 00001E2B BF[BE03]                	MOV	DI,OPENBUF
 14057 00001E2E E85C4C                  	call	TransFCB		; crunch the fcb
 14058 00001E31 58                      	pop	ax
 14059 00001E32 59                      	pop	cx
 14060 00001E33 5A                      	pop	dx
 14061 00001E34 1F                      	pop	ds			; get fcb
 14062 00001E35 7303                    	JNC	short FindFCB		; everything seems ok
 14063                                  FCBOpenErr:
 14064                                  	; AL has error code
 14065 00001E37 E920E8                  	jmp	FCB_RET_ERR
 14066                                  FindFCB:
 14067 00001E3A E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14068                                  
 14069                                  	; 17/05/2019 - Retro DOS v4.0
 14070                                  
 14071                                  	; MSDOS 3.3
 14072                                  	;call	LRUFCB
 14073                                  	;jc	short HardMessage
 14074                                  
 14075                                  	; MSDOS 6.0
 14076 00001E3D 50                      	push	ax
 14077 00001E3E B001                    	mov	al,1			;indicate Open/Create operation
 14078 00001E40 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14079 00001E43 58                      	pop	ax
 14080 00001E44 722A                    	jc	short HardMessage
 14081                                  	
 14082                                  	;mov	word [es:di+2],8000h
 14083 00001E46 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14084 00001E4C 1E                      	push	ds
 14085 00001E4D 56                      	push	si	
 14086 00001E4E 53                      	push	bx			; save fcb pointer
 14087 00001E4F 89CE                    	MOV	SI,CX
 14088                                  
 14089                                  ;hkn; SS is DOSDATA
 14090 00001E51 16                      	push	ss
 14091 00001E52 1F                      	pop	ds			    ; let DOS_Open see variables
 14092 00001E53 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14093 00001E55 5B                      	pop	bx
 14094 00001E56 5E                      	pop	si
 14095 00001E57 1F                      	pop	ds			; get fcb
 14096                                  
 14097                                  ;hkn; SS override
 14098 00001E58 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14099 00001E5D 7318                    	JNC	short FCBOK		; operation succeeded
 14100                                  failopen:
 14101 00001E5F 50                      	PUSH	AX
 14102 00001E60 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14103 00001E62 E8DDFC                  	call	BlastSFT
 14104 00001E65 58                      	POP	AX
 14105                                  	;cmp	ax,4
 14106 00001E66 83F804                  	CMP	AX,error_too_many_open_files
 14107 00001E69 7405                    	JZ	short HardMessage
 14108                                  	;cmp	ax,24h
 14109 00001E6B 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14110 00001E6E 7505                    	jnz	short DeadFCB
 14111                                  HardMessage:
 14112 00001E70 50                      	PUSH	AX
 14113 00001E71 E887FD                  	call	FCBHardErr
 14114 00001E74 58                      	POP	AX
 14115                                  DeadFCB:
 14116                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14117                                  	;jmp	FCB_RET_ERR
 14118 00001E75 EBC0                    	jmp	short FCBOpenErr
 14119                                  FCBOK:
 14120                                  	; MSDOS 6.0
 14121 00001E77 E8EFF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14122 00001E7A 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14123 00001E7C E83A54                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14124 00001E7F 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14125                                  ;SR;
 14126                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14127                                  ; LocalSFT variable to reflect this.
 14128                                  
 14129 00001E81 36893E[4410]            	mov	[ss:LocalSFT],di
 14130 00001E86 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14131                                  ;;SR;
 14132                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14133                                  ;;
 14134                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14135                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14136                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14137                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14138                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14139                                  
 14140                                  FCBOK2:
 14141                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14142 00001E8B 26FF05                  	inc	word [es:di]
 14143                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14144 00001E8E E804FA                  	call	SaveFCBInfo
 14145                                  	; MSDOS 3.3
 14146                                  	;call	SetOpenAge
 14147                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14148                                  	;test	word [es:di+5],80h
 14149                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14150 00001E91 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14151 00001E96 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14152 00001E98 8A04                    	MOV	AL,[SI]			; get drive byte
 14153 00001E9A E87B4B                  	call	GETTHISDRV		; convert
 14154                                  	;INC	AL
 14155                                  	; 17/12/2022
 14156 00001E9D 40                      	inc	ax
 14157 00001E9E 8804                    	MOV	[SI],AL			; stash in good drive letter
 14158                                  
 14159                                  FCBNoDrive:
 14160                                  	;mov	word [si+0Eh],128
 14161 00001EA0 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14162                                  
 14163                                  	; 23/01/2024
 14164                                  	; (PCDOS 7.1 IBMDOS.COM)
 14165                                  	;;;
 14166                                  	;;mov	ax,[es:di+0Dh]
 14167                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14168                                  	;;mov	[si+16h],ax
 14169                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14170                                  	;;mov	ax,[es:di+0Fh]
 14171                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14172                                  	;;mov	[si+14h],ax
 14173                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14174                                  	;;mov	ax,[es:di+11h]
 14175                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14176                                  	;;mov	[si+10h],ax
 14177                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14178                                  	;;mov	ax,[es:di+13h]
 14179                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14180                                  	;;mov	[si+12h],ax
 14181                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14182                                  	;
 14183 00001EA5 06                      	push	es
 14184                                  	;les	ax,[es:di+0Dh]
 14185 00001EA6 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14186                                  	;mov	[si+16h],ax
 14187 00001EAA 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14188                                  	;mov	[si+14h],es
 14189 00001EAD 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14190 00001EB0 07                      	pop	es
 14191 00001EB1 06                      	push	es
 14192                                  	;les	ax,[es:di+11h]
 14193 00001EB2 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14194                                  	;mov	[si+10h],ax
 14195 00001EB6 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14196                                  	;mov	[si+12h],ax
 14197 00001EB9 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14198 00001EBC 07                      	pop	es
 14199                                  	;;;
 14200                                  	
 14201 00001EBD 31C0                    	XOR	AX,AX			; convenient zero
 14202                                  	;mov	[si+0Ch],ax
 14203 00001EBF 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14204                                  
 14205                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14206                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14207                                  
 14208                                  ;hkn; 	SS override
 14209 00001EC2 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14210                                  	;mov	ah,[es:di+4]
 14211 00001EC7 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14212                                  OpenScan:
 14213                                  	;cmp	al,[si+18h]
 14214 00001ECB 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14215 00001ECE 7407                    	JZ	short SkipCheck
 14216 00001ED0 50                      	push	ax			; preserve count
 14217 00001ED1 E884FC                  	call	CheckFCB		; do they match
 14218 00001ED4 58                      	pop	ax			; get count back
 14219 00001ED5 7309                    	JNC	short OpenFound		; found a match!
 14220                                  SkipCheck:
 14221 00001ED7 FEC0                    	INC	AL			; advance to next FCB
 14222 00001ED9 38E0                    	CMP	AL,AH			; table full?
 14223 00001EDB 75EE                    	JNZ	short OpenScan		; no, go for more
 14224                                  OpenDone:
 14225 00001EDD 30C0                    	xor	al,al			; return success
 14226 00001EDF C3                      	retn
 14227                                  
 14228                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14229                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14230                                  ; Consider:
 14231                                  ;
 14232                                  ;   open (foo)	delete (foo) open (bar)
 14233                                  ;
 14234                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14235                                  ; foo even though foo is no longer needed; this is due to the server closing
 14236                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14237                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14238                                  ; bar and subsequent I/O would be lost to the redirector.
 14239                                  ;
 14240                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14241                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14242                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14243                                  ; around. This will allow us to access the same file through multiple network
 14244                                  ; connections and NOT prematurely terminate when the ref count on one
 14245                                  ; connection goes to zero.
 14246                                  
 14247                                  OpenFound:
 14248                                  	;mov	[si+18h],al
 14249 00001EE0 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14250 00001EE3 26FF05                  	inc	word [es:di]
 14251                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14252                                  					; remember this new invocation
 14253                                  	; 24/01/2024
 14254 00001EE6 16                      	push	ss
 14255 00001EE7 1F                      	pop	ds
 14256                                  	
 14257                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14258 00001EE8 A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14259                                  	;mov	[es:di+15h],ax
 14260 00001EEB 26894515                	MOV	[ES:DI+sf_LRU],AX
 14261                                  ;
 14262                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14263                                  ; blast it to prevent other reuse.
 14264                                  ;
 14265                                  	;push	ss
 14266                                  	;pop	ds
 14267                                  
 14268 00001EEF C43E[9E05]              	LES	DI,[THISSFT]
 14269 00001EF3 26FF0D                  	dec	word [es:di]
 14270                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14271                                  					; free the newly allocated SFT
 14272 00001EF6 E8F853                  	call	ShareEnd
 14273 00001EF9 B043                    	MOV	AL,'C'	 ; 43h
 14274 00001EFB E844FC                  	call	BlastSFT
 14275 00001EFE EBDD                    	JMP	short OpenDone
 14276                                  
 14277                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14278                                  ;----------------------------------------------------------------------------
 14279                                  ;
 14280                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14281                                  ;	FCB for us and asked to have the rest filled in.
 14282                                  ;
 14283                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14284                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14285                                  ;		FCB has the following fields filled in:
 14286                                  ;		    Time/Date Extent/NR Size
 14287                                  ;----------------------------------------------------------------------------
 14288                                  
 14289                                  _$FCB_CREATE:		; System call 22
 14290                                  
 14291                                  ;hkn; DOS_Create is in DOSCODE
 14292 00001F00 B9[EE29]                	MOV	CX,DOS_CREATE		; routine to call
 14293 00001F03 31C0                    	XOR	AX,AX			; attributes to create
 14294 00001F05 E84EFD                  	call	GetExtended		; get extended FCB
 14295 00001F08 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14296 00001F0A 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14297                                  DoAccessJ:
 14298 00001F0D E917FF                  	JMP	DoAccess		; do dirty work
 14299                                  
 14300                                  ;============================================================================
 14301                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14302                                  ;============================================================================
 14303                                  ; 22/07/2018 - Retro DOS v3.0
 14304                                  ; 17/05/2019 - Retro DOS v4.0
 14305                                  
 14306                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14307                                  
 14308                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14309                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14310                                  
 14311                                  ;**	Search.asm
 14312                                  ;----------------------------------------------------------------------------
 14313                                  ;	Directory search system calls.
 14314                                  ;	These will be passed direct text of the pathname from the user. 
 14315                                  ;	They will need to be passed through the macro expander prior to
 14316                                  ;	being sent through the low-level stuff. 
 14317                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14318                                  ;
 14319                                  ;	$Dir_Search_First	  written
 14320                                  ;	$Dir_Search_Next	  written
 14321                                  ;	$Find_First	  written
 14322                                  ;	$Find_Next		  written
 14323                                  ;	PackName		  written
 14324                                  ;
 14325                                  ;	Modification history:
 14326                                  ;
 14327                                  ;	  Created: ARR 4 April 1983
 14328                                  
 14329                                  ;----------------------------------------------------------------------------
 14330                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14331                                  ;
 14332                                  ; Inputs:
 14333                                  ;	DS:DX Points to unopenned FCB
 14334                                  ; Function:
 14335                                  ;	Directory is searched for first matching entry and the directory
 14336                                  ;	entry is loaded at the disk transfer address
 14337                                  ; Returns:
 14338                                  ;	AL = -1 if no entries matched, otherwise 0
 14339                                  ;----------------------------------------------------------------------------
 14340                                  
 14341                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14342                                  
 14343                                  	; 24/01/2024
 14344                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14345                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14346                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14347                                  
 14348                                  _$DIR_SEARCH_FIRST:
 14349 00001F10 368916[A605]            	MOV	[SS:THISFCB],DX
 14350 00001F15 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14351 00001F1A 89D6                    	MOV	SI,DX
 14352 00001F1C 803CFF                  	CMP	BYTE [SI],0FFH
 14353 00001F1F 7503                    	JNZ	short NORMFCB4
 14354 00001F21 83C607                  	ADD	SI,7			; Point to drive select byte
 14355                                  NORMFCB4:
 14356 00001F24 FF34                    	push	word [SI]		; Save original drive byte for later
 14357                                  
 14358 00001F26 16                      	push	ss
 14359 00001F27 07                      	pop	es			; get es to address DOSGroup
 14360                                  
 14361 00001F28 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14362 00001F2B E85F4B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14363 00001F2E 7304                    	JNC	short SearchIt		; no error, go and look
 14364 00001F30 5B                      	pop	bx			; Clean stack
 14365                                  
 14366                                  ; Error code is in AX
 14367                                  
 14368                                  	; 09/11/2022
 14369                                  dcf_errj:
 14370 00001F31 E926E7                  	jmp	FCB_RET_ERR		; error
 14371                                  
 14372                                  SearchIt:
 14373 00001F34 16                      	push	ss
 14374 00001F35 1F                      	pop	ds			; get ready for search
 14375                                  	;push	word [DMAADD]
 14376                                  	;push	word [DMAADD+2]
 14377                                  	; 24/01/2024
 14378 00001F36 C43E[2C03]              	les	di,[DMAADD]
 14379 00001F3A 57                      	push	di
 14380 00001F3B 06                      	push	es
 14381 00001F3C C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14382 00001F42 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14383                                  	; MSDOS 3.3
 14384                                  	;call	DOS_SEARCH_FIRST
 14385                                  	; MSDOS 6.0
 14386 00001F46 E8930D                  	call	GET_FAST_SEARCH		; search
 14387 00001F49 8F06[2E03]              	pop	word [DMAADD+2]
 14388 00001F4D 8F06[2C03]              	pop	word [DMAADD]
 14389 00001F51 735C                    	JNC	short SearchSet		; no error, transfer info
 14390 00001F53 5B                      	pop	bx			; Clean stack
 14391                                  
 14392                                  ; Error code is in AX
 14393                                  
 14394                                  	; 09/11/2022
 14395                                  	;jmp	FCB_RET_ERR
 14396 00001F54 EBDB                    	jmp	short dcf_errj
 14397                                  
 14398                                  ;----------------------------------------------------------------------------
 14399                                  ;
 14400                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14401                                  ;
 14402                                  ; Inputs:
 14403                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14404                                  ; Function:
 14405                                  ;	Directory is searched for the next matching entry and the directory
 14406                                  ;	entry is loaded at the disk transfer address
 14407                                  ; Returns:
 14408                                  ;	AL = -1 if no entries matched, otherwise 0
 14409                                  ;----------------------------------------------------------------------------
 14410                                  
 14411                                  	; 24/01/2024
 14412                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14413                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14414                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14415                                  
 14416                                  _$DIR_SEARCH_NEXT:
 14417 00001F56 368916[A605]            	MOV	[SS:THISFCB],DX
 14418 00001F5B 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14419 00001F60 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14420 00001F66 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14421                                  
 14422 00001F6C 16                      	push	ss
 14423 00001F6D 07                      	pop	es
 14424                                  
 14425 00001F6E BF[BE04]                	MOV	DI,SEARCHBUF
 14426                                  
 14427 00001F71 89D6                    	MOV	SI,DX
 14428 00001F73 803CFF                  	CMP	BYTE [SI],0FFh
 14429 00001F76 750D                    	JNZ	short NORMFCB6
 14430 00001F78 83C606                  	ADD	SI,6
 14431 00001F7B AC                      	LODSB
 14432                                  
 14433 00001F7C 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14434 00001F80 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14435                                  NORMFCB6:
 14436 00001F85 AC                      	LODSB				; Get original user drive byte
 14437 00001F86 50                      	push	ax			; Put it on stack
 14438 00001F87 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14439 00001F8A AA                      	STOSB				; Put in correct place
 14440 00001F8B B90A00                  	MOV	CX,20/2
 14441 00001F8E F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14442                                  
 14443 00001F90 16                      	push	ss
 14444 00001F91 1F                      	pop	ds
 14445                                  
 14446                                  	;push	word [DMAADD]
 14447                                  	;push	word [DMAADD+2]
 14448                                  	; 24/01/2024
 14449 00001F92 C43E[2C03]              	les	di,[DMAADD]
 14450 00001F96 57                      	push	di
 14451 00001F97 06                      	push	es
 14452 00001F98 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14453 00001F9E 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14454 00001FA2 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14455 00001FA5 8F06[2E03]              	pop	word [DMAADD+2]
 14456 00001FA9 8F06[2C03]              	pop	word [DMAADD]
 14457 00001FAD 724A                    	JC	short SearchNoMore
 14458                                  	; 24/01/2024
 14459                                  	;JMP	SearchSet		; Ok set return
 14460                                  
 14461                                  ;;;	; 24/01/2024
 14462                                  
 14463                                  ; The search was successful (or the search-next). We store the information
 14464                                  ; into the user's FCB for continuation.
 14465                                  
 14466                                  SearchSet:
 14467 00001FAF BE[BE04]                	MOV	SI,SEARCHBUF
 14468 00001FB2 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14469 00001FB6 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14470 00001FBB 7403                    	JZ	short NORMFCB1
 14471 00001FBD 83C707                  	ADD	DI,7			; Point past the extension
 14472                                  NORMFCB1:
 14473 00001FC0 5B                      	pop	bx			; Get original drive byte
 14474 00001FC1 08DB                    	OR	BL,BL
 14475 00001FC3 7506                    	JNZ	short SearchDrv
 14476 00001FC5 8A1E[3603]              	MOV	BL,[CURDRV]
 14477 00001FC9 FEC3                    	INC	BL
 14478                                  SearchDrv:
 14479 00001FCB AC                      	LODSB				; Get correct search contin drive byte
 14480 00001FCC 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14481 00001FCE 47                      	INC	DI
 14482                                  	;STOSB				; Store the correct "user" drive byte
 14483                                  					;  at the start of the search info
 14484 00001FCF B90A00                  	MOV	CX,20/2
 14485 00001FD2 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14486 00001FD4 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14487                                  					;   byte to AL
 14488 00001FD6 AA                      	STOSB				; Search contin drive byte at end of
 14489                                  					;   contin info
 14490 00001FD7 C43E[2C03]              	LES	DI,[DMAADD]
 14491 00001FDB F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14492 00001FE0 740D                    	JZ	short NORMFCB2
 14493 00001FE2 B0FF                    	MOV	AL,0FFh
 14494 00001FE4 AA                      	STOSB
 14495 00001FE5 FEC0                    	INC	AL
 14496                                  	;MOV	CX,5
 14497                                  	; 17/12/2022
 14498 00001FE7 B105                    	mov	cl,5
 14499 00001FE9 F3AA                    	REP	STOSB
 14500 00001FEB A0[6D05]                	MOV	AL,[SATTRIB]
 14501 00001FEE AA                      	STOSB
 14502                                  NORMFCB2:
 14503 00001FEF 88D8                    	MOV	AL,BL			; User Drive byte
 14504 00001FF1 AA                      	STOSB
 14505                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14506                                  	; 17/12/2022
 14507 00001FF2 B110                    	mov	cl,16
 14508 00001FF4 F3A5                    	REP	MOVSW
 14509 00001FF6 E95EE6                  	jmp	FCB_RET_OK
 14510                                  ;;;
 14511                                  
 14512                                  SearchNoMore:
 14513 00001FF9 C43E[A605]              	LES	DI,[THISFCB]
 14514 00001FFD F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14515 00002002 7403                    	JZ	short NORMFCB8
 14516 00002004 83C707                  	ADD	DI,7			; Point past the extension
 14517                                  NORMFCB8:
 14518 00002007 5B                      	pop	bx			; Get original drive byte
 14519 00002008 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14520                                  					;  at the right spot
 14521                                  ; error code is in AX
 14522                                  
 14523 0000200B E94CE6                  	jmp	FCB_RET_ERR
 14524                                  
 14525                                  ; 17/05/2019 - Retro DOS v4.0
 14526                                  
 14527                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14528                                  
 14529                                  ;---------------------------------------------------------------------------
 14530                                  ;
 14531                                  ;   Procedure Name : $FIND_FIRST
 14532                                  ; 
 14533                                  ;   Assembler usage:
 14534                                  ;	    MOV AH, FindFirst
 14535                                  ;	    LDS DX, name
 14536                                  ;	    MOV CX, attr
 14537                                  ;	    INT 21h
 14538                                  ;	; DMA address has datablock
 14539                                  ;
 14540                                  ;   Error Returns:
 14541                                  ;	    AX = error_path_not_found
 14542                                  ;	       = error_no_more_files
 14543                                  ;---------------------------------------------------------------------------
 14544                                  
 14545                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14546                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14547                                  
 14548                                  	; 24/01/2024
 14549                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14550                                  
 14551                                  _$FIND_FIRST:
 14552 0000200E 89D6                    	MOV	SI,DX			; get name in appropriate place
 14553 00002010 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14554                                  
 14555 00002015 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14556                                  
 14557 00002018 E8D84A                  	call	TransPathSet		; convert the path
 14558 0000201B 7305                    	JNC	short Find_it 		; no error, go and look
 14559                                  FindError:
 14560                                  	;mov	al,3
 14561 0000201D B003                    	mov	al, error_path_not_found ; error and map into one.
 14562                                  	; 09/11/2022
 14563                                  FF_errj:
 14564 0000201F E922E6                  	jmp	SYS_RET_ERR
 14565                                  Find_it:
 14566 00002022 16                      	push	ss
 14567 00002023 1F                      	pop	ds
 14568                                  
 14569                                  	;push	word [DMAADD]
 14570                                  	;push	word [DMAADD+2]
 14571                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14572 00002024 C43E[2C03]              	les	di,[DMAADD]
 14573 00002028 57                      	push	di
 14574 00002029 06                      	push	es
 14575 0000202A C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14576 00002030 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14577                                  	; MSDOS 3.3
 14578                                  	;call	DOS_SEARCH_FIRST
 14579                                  	; MSDOS 6.0
 14580 00002034 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14581 00002037 8F06[2E03]              	pop	word [DMAADD+2]
 14582 0000203B 8F06[2C03]              	pop	word [DMAADD]
 14583                                  	
 14584                                  	; 16/12/2022
 14585                                  	;JNC	short FindSet 		; no error, transfer info
 14586 0000203F 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14587                                  	;
 14588                                  	;jmp	SYS_RET_ERR
 14589                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14590                                  ;FFF_errj:
 14591                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14592                                  
 14593                                  FindSet:
 14594 00002041 BE[BE04]                	MOV	SI,SEARCHBUF
 14595 00002044 C43E[2C03]              	LES	DI,[DMAADD]
 14596 00002048 B91500                  	MOV	CX,21
 14597 0000204B F3A4                    	REP	MOVSB
 14598 0000204D 56                      	PUSH	SI			; Save pointer to start of entry
 14599                                  	;mov	al,[si+0Bh]
 14600 0000204E 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14601 00002051 AA                      	STOSB
 14602                                  	;add	si,16h ; 22
 14603 00002052 83C616                  	ADD	SI,dir_entry.dir_time
 14604 00002055 A5                      	MOVSW				; dir_time
 14605 00002056 A5                      	MOVSW				; dir_date
 14606 00002057 46                      	INC	SI
 14607 00002058 46                      	INC	SI			; Skip dir_first
 14608 00002059 A5                      	MOVSW				; dir_size (2 words)
 14609 0000205A A5                      	MOVSW
 14610 0000205B 5E                      	POP	SI			; Point back to dir_name
 14611 0000205C E83300                   	CALL	PackName
 14612 0000205F E9D9E5                  	jmp	SYS_RET_OK		; bye with no errors
 14613                                  
 14614                                  ;---------------------------------------------------------------------------
 14615                                  ;
 14616                                  ;   Procedure Name : $FIND_NEXT
 14617                                  ;
 14618                                  ;   Assembler usage:
 14619                                  ;	; dma points at area returned by find_first
 14620                                  ;	    MOV AH, findnext
 14621                                  ;	    INT 21h
 14622                                  ;	; next entry is at dma
 14623                                  ;
 14624                                  ;   Error Returns:
 14625                                  ;	    AX = error_no_more_files
 14626                                  ;---------------------------------------------------------------------------
 14627                                  
 14628                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14629                                  
 14630                                  	; 24/01/2024
 14631                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14632                                  
 14633                                  _$FIND_NEXT:
 14634 00002062 16                      	push	ss
 14635 00002063 07                      	pop	es
 14636                                  
 14637 00002064 BF[BE04]                	MOV	DI,SEARCHBUF
 14638                                  
 14639 00002067 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14640                                  
 14641 0000206C B91500                  	MOV	CX,21
 14642 0000206F F3A4                    	REP	MOVSB			; Put the search continuation info
 14643                                  					;  in the right place
 14644 00002071 16                      	push	ss
 14645 00002072 1F                      	pop	ds			; get ready for search
 14646                                  	
 14647                                  	;push	word [DMAADD]
 14648                                  	;push	word [DMAADD+2]
 14649                                  	; 24/01/2024
 14650 00002073 C43E[2C03]              	les	di,[DMAADD]
 14651 00002077 57                      	push	di
 14652 00002078 06                      	push	es
 14653 00002079 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14654 0000207F 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14655 00002083 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14656 00002086 8F06[2E03]              	pop	word [DMAADD+2]
 14657 0000208A 8F06[2C03]              	pop	word [DMAADD]
 14658 0000208E 73B1                    	JNC	short FindSet 		; No error, set info
 14659                                  	;jmp	SYS_RET_ERR
 14660                                  	; 16/12/2022
 14661 00002090 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14662                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14663                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14664                                  
 14665                                  ;---------------------------------------------------------------------------
 14666                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14667                                  ;
 14668                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14669                                  ;	the ASCIZ format.
 14670                                  ;
 14671                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14672                                  ;		(ES:DI) = destination area (13 bytes)
 14673                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14674                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14675                                  ;---------------------------------------------------------------------------
 14676                                  
 14677                                  	; 25/01/2024 - Retro DOS v4.1
 14678                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14679                                  
 14680                                  PackName:
 14681                                  ;	Move over 8 characters to cover the name component, then trim it's
 14682                                  ;	trailing blanks.
 14683                                  
 14684                                  	;MOV	CX,8			; Pack the name
 14685                                  	;REP	MOVSB			; Move all of it
 14686                                  	; 25/01/2024
 14687 00002092 B90400                  	mov	cx,4
 14688 00002095 F3A5                    	rep	movsw
 14689                                  main_kill_tail:
 14690 00002097 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14691 0000209C 7507                    	JNZ	short find_check_dot
 14692 0000209E 4F                      	DEC	DI			; Back up over trailing space
 14693 0000209F 41                      	INC	CX
 14694 000020A0 83F908                  	CMP	CX,8
 14695 000020A3 72F2                    	JB	short main_kill_tail
 14696                                  find_check_dot:
 14697                                  	;CMP	WORD [SI],(" " << 8) | " "
 14698 000020A5 813C2020                	cmp     word [si],2020h 
 14699 000020A9 7506                    	JNZ	short got_ext 		; Some chars in extension
 14700 000020AB 807C0220                	CMP	BYTE [SI+2]," "
 14701 000020AF 740F                    	JZ	short find_done		; No extension
 14702                                  got_ext:
 14703 000020B1 B02E                    	MOV	AL,"."	; 2Eh
 14704 000020B3 AA                      	STOSB
 14705                                  	;MOV	CX,3
 14706                                  	;; 18/12/2022
 14707                                  	;;mov	cl,3
 14708                                  	;;REP	MOVSB
 14709                                  	;movsb
 14710                                  	;movsb
 14711                                  	;movsb
 14712                                  	; 25/01/2024
 14713 000020B4 A5                      	movsw
 14714 000020B5 A4                      	movsb
 14715                                  ext_kill_tail:
 14716 000020B6 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14717 000020BB 7503                    	JNZ	short find_done
 14718 000020BD 4F                      	DEC	DI			; Back up over trailing space
 14719 000020BE EBF6                    	JMP	short ext_kill_tail
 14720                                  find_done:
 14721 000020C0 31C0                    	XOR	AX,AX
 14722 000020C2 AA                      	STOSB				; NUL terminate
 14723 000020C3 C3                      	retn
 14724                                  
 14725                                  ;---------------------------------------------------------------------------
 14726                                  
 14727                                  ; 24/01/2024
 14728                                  %if 0
 14729                                  	; 17/05/2019 - Retro DOS v4.0
 14730                                  GET_FAST_SEARCH:
 14731                                  	; 22/07/2018
 14732                                  	; MSDOS 6.0
 14733                                  	; 17/12/2022
 14734                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14735                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14736                                  					;FO.trigger fastopen ;AN000;
 14737                                  	;call	DOS_SEARCH_FIRST
 14738                                  	;retn
 14739                                  	; 17/12/2022
 14740                                  	jmp	DOS_SEARCH_FIRST
 14741                                  %endif
 14742                                  
 14743                                  ;============================================================================
 14744                                  ; PATH.ASM, MSDOS 6.0, 1991
 14745                                  ;============================================================================
 14746                                  ; 06/08/2018 - Retro DOS v3.0
 14747                                  ; 17/05/2019 - Retro DOS v4.0
 14748                                  
 14749                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14750                                  
 14751                                  ;**	Directory related system calls. These will be passed direct text of the
 14752                                  ;	pathname from the user. They will need to be passed through the macro
 14753                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14754                                  ;	defined in DISPATCH. The system calls are:
 14755                                  ;
 14756                                  ;	$CURRENT_DIR  Written
 14757                                  ;	$RMDIR	  Written
 14758                                  ;	$CHDIR	  Written
 14759                                  ;	$MKDIR	  Written
 14760                                  ;
 14761                                  ;
 14762                                  ;	Modification history:
 14763                                  ;
 14764                                  ;	    Created: ARR 4 April 1983
 14765                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14766                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14767                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14768                                  ;				    current directory.
 14769                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14770                                  
 14771                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14772                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14773                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14774                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14775                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14776                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14777                                  ;	I_Need	cMeta,BYTE
 14778                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14779                                  
 14780                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14781                                  ;----------------------------------------------------------------------------
 14782                                  ;
 14783                                  ;   Procedure Name : $CURRENT_DIR
 14784                                  ;
 14785                                  ;   Assembler usage:
 14786                                  ;		LDS	SI,area
 14787                                  ;		MOV	DL,drive
 14788                                  ;		INT	21h
 14789                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14790                                  ;	    ; current directory.
 14791                                  ;   Error returns:
 14792                                  ;	    AX = error_invalid_drive
 14793                                  ;
 14794                                  ;----------------------------------------------------------------------------
 14795                                  
 14796                                  	; 06/08/2018 - Retro DOS v3.0
 14797                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14798                                  
 14799                                  	; 25/01/2024 - Retro DOS v4.1
 14800                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14801                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14802                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14803                                  
 14804                                  _$CURRENT_DIR:
 14805 000020C4 E84BF2                  	call	ECritDisk
 14806 000020C7 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14807 000020C9 E83049                  	call	GetVisDrv		; grab it
 14808 000020CC 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14809                                  CurdirErr:
 14810 000020CE E85CF2                  	call	LCritDisk
 14811                                  
 14812                                  	; MSDOS 3.3
 14813                                  	;mov	al,0Fh
 14814                                  	
 14815                                  	; MSDOS 6.0
 14816 000020D1 1E                      	push	ds
 14817 000020D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14818 000020D7 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14819 000020DA 1F                      	pop	ds
 14820                                  
 14821                                  curdir_errj:
 14822 000020DB E966E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14823                                  
 14824                                  CurrentValidate:
 14825 000020DE 1E                      	push	ds			; save destination
 14826 000020DF 56                      	push	si
 14827                                  	
 14828                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14829                                  	
 14830                                  	; MSDOS 6.0
 14831 000020E0 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14832                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14833 000020E5 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14834                                  	
 14835                                  	; 25/01/2024
 14836                                  	;lds     si,[THISCDS]
 14837                                  
 14838                                  ; 16/12/2022
 14839                                  %if 0
 14840                                  	; 09/11/2022 (following test instruction is nonsense!)
 14841                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14842                                  
 14843                                  	;test	word [si+43h],8000h
 14844                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14845                                  	;jnz	short $+2  ; 09/11/2022	
 14846                                  	jnz	short DoCheck
 14847                                  %endif
 14848                                  
 14849                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14850                                  ; media check.
 14851                                  ;	CMP	word [SI+curdir.ID],0
 14852                                  ;	JZ	short GetDst
 14853                                  DoCheck:
 14854                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14855                                  
 14856                                  	; 25/01/2024
 14857                                  	; MSDOS 6.0
 14858                                  	;push	ds
 14859                                  	;mov	ds,[cs:DosDSeg]
 14860                                  	;mov	byte [NoSetDir],0 ; *
 14861                                  	;pop	ds
 14862                                  
 14863 000020EA BF[BE03]                	MOV	DI,OPENBUF
 14864 000020ED E8F220                  	call	ValidateCDS		; output is ES:DI -> CDS
 14865                                  
 14866 000020F0 06                      	push	es	 		; swap source and destination
 14867 000020F1 57                      	push	di
 14868 000020F2 5E                      	pop	si
 14869 000020F3 1F                      	pop	ds
 14870                                  GetDst:
 14871 000020F4 5F                      	pop	di
 14872 000020F5 07                      	pop	es			; get real destination
 14873 000020F6 72D6                    	JC	short CurdirErr
 14874                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14875                                  	;
 14876                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14877                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14878                                  	; 16/12/2022
 14879                                  	;add	si,0  ; add si,curdir.text
 14880                                  	;
 14881                                  	;add	si,[si+4Fh] ; 17/05/2019
 14882 000020F8 03744F                  	ADD	SI,[SI+curdir.end]
 14883 000020FB 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14884 000020FE 7501                    	JNZ	short CurrentCopy
 14885 00002100 46                      	INC	SI
 14886                                  CurrentCopy:
 14887                                  ;	call	FStrCpy
 14888                                  ;; 10/29/86 E5 char
 14889 00002101 50                      	PUSH	AX
 14890 00002102 AC                      	LODSB				; get char
 14891 00002103 08C0                    	OR	AL,AL
 14892 00002105 7413                    	JZ	short FOK
 14893 00002107 3C05                    	CMP	AL,05H
 14894 00002109 740D                    	JZ	short FCHANGE
 14895 0000210B EB01                    	JMP	short FFF
 14896                                  FCPYNEXT:
 14897 0000210D AC                      	LODSB				; get char
 14898                                  FFF:
 14899 0000210E 3C5C                    	CMP	AL,'\'			; beginning of directory
 14900 00002110 7508                    	JNZ	short FOK		; no
 14901 00002112 AA                      	STOSB				; put into user's buffer
 14902 00002113 AC                      	LODSB				; 1st char of dir is 05?
 14903 00002114 3C05                    	CMP	AL,05H
 14904 00002116 7502                    	JNZ	short FOK		; no
 14905                                  FCHANGE:
 14906 00002118 B0E5                    	MOV	AL,0E5H			; make it E5
 14907                                  FOK:
 14908 0000211A AA                      	STOSB				; put into user's buffer
 14909 0000211B 08C0                    	OR	AL,AL			; final char
 14910 0000211D 75EE                    	JNZ	short FCPYNEXT		; no
 14911 0000211F 58                      	POP	AX
 14912                                  
 14913                                  ;; 10/29/86 E5 char
 14914 00002120 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14915 00002122 E808F2                  	call	LCritDisk
 14916 00002125 E913E5                  	jmp	SYS_RET_OK		; no more, bye!
 14917                                  
 14918                                  ; 17/05/2019 - Retro DOS v4.0
 14919                                  
 14920                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14921                                  
 14922                                  ;BREAK <$RmDir -- Remove a directory>
 14923                                  ;----------------------------------------------------------------------------
 14924                                  ;
 14925                                  ; Procedure Name : $RmDir
 14926                                  ;
 14927                                  ; Inputs:
 14928                                  ;	DS:DX Points to asciz name
 14929                                  ; Function:
 14930                                  ;	Delete directory if empty
 14931                                  ; Returns:
 14932                                  ;	STD XENIX Return
 14933                                  ;	AX = error_path_not_found If path bad
 14934                                  ;	AX = error_access_denied If
 14935                                  ;		Directory not empty
 14936                                  ;		Path not directory
 14937                                  ;		Root directory specified
 14938                                  ;		Directory malformed (. and .. not first two entries)
 14939                                  ;		User tries to delete a current directory
 14940                                  ;	AX = error_current_directory
 14941                                  ;
 14942                                  ;----------------------------------------------------------------------------
 14943                                  
 14944                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14945                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14946                                  
 14947                                  _$RMDIR:
 14948 00002128 52                      	push	dx			; Save ptr to name
 14949 00002129 1E                      	push	ds
 14950 0000212A 89D6                    	mov	si,dx			; Load ptr into si
 14951 0000212C BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14952 0000212F 57                      	push	di
 14953 00002130 E8C849                  	call	TransPathNoSet		; Translate the name
 14954 00002133 5F                      	pop	di			; di = ptr to buf for trans name
 14955 00002134 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14956 00002136 1F                      	pop	ds
 14957 00002137 5A                      	pop	dx			; Restore the name
 14958                                  	;mov	al,3
 14959 00002138 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14960                                  	; 16/12/2022
 14961                                  rmdir_errj: ; 10/08/2018
 14962                                  chdir_errj:
 14963 0000213A EB9F                    	jmp	short curdir_errj
 14964                                  	;jmp	SYS_RET_ERR
 14965                                  rmlset:
 14966 0000213C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14967 00002142 7512                    	Jnz	short rmerr		;	return (-1);
 14968 00002144 16                      	push	ss
 14969 00002145 07                      	pop	es
 14970 00002146 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14971                                  rmloop: 
 14972 00002148 E82249                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14973 0000214B 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14974 0000214D E866F0                  	call	StrCmp			; Are the 2 paths the same?
 14975 00002150 7404                    	jz	short rmerr		; Yes, report error.
 14976 00002152 FEC0                    	inc	al			; No, inc al to next drive number
 14977 00002154 EBF2                    	jmp	short rmloop		; Go check next drive.
 14978                                  rmerr:
 14979 00002156 1F                      	pop	ds
 14980 00002157 5A                      	pop	dx			; Restore the name
 14981                                  	;mov	al,10h
 14982 00002158 B010                    	mov	al,error_current_directory ; error
 14983                                  	; 16/12/2022
 14984                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14985                                  ;chdir_errj:
 14986 0000215A EBDE                    	jmp	short rmdir_errj
 14987                                  rmcont:
 14988 0000215C 1F                      	pop	ds
 14989 0000215D 5A                      	pop	dx			; Restore the name
 14990 0000215E BE[8731]                	MOV	SI,DOS_RMDIR
 14991 00002161 EB7C                    	JMP	DoDirCall
 14992                                  
 14993                                  ; 17/05/2019 - Retro DOS v4.0
 14994                                  
 14995                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14996                                  
 14997                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14998                                  ;----------------------------------------------------------------------------
 14999                                  ;
 15000                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15001                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15002                                  ; several cases to consider:
 15003                                  ;
 15004                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15005                                  ;	it into a WFP.	We verify the existance of this directory and then
 15006                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15007                                  ;	directory cluster.
 15008                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15009                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15010                                  ;	WFP back into the CDS.
 15011                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15012                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15013                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15014                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15015                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15016                                  ;	to process the path but to return the logical CDS and the logical
 15017                                  ;	path.  We then copy the logical path into the logical CDS.
 15018                                  ;
 15019                                  ; Inputs:
 15020                                  ;	DS:DX Points to asciz name
 15021                                  ; Returns:
 15022                                  ;	STD XENIX Return
 15023                                  ;	AX = chdir_path_not_found if error
 15024                                  ;
 15025                                  ;----------------------------------------------------------------------------
 15026                                  
 15027                                  _$CHDIR:
 15028 00002163 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15029 00002166 89D6                    	MOV	SI,DX			; get source
 15030 00002168 E88449                  	call	TransPath		; go munge the path and get real CDS
 15031 0000216B 7304                    	JNC	short ChDirCrack	; no errors, try path
 15032                                  ChDirErrP:
 15033                                  	;mov	al,3
 15034 0000216D B003                    	MOV	AL,error_path_not_found
 15035                                  ChDirErr:
 15036                                  	;jmp	SYS_RET_ERR 	; oops!
 15037                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15038 0000216F EBC9                    	jmp	short chdir_errj
 15039                                  
 15040                                  ChDirCrack:
 15041 00002171 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15042 00002176 75F5                    	JNZ	short ChDirErrP
 15043                                  
 15044                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15045                                  ; found.
 15046                                  
 15047 00002178 C43E[A205]              	LES	DI,[THISCDS]
 15048 0000217C 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15049 0000217F 74EC                    	JZ	short ChDirErrP		;	error ();
 15050                                  
 15051                                  ; Find out if the directory exists.
 15052                                  
 15053 00002181 E8C00F                  	call	DOS_CHDIR
 15054                                  	;Jc	short ChDirErr
 15055                                  	; 16/12/2022
 15056 00002184 72B4                    	jc	short chdir_errj
 15057                                  ;
 15058                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15059                                  ; not network). If one was seen, all we need to do is copy in the text
 15060                                  ;
 15061 00002186 C43E[A205]              	LES	DI,[THISCDS]
 15062                                  	;test	word [es:di+43h],2000h
 15063                                  	; 17/12/2022
 15064 0000218A 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15065                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15066 0000218F 7425                    	JZ	short GotCDS
 15067                                  
 15068                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15069                                  
 15070 00002191 06                      	push	es	
 15071 00002192 57                      	push	di
 15072 00002193 51                      	push	cx			; save CDS and cluster...
 15073 00002194 E8EEE2                  	call	Get_User_Stack		; get original text
 15074                                  	
 15075                                  	;mov	di,[si+6]
 15076 00002197 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15077                                  	;mov	ds,[si+0Eh]
 15078 0000219A 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15079                                  	
 15080 0000219D BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15081 000021A0 87F7                    	XCHG	SI,DI
 15082 000021A2 30C0                    	XOR	AL,AL			; do no splicing
 15083 000021A4 57                      	push	di
 15084 000021A5 E85349                  	call	TransPathNoSet		; Munge path
 15085 000021A8 5E                      	pop	si
 15086                                  
 15087                                  ; There should NEVER be an error here.
 15088                                  
 15089                                  ;IF FALSE
 15090                                  ;	JNC SKipErr
 15091                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15092                                  ;SkipErr:
 15093                                  ;ENDIF
 15094 000021A9 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15095                                  	;mov	word [es:di+49h],-1
 15096 000021AD 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15097                                  					; no valid cluster here...
 15098 000021B3 59                      	pop	cx
 15099 000021B4 5F                      	pop	di
 15100 000021B5 07                      	pop	es
 15101                                  
 15102                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15103                                  
 15104                                  GotCDS:
 15105                                  
 15106                                  ; wfp_start points to the text. See if it is long enough
 15107                                  
 15108                                  	; MSDOS 3.3
 15109                                  	;push	ss
 15110                                  	;pop	ds
 15111                                  	;mov	si,[WFP_START]
 15112                                  	;push	cx
 15113                                  	;call	DStrLen
 15114                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15115                                  	;pop	cx
 15116                                  	;ja	short ChDirErrP
 15117                                  
 15118                                  	; MSDOS 6.0
 15119 000021B6 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15120 000021B9 77B2                    	JA	short ChDirErrP
 15121                                  	; MSDOS 3.3 & MSDOS 6.0
 15122                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15123                                  	; 17/12/2022
 15124 000021BB 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15125 000021C0 7512                    	JNZ	short SkipRecency
 15126                                  	; MSDOS 6.0
 15127                                  	;test	word [es:di+43h],2000h
 15128                                  	; 17/12/2022
 15129 000021C2 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15130                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15131                                  					;PTM. for Join and Subst ;AN000;
 15132 000021C7 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15133 000021C9 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15134                                  setdirclus:
 15135                                  	;mov	[es:di+49h],cx
 15136 000021CC 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15137 000021D0 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15138                                  SkipRecency:
 15139 000021D4 E810F0                  	call	FStrCpy
 15140 000021D7 30C0                    	XOR	AL,AL
 15141                                  mkdir_ok:
 15142 000021D9 E95FE4                  	jmp	SYS_RET_OK
 15143                                  
 15144                                  ; 17/05/2019 - Retro DOS v4.0
 15145                                  
 15146                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15147                                  
 15148                                  ;BREAK <$MkDir - Make a directory entry>
 15149                                  ;---------------------------------------------------------------------------
 15150                                  ;
 15151                                  ; Procedure Name : $MkDir
 15152                                  ; Inputs:
 15153                                  ;	DS:DX Points to asciz name
 15154                                  ; Function:
 15155                                  ;	Make a new directory
 15156                                  ; Returns:
 15157                                  ;	STD XENIX Return
 15158                                  ;	AX = mkdir_path_not_found if path bad
 15159                                  ;	AX = mkdir_access_denied  If
 15160                                  ;		Directory cannot be created
 15161                                  ;		Node already exists
 15162                                  ;		Device name given
 15163                                  ;		Disk or directory(root) full
 15164                                  ;---------------------------------------------------------------------------
 15165                                  
 15166                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15167                                  
 15168                                  _$MKDIR:
 15169 000021DC BE[5730]                	MOV	SI,DOS_MKDIR
 15170                                  DoDirCall:
 15171 000021DF BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15172                                  
 15173 000021E2 56                      	push	si
 15174 000021E3 89D6                    	MOV	SI,DX			; get source
 15175 000021E5 E80749                  	call	TransPath		; go munge the path
 15176 000021E8 5E                      	pop	si
 15177 000021E9 7305                    	JNC	short MkDirCrack	; no errors, try path
 15178                                  MkErrP:
 15179 000021EB B003                    	MOV	AL,error_path_not_found	; oops!
 15180                                  MkErr:
 15181 000021ED E954E4                  	jmp	SYS_RET_ERR
 15182                                  MkDirCrack:
 15183 000021F0 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15184 000021F6 75F3                    	JNZ	short MkErrP
 15185                                  
 15186                                  	; MSDOS 3.3
 15187                                  	;push	ss
 15188                                  	;pop	ds
 15189                                  	;call	si
 15190                                  	;jb	short MkErr
 15191                                  	;;jmp	short mkdir_ok
 15192                                  	;jmp	SYS_RET_OK
 15193                                  
 15194                                  	; MSDOS 6.0
 15195 000021F8 56                      	PUSH	SI			;PTM.			;AN000;
 15196 000021F9 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15197 000021FC 5E                      	POP	SI			;PTM.			;AN000;
 15198 000021FD 7604                    	JBE	short pathok		;PTM.			;AN000;
 15199                                  	;mov	al,5
 15200 000021FF B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15201                                  	;jmp	SYS_RET_ERR		;PTM.
 15202 00002201 EBEA                    	jmp	short MkErr
 15203                                  pathok:
 15204 00002203 FFD6                    	CALL	SI			; go get file
 15205 00002205 72E6                    	JC	short MkErr		; no errors
 15206                                  	; 16/12/2022
 15207                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15208 00002207 EBD0                    	jmp	short mkdir_ok
 15209                                  	;jmp	SYS_RET_OK
 15210                                  
 15211                                  ;----------------------------------------------------------------------------
 15212                                  ;
 15213                                  ; Procedure Name : Check_PathLen
 15214                                  ;
 15215                                  ; Inputs:
 15216                                  ;	nothing
 15217                                  ; Function:
 15218                                  ;	check if final path length greater than 67
 15219                                  ; Returns:
 15220                                  ;	Above flag set if > 67
 15221                                  ;
 15222                                  ;---------------------------------------------------------------------------
 15223                                  
 15224                                  Check_PathLen:
 15225                                  	; 09/09/2018
 15226                                  	;mov	SI,[WFP_START]
 15227 00002209 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15228                                  Check_PathLen2:
 15229 0000220E 16                      	push	ss
 15230 0000220F 1F                      	pop	ds
 15231                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15232 00002210 51                      	push	CX	
 15233 00002211 E8EAEF                  	CALL	DStrLen
 15234 00002214 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15235 00002217 59                      	POP	CX
 15236 00002218 C3                      	retn
 15237                                  
 15238                                  ;============================================================================
 15239                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15240                                  ;============================================================================
 15241                                  ; 07/08/2018 - Retro DOS v3.0
 15242                                  ; 17/05/2019 - Retro DOS v4.0
 15243                                  
 15244                                  ;**	IOCTL system call.
 15245                                  ;----------------------------------------------------------------------------
 15246                                  ;	$IOCTL
 15247                                  ;
 15248                                  ;	  Revision history:
 15249                                  ;
 15250                                  ;		Created: ARR 4 April 1983
 15251                                  ;
 15252                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15253                                  ;
 15254                                  ;		A000	version 4.00	Jan. 1988
 15255                                  ;
 15256                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15257                                  ;
 15258                                  
 15259                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15260                                  ;---------------------------------------------------------------------------
 15261                                  ;
 15262                                  ;   Assembler usage:
 15263                                  ;	    MOV     BX, Handle
 15264                                  ;	    MOV     DX, Data
 15265                                  ;
 15266                                  ;	(or LDS     DX,BUF
 15267                                  ;	    MOV     CX,COUNT)
 15268                                  ;
 15269                                  ;	    MOV     AH, Ioctl
 15270                                  ;	    MOV     AL, Request
 15271                                  ;	    INT     21h
 15272                                  ;
 15273                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15274                                  ;	    attribute word in DX, handle in BX:
 15275                                  ;	    DH = high word of device driver attributes
 15276                                  ;	    DL = low byte of sf_flags
 15277                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15278                                  ;	    in BX.
 15279                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15280                                  ;	    into DS:DX.  Return number read in AX.
 15281                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15282                                  ;	    DS:DX.  Return bytes written in AX.
 15283                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15284                                  ;	    into DS:DX.  Return number read in AX.
 15285                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15286                                  ;	    DS:DX.  Return bytes written in AX.
 15287                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15288                                  ;	    device, AL = 0FFh, otherwise 0.
 15289                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15290                                  ;	    device, AL = 0FFh, otherwise 0.
 15291                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15292                                  ;	    removable media, 0 otherwise.
 15293                                  ;	 9  Return the contents of the device attribute word in DX for the
 15294                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15295                                  ;	    network. 8000h is the bit for local use.
 15296                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15297                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15298                                  ;	    the count and CX is the delay.
 15299                                  ;
 15300                                  ;   Error returns:
 15301                                  ;	    AX = error_invalid_handle
 15302                                  ;	       = error_invalid_function
 15303                                  ;	       = error_invalid_data
 15304                                  ;
 15305                                  ;-------------------------------------------------------------------------------
 15306                                  ;
 15307                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15308                                  ;   than the above
 15309                                  ;
 15310                                  ;	There are several basic forms of IOCTL calls:
 15311                                  ;
 15312                                  ;
 15313                                  ;	** Get/Set device information:	**
 15314                                  ;
 15315                                  ;	ENTRY	(AL) = function code
 15316                                  ;		  0 - Get device information
 15317                                  ;		  1 - Set device information
 15318                                  ;		(BX) = file handle
 15319                                  ;		(DX) = info for "Set Device Information"
 15320                                  ;	EXIT	'C' set if error
 15321                                  ;		  (AX) = error code
 15322                                  ;		'C' clear if OK
 15323                                  ;		  (DX) = info for "Get Device Information"
 15324                                  ;	USES	ALL
 15325                                  ;
 15326                                  ;
 15327                                  ;	**  Read/Write Control Data From/To Handle  **
 15328                                  ;
 15329                                  ;	ENTRY	(AL) = function code
 15330                                  ;		  2 - Read device control info
 15331                                  ;		  3 - Write device control info
 15332                                  ;		(BX) = file handle
 15333                                  ;		(CX) = transfer count
 15334                                  ;		(DS:DX) = address for data
 15335                                  ;	EXIT	'C' set if error
 15336                                  ;		  (AX) = error code
 15337                                  ;		'C' clear if OK
 15338                                  ;		  (AX) = count of bytes transfered
 15339                                  ;	USES	ALL
 15340                                  ;
 15341                                  ;
 15342                                  ;	**  Read/Write Control Data From/To Block Device  **
 15343                                  ;
 15344                                  ;	ENTRY	(AL) = function code
 15345                                  ;		  4 - Read device control info
 15346                                  ;		  5 - Write device control info
 15347                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15348                                  ;		(CX) = transfer count
 15349                                  ;		(DS:DX) = address for data
 15350                                  ;	EXIT	'C' set if error
 15351                                  ;		  (AX) = error code
 15352                                  ;		'C' clear if OK
 15353                                  ;		  (AX) = count of bytes transfered
 15354                                  ;	USES	ALL
 15355                                  ;
 15356                                  ;
 15357                                  ;	**  Get Input/Output Status  **
 15358                                  ;
 15359                                  ;	ENTRY	(AL) = function code
 15360                                  ;		  6 - Get Input status
 15361                                  ;		  7 - Get Output Status
 15362                                  ;		(BX) = file handle
 15363                                  ;	EXIT	'C' set if error
 15364                                  ;		  (AX) = error code
 15365                                  ;		'C' clear if OK
 15366                                  ;		  (AL) = 00 if not ready
 15367                                  ;		  (AL) = FF if ready
 15368                                  ;	USES	ALL
 15369                                  ;
 15370                                  ;
 15371                                  ;	**  Get Drive Information  **
 15372                                  ;
 15373                                  ;	ENTRY	(AL) = function code
 15374                                  ;		  8 - Check for removable media
 15375                                  ;		  9 - Get device attributes
 15376                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15377                                  ;	EXIT	'C' set if error
 15378                                  ;		  (AX) = error code
 15379                                  ;		'C' clear if OK
 15380                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15381                                  ;		  (DX) = device attribute word (func. 9)
 15382                                  ;	USES	ALL
 15383                                  ;
 15384                                  ;
 15385                                  ;	**  Get Redirected bit	**
 15386                                  ;
 15387                                  ;	ENTRY	(AL) = function code
 15388                                  ;		  0Ah - Network stuff
 15389                                  ;		(BX) = file handle
 15390                                  ;	EXIT	'C' set if error
 15391                                  ;		  (AX) = error code
 15392                                  ;		'C' clear if OK
 15393                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15394                                  ;	USES	ALL
 15395                                  ;
 15396                                  ;
 15397                                  ;	**  Change sharer retry parameters  **
 15398                                  ;
 15399                                  ;	ENTRY	(AL) = function code
 15400                                  ;		  0Bh - Set retry parameters
 15401                                  ;		(CX) = retry loop count
 15402                                  ;		(DX) = number of retries
 15403                                  ;	EXIT	'C' set if error
 15404                                  ;		  (AX) = error code
 15405                                  ;		'C' clear if OK
 15406                                  ;	USES	ALL
 15407                                  ;
 15408                                  ;
 15409                                  ;   =================================================================
 15410                                  ;
 15411                                  ;	**  New Standard Control  **
 15412                                  ;
 15413                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15414                                  ;	FORMS ARE OBSOLETE.
 15415                                  ;
 15416                                  ;   =================================================================
 15417                                  ;
 15418                                  ;	ENTRY	(AL) = function code
 15419                                  ;		  0Ch - Control Function subcode
 15420                                  ;		(BX) = File Handle
 15421                                  ;		(CH) = Category Indicator
 15422                                  ;		(CL) = Function within category
 15423                                  ;		(DS:DX) = address for data, if any
 15424                                  ;		(SI) = Passed to device as argument, use depends upon function
 15425                                  ;		(DI) = Passed to device as argument, use depends upon function
 15426                                  ;	EXIT	'C' set if error
 15427                                  ;		  (AX) = error code
 15428                                  ;		'C' clear if OK
 15429                                  ;		  (SI) = Return value, meaning is function dependent
 15430                                  ;		  (DI) = Return value, meaning is function dependent
 15431                                  ;		  (DS:DX) = Return address, use is function dependent
 15432                                  ;	USES	ALL
 15433                                  ;
 15434                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15435                                  ;     (See inc\ioctl.inc for more info)
 15436                                  ;
 15437                                  ;	ENTRY	(AL) = function code
 15438                                  ;		  0Dh - Control Function subcode
 15439                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15440                                  ;		(CH) = Category Indicator
 15441                                  ;		(CL) = Function within category
 15442                                  ;		(DS:DX) = address for data, if any
 15443                                  ;		(SI) = Passed to device as argument, use depends upon function
 15444                                  ;		(DI) = Passed to device as argument, use depends upon function
 15445                                  ;
 15446                                  ;	EXIT	'C' set if error
 15447                                  ;		  (AX) = error code
 15448                                  ;		'C' clear if OK
 15449                                  ;		  (DS:DX) = Return address, use is function dependent
 15450                                  ;	USES	ALL
 15451                                  ;
 15452                                  ;---------------------------------------------------------------------------
 15453                                  	
 15454                                  	; 17/05/2019 - Retro DOS v4.0
 15455                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15456                                  
 15457                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15458                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15459                                  
 15460                                  IOCTLJMPTABLE:	;label	word
 15461                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15462 00002219 [5522]                  	dw	ioctl_getset_data	; 0
 15463 0000221B [5522]                  	dw	ioctl_getset_data   	; 1
 15464 0000221D [A522]                  	dw	ioctl_control_string	; 2
 15465 0000221F [A522]                  	dw	ioctl_control_string	; 3
 15466 00002221 [F323]                  	dw	ioctl_get_dev		; 4
 15467 00002223 [F323]                  	dw	ioctl_get_dev		; 5
 15468 00002225 [BF22]                  	dw	ioctl_status		; 6
 15469 00002227 [BF22]                  	dw	ioctl_status		; 7
 15470 00002229 [6023]                  	dw	ioctl_rem_media		; 8
 15471 0000222B [9B23]                  	dw	ioctl_drive_attr	; 9
 15472 0000222D [E523]                  	dw	ioctl_handle_redir	; A
 15473 0000222F [DB22]                  	dw	Set_Retry_Parameters	; B
 15474 00002231 [E922]                  	dw	GENERICIOCTLHANDLE	; C
 15475 00002233 [0023]                  	dw	GENERICIOCTL		; D
 15476                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15477 00002235 [9624]                  	dw	ioctl_drive_owner	; E
 15478 00002237 [9624]                  	dw	ioctl_drive_owner	; F
 15479                                  	; MSDOS 6.0
 15480 00002239 [E922]                  	dw	query_handle_support	; 10h
 15481 0000223B [0023]                  	dw	query_device_support	; 11h
 15482                                  
 15483                                  	; 11/11/2022
 15484                                  _$IOCTL:
 15485 0000223D 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15486 0000223F 16                      	push	ss
 15487 00002240 1F                      	pop	ds			;hkn; SS is DOSDATA
 15488                                  
 15489                                  	; MSDOS 3.3
 15490                                  	;cmp	al,0Fh 
 15491                                  	; MSDOS 6.0
 15492 00002241 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15493 00002243 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15494                                  
 15495                                  	; 14/01/2024
 15496                                  	; 28/05/2019
 15497                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15498 00002245 89C7                    	mov	di,ax			; di NOT a PARM
 15499 00002247 81E7FF00                	and	di,0FFh			; di = al
 15500 0000224B D1E7                    	shl	di,1			; di = index into jmp table
 15501                                  	;pop	AX			; Restore AL for generic IOCTL
 15502                                  
 15503 0000224D 2EFFA5[1922]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15504                                  
 15505                                  ioctl_bad_funj2:
 15506 00002252 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15507                                  
 15508                                  ;--------------------------------------------------------------------------
 15509                                  ;
 15510                                  ; IOCTL: AL = 0,1
 15511                                  ;
 15512                                  ; ENTRY: DS = DOSDATA
 15513                                  ;
 15514                                  ;--------------------------------------------------------------------------
 15515                                  
 15516                                  ioctl_getset_data:
 15517                                  	; MSDOS 6.0
 15518 00002255 E89C43                  	call	SFFromHandle		; ES:DI -> SFT
 15519 00002258 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15520                                  ioctl_bad_handle:
 15521                                  	;mov	al,6
 15522 0000225A B006                    	mov	al,error_invalid_handle
 15523                                  ioctl_error:
 15524 0000225C E9E5E3                  	jmp	SYS_RET_ERR
 15525                                  
 15526                                  ioctl_check_permissions:
 15527 0000225F 3C00                    	CMP	AL,0
 15528                                  	;mov	al,[es:di+5]
 15529 00002261 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15530 00002265 741B                    	JZ	short ioctl_read	; read the byte
 15531                                  
 15532 00002267 08F6                    	or	dh,dh
 15533 00002269 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15534                                  	;mov	al,0Dh
 15535 0000226B B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15536                                  	;jmp	SYS_RET_ERR
 15537 0000226D EBED                    	jmp	short ioctl_error
 15538                                  
 15539                                  ioctl_check_device:
 15540 0000226F A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15541 00002271 74DF                    	jz	short ioctl_bad_funj2
 15542 00002273 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15543                                  					;   device bit!! He can muck with the
 15544                                  					;   others at will.
 15545 00002276 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15546 0000227B 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15547                                  ioctl_ok:
 15548 0000227F E9B9E3                  	jmp	SYS_RET_OK
 15549                                  
 15550                                  ioctl_read:
 15551 00002282 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15552 00002287 30E4                    	XOR	AH,AH
 15553 00002289 A880                    	test	AL,devid_device 	; Should I set high byte
 15554 0000228B 740D                    	JZ	short ioctl_no_high	; no
 15555 0000228D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15556                                  	;les	di,[es:di+7]
 15557 00002292 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15558                                  	;mov	ah,[es:di+5]
 15559 00002296 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15560                                  ioctl_no_high:
 15561 0000229A 89C2                    	MOV	DX,AX
 15562                                  ioctl_set_dx:	; 16/12/2022
 15563 0000229C E8E6E1                  	call	Get_User_Stack
 15564                                  	;mov	[si+6],dx
 15565 0000229F 895406                  	MOV	[SI+user_env.user_DX],DX
 15566                                  	;;jmp	SYS_RET_OK
 15567                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15568                                  ioctl_ok_j:
 15569                                  	; 16/12/2022
 15570 000022A2 E999E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15571                                  	;jmp	short ioctl_ok
 15572                                  	; 26/07/2019
 15573                                  	;jmp	SYS_RET_OK_clc
 15574                                  
 15575                                  ;--------------------------------------------------------------------------
 15576                                  ;
 15577                                  ; IOCTL: AL = 2,3
 15578                                  ;
 15579                                  ; ENTRY: DS = DOSDATA
 15580                                  ;	 SI = user's DS
 15581                                  ;
 15582                                  ;--------------------------------------------------------------------------
 15583                                  
 15584                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15585                                  ioctl_control_string:
 15586 000022A5 E84C43                  	call	SFFromHandle		; ES:DI -> SFT
 15587 000022A8 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15588                                  	; 07/12/2022
 15589                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15590                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15591                                  	; MSDOS 5.0 & MSDOS 6.0
 15592 000022AA 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15593 000022AF 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15594 000022B1 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15595 000022B6 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15596 000022BA 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15597 000022BC E93C01                  	JMP	ioctl_do_string
 15598                                  
 15599                                  ;--------------------------------------------------------------------------
 15600                                  ;
 15601                                  ; IOCTL: AL = 6,7
 15602                                  ;
 15603                                  ; ENTRY: DS = DOSDATA
 15604                                  ;
 15605                                  ;--------------------------------------------------------------------------
 15606                                  
 15607                                  ioctl_status:
 15608 000022BF B401                    	MOV	AH,1
 15609 000022C1 2C06                    	SUB	AL,6			; 6=0,7=1
 15610 000022C3 7402                    	JZ	short ioctl_get_status
 15611 000022C5 B403                    	MOV	AH,3
 15612                                  ioctl_get_status:
 15613 000022C7 50                      	PUSH	AX
 15614 000022C8 E80F13                  	call	GET_IO_SFT
 15615 000022CB 58                      	POP	AX
 15616                                  	;JNC	short DO_IOFUNC
 15617                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15618                                  	; 16/12/2022
 15619 000022CC 728C                    	jc	short ioctl_bad_handle
 15620                                  DO_IOFUNC:
 15621 000022CE E84C21                  	call	IOFUNC
 15622 000022D1 88C4                    	MOV	AH,AL
 15623 000022D3 B0FF                    	MOV	AL,0FFH
 15624                                  	;JNZ	short ioctl_status_ret
 15625                                  	; 29/01/2024
 15626 000022D5 75A8                    	jnz	short ioctl_ok
 15627 000022D7 FEC0                    	INC	AL
 15628                                  ioctl_status_ret:
 15629                                  	;jmp	SYS_RET_OK
 15630                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15631                                  	;jmp	short ioctl_ok_j
 15632                                  	; 16/12/2022
 15633 000022D9 EBA4                    	jmp	short ioctl_ok
 15634                                  
 15635                                  ;--------------------------------------------------------------------------
 15636                                  ;
 15637                                  ; IOCTL: AL = B
 15638                                  ;
 15639                                  ; ENTRY: DS = DOSDATA
 15640                                  ;
 15641                                  ;--------------------------------------------------------------------------
 15642                                  
 15643                                  Set_Retry_Parameters:
 15644                                  	; 09/09/2018
 15645 000022DB 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15646 000022DF 09D2                    	OR	DX,DX			; zero retries not allowed
 15647 000022E1 7475                    	JZ	short ioctl_bad_fun
 15648 000022E3 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15649                                  doneok:
 15650                                  	;jmp	SYS_RET_OK		; Done
 15651                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15652                                  	;jmp	short ioctl_status_ret
 15653                                  	; 16/12/2022
 15654 000022E7 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15655                                  
 15656                                  ;--------------------------------------------------------------------------
 15657                                  ;
 15658                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15659                                  ;
 15660                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15661                                  ;	SI:DX -> Users Device Parameter Table
 15662                                  ;	IOCALL -> IOCTL_Req structure
 15663                                  ;
 15664                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15665                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15666                                  ;	call.
 15667                                  ;
 15668                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15669                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15670                                  ;         return address off the stack if the drive is invalid.
 15671                                  ;
 15672                                  ;--------------------------------------------------------------------------
 15673                                  
 15674                                  query_handle_support:	; Entry point for handles
 15675                                  GENERICIOCTLHANDLE:
 15676 000022E9 E80843                  	call	SFFromHandle		; Get SFT for device.
 15677 000022EC 726F                    	jc	short ioctl_bad_handlej
 15678                                  
 15679                                  	;test	word [es:di+5],8000h
 15680                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15681                                  	;test	byte [es:di+6],80h
 15682 000022EE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15683 000022F3 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15684                                  
 15685 000022F5 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15686                                  	;les	di,[es:di+7]
 15687 000022FA 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15688 000022FE EB0F                    	jmp	short Do_GenIOCTL
 15689                                  
 15690                                  query_device_support:	; Entry point for devices:
 15691                                  GENERICIOCTL:
 15692 00002300 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15693 00002305 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15694 00002308 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15695                                  
 15696 0000230A E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15697 0000230D 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15698                                  
 15699                                  Do_GenIOCTL:
 15700                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15701                                  					; Can device handle Generic IOCTL funcs
 15702                                  	; 09/09/2018
 15703                                  	;test	byte [es:di+4],40h
 15704 0000230F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15705 00002314 7442                    	jz	short ioctl_bad_fun
 15706                                  
 15707                                  	; 17/05/2019 - Retro DOS v4.0
 15708                                  
 15709                                  	; MSDOS 6.0
 15710                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15711 00002316 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15712                                  	;cmp	al,10h
 15713 0000231B 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15714 0000231D 7C0C                    	jl	short SetIOCtlBlock
 15715                                  	
 15716                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15717                                  	;test	byte [es:di+4],80h 
 15718 0000231F 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15719 00002324 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15720                                  	;
 15721                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15722 00002326 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15723                                  
 15724                                  SetIOCtlBlock:
 15725 0000232B 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15726 0000232C 57                      	PUSH	DI			; in DS:SI
 15727                                  					; Setup Generic IOCTL Request Block
 15728                                  	;mov	byte [IOCALL_REQLEN],23
 15729 0000232D C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15730                                  	; 07/09/2018 (MSDOS 3.3)
 15731                                  	;;mov	byte [IOCALL_REQFUNC],19
 15732                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15733                                  	;
 15734 00002332 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15735 00002336 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15736 0000233A 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15737 0000233E 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15738 00002342 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15739 00002346 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15740 0000234A 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15741                                  
 15742                                  ;hkn; IOCALL is in DOSDATA
 15743 0000234E BB[7C03]                	MOV	BX,IOCALL
 15744                                  
 15745 00002351 16                      	PUSH	SS
 15746 00002352 07                      	POP	ES
 15747                                  					; DS:SI -> Device header.
 15748 00002353 5E                      	POP	SI
 15749 00002354 1F                      	POP	DS
 15750                                  	; 10/08/2018
 15751 00002355 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15752                                  
 15753                                  ioctl_bad_fun:
 15754 00002358 B001                    	mov	al, error_invalid_function  ; 1
 15755 0000235A E9E7E2                  	jmp	SYS_RET_ERR	
 15756                                  
 15757                                  ioctl_bad_handlej:
 15758 0000235D E9FAFE                  	jmp	ioctl_bad_handle
 15759                                  
 15760                                  ;---------------------------------------------------------------------------
 15761                                  ;
 15762                                  ; IOCTL: AL = 8
 15763                                  ;
 15764                                  ; ENTRY: DS = DOSDATA
 15765                                  ;
 15766                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15767                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15768                                  ;         return address off the stack if the drive is invalid.
 15769                                  ;
 15770                                  ;-------------------------------------------------------------------------
 15771                                  
 15772                                  	; 30/01/2024
 15773                                  ioctl_rem_media:
 15774                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15775 00002360 E82401                  	CALL	Check_If_Net
 15776 00002363 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15777                                  					;   certainly don't know how to do this
 15778                                  					;   call.
 15779                                  	;test	word [es:di+4],800h
 15780                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15781                                  	;test	byte [es:di+5],8
 15782 00002365 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15783 0000236A 74EC                    	JZ	short ioctl_bad_fun		; NO
 15784                                  
 15785                                  ;hkn; SS override for IOCALL
 15786                                  	; 30/01/2024
 15787                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15788                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15789 0000236C C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15790 00002371 B00D                    	MOV	AL,REMHL  ; 13
 15791 00002373 88DC                    	MOV	AH,BL			; Unit number
 15792                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15793 00002375 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15794 00002378 31C0                    	XOR	AX,AX
 15795                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15796 0000237A A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15797                                  	
 15798 0000237D 06                      	PUSH	ES
 15799 0000237E 1F                      	POP	DS
 15800 0000237F 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15801 00002381 16                      	PUSH	SS
 15802 00002382 07                      	POP	ES
 15803                                  
 15804                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15805 00002383 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15806 00002386 1E                      	push	ds
 15807 00002387 56                      	push	si
 15808 00002388 E86722                  	call	DEVIOCALL2
 15809 0000238B 5E                      	pop	si
 15810 0000238C 1F                      	pop	ds
 15811                                  
 15812                                  ;hkn; SS override
 15813                                  	; 30/01/2024
 15814                                  	; (ds <> ss, ss = DOSDATA segment)
 15815 0000238D 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15816                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15817                                  	; 29/01/2024
 15818 00002391 80E402                  	and	ah,STBUI>>8
 15819 00002394 B109                    	MOV	CL,9
 15820 00002396 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15821                                  ioctl_da_ok_j:	; 11/11/2022
 15822 00002398 E9A0E2                  	jmp	SYS_RET_OK
 15823                                  
 15824                                  ;-------------------------------------------------------------------------
 15825                                  ;
 15826                                  ; IOCTL: AL = 9
 15827                                  ;
 15828                                  ; ENTRY: DS = DOSDATA
 15829                                  ;
 15830                                  ;-------------------------------------------------------------------------
 15831                                  
 15832                                  ioctl_drive_attr:
 15833                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15834 0000239B 88D8                    	mov	al,bl
 15835 0000239D E87846                  	call	GETTHISDRV
 15836 000023A0 723E                    	jc	short ioctl_drv_err
 15837 000023A2 E8B500                  	call	Get_Driver_BL
 15838                                  	; MSDOS 6.0
 15839 000023A5 7239                    	JC	short ioctl_drv_err	; drive not valid
 15840                                  
 15841                                  	;mov	dx,[es:di+4]
 15842 000023A7 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15843                                  					; get device attribute word
 15844 000023AB 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15845                                  
 15846                                  ;hkn; SS override
 15847                                  	;LES	DI,[SS:THISCDS]
 15848                                  	; 30/01/2024
 15849 000023AD C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15850                                  
 15851                                  	;test	word [es:di+43h],8000h
 15852                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15853                                  	;test	byte [es:di+44h],80h
 15854 000023B1 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15855 000023B6 7403                    	JZ	short IOCTLShare
 15856                                  
 15857                                  	;or	dx,1000h ; (MSDOS 3.3)
 15858                                  
 15859                                  ;	Net devices don't return a device attribute word.
 15860                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15861                                  
 15862 000023B8 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15863                                  
 15864                                  IOCTLShare:
 15865                                  	; 30/01/2024
 15866                                  	; ds = ss = DOSDATA segment
 15867                                  	;push	ss
 15868                                  	;pop	ds
 15869                                  
 15870 000023BB BE[BE03]                	MOV	SI,OPENBUF
 15871 000023BE 80C341                  	ADD	BL,"A"	; 41h
 15872 000023C1 881C                    	MOV	[SI],BL
 15873 000023C3 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15874 000023C8 B80003                  	MOV	AX,0300h
 15875 000023CB F8                      	CLC
 15876                                  	;INT	int_IBM
 15877 000023CC CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15878                                  			; DS:SI -> ASCIZ disk device name 
 15879                                  			; (may be full path or only drive
 15880                                  			; specifier--must include the colon)
 15881                                  			; Return: CF clear if absolute disk access allowed
 15882 000023CE 7303                    	JNC	short IOCTLLocal	; Not shared
 15883                                  	;OR	DX,0200H		; Shared, bit 9
 15884                                  	; 17/12/2022
 15885 000023D0 80CE02                  	or	dh,02h
 15886                                  IOCTLLocal:
 15887                                  	;test	word [es:di+43h],1000h
 15888                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15889                                  	;test	byte [es:di+44h],10h
 15890 000023D3 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15891                                  	;JZ	short ioctl_set_DX
 15892                                  	; 16/12/2022
 15893 000023D8 7403                    	jz	short _ioctl_set_DX
 15894                                  	;OR	DX,8000h
 15895                                  	; 17/12/2022
 15896 000023DA 80CE80                  	or	dh,80h
 15897                                  ;ioctl_set_DX:
 15898                                  _ioctl_set_DX:
 15899                                  	; 16/12/2022
 15900 000023DD E9BCFE                  	jmp	ioctl_set_dx
 15901                                  ; 16/12/2022
 15902                                  %if 0	
 15903                                  	call	Get_User_Stack
 15904                                  	MOV	[SI+user_env.user_DX],DX
 15905                                  	;;jmp	SYS_RET_OK
 15906                                  	;; 25/06/2019
 15907                                  	;jmp	SYS_RET_OK_clc
 15908                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15909                                  ioctl_gd_ok_j:
 15910                                  	jmp	short ioctl_da_ok_j
 15911                                  %endif
 15912                                  
 15913                                  ioctl_drv_err:
 15914 000023E0 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15915                                  ioctl_gd_err_j:	; 11/11/2022
 15916 000023E2 E95FE2                  	jmp	SYS_RET_ERR
 15917                                  
 15918                                  ;--------------------------------------------------------------------------
 15919                                  ;
 15920                                  ; IOCTL: AL = A
 15921                                  ;
 15922                                  ; ENTRY: DS = DOSDATA
 15923                                  ;
 15924                                  ;--------------------------------------------------------------------------
 15925                                  
 15926                                  ioctl_handle_redir:
 15927 000023E5 E80C42                  	call	SFFromHandle		; ES:DI -> SFT
 15928 000023E8 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15929 000023EA E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15930                                  
 15931                                  ioctl_got_sft:
 15932                                  	;mov	dx,[es:di+5]
 15933 000023ED 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15934                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15935                                  	; 16/12/2022
 15936 000023F1 EBEA                    	jmp	short _ioctl_set_DX
 15937                                  
 15938                                  	; 16/12/2022
 15939                                  ;ioctl_bad_funj:
 15940                                  	;JMP	ioctl_bad_fun
 15941                                  
 15942                                  ;--------------------------------------------------------------------------
 15943                                  ;
 15944                                  ; IOCTL: AL= 4,5
 15945                                  ;
 15946                                  ; ENTRY: DS = DOSDATA
 15947                                  ;	 SI = user's DS
 15948                                  ;
 15949                                  ;
 15950                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15951                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15952                                  ;         return address off the stack if the drive is invalid.
 15953                                  ;
 15954                                  ;-------------------------------------------------------------------------
 15955                                  
 15956                                  ioctl_get_dev:
 15957 000023F3 E89100                  	CALL	Check_If_Net
 15958                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15959                                  					; certainly don't know how to do this
 15960                                  					; call.
 15961                                  	; 16/12/2022
 15962 000023F6 7403                    	jz	short ioctl_do_string
 15963                                  ioctl_bad_funj:
 15964 000023F8 E95DFF                  	JMP	ioctl_bad_fun
 15965                                  
 15966                                  ioctl_do_string:
 15967                                  	;test	word [es:di+4],4000h
 15968                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15969                                  	;test	byte [es:di+5],40h
 15970 000023FB 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15971 00002400 74F6                    	JZ	short ioctl_bad_funj		; NO
 15972                                  					; assume IOCTL read
 15973 00002402 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15974                                  
 15975 00002407 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15976 00002409 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15977                                  
 15978                                  					; it is an IOCTL write
 15979 0000240B C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15980                                  
 15981                                  ioctl_control_call:
 15982 00002410 B016                    	MOV	AL,DRDWRHL ; 22
 15983                                  ioctl_setup_pkt:
 15984 00002412 88DC                    	MOV	AH,BL			; Unit number
 15985 00002414 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15986 00002417 31C0                    	XOR	AX,AX
 15987 00002419 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15988 0000241C A2[8903]                	MOV	[IOMED],AL
 15989 0000241F 890E[8E03]              	MOV	[IOSCNT],CX
 15990 00002423 8916[8A03]              	MOV	[IOXAD],DX
 15991 00002427 8936[8C03]              	MOV	[IOXAD+2],SI
 15992 0000242B 06                      	PUSH	ES
 15993 0000242C 1F                      	POP	DS
 15994 0000242D 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15995 0000242F 16                      	PUSH	SS
 15996 00002430 07                      	POP	ES
 15997                                  
 15998 00002431 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15999                                  ioctl_do_IO:
 16000 00002434 E8BB21                  	call	DEVIOCALL2
 16001                                  
 16002                                  ;hkn; SS override for IOCALL
 16003                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16004                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16005                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16006 00002437 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16007 0000243D 7507                    	JNZ	short ioctl_string_err
 16008                                  
 16009                                  ;hkn; SS override
 16010 0000243F 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16011                                  	; 16/12/2022
 16012 00002443 E9F5E1                  	jmp	SYS_RET_OK
 16013                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16014                                  	;jmp	short ioctl_gd_ok_j
 16015                                  
 16016                                  ioctl_string_err:
 16017 00002446 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16018                                  device_err:
 16019 0000244B 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16020 0000244F 89F8                    	MOV	AX,DI
 16021 00002451 E82D30                  	call	SET_I24_EXTENDED_ERROR
 16022                                  
 16023                                  ;hkn; use SS override
 16024                                  ;hkn;	mov	ax,[CS:EXTERR]
 16025 00002454 36A1[2403]              	mov	ax,[SS:EXTERR]
 16026                                  	;jmp	SYS_RET_ERR
 16027                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16028 00002458 EB88                    	jmp	short ioctl_gd_err_j
 16029                                  
 16030                                  ; 17/05/2019 - Retro DOS v4.0
 16031                                  
 16032                                  ;--------------------------------------------------------------------------
 16033                                  ; Proc name : Get_Driver_BL
 16034                                  ;
 16035                                  ;	DS is DOSDATA
 16036                                  ;	BL is drive number (0=default)
 16037                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16038                                  ;	No regs modified
 16039                                  ;
 16040                                  ;---------------------------------------------------------------------------
 16041                                  
 16042                                  	; 30/01/2024
 16043                                  Get_Driver_BL:
 16044 0000245A 50                      	PUSH	AX
 16045 0000245B 88D8                    	MOV	AL,BL			; Drive
 16046 0000245D E8B845                  	call	GETTHISDRV
 16047 00002460 7223                    	jc	short ioctl_bad_drv
 16048 00002462 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16049 00002464 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16050 00002469 C43E[A205]              	LES	DI,[THISCDS]
 16051                                  	;test	word [es:di+43h],8000h
 16052                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16053                                  	;test	byte [es:di+44h],80h
 16054 0000246D 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16055                                  	;les	di,[es:di+45h]
 16056 00002472 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16057 00002476 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16058 00002478 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16059                                  	;mov	bl,[es:di+1]
 16060 0000247D 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16061                                  	;les	di,[es:di+13h]
 16062 00002481 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16063                                  got_dev_ptr:
 16064                                  	; 30/01/2024
 16065                                  	; cf=0
 16066                                  	;CLC
 16067                                  ioctl_bad_drv:
 16068 00002485 58                      	POP	AX
 16069 00002486 C3                      	retn
 16070                                  
 16071                                  ;-------------------------------------------------------------------------
 16072                                  ; Proc Name : Check_If_Net:
 16073                                  ;
 16074                                  ;
 16075                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16076                                  ; If no device is found, the return address is popped off the stack, and a
 16077                                  ; jump is made to ioctl_drv_err.
 16078                                  ;
 16079                                  ; On Entry:
 16080                                  ; Registers same as those for Get_Driver_BL
 16081                                  ;
 16082                                  ; On Exit:
 16083                                  ; ZERO flag	- set if not a net device
 16084                                  ;		- reset if net device
 16085                                  ; ES:DI -> the device
 16086                                  ;
 16087                                  ;
 16088                                  ; BUGBUG: This function assumes the following stack setup on entry
 16089                                  ;
 16090                                  ;	  SP+2 -> Error return address
 16091                                  ;	  SP   -> Normal return address
 16092                                  ;
 16093                                  ;-------------------------------------------------------------------------
 16094                                  
 16095                                  Check_If_Net:
 16096                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16097 00002487 E8D0FF                  	CALL	Get_Driver_BL
 16098 0000248A 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16099                                  
 16100                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16101                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16102                                  %if 0
 16103                                  	;;;
 16104                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16105                                  	PUSH	ES
 16106                                  	PUSH	DI
 16107                                  	LES	DI,[THISCDS]
 16108                                  	;test	word [es:di+43h],8000h
 16109                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16110                                  	;test	byte [es:di+44h],80h
 16111                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16112                                  	POP	DI
 16113                                  	POP	ES
 16114                                  	;;;
 16115                                  %endif
 16116 0000248C C3                      	retn
 16117                                  
 16118                                  ioctl_drv_err_pop:
 16119 0000248D 58                      	pop	ax			; pop off return address
 16120 0000248E E94FFF                  	jmp	ioctl_drv_err
 16121                                  
 16122                                  ioctl_bad_funj3:
 16123 00002491 E9C4FE                  	jmp	ioctl_bad_fun
 16124                                  
 16125                                  ioctl_string_errj:
 16126 00002494 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16127                                  
 16128                                  ;--------------------------------------------------------------------------
 16129                                  ;
 16130                                  ; IOCTL: AL = E, F
 16131                                  ;
 16132                                  ; ENTRY: DS = DOSDATA
 16133                                  ;
 16134                                  ;
 16135                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16136                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16137                                  ;         return address off the stack if the drive is invalid.
 16138                                  ;
 16139                                  ;--------------------------------------------------------------------------
 16140                                  
 16141                                  ioctl_drive_owner:
 16142                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16143 00002496 E8EEFF                  	Call	Check_If_Net
 16144 00002499 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16145                                  					;   certainly don't know how to do this
 16146                                  					;   call.
 16147                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16148                                  	; 09/09/2018
 16149                                  	;test	byte [es:di+4],40h
 16150 0000249B 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16151 000024A0 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16152                                  	;mov	byte [IOCALL_REQFUNC],23
 16153 000024A2 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16154 000024A7 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16155 000024A9 7405                    	jz	short GetOwner
 16156                                  SetOwner:
 16157 000024AB C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16158                                  GetOwner:
 16159 000024B0 B00D                    	MOV	AL,OWNHL ; 13
 16160 000024B2 88DC                    	MOV	AH,BL			; Unit number
 16161 000024B4 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16162 000024B7 31C0                    	XOR	AX,AX
 16163 000024B9 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16164 000024BC 06                      	PUSH	ES
 16165 000024BD 1F                      	POP	DS
 16166 000024BE 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16167 000024C0 16                      	PUSH	SS
 16168 000024C1 07                      	POP	ES
 16169 000024C2 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16170 000024C5 1E                      	push	ds
 16171 000024C6 56                      	push	si
 16172 000024C7 E82821                  	call	DEVIOCALL2
 16173 000024CA 5E                      	pop	si
 16174 000024CB 1F                      	pop	ds
 16175                                  ;hkn; SS override
 16176                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16177                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16178 000024CC 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16179 000024D2 75C0                    	jnz	short ioctl_string_errj
 16180 000024D4 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16181                                  					; owner returned is 1-based.
 16182 000024D8 E960E1                  	jmp	SYS_RET_OK
 16183                                  
 16184                                  ;============================================================================
 16185                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16186                                  ;============================================================================
 16187                                  ; 07/08/2018 - Retro DOS v3.0
 16188                                  ; 17/05/2019 - Retro DOS v4.0
 16189                                  
 16190                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16191                                  ;	NAME	DOS_DELETE
 16192                                  
 16193                                  ;
 16194                                  ;	Microsoft Confidential
 16195                                  ;	Copyright (C) Microsoft Corporation 1991
 16196                                  ;	All Rights Reserved.
 16197                                  ;
 16198                                  
 16199                                  ;**	DELETE.ASM - Low level routine for deleting files
 16200                                  ;----------------------------------------------------------------------------
 16201                                  ;		DOS_DELETE
 16202                                  ;		REN_DEL_Check
 16203                                  ;		FastOpen_Delete	       ; DOS 3.3
 16204                                  ;		FastOpen_Update	       ; DOS 3.3
 16205                                  
 16206                                  ;   Revision history:
 16207                                  ;
 16208                                  ;   A000  version 4.00	Jan. 1988
 16209                                  ;   A001  Fastopen Rename fix	April 1989
 16210                                  
 16211                                  ;Installed = TRUE
 16212                                  
 16213                                  ;	i_need	NoSetDir,BYTE
 16214                                  ;	i_need	Creating,BYTE
 16215                                  ;	i_need	DELALL,BYTE
 16216                                  ;	i_need	THISDPB,DWORD
 16217                                  ;	i_need	THISSFT,DWORD
 16218                                  ;	i_need	THISCDS,DWORD
 16219                                  ;	i_need	CURBUF,DWORD
 16220                                  ;	i_need	ATTRIB,BYTE
 16221                                  ;	i_need	SATTRIB,BYTE
 16222                                  ;	i_need	WFP_START,WORD
 16223                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16224                                  ;	i_need	NAME1,BYTE			 ;BN001
 16225                                  ;	i_need	FoundDel,BYTE
 16226                                  ;	i_need	AUXSTACK,BYTE
 16227                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16228                                  ;	i_need	JShare,DWORD
 16229                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16230                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16231                                  ;
 16232                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16233                                  ;
 16234                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16235                                  ;	i_need	DMAADD,DWORD
 16236                                  ;	i_need	RENAMEDMA,BYTE
 16237                                  
 16238                                  ;----------------------------------------------------------------------------
 16239                                  ;
 16240                                  ; Procedure Name : DOS_DELETE
 16241                                  ;
 16242                                  ; Inputs:
 16243                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16244                                  ;		terminated)
 16245                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16246                                  ;		( = -1 if current dir not involved, else
 16247                                  ;		 Points to first char after last "/" of current dir part)
 16248                                  ;	[THISCDS] Points to CDS being used
 16249                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16250                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16251                                  ; Function:
 16252                                  ;	Delete the specified file(s)
 16253                                  ; Outputs:
 16254                                  ;	CARRY CLEAR
 16255                                  ;		OK
 16256                                  ;	CARRY SET
 16257                                  ;	    AX is error code
 16258                                  ;		error_file_not_found
 16259                                  ;			Last element of path not found
 16260                                  ;		error_path_not_found
 16261                                  ;			Bad path (not in curr dir part if present)
 16262                                  ;		error_bad_curr_dir
 16263                                  ;			Bad path in current directory part of path
 16264                                  ;		error_access_denied
 16265                                  ;			Attempt to delete device or directory
 16266                                  ;		***error_sharing_violation***
 16267                                  ;			Deny both access required, generates an INT 24.
 16268                                  ;			This error is NOT returned. The INT 24H is generated,
 16269                                  ;			  and the file is ignored (not deleted). Delete will
 16270                                  ;			  simply continue on looking for more files.
 16271                                  ;			  Carry will NOT be set in this case.
 16272                                  ; DS preserved, others destroyed
 16273                                  ;
 16274                                  ;----------------------------------------------------------------------------
 16275                                  
 16276                                  FILEFOUND   equ 01h
 16277                                  FILEDELETED equ 10h
 16278                                  
 16279                                  
 16280                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16281                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16282                                  
 16283                                  	; 30/01/2024
 16284                                  
 16285                                  DOS_DELETE:
 16286                                  
 16287                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16288                                  ;hkn; appropriately at this point.
 16289                                  
 16290 000024DB E872ED                  	call	TestNet
 16291 000024DE 7306                    	JNC	short LOCAL_DELETE
 16292                                  
 16293                                  ;IF NOT Installed
 16294                                  ;	transfer NET_DELETE
 16295                                  ;ELSE
 16296                                  	;MOV	AX,(MultNET SHL 8) | 19
 16297                                  	;INT	2FH
 16298                                  	;return
 16299                                  
 16300 000024E0 B81311                  	mov	ax,1113h
 16301 000024E3 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16302                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16303                                  			;		fully-qualified filename in DOS CS
 16304                                  			; SDA CDS pointer -> current directory structure for drive with file
 16305                                  			; Return: CF set on error
 16306 000024E5 C3                      	retn
 16307                                  ;ENDIF
 16308                                  
 16309                                  LOCAL_DELETE:
 16310 000024E6 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16311 000024EB E824EE                  	call	ECritDisk
 16312                                  	;mov	word [CREATING],0E500h
 16313 000024EE C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16314 000024F4 8B36[B205]              	MOV	SI,[WFP_START]
 16315                                  SKPNUL:
 16316 000024F8 AC                      	LODSB
 16317 000024F9 08C0                    	OR	AL,AL
 16318 000024FB 75FB                    	JNZ	short SKPNUL		; go to end
 16319 000024FD 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16320 00002500 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16321 00002504 7506                    	JNZ	short TEST_QUEST
 16322 00002506 807C022A                	CMP	BYTE [SI+2],"*"
 16323 0000250A 741F                    	JZ	short CHECK_ATTS
 16324                                  TEST_QUEST:
 16325 0000250C 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16326 0000250F 87FE                    	XCHG	DI,SI
 16327                                  
 16328 00002511 16                      	push	ss
 16329                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16330 00002512 07                      	pop	es ; 17/05/2019
 16331                                  
 16332 00002513 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16333 00002516 B90400                  	MOV	CX,4		; four sets of "??"
 16334 00002519 F3AF                    	REPE	SCASW
 16335 0000251B 751C                    	JNZ	short NOT_ALL
 16336 0000251D 87FE                    	XCHG	DI,SI
 16337 0000251F AD                      	LODSW
 16338 00002520 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16339 00002523 7514                    	JNZ	short NOT_ALL
 16340 00002525 AD                      	LODSW
 16341 00002526 3D3F3F                  	CMP	AX,"??"
 16342 00002529 750E                    	JNZ	short NOT_ALL
 16343                                  CHECK_ATTS:
 16344 0000252B A0[6D05]                	MOV	AL,[SATTRIB]
 16345                                  	;and	al,1Fh
 16346 0000252E 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16347                                  					; Look only at hidden bits
 16348                                  	;cmp	al,1Fh
 16349 00002530 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16350                                  					; All must be set
 16351 00002532 7505                    	JNZ	short NOT_ALL
 16352                                  
 16353                                  ; NOTE WARNING DANGER-----
 16354                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16355                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16356                                  
 16357 00002534 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16358                                  NOT_ALL:
 16359 00002539 C606[4C03]01            	MOV	byte [NoSetDir],1
 16360 0000253E E86519                  	call	GetPathNoSet
 16361 00002541 7312                    	JNC	short Del_found
 16362 00002543 750B                    	JNZ	short _bad_path
 16363 00002545 08C9                    	OR	CL,CL
 16364 00002547 7407                    	JZ	short _bad_path
 16365                                  No_file:
 16366 00002549 B80200                  	MOV	AX,error_file_not_found
 16367                                  ErrorReturn:
 16368 0000254C F9                      	STC
 16369                                  	;call	LCritDisk
 16370                                  	;retn
 16371                                  	; 18/12/2022
 16372 0000254D E9DDED                  	jmp	LCritDisk
 16373                                  
 16374                                  _bad_path:
 16375 00002550 B80300                  	MOV	AX,error_path_not_found
 16376 00002553 EBF7                    	JMP	short ErrorReturn
 16377                                  
 16378                                  Del_found:
 16379 00002555 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16380 00002557 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16381 0000255C 7405                    	JZ	short NOT_DIR
 16382                                  Del_access_err:
 16383 0000255E B80500                  	MOV	AX,error_access_denied
 16384 00002561 EBE9                    	JMP	short ErrorReturn
 16385                                  
 16386                                  NOT_DIR:
 16387 00002563 08E4                    	OR	AH,AH			; Check if device name
 16388 00002565 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16389                                  
 16390                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16391                                  
 16392                                  DELFILE:
 16393 00002567 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16394                                  
 16395                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16396                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16397                                  
 16398 0000256C 1E                      	PUSH	DS
 16399 0000256D 8A26[7F05]              	MOV	AH,[DELALL]
 16400 00002571 C53E[E205]              	LDS	DI,[CURBUF]
 16401                                  	
 16402                                  ;hkn; SS override
 16403 00002575 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16404 0000257B 7509                    	JNZ	short DoDelete		; yes
 16405                                  
 16406 0000257D F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16407 00002581 7403                    	JZ	short DoDelete		; not read only
 16408                                  
 16409                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16410                                  Skip_it:
 16411 00002583 1F                      	POP	DS
 16412 00002584 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16413                                  
 16414                                  DoDelete:
 16415 00002586 E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16416                                  	;JNC	short DEL_SHARE_OK
 16417                                  	;POP	DS
 16418                                  	;JMP	SHORT DELNXT		; Skip it
 16419                                  	; 30/01/2024
 16420 00002589 72F8                    	jc	short Skip_it
 16421                                  
 16422                                  DEL_SHARE_OK:
 16423                                  	; 17/05/2019 - Retro DOS v4.0
 16424                                  	; MSDOS 6.0
 16425                                  	;test	byte [di+5],40h
 16426 0000258B F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16427                                  					;LB. if already dirty		  ;AN000;
 16428 0000258F 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16429 00002591 E83F35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16430                                  	;or	byte [di+5],40h
 16431 00002594 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16432                                  yesdirty:
 16433 00002598 8827                    	mov	[bx],ah 
 16434                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16435 0000259A 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16436 0000259C 1F                      	POP	DS
 16437 0000259D 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16438                                  
 16439 000025A2 83FB02                  	CMP	BX,2
 16440 000025A5 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16441                                  	;cmp	bx,[es:bp+0Dh]
 16442 000025A7 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16443 000025AB 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16444                                  
 16445 000025AD E89128                  	call	RELEASE 		; Free file data
 16446 000025B0 7252                    	JC	short No_fileJ
 16447                                  
 16448                                  ; DOS 3.3  FastOpen
 16449                                  
 16450 000025B2 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16451                                  
 16452                                  ; DOS 3.3  FastOpen
 16453                                  
 16454                                  DELNXT:
 16455 000025B5 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16456 000025B9 E85518                  	call	GETENTRY		; Registers need to be reset
 16457 000025BC 7246                    	JC	short No_fileJ
 16458 000025BE E88E17                  	call	NEXTENT
 16459 000025C1 73A4                    	JNC	short DELFILE
 16460 000025C3 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16461                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16462                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16463                                  	;;mov	al,[es:bp+0]
 16464                                  	; 15/12/2022
 16465 000025C7 268A4600                	MOV	AL,[ES:BP]
 16466 000025CB E80034                  	call	FLUSHBUF
 16467 000025CE 7234                    	JC	short No_fileJ
 16468                                  ;
 16469                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16470                                  ;
 16471                                  ;   not found not deleted		file not found
 16472                                  ;   not found	  deleted		*** impossible ***
 16473                                  ;	found not deleted		access denied (read-only)
 16474                                  ;	found	  deleted		no error
 16475                                  ;
 16476 000025D0 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16477 000025D5 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16478                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16479                                  ; and to force the DOS to issue a media check.
 16480 000025D7 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16481 000025DC 741C                    	jz	short No_Set_Flag
 16482 000025DE 50                      	PUSH	AX
 16483 000025DF 06                      	PUSH	ES
 16484 000025E0 57                      	PUSH	DI
 16485 000025E1 C43E[A205]              	LES	DI,[THISCDS]
 16486 000025E5 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16487 000025E8 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16488 000025EB 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16489                                  	
 16490                                  	; MSDOS 6.0
 16491 000025EF 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16492 000025F1 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16493                                  	 
 16494 000025F4 E85E30                  	call	FATREAD_CDS		; force media check
 16495 000025F7 5F                      	POP	DI
 16496 000025F8 07                      	POP	ES
 16497 000025F9 58                      	POP	AX
 16498                                  No_Set_Flag:
 16499                                  	;call	LCritDisk		; carry is clear
 16500                                  	;retn
 16501                                  	; 18/12/2022
 16502 000025FA E930ED                  	jmp	LCritDisk
 16503                                  DelError:
 16504 000025FD F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16505 00002602 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16506                                  No_fileJ:
 16507 00002604 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16508                                  Del_access_errJ:
 16509 00002607 E954FF                  	JMP	Del_access_err ; 10/08/2018
 16510                                  
 16511                                  ; 08/08/2018 - Retro DOS v3.0
 16512                                  
 16513                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16514                                  ;---------------------------------------------------------------------------
 16515                                  ; Procedure Name : REN_DEL_Check
 16516                                  ;
 16517                                  ; Inputs:
 16518                                  ;	[THISDPB] set
 16519                                  ;	[CURBUF+2]:BX points to entry
 16520                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16521                                  ;	[WFP_Start] points to name
 16522                                  ; Function:
 16523                                  ;	Check for Exclusive access on given file.
 16524                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16525                                  ; Outputs:
 16526                                  ;	ES:BP = [THISDPB]
 16527                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16528                                  ;		last element will be loaded from the directory entry.  This is
 16529                                  ;		so the name given to the sharer doesn't have any meta chars in
 16530                                  ;		it.
 16531                                  ;	Carry set if sharing violation, INT 24H generated
 16532                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16533                                  ;		This is because input AX is preserved.
 16534                                  ;		Caller must set the error if needed.
 16535                                  ;	Carry clear
 16536                                  ;		OK
 16537                                  ; AX,DS,BX,SI,DI preserved
 16538                                  ;---------------------------------------------------------------------------
 16539                                  
 16540                                  REN_DEL_Check:
 16541                                  
 16542 0000260A 1E                      	PUSH	DS
 16543 0000260B 57                      	PUSH	DI
 16544 0000260C 50                      	PUSH	AX
 16545 0000260D 53                      	PUSH	BX
 16546 0000260E 56                      	PUSH	SI		; Save CURBUF pointers
 16547                                  	
 16548 0000260F 16                      	push	ss
 16549 00002610 07                      	pop	es
 16550                                  
 16551                                  ;hkn; context ES will assume ES to DOSDATA
 16552                                  ;hkn; ASSUME	ES:DOSGROUP
 16553                                  
 16554                                  ;hkn; SS override
 16555 00002611 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16556 00002616 89DE                    	MOV	SI,BX
 16557                                  
 16558                                  ;hkn; SS override
 16559 00002618 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16560 0000261D 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16561                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16562                                  	; 31/01/2024
 16563 0000261F 43                      	inc	bx
 16564 00002620 43                      	inc	bx
 16565 00002621 E8CCEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16566 00002624 49                      	DEC	CX		; Don't include nul in count
 16567 00002625 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16568 00002627 E8A846                  	call	SkipBack	; Back up one element
 16569 0000262A 47                      	INC	DI		; Point to start of last element
 16570                                  
 16571                                  	; 17/05/2019 - Retro DOS v4.0
 16572                                  ;hkn; SS override
 16573                                  	; MSDOS 6.0
 16574 0000262B 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16575                                  	;
 16576 00002630 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16577 00002633 5E                      	POP	SI		; Get back entry pointers
 16578 00002634 5B                      	POP	BX
 16579 00002635 53                      	PUSH	BX
 16580 00002636 56                      	PUSH	SI		; Back on stack
 16581                                  	
 16582 00002637 16                      	push	ss
 16583 00002638 1F                      	pop	ds
 16584                                  
 16585                                  ;hkn; context DS will assume ES to DOSDATA
 16586                                  ;hkn; ASSUME	DS:DOSGROUP
 16587                                  
 16588                                  ; Close the file if possible by us.
 16589                                  ;
 16590                                  ;if installed
 16591 00002639 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16592                                  ;else
 16593                                  ;	Call	ShCloseFile
 16594                                  ;endif
 16595 0000263D 8C1E[A005]              	MOV	[THISSFT+2],DS
 16596                                  
 16597                                  ;hkn; AUXSTACK is in DOSDATA
 16598 00002641 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16599                                  				; Scratch space
 16600 00002647 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16601 00002649 E87F24                  	call	DOOPEN		; Fill in SFT for share check
 16602 0000264C C43E[9E05]              	LES	DI,[THISSFT]
 16603                                  	;mov	word [es:di+2],10h
 16604 00002650 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16605                                  				; requires exclusive access
 16606                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16607 00002656 26C7050100              	mov	word [ES:DI],1
 16608 0000265B E8984C                  	call	ShareEnter
 16609 0000265E 720D                    	jc	short CheckDone
 16610 00002660 C43E[9E05]              	LES	DI,[THISSFT]
 16611                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16612 00002664 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16613                                  	
 16614 00002669 E8854C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16615 0000266C F8                      	CLC
 16616                                  CheckDone:
 16617 0000266D C42E[8A05]              	LES	BP,[THISDPB]
 16618 00002671 5E                      	POP	SI
 16619 00002672 5B                      	POP	BX
 16620 00002673 58                      	POP	AX
 16621 00002674 5F                      	POP	DI
 16622 00002675 1F                      	POP	DS
 16623 00002676 C3                      	retn
 16624                                  
 16625                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16626                                  ;---------------------------------------------------------------------------
 16627                                  ; Procedure Name : FastOpen_Delete
 16628                                  ; Inputs:
 16629                                  ;	None
 16630                                  ; Function:
 16631                                  ;	Call FastOpen to delete the dir info.
 16632                                  ; Outputs:
 16633                                  ;	None
 16634                                  ;---------------------------------------------------------------------------
 16635                                  
 16636                                  	; 31/01/2024
 16637                                  
 16638                                  FastOpen_Delete:
 16639 00002677 9C                      	PUSHF			; save flag
 16640 00002678 56                      	PUSH	SI		; save registers
 16641 00002679 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16642 0000267A 53                      	PUSH	BX
 16643 0000267B 50                      	PUSH	AX
 16644                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16645                                  ;hkn; SS override
 16646                                  	; 17/05/2019 - Retro DOS v4.0
 16647                                  	; MSDOS 6.0
 16648 0000267C 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16649                                  	
 16650 00002681 B003                    	MOV	AL,FONC_delete	; al = 3
 16651                                  
 16652                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16653                                  %if 0 
 16654                                  fastinvoke:
 16655                                  ;hkn; FastTable is in DOSDATA
 16656                                  	MOV	BX,FastTable+2
 16657                                  	CALL	far [BX]	; call fastopen
 16658                                  	POP	AX		; restore registers
 16659                                  	POP	BX
 16660                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16661                                  	POP	SI
 16662                                  	POPF			; restore flag
 16663                                  	retn
 16664                                  %else
 16665 00002683 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16666                                  %endif
 16667                                  
 16668                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16669                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16670                                  
 16671                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16672                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16673                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16674                                  
 16675                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16676                                  ;---------------------------------------------------------------------------
 16677                                  ; PROCEDURE Name : FastOpen_Rename
 16678                                  ;
 16679                                  ; Inputs:
 16680                                  ;	 REN_WFP   = Path Name
 16681                                  ;	 NAME1	   = New Name
 16682                                  ; Function:
 16683                                  ;	Call FastOpen to rename the dir entry in the cache
 16684                                  ; Outputs:
 16685                                  ;	None
 16686                                  ;---------------------------------------------------------------------------
 16687                                  
 16688                                  FastOpen_Rename:
 16689                                  	; 17/05/2019 - Retro DOS v4.0
 16690                                  	; 08/08/2018 - Retro DOS v3.0
 16691                                  	; MSDOS 6.0
 16692 00002685 9C                      	PUSHF			;AN001 save flag
 16693 00002686 56                      	PUSH	SI		;AN001 save registers
 16694 00002687 57                      	PUSH	DI		;AN001
 16695 00002688 53                      	PUSH	BX		;AN001
 16696 00002689 50                      	PUSH	AX		;AN001
 16697                                  	;
 16698                                  ;hkn; SS override
 16699 0000268A 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16700                                  
 16701                                  ;hkn; NAME1 is in DOSDATA
 16702 0000268F BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16703                                  	;mov	al,6
 16704 00002692 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16705                                  
 16706                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16707                                  	
 16708                                  ;hkn; FastTable is in DOSDATA
 16709 00002694 BB[320D]                	MOV	BX,FastTable+2
 16710 00002697 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16711                                  	
 16712 00002699 58                      	POP	AX		; restore registers  ;AN001
 16713 0000269A 5B                      	POP	BX				     ;AN001
 16714 0000269B 5F                      	POP	DI				     ;AN001
 16715 0000269C 5E                      	POP	SI				     ;AN001
 16716 0000269D 9D                      	POPF			; restore flag	     ;AN001
 16717 0000269E C3                      	retn					     ;AN001
 16718                                  
 16719                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16720                                  ;---------------------------------------------------------------------------
 16721                                  ; Procedure Name : FastOpen_Update
 16722                                  ;
 16723                                  ; Inputs:
 16724                                  ;	DL     drive number (A=0,B=1,,,)
 16725                                  ;	CX     first cluster #
 16726                                  ;	AH     0 updates dir entry
 16727                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16728                                  ;	ES:DI  directory entry
 16729                                  ; Function:
 16730                                  ;	Call FastOpen to update the dir info.
 16731                                  ; Outputs:
 16732                                  ;	None
 16733                                  ;---------------------------------------------------------------------------
 16734                                  
 16735                                  FastOpen_Update:
 16736 0000269F 9C                      	PUSHF			; save flag
 16737 000026A0 56                      	PUSH	SI
 16738 000026A1 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16739 000026A2 53                      	PUSH	BX		; save regs
 16740 000026A3 50                      	PUSH	AX
 16741 000026A4 B004                    	MOV	AL,FONC_update	; al = 4
 16742 000026A6 EBEC                    	JMP	short fastinvoke
 16743                                  
 16744                                  	; 17/05/2019
 16745                                  
 16746                                  	; MSDOS 6.0
 16747                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16748                                  ;---------------------------------------------------------------------------
 16749                                  Fast_Dispatch:
 16750                                  ;hkn; FastTable is in DOSDATA
 16751 000026A8 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16752                                  ;hkn; use SS override
 16753 000026AB 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16754 000026AE C3                      	retn
 16755                                  
 16756                                  ;============================================================================
 16757                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16758                                  ;============================================================================
 16759                                  ; 08/08/2018 - Retro DOS v3.0
 16760                                  ; 17/05/2019 - Retro DOS v4.0
 16761                                  
 16762                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16763                                  ;	NAME	DOS_RENAME
 16764                                  
 16765                                  ;**	Low level routine for renaming files
 16766                                  ;----------------------------------------------------------------------------
 16767                                  ;	DOS_RENAME
 16768                                  ;
 16769                                  ;	Modification history:
 16770                                  ;
 16771                                  ;	    Created: ARR 30 March 1983
 16772                                  
 16773                                  ;----------------------------------------------------------------------------
 16774                                  ;
 16775                                  ; Procedure Name : DOS_RENAME
 16776                                  ;
 16777                                  ; Inputs:
 16778                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16779                                  ;		chars, NUL terminated)
 16780                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16781                                  ;		( = -1 if current dir not involved, else
 16782                                  ;		 Points to first char after last "/" of current dir part)
 16783                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16784                                  ;		chars, NUL terminated)
 16785                                  ;	[THISCDS] Points to CDS being used
 16786                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16787                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16788                                  ; Function:
 16789                                  ;	Rename the specified file(s)
 16790                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16791                                  ; Outputs:
 16792                                  ;	CARRY CLEAR
 16793                                  ;	    OK
 16794                                  ;	CARRY SET
 16795                                  ;	    AX is error code
 16796                                  ;		error_file_not_found
 16797                                  ;			No match for source, or dest path invalid
 16798                                  ;		error_not_same_device
 16799                                  ;			Source and dest are on different devices
 16800                                  ;		error_access_denied
 16801                                  ;			Directory specified (not simple rename),
 16802                                  ;			Device name given, Destination exists.
 16803                                  ;			NOTE: In third case some renames may have
 16804                                  ;			 been done if metas.
 16805                                  ;		error_path_not_found
 16806                                  ;			Bad path (not in curr dir part if present)
 16807                                  ;			SOURCE ONLY
 16808                                  ;		error_bad_curr_dir
 16809                                  ;			Bad path in current directory part of path
 16810                                  ;			SOURCE ONLY
 16811                                  ;		error_sharing_violation
 16812                                  ;			Deny both access required, generates an INT 24.
 16813                                  ; DS preserved, others destroyed
 16814                                  ;
 16815                                  ;----------------------------------------------------------------------------
 16816                                  
 16817                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16818                                  
 16819                                  	; 31/01/2024
 16820                                  
 16821                                  DOS_RENAME:
 16822                                  
 16823                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16824                                  ;hkn; at this point to DOSDATA.
 16825                                  
 16826 000026AF E89EEB                  	call	TestNet
 16827 000026B2 7306                    	JNC	short LOCAL_RENAME
 16828                                  
 16829                                  ;IF NOT Installed
 16830                                  ;	transfer NET_RENAME
 16831                                  ;ELSE
 16832                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16833                                  	;INT	2FH
 16834                                  	;return
 16835                                  
 16836 000026B4 B81111                  	mov     ax, 1111h
 16837 000026B7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16838                                  			; SS = DS = DOS CS, 
 16839                                  			; SDA first filename pointer = offset of fully-qualified old name
 16840                                  			; SDA CDS pointer -> current directory
 16841                                  			; Return: CF set on error
 16842 000026B9 C3                      	retn
 16843                                  ;ENDIF
 16844                                  
 16845                                  LOCAL_RENAME:
 16846 000026BA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16847 000026BF 8B36[B205]              	MOV	SI,[WFP_START]
 16848 000026C3 8B3E[B405]              	MOV	DI,[REN_WFP]
 16849 000026C7 8A04                    	MOV	AL,[SI]
 16850 000026C9 8A25                    	MOV	AH,[DI]
 16851 000026CB 0D2020                  	OR	AX,2020H		; Lower case
 16852 000026CE 38E0                    	CMP	AL,AH
 16853 000026D0 7405                    	JZ	short SAMEDRV
 16854 000026D2 B81100                  	MOV	AX,error_not_same_device ; 11h
 16855 000026D5 F9                      	STC
 16856 000026D6 C3                      	retn
 16857                                  
 16858                                  SAMEDRV:
 16859 000026D7 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16860 000026DB FF36[2C03]              	PUSH	WORD [DMAADD]
 16861 000026DF 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16862                                  
 16863                                  ;hkn; RENAMEDMA is in DOSDATA
 16864 000026E3 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16865 000026E9 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16866 000026EE E821EC                  	call	ECritDisk
 16867 000026F1 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16868                                  					;    points to entry
 16869 000026F4 7314                    	JNC	short Check_Dev
 16870 000026F6 83F812                  	CMP	AX,error_no_more_files ; 12h
 16871 000026F9 7503                    	JNZ	short GOTERR
 16872 000026FB B80200                  	MOV	AX,error_file_not_found ; 2
 16873                                  GOTERR:
 16874 000026FE F9                      	STC
 16875                                  RENAME_POP:
 16876 000026FF 8F06[2C03]              	POP	WORD [DMAADD]
 16877 00002703 8F06[2E03]              	POP	WORD [DMAADD+2]
 16878                                  	;call	LCritDisk
 16879                                  	;retn
 16880                                  	; 16/12/2022
 16881 00002707 E923EC                  	jmp	LCritDisk
 16882                                  
 16883                                  Check_Dev:
 16884                                  	; 17/05/2019 - Retro DOS v4.0
 16885                                  	;mov	ax,5
 16886 0000270A B80500                  	MOV	AX,error_access_denied	; Assume error
 16887                                  	
 16888                                  	; MSDOS 6.0
 16889 0000270D 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16890 0000270E C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16891                                  	;add	si,21
 16892 00002712 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16893                                  	;test	byte [si+11],10h
 16894 00002715 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16895 00002719 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16896 0000271B 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16897 0000271F E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16898                                  notdir:
 16899 00002722 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16900 00002723 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16901                                  
 16902                                  	; MSDOS 3.3 & MSDOS 6.0
 16903 00002725 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16904 0000272A 75D2                    	JNZ	short GOTERR
 16905                                  
 16906                                  ; At this point a source has been found. There is search continuation info (a
 16907                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16908                                  ; directory entry found.
 16909                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16910                                  ; throughout the RENAME since it is known at this point that the source and
 16911                                  ; destination are both on the same device.
 16912                                  ; [SATTRIB] is also set.
 16913                                  
 16914 0000272C 89DE                    	MOV	SI,BX
 16915                                  	;add	si,26
 16916 0000272E 83C61A                  	ADD	SI,dir_entry.dir_first
 16917 00002731 E8D6FE                  	call	REN_DEL_Check
 16918 00002734 7305                    	JNC	short REN_OK1
 16919 00002736 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16920 00002739 EBC4                    	JMP	short RENAME_POP
 16921                                  
 16922                                  ;------------------------------------------------------------------------------
 16923                                  ; Check if the source is a file or directory. If file, delete the entry
 16924                                  ; from the Fastopen cache. If directory, rename it later
 16925                                  ;------------------------------------------------------------------------------
 16926                                  
 16927                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16928                                  	; MSDOS 6.0
 16929                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16930                                  	;PUSH	SI
 16931 0000273B C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16932                                  	;add	si,21
 16933 0000273F 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16934                                  	;test	byte [si+11],10h
 16935 00002742 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16936                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16937 00002746 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 16938                                  	;POP	SI			;BN00X
 16939                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 16940                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 16941                                  	;POP	SI
 16942                                  
 16943                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16944 00002748 E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16945                                  SWAP_SOURCE:
 16946                                  	; MSDOS 3.3
 16947                                  	;MOV	SI,[REN_WFP]
 16948                                  	;MOV	[WFP_START],SI
 16949                                  	; MSDOS 6.0
 16950 0000274B A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16951 0000274E 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16952 00002752 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16953 00002756 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16954                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16955 00002759 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16956                                  	;mov	word [CREATING],0E5FFh
 16957 0000275F C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16958                                  					; A rename is like a CREATE_NEW as far
 16959                                  					; as the destination is concerned.
 16960 00002765 E83E17                  	call	GetPathNoSet
 16961                                  
 16962                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16963                                  ;   since no files match the destination name. If it fails for any other
 16964                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16965                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16966                                  ;   if the rename should fail because we haven't built an explicit name by
 16967                                  ;   substituting for the meta chars in it. In this case the destination file
 16968                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16969                                  ;   in the directory entry part.
 16970                                  	
 16971 00002768 7223                    	JC	short NODEST
 16972                                  	
 16973                                  	; MSDOS 6.0
 16974                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16975                                  	; !! MSDOS 3.3 !!
 16976                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16977                                  
 16978 0000276A 08E4                    	OR	AH,AH			; Device?
 16979 0000276C 792C                    	JNS	short SAVEDEST		; No, continue
 16980                                  BAD_ACC:
 16981 0000276E B80500                  	MOV	AX,error_access_denied
 16982 00002771 F9                      	STC
 16983                                  RENAME_CLEAN:
 16984 00002772 9C                      	PUSHF				; Save carry state
 16985 00002773 50                      	PUSH	AX			; and error code (if carry set)
 16986 00002774 A0[7605]                	MOV	AL,[THISDRV]
 16987 00002777 E85432                  	call	FLUSHBUF
 16988 0000277A 58                      	POP	AX
 16989 0000277B 803E[4A03]00            	CMP	byte [FAILERR],0
 16990 00002780 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16991 00002782 9D                      	POPF
 16992 00002783 E979FF                  	JMP	RENAME_POP
 16993                                  
 16994                                  BAD_ERR:
 16995 00002786 58                      	POP	AX			; Saved flags
 16996                                  	; 16/12/202
 16997                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16998                                  BAD_PATH: ; *
 16999 00002787 B80300                  	MOV	AX,error_path_not_found
 17000 0000278A E971FF                  	JMP	GOTERR
 17001                                  
 17002                                  NODEST:
 17003 0000278D 75F8                    	JNZ	short BAD_PATH
 17004 0000278F 803E[4A03]00            	CMP	byte [FAILERR],0
 17005 00002794 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17006                                  					; because user FAILed on I 24
 17007                                  	; 14/11/2022
 17008 00002796 08C9                    	OR	CL,CL
 17009                                  	;JNZ	short SAVEDEST
 17010                                  	; 17/05/2019
 17011 00002798 74ED                    	jz	short BAD_PATH ; *
 17012                                  ;BAD_PATH: ; *
 17013                                  ;	MOV	AX,error_path_not_found
 17014                                  ;	;STC
 17015                                  ;	;JMP	RENAME_POP
 17016                                  ;	; 17/05/2019
 17017                                  ;	jmp	GOTERR 
 17018                                  
 17019                                  ; 16/12/2022
 17020                                  %if 0
 17021                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17022                                  	or	cl,cl
 17023                                  	jnz	short SAVEDEST
 17024                                  	;jz	short BAD_PATH ; *
 17025                                  BAD_PATH: ; *
 17026                                  	;mov	ax,3
 17027                                  	mov	ax,error_path_not_found
 17028                                  	stc
 17029                                  	jmp	RENAME_POP
 17030                                  %endif
 17031                                  
 17032                                  SAVEDEST:
 17033 0000279A 16                      	push	ss
 17034 0000279B 07                      	pop	es
 17035                                  
 17036                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17037 0000279C BF[5705]                	MOV	DI,NAME2
 17038 0000279F BE[4B05]                	MOV	SI,NAME1
 17039                                  
 17040 000027A2 B90B00                  	MOV	CX,11
 17041 000027A5 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17042 000027A7 A1[C205]                	MOV	AX,[DIRSTART]
 17043 000027AA A3[6405]                	MOV	[DESTSTART],AX
 17044                                  BUILDDEST:
 17045                                  	; 31/01/2024
 17046                                  	;push	ss
 17047                                  	;pop	es			; needed due to JMP BUILDDEST below
 17048                                  
 17049                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17050 000027AD BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17051 000027B0 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17052 000027B3 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17053                                  
 17054 000027B6 B90B00                  	MOV	CX,11
 17055                                  
 17056                                  	; 17/05/2019 - Retro DOS v4.0
 17057                                  	
 17058                                  	; MSDOS 6.0
 17059 000027B9 E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17060                                  
 17061                                  	; MSDOS 3.3
 17062                                  
 17063                                  ; 08/08/2018 - Retro DOS v3.0
 17064                                  ; MSDOS 6.0 
 17065                                  ;---------------------------------------------------------------------------
 17066                                  ;Procedure: NEW_RENAME
 17067                                  ;
 17068                                  ;Input: DS:SI -> raw string with ?
 17069                                  ;	ES:DI -> destination string
 17070                                  ;	DS:BX -> source string
 17071                                  ;Function: replace ? chars of raw string with chars in source string and
 17072                                  ;	   put in destination string
 17073                                  ;Output: ES:DI-> new string
 17074                                  ;---------------------------------------------------------------------------
 17075                                  ;
 17076                                  ;NEW_RENAME:
 17077                                  ;NEWNAM:
 17078                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17079                                  ;	LODSB
 17080                                  ;	CMP	AL,"?"
 17081                                  ;	JNZ	short NOCHG
 17082                                  ;	MOV	AL,[BX] 		; Get replace char
 17083                                  ;NOCHG:
 17084                                  ;	STOSB
 17085                                  ;	INC	BX			; Next replace char
 17086                                  ;	LOOP	NEWNAM
 17087                                  ;	; MSDOS 6.0
 17088                                  ;	;retn
 17089                                  
 17090                                  	; MSDOS 3.3 & MSDOS 6.0
 17091                                  	;mov	byte [ATTRIB],16h
 17092 000027BC C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17093 000027C1 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17094 000027C6 E88C19                  	call	DEVNAME 		; Check if we built a device name
 17095 000027C9 73A3                    	JNC	short BAD_ACC
 17096 000027CB 8B1E[6405]              	MOV	BX,[DESTSTART]
 17097 000027CF C42E[8A05]              	LES	BP,[THISDPB]
 17098 000027D3 E86D16                  	call	SETDIRSRCH		; Reset search to start of dir
 17099 000027D6 7296                    	JC	short BAD_ACC 		; Screw up
 17100 000027D8 E82A15                  	call	FINDENTRY		; See if new name already exists
 17101 000027DB 7391                    	JNC	short BAD_ACC 		; Error if found
 17102 000027DD 803E[4A03]00            	CMP	byte [FAILERR],0
 17103 000027E2 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17104 000027E4 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17105 000027E7 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17106 000027EB 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17107                                  
 17108                                  	;mov	al,[RENAMEDMA+32]
 17109 000027ED A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17110 000027F0 A810                    	TEST	AL,attr_directory ; 10h
 17111 000027F2 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17112                                  					; otherwise the . and .. entries get
 17113                                  					; wiped.
 17114 000027F4 A2[6B05]                	MOV	[ATTRIB],AL
 17115 000027F7 8C1E[A005]              	MOV	[THISSFT+2],DS
 17116                                  
 17117                                  ;hkn; AUXSTACK is in DOSDATA
 17118                                  	;mov	si,RENAMEDMA+145h
 17119 000027FB BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17120 000027FE 8936[9E05]              	MOV	[THISSFT],SI
 17121                                  	;mov	word [SI+2],2
 17122 00002802 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17123 00002807 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17124 00002809 E82721                  	call	RENAME_MAKE		; This is in mknode
 17125 0000280C 7303                    	JNC	short GOT_DEST
 17126                                  BAD_ACCJ:
 17127 0000280E E95DFF                  	JMP	BAD_ACC
 17128                                  
 17129                                  GOT_DEST:
 17130 00002811 53                      	push	bx
 17131 00002812 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17132 00002816 E8D84A                  	call	ShareEnd		; we need to remove it.
 17133 00002819 5B                      	pop	bx
 17134                                  
 17135                                  ; A zero length entry with the correct new name has now been made at
 17136                                  ;   [CURBUF+2]:BX.
 17137                                  
 17138 0000281A C43E[E205]              	LES	DI,[CURBUF]
 17139                                  
 17140                                  	; MSDOS 6.0
 17141                                  	;test	byte [es:di+5],40h
 17142 0000281E 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17143                                  					;LB. if already dirty		  ;AN000;
 17144 00002823 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17145 00002825 E8AB32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17146                                  	;or	byte [es:di+5],40h
 17147 00002828 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17148                                  yesdirty1:
 17149 0000282D 89DF                    	MOV	DI,BX
 17150                                  	;add	di,11
 17151 0000282F 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17152                                  
 17153                                  ;hkn; RENAMEDMA is in DOSDATA
 17154                                  	;mov	si,[RENAMEDMA+32]
 17155 00002832 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17156                                  	;mov	cx,21
 17157 00002835 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17158 00002838 F3A4                    	REP	MOVSB
 17159 0000283A E87A00                  	CALL	GET_SOURCE
 17160 0000283D 7275                    	JC	short RENAME_OVER
 17161 0000283F 89DF                    	MOV	DI,BX
 17162 00002841 8E06[E405]              	MOV	ES,[CURBUF+2]
 17163 00002845 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17164 00002847 AA                      	STOSB				; "free" the source
 17165 00002848 EB13                    	JMP	SHORT DIRTY_IT
 17166                                  
 17167                                  SIMPLE_RENAME:
 17168 0000284A E86A00                  	CALL	GET_SOURCE		; Get the source back
 17169 0000284D 7265                    	JC	short RENAME_OVER
 17170 0000284F 89DF                    	MOV	DI,BX
 17171 00002851 8E06[E405]              	MOV	ES,[CURBUF+2]
 17172                                  
 17173                                  ;hkn; NAME1 is in DOSDATA
 17174 00002855 BE[4B05]                	MOV	SI,NAME1		; New Name
 17175 00002858 B90B00                  	MOV	CX,11
 17176 0000285B F3A4                    	REP	MOVSB
 17177                                  DIRTY_IT:
 17178 0000285D 8B3E[E205]              	MOV	DI,[CURBUF]
 17179                                  
 17180                                  	; MSDOS 6.0
 17181 00002861 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17182                                  					;LB. if already dirty		  ;AN000;
 17183 00002866 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17184 00002868 E86832                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17185                                  	
 17186 0000286B 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17187                                  
 17188                                  ;------------------------------------------------------------------------------
 17189                                  ; Check if the source is a directory of file. If directory rename it to the
 17190                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17191                                  ; previously deleted.
 17192                                  ;------------------------------------------------------------------------------
 17193                                  
 17194                                  yesdirty2:
 17195                                  	; MSDOS 6.0
 17196 00002870 56                      	PUSH	SI
 17197 00002871 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17198 00002875 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17199 00002878 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17200 0000287C 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17201 0000287E E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17202                                  	; 31/01/2024
 17203                                  	;POP	SI
 17204                                  	;JMP	SHORT NOT_DIRTY1
 17205                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17206 00002881 5E                      	POP	SI
 17207                                  NOT_DIRTY1:				;;BN00X
 17208                                  NEXT_SOURCE:
 17209                                  ;hkn; RENAMEDMA is in DOSDATA
 17210 00002882 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17211                                  
 17212                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17213                                  ; to enter it before going to RENAME_Next.
 17214                                  
 17215 00002885 E88AEA                  	call	ECritDisk
 17216 00002888 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17217                                  				  ;  to FF when we made the prev new file).
 17218 0000288D E89405                  	call	RENAME_NEXT
 17219                                  
 17220                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17221                                  ; we were before.
 17222                                  
 17223 00002890 7222                    	JC	short RENAME_OVER
 17224                                  
 17225                                  	;lea	si,[bx+26]
 17226 00002892 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17227 00002895 E872FD                  	call	REN_DEL_Check
 17228 00002898 7306                    	JNC	short REN_OK2
 17229 0000289A B82000                  	MOV	AX,error_sharing_violation ; 20h
 17230                                  jmp_to_rename_clean: ; 28/12/2022
 17231 0000289D E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17232                                  
 17233                                  ;------------------------------------------------------------------------------
 17234                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17235                                  ; if directory, rename directory name in the Fastopen cache.
 17236                                  ;-----------------------------------------------------------------------------
 17237                                  
 17238                                  REN_OK2:
 17239                                  	; MSDOS 6.0
 17240                                  	;mov	al,[RERNAMEDMA+32]
 17241 000028A0 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17242                                  	;test	al,10h
 17243 000028A3 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17244 000028A5 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17245                                  	
 17246                                  	; MSDOS 3.3 & MSDOS 6.0
 17247 000028A7 E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17248                                  jmp_to_builddest: ; 28/12/2022
 17249                                  	; 31/01/2024
 17250 000028AA 16                      	push	ss
 17251 000028AB 07                      	pop	es
 17252 000028AC E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17253                                  
 17254                                  	; MSDOS 6.0
 17255                                  Ren_Directory:
 17256 000028AF E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17257                                  	;JMP	BUILDDEST
 17258                                  	; 28/12/2022
 17259 000028B2 EBF6                    	jmp	short jmp_to_builddest
 17260                                  
 17261                                  RENAME_OVER:
 17262 000028B4 F8                      	CLC
 17263                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17264                                  	; 28/12/2022
 17265 000028B5 EBE6                    	jmp	short jmp_to_rename_clean
 17266                                  
 17267                                  ;----------------------------------------------------------------------------
 17268                                  ; Procedure: GET_SOURCE
 17269                                  ;
 17270                                  ; Inputs:
 17271                                  ;	RENAMEDMA has source info
 17272                                  ; Function:
 17273                                  ;	Re-find the source
 17274                                  ; Output:
 17275                                  ;	[CURBUF] set
 17276                                  ;	[CURBUF+2]:BX points to entry
 17277                                  ;	Carry set if error (currently user FAILed to I 24)
 17278                                  ; DS preserved, others destroyed
 17279                                  ;----------------------------------------------------------------------------
 17280                                  
 17281                                  GET_SOURCE:
 17282 000028B7 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17283 000028BB C42E[8A05]              	LES	BP,[THISDPB]
 17284 000028BF E88115                  	call	SETDIRSRCH
 17285 000028C2 7214                    	JC	short gs_ret_label	; retc
 17286 000028C4 E86D18                  	call	STARTSRCH
 17287 000028C7 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17288                                  	;call	GETENT
 17289                                  	; 18/12/2022
 17290 000028CA E94715                  	jmp	GETENT
 17291                                  ;gs_ret_label:
 17292                                  	;retn
 17293                                  
 17294                                  ; MSDOS 6.0 
 17295                                  ;---------------------------------------------------------------------------
 17296                                  ;Procedure: NEW_RENAME
 17297                                  ;
 17298                                  ;Input: DS:SI -> raw string with ?
 17299                                  ;	ES:DI -> destination string
 17300                                  ;	DS:BX -> source string
 17301                                  ;Function: replace ? chars of raw string with chars in source string and
 17302                                  ;	   put in destination string
 17303                                  ;Output: ES:DI-> new string
 17304                                  ;---------------------------------------------------------------------------
 17305                                  
 17306                                  NEW_RENAME:
 17307                                  	; 17/05/2019 - Retro DOS v4.0
 17308                                  NEWNAM:
 17309                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17310 000028CD AC                      	LODSB
 17311 000028CE 3C3F                    	CMP	AL,"?" ; 3Fh
 17312 000028D0 7502                    	JNZ	short NOCHG
 17313 000028D2 8A07                    	MOV	AL,[BX] 		; Get replace char
 17314                                  NOCHG:
 17315 000028D4 AA                      	STOSB
 17316 000028D5 43                      	INC	BX			; Next replace char
 17317 000028D6 E2F5                    	LOOP	NEWNAM
 17318                                  	; MSDOS 6.0
 17319                                  gs_ret_label:	; 18/12/2022
 17320 000028D8 C3                      	retn
 17321                                  
 17322                                  ;============================================================================
 17323                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17324                                  ;============================================================================
 17325                                  ; 08/08/2018 - Retro DOS v3.0
 17326                                  ; 17/05/2019 - Retro DOS v4.0
 17327                                  
 17328                                  ;**	Low level routines for returning file information and setting file
 17329                                  ;	attributes
 17330                                  ;
 17331                                  ;	GET_FILE_INFO
 17332                                  ;	SET_FILE_ATTRIBUTE
 17333                                  ;
 17334                                  ;	Modification history:
 17335                                  ;
 17336                                  ;	    Created: ARR 30 March 1983
 17337                                  ;
 17338                                  ;	M025: Return access_denied if attempting to set
 17339                                  ;	      attribute of root directory.
 17340                                  ;
 17341                                  
 17342                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17343                                  
 17344                                  ;---------------------------------------------------------------------------
 17345                                  ; Procedure Name : GET_FILE_INFO
 17346                                  ;
 17347                                  ; Inputs:
 17348                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17349                                  ;		terminated)
 17350                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17351                                  ;		( = -1 if current dir not involved, else
 17352                                  ;		 Points to first char after last "/" of current dir part)
 17353                                  ;	[THISCDS] Points to CDS being used
 17354                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17355                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17356                                  ; Function:
 17357                                  ;	Get Information about a file
 17358                                  ; Returns:
 17359                                  ;	CARRY CLEAR
 17360                                  ;	    AX = Attribute of file
 17361                                  ;	    CX = Time stamp of file
 17362                                  ;	    DX = Date stamp of file
 17363                                  ;	    BX:DI = Size of file (32 bit)
 17364                                  ;	CARRY SET
 17365                                  ;	    AX is error code
 17366                                  ;		error_file_not_found
 17367                                  ;			Last element of path not found
 17368                                  ;		error_path_not_found
 17369                                  ;			Bad path (not in curr dir part if present)
 17370                                  ;		error_bad_curr_dir
 17371                                  ;			Bad path in current directory part of path
 17372                                  ; DS preserved, others destroyed
 17373                                  ;---------------------------------------------------------------------------
 17374                                  
 17375                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17376                                  
 17377                                  GET_FILE_INFO:
 17378                                  
 17379                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17380                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17381                                  
 17382 000028D9 E874E9                  	call	TestNet
 17383 000028DC 7306                    	JNC	short LOCAL_INFO
 17384                                  
 17385                                  ;IF NOT Installed
 17386                                  ;	transfer NET_GET_FILE_INFO
 17387                                  ;ELSE
 17388                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17389                                  ;	INT	2FH
 17390                                  ;	return
 17391                                  
 17392 000028DE B80F11                  	mov     ax, 110Fh
 17393 000028E1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17394                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17395                                  			; SDA CDS pointer -> current directory
 17396                                  			; Return: CF set on error, AX = file attributes
 17397 000028E3 C3                      	retn
 17398                                  ;ENDIF
 17399                                  
 17400                                  LOCAL_INFO:
 17401 000028E4 E82BEA                  	call	ECritDisk
 17402 000028E7 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17403                                  	; MSDOS 3.3
 17404                                  	;call	GETPATH
 17405                                  	; MSDOS 6.0
 17406 000028EC E8D700                  	call	GET_FAST_PATH
 17407                                  	; MSDOS 3.3 & MSDOS 6.0
 17408 000028EF 7312                    	JNC	short info_check_dev
 17409                                  NO_PATH:
 17410 000028F1 750B                    	JNZ	short bad_path1
 17411 000028F3 08C9                    	OR	CL,CL
 17412 000028F5 7407                    	JZ	short bad_path1
 17413                                  info_no_file:
 17414 000028F7 B80200                  	MOV	AX,error_file_not_found
 17415                                  BadRet:
 17416 000028FA F9                      	STC
 17417                                  JustRet:
 17418                                  	;call	LCritDisk
 17419                                  	;retn
 17420                                  	; 18/12/2022
 17421 000028FB E92FEA                  	jmp	LCritDisk
 17422                                  
 17423                                  bad_path1:
 17424 000028FE B80300                  	MOV	AX,error_path_not_found
 17425 00002901 EBF7                    	jmp	short BadRet
 17426                                  
 17427                                  info_check_dev:
 17428 00002903 08E4                    	OR	AH,AH
 17429 00002905 78F0                    	JS	short info_no_file	; device
 17430                                  
 17431                                  	; MSDOS 6.0
 17432                                  ;SR;
 17433                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17434                                  ;for a root dir
 17435                                  
 17436 00002907 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17437 0000290C 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17438                                  
 17439 0000290E 30E4                    	xor	ah,ah
 17440 00002910 B010                    	mov	al,attr_directory ; 10h
 17441                                  	;clc
 17442                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17443                                  	; (DOSCODE:683Eh)
 17444                                  	; 16/12/2022
 17445                                  	;clc
 17446 00002912 EBE7                    	jmp	short JustRet
 17447                                  
 17448                                  not_root:
 17449                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17450 00002914 1E                      	PUSH	DS
 17451 00002915 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17452 00002919 89DE                    	MOV	SI,BX
 17453 0000291B 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17454 0000291D 89DF                    	MOV	DI,BX
 17455                                  	;mov	cx,[si+16h]
 17456 0000291F 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17457                                  	;mov	dx,[si+18h]
 17458 00002922 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17459 00002925 30E4                    	XOR	AH,AH
 17460                                  	;mov	al,[si+0Bh]
 17461 00002927 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17462                                  	;test	al,10h
 17463 0000292A A810                    	TEST	AL,attr_directory
 17464 0000292C 7506                    	JNZ	short NO_SIZE
 17465                                  	;mov	di,[si+1Ch]
 17466 0000292E 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17467                                  	;mov	bx,[si+1Eh]
 17468 00002931 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17469                                  NO_SIZE:
 17470 00002934 1F                      	POP	DS
 17471                                  	;CLC
 17472                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17473                                  	; (DOSCODE:6864h)
 17474                                  	; 16/12/2022
 17475                                  	;clc
 17476 00002935 EBC4                    	jmp	short JustRet
 17477                                  
 17478                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17479                                  ;-------------------------------------------------------------------------------
 17480                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17481                                  ; Inputs:
 17482                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17483                                  ;		terminated)
 17484                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17485                                  ;		( = -1 if current dir not involved, else
 17486                                  ;		 Points to first char after last "/" of current dir part)
 17487                                  ;	[THISCDS] Points to CDS being used
 17488                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17489                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17490                                  ;	AX is new attributes to give to file
 17491                                  ; Function:
 17492                                  ;	Set File Attributes
 17493                                  ; Returns:
 17494                                  ;	CARRY CLEAR
 17495                                  ;	    No error
 17496                                  ;	CARRY SET
 17497                                  ;	    AX is error code
 17498                                  ;		error_file_not_found
 17499                                  ;			Last element of path not found
 17500                                  ;		error_path_not_found
 17501                                  ;			Bad path (not in curr dir part if present)
 17502                                  ;		error_bad_curr_dir
 17503                                  ;			Bad path in current directory part of path
 17504                                  ;		error_access_denied
 17505                                  ;			Attempt to set an attribute which cannot be set
 17506                                  ;			(attr_directory, attr_volume_ID)
 17507                                  ;		error_sharing_violation
 17508                                  ;			Sharing mode of file did not allow the change
 17509                                  ;			(this request requires exclusive write/read access)
 17510                                  ;			(INT 24H generated)
 17511                                  ; DS preserved, others destroyed
 17512                                  ;----------------------------------------------------------------------------
 17513                                  
 17514                                  SET_FILE_ATTRIBUTE:
 17515                                  
 17516                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17517                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17518                                  
 17519 00002937 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17520 0000293A 7414                    	JZ	short set_look
 17521                                  _BAD_ACC:
 17522 0000293C C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17523 00002941 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17524 00002946 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17525 0000294B B80500                  	MOV	AX,error_access_denied ; 5
 17526 0000294E F9                      	STC
 17527 0000294F C3                      	retn
 17528                                  
 17529                                  set_look:
 17530 00002950 E8FDE8                  	call	TestNet
 17531 00002953 7308                    	JNC	short LOCAL_SET
 17532                                  
 17533                                  ;IF NOT Installed
 17534                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17535                                  ;ELSE
 17536 00002955 50                      	PUSH	AX
 17537                                  	
 17538                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17539                                  	;INT	2FH
 17540                                  
 17541 00002956 B80E11                  	mov     ax, 110Eh
 17542 00002959 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17543                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17544                                  			; SDA CDS pointer -> current directory
 17545                                  			; STACK: WORD new file attributes
 17546                                  			; Return: CF set on error
 17547                                  
 17548 0000295B 5B                      	POP	BX			; clean stack
 17549 0000295C C3                      	retn
 17550                                  ;ENDIF
 17551                                  
 17552                                  LOCAL_SET:
 17553 0000295D E8B2E9                  	call	ECritDisk
 17554 00002960 50                      	PUSH	AX			; Save new attributes
 17555 00002961 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17556 00002966 E83715                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17557 00002969 7308                    	JNC	short set_check_device
 17558 0000296B 5B                      	POP	BX			; Clean stack (don't zap AX)
 17559 0000296C EB83                    	JMP	short NO_PATH
 17560                                  
 17561                                  	; MSDOS 6.0
 17562                                  cannot_set_root:			; M025:
 17563 0000296E B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17564                                  	;stc				; M025: to set attr. of root
 17565                                  	;jmp	short OK_BYE		; M025:
 17566                                  	; 01/02/2024
 17567 00002971 EB87                    	jmp	short BadRet
 17568                                  
 17569                                  set_check_device:
 17570 00002973 08E4                    	OR	AH,AH
 17571 00002975 7906                    	JNS	short set_check_share
 17572 00002977 58                      	POP	AX
 17573 00002978 E8B2E9                  	call	LCritDisk
 17574 0000297B EBBF                    	JMP	short _BAD_ACC 		; device
 17575                                  
 17576                                  set_check_share:
 17577 0000297D 58                      	POP	AX			; Get new attributes
 17578                                  
 17579                                  	; MSDOS 6.0
 17580 0000297E 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17581 00002983 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17582                                  
 17583                                  	; MSDOS 3.3 & MSDOS 6.0
 17584 00002985 E882FC                  	call	REN_DEL_Check
 17585 00002988 7305                    	JNC	short set_do
 17586 0000298A B82000                  	MOV	AX,error_sharing_violation ; 32
 17587 0000298D EB34                    	jmp	short OK_BYE
 17588                                  
 17589                                  set_do:
 17590                                  	; MSDOS 3.3 & MSDOS 6.0
 17591 0000298F C43E[E205]              	LES	DI,[CURBUF]
 17592 00002993 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17593 00002998 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17594                                  
 17595                                  	; MSDOS 6.0
 17596 0000299C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17597                                  					;LB. if already dirty		  ;AN000;
 17598 000029A1 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17599 000029A3 E82D31                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17600                                  	
 17601 000029A6 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17602                                  yesdirty3:
 17603 000029AB A0[7605]                	MOV	AL,[THISDRV]
 17604                                  ;;;; 10/1/86 F.C update fastopen cache
 17605 000029AE 52                      	PUSH	DX
 17606 000029AF 57                      	PUSH	DI
 17607 000029B0 B400                    	MOV	AH,0		  ; dir entry update
 17608 000029B2 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17609 000029B4 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17610 000029B6 E8E6FC                  	call	FastOpen_Update
 17611 000029B9 5F                      	POP	DI
 17612 000029BA 5A                      	POP	DX
 17613                                  ;;;; 9/11/86 F.C update fastopen cache
 17614 000029BB E81030                  	call	FLUSHBUF
 17615 000029BE 7303                    	JNC	short OK_BYE
 17616 000029C0 B80200                  	MOV	AX,error_file_not_found
 17617                                  OK_BYE:
 17618                                  	;call	LCritDisk
 17619                                  	;retn
 17620                                  	; 16/12/2022
 17621 000029C3 E967E9                  	jmp	LCritDisk
 17622                                  
 17623                                  	; 17/05/2019 - Retro DOS v4.0
 17624                                  
 17625                                  	; MSDOS 6.0
 17626                                  GET_FAST_PATH:
 17627                                  ;hkn; use SS override for FastOpenFlg
 17628 000029C6 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17629                                  					;FO. trigger fastopen	;AN000;
 17630 000029CC E8D114                  	call	GETPATH
 17631 000029CF 9C                      	PUSHF			 	;FO.			;AN000;
 17632 000029D0 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17633                                  					;FO. clear all fastopen flags ;AN000;
 17634 000029D6 9D                      	POPF				;FO.			;AN000;
 17635 000029D7 C3                      	retn
 17636                                  
 17637                                  ;============================================================================
 17638                                  ; DUP.ASM, MSDOS 6.0, 1991
 17639                                  ;============================================================================
 17640                                  ; 08/08/2018 - Retro DOS v3.0
 17641                                  ; 17/05/2019 - Retro DOS v4.0
 17642                                  
 17643                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17644                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17645                                  ;
 17646                                  ;	DOS_DUP
 17647                                  ;
 17648                                  ;	Modification history:
 17649                                  ;
 17650                                  ;	  Created: ARR 30 March 1983
 17651                                  
 17652                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17653                                  ;---------------------------------------------------------------------------
 17654                                  ; Procedure Name : DOS_DUP
 17655                                  ;
 17656                                  ; Inputs:
 17657                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17658                                  ;		(a non net SFT is OK, in this case the ref
 17659                                  ;		 count is simply incremented)
 17660                                  ; Function:
 17661                                  ;	Signal to the devices that a logical open is occurring
 17662                                  ; Returns:
 17663                                  ;	ES:DI point to SFT
 17664                                  ;    Carry clear
 17665                                  ;	SFT ref_count is incremented
 17666                                  ; Registers modified: None.
 17667                                  ; NOTE:
 17668                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17669                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17670                                  ;	that time.
 17671                                  ;---------------------------------------------------------------------------
 17672                                  
 17673                                  DOS_DUP:
 17674                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17675                                  
 17676                                  	; MSDOS 6.0
 17677 000029D8 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17678 000029DD 26C43E[9E05]            	les	di,[es:THISSFT]
 17679                                  
 17680                                  	;Entry	Dos_Dup_Direct
 17681                                  DOS_Dup_Direct:
 17682 000029E2 E884E8                  	call	IsSFTNet
 17683 000029E5 7503                    	JNZ	short DO_INC
 17684 000029E7 E8841B                  	call	DEV_OPEN_SFT
 17685                                  DO_INC:
 17686                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17687 000029EA 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17688                                  					;   we're in big trouble anyway)
 17689 000029ED C3                      	retn
 17690                                  
 17691                                  ;============================================================================
 17692                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17693                                  ;============================================================================
 17694                                  ; 08/08/2018 - Retro DOS v3.0
 17695                                  ; 18/05/2019 - Retro DOS v4.0
 17696                                  
 17697                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17698                                  ;NAME	DOS_CREATE
 17699                                  ;----------------------------------------------------------------------------
 17700                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17701                                  ;
 17702                                  ;	DOS_CREATE
 17703                                  ;	DOS_CREATE_NEW
 17704                                  ;	SET_MKND_ERR
 17705                                  ;	SET_Media_ID
 17706                                  ;	SET_EXT_Mode
 17707                                  ;
 17708                                  ;	Revision history:
 17709                                  ;
 17710                                  ;	    A000 version 4.00	  Jan. 1988
 17711                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17712                                  
 17713                                  ;Installed = TRUE
 17714                                  
 17715                                  ;	i_need	THISSFT,DWORD
 17716                                  ;	i_need	THISCDS,DWORD
 17717                                  ;	I_need	EXTERR,WORD
 17718                                  ;	I_Need	ExtErr_locus,BYTE
 17719                                  ;	I_need	JShare,DWORD
 17720                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17721                                  ;	I_need	SATTRIB,BYTE
 17722                                  ;	I_need	CALLVIDM,DWORD
 17723                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17724                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17725                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17726                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17727                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17728                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17729                                  
 17730                                  ;***	DOS_CREATE - Create a File
 17731                                  ;----------------------------------------------------------------------------
 17732                                  ;	DOS_Create is called to create the specified file, truncating
 17733                                  ;	the old one if it exists.
 17734                                  ;
 17735                                  ;	ENTRY	AX is Attribute to create
 17736                                  ;		(ds) = DOSDATA
 17737                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17738                                  ;			terminated)
 17739                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17740                                  ;			( = -1 if current dir not involved, else
 17741                                  ;			 Points to first char after last "/" of current dir part)
 17742                                  ;		[THISCDS] Points to CDS being used
 17743                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17744                                  ;		[THISSFT] Points to SFT to fill in if file created
 17745                                  ;			(sf_mode field set so that FCB may be detected)
 17746                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17747                                  ;
 17748                                  ;	EXIT	sf_ref_count is NOT altered
 17749                                  ;		CARRY CLEAR
 17750                                  ;		    THISSFT filled in.
 17751                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17752                                  ;		CARRY SET
 17753                                  ;		    AX is error code
 17754                                  ;			error_path_not_found
 17755                                  ;				Bad path (not in curr dir part if present)
 17756                                  ;			error_bad_curr_dir
 17757                                  ;				Bad path in current directory part of path
 17758                                  ;			error_access_denied
 17759                                  ;				Attempt to re-create read only file , or
 17760                                  ;				create a second volume id or create a dir
 17761                                  ;			error_sharing_violation
 17762                                  ;				The sharing mode was correct but not allowed
 17763                                  ;				generates an INT 24
 17764                                  ;	USES	all but DS
 17765                                  ;----------------------------------------------------------------------------
 17766                                  
 17767                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17768                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17769                                  
 17770                                  DOS_CREATE:
 17771                                  	; 18/05/2019 - Retro DOS v4.0
 17772                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17773                                  
 17774                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17775                                  ;hkn; this point.
 17776                                  
 17777 000029EE 30E4                    	XOR	AH,AH		; Truncate is OK
 17778                                  
 17779                                  ;	Enter here from Dos_Create_New
 17780                                  ;
 17781                                  ;	(ah) = 0 iff truncate OK
 17782                                  
 17783                                  Create_inter:
 17784 000029F0 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17785                                  				; Mask out any meaningless bits
 17786 000029F2 7511                    	JNZ	short AttErr
 17787 000029F4 A808                    	TEST	AL,attr_volume_id
 17788 000029F6 7407                    	JZ	short NoReset
 17789                                  	
 17790                                  	; MSDOS 6.0
 17791                                  	; 16/12/2022
 17792 000029F8 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17793                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17794                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17795                                  	
 17796 000029FD B008                    	MOV	AL,attr_volume_id ; 8
 17797                                  NoReset:
 17798 000029FF 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17799 00002A01 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17800 00002A03 740A                    	JZ	short ATT_OK
 17801                                  AttErr:
 17802 00002A05 B80500                  	MOV	AX,5		; Attribute problem
 17803 00002A08 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17804 00002A0D EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17805                                  				   ;	attr_device to be set.
 17806                                  ATT_OK:
 17807 00002A0F C43E[9E05]              	LES	DI,[THISSFT]
 17808 00002A13 06                      	PUSH	ES
 17809 00002A14 C436[A205]              	LES	SI,[THISCDS]
 17810 00002A18 83FEFF                  	CMP	SI,-1
 17811 00002A1B 751B                    	JNE	short TEST_RE_NET
 17812                                  
 17813                                  ;	No CDS, it must be redirected.
 17814                                  
 17815 00002A1D 07                      	POP	ES
 17816                                  
 17817                                  	; MSDOS 6.0
 17818                                  ;Extended open hooks
 17819                                  	;test	byte [EXTOPEN_ON],1
 17820 00002A1E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17821 00002A23 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17822                                  IFS_extopen:				    ;AN000;EO.
 17823 00002A25 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17824                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17825 00002A26 B82E11                  	mov	ax,112Eh
 17826                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17827 00002A29 CD2F                    	INT	2FH			    ;AN000;EO.
 17828 00002A2B 5B                      	POP	BX			    ;AN000;EO. trash bx
 17829 00002A2C C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17830 00002A31 C3                      	retn				    ;AN000;EO.
 17831                                  NOEXTOP:				    ;AN000;
 17832                                  ;Extended open hooks
 17833                                  
 17834                                  ;IF NOT Installed
 17835                                  ;	transfer NET_SEQ_CREATE
 17836                                  ;ELSE
 17837 00002A32 50                      	PUSH	AX
 17838                                  
 17839                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17840                                  	;INT	2FH
 17841                                  
 17842 00002A33 B81811                  	mov	ax,1118h
 17843                                  	; 01/02/2024
 17844                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17845                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17846                                  			; SDA first filename pointer -> fully-qualified name of file
 17847                                  			; STACK: WORD file creation mode???
 17848                                  
 17849                                  	;POP	BX			; BX is trashed anyway
 17850                                  	;retn
 17851 00002A36 EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17852                                  ;ENDIF
 17853                                  
 17854                                  ;	We have a CDS. See if it's network
 17855                                  
 17856                                  TEST_RE_NET:
 17857                                  	;;test	word [es:si+43h],8000h
 17858                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17859                                  	; 07/12/2022
 17860                                  	;test	byte [es:si+44h],80h
 17861                                  	; 17/12/2022
 17862 00002A38 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17863 00002A3D 07                      	POP	ES
 17864 00002A3E 7417                    	JZ	short LOCAL_CREATE
 17865                                  
 17866                                  	; MSDOS 6.0
 17867 00002A40 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17868 00002A43 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17869                                  	;;or	word [es:di+2],2
 17870                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17871                                  	; 17/12/2022
 17872 00002A45 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17873                                  
 17874                                  ;Extended open hooks
 17875                                  dochk:
 17876 00002A4A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17877 00002A4F 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17878                                  ;Extended open hooks
 17879                                  
 17880                                  ;IF NOT Installed
 17881                                  ;	transfer NET_CREATE
 17882                                  ;ELSE
 17883 00002A51 50                      	PUSH	AX
 17884                                  	
 17885                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17886                                  	;INT	2FH
 17887                                  	
 17888 00002A52 B81711                  	mov	ax,1117h
 17889                                  	
 17890                                  	; 01/02/2024
 17891                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17892                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17893                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17894                                  			; SDA CDS pointer -> current directory
 17895                                  			; Return: CF set on error
 17896                                  
 17897                                  	;POP	BX			; BX is trashed anyway
 17898                                  ;nomore:
 17899                                  	;retn
 17900 00002A55 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17901                                  ;ENDIF
 17902                                  
 17903                                  ;**	It's a local create. We have a local CDS for it.
 17904                                  
 17905                                  LOCAL_CREATE:
 17906                                  	; MSDOS 6.0
 17907 00002A57 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17908 00002A5A 7205                    	JC	short setdone	;AN000;EO.
 17909                                  	
 17910                                  	; MSDOS 3.3 & MSDOS 6.0
 17911                                  	; 17/12/2022
 17912                                  	;;or	word [es:di+2],2
 17913                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17914                                  	;or	byte [es:di+2],2
 17915 00002A5C 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17916                                  setdone:
 17917 00002A61 E8AEE8                  	call	ECritDisk
 17918 00002A64 E8A61E                  	call	MakeNode
 17919 00002A67 7317                    	JNC	short Create_ok
 17920 00002A69 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17921 00002A6E E8BCE8                  	call	LCritDisk
 17922                                  
 17923                                  	;entry	SET_MKND_ERR
 17924                                  SET_MKND_ERR:
 17925                                  
 17926                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17927                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17928                                  
 17929                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17930 00002A71 BB[782A]                	MOV     BX,CRTERRTAB
 17931                                  	;XLAT  ; MSDOS 3.3
 17932                                  	; 18/05/2019 - Retro DOS v4.0
 17933 00002A74 2E                      	CS
 17934 00002A75 D7                      	XLAT
 17935                                  CreatBadRet:
 17936 00002A76 F9                      	STC
 17937 00002A77 C3                      	retn
 17938                                  
 17939                                  ; 13/05/2019 - Retro DOS v4.0
 17940                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17941                                  ; ---------------------------------------------------------------------------
 17942                                  
 17943                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17944                                  
 17945                                  ; 17/07/2018 - Retro DOS v3.0
 17946                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17947                                  
 17948                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17949                                  ;	db	0,5,52h,50h,3,5,20h
 17950                                  
 17951                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17952                                  ;	db	0,5,52h,50h,3,5,20h,2
 17953                                  
 17954                                  ; 08/08/2018
 17955                                  
 17956                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17957 00002A78 00                      	DB	0			; none
 17958 00002A79 05                      	DB	error_access_denied	; MakeNode error 1
 17959 00002A7A 52                      	DB	error_cannot_make	; MakeNode error 2
 17960 00002A7B 50                      	DB	error_file_exists	; MakeNode error 3
 17961 00002A7C 03                      	DB	error_path_not_found	; MakeNode error 4
 17962 00002A7D 05                      	DB	error_access_denied	; MakeNode error 5
 17963 00002A7E 20                      	DB	error_sharing_violation ; MakeNode error 6
 17964                                  	; MSDOS 6.0
 17965 00002A7F 02                      	DB	error_file_not_found	; MakeNode error 7
 17966                                  
 17967                                  ; ---------------------------------------------------------------------------
 17968                                  
 17969                                  ; We have just created a new file. This results in the truncation of old
 17970                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17971                                  ; file to the current size.
 17972                                  
 17973                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17974                                  ; drive number to force a Build BPB after Media Check.
 17975                                  
 17976                                  ;;; FASTOPEN 8/29/86
 17977                                  Create_ok:
 17978 00002A80 E8F4FB                  	call	FastOpen_Delete
 17979                                  ;;; FASTOPEN 8/29/86
 17980 00002A83 A0[6D05]                	mov	al,[SATTRIB]
 17981 00002A86 A808                    	test	al,attr_volume_id
 17982 00002A88 741C                    	jz	short NoVolLabel
 17983 00002A8A C43E[A205]              	LES	DI,[THISCDS]
 17984                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17985 00002A8E 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17986 00002A91 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17987 00002A94 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17988                                  	
 17989                                  	; 18/05/2019 - Retro DOS v4.0
 17990                                  
 17991                                  	; MSDOS 6.0
 17992 00002A98 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17993 00002A9A E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17994                                  	
 17995 00002A9D E872E8                  	call	ECritDisk
 17996 00002AA0 E8B22B                  	call	FATREAD_CDS		; force a media check
 17997 00002AA3 E887E8                  	call	LCritDisk
 17998                                  
 17999                                  NoVolLabel:
 18000 00002AA6 B80200                  	MOV	ax,2
 18001 00002AA9 C43E[9E05]              	LES	DI,[THISSFT]
 18002                                  ;if installed
 18003                                  	;call	JShare + 14 * 4
 18004 00002AAD FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18005                                  ;else
 18006                                  ;	Call	ShSU
 18007                                  ;endif
 18008 00002AB1 E879E8                  	call	LCritDisk
 18009 00002AB4 E94901                  	jmp	SET_SFT_MODE
 18010                                  
 18011                                  ;---------------------------------------------------------------------------
 18012                                  ; Procedure Name : Dos_Create_New
 18013                                  ;
 18014                                  ; Inputs:
 18015                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18016                                  ;		terminated)
 18017                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18018                                  ;		( = -1 if current dir not involved, else
 18019                                  ;		 Points to first char after last "/" of current dir part)
 18020                                  ;	[THISCDS] Points to CDS being used
 18021                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18022                                  ;	[THISSFT] Points to SFT to fill in if file created
 18023                                  ;		(sf_mode field set so that FCB may be detected)
 18024                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18025                                  ;	AX is Attribute to create
 18026                                  ; Function:
 18027                                  ;	Try to create the specified file truncating an old one that exists
 18028                                  ; Outputs:
 18029                                  ;	sf_ref_count is NOT altered
 18030                                  ;	CARRY CLEAR
 18031                                  ;	    THISSFT filled in.
 18032                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18033                                  ;	CARRY SET
 18034                                  ;	    AX is error code
 18035                                  ;		error_path_not_found
 18036                                  ;			Bad path (not in curr dir part if present)
 18037                                  ;		error_bad_curr_dir
 18038                                  ;			Bad path in current directory part of path
 18039                                  ;		error_access_denied
 18040                                  ;			Create a second volume id or create a dir
 18041                                  ;		error_file_exists
 18042                                  ;			Already a file by this name
 18043                                  ; DS preserved, others destroyed
 18044                                  ;---------------------------------------------------------------------------
 18045                                  
 18046                                  DOS_Create_New:
 18047 00002AB7 B401                    	MOV	AH,1		; Truncate is NOT OK
 18048 00002AB9 E934FF                  	JMP	Create_inter
 18049                                  
 18050                                  ; MSDOS 6.0
 18051                                  ;---------------------------------------------------------------------------
 18052                                  ; Procedure Name : Set_Media_ID
 18053                                  ;
 18054                                  ; Inputs:
 18055                                  ;	NAME1= Volume ID
 18056                                  ;	BH= 0, delete volume id
 18057                                  ;	    1, set new volume id
 18058                                  ;	DS= DOSGROUP
 18059                                  ; Function:
 18060                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18061                                  ; Outputs:
 18062                                  ;	CARRY CLEAR
 18063                                  ;	    volume id set
 18064                                  ;	CARRY SET
 18065                                  ;	    AX is error code
 18066                                  ;---------------------------------------------------------------------------
 18067                                  
 18068                                  	; 18/05/2019 - Retro DOS v4.0
 18069                                  Set_Media_ID:
 18070 00002ABC 50                      	PUSH	AX		;AN000;;>32mb
 18071 00002ABD 06                      	PUSH	ES		;AN000;;>32mb
 18072 00002ABE 57                      	PUSH	DI		;AN000;;>32mb
 18073                                  
 18074 00002ABF FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18075 00002AC1 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18076 00002AC3 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18077 00002AC5 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18078                                  
 18079                                  ;hkn; PACKET_TEMP is in DOSDATA
 18080 00002AC8 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18081                                  
 18082 00002ACB 53                      	PUSH	BX		;AN000;;>32mb
 18083 00002ACC 52                      	PUSH	DX		;AN000;;>32mb
 18084 00002ACD 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18085                                  
 18086                                  	;invoke	$IOCTL		;AN000;;>32mb
 18087 00002ACF E86BF7                  	call	_$IOCTL	
 18088                                  
 18089 00002AD2 5A                      	POP	DX		;AN000;;>32mb
 18090 00002AD3 5B                      	POP	BX		;AN000;;>32mb
 18091 00002AD4 7224                    	JC	short geterr	;AN000;;>32mb
 18092                                  
 18093 00002AD6 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18094 00002AD8 7405                    	JZ	short NoName	;AN000;>32mb yes
 18095                                  
 18096                                  ;hkn; NAME1 is in DOSDATA
 18097 00002ADA BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18098                                  
 18099 00002ADD EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18100                                  NoName: 			;AN000;
 18101                                  
 18102                                  ;hkn; NO_NAME_ID is in DOSDATA
 18103 00002ADF BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18104                                  
 18105                                  doset:				;AN000;
 18106 00002AE2 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18107                                  	;add	di,6
 18108 00002AE4 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18109                                  
 18110                                  ;hkn; ES & DS must point to SS
 18111                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18112 00002AE7 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18113                                  
 18114 00002AE8 1F                      	POP	DS		;AN000;;>32mb
 18115                                  
 18116                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18117 00002AE9 16                      	PUSH	SS		;AN000;;>32mb
 18118                                  
 18119 00002AEA 07                      	POP	ES		;AN000;;>32mb
 18120 00002AEB B90B00                  	MOV	CX,11		;AN000;;>32mb
 18121 00002AEE F3A4                    	REP	MOVSB		;AN000;;>32mb
 18122 00002AF0 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18123 00002AF3 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18124 00002AF5 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18125                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18126 00002AF7 E843F7                  	call	_$IOCTL	
 18127                                  geterr: 			;AN000;
 18128                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18129 00002AFA 16                      	PUSH	SS		;AN000;>32mb
 18130                                  
 18131 00002AFB 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18132                                  
 18133 00002AFC 5F                      	POP	DI		;AN000;;>32mb
 18134 00002AFD 07                      	POP	ES		;AN000;;>32mb
 18135 00002AFE 58                      	POP	AX		;AN000;;>32mb
 18136 00002AFF C3                      	retn			;AN000;>32mb
 18137                                  
 18138                                  ; MSDOS 6.0
 18139                                  ;---------------------------------------------------------------------------
 18140                                  ; Procedure Name : Set_EXT_mode
 18141                                  ;
 18142                                  ; Inputs:
 18143                                  ;	[EXTOPEN_ON]= flag for extended open
 18144                                  ;	SAVE_BX= mode specified in Extended Open
 18145                                  ; Function:
 18146                                  ;	Set mode in ThisSFT
 18147                                  ; Outputs:
 18148                                  ;	carry set,mode is set if from Extended Open
 18149                                  ;	carry clear, mode not set yet
 18150                                  ;---------------------------------------------------------------------------
 18151                                  
 18152                                  ; 13/05/2019 - Retro DOS v4.0
 18153                                  
 18154                                  Set_EXT_mode:
 18155                                  
 18156                                  ;hkn; SS override
 18157 00002B00 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18158 00002B06 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18159 00002B08 50                      	PUSH	AX			    ;AN000;EO.
 18160                                  
 18161                                  ;hkn; SS override
 18162 00002B09 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18163                                  	;or	[es:di+2],ax
 18164 00002B0D 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18165 00002B11 58                      	POP	AX			    ;AN000;EO.
 18166 00002B12 F9                      	STC				    ;AN000;EO.
 18167                                  NOTEX:					    ;AN000;
 18168 00002B13 C3                      	retn				    ;AN000;EO.
 18169                                  
 18170                                  ;============================================================================
 18171                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18172                                  ;============================================================================
 18173                                  ; 08/08/2018 - Retro DOS v3.0
 18174                                  ; 18/05/2019 - Retro DOS v4.0
 18175                                  
 18176                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18177                                  ;	NAME	DOS_OPEN
 18178                                  
 18179                                  ;**	OPEN.ASM - File Open
 18180                                  ;----------------------------------------------------------------------------
 18181                                  ;	Low level routines for openning a file from a file spec.
 18182                                  ;	Also misc routines for sharing errors
 18183                                  ;
 18184                                  ;	DOS_Open
 18185                                  ;	Check_Access_AX
 18186                                  ;	SHARE_ERROR
 18187                                  ;	SET_SFT_MODE
 18188                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18189                                  ;
 18190                                  ;	Revision history:
 18191                                  ;
 18192                                  ;	    Created: ARR 30 March 1983
 18193                                  ;	    A000	version 4.00   Jan. 1988
 18194                                  ;
 18195                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18196                                  ; 	       remote extended opens and not save_cx.
 18197                                  ;
 18198                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18199                                  ;	       on the stack before calling off to the redir.
 18200                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18201                                  ;	       to handle open from exec. In this case set the appropriate bit
 18202                                  ;	       else do not.
 18203                                  ;----------------------------------------------------------------------------	
 18204                                  
 18205                                  ;Installed = TRUE
 18206                                  
 18207                                  ;	i_need	NoSetDir,BYTE
 18208                                  ;	i_need	THISSFT,DWORD
 18209                                  ;	i_need	THISCDS,DWORD
 18210                                  ;	i_need	CURBUF,DWORD
 18211                                  ;	i_need	CurrentPDB,WORD
 18212                                  ;	i_need	CURR_DIR_END,WORD
 18213                                  ;	I_need	RetryCount,WORD
 18214                                  ;	I_need	Open_Access,BYTE
 18215                                  ;	I_need	fSharing,BYTE
 18216                                  ;	i_need	JShare,DWORD
 18217                                  ;	I_need	FastOpenFlg,byte
 18218                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18219                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18220                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18221                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18222                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18223                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18224                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18225                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18226                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18227                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18228                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18229                                  ;
 18230                                  ;	I_need	DOS_FLAG,BYTE
 18231                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18232                                  
 18233                                  ;Break	<DOS_Open - internal file access>
 18234                                  ;---------------------------------------------------------------------------
 18235                                  ; Procedure Name : DOS_Open
 18236                                  ;
 18237                                  ; Inputs:
 18238                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18239                                  ;		terminated)
 18240                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18241                                  ;		( = -1 if current dir not involved, else
 18242                                  ;		 Points to first char after last "/" of current dir part)
 18243                                  ;	[THISCDS] Points to CDS being used
 18244                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18245                                  ;	[THISSFT] Points to SFT to fill in if file found
 18246                                  ;		(sf_mode field set so that FCB may be detected)
 18247                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18248                                  ;	AX is Access and Sharing mode
 18249                                  ;	  High NIBBLE of AL (Sharing Mode)
 18250                                  ;		sharing_compat	   file is opened in compatibility mode
 18251                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18252                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18253                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18254                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18255                                  ;	  Low NIBBLE of AL (Access Mode)
 18256                                  ;		open_for_read	file is opened for reading
 18257                                  ;		open_for_write	file is opened for writing
 18258                                  ;		open_for_both	file is opened for both reading and writing.
 18259                                  ;
 18260                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18261                                  ;		(not checked)
 18262                                  ; Function:
 18263                                  ;	Try to open the specified file
 18264                                  ; Outputs:
 18265                                  ;	sf_ref_count is NOT altered
 18266                                  ;	CARRY CLEAR
 18267                                  ;	    THISSFT filled in.
 18268                                  ;	CARRY SET
 18269                                  ;	    AX is error code
 18270                                  ;		error_file_not_found
 18271                                  ;			Last element of path not found
 18272                                  ;		error_path_not_found
 18273                                  ;			Bad path (not in curr dir part if present)
 18274                                  ;		error_bad_curr_dir
 18275                                  ;			Bad path in current directory part of path
 18276                                  ;		error_invalid_access
 18277                                  ;			Bad sharing mode or bad access mode or bad combination
 18278                                  ;		error_access_denied
 18279                                  ;			Attempt to open read only file for writting, or
 18280                                  ;			open a directory
 18281                                  ;		error_sharing_violation
 18282                                  ;			The sharing mode was correct but not allowed
 18283                                  ;			generates an INT 24 on compatibility mode SFTs
 18284                                  ; DS preserved, others destroyed
 18285                                  ;----------------------------------------------------------------------------
 18286                                  
 18287                                  ; 18/05/2019 - Retro DOS v4.0
 18288                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18289                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18290                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18291                                  
 18292                                  DOS_OPEN:
 18293                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18294                                  
 18295 00002B14 C606[4C03]00            	MOV	byte [NoSetDir],0
 18296 00002B19 E83301                  	CALL	Check_Access_AX
 18297 00002B1C 722B                    	JC	short do_ret_label	    ; retc
 18298                                  
 18299 00002B1E C43E[9E05]              	LES	DI,[THISSFT]
 18300 00002B22 30E4                    	XOR	AH,AH
 18301                                  
 18302                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18303                                  
 18304 00002B24 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18305 00002B28 06                      	PUSH	ES
 18306 00002B29 C436[A205]              	LES	SI,[THISCDS]
 18307                                  	; 18/08/2018
 18308 00002B2D 83FEFF                  	CMP	SI,-1
 18309 00002B30 7530                    	JNZ	short TEST_RE_NET1
 18310 00002B32 07                      	POP	ES
 18311                                  
 18312                                  	; MSDOS 6.0
 18313                                  ;Extended open hooks
 18314 00002B33 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18315 00002B38 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18316                                  _IFS_extopen:									;AN000;
 18317 00002B3A A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18318                                  					    ; with which call was made. This
 18319                                  					    ; has the open access bits. 
 18320                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18321                                  	
 18322 00002B3D 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18323                                  	;mov	ax,112Eh
 18324                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18325 00002B3E B82E11                  	mov	ax,(MultNET*256)+46 
 18326 00002B41 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18327 00002B43 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18328 00002B44 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18329                                  
 18330                                  do_ret_label:
 18331 00002B49 C3                      	retn				    ;FT.				;AN000;
 18332                                  _NOEXTOP:
 18333                                  ;Extended open hooks
 18334                                  	;
 18335                                  ;IF NOT Installed
 18336                                  	;transfer NET_SEQ_OPEN
 18337                                  ;ELSE
 18338                                  	
 18339                                  do_net_int2f:
 18340 00002B4A F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18341 00002B4F 7409                    	jz	short not_exec_open	; N: just do net open
 18342                                  					; Y: check to see if redir is aware
 18343                                  					;    of this 
 18344                                  	
 18345                                  					; M042 - start
 18346                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18347 00002B51 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18348                                  					; Q: does this redir know how to 
 18349                                  					;    this
 18350 00002B56 7402                    	jz	short not_exec_open	; N: just do net open
 18351                                  					; Y: set bit 3 of access byte and 
 18352                                  					;    set sharing mode to DENY_WRITE
 18353                                  					; M042 - end
 18354                                  	
 18355                                  	; NOTE: This specific mode has not been set for the code assembled
 18356                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18357                                  	; always one.
 18358                                  					; M035 - set the bits on the stack
 18359                                  	;mov	al,23h
 18360 00002B58 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18361                                  	
 18362                                  not_exec_open:
 18363                                  	; MSDOS 3.3 & MSDOS 6.0
 18364 00002B5A 50                      	PUSH	AX
 18365                                  
 18366                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18367                                  	;INT	2FH
 18368                                  
 18369 00002B5B B81611                  	mov     ax,1116h
 18370 00002B5E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18371                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18372                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18373                                  			; STACK: WORD file open mode
 18374                                  			; Return: CF set on error
 18375                                  
 18376 00002B60 5B                      	POP	BX			; clean stack
 18377                                  ;do_ret_label: ; 09/08/2018
 18378 00002B61 C3                      	retn
 18379                                  ;ENDIF
 18380                                  
 18381                                  TEST_RE_NET1:
 18382                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18383                                  	; 17/12/2022
 18384 00002B62 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18385 00002B67 07                      	POP	ES
 18386                                  	; 18/05/2019
 18387 00002B68 7409                    	JZ	short LOCAL_OPEN
 18388                                  
 18389                                  ;Extended open hooks
 18390                                  	; MSDOS 6.0
 18391 00002B6A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18392 00002B6F 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18393                                  ;Extended open hooks
 18394                                  
 18395                                  ;IF NOT Installed
 18396                                  ;	transfer NET_OPEN
 18397                                  ;ELSE
 18398 00002B71 EBD7                    	jmp	short do_net_int2f
 18399                                  ;ENDIF
 18400                                  
 18401                                  LOCAL_OPEN:
 18402                                  	; MSDOS 3.3 & MSDOS 6.0
 18403 00002B73 E89CE7                  	call	ECritDisk
 18404                                  
 18405                                  ; DOS 3.3 FastOPen 6/16/86
 18406                                  
 18407                                  	;or	byte [FastOpenFlg],5
 18408 00002B76 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18409                                  
 18410 00002B7B E82213                  	call	GETPATH
 18411                                  
 18412                                  ; DOS 3.3 FastOPen 6/16/86
 18413                                  
 18414 00002B7E 731D                    	JNC	short Open_found
 18415 00002B80 7511                    	JNZ	short bad_path2
 18416 00002B82 08C9                    	OR	CL,CL
 18417 00002B84 740D                    	JZ	short bad_path2
 18418                                  OpenFNF:
 18419 00002B86 B80200                  	MOV	AX,error_file_not_found	; 2
 18420                                  OpenBadRet:
 18421                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18422                                  	; 12/08/2018
 18423                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18424                                  	; MSDOS 6.0
 18425 00002B89 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18426 00002B8F F9                      	STC
 18427                                  	;call	LCritDisk
 18428                                  	; 16/12/2022
 18429 00002B90 E99AE7                  	jmp	LCritDisk
 18430                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18431                                  	;retn 	; 08/09/2018
 18432                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18433                                  	;jmp	Clear_FastOpen
 18434                                  
 18435                                  bad_path2:
 18436 00002B93 B80300                  	MOV	AX,error_path_not_found	; 3
 18437 00002B96 EBF1                    	JMP	short OpenBadRet
 18438                                  
 18439                                  Open_Bad_Access:
 18440 00002B98 B80500                  	MOV	AX,error_access_denied	; 5
 18441 00002B9B EBEC                    	JMP	short OpenBadRet
 18442                                  
 18443                                  Open_found:
 18444 00002B9D 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18445 00002B9F 08E4                    	OR	AH,AH
 18446 00002BA1 783E                    	JS	short open_ok		; Devices don't have attributes
 18447 00002BA3 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18448                                  	;mov	al,[es:bx+0Bh]
 18449 00002BA7 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18450 00002BAB A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18451 00002BAD 75E9                    	JNZ	short Open_Bad_Access
 18452 00002BAF A801                    	TEST	AL,attr_read_only	; check write on read only
 18453 00002BB1 742E                    	JZ	short open_ok
 18454                                  
 18455                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18456                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18457                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18458                                  ; processing until the actual write operation:
 18459                                  ;
 18460                                  ; If FCB, then we change the mode to be read_only.
 18461                                  ; If net_FCB, then we change the mode to be read_only.
 18462                                  ; If not open for read then error.
 18463                                  
 18464 00002BB3 1E                      	push	ds
 18465 00002BB4 56                      	push	si
 18466 00002BB5 C536[9E05]              	LDS	SI,[THISSFT]
 18467                                  	;mov	cx,[si+2]
 18468 00002BB9 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18469                                  	; 17/12/2022
 18470                                  	;test	ch,80h
 18471 00002BBC F6C580                  	test	ch,sf_isFCB>>8
 18472                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18473 00002BBF 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18474 00002BC1 88CA                    	MOV	DL,CL
 18475 00002BC3 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18476 00002BC6 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18477 00002BC9 7508                    	JNZ	short NormalOpen	; no
 18478                                  ResetAccess:
 18479                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18480                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18481                                  	; 16/12/2022
 18482 00002BCB 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18483                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18484 00002BCE 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18485 00002BD1 EB0C                    	JMP	SHORT FillSFT
 18486                                  
 18487                                  ; The SFT is normal. See if the requested access is open_for_read
 18488                                  
 18489                                  NormalOpen:
 18490 00002BD3 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18491 00002BD6 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18492 00002BD9 7404                    	JZ	short FillSFT
 18493 00002BDB 5E                      	pop	si
 18494 00002BDC 1F                      	pop	ds
 18495 00002BDD EBB9                    	JMP	short Open_Bad_Access
 18496                                  ;
 18497                                  ; All done, restore registers and fill the SFT.
 18498                                  ;
 18499                                  FillSFT:
 18500 00002BDF 5E                      	pop	si
 18501 00002BE0 1F                      	pop	ds
 18502                                  open_ok:
 18503 00002BE1 E8E71E                  	call	DOOPEN			; Fill in SFT
 18504                                  
 18505                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18506                                  	; 18/05/2019
 18507                                  	;and	byte [ss:FastOpenFlag],80h
 18508 00002BE4 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18509                                  	; 12/08/2018
 18510                                  	;and	byte [FastOpenFlg],Fast_yes	
 18511                                  
 18512                                  	; MSDOS 6.0
 18513 00002BEA E84300                  	CALL	DO_SHARE_CHECK
 18514 00002BED 7303                    	JNC	short SHARE_OK
 18515                                  	;call	LCritDisk
 18516                                  	; 16/12/2022
 18517 00002BEF E93BE7                  	jmp	LCritDisk
 18518                                  	;;JMP	short Clear_FastOpen
 18519                                  	;retn	; 18/05/2019
 18520                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18521                                  	;jmp	short Clear_FastOpen	
 18522                                  
 18523                                  	; MSDOS 3.3
 18524                                  ;DO_SHARE_CHECK:
 18525                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18526                                  ;OpenShareRetry:
 18527                                  ;	push	cx			; Save number left to do
 18528                                  ;	call	SHARE_CHECK		; Final Check
 18529                                  ;	pop	cx			; CX = # left
 18530                                  ;	JNC	short SHARE_OK		; No problem with access
 18531                                  ;	call	Idle
 18532                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18533                                  ;OpenShareFail:
 18534                                  ;	LES	DI,[THISSFT]
 18535                                  ;	call	SHARE_ERROR
 18536                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18537                                  	
 18538                                  	;12/08/2018
 18539                                  	;mov	byte [ss:FastOpenFlg],0
 18540                                  	;08/09/2018
 18541                                  	;mov	byte [FastOpenFlg],0
 18542                                  	;call	LCritDisk
 18543                                  	;JMP	short Clear_FastOpen
 18544                                  	;retn
 18545                                  
 18546                                  SHARE_OK:
 18547                                  	; MSDOS 3.3 & MSDOS 6.0
 18548 00002BF2 B80300                  	MOV	AX,3
 18549 00002BF5 C43E[9E05]              	LES	DI,[THISSFT]
 18550                                  ;if installed
 18551                                  	;call	JShare + 14 * 4
 18552 00002BF9 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18553                                  ;else
 18554                                  ;	Call	ShSU
 18555                                  ;endif
 18556 00002BFD E82DE7                  	call	LCritDisk
 18557                                  	
 18558                                  	;FallThru Set_SFT_Mode
 18559                                  
 18560                                  ;----------------------------------------------------------------------------
 18561                                  ; Procedure Name : SET_SFT_MODE
 18562                                  ;
 18563                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18564                                  ;
 18565                                  ;   Inputs:
 18566                                  ;	ThisSFT points to SFT
 18567                                  ;
 18568                                  ;   Outputs:
 18569                                  ;	Carry clear
 18570                                  ;   Registers modified: AX.
 18571                                  ;---------------------------------------------------------------------------
 18572                                  
 18573                                  ;hkn; called from create. DS already set up to DOSDATA.
 18574                                  
 18575                                  SET_SFT_MODE:
 18576 00002C00 C43E[9E05]              	LES	DI,[THISSFT]
 18577 00002C04 E86719                  	call	DEV_OPEN_SFT
 18578                                  	;test	word [es:di+2],8000h
 18579                                  	; 17/12/2022
 18580                                  	;test	byte [es:di+3],80h
 18581 00002C07 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18582                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18583 00002C0C 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18584 00002C0E A1[3003]                	MOV	AX,[CurrentPDB]
 18585                                  	;mov	[es:di+31h],ax
 18586 00002C11 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18587                                  
 18588                                  Clear_FastOpen:
 18589 00002C15 C3                      	retn			       ;;;;; DOS 3.3
 18590                                  
 18591                                  ;----------------------------------------------------------------------------
 18592                                  ; Procedure Name : SHARE_ERROR
 18593                                  ;
 18594                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18595                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18596                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18597                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18598                                  ;---------------------------------------------------------------------------
 18599                                  
 18600                                  SHARE_ERROR:
 18601                                  	; 17/12/2022
 18602                                  	;test	byte [es:di+3],80h
 18603 00002C16 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18604                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18605 00002C1B 7509                    	JNZ	short _HARD_ERR
 18606 00002C1D 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18607 00002C21 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18608                                  	;CMP	CL,SHARING_COMPAT ; 0
 18609                                  	;JNE	short _NO_HARD_ERR
 18610                                  	; 21/09/2023
 18611 00002C24 7505                    	jnz	short _NO_HARD_ERR
 18612                                  _HARD_ERR:
 18613 00002C26 E8A246                  	call	SHARE_VIOLATION
 18614                                  	;retnc				; User wants retry
 18615 00002C29 73EA                    	jnc	short Clear_FastOpen
 18616                                  _NO_HARD_ERR:
 18617 00002C2B B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18618 00002C2E F9                      	STC
 18619 00002C2F C3                      	retn
 18620                                  
 18621                                  ; MSDOS 6.0
 18622                                  ;----------------------------------------------------------------------------
 18623                                  ; Procedure Name : DO_SHARE_CHECK
 18624                                  ;
 18625                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18626                                  ; Functions: check file sharing mode is valid
 18627                                  ; Output: carry set, error
 18628                                  ;	  carry clear, share ok
 18629                                  ;----------------------------------------------------------------------------
 18630                                  
 18631                                  	; 18/05/2019 - Retro DOS v4.0
 18632                                  DO_SHARE_CHECK:
 18633 00002C30 E8DFE6                  	call	ECritDisk		; enter critical section
 18634                                  OPN_RETRY:
 18635 00002C33 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18636                                  OpenShareRetry:
 18637 00002C37 51                      	push	cx			; Save number left to do
 18638 00002C38 E88B46                  	call	SHARE_CHECK		; Final Check
 18639 00002C3B 59                      	pop	cx			; CX = # left
 18640 00002C3C 730E                    	JNC	short Share_Ok2		; No problem with access
 18641 00002C3E E8CAE5                  	call	Idle
 18642 00002C41 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18643                                  OpenShareFail:
 18644 00002C43 C43E[9E05]              	LES	DI,[THISSFT]
 18645 00002C47 E8CCFF                  	call	SHARE_ERROR
 18646 00002C4A 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18647                                  Share_Ok2:
 18648                                  	;call	LCritDisk		; leave critical section
 18649                                  	;retn
 18650                                  	; 18/12/2022
 18651 00002C4C E9DEE6                  	jmp	LCritDisk
 18652                                  
 18653                                  ;-----------------------------------------------------------------------------
 18654                                  ; Procedure Name : Check_Access
 18655                                  ;
 18656                                  ; Inputs:
 18657                                  ;	AX is mode
 18658                                  ;	  High NIBBLE of AL (Sharing Mode)
 18659                                  ;		sharing_compat	   file is opened in compatibility mode
 18660                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18661                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18662                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18663                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18664                                  ;	  Low NIBBLE of AL (Access Mode)
 18665                                  ;		open_for_read	file is opened for reading
 18666                                  ;		open_for_write	file is opened for writing
 18667                                  ;		open_for_both	file is opened for both reading and writing.
 18668                                  ; Function:
 18669                                  ;	Check this access mode for correctness
 18670                                  ; Outputs:
 18671                                  ;	[open_access] = AL input
 18672                                  ;	Carry Clear
 18673                                  ;		Mode is correct
 18674                                  ;		AX unchanged
 18675                                  ;	Carry Set
 18676                                  ;		Mode is bad
 18677                                  ;		AX = error_invalid_access
 18678                                  ; No other registers effected
 18679                                  ;----------------------------------------------------------------------------
 18680                                  
 18681                                  Check_Access_AX:
 18682 00002C4F A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18683 00002C52 53                      	PUSH	BX
 18684                                  
 18685                                  ;	If sharing, then test for special sharing mode for FCBs
 18686                                  
 18687 00002C53 88C3                    	MOV	BL,AL
 18688 00002C55 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18689 00002C58 803E[7205]FF            	CMP	byte [FSHARING],-1
 18690 00002C5D 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18691 00002C5F 80FB70                  	CMP	BL,SHARING_NET_FCB
 18692 00002C62 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18693                                  CheckShareMode:
 18694 00002C64 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18695 00002C67 770D                    	JA	short Make_Bad_Access
 18696                                  CheckAccessMode:
 18697 00002C69 88C3                    	MOV	BL,AL
 18698 00002C6B 80E30F                  	AND	BL,access_mask
 18699 00002C6E 80FB02                  	CMP	BL,2
 18700 00002C71 7703                    	JA	short Make_Bad_Access
 18701 00002C73 5B                      	POP	BX
 18702 00002C74 F8                      	CLC
 18703 00002C75 C3                      	retn
 18704                                  
 18705                                  Make_Bad_Access:
 18706 00002C76 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18707 00002C79 5B                      	POP	BX
 18708 00002C7A F9                      	STC
 18709 00002C7B C3                      	retn
 18710                                  
 18711                                  ;============================================================================
 18712                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18713                                  ;============================================================================
 18714                                  ; 08/08/2018 - Retro DOS v3.0
 18715                                  ; 18/05/2019 - Retro DOS v4.0
 18716                                  
 18717                                  ;**	Low level routine for returning disk drive information from a local
 18718                                  ;	  or NET device
 18719                                  ;
 18720                                  ;	DISK_INFO
 18721                                  ;
 18722                                  ;	  Modification history:
 18723                                  ;
 18724                                  ;		Created: ARR 30 March 1983
 18725                                  
 18726                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18727                                  ;---------------------------------------------------------------------------
 18728                                  ; Procedure Name : DISK_INFO
 18729                                  ;
 18730                                  ; Inputs:
 18731                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18732                                  ;		(It MAY NOT be NUL, error not detected)
 18733                                  ; Function:
 18734                                  ;	Get Interesting Drive Information
 18735                                  ; Returns:
 18736                                  ;	DX = Number of free allocation units
 18737                                  ;	BX = Total Number of allocation units on disk
 18738                                  ;	CX = Sector size
 18739                                  ;	AL = Sectors per allocation unit
 18740                                  ;	AH = FAT ID BYTE
 18741                                  ;	Carry set if error (currently user FAILed to I 24)
 18742                                  ; Segs except ES preserved, others destroyed
 18743                                  ;----------------------------------------------------------------------------
 18744                                  
 18745                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18746                                  ;hkn; DOSDATA. 
 18747                                  
 18748                                  DISK_INFO:
 18749                                  	; 08/08/2018 - Retro DOS v3.0
 18750                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18751                                  
 18752 00002C7C E8D1E5                  	call	TestNet
 18753 00002C7F 7306                    	JNC	short LOCAL_DSK_INFO
 18754                                  
 18755                                  ;IF NOT Installed
 18756                                  ;	transfer NET_DISK_INFO
 18757                                  ;ELSE
 18758                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18759                                  	;INT	2FH
 18760                                  	;return
 18761                                  
 18762 00002C81 B80C11                  	mov     ax,110Ch
 18763 00002C84 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18764                                  			; ES:DI -> current directory
 18765                                  			; Return: AL = sectors per cluster, BX = total clusters
 18766                                  			; CX = bytes per sector, DX = number of available clusters
 18767 00002C86 C3                      	retn
 18768                                  ;ENDIF
 18769                                  
 18770                                  LOCAL_DSK_INFO:
 18771 00002C87 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18772 00002C8C E883E6                  	call	ECritDisk
 18773 00002C8F E8C329                  	call	FATREAD_CDS		; perform media check.
 18774 00002C92 7241                    	JC	short CRIT_LEAVE
 18775 00002C94 BB0200                  	MOV	BX,2
 18776 00002C97 E82528                  	call	UNPACK			; Get first FAT sector into CURBUF
 18777 00002C9A 7239                    	JC	short CRIT_LEAVE
 18778 00002C9C C536[E205]              	LDS	SI,[CURBUF]
 18779                                  	;mov	ah,[si+20]
 18780 00002CA0 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18781                                  
 18782                                  ;hkn; SS is DOSDATA
 18783 00002CA3 16                      	push	ss
 18784 00002CA4 1F                      	pop	ds
 18785                                  	;mov	cx,[es:bp+0Dh]
 18786 00002CA5 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18787                                  
 18788                                  ; Examine the current free count. If it indicates that we have an invalid
 18789                                  ; count, do the expensive calculation.
 18790                                  
 18791                                  	;mov	dx,[es:bp+1Fh]
 18792 00002CA9 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18793 00002CAD 83FAFF                  	CMP	DX,-1			; is it valid?
 18794 00002CB0 7404                    	JZ	short DoScan
 18795                                  
 18796                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18797                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18798                                  ; the count.
 18799                                  
 18800 00002CB2 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18801 00002CB4 7222                    	JB	short GotVal		; yes, trust it.
 18802                                  DoScan:
 18803 00002CB6 31D2                    	XOR	DX,DX
 18804 00002CB8 49                      	DEC	CX
 18805                                  SCANFREE:
 18806 00002CB9 E80328                  	call	UNPACK
 18807 00002CBC 7217                    	JC	short CRIT_LEAVE
 18808 00002CBE 7501                    	JNZ	short NOTFREECLUS
 18809 00002CC0 42                      	INC	DX			; A free one
 18810                                  NOTFREECLUS:
 18811 00002CC1 43                      	INC	BX			; Next cluster
 18812 00002CC2 E2F5                    	LOOP	SCANFREE
 18813 00002CC4 4B                      	DEC	BX			; BX was next cluster. Convert to
 18814                                  ReturnVals:
 18815 00002CC5 4B                      	DEC	BX			; count
 18816                                  	;mov	al,[es:bp+4]
 18817 00002CC6 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18818 00002CCA FEC0                    	INC	AL			; Sectors/cluster
 18819                                  	;mov	cx,[es:bp+2]
 18820 00002CCC 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18821                                  	;mov	[es:bp+1Fh],dx
 18822 00002CD0 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18823 00002CD4 F8                      	CLC
 18824                                  CRIT_LEAVE:
 18825                                  	;call	LCritDisk
 18826                                  	;retn
 18827                                  	; 17/12/2022
 18828 00002CD5 E955E6                  	jmp	LCritDisk
 18829                                  
 18830                                  ; We have correctly computed everything previously. Load up registers for
 18831                                  ; return.
 18832                                  
 18833                                  GotVal: 
 18834 00002CD8 89CB                    	MOV	BX,CX			; get cluster count
 18835 00002CDA EBE9                    	JMP	short ReturnVals
 18836                                  
 18837                                  ;============================================================================
 18838                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18839                                  ;============================================================================
 18840                                  ; 22/07/2018 - Retro DOS v3.0
 18841                                  
 18842                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18843                                  ;	NAME	DOS_SEARCH
 18844                                  
 18845                                  ;**	Low level routines for doing local and NET directory searches
 18846                                  ;
 18847                                  ;	DOS_SEARCH_FIRST
 18848                                  ;	DOS_SEARCH_NEXT
 18849                                  ;	RENAME_NEXT
 18850                                  ;
 18851                                  ;	Revision history:
 18852                                  ;
 18853                                  ;	    Created: ARR 30 March 1983
 18854                                  ;	    A000	version 4.00  Jan. 1988
 18855                                  ;	    A001	PTM 3564 -- search for fastopen
 18856                                  
 18857                                  ;Installed = TRUE
 18858                                  
 18859                                  ;--------------------------------------------------------------------------
 18860                                  ;
 18861                                  ; Procedure Name : DOS_SEARCH_FIRST
 18862                                  ;
 18863                                  ; Inputs:
 18864                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18865                                  ;		terminated)
 18866                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18867                                  ;		( = -1 if current dir not involved, else
 18868                                  ;		 Points to first char after last "/" of current dir part)
 18869                                  ;	[THISCDS] Points to CDS being used
 18870                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18871                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18872                                  ;	[DMAADD] Points to 53 byte buffer
 18873                                  ; Function:
 18874                                  ;	Initiate a search for the given file spec
 18875                                  ; Outputs:
 18876                                  ;	CARRY CLEAR
 18877                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18878                                  ;
 18879                                  ;	LOCAL
 18880                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18881                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18882                                  ;	    11 byte search name with Meta chars in it
 18883                                  ;	    Search Attribute Byte, attribute of search
 18884                                  ;	    WORD LastEnt value
 18885                                  ;	    WORD DirStart
 18886                                  ;	    4 byte pad
 18887                                  ;	    32 bytes of the directory entry found
 18888                                  ;	NET
 18889                                  ;	    21 bytes First byte has high bit set
 18890                                  ;	    32 bytes of the directory entry found
 18891                                  ;
 18892                                  ;	CARRY SET
 18893                                  ;	    AX = error code
 18894                                  ;		error_no_more_files
 18895                                  ;			No match for this file
 18896                                  ;		error_path_not_found
 18897                                  ;			Bad path (not in curr dir part if present)
 18898                                  ;		error_bad_curr_dir
 18899                                  ;			Bad path in current directory part of path
 18900                                  ; DS preserved, others destroyed
 18901                                  ;---------------------------------------------------------------------------
 18902                                  
 18903                                  ; 24/01/2024
 18904                                  %if 1
 18905                                  	; 17/05/2019 - Retro DOS v4.0
 18906                                  GET_FAST_SEARCH:
 18907                                  	; 22/07/2018
 18908                                  	; MSDOS 6.0
 18909                                  	; 17/12/2022
 18910 00002CDC 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18911                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18912                                  					;FO.trigger fastopen ;AN000;
 18913                                  	;call	DOS_SEARCH_FIRST
 18914                                  	;retn
 18915                                  	; 24/01/2024
 18916                                  	; 17/12/2022
 18917                                  	;jmp	DOS_SEARCH_FIRST
 18918                                  %endif
 18919                                  
 18920                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18921                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18922                                  
 18923                                  DOS_SEARCH_FIRST:
 18924                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18925                                  
 18926 00002CE2 C43E[A205]              	LES	DI,[THISCDS]
 18927 00002CE6 83FFFF                  	CMP	DI,-1
 18928 00002CE9 7506                    	JNZ	short TEST_RE_NET2
 18929                                  
 18930                                  ;IF NOT Installed
 18931                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18932                                  ;ELSE
 18933                                  	;mov	ax,1119h
 18934 00002CEB B81911                  	MOV	AX,(MultNET<<8)|25
 18935 00002CEE CD2F                    	INT	2Fh
 18936 00002CF0 C3                      	retn
 18937                                  ;ENDIF
 18938                                  
 18939                                  TEST_RE_NET2:
 18940                                  	;test	word [es:di+43h],8000h
 18941                                  	; 17/12/2022
 18942                                  	;test	byte [es:di+44h],80h
 18943                                  	; 28/12/2022
 18944 00002CF1 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 18945                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18946 00002CF6 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18947                                  
 18948                                  ;IF NOT Installed
 18949                                  ;	transfer NET_SEARCH_FIRST
 18950                                  ;ELSE
 18951                                  	;mov	ax,111Bh
 18952 00002CF8 B81B11                  	MOV	AX,(MultNET<<8)|27
 18953 00002CFB CD2F                    	INT	2FH
 18954 00002CFD C3                      	retn
 18955                                  ;ENDIF
 18956                                  	; 18/05/2019 - Retro DOS v4.0
 18957                                  LOCAL_SEARCH_FIRST:
 18958 00002CFE E811E6                  	call	ECritDisk
 18959                                  	; MSDOS 6.0
 18960                                  	;;test	word [DOS34_FLAG],400h
 18961                                  	; 17/12/2022
 18962                                  	;test	byte [DOS34_FLAG+1],04h
 18963 00002D01 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18964                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18965 00002D06 7405                    	JZ	short NOFN			;AN000;
 18966                                  	;or	byte [FastOpenFlg],1
 18967 00002D08 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18968                                  NOFN:						;AN000;
 18969 00002D0D C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18970                                  
 18971                                  ; 03/02/2024
 18972                                  %if 0
 18973                                  	; MSDOS 6.0
 18974                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18975                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 18976                                  %else
 18977                                  	; 03/02/2024
 18978 00002D12 16                      	push	ss
 18979 00002D13 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 18980 00002D14 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 18981                                  getnext:				;AN000;
 18982 00002D18 AC                      	lodsb				;AN000;;FO. get char
 18983 00002D19 08C0                    	or	al,al			;AN000;;FO. is it null
 18984 00002D1B 7409                    	jz	short NO_Question	;AN000;;FO. yes
 18985 00002D1D 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 18986 00002D1F 75F7                    	jne	short getnext 		;AN000;;FO. no
 18987                                  %endif
 18988                                  	;and	byte [FastOpenFlg],80h
 18989 00002D21 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18990                                  NO_Question:	; 03/02/2024
 18991                                  norm_GETPATH:
 18992 00002D26 E87711                  	call	GETPATH
 18993                                  	; BX = offset NAME1
 18994                                  ;_getdone:
 18995 00002D29 7318                    	JNC	short find_check_dev
 18996 00002D2B 7511                    	JNZ	short bad_path3
 18997 00002D2D 08C9                    	OR	CL,CL
 18998 00002D2F 740D                    	JZ	short bad_path3
 18999                                  find_no_more:
 19000                                  	;mov	ax,12h
 19001 00002D31 B81200                  	MOV	AX,error_no_more_files
 19002                                  BadBye:
 19003                                  	; MSDOS 6.0
 19004 00002D34 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19005                                  
 19006 00002D3A F9                      	STC
 19007                                  	;call	LCritDisk
 19008                                  	;retn
 19009                                  	; 18/12/2022
 19010 00002D3B E9EFE5                  	jmp	LCritDisk
 19011                                  
 19012                                  bad_path3:
 19013                                  	;mov	ax,3
 19014 00002D3E B80300                  	MOV	AX,error_path_not_found
 19015 00002D41 EBF1                    	JMP	short BadBye
 19016                                  
 19017                                  find_check_dev:
 19018 00002D43 08E4                    	OR	AH,AH
 19019 00002D45 790A                    	JNS	short found_entry
 19020 00002D47 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19021 00002D4D FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19022                                  found_entry:
 19023                                  
 19024                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19025                                  ; a search-next may not have wfp_start set correctly
 19026                                  
 19027 00002D51 C43E[2C03]              	LES	DI,[DMAADD]
 19028 00002D55 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19029 00002D59 AC                      	LODSB
 19030 00002D5A 2C40                    	SUB	AL,'A'-1                ; logical drive
 19031 00002D5C AA                      	STOSB				; High bit not set (local)
 19032                                  found_it:
 19033 00002D5D C43E[2C03]              	LES	DI,[DMAADD]
 19034 00002D61 47                      	INC	DI
 19035                                  
 19036                                  	; MSDOS 6.0
 19037 00002D62 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19038                                  	;test	byte [FastOpenFlg],10h
 19039 00002D63 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19040 00002D68 7408                    	JZ	short notfast			  ;FO.;AN001;
 19041 00002D6A 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19042 00002D6C 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19043 00002D70 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19044                                  
 19045                                  notfast:
 19046 00002D72 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19047                                  movmov:
 19048                                  ; Special E5 code
 19049 00002D75 A4                      	MOVSB
 19050 00002D76 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19051 00002D7B 7505                    	JNZ	short NOTKANJB
 19052 00002D7D 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19053                                  NOTKANJB:
 19054                                  	;MOV	CX,10
 19055                                  	;REP	MOVSB
 19056                                  	; 03/02/2024
 19057 00002D82 B90500                  	mov	cx,5
 19058 00002D85 F3A5                    	rep	movsw
 19059                                  
 19060                                  	; 08/09/2018
 19061 00002D87 1F                      	POP	DS			;FO.;AN001; restore ds
 19062                                  
 19063 00002D88 A0[6B05]                	MOV	AL,[ATTRIB]
 19064 00002D8B AA                      	STOSB
 19065 00002D8C 50                      	PUSH	AX			; Save AH device info
 19066 00002D8D A1[4803]                	MOV	AX,[LASTENT]
 19067 00002D90 AB                      	STOSW
 19068 00002D91 A1[C205]                	MOV	AX,[DIRSTART]
 19069 00002D94 AB                      	STOSW
 19070                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19071 00002D95 83C704                  	ADD	DI,4
 19072 00002D98 58                      	POP	AX			; Recover AH device info
 19073 00002D99 08E4                    	OR	AH,AH
 19074 00002D9B 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19075 00002D9D 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19076 00002DA2 7510                    	JNZ	short OKSTORE
 19077                                  
 19078                                  	; MSDOS 6.0
 19079 00002DA4 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19080                                  					;AN000;;FO. from fastopen and is good
 19081 00002DA9 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19082                                  
 19083                                  	; The user has specified the root directory itself, rather than some
 19084                                  	; contents of it. We can't "find" that.
 19085                                  
 19086 00002DAB 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19087                                  					;   stuffing a -1 at Lastent
 19088 00002DB1 E97DFF                  	JMP	find_no_more
 19089                                  
 19090                                  OKSTORE:
 19091 00002DB4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19092                                  DOSREL:
 19093                                  	; BX = offset NAME1 (from GETPATH)
 19094 00002DB8 89DE                    	MOV	SI,BX			; SI-> start of entry
 19095                                  
 19096                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19097                                  
 19098                                  	;;mov	cx,32
 19099                                  	;MOV	CX,dir_entry.size
 19100                                  	; 03/02/2024
 19101 00002DBA B91000                  	mov	cx,dir_entry.size>>1
 19102                                  ;;;;; 7/29/86
 19103 00002DBD 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19104                                  	;REP	MOVSB
 19105 00002DBF F3A5                    	rep	movsw
 19106                                  	;
 19107 00002DC1 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19108 00002DC3 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19109 00002DC7 7504                    	JNZ	short NO05
 19110 00002DC9 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19111                                  NO05:
 19112                                  
 19113                                  ;;;;; 7/29/86
 19114                                  
 19115                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19116                                  	; 16/12/2022
 19117                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19118                                  	; MSDOS 6.0
 19119                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19120                                  	; 18/05/2019 - Retro DOS v4.0
 19121 00002DCD 16                      	push	ss
 19122 00002DCE 1F                      	pop	ds
 19123                                  	; 16/12/2022
 19124 00002DCF 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19125                                  
 19126                                  ;hkn; SS is DOSDATA
 19127                                  	;push	ss
 19128                                  	;pop	ds
 19129 00002DD4 F8                      	CLC
 19130                                  	;call	LCritDisk
 19131                                  	;retn
 19132                                  	; 16/12/2022
 19133 00002DD5 E955E5                  	jmp	LCritDisk
 19134                                  
 19135                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19136                                  ;----------------------------------------------------------------------------
 19137                                  ;
 19138                                  ; Procedure Name : DOS_SEARCH_NEXT
 19139                                  ;
 19140                                  ; Inputs:
 19141                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19142                                  ;	    (only first 21 bytes must have valid information)
 19143                                  ; Function:
 19144                                  ;	Look for subsequent matches
 19145                                  ; Outputs:
 19146                                  ;	CARRY CLEAR
 19147                                  ;	    The 53 bytes at DMAADD are updated for next call
 19148                                  ;		(see DOS_SEARCH_FIRST)
 19149                                  ;	CARRY SET
 19150                                  ;	    AX = error code
 19151                                  ;		error_no_more_files
 19152                                  ;			No more files to find
 19153                                  ; DS preserved, others destroyed
 19154                                  ;---------------------------------------------------------------------------
 19155                                  
 19156                                  ;hkn; called from search.asm. DS already set up at this point.
 19157                                  
 19158                                  DOS_SEARCH_NEXT:
 19159 00002DD8 C43E[2C03]              	LES	DI,[DMAADD]
 19160 00002DDC 268A05                  	MOV	AL,[ES:DI]
 19161 00002DDF A880                    	TEST	AL,80H			; Test for NET
 19162 00002DE1 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19163                                  ;IF NOT Installed
 19164                                  ;	transfer NET_SEARCH_NEXT
 19165                                  ;ELSE
 19166                                  	;mov	ax,111Ch
 19167 00002DE3 B81C11                  	MOV	AX,(MultNET<<8)|28
 19168 00002DE6 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19169                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19170                                  		     ; Return: CF set on error, AX = DOS error code
 19171                                  		     ; CF clear if successful
 19172 00002DE8 C3                      	retn
 19173                                  ;ENDIF
 19174                                  
 19175                                  LOCAL_SEARCH_NEXT:
 19176                                  	;AL is drive A=1
 19177                                  	;mov	byte [EXTERR_LOCUS],2
 19178 00002DE9 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19179 00002DEE E821E5                  	call	ECritDisk
 19180                                  
 19181                                  ;hkn; DummyCDS is in DOSDATA
 19182 00002DF1 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19183                                  ;hkn; Segment address is DOSDATA - use ds
 19184                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19185 00002DF7 8C1E[A405]              	mov	[THISCDS+2],DS
 19186                                  
 19187 00002DFB 0440                    	ADD	AL,'A'-1
 19188 00002DFD E85B3B                  	call	InitCDS
 19189                                  
 19190                                  ;	call	GETTHISDRV		; Set CDS pointer
 19191                                  
 19192 00002E00 7246                    	JC	short No_files		; Bogus drive letter
 19193 00002E02 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19194                                  	;les	bp,[es:di+45h]
 19195 00002E06 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19196 00002E0A E825D8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19197                                  
 19198                                  	; 16/12/2022
 19199 00002E0D 268A4600                	mov	al,[ES:BP]
 19200                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19201                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19202 00002E11 A2[7605]                	mov	[THISDRV],AL
 19203                                  	;mov	word [CREATING],0E500h
 19204 00002E14 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19205 00002E1A C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19206 00002E1F C536[2C03]              	LDS	SI,[DMAADD]
 19207 00002E23 AC                      	LODSB				; Drive Byte
 19208                                  
 19209                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19210                                  RENAME_NEXT:
 19211                                  	;context ES
 19212 00002E24 16                      	push	ss
 19213 00002E25 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19214                                  
 19215                                  ;hkn; NAME1 is in DOSDATA
 19216 00002E26 BF[4B05]                	MOV	DI,NAME1
 19217                                  
 19218 00002E29 B90B00                  	MOV	CX,11
 19219 00002E2C F3A4                    	REP	MOVSB			; Search name
 19220 00002E2E AC                      	LODSB				; Attribute
 19221                                  
 19222                                  ;hkn; SS override
 19223 00002E2F 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19224 00002E33 AD                      	LODSW				; LastEnt
 19225 00002E34 09C0                    	OR	AX,AX
 19226                                  	; 03/02/2024
 19227                                  	;JNS	short cont_load
 19228 00002E36 7810                    	js	short No_files
 19229                                  ;No_files:
 19230                                  	;JMP	find_no_more
 19231                                  
 19232                                  cont_load:
 19233 00002E38 50                      	PUSH	AX			; Save LastEnt
 19234 00002E39 AD                      	LODSW				; DirStart
 19235 00002E3A 89C3                    	MOV	BX,AX
 19236                                  
 19237                                  ;hkn; SS is DOSDATA
 19238                                  	;context DS
 19239 00002E3C 16                      	push	ss
 19240 00002E3D 1F                      	pop	ds
 19241 00002E3E C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19242                                  	;invoke	SetDirSrch
 19243 00002E42 E8FE0F                  	call	SETDIRSRCH
 19244 00002E45 7304                    	JNC	short SEARCH_GOON
 19245 00002E47 58                      	POP	AX			; Clean stack
 19246                                  	;JMP	short No_files
 19247                                  	; 03/02/2024
 19248                                  No_files:
 19249 00002E48 E9E6FE                  	JMP	find_no_more
 19250                                  
 19251                                  SEARCH_GOON:
 19252 00002E4B E8E612                  	call	STARTSRCH
 19253 00002E4E 58                      	POP	AX
 19254 00002E4F E8C20F                  	call	GETENT
 19255 00002E52 72F4                    	JC	short No_files
 19256 00002E54 E8F80E                  	call	NEXTENT
 19257 00002E57 72EF                    	JC	short No_files
 19258 00002E59 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19259 00002E5B E9FFFE                  	JMP	found_it ; 10/08/2018
 19260                                  
 19261                                  ; MSDOS 6.0
 19262                                  ;---------------------------------------------------------------------------
 19263                                  ;
 19264                                  ; Procedure Name : CHECK_QUESTION
 19265                                  ;
 19266                                  ; Input: [WFP_START]= pointer to final path
 19267                                  ; Function: check '?' char
 19268                                  ; Output: carry clear, if no '?'
 19269                                  ;	 carry set, if '?' exists
 19270                                  ;---------------------------------------------------------------------------
 19271                                  
 19272                                  ; 03/02/2024
 19273                                  %if 0
 19274                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19275                                  CHECK_QUESTION:
 19276                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19277                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19278                                  	push	ss
 19279                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19280                                  	; 16/12/2022
 19281                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19282                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19283                                  	;mov	si,[ss:WFP_START]
 19284                                  getnext:				;AN000;
 19285                                  	LODSB				;AN000;;FO. get char
 19286                                  	OR	AL,AL			;AN000;;FO. is it null
 19287                                  	JZ	short NO_Question	;AN000;;FO. yes
 19288                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19289                                  	JNZ	short getnext 		;AN000;;FO. no
 19290                                  	STC				;AN000;;FO.
 19291                                  NO_Question:				;AN000;
 19292                                  	retn				;AN000;;FO.
 19293                                  %endif
 19294                                  
 19295                                  ;============================================================================
 19296                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19297                                  ;============================================================================
 19298                                  ; 23/07/2018 - Retro DOS v3.0
 19299                                  ; 18/05/2019 - Retro DOS v4.0
 19300                                  
 19301                                  ;**
 19302                                  ;
 19303                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19304                                  ;  If process has NET resources a close all is sent out over the net.
 19305                                  ;
 19306                                  ;   DOS_ABORT
 19307                                  ;
 19308                                  ;   Modification history:
 19309                                  ;
 19310                                  ;       Created: ARR 30 March 1983
 19311                                  ;
 19312                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19313                                  ;				being terminated only if it is busy.
 19314                                  ;
 19315                                  
 19316                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19317                                  ;--------------------------------------------------------------------------
 19318                                  ;
 19319                                  ; Procedure Name : DOS_ABORT
 19320                                  ;
 19321                                  ; Inputs:
 19322                                  ;       [CurrentPDB] set to PID of process aborting
 19323                                  ; Function:
 19324                                  ;       Close all files and free all SFTs for this PID
 19325                                  ; Returns:
 19326                                  ;       None
 19327                                  ; All destroyed except stack
 19328                                  ;---------------------------------------------------------------------------
 19329                                  
 19330                                  DOS_ABORT:
 19331 00002E5E 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19332 00002E63 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19333                                  reset_free_jfn:
 19334 00002E68 89CB                    	MOV     BX,CX
 19335 00002E6A 51                      	PUSH    CX
 19336 00002E6B 4B                      	DEC     BX                      ; get jfn (start with last one)
 19337                                  
 19338 00002E6C E82038                  	CALL	_$CLOSE
 19339 00002E6F 59                      	POP     CX
 19340 00002E70 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19341                                  
 19342                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19343                                  ; are running in the no-sharing no-network environment, we are simulating the
 19344                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19345                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19346                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19347                                  ;
 19348                                  ; If sharing is loaded, then the following call to close process will
 19349                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19350                                  ;
 19351                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19352                                  ; known network resources. These resources are then responsible for cleaning
 19353                                  ; up after this process.
 19354                                  ;
 19355                                  ; Sleazy, eh?
 19356                                  
 19357                                  	;context DS			; SS is DOSDATA
 19358 00002E72 16                      	push	ss
 19359 00002E73 1F                      	pop	ds  ; 09/09/2018
 19360                                  
 19361                                  	;CallInstall Net_Abort, MultNET, 29
 19362 00002E74 B81D11                  	mov	ax,111Dh
 19363 00002E77 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19364                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19365                                  			; DS???, SS = DOS CS
 19366                                  ;if installed
 19367 00002E79 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19368                                  ;else
 19369                                  ;	call 	MFTCloseP
 19370                                  ;endif
 19371                                  
 19372                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19373                                  ; counts.
 19374                                  					; SS override
 19375 00002E7D 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19376                                  	;mov	cx,[es:di+4]
 19377 00002E82 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19378 00002E86 E317                    	jcxz    FCBScanDone
 19379                                  	;lea	di,[di+6]
 19380 00002E88 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19381 00002E8B 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19382                                  FCBTest:
 19383                                  	;cmp	[es:di+31h],ax
 19384 00002E8F 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19385 00002E93 7505                    	jnz	short FCBNext		; no, skip it
 19386 00002E95 26C7050000              	mov	word [es:di],0
 19387                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19388                                  FCBNext:
 19389 00002E9A 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19390 00002E9D E2F0                    	loop    FCBTest
 19391                                  FCBScanDone:
 19392                                  
 19393                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19394                                  
 19395 00002E9F 31DB                    	XOR     BX,BX
 19396                                  Scan:
 19397 00002EA1 53                      	push    bx
 19398 00002EA2 E86537                  	call	SFFromSFN
 19399 00002EA5 5B                      	pop     bx
 19400                                  	;jnc	short Scan1
 19401                                  	;retn
 19402                                  
 19403                                  	; 18/12/2022
 19404                                  	;jc	short NO_Question ; retn
 19405                                  	; 03/02/2024
 19406 00002EA6 7234                    	jc	short RET2
 19407                                  
 19408                                  ;M038
 19409                                  ; Do what the comment above says, check for busy state
 19410                                  
 19411                                  Scan1:
 19412                                  	;cmp	word [es:di],0
 19413                                  	;jz	short scan_next  ; MSDOS 3.3
 19414                                  	; MSDOS 6.0
 19415 00002EA8 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19416                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19417                                  				; Is Sft busy? ;M038
 19418 00002EAC 7519                    	jnz	short scan_next
 19419                                  ;
 19420                                  ; we have a SFT that is busy. See if it is for the current process
 19421                                  ;
 19422 00002EAE 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19423                                  	;cmp	[es:di+31h],ax
 19424 00002EB2 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19425 00002EB6 750F                    	jnz	short scan_next
 19426 00002EB8 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19427                                  	;cmp	[es:di+2Fh],ax
 19428 00002EBC 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19429 00002EC0 7505                    	jnz	short scan_next
 19430                                  
 19431                                  ; This SFT is labelled as ours.
 19432                                  
 19433 00002EC2 26C7050000              	mov	word [es:di],0
 19434                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19435                                  scan_next:
 19436 00002EC7 43                      	inc     bx
 19437 00002EC8 EBD7                    	jmp     short Scan
 19438                                  
 19439                                  ;============================================================================
 19440                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19441                                  ;============================================================================
 19442                                  ; 23/07/2018 - Retro DOS v3.0
 19443                                  ; 18/05/2019 - Retro DOS v4.0
 19444                                  
 19445                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19446                                  ;
 19447                                  ;	DOS_CLOSE
 19448                                  ;	DOS_COMMIT
 19449                                  ;	FREE_SFT
 19450                                  ;	SetSFTTimes
 19451                                  ;
 19452                                  ;	Revision history:
 19453                                  ;
 19454                                  ;	   AN000  version 4.00	Jan. 1988
 19455                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19456                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19457                                  
 19458                                  ;Installed = TRUE
 19459                                  
 19460                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19461                                  ;---------------------------------------------------------------------------
 19462                                  ;
 19463                                  ; Procedure Name : DOS_CLOSE
 19464                                  ;
 19465                                  ; Inputs:
 19466                                  ;	[THISSFT] set to the SFT for the file being used
 19467                                  ; Function:
 19468                                  ;	Close the indicated file via the SFT
 19469                                  ; Returns:
 19470                                  ;	sf_ref_count decremented otherwise
 19471                                  ;	ES:DI point to SFT
 19472                                  ;	Carry set if error
 19473                                  ;	    AX has error code
 19474                                  ; DS preserved, others destroyed
 19475                                  ;---------------------------------------------------------------------------
 19476                                  
 19477                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19478                                  
 19479                                  ; 18/05/2019 - Retro DOS v4.0
 19480                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19481                                  
 19482                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19483                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19484                                  
 19485                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19486                                  
 19487                                  DOS_CLOSE:
 19488 00002ECA C43E[9E05]              	LES	DI,[THISSFT]
 19489                                  	;mov	bx,[ES:DI+5]
 19490 00002ECE 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19491                                  
 19492                                  ; Network closes are handled entirely by the net code.
 19493                                  
 19494                                  	;;test	bx,8000h
 19495                                  	;TEST	BX,sf_isnet
 19496                                  	; 17/12/2022
 19497                                  	;test	bh,80h
 19498 00002ED2 F6C780                  	test	bh,(sf_isnet>>8)
 19499 00002ED5 7406                    	JZ	short LocalClose
 19500                                  
 19501                                  	;CallInstall Net_Close,MultNET,6
 19502 00002ED7 B80611                  	mov     ax,1106h
 19503 00002EDA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19504                                  			; ES:DI -> SFT
 19505                                  			; SFT DPB field -> DPB of drive containing file
 19506                                  			; Return: CF set on error, AX = DOS error code
 19507                                  			; CF clear if successful
 19508                                  RET2:		; 03/02/2024
 19509 00002EDC C3                      	retn
 19510                                  
 19511                                  ; All closes release the sharing information.
 19512                                  ; No commit releases sharing information
 19513                                  ;
 19514                                  ; All closes decrement the ref count.
 19515                                  ; No commit decrements the ref count.
 19516                                  
 19517                                  LocalClose:
 19518 00002EDD E832E4                  	call	ECritDisk
 19519 00002EE0 E85801                  	CALL	SetSFTTimes
 19520 00002EE3 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19521                                  
 19522                                  ;hkn; SS is DOSDATA
 19523                                  	;Context DS
 19524 00002EE6 16                      	push	ss
 19525 00002EE7 1F                      	pop	ds
 19526                                  
 19527 00002EE8 50                      	push	ax
 19528 00002EE9 53                      	push	bx
 19529 00002EEA E80444                  	call	ShareEnd
 19530 00002EED 5B                      	pop	bx
 19531 00002EEE 58                      	pop	ax
 19532                                  
 19533                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19534                                  
 19535                                  CloseEntry:
 19536 00002EEF 50                      	PUSH	AX
 19537                                  
 19538                                  ; File clean or device does not get stamped nor disk looked at.
 19539                                  
 19540                                  	;test	bx,0C0h
 19541                                  	; 17/12/2022
 19542 00002EF0 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19543                                  	;TEST	BX,devid_file_clean+devid_device
 19544 00002EF3 7403                    	JZ	short rdir
 19545                                  	; 14/11/2022
 19546 00002EF5 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19547                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19548                                  
 19549                                  ; Retrieve the directory entry for the file
 19550                                  
 19551                                  rdir:
 19552 00002EF8 E8D100                  	CALL	DirFromSFT
 19553                                  	;mov	al,5
 19554 00002EFB B005                    	MOV	AL,error_access_denied
 19555 00002EFD 7303                    	JNC	short clook
 19556                                  	; 14/11/2022
 19557 00002EFF E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19558                                  	;jc	short CloseFinish ; 24/07/2019
 19559                                  clook:
 19560                                  
 19561                                  ; ES:DI points to entry
 19562                                  ; DS:SI points to SFT
 19563                                  ; ES:BX points to buffer header
 19564                                  
 19565 00002F02 57                      	push	di
 19566 00002F03 56                      	push	si
 19567                                  	;lea	si,[si+20h]
 19568 00002F04 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19569                                  
 19570                                  ; ES:DI point to directory entry
 19571                                  ; DS:SI point to unpacked name
 19572                                  
 19573 00002F07 E8FAE2                  	call	XCHGP
 19574                                  
 19575                                  ; ES:DI point to unpacked name
 19576                                  ; DS:SI point to directory entry
 19577                                  
 19578 00002F0A E8A00E                  	call	MetaCompare
 19579 00002F0D E8F4E2                  	call	XCHGP
 19580 00002F10 5E                      	pop	si
 19581 00002F11 5F                      	pop	di
 19582 00002F12 740C                    	JZ	short CLOSE_GO		; Name OK
 19583                                  Bye:	
 19584 00002F14 89F7                    	MOV	DI,SI
 19585 00002F16 1E                      	PUSH	DS
 19586 00002F17 07                      	POP	ES			; ES:DI points to SFT
 19587 00002F18 16                      	PUSH	SS
 19588 00002F19 1F                      	POP	DS
 19589 00002F1A F9                      	STC
 19590                                  	;mov	al,2
 19591 00002F1B B002                    	MOV	AL,error_file_not_found
 19592 00002F1D E98E00                  	JMP	CloseFinish ; 24/07/2019
 19593                                  
 19594                                  	; 18/05/2019 - Retro DOS v4.0
 19595                                  CLOSE_GO:
 19596                                  	; 03/02/2024
 19597                                  	;mov	al,[si+4]
 19598 00002F20 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19599                                  	
 19600                                  	; MSDOS 6.0
 19601                                  	;test	word [si+2],8000h
 19602                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19603                                  	; 17/12/2022
 19604                                  	;test	byte [si+3],80h
 19605 00002F23 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19606 00002F27 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19607                                  	; MSDOS 3.3 & MSDOS 6.0
 19608                                  	;mov	ch,[es:di+0Bh]
 19609 00002F29 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19610                                  
 19611                                  	; 03/02/2024
 19612                                  	;;mov	al,[si+4]
 19613                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19614                                  
 19615                                  ;hkn; SS override
 19616 00002F2D 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19617                                  	; MSDOS 3.3
 19618                                  	;;call	MatchAttributes
 19619                                  	;;JNZ	short Bye		; attributes do not match
 19620                                  	; 18/05/2019
 19621 00002F31 EB04                    	JMP	SHORT setattr		;FT.
 19622                                  nofcb:
 19623                                  	; 03/02/2024
 19624                                  	; MSDOS 6.0
 19625                                  	;;mov	al,[si+4]
 19626                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19627                                  
 19628 00002F33 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19629                                  setattr:
 19630                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19631                                  	;or	byte [es:di+0Bh],20h
 19632 00002F37 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19633                                  	; MSDOS 6.0
 19634                                  	;mov	ax,[es:di+1Ah]
 19635 00002F3C 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19636                                  					;F.O. save old first cluster
 19637                                  ;hkn; SS override
 19638 00002F40 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19639                                  
 19640                                  ; 03/02/2024
 19641                                  %if 0
 19642                                  	;mov	ax,[si+0Bh]
 19643                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19644                                  	;mov	[es:di+1Ah],ax
 19645                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19646                                  	;mov	ax,[si+11h]
 19647                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19648                                  	;mov	[es:di+1Ch],ax
 19649                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19650                                  	;mov	ax,[si+13h]
 19651                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19652                                  	;mov	[es:di+1Eh],ax
 19653                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19654                                  	;mov	ax,[si+0Fh]
 19655                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19656                                  	;mov	[es:di+18h],ax
 19657                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19658                                  	;mov	ax,[si+0Dh]
 19659                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19660                                  	;mov	[es:di+16h],ax
 19661                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19662                                  %else
 19663                                  	; 03/02/2024 - Retro DOS v4.1
 19664 00002F44 56                      	push	si
 19665 00002F45 83C60B                  	add	si,0Bh
 19666 00002F48 AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19667                                  	;mov	[es:di+1Ah],ax
 19668 00002F49 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19669 00002F4D AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19670 00002F4E 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19671 00002F52 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19672 00002F53 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19673 00002F57 AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19674 00002F58 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19675 00002F5C AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19676 00002F5D 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19677 00002F61 5E                      	pop	si
 19678                                  %endif
 19679                                  
 19680                                  	; MSDOS 6.0
 19681                                  ;; File Tagging
 19682 00002F62 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19683                                  				  ;LB. if already dirty		    ;AN000;
 19684 00002F67 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19685                                  	; 02/06/2019
 19686 00002F69 E8672B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19687                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19688                                  	;or	byte [es:bx+5],40h
 19689 00002F6C 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19690                                  yesdirty4:
 19691 00002F71 1E                      	push	ds
 19692 00002F72 56                      	push	si
 19693                                  	; MSDOS 6.0
 19694                                  	;mov	cx,[si+0Bh]
 19695                                  	; 07/12/2022
 19696 00002F73 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19697                                  ;hkn; SS override
 19698 00002F76 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19699                                  	; MSDOS 3.3 
 19700                                  	;push	ss
 19701                                  	;pop	ds
 19702                                  	;MOV	AL,[THISDRV]
 19703                                  ;;; 10/1/86  update fastopen cache
 19704                                  	; MSDOS 3.3 & MSDOS 6.0
 19705 00002F7A 52                      	PUSH	DX
 19706 00002F7B B400                    	MOV	AH,0			; dir entry update
 19707 00002F7D 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19708                                  	; MSDOS 6.0
 19709 00002F7F 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19710 00002F81 750D                    	JNZ	short do_update2	;AN005; no, do update
 19711 00002F83 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19712                                  	;mov	di,[si+1Bh]
 19713 00002F85 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19714                                  	;mov	cx,[si+1Dh]
 19715 00002F88 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19716                                  	;mov	dh,[si+1Fh]
 19717 00002F8B 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19718 00002F8E EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19719                                  do_update2:				;AN011;F.O.
 19720                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19721                                  	; 
 19722 00002F90 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19723 00002F95 7407                    	JZ	short do_update		;AN011;F.O. yes
 19724 00002F97 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19725 00002F99 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19726                                  do_update:				;AN005;
 19727                                  ;hkn; SS is DOSDATA
 19728                                  	;Context DS
 19729 00002F9E 16                      	push	ss
 19730 00002F9F 1F                      	pop	ds
 19731                                  	; MSDOS 3.3 & MSDOS 6.0
 19732 00002FA0 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19733 00002FA3 5A                      	POP	DX
 19734                                  
 19735                                  ;;; 10/1/86  update fastopen cache
 19736 00002FA4 E8272A                  	call	FLUSHBUF		; flush all relevant buffers
 19737 00002FA7 5F                      	pop	di
 19738 00002FA8 07                      	pop	es
 19739                                  	;mov	al,5
 19740 00002FA9 B005                    	MOV	AL,error_access_denied
 19741 00002FAB 7201                    	JC	short CloseFinish
 19742                                  FREE_SFT_OK:
 19743 00002FAD F8                      	CLC				; signal no error.
 19744                                  CloseFinish:
 19745                                  
 19746                                  ; Indicate to the device that the SFT is being closed.
 19747                                  
 19748                                  ;;;; 7/21/86
 19749 00002FAE 9C                      	PUSHF				; save flag from DirFromSFT
 19750 00002FAF E8C415                  	call	DEV_CLOSE_SFT
 19751 00002FB2 9D                      	POPF
 19752                                  ;;;; 7/21/86
 19753                                  ;
 19754                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19755                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19756                                  ; going to be moving from busy to free.
 19757                                  ;
 19758 00002FB3 59                      	POP	CX			; get old ref count
 19759 00002FB4 9C                      	PUSHF
 19760                                  	; 03/02/2024
 19761                                  	;DEC	CX			; if cx != 1
 19762                                  	;JNZ	short NoFree		; then do NOT free SFT
 19763 00002FB5 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19764                                  
 19765 00002FB7 26890D                  	mov	[es:di],cx ; 0
 19766                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19767                                  NoFree:
 19768 00002FBA E870E3                  	call	LCritDisk
 19769 00002FBD 9D                      	POPF
 19770 00002FBE C3                      	retn
 19771                                  
 19772                                  ;---------------------------------------------------------------------------
 19773                                  ;
 19774                                  ; Procedure Name : FREE_SFT
 19775                                  ;
 19776                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19777                                  ; Flags preserved. Return old ref count in AX
 19778                                  ;
 19779                                  ; Note that busy is indicated by the SFT ref count being -1.
 19780                                  ;
 19781                                  ;---------------------------------------------------------------------------
 19782                                  
 19783                                  FREE_SFT:
 19784 00002FBF 9C                      	PUSHF		; Save carry state
 19785 00002FC0 268B05                  	mov	ax,[es:di]
 19786                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19787 00002FC3 48                      	DEC	AX
 19788 00002FC4 7501                    	JNZ	short SetCount
 19789 00002FC6 48                      	DEC	AX
 19790                                  SetCount:
 19791 00002FC7 268705                  	xchg	ax,[es:di]
 19792                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19793 00002FCA 9D                      	POPF
 19794 00002FCB C3                      	retn
 19795                                  
 19796                                  	; 18/05/2019 - Retro DOS v4.0
 19797                                  
 19798                                  ;----------------------------------------------------------------------------
 19799                                  ;
 19800                                  ; Procedure Name : DirFromSFT
 19801                                  ;
 19802                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19803                                  ;
 19804                                  ;   Inputs:	ES:DI point to SFT
 19805                                  ;		DS = DOSDATA
 19806                                  ;   Outputs:
 19807                                  ;		EXTERR_LOCUS = errLOC_Disk
 19808                                  ;		CurBuf points to buffer
 19809                                  ;		Carry Clear -> operation OK
 19810                                  ;		    ES:DI point to entry
 19811                                  ;		    ES:BX point to buffer
 19812                                  ;		    DS:SI point to SFT
 19813                                  ;		Carry SET   -> operation failed
 19814                                  ;		    registers trashified
 19815                                  ;   Registers modified: ALL
 19816                                  ;----------------------------------------------------------------------------
 19817                                  
 19818                                  DirFromSFT:
 19819                                  	;mov	byte [EXTERR_LOCUS],2
 19820 00002FCC C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19821 00002FD1 06                      	push	es
 19822 00002FD2 57                      	push	di
 19823                                  	; MSDOS 3.3
 19824                                  	;;mov	dx,[es:di+1Dh]
 19825                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19826                                  	; MSDOS 6.0
 19827                                  	;mov	dx,[es:[di+1Dh]
 19828 00002FD3 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19829 00002FD7 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19830                                  	; 04/02/2024
 19831 00002FDB 52                      	push	dx
 19832                                  	;mov	dx,[es:di+1Bh]
 19833 00002FDC 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19834                                  	; 04/02/2024
 19835                                  	; 19/05/2019
 19836                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19837                                  	; MSDOS 3.3 & MSDOS 6.0
 19838 00002FE0 52                      	PUSH	DX
 19839 00002FE1 E86126                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19840                                  					; [THISDPB] set
 19841 00002FE4 5A                      	POP	DX
 19842 00002FE5 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19843 00002FE9 721E                    	JC	short PopDone
 19844                                  	; 22/09/2023
 19845                                  	;XOR	AL,AL	; *		; Pre read
 19846                                  	;;mov	byte [ALLOWED],18h
 19847                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19848                                  	;call	GETBUFFR
 19849                                  	; 22/09/2023
 19850 00002FEB E8DC28                  	call	GETBUFFER ; * 		; Pre read
 19851 00002FEE 7219                    	JC	short PopDone
 19852 00002FF0 5E                      	pop	si
 19853 00002FF1 1F                      	pop	ds			; Get back SFT pointer
 19854                                  
 19855                                  ;hkn; SS override
 19856 00002FF2 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19857                                  	;or	byte [es:di+5],4
 19858 00002FF7 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19859 00002FFC 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19860                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19861                                  	;lea	di,[di+20] ; MSDOS 6.0
 19862 00002FFE 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19863                                  	;mov	al,32
 19864 00003001 B020                    	MOV	AL,dir_entry.size
 19865                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19866 00003003 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19867 00003006 01C7                    	ADD	DI,AX			; Point at the entry
 19868 00003008 C3                      	retn				; carry is clear
 19869                                  PopDone:
 19870 00003009 5F                      	pop	di
 19871 0000300A 07                      	pop	es
 19872                                  PopDone_retn:
 19873 0000300B C3                      	retn
 19874                                  
 19875                                  ;----------------------------------------------------------------------------
 19876                                  ;
 19877                                  ;**	DOS_Commit - UPdate Directory Entries
 19878                                  ;
 19879                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19880                                  ;		(DS) = DOSGROUP
 19881                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19882                                  ;	USES	all but DS
 19883                                  ;
 19884                                  ;----------------------------------------------------------------------------
 19885                                  
 19886                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19887                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19888                                  
 19889                                  DOS_COMMIT:
 19890                                  	;hkn; called from srvcall. DS already set up.
 19891 0000300C C43E[9E05]              	LES	DI,[THISSFT]
 19892                                  	;mov	bx,[es:di+5]
 19893 00003010 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19894                                  	;test	bx,0C0h
 19895                                  	; 17/12/2022
 19896 00003014 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19897                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19898 00003017 75F2                    	jnz	short PopDone_retn
 19899                                  	;test	bx,8000h
 19900                                  	; 17/12/2022
 19901                                  	;test	bh,80h
 19902 00003019 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19903                                  	;TEST	BX,sf_isnet ; 8000h
 19904 0000301C 7406                    	JZ	short LOCAL_COMMIT
 19905                                  
 19906                                  ;IF NOT Installed
 19907                                  ;	transfer NET_COMMIT
 19908                                  ;ELSE
 19909                                  	;mov	ax,1107h
 19910 0000301E B80711                  	MOV	AX,(MultNET<<8)|7
 19911 00003021 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19912                                  			; ES:DI -> SFT
 19913                                  			; SFT DPB field -> DPB of drive containing file
 19914                                  			; Return: CF set on error, AX = DOS error code
 19915                                  			; CF clear if successful
 19916                                  localcommit_retn: ; 18/12/2022	
 19917 00003023 C3                      	retn
 19918                                  ;ENDIF
 19919                                  
 19920                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19921                                  ; There are three ways we can do this. One is to enter a critical section to
 19922                                  ; protect a potential free. The second is to increment the ref count to mask
 19923                                  ; the close decrementing.
 19924                                  ;
 19925                                  ; The proper way is to let the caller's of close decide if a decrement should
 19926                                  ; be done. We do this by providing another entry into close after the
 19927                                  ; decrement and after the share information release.
 19928                                  
 19929                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19930                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19931                                  
 19932                                  LOCAL_COMMIT:
 19933 00003024 E8EBE2                  	call	ECritDisk
 19934                                  	; MSDOS 6.0
 19935 00003027 E8E8E2                  	call	ECritDisk	;PTM.
 19936 0000302A E80E00                  	call	SetSFTTimes
 19937 0000302D B8FFFF                  	MOV	AX,-1
 19938 00003030 E8BCFE                  	call	CloseEntry
 19939                                  	; MSDOS 6.0
 19940 00003033 9C                      	PUSHF			;PTM.				;AN000;
 19941 00003034 E83715                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19942 00003037 9D                      	POPF			;PTM.				;AN000;
 19943                                  	;call	LCritDisk	;PTM.				;AN000;
 19944                                  	; 18/12/2022
 19945 00003038 E9F2E2                  	jmp	LCritDisk
 19946                                  ;localcommit_retn:
 19947                                  ;	retn
 19948                                  
 19949                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19950                                  ;----------------------------------------------------------------------------
 19951                                  ;
 19952                                  ; Procedure Name : SetSFTTimes
 19953                                  ;
 19954                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19955                                  ;   Reflect these times in other SFT's for the same file.
 19956                                  ;
 19957                                  ;   Inputs:	ES:DI point to SFT
 19958                                  ;		BX = sf_flags set apprpriately
 19959                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19960                                  ;   Registers modified: All except ES:DI, BX, AX
 19961                                  ;
 19962                                  ;----------------------------------------------------------------------------
 19963                                  
 19964                                  	; 04/02/2024 - Retro DOS v4.1
 19965                                  
 19966                                  SetSFTTimes:
 19967                                  
 19968                                  ; 04/02/2024
 19969                                  %if 0
 19970                                  ;	File clean or device does not get stamped nor disk looked at.
 19971                                  	
 19972                                  	;test	bx,0C0h
 19973                                  	; 17/12/2022
 19974                                  	test	bl,devid_file_clean+devid_device
 19975                                  	;TEST	BX,devid_file_clean+devid_device
 19976                                  	;retnz				; clean or device => no timestamp
 19977                                  	jnz	short localcommit_retn
 19978                                  
 19979                                  ;	file and dirty. See if date is good
 19980                                  
 19981                                  	;test	bx,4000h
 19982                                  	; 17/12/2022
 19983                                  	;test	bh,40h
 19984                                  	test	bh,(sf_close_nodate>>8)
 19985                                  	;TEST	BX,sf_close_nodate
 19986                                  	;retnz				; nodate => no timestamp
 19987                                  	jnz	short localcommit_retn
 19988                                  %else
 19989                                  	; 04/02/2024
 19990                                  	; (PCDOS 7.1 IBMDOS.COM)
 19991                                  	;test	bx,40C0h
 19992 0000303B F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 19993 0000303F 75E2                    	jnz	short localcommit_retn
 19994                                  %endif
 19995                                  
 19996 00003041 50                      	push	ax
 19997 00003042 53                      	push	bx
 19998 00003043 E8AFDA                  	call	DATE16			; Date/Time to AX/DX
 19999                                  	;mov	[es:di+0Fh],ax
 20000 00003046 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20001                                  	;mov	[es:di+0Dh],dx
 20002 0000304A 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20003 0000304E 31C0                    	XOR	AX,AX
 20004                                  ;if installed
 20005                                  	;call	JShare + 14 * 4
 20006 00003050 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20007                                  ;else
 20008                                  ;	call	ShSU
 20009                                  ;endif
 20010 00003054 5B                      	pop	bx
 20011 00003055 58                      	pop	ax
 20012 00003056 C3                      	retn
 20013                                  
 20014                                  ;============================================================================
 20015                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20016                                  ;============================================================================
 20017                                  ; 23/07/2018 - Retro DOS v3.0
 20018                                  ; 18/05/2019 - Retro DOS v4.0
 20019                                  
 20020                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20021                                  
 20022                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20023                                  ;NAME  DIRCALL
 20024                                  
 20025                                  ;**	Low level directory manipulation routines for making removing and
 20026                                  ;	  verifying local or NET directories
 20027                                  ;
 20028                                  ;	DOS_MKDIR
 20029                                  ;	DOS_CHDIR
 20030                                  ;	DOS_RMDIR
 20031                                  ;
 20032                                  ;	Modification history:
 20033                                  ;
 20034                                  ;		Created: ARR 30 March 1983
 20035                                  
 20036                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20037                                  ;---------------------------------------------------------------------------
 20038                                  ;
 20039                                  ; Procedure Name : DOS_MkDir
 20040                                  ;
 20041                                  ; Inputs:
 20042                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20043                                  ;		terminated)
 20044                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20045                                  ;		( = -1 if current dir not involved, else
 20046                                  ;		 Points to first char after last "/" of current dir part)
 20047                                  ;	[THISCDS] Points to CDS being used
 20048                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20049                                  ; Function:
 20050                                  ;	Make a new directory
 20051                                  ; Returns:
 20052                                  ;	Carry Clear
 20053                                  ;		No error
 20054                                  ;	Carry Set
 20055                                  ;	    AX is error code
 20056                                  ;		error_path_not_found
 20057                                  ;			Bad path (not in curr dir part if present)
 20058                                  ;		error_bad_curr_dir
 20059                                  ;			Bad path in current directory part of path
 20060                                  ;		error_access_denied
 20061                                  ;			Already exists, device name
 20062                                  ; DS preserved, Others destroyed
 20063                                  ;---------------------------------------------------------------------------
 20064                                  
 20065                                  ;hkn; called from path.asm. DS already set up.
 20066                                  
 20067                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20068                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20069                                  
 20070                                  ; 04/02/2024 - Retro DOS v4.1
 20071                                  
 20072                                  DOS_MKDIR:
 20073 00003057 E8F6E1                  	call	TestNet
 20074 0000305A 7313                    	JNC	short LOCAL_MKDIR
 20075                                  
 20076                                  ;IF NOT Installed
 20077                                  ;	transfer NET_MKDIR
 20078                                  ;ELSE
 20079                                  	;mov	ax,1103h
 20080 0000305C B80311                  	MOV	AX,(MultNET<<8)|3
 20081 0000305F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20082                                  			; SS = DOS CS
 20083                                  			; SDA first filename pointer -> fully-qualified directory name
 20084                                  			; SDA CDS pointer -> current directory
 20085                                  			; Return: CF set on error, AX = DOS error code
 20086                                  			; CF clear if successful
 20087 00003061 C3                      	retn
 20088                                  ;ENDIF
 20089                                  
 20090                                  NODEACCERRJ:
 20091                                  	;mov	ax,5
 20092 00003062 B80500                  	MOV	AX,error_access_denied
 20093                                  _BadRet:
 20094 00003065 F9                      	STC
 20095                                  	;call	LCritDisk
 20096                                  	;retn
 20097                                  	; 18/12/2022
 20098 00003066 E9C4E2                  	jmp	LCritDisk
 20099                                  
 20100                                  PATHNFJ:
 20101 00003069 E8C1E2                  	call	LCritDisk
 20102 0000306C E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20103                                  
 20104                                  LOCAL_MKDIR:
 20105 0000306F E8A0E2                  	call	ECritDisk
 20106                                  
 20107                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20108                                  
 20109 00003072 8C16[A005]              	MOV	[THISSFT+2],SS
 20110                                  
 20111                                  ;hkn; DOSDATA
 20112 00003076 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20113                                  
 20114                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20115                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20116                                  
 20117                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20118 0000307C C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20119                                  				; make sure SHARER won't complain.
 20120                                  	;mov	al,10h
 20121 00003082 B010                    	MOV	AL,attr_directory
 20122 00003084 E88618                  	call	MakeNode
 20123 00003087 72E0                    	JC	short PATHNFJ
 20124 00003089 83F803                  	CMP	AX,3
 20125 0000308C 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20126 0000308E C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20127 00003092 C53E[E205]              	LDS	DI,[CURBUF]
 20128 00003096 29FE                    	SUB	SI,DI
 20129 00003098 56                      	PUSH	SI		; Pointer to dir_first
 20130                                  
 20131                                  ; 04/02/2024
 20132                                  %if 0
 20133                                  	; MSDOS 6.0
 20134                                  	;push	word [DI+8]
 20135                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20136                                  	; MSDOS 3.3 & MSDOS 6.0
 20137                                  	;push	word [di+6]
 20138                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20139                                  %else
 20140                                  	; 04/02/2024
 20141                                  	; (PCDOS 7.1 IBMDOS.COM)
 20142 00003099 C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20143 0000309C 1E                      	push	ds
 20144 0000309D 50                      	push	ax
 20145                                  %endif
 20146                                  
 20147 0000309E 16                      	push	ss
 20148 0000309F 1F                      	pop	ds
 20149                                  
 20150                                  	; 04/02/2024
 20151                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20152 000030A0 31C0                    	XOR	AX,AX
 20153                                  	;MOV	[DIRSTART],AX	; Null directory
 20154 000030A2 8706[C205]              	xchg	ax,[DIRSTART]
 20155 000030A6 50                      	push	ax
 20156                                  
 20157 000030A7 E89F17                  	call	NEWDIR
 20158 000030AA 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20159 000030AC E8650D                  	call	GETENT		; First entry
 20160 000030AF 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20161 000030B1 C43E[E205]              	LES	DI,[CURBUF]
 20162                                  
 20163                                  	; MSDOS 6.0
 20164 000030B5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20165                                  				 ;LB. if already dirty		    ;AN000;
 20166 000030BA 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20167 000030BC E8142A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20168                                  	
 20169                                  	; MSDOS 3.3 & MSDOS 6.0
 20170                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20171 000030BF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20172                                  yesdirty5:
 20173                                  	;;add	di,16 ; MSDOS 3.3
 20174                                  	;add	di,20 ; MSDOS 6.0
 20175 000030C4 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20176 000030C7 B82E20                  	MOV	AX,202EH	; ". "
 20177 000030CA 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20178 000030CE E81818                  	call	SETDOTENT
 20179 000030D1 B82E2E                  	MOV	AX,2E2EH	; ".."
 20180 000030D4 5A                      	POP	DX		; Parent
 20181 000030D5 E81118                  	call	SETDOTENT
 20182 000030D8 C42E[8A05]              	LES	BP,[THISDPB]
 20183                                  	; 22/09/2023
 20184                                  	;;mov	byte [ALLOWED],18h
 20185                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20186 000030DC 5A                      	POP	DX		; Entry sector
 20187                                  	; MSDOS 6.0
 20188 000030DD 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20189                                  
 20190                                  	;XOR	AL,AL ; *	; Pre read
 20191                                  	;call	GETBUFFR
 20192                                  	; 22/09/2023
 20193 000030E1 E8E627                  	call	GETBUFFER ; *	 ;Pre read
 20194 000030E4 725B                    	JC	short NODEEXISTSP
 20195 000030E6 8B16[C205]              	MOV	DX,[DIRSTART]
 20196 000030EA C53E[E205]              	LDS	DI,[CURBUF]
 20197                                  	;or	byte [di+5],4
 20198 000030EE 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20199 000030F2 5E                      	POP	SI		; dir_first pointer
 20200 000030F3 01FE                    	ADD	SI,DI
 20201 000030F5 8914                    	MOV	[SI],DX
 20202 000030F7 31D2                    	XOR	DX,DX
 20203 000030F9 895402                  	MOV	[SI+2],DX	; Zero size
 20204 000030FC 895404                  	MOV	[SI+4],DX
 20205                                  DIRUP:
 20206                                  	; MSDOS 6.0
 20207 000030FF F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20208                                  	;			 ;LB. if already dirty 		   ;AN000;
 20209 00003103 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20210 00003105 E8CB29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20211                                  	
 20212                                  	; MSDOS 3.3 & MSDOS 6.0
 20213                                  	;or	byte [di+5],40h
 20214 00003108 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20215                                  yesdirty6:
 20216 0000310C 16                      	push	ss
 20217 0000310D 1F                      	pop	ds
 20218 0000310E 268A4600                	mov	al,[es:bp]
 20219                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20220 00003112 E8B928                  	call	FLUSHBUF
 20221                                  	;mov	ax,5
 20222 00003115 B80500                  	MOV	AX,error_access_denied
 20223                                  	;call	LCritDisk
 20224                                  	;retn
 20225                                  	; 18/12/2022
 20226 00003118 E912E2                  	jmp	LCritDisk
 20227                                  
 20228                                  NODEEXISTSPOPDEL:
 20229 0000311B 5A                      	POP	DX		; Parent
 20230 0000311C 5A                      	POP	DX		; Entry sector
 20231                                  	; MSDOS 6.0 
 20232 0000311D 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20233 00003121 C42E[8A05]              	LES	BP,[THISDPB]
 20234                                  	; 22/09/2023
 20235                                  	;;mov	byte [ALLOWED],18h
 20236                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20237                                  	;XOR	AL,AL ; *	; Pre read
 20238                                  	;call	GETBUFFR
 20239                                  	; 22/09/2023
 20240 00003125 E8A227                  	call	GETBUFFER ; *	; Pre read
 20241 00003128 7217                    	JC	short NODEEXISTSP
 20242 0000312A C53E[E205]              	LDS	DI,[CURBUF]
 20243                                  	;or	byte [di+5],4
 20244 0000312E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20245 00003132 5E                      	POP	SI		; dir_first pointer
 20246 00003133 01FE                    	ADD	SI,DI
 20247                                  	;sub	si,1Ah ; 26
 20248 00003135 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20249 00003138 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20250 0000313B E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20251                                  NODEEXISTS:
 20252 0000313E E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20253                                  
 20254                                  NODEEXISTSP:
 20255 00003141 5E                      	POP	SI		; Clean stack
 20256 00003142 EBFA                    	JMP	short NODEEXISTS
 20257                                  
 20258                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20259                                  
 20260                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20261                                  ;----------------------------------------------------------------------------
 20262                                  ;
 20263                                  ; Procedure Name : DOS_ChDir
 20264                                  ;
 20265                                  ; Inputs:
 20266                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20267                                  ;		terminated)
 20268                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20269                                  ;		( = -1 if current dir not involved, else
 20270                                  ;		 Points to first char after last "/" of current dir part)
 20271                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20272                                  ; Function:
 20273                                  ;	Validate the path for potential new current directory
 20274                                  ; Returns:
 20275                                  ;	NOTE:
 20276                                  ;	    [SATTRIB] is modified by this call
 20277                                  ;	Carry Clear
 20278                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20279                                  ;		Caller must NOT set ID fields on a NET CDS.
 20280                                  ;	Carry Set
 20281                                  ;	    AX is error code
 20282                                  ;		error_path_not_found
 20283                                  ;			Bad path
 20284                                  ;		error_access_denied
 20285                                  ;			device or file name
 20286                                  ; DS preserved, Others destroyed
 20287                                  ;----------------------------------------------------------------------------
 20288                                  
 20289                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20290                                  
 20291                                  ; 18/05/2019 - Retro DOS v4.0
 20292                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20293                                  
 20294                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20295                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20296                                  
 20297                                  DOS_CHDIR:
 20298 00003144 E809E1                  	call	TestNet
 20299 00003147 7306                    	JNC	short LOCAL_CHDIR
 20300                                  
 20301                                  ;IF NOT Installed
 20302                                  ;	transfer NET_CHDIR
 20303                                  ;ELSE
 20304                                  	;mov	ax,1105h
 20305 00003149 B80511                  	MOV	AX,(MultNET<<8)|5
 20306 0000314C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20307                                  			; SS = DOS CS
 20308                                  			; SDA first filename pointer -> fully-qualified directory name
 20309                                  			; SDA CDS pointer -> current directory
 20310                                  			; Return: CF set on error, AX = DOS error code
 20311                                  			; CF clear if successful
 20312 0000314E C3                      	retn
 20313                                  ;ENDIF
 20314                                  
 20315                                  LOCAL_CHDIR:
 20316 0000314F E8C0E1                  	call	ECritDisk
 20317                                  	; MSDOS 6.0
 20318                                  	;;test	word [es:di+43h],2000h
 20319                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20320                                  	; 17/12/2022
 20321                                  	;test	byte [es:di+44h],20h
 20322 00003152 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20323 00003157 7406                    	JZ	short nojoin		   ;PTM.
 20324                                  	;mov	word [es:di+49h], 0FFFFh
 20325 00003159 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20326                                  nojoin:
 20327                                  	; MSDOS 3.3 & MSDOS 6.0
 20328 0000315F C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20329                                  	;mov	byte [SATTRIB],16h
 20330 00003164 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20331                                  				; Dir calls can find these
 20332                                  ; DOS 3.3  6/24/86 FastOpen
 20333 00003169 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20334 0000316E E82F0D                  	call	GETPATH
 20335 00003171 9C                      	PUSHF						;AN000;
 20336 00003172 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20337 00003177 9D                      	POPF						;AN000;
 20338                                  ; DOS 3.3  6/24/86 FastOpen
 20339                                  
 20340                                  	; MSDOS 3.3
 20341                                  	;mov	byte [FastOpenFlg],0
 20342                                  	
 20343                                  	;mov	ax,3
 20344 00003178 B80300                  	MOV	AX,error_path_not_found
 20345 0000317B 7207                    	JC	short ChDirDone
 20346 0000317D 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20347 0000317F 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20348 00003183 F8                      	CLC
 20349                                  ChDirDone:
 20350                                  	;call	LCritDisk
 20351                                  	;retn
 20352                                  	; 18/12/2022
 20353 00003184 E9A6E1                  	jmp	LCritDisk
 20354                                  
 20355                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20356                                  ;----------------------------------------------------------------------------
 20357                                  ;
 20358                                  ; Procedure Name : DOS_RmDir
 20359                                  ;
 20360                                  ; Inputs:
 20361                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20362                                  ;		terminated)
 20363                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20364                                  ;		( = -1 if current dir not involved, else
 20365                                  ;		 Points to first char after last "/" of current dir part)
 20366                                  ;	[THISCDS] Points to CDS being used
 20367                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20368                                  ; Function:
 20369                                  ;	Remove a directory
 20370                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20371                                  ; Returns:
 20372                                  ;	NOTE:
 20373                                  ;	    [SATTRIB] is modified by this call
 20374                                  ;	Carry Clear
 20375                                  ;		No error
 20376                                  ;	Carry Set
 20377                                  ;	    AX is error code
 20378                                  ;		error_path_not_found
 20379                                  ;			Bad path (not in curr dir part if present)
 20380                                  ;		error_bad_curr_dir
 20381                                  ;			Bad path in current directory part of path
 20382                                  ;		error_access_denied
 20383                                  ;			device or file name, root directory
 20384                                  ;			Bad directory ('.' '..' messed up)
 20385                                  ; DS preserved, Others destroyed
 20386                                  ;----------------------------------------------------------------------------
 20387                                  
 20388                                  ;hkn; called from path.asm. DS already set up.
 20389                                  
 20390                                  ; 18/05/2019 - Retro DOS v4.0
 20391                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20392                                  
 20393                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20394                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20395                                  
 20396                                  DOS_RMDIR:
 20397 00003187 E8C6E0                  	call	TestNet
 20398 0000318A 7306                    	JNC	short LOCAL_RMDIR
 20399                                  
 20400                                  ;IF NOT Installed
 20401                                  ;	transfer NET_RMDIR
 20402                                  ;ELSE
 20403                                  	;mov	ax,1101h
 20404 0000318C B80111                  	MOV	AX,(MultNET<<8)|1
 20405 0000318F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20406                                  			; SS = DOS CS
 20407                                  			; SDA first filename pointer -> fully-qualified directory name
 20408                                  			; SDA CDS pointer -> current directory
 20409                                  			; Return: CF set on error, AX = DOS error code
 20410                                  			; CF clear if successful
 20411 00003191 C3                      	retn
 20412                                  ;ENDIF
 20413                                  
 20414                                  LOCAL_RMDIR:
 20415 00003192 E87DE1                  	call	ECritDisk
 20416 00003195 C606[4C03]00            	MOV	byte [NoSetDir],0
 20417                                  	;mov	byte [SATTRIB],16h
 20418 0000319A C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20419                                  					; Dir calls can find these
 20420 0000319F E8FE0C                  	call	GETPATH
 20421 000031A2 720C                    	JC	short NOPATH		; Path not found
 20422 000031A4 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20423 000031A6 8B3E[C205]              	MOV	DI,[DIRSTART]
 20424 000031AA 09FF                    	OR	DI,DI			; Root ?
 20425 000031AC 750E                    	JNZ	short rmdir_get_buf	; No
 20426 000031AE EB09                    	JMP	SHORT NOTDIRPATH
 20427                                  
 20428                                  NOPATH:
 20429                                  	;mov	ax,3
 20430 000031B0 B80300                  	MOV	AX,error_path_not_found
 20431 000031B3 E9AFFE                  	JMP	_BadRet
 20432                                  
 20433                                  NOTDIRPATHPOP:
 20434 000031B6 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20435 000031B7 58                      	POP	AX
 20436                                  NOTDIRPATHPOP2:
 20437 000031B8 58                      	POP	AX
 20438                                  NOTDIRPATH:
 20439 000031B9 E9A6FE                  	JMP	NODEACCERRJ
 20440                                  
 20441                                  rmdir_get_buf:
 20442 000031BC C53E[E205]              	LDS	DI,[CURBUF]
 20443 000031C0 29FB                    	SUB	BX,DI		; Compute true offset
 20444 000031C2 53                      	PUSH	BX		; Save entry pointer
 20445                                  	
 20446                                  	; MSDOS 6.0
 20447                                  	;push	word [di+8]
 20448 000031C3 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20449                                  	
 20450                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20451                                  	;push	word [di+6]
 20452 000031C6 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20453                                  
 20454                                  ;hkn; SS is DOSDATA
 20455                                  	;context DS
 20456 000031C9 16                      	push	ss
 20457 000031CA 1F                      	pop	ds
 20458                                  	;context ES
 20459 000031CB 16                      	push	ss
 20460 000031CC 07                      	pop	es
 20461                                  
 20462                                  ;hkn; NAME1 is in DOSDATA
 20463 000031CD BF[4B05]                	MOV	DI,NAME1
 20464 000031D0 B03F                    	MOV	AL,'?'
 20465 000031D2 B90B00                  	MOV	CX,11
 20466 000031D5 F3AA                    	REP	STOSB
 20467 000031D7 30C0                    	XOR	AL,AL
 20468 000031D9 AA                      	STOSB				; Nul terminate it
 20469 000031DA E8570F                  	call	STARTSRCH		; Set search
 20470 000031DD E8310C                  	call	GETENTRY		; Get start of directory
 20471 000031E0 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20472 000031E2 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20473 000031E6 89DE                    	MOV	SI,BX
 20474 000031E8 AD                      	LODSW
 20475                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20476 000031E9 3D2E20                  	cmp	ax,202Eh ; ". "
 20477 000031EC 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20478                                  	;add	si,30
 20479 000031EE 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20480 000031F1 AD                      	LODSW
 20481                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20482                                  	;cmp	ax, '..'
 20483 000031F2 3D2E2E                  	cmp	ax,2E2Eh
 20484 000031F5 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20485                                  
 20486                                  ;hkn; SS is DOSDATA
 20487                                  	;context DS
 20488 000031F7 16                      	push	ss
 20489 000031F8 1F                      	pop	ds
 20490 000031F9 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20491 000031FF E80F0C                  	call	GETENTRY		; Get next entry
 20492 00003202 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20493                                  	;mov	byte [ATTRIB],16h
 20494 00003204 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20495 00003209 E80D0B                  	call	SRCH			; Do a search
 20496 0000320C 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20497 0000320E 803E[4A03]00            	CMP	byte [FAILERR],0
 20498 00003213 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20499 00003215 C42E[8A05]              	LES	BP,[THISDPB]
 20500 00003219 8B1E[C205]              	MOV	BX,[DIRSTART]
 20501 0000321D E8211C                  	call	RELEASE 		; Release data in sub dir
 20502 00003220 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20503 00003222 5A                      	POP	DX			; Sector # of entry
 20504 00003223 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20505                                  	; 22/09/2023
 20506                                  	;;mov	byte [ALLOWED],18h
 20507                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20508                                  	;XOR	AL,AL ; *		; Pre read
 20509                                  	;call	GETBUFFR		; Get sector back
 20510 00003227 E8A026                  	call	GETBUFFER ; *		; Pre Read
 20511 0000322A 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20512 0000322C C53E[E205]              	LDS	DI,[CURBUF]
 20513                                  	;or	byte [di+5],4
 20514 00003230 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20515 00003234 5B                      	POP	BX			; Pointer to start of entry
 20516 00003235 01FB                    	ADD	BX,DI			; Corrected
 20517 00003237 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20518                                  
 20519                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20520 0000323A 1E                      	PUSH	DS
 20521                                  
 20522                                  ;hkn; SS is DOSDATA
 20523                                  	;context DS
 20524 0000323B 16                      	push	ss
 20525 0000323C 1F                      	pop	ds
 20526                                  
 20527                                  	; MSDOS 6.0
 20528 0000323D E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20529                                  
 20530                                  ;	; MSDOS 3.3
 20531                                  ;_FastOpen_Delete:
 20532                                  ;	push	ax
 20533                                  ;	mov	si,[WFP_START]
 20534                                  ;	mov	bx,FastTable
 20535                                  ;	;mov	al,3  ; FONC_delete
 20536                                  ;	mov	al,FONC_delete
 20537                                  ;	call	far [BX+2]  ; FastTable+2
 20538                                  ;	pop	ax
 20539                                  
 20540 00003240 1F                      	POP	DS
 20541                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20542                                  
 20543 00003241 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20544                                  
 20545                                  ;============================================================================
 20546                                  ; DISK.ASM, MSDOS 6.0, 1991
 20547                                  ;============================================================================
 20548                                  ; 23/07/2018 - Retro DOS v3.0 
 20549                                  ; 04/05/2019 - Retro DOS v4.0
 20550                                  
 20551                                  ;	TITLE	DISK - Disk utility routines
 20552                                  ;	NAME	Disk
 20553                                  
 20554                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20555                                  ;
 20556                                  ;	SWAPCON
 20557                                  ;	SWAPBACK
 20558                                  ;	DOS_READ
 20559                                  ;	DOS_WRITE
 20560                                  ;	get_io_sft
 20561                                  ;	DirRead
 20562                                  ;	FIRSTCLUSTER
 20563                                  ;	SET_BUF_AS_DIR
 20564                                  ;	FATSecRd
 20565                                  ;	DREAD
 20566                                  ;	CHECK_WRITE_LOCK
 20567                                  ;	CHECK_READ_LOCK
 20568                                  ;
 20569                                  ;	Revision history:
 20570                                  ;
 20571                                  ;		A000   version 4.00  Jan. 1988
 20572                                  ;
 20573                                  ;----------------------------------------------------------------------------
 20574                                  ;
 20575                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20576                                  ;		error happens, DOS retries the entire block assuming that
 20577                                  ;		zero characters were transferred. Modified the code to take
 20578                                  ;		into account the number of characters transfered before
 20579                                  ;		retrying the operation.
 20580                                  ;
 20581                                  ;----------------------------------------------------------------------------
 20582                                  ;
 20583                                  
 20584                                  ;Installed = TRUE
 20585                                  
 20586                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20587                                  
 20588                                  ; **** Drivers for file input from devices ****
 20589                                  ;----------------------------------------------------------------------------
 20590                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20591                                  ;   of handles 0 and 1
 20592                                  ;
 20593                                  ;   Inputs:	DS is DOSDATA
 20594                                  ;   Outputs:	CONSWAP is set to false.
 20595                                  ;   Registers modified: none
 20596                                  ;----------------------------------------------------------------------------
 20597                                  
 20598                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20599                                  
 20600                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20601                                  ; 04/05/2019 - Retro DOS v4.0
 20602                                  
 20603                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20604                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20605                                  
 20606                                  SWAPBACK:
 20607 00003244 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20608 00003249 C3                      	retn
 20609                                  
 20610                                  ;----------------------------------------------------------------------------
 20611                                  ;
 20612                                  ; Procedure Name : SWAPCON
 20613                                  ;
 20614                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20615                                  ;
 20616                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20617                                  ;		DS is DOSDATA
 20618                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20619                                  ;   Registers modified: none
 20620                                  ;--------------------------------------------------------------------------
 20621                                  
 20622                                  SWAPCON:
 20623                                  	; MSDOS 3.3
 20624                                  	;push	es
 20625                                  	;push	di
 20626                                  	;mov	byte [CONSWAP],1
 20627                                  	;les	di,[THISSFT]
 20628                                  	;mov	word [CONSFT],di
 20629                                  	;mov	word [CONSFT+2],es
 20630                                  	;pop	di
 20631                                  	;pop	es
 20632                                  	;retn
 20633                                  
 20634                                  	; MSDOS 6.0
 20635 0000324A C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20636 0000324F 50                      	push	ax
 20637 00003250 A1[9E05]                	mov	ax,[THISSFT]
 20638 00003253 A3[E605]                	mov	[CONSFT],ax
 20639 00003256 A1[A005]                	mov	ax,[THISSFT+2]
 20640 00003259 A3[E805]                	mov	[CONSFT+2],ax
 20641 0000325C 58                      	pop	ax
 20642 0000325D C3                      	retn
 20643                                  
 20644                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20645                                  ; 04/05/2019 - Retro DOS v4.0
 20646                                  
 20647                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20648                                  ;-----------------------------------------------------------------------------
 20649                                  ;
 20650                                  ; Inputs:
 20651                                  ;	ThisSFT set to the SFT for the file being used
 20652                                  ;	[DMAADD] contains transfer address
 20653                                  ;	CX = No. of bytes to read
 20654                                  ;	DS = DOSDATA
 20655                                  ; Function:
 20656                                  ;	Perform read operation
 20657                                  ; Outputs:
 20658                                  ;    Carry clear
 20659                                  ;	SFT Position and cluster pointers updated
 20660                                  ;	CX = No. of bytes read
 20661                                  ;	ES:DI point to SFT
 20662                                  ;    Carry set
 20663                                  ;	AX is error code
 20664                                  ;	CX = 0
 20665                                  ;	ES:DI point to SFT
 20666                                  ; DS preserved, all other registers destroyed
 20667                                  ;
 20668                                  ;-----------------------------------------------------------------------------
 20669                                  
 20670                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20671                                  
 20672                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20673                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20674                                  
 20675                                  DOS_READ:
 20676 0000325E C43E[9E05]              	LES	DI,[THISSFT]
 20677                                  
 20678                                  ; Verify that the sft has been opened in a mode that allows reading.
 20679                                  
 20680                                  	;mov	al,[es:di+2]
 20681 00003262 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20682                                  	;and	al,0Fh
 20683 00003266 240F                    	AND	AL,access_mask
 20684                                  	;cmp	al,1
 20685 00003268 3C01                    	CMP	AL,open_for_write
 20686 0000326A 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20687 0000326C E90306                  	jmp	SET_ACC_ERR
 20688                                  
 20689                                  READ_NO_MODE:
 20690 0000326F E8E104                  	call	SETUP
 20691 00003272 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20692 00003274 E8F2DF                  	call	IsSFTNet
 20693 00003277 7408                    	JZ	short LOCAL_READ
 20694                                  
 20695                                  ;IF NOT Installed
 20696                                  ;	transfer NET_READ
 20697                                  ;ELSE
 20698                                  	;mov	ax,1108h
 20699 00003279 B80811                  	MOV	AX,(MultNET<<8)|8
 20700 0000327C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20701                                  			; ES:DI -> SFT
 20702                                  			; SFT DPB field -> DPB of drive containing file
 20703                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20704                                  			; Return: CF set on error, CX = bytes read
 20705 0000327E C3                      	retn
 20706                                  ;ENDIF
 20707                                  
 20708                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20709                                  ; except return immediately.
 20710                                  
 20711                                  NoIORet:
 20712 0000327F F8                      	CLC
 20713 00003280 C3                      	retn
 20714                                  
 20715                                  LOCAL_READ:
 20716                                  	;test	word [es:di+5],80h
 20717                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20718 00003281 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20719 00003286 750E                    	JNZ	short READDEV
 20720                                  
 20721                                  	;mov	byte [EXTERR_LOCUS],2
 20722 00003288 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20723 0000328D E882E0                  	call	ECritDisk
 20724 00003290 E89B05                  	call	DISKREAD
 20725                                  
 20726                                  critexit:
 20727                                  	;call	LCritDisk
 20728                                  	;retn
 20729                                  	; 16/12/2022
 20730 00003293 E997E0                  	jmp	LCritDisk
 20731                                  
 20732                                  ; We are reading from a device. Examine the status of the device to see if we
 20733                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20734                                  ; null device, we can safely indicate no transfer.
 20735                                  
 20736                                  READDEV:
 20737                                  	;mov	byte [EXTERR_LOCUS],4
 20738 00003296 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20739                                  	;mov	bl,[es:di+5]
 20740 0000329B 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20741 0000329F C43E[2C03]              	LES	DI,[DMAADD]
 20742                                  	;test	bl,40h
 20743 000032A3 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20744 000032A6 7407                    	JZ	short ENDRDDEVJ3
 20745                                  	;test	bl,4
 20746 000032A8 F6C304                  	test	BL,devid_device_null	; NUL device?
 20747 000032AB 7405                    	JZ	short TESTRAW 		; NO
 20748 000032AD 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20749                                  ENDRDDEVJ3:
 20750                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20751                                  	;JMP	short ENDRDDEVJ2
 20752                                  	; 16/12/2022
 20753 000032AF E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20754                                  
 20755                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20756                                  ; bizarre std_con_string_input.
 20757                                  
 20758                                  TESTRAW:
 20759                                  	;test	bl,20h
 20760 000032B2 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20761 000032B5 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20762                                  	;test	bl,1
 20763 000032B7 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20764 000032BA 7461                    	JZ	short NOTRDCON
 20765 000032BC E98F01                  	JMP	READCON
 20766                                  
 20767                                  DVRDRAW:
 20768 000032BF 06                      	PUSH	ES
 20769 000032C0 1F                      	POP	DS			; Xaddr to DS:DI
 20770                                  
 20771                                  	; 04/05/2019 - Retro DOS v4.0
 20772                                  
 20773                                  	; MSDOS 6.0
 20774                                  ;SR;
 20775                                  ;Check for win386 presence -- if present, do polled read of characters
 20776                                  
 20777 000032C1 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20778 000032C7 7408                    	jz	short ReadRawRetry	;not present
 20779 000032C9 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20780 000032CC 7403                    	jz	short ReadRawRetry	;no, do normal read
 20781 000032CE E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20782                                  
 20783                                  ReadRawRetry:
 20784 000032D1 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20785 000032D3 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20786 000032D5 89C2                    	MOV	DX,AX			; Start at 0
 20787 000032D7 E88E13                  	call	SETREAD
 20788 000032DA 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20789                                  
 20790                                  ;hkn; SS override
 20791 000032DB 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20792 000032E0 E80C13                  	call	DEVIOCALL
 20793 000032E3 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20794 000032E5 B486                    	MOV	AH,86H			; Read error
 20795                                  
 20796                                  ;hkn; SS override
 20797 000032E7 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20798                                  	; MSDOS 3.3
 20799                                  	;test	di,8000h
 20800                                  	;jz	short CRDROK
 20801                                  	; MSDOS 6.0
 20802 000032EC 09FF                    	or	di,di
 20803 000032EE 7923                    	jns	short CRDROK		; no errors
 20804                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20805 000032F0 E8611F                  	call	CHARHARD
 20806 000032F3 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20807                                  
 20808                                  	; 04/05/2019
 20809                                  
 20810                                  	; MSDOS 6.0
 20811 000032F5 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20812 000032FA 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20813                                  
 20814                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20815 000032FF 08C0                    	OR	AL,AL
 20816 00003301 7410                    	JZ	short CRDROK		; Ignore
 20817 00003303 3C03                    	CMP	AL,3
 20818 00003305 7403                    	JZ	short CRDFERR 		; fail.
 20819 00003307 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20820 00003308 EBC7                    	JMP	short ReadRawRetry	; Retry
 20821                                  
 20822                                  ; We have encountered a device-driver error. We have informed the user of it
 20823                                  ; and he has said for us to fail the system call.
 20824                                  
 20825                                  CRDFERR:
 20826 0000330A 5F                      	POP	DI			; Clean stack
 20827                                  DEVIOFERR:
 20828                                  
 20829                                  ;hkn; SS override
 20830 0000330B 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20831 00003310 E95D05                  	jmp	SET_ACC_ERR_DS
 20832                                  
 20833                                  CRDROK:
 20834 00003313 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20835 00003314 89D7                    	MOV	DI,DX
 20836                                  
 20837                                  ;hkn; SS override
 20838 00003316 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20839                                  	;JMP	SHORT ENDRDDEVJ3
 20840                                  	; 16/12/2022
 20841 0000331B EB6B                    	jmp	short ENDRDDEVJ2
 20842                                  
 20843                                  ; We are going to do a cooked read on some character device. There is a
 20844                                  ; problem here, what does the data look like? Is it a terminal device, line
 20845                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20846                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20847                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20848                                  ; included in data). this "simulates" the way con works in cooked mode
 20849                                  ; reading one line at a time. With file data, however, the lines will look
 20850                                  ; like, LF line CR. This is a little weird.
 20851                                  
 20852                                  NOTRDCON:
 20853 0000331D 8CC0                    	MOV	AX,ES
 20854 0000331F 8ED8                    	MOV	DS,AX
 20855 00003321 89FB                    	MOV	BX,DI
 20856 00003323 31D2                    	XOR	DX,DX
 20857 00003325 89D0                    	MOV	AX,DX
 20858 00003327 51                      	PUSH	CX
 20859 00003328 B90100                  	MOV	CX,1
 20860 0000332B E83A13                  	call	SETREAD
 20861 0000332E 59                      	POP	CX
 20862                                  
 20863                                  ;hkn; SS override
 20864 0000332F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20865                                  	;lds	si,[si+7]
 20866 00003334 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20867                                  DVRDLP:
 20868 00003337 E8FB1C                  	call	DSKSTATCHK
 20869 0000333A E8B512                  	call	DEVIOCALL2
 20870 0000333D 57                      	PUSH	DI		; Save "count" done
 20871 0000333E B486                    	MOV	AH,86H
 20872                                  
 20873                                  ;hkn; SS override
 20874 00003340 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20875                                  	
 20876                                  	; MSDOS 3.3
 20877                                  	;test	di,8000h
 20878                                  	;jz	short CRDOK
 20879                                  	; MSDOS 6.0
 20880 00003345 09FF                    	or	di,di
 20881 00003347 7917                    	jns	short CRDOK
 20882                                  	
 20883 00003349 E8081F                  	call	CHARHARD
 20884 0000334C 5F                      	POP	DI
 20885                                  
 20886                                  ;hkn; SS override
 20887 0000334D 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20888 00003354 3C01                    	CMP	AL,1
 20889 00003356 74DF                    	JZ	short DVRDLP		;Retry
 20890 00003358 3C03                    	CMP	AL,3
 20891 0000335A 74AF                    	JZ	short DEVIOFERR		; FAIL
 20892 0000335C 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20893 0000335E EB12                    	JMP	SHORT DVRDIGN
 20894                                  
 20895                                  CRDOK:
 20896 00003360 5F                      	POP	DI
 20897                                  
 20898                                  ;hkn; SS override
 20899 00003361 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20900                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20901 00003367 751F                    	JNZ	short ENDRDDEVJ2
 20902                                  	; 16/12/2022
 20903                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20904                                  
 20905 00003369 1E                      	PUSH	DS
 20906                                  
 20907                                  ;hkn; SS override
 20908 0000336A 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20909 0000336F 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20910 00003371 1F                      	POP	DS
 20911                                  DVRDIGN:
 20912                                  
 20913                                  ;hkn; SS override
 20914 00003372 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20915 00003377 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20916 0000337E 47                      	INC	DI			; Next character
 20917 0000337F 3C1A                    	CMP	AL,1Ah			; ^Z?
 20918                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20919 00003381 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20920                                  	; 16/12/2022
 20921                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20922 00003383 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20923 00003385 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20924 00003387 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20925                                  					;  AX=FFFF which is not likely
 20926                                  ENDRDDEVJ2:
 20927                                  	; 16/12/2022
 20928                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20929                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20930 00003388 E98E00                  	jmp	ENDRDDEV
 20931                                  
 20932                                  	; 04/05/2019
 20933                                  
 20934                                  	; MSDOS 6.0
 20935                                  ;SR;
 20936                                  ;Polling code for raw read on CON when WIN386 is present
 20937                                  ;
 20938                                  ;At this point -- ds:di is transfer address
 20939                                  ;		  cx is count
 20940                                  
 20941                                  do_polling:
 20942 0000338B 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20943 0000338D 31C0                    	xor	ax,ax
 20944 0000338F 89C2                    	mov	dx,ax
 20945 00003391 E8D412                  	call	SETREAD			;prepare device packet
 20946                                  
 20947                                  do_io:
 20948                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20949                                  
 20950 00003394 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20951 00003399 1E                      	push	ds
 20952 0000339A 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20953 0000339F E84D12                  	call	DEVIOCALL		;call device driver
 20954 000033A2 1F                      	pop	ds
 20955                                  	
 20956                                  	;test	word [es:bx+3],8000h
 20957                                  	; 16/12/2022
 20958                                  	;test	byte [es:bx+4],80h
 20959 000033A3 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20960                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20961 000033A8 7413                    	jz	short check_busy	;no
 20962                                  
 20963 000033AA 1E                      	push	ds
 20964 000033AB 89FA                    	mov	dx,di
 20965                                  	;invoke charhard		;invoke int 24h handler
 20966 000033AD E8A41E                  	call	CHARHARD
 20967 000033B0 89D7                    	mov	di,dx
 20968 000033B2 08C0                    	or	al,al
 20969 000033B4 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20970 000033B6 3C03                    	cmp	al,3
 20971 000033B8 7448                    	jz	short devrderr		;user asked to fail
 20972 000033BA 1F                      	pop	ds
 20973 000033BB EBD7                    	jmp	short do_io		;user asked to retry
 20974                                  
 20975                                  check_busy:
 20976                                  	;test	word [es:bx+3],200h
 20977                                  	; 16/12/2022
 20978 000033BD 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20979                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20980 000033C2 7547                    	jnz	short no_char		;yes, no character available
 20981                                  
 20982                                  ;Character is available. Read in 1 character at a time until all characters
 20983                                  ;are read in or no character is available
 20984                                  
 20985 000033C4 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20986 000033C9 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20987 000033CF 1E                      	push	ds
 20988 000033D0 36C536[9E05]            	lds	si,[ss:THISSFT]
 20989 000033D5 E81712                  	call	DEVIOCALL
 20990                                  
 20991 000033D8 89FA                    	mov	dx,di
 20992 000033DA B486                    	mov	ah,86h
 20993                                  	;mov	di,[es:bx+3]
 20994 000033DC 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20995 000033E0 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20996 000033E4 7410                    	jz	short next_char		;no,read next character
 20997                                  
 20998                                  	;invoke	charhard		;invoke int 24h handler
 20999 000033E6 E86B1E                  	call	CHARHARD
 21000 000033E9 89D7                    	mov	di,dx			;restore di
 21001 000033EB 08C0                    	or	al,al			;
 21002 000033ED 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 21003 000033EF 3C03                    	cmp	al,3
 21004 000033F1 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 21005 000033F3 1F                      	pop	ds
 21006 000033F4 EB9E                    	jmp	short do_io		;user issued a retry
 21007                                  
 21008                                  next_char:
 21009 000033F6 1F                      	pop	ds
 21010 000033F7 89D7                    	mov	di,dx
 21011 000033F9 49                      	dec	cx			;decrement count
 21012 000033FA E318                    	jcxz	done_read		;all characters read in
 21013 000033FC 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21014 00003400 EB92                    	jmp	short do_io			;read next character in
 21015                                  
 21016                                  devrderr:
 21017 00003402 5F                      	pop	di			;discard segment address
 21018 00003403 36C43E[9E05]            	les	di,[ss:THISSFT]
 21019                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21020 00003408 E96504                  	jmp     SET_ACC_ERR_DS
 21021                                  
 21022                                  no_char:
 21023                                  ;Since no character is available, we let win386 switch the VM out
 21024                                  
 21025 0000340B 50                      	push	ax
 21026 0000340C B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21027 0000340E CD2A                    	int	2Ah			;indicate idle to WIN386
 21028                                  
 21029                                  ;When control returns from WIN386, we continue the raw read
 21030                                  
 21031 00003410 58                      	pop	ax
 21032 00003411 EB81                    	jmp	do_io
 21033                                  
 21034                                  pop_done_read:
 21035 00003413 1F                      	pop	ds
 21036                                  done_read:
 21037 00003414 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21038                                  
 21039                                  	; 16/12/2022
 21040                                  
 21041                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21042                                  	;jmp	ENDRDDEV ; 04/05/2019
 21043                                  
 21044                                  	; 04/05/2019 - Retro DOS v4.0
 21045                                  ENDRDDEV:
 21046 00003419 16                      	push	ss
 21047 0000341A 1F                      	pop	ds
 21048 0000341B EB1F                    	jmp	short endrddev1
 21049                                  
 21050                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21051                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21052                                  
 21053                                  TRANBUF:
 21054 0000341D AC                      	LODSB
 21055 0000341E AA                      	STOSB
 21056 0000341F 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21057 00003421 7503                    	JNZ	short NORMCH
 21058 00003423 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21059                                  NORMCH:
 21060 00003426 3C0A                    	CMP	AL,c_LF ; 0Ah
 21061 00003428 E0F3                    	LOOPNZ	TRANBUF
 21062 0000342A 7507                    	JNZ	short ENDRDCON
 21063 0000342C 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21064 0000342E E832E2                  	call	OUTT		; Transmit linefeed
 21065 00003431 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21066                                  ENDRDCON:
 21067                                  ;hkn; SS is DOSDATA
 21068 00003433 16                      	push	ss
 21069 00003434 1F                      	pop	ds
 21070 00003435 E80CFE                  	CALL	SWAPBACK
 21071 00003438 8936[2200]              	MOV	[CONTPOS],SI
 21072                                  
 21073                                  	; 16/12/2022
 21074                                  ;ENDRDDEV:
 21075                                  ;;hkn; SS is DOSDATA
 21076                                  ;	push	ss
 21077                                  ;	pop	ds
 21078                                  endrddev1:	; 04/05/2019
 21079 0000343C 893E[B805]              	MOV	[NEXTADD],DI
 21080 00003440 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21081 00003442 C43E[9E05]              	LES	DI,[THISSFT]
 21082                                  	;and	byte [es:di+5],0BFh
 21083 00003446 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 21084                                  				; Mark as no more data available
 21085                                  SETSFTC:
 21086                                  	; 31/07/2019
 21087                                  	;call	SETSFT
 21088                                  	;retn
 21089 0000344B E9B604                  	jmp	SETSFT
 21090                                  
 21091                                  ; 16/12/2022
 21092                                  %if 0
 21093                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21094                                  ENDRDDEV:
 21095                                  ;hkn; SS is DOSDATA
 21096                                  	push	ss
 21097                                  	pop	ds
 21098                                  	MOV	[NEXTADD],DI
 21099                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21100                                  	LES	DI,[THISSFT]
 21101                                  	;and	byte [es:di+5],0BFh
 21102                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 21103                                  				; Mark as no more data available
 21104                                  SETSFTC:
 21105                                  	;call	SETSFT
 21106                                  	;retn
 21107                                  	jmp	SETSFT	
 21108                                  %endif
 21109                                  
 21110                                  READCON:
 21111 0000344E E8F9FD                  	CALL	SWAPCON
 21112 00003451 8B36[2200]              	MOV	SI,[CONTPOS]
 21113 00003455 09F6                    	OR	SI,SI
 21114 00003457 75C4                    	JNZ	short TRANBUF
 21115 00003459 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21116 0000345E 7406                    	JZ	short GETBUF
 21117 00003460 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21118                                  GETBUF:
 21119 00003466 51                      	PUSH	CX
 21120 00003467 06                      	PUSH	ES
 21121 00003468 57                      	PUSH	DI
 21122                                  
 21123                                  ;hkn; CONBUF is in DOSDATA
 21124 00003469 BA[7B02]                	MOV	DX,CONBUF
 21125                                  
 21126 0000346C E872DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21127 0000346F 5F                      	POP	DI
 21128 00003470 07                      	POP	ES
 21129 00003471 59                      	POP	CX
 21130                                  
 21131                                  ;hkn; CONBUF is in DOSDATA
 21132 00003472 BE[7D02]                	MOV	SI,CONBUF+2
 21133                                  
 21134 00003475 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21135 00003478 75A3                    	JNZ	short TRANBUF
 21136 0000347A B01A                    	MOV	AL,1AH
 21137 0000347C AA                      	STOSB
 21138 0000347D 4F                      	DEC	DI
 21139 0000347E B00A                    	MOV	AL,c_LF
 21140 00003480 E8E0E1                  	call	OUTT		; Send linefeed
 21141 00003483 31F6                    	XOR	SI,SI
 21142 00003485 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21143                                  
 21144                                  ; 24/07/2018 - Retro DOS v3.0
 21145                                  
 21146                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21147                                  ;---------------------------------------------------------------------------
 21148                                  ;
 21149                                  ; Procedure Name : DOS_WRITE
 21150                                  ;
 21151                                  ; Inputs:
 21152                                  ;	ThisSFT set to the SFT for the file being used
 21153                                  ;	[DMAADD] contains transfer address
 21154                                  ;	CX = No. of bytes to write
 21155                                  ; Function:
 21156                                  ;	Perform write operation
 21157                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21158                                  ;		to current sf_position
 21159                                  ; Outputs:
 21160                                  ;    Carry clear
 21161                                  ;	SFT Position and cluster pointers updated
 21162                                  ;	CX = No. of bytes written
 21163                                  ;	ES:DI point to SFT
 21164                                  ;    Carry set
 21165                                  ;	AX is error code
 21166                                  ;	CX = 0
 21167                                  ;	ES:DI point to SFT
 21168                                  ; DS preserved, all other registers destroyed
 21169                                  ;---------------------------------------------------------------------------
 21170                                  
 21171                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21172                                  ;hkn; point to DOSDATA.
 21173                                  
 21174                                  ; 04/05/2019 - Retro DOS v4.0
 21175                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21176                                  
 21177                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21178                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21179                                  
 21180                                  DOS_WRITE:
 21181 00003487 C43E[9E05]              	LES	DI,[THISSFT]
 21182                                  	;mov	al,[ES:DI+2]
 21183 0000348B 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21184                                  	;and	al,0Fh
 21185 0000348F 240F                    	AND	AL,access_mask
 21186                                  	;cmp	al,0
 21187 00003491 3C00                    	CMP	AL,open_for_read
 21188 00003493 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21189                                  BadMode:
 21190 00003495 E9DA03                  	jmp	SET_ACC_ERR
 21191                                  
 21192                                  ; NOTE: The following check for writting to a Read Only File is performed
 21193                                  ;	    ONLY on FCBs!!!!
 21194                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21195                                  ;	    of a read only file which can then be written to.
 21196                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21197                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21198                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21199                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21200                                  ;	    to a read-only file.
 21201                                  
 21202                                  Check_FCB_RO:
 21203                                  	;;test	word [es:di+2],8000h
 21204                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21205                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21206                                  	
 21207                                  	;test	byte [es:di+3],80h
 21208 00003498 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21209 0000349D 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21210                                  
 21211                                  	;test	byte [es:di+4],1
 21212 0000349F 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21213 000034A4 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21214                                  WRITE_NO_MODE:
 21215 000034A6 E8AA02                  	call	SETUP
 21216 000034A9 E8BDDD                  	call	IsSFTNet
 21217 000034AC 7406                    	JZ	short LOCAL_WRITE
 21218                                  
 21219                                  ;IF NOT Installed
 21220                                  ;	transfer NET_WRITE
 21221                                  ;ELSE
 21222                                  	;mov	ax,1109h
 21223 000034AE B80911                  	MOV	AX,(MultNET<<8)|9
 21224 000034B1 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21225                                  			; ES:DI -> SFT
 21226                                  			; SFT DPB field -> DPB of drive containing file
 21227                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21228                                  			; Return: CF set on error, CX = bytes written
 21229 000034B3 C3                      	retn
 21230                                  ;ENDIF
 21231                                  
 21232                                  LOCAL_WRITE:
 21233                                  	;;test	word [es:di+5],80h
 21234                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21235                                  	;jnz	short WRTDEV
 21236                                  
 21237                                  	;test	byte [es:di+5],80h
 21238 000034B4 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21239 000034B9 756E                    	jnz	short WRTDEV
 21240                                  
 21241                                  	;mov	byte [EXTERR_LOCUS],2
 21242 000034BB C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21243 000034C0 E84FDE                  	call	ECritDisk
 21244                                  
 21245 000034C3 E8F404                  	call	DISKWRITE
 21246                                  
 21247                                  	; 04/05/2019 - Retro DOS v4.0
 21248                                  
 21249                                  	; MSDOS 6.0
 21250                                  ; Extended Open
 21251 000034C6 7210                    	JC	short nocommit
 21252                                  	
 21253 000034C8 C43E[9E05]              	LES	DI,[THISSFT]
 21254                                  	
 21255                                  	;;test	word [ES:DI+2],4000h
 21256                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21257                                  	;JZ	short nocommit
 21258                                  	
 21259                                  	;test	byte [ES:DI+3],40h
 21260 000034CC 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21261 000034D1 7405                    	JZ	short nocommit
 21262                                  	
 21263 000034D3 51                      	PUSH	CX
 21264 000034D4 E835FB                  	call	DOS_COMMIT
 21265 000034D7 59                      	POP	CX
 21266                                  nocommit:
 21267                                  ; Extended Open
 21268                                  	;call	LCritDisk
 21269                                  	;retn
 21270                                  	; 18/12/2022
 21271 000034D8 E952DE                  	jmp	LCritDisk
 21272                                  
 21273                                  DVWRTRAW:
 21274 000034DB 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21275 000034DD E8BB11                  	call	SETWRITE
 21276 000034E0 1E                      	PUSH	DS			; Save seg of transfer
 21277                                  
 21278                                  ;hkn; SS override
 21279 000034E1 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21280 000034E6 E80611                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21281                                  
 21282 000034E9 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21283 000034EB B487                    	MOV	AH,87H
 21284                                  
 21285                                  ;hkn; SS override
 21286 000034ED 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21287                                  
 21288                                  	; MSDOS 3.3
 21289                                  	;test	di,8000h
 21290                                  	;jz	short CWRTROK
 21291                                  
 21292                                  	; MSDOS 6.0
 21293 000034F2 09FF                    	or	di,di
 21294 000034F4 7920                    	jns	short CWRTROK
 21295                                  	
 21296                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21297 000034F6 E85B1D                  	call	CHARHARD
 21298                                  
 21299                                  	; 04/05/2019  - Retro DOS v4.0
 21300                                  
 21301                                  	; MSDOS 6.0
 21302 000034F9 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21303 000034FE 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21304 00003500 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 21305 00003505 89DF                    	mov	di,bx			;				M065
 21306                                  	
 21307                                  	; MSDOS 3.3
 21308                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21309                                  
 21310                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21311 00003507 08C0                    	OR	AL,AL
 21312 00003509 740B                    	JZ	short CWRTROK 		; Ignore
 21313 0000350B 3C03                    	CMP	AL,3
 21314 0000350D 7403                    	JZ	short CWRFERR
 21315 0000350F 1F                      	POP	DS			; Recover saved seg of transfer
 21316 00003510 EBC9                    	JMP	short DVWRTRAW		; Try again
 21317                                  CWRFERR:
 21318 00003512 58                      	POP	AX			; Chuck saved seg of transfer
 21319 00003513 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 21320                                  CWRTROK:
 21321 00003516 58                      	POP	AX			; Chuck saved seg of transfer
 21322 00003517 1F                      	POP	DS
 21323 00003518 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21324                                  ENDWRDEV:
 21325 0000351B C43E[9E05]              	LES	DI,[THISSFT]
 21326 0000351F 89C1                    	MOV	CX,AX
 21327                                  	;call	ADDREC
 21328                                  	;retn
 21329                                  	; 16/12/2022
 21330                                  	; 10/06/2019
 21331 00003521 E90104                  	jmp	ADDREC
 21332                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21333                                  	;call	ADDREC
 21334                                  	;retn
 21335                                  	
 21336                                  WRTNUL:
 21337 00003524 89CA                    	MOV	DX,CX			; Entire transfer done
 21338                                  WRTCOOKJ:
 21339 00003526 E98D00                  	JMP	WRTCOOKDONE
 21340                                  WRTDEV:
 21341                                  	;mov	byte [EXTERR_LOCUS],4
 21342 00003529 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21343                                  	;or	byte [es:di+5],40h
 21344 0000352E 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21345                                  					; Reset EOF for input
 21346                                  	;mov	bl,[es:di+5]
 21347 00003533 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21348 00003537 31C0                    	XOR	AX,AX
 21349 00003539 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21350 0000353B 1E                      	PUSH	DS
 21351 0000353C 88D8                    	MOV	AL,BL
 21352 0000353E C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21353 00003542 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21354 00003544 31D2                    	XOR	DX,DX			; Set starting point
 21355                                  	;test	al,20h
 21356 00003546 A820                    	test	AL,devid_device_raw	; Raw?
 21357                                  	;JZ	short TEST_DEV_CON
 21358                                  	;JMP	DVWRTRAW
 21359                                  	; 16/12/2022
 21360 00003548 7591                    	jnz	short DVWRTRAW
 21361                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21362                                  	;JZ	short TEST_DEV_CON
 21363                                  	;JMP	short DVWRTRAW
 21364                                  
 21365                                  TEST_DEV_CON:
 21366                                  	;test	al,2
 21367 0000354A A802                    	test	AL,devid_device_con_out ; Console output device?
 21368 0000354C 756E                    	jnz	short WRITECON
 21369                                  	;test	al,4
 21370 0000354E A804                    	test	AL,devid_device_null
 21371 00003550 75D2                    	JNZ	short WRTNUL
 21372 00003552 89D0                    	MOV	AX,DX
 21373 00003554 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21374 00003557 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21375 00003559 51                      	PUSH	CX
 21376 0000355A B90100                  	MOV	CX,1
 21377 0000355D E83B11                  	call	SETWRITE
 21378 00003560 59                      	POP	CX
 21379                                  
 21380                                  ;hkn; SS override
 21381 00003561 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21382                                  ;
 21383                                  ;SR; Removed X25 support from here
 21384                                  ;
 21385                                  	;lds	si,[si+7]
 21386 00003566 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21387                                  DVWRTLP:
 21388 00003569 E8C91A                  	call	DSKSTATCHK
 21389 0000356C E88310                  	call	DEVIOCALL2
 21390 0000356F 57                      	PUSH	DI
 21391 00003570 B487                    	MOV	AH,87H
 21392                                  
 21393                                  ;hkn; SS override
 21394 00003572 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21395                                  	
 21396                                  	; MSDOS 3.3
 21397                                  	;test	di,8000h
 21398                                  	;jz	short CWROK
 21399                                  
 21400                                  	; MSDOS 6.0
 21401 00003577 09FF                    	or	di,di
 21402 00003579 7916                    	jns	short CWROK
 21403                                  	
 21404                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21405 0000357B E8D61C                  	call	CHARHARD
 21406 0000357E 5F                      	POP	DI
 21407                                  
 21408                                  ;hkn; SS override
 21409 0000357F 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21410 00003586 3C01                    	CMP	AL,1
 21411 00003588 74DF                    	JZ	short DVWRTLP 	; Retry
 21412 0000358A 08C0                    	OR	AL,AL
 21413 0000358C 740C                    	JZ	short DVWRTIGN	; Ignore
 21414                                  	; 10/08/2018
 21415 0000358E E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21416                                  CWROK:
 21417 00003591 5F                      	POP	DI
 21418                                  
 21419                                  ;hkn; SS override
 21420 00003592 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21421 00003598 741C                    	JZ	short WRTCOOKDONE
 21422                                  DVWRTIGN:
 21423 0000359A 42                      	INC	DX
 21424                                  
 21425                                  ;hkn; SS override for CALLXAD
 21426 0000359B 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21427 000035A0 47                      	INC	DI
 21428 000035A1 1E                      	PUSH	DS
 21429 000035A2 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21430 000035A7 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21431 000035AA 1F                      	POP	DS
 21432 000035AB 7409                    	JZ	short WRTCOOKDONE
 21433                                  
 21434                                  ;hkn; SS override
 21435 000035AD 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21436 000035B4 E2B3                    	LOOP	DVWRTLP
 21437                                  WRTCOOKDONE:
 21438 000035B6 89D0                    	MOV	AX,DX
 21439 000035B8 1F                      	POP	DS
 21440 000035B9 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21441                                  
 21442                                  WRITECON:
 21443 000035BC 1E                      	PUSH	DS
 21444                                  
 21445                                  ;hkn; SS is DOSDATA
 21446 000035BD 16                      	push	ss
 21447 000035BE 1F                      	pop	ds
 21448 000035BF E888FC                  	CALL	SWAPCON
 21449 000035C2 1F                      	POP	DS
 21450 000035C3 89DE                    	MOV	SI,BX
 21451 000035C5 51                      	PUSH	CX
 21452                                  WRCONLP:
 21453 000035C6 AC                      	LODSB
 21454 000035C7 3C1A                    	CMP	AL,1Ah		; ^Z?
 21455 000035C9 7405                    	JZ	short CONEOF
 21456 000035CB E895E0                  	call	OUTT
 21457 000035CE E2F6                    	LOOP	WRCONLP
 21458                                  CONEOF:
 21459 000035D0 58                      	POP	AX			; Count
 21460 000035D1 29C8                    	SUB	AX,CX			; Amount actually written
 21461 000035D3 1F                      	POP	DS
 21462 000035D4 E86DFC                  	CALL	SWAPBACK
 21463 000035D7 E941FF                  	JMP	ENDWRDEV
 21464                                  
 21465                                  ;---------------------------------------------------------------------------
 21466                                  ;
 21467                                  ; Procedure Name : get_io_sft
 21468                                  ;
 21469                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21470                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21471                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21472                                  ;
 21473                                  ;---------------------------------------------------------------------------
 21474                                  
 21475                                  ; 04/05/2019 - Retro DOS v4.0
 21476                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21477                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21478                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21479                                  
 21480                                  GET_IO_SFT:
 21481                                  	;test	byte [SS:CONSWAP],0FFh
 21482 000035DA 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21483 000035E0 7512                    	JNZ	short GetRedir
 21484                                  GetNormal:
 21485 000035E2 16                      	push	ss
 21486 000035E3 1F                      	pop	ds
 21487 000035E4 06                      	PUSH	ES
 21488 000035E5 57                      	PUSH	DI
 21489 000035E6 E80B30                  	call	SFFromHandle
 21490 000035E9 7206                    	JC	short RET44P
 21491 000035EB 8CC6                    	MOV	SI,ES
 21492 000035ED 8EDE                    	MOV	DS,SI
 21493 000035EF 89FE                    	MOV	SI,DI
 21494                                  RET44P:
 21495 000035F1 5F                      	POP	DI
 21496 000035F2 07                      	POP	ES
 21497 000035F3 C3                      	retn
 21498                                  GetRedir:
 21499 000035F4 83FB01                  	CMP	BX,1
 21500 000035F7 77E9                    	JA	short GetNormal
 21501 000035F9 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21502 000035FE F8                      	CLC
 21503                                  get_io_sft_retn:
 21504 000035FF C3                      	retn
 21505                                  
 21506                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21507                                  ;---------------------------------------------------------------------------
 21508                                  ;
 21509                                  ; Procedure Name : DIRREAD
 21510                                  ;
 21511                                  ; Inputs:
 21512                                  ;	AX = Directory block number (relative to first block of directory)
 21513                                  ;	ES:BP = Base of drive parameters
 21514                                  ;	[DIRSEC] = First sector of first cluster of directory
 21515                                  ;	[CLUSNUM] = Next cluster
 21516                                  ;	[CLUSFAC] = Sectors/Cluster
 21517                                  ; Function:
 21518                                  ;	Read the directory block into [CURBUF].
 21519                                  ; Outputs:
 21520                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21521                                  ;	[SECCLUSPOS] Set
 21522                                  ;	ES:BP unchanged
 21523                                  ;	[CURBUF] Points to Buffer with dir sector
 21524                                  ;	Carry set if error (user said FAIL to I 24)
 21525                                  ; DS preserved, all other registers destroyed.
 21526                                  ;---------------------------------------------------------------------------
 21527                                  
 21528                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21529                                  
 21530                                  DIRREAD:
 21531                                  
 21532                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21533                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21534                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21535                                  ; by DIRStart = 0.
 21536                                  
 21537 00003600 31D2                    	XOR	DX,DX
 21538                                  	;CMP	word [DIRSTART],0
 21539                                  	; 21/09/2023
 21540 00003602 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21541 00003606 7503                    	jnz	short SubDir
 21542 00003608 92                      	XCHG	AX,DX
 21543 00003609 EB0C                    	JMP	short DoRead
 21544                                  
 21545                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21546                                  
 21547                                  SubDir:
 21548 0000360B 88C2                    	MOV	DL,AL
 21549                                  	;and	dl,[es:bp+4]
 21550 0000360D 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21551                                  
 21552                                  ;	(DX) = sector-in-cluster
 21553                                  
 21554                                  	;mov	cl,[es:bp+5]
 21555 00003611 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21556 00003615 D3E8                    	SHR	AX,CL
 21557                                  
 21558                                  ;	(DX) = position in cluster
 21559                                  ;	(AX) = number of clusters to skip
 21560                                  
 21561                                  DoRead:
 21562 00003617 8816[7305]              	MOV	[SECCLUSPOS],DL
 21563 0000361B 89C1                    	MOV	CX,AX
 21564 0000361D 88D4                    	MOV	AH,DL
 21565                                  
 21566                                  ;	(CX) = number of clusters to skip.
 21567                                  ;	(AH) = remainder
 21568                                  
 21569                                  	; 04/05/2019 - Retro DOS v4.0
 21570                                  
 21571                                  	; MSDOS 6.0
 21572                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21573                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21574                                  	;MOV	DX,[DIRSEC]
 21575                                  	;ADD	DL,AH
 21576                                  	;ADC	DH,0
 21577                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21578                                  	; 21/09/2023
 21579 0000361F 31DB                    	xor	bx,bx ; 0
 21580 00003621 8B16[BE05]              	mov	dx,[DIRSEC]
 21581 00003625 00E2                    	add	dl,ah
 21582 00003627 10DE                    	adc	dh,bl ; 0
 21583 00003629 131E[C005]              	adc	bx,[DIRSEC+2]
 21584 0000362D 891E[0706]              	mov	[HIGH_SECTOR],bx
 21585                                  
 21586 00003631 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21587 00003635 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21588 00003639 E319                    	JCXZ	FIRSTCLUSTER
 21589                                  SKPCLLP:
 21590 0000363B E8811E                  	call	UNPACK
 21591 0000363E 72BF                    	jc	short get_io_sft_retn
 21592 00003640 87DF                    	XCHG	BX,DI
 21593 00003642 E8631E                  	call	IsEOF			; test for eof based on fat size
 21594 00003645 7302                    	JAE	short HAVESKIPPED
 21595 00003647 E2F2                    	LOOP	SKPCLLP
 21596                                  HAVESKIPPED:
 21597 00003649 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21598 0000364D 89FA                    	MOV	DX,DI
 21599 0000364F 88E3                    	MOV	BL,AH
 21600 00003651 E81417                  	call	FIGREC
 21601                                  
 21602                                  	;entry	FIRSTCLUSTER
 21603                                  
 21604                                  FIRSTCLUSTER:
 21605                                  	; 22/09/2023
 21606                                  	;;mov	byte [ALLOWED],18h
 21607                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21608                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21609                                  	;call	GETBUFFR
 21610 00003654 E87322                  	call	GETBUFFER ; *	; pre-read
 21611 00003657 72A6                    	jc	short get_io_sft_retn
 21612                                  
 21613                                  	;entry	SET_BUF_AS_DIR
 21614                                  
 21615                                  SET_BUF_AS_DIR:
 21616                                  
 21617                                  ;	Set the type of CURBUF to be a directory sector.
 21618                                  ;	Only flags are modified.
 21619                                  
 21620 00003659 1E                      	PUSH	DS
 21621 0000365A 56                      	PUSH	SI
 21622 0000365B C536[E205]              	LDS	SI,[CURBUF]
 21623                                  	;or	byte [si+5],4
 21624 0000365F 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21625 00003663 5E                      	POP	SI
 21626 00003664 1F                      	POP	DS
 21627                                  dirread_retn:
 21628 00003665 C3                      	retn
 21629                                  
 21630                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21631                                  ;----------------------------------------------------------------------------
 21632                                  ;
 21633                                  ; Procedure Name : FATSECRD
 21634                                  ; Inputs:
 21635                                  ;	Same as DREAD
 21636                                  ;	DS:BX = Transfer address
 21637                                  ;	CX = Number of sectors
 21638                                  ;	DX = Absolute record number
 21639                                  ;	ES:BP = Base of drive parameters
 21640                                  ; Function:
 21641                                  ;	Calls BIOS to perform FAT read.
 21642                                  ; Outputs:
 21643                                  ;	Same as DREAD
 21644                                  ;---------------------------------------------------------------------------
 21645                                  
 21646                                  	; 04/05/2019 - Retro DOS v4.0
 21647                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21648                                  
 21649                                  FATSECRD:
 21650                                  ;hkn; SS override
 21651                                  	;mov	byte [ss:ALLOWED],18h
 21652 00003666 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21653 0000366C 89CF                    	MOV	DI,CX
 21654                                  	;mov	cl,[es:bp+8]
 21655 0000366E 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21656                                  	; MSDOS 3.3
 21657                                  	;;mov	al,[es:bp+0Fh]
 21658                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21659                                  	;XOR	AH,AH
 21660                                  	; MSDOS 6.0
 21661                                  	;mov	ax,[es:bp+0Fh]
 21662 00003672 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21663 00003676 30ED                    	XOR	CH,CH	
 21664 00003678 52                      	PUSH	DX
 21665                                  NXTFAT:
 21666                                  	; MSDOS 6.0
 21667                                  ;hkn; SS override
 21668 00003679 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21669 00003680 51                      	PUSH	CX			;32mb
 21670 00003681 50                      	PUSH	AX
 21671 00003682 89F9                    	MOV	CX,DI
 21672 00003684 E85B00                  	call	DSKREAD
 21673 00003687 58                      	POP	AX
 21674 00003688 59                      	POP	CX
 21675 00003689 7420                    	JZ	short RET41P		; Carry clear
 21676 0000368B 01C2                    	ADD	DX,AX
 21677 0000368D E2EA                    	LOOP	NXTFAT
 21678 0000368F 5A                      	POP	DX
 21679 00003690 89F9                    	MOV	CX,DI
 21680                                  
 21681                                  ; NOTE FALL THROUGH
 21682                                  
 21683                                  ;Break	<DREAD -- DO A DISK READ>
 21684                                  ;---------------------------------------------------------------------------
 21685                                  ;
 21686                                  ; Procedure Name : DREAD
 21687                                  ;
 21688                                  ; Inputs:
 21689                                  ;	DS:BX = Transfer address
 21690                                  ;	CX = Number of sectors
 21691                                  ;	DX = Absolute record number	      (LOW)
 21692                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21693                                  ;	ES:BP = Base of drive parameters
 21694                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21695                                  ; Function:
 21696                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21697                                  ;	errors, will call HARDERRRW for further action.
 21698                                  ; Outputs:
 21699                                  ;	Carry set if error (currently user FAILED to INT 24)
 21700                                  ; DS,ES:BP preserved. All other registers destroyed.
 21701                                  ;---------------------------------------------------------------------------
 21702                                  
 21703                                  	;entry	DREAD
 21704                                  DREAD:
 21705 00003692 E84D00                  	call	DSKREAD
 21706 00003695 74CE                    	jz	short dirread_retn	; Carry clear
 21707                                  ;hkn; SS override
 21708 00003697 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21709 0000369D E89A00                  	call	HARDERRRW
 21710 000036A0 3C01                    	CMP	AL,1			; Check for retry
 21711 000036A2 74EE                    	JZ	short DREAD
 21712 000036A4 3C03                    	CMP	AL,3			; Check for FAIL
 21713 000036A6 F8                      	CLC
 21714 000036A7 7501                    	JNZ	short NO_CAR		; Ignore
 21715 000036A9 F9                      	STC
 21716                                  NO_CAR:
 21717 000036AA C3                      	retn
 21718                                  RET41P: 
 21719 000036AB 5A                      	POP	DX
 21720 000036AC C3                      	retn
 21721                                  
 21722                                  ; 24/07/2018 - Retro DOS v3.0
 21723                                  
 21724                                  ;Break	<CHECK_WRITE_LOCK>
 21725                                  ;---------------------------------------------------------------------------
 21726                                  ;
 21727                                  ; Procedure Name : CHECK_WRITE_LOCK
 21728                                  ;
 21729                                  ; Inputs:
 21730                                  ;	output of SETUP
 21731                                  ;	ES:DI -> SFT
 21732                                  ; Function:
 21733                                  ;	check write lock
 21734                                  ; Outputs:
 21735                                  ;	Carry set if error
 21736                                  ;	Carry clear if ok
 21737                                  ;
 21738                                  ;----------------------------------------------------------------------------
 21739                                  
 21740                                  	; 04/05/2019 - Retro DOS v4.0
 21741                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21742                                  
 21743                                  CHECK_WRITE_LOCK:
 21744                                  	; MSDOS 6.0
 21745                                  	;test	byte [es:di+4],8
 21746 000036AD 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21747                                  	;JZ	short write_cont			     ;no
 21748                                  	;;call	SET_ACC_ERR_DS
 21749                                  	;;retn
 21750                                  	;;jnz	SET_ACC_ERR_DS
 21751                                  	; 19/08/2018
 21752                                  	;jz	short write_cont
 21753                                  	;jmp	SET_ACC_ERR_DS
 21754                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21755 000036B2 7403                    	JZ	short write_cont
 21756                                  	;call	SET_ACC_ERR_DS
 21757                                  	;retn
 21758                                  	; 16/12/2022
 21759 000036B4 E9B901                  	jmp	SET_ACC_ERR_DS
 21760                                  
 21761                                  write_cont:				;
 21762 000036B7 51                      	PUSH	CX			;save reg
 21763 000036B8 09C9                    	OR	CX,CX			;
 21764 000036BA 7501                    	JNZ	short Not_Truncate	;
 21765 000036BC 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21766                                  Not_Truncate:				;
 21767 000036BD B080                    	MOV	AL,80H			;check write access
 21768 000036BF E8BB3B                  	call	LOCK_CHECK		;check lock
 21769 000036C2 59                      	POP	CX			;restore reg
 21770 000036C3 7305                    	JNC	short WRITE_OK		;lock ok
 21771 000036C5 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21772 000036C8 73ED                    	JNC	short write_cont	;retry
 21773                                  WRITE_OK:				;
 21774 000036CA C3                      	retn				;
 21775                                  
 21776                                  ;Break	<CHECK_READ_LOCK>
 21777                                  ;---------------------------------------------------------------------------
 21778                                  ;
 21779                                  ; Procedure Name : CHECK_READ_LOC
 21780                                  ;
 21781                                  ; Inputs:
 21782                                  ;	ES:DI -> SFT
 21783                                  ;	output of SETUP
 21784                                  ; Function:
 21785                                  ;	check read lock
 21786                                  ; Outputs:
 21787                                  ;	Carry set if error
 21788                                  ;	Carry clear if ok
 21789                                  ;----------------------------------------------------------------------------
 21790                                  
 21791                                  CHECK_READ_LOCK:
 21792                                  	; MSDOS 6.0
 21793                                  	;test	byte [es:di+4],8
 21794 000036CB 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21795                                  	;JZ	short do_retry			   	     ; no
 21796                                  	;;call	SET_ACC_ERR
 21797                                  	;;retn
 21798                                  	;;jnz	SET_ACC_ERR
 21799                                  	; 16/12/2022
 21800                                  	; 28/07/2019
 21801 000036D0 7403                    	jz	short do_retry
 21802 000036D2 E99D01                  	jmp	SET_ACC_ERR
 21803                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21804                                  	;JZ	short do_retry
 21805                                  	;call	SET_ACC_ERR
 21806                                  	;retn
 21807                                  do_retry:				;
 21808 000036D5 30C0                    	xor	al,al			;check read access
 21809 000036D7 E8A33B                  	call	LOCK_CHECK		;check lock
 21810 000036DA 7305                    	JNC	short READLOCK_OK 	;lock ok
 21811 000036DC E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21812 000036DF 73F4                    	JNC	short do_retry		;retry
 21813                                  READLOCK_OK:				;
 21814 000036E1 C3                      	retn				;
 21815                                  
 21816                                  ;============================================================================
 21817                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21818                                  ;============================================================================
 21819                                  ; 24/07/2018 - Retro DOS v3.0
 21820                                  ; 04/05/2019 - Retro DOS v4.0
 21821                                  
 21822                                  ;	TITLE	DISK2 - Disk utility routines
 21823                                  ;	NAME	Disk2
 21824                                  
 21825                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21826                                  ;
 21827                                  ;	DskRead
 21828                                  ;	DWRITE
 21829                                  ;	DSKWRITE
 21830                                  ;	HarderrRW
 21831                                  ;	SETUP
 21832                                  ;	BREAKDOWN
 21833                                  ;	READ_LOCK_VIOLATION
 21834                                  ;	WRITE_LOCK_VIOLATION
 21835                                  ;	DISKREAD
 21836                                  ;	SET_ACC_ERR_DS
 21837                                  ;	SET_ACC_ERR
 21838                                  ;	SETSFT
 21839                                  ;	SETCLUS
 21840                                  ;	AddRec
 21841                                  ;
 21842                                  ;	Revision history:
 21843                                  ;
 21844                                  ;		AN000 version 4.00 Jan. 1988
 21845                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21846                                  
 21847                                  ; 04/05/2019 - Retro DOS v4.0
 21848                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21849                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21850                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21851                                  
 21852                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21853                                  ;---------------------------------------------------------------------------
 21854                                  ;
 21855                                  ; Procedure Name : DSKREAD
 21856                                  ;
 21857                                  ; Inputs:
 21858                                  ;	DS:BX = Transfer addr
 21859                                  ;	CX = Number of sectors
 21860                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21861                                  ;	DX = Absolute record number	       (LOW)
 21862                                  ;	ES:BP = Base of drive parameters
 21863                                  ; Function:
 21864                                  ;	Call BIOS to perform disk read
 21865                                  ; Outputs:
 21866                                  ;	DI = CX on entry
 21867                                  ;	CX = Number of sectors unsuccessfully transfered
 21868                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21869                                  ;	Zero set if OK (from BIOS) (carry clear)
 21870                                  ;	Zero clear if error (carry clear)
 21871                                  ; SI Destroyed, others preserved
 21872                                  ;---------------------------------------------------------------------------
 21873                                  
 21874                                  DSKREAD:
 21875 000036E2 51                      	PUSH	CX
 21876                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21877 000036E3 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21878                                  	;mov	al,[es:bp+1]
 21879 000036E7 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21880 000036EB 53                      	PUSH	BX
 21881 000036EC 06                      	PUSH	ES
 21882 000036ED E8780F                  	call	SETREAD
 21883 000036F0 EB27                    	JMP	short DODSKOP
 21884                                  
 21885                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21886                                  ;--------------------------------------------------------------------------
 21887                                  ;
 21888                                  ; Procedure Name : DWRITE
 21889                                  ;
 21890                                  ; Inputs:
 21891                                  ;	DS:BX = Transfer address
 21892                                  ;	CX = Number of sectors
 21893                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21894                                  ;	DX = Absolute record number	       (LOW)
 21895                                  ;	ES:BP = Base of drive parameters
 21896                                  ;	[ALLOWED] must be set in case HARDERR called
 21897                                  ; Function:
 21898                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21899                                  ;	errors, will call HARDERRRW for further action.
 21900                                  ; Output:
 21901                                  ;	Carry set if error (currently, user FAILed to I 24)
 21902                                  ; BP preserved. All other registers destroyed.
 21903                                  ;----------------------------------------------------------------------------
 21904                                  
 21905                                  	;entry	DWRITE
 21906                                  DWRITE:
 21907 000036F2 E81600                  	CALL	DSKWRITE
 21908 000036F5 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21909                                  
 21910                                  ;hkn; SS override
 21911 000036F7 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21912 000036FD E83A00                  	call	HARDERRRW
 21913 00003700 3C01                    	CMP	AL,1		; Check for retry
 21914 00003702 74EE                    	JZ	short DWRITE
 21915 00003704 3C03                    	CMP	AL,3		; Check for FAIL
 21916 00003706 F8                      	CLC
 21917 00003707 7501                    	JNZ	short NO_CAR2 	; Ignore
 21918 00003709 F9                      	STC
 21919                                  NO_CAR2:
 21920                                  dw_ret_label:
 21921 0000370A C3                      	retn
 21922                                  
 21923                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21924                                  ;---------------------------------------------------------------------------
 21925                                  ;
 21926                                  ; Procedure Name : DSKWRITE
 21927                                  ;
 21928                                  ; Inputs:
 21929                                  ;	DS:BX = Transfer addr
 21930                                  ;	CX = Number of sectors
 21931                                  ;	DX = Absolute record number	       (LOW)
 21932                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21933                                  ;	ES:BP = Base of drive parameters
 21934                                  ; Function:
 21935                                  ;	Call BIOS to perform disk read
 21936                                  ; Outputs:
 21937                                  ;	DI = CX on entry
 21938                                  ;	CX = Number of sectors unsuccessfully transfered
 21939                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21940                                  ;	Zero set if OK (from BIOS) (carry clear)
 21941                                  ;	Zero clear if error (carry clear)
 21942                                  ; SI Destroyed, others preserved
 21943                                  ;
 21944                                  ;----------------------------------------------------------------------------
 21945                                  
 21946                                  	;entry	DSKWRITE
 21947                                  DSKWRITE:
 21948 0000370B 51                      	PUSH	CX
 21949                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21950 0000370C 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21951                                  	;mov	al,[es:bp+1]
 21952 00003710 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21953 00003714 53                      	PUSH	BX
 21954 00003715 06                      	PUSH	ES
 21955 00003716 E8820F                  	call	SETWRITE
 21956                                  DODSKOP:
 21957 00003719 8CD9                    	MOV	CX,DS		; Save DS
 21958 0000371B 1F                      	POP	DS		; DS:BP points to DPB
 21959 0000371C 1E                      	PUSH	DS
 21960                                  
 21961                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21962 0000371D 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21963 00003721 E8CE0E                  	call	DEVIOCALL2
 21964                                  
 21965 00003724 8ED9                    	MOV	DS,CX		; Restore DS
 21966 00003726 07                      	POP	ES		; Restore ES
 21967 00003727 5B                      	POP	BX
 21968                                  
 21969                                  ;hkn; SS override
 21970 00003728 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21971 0000372D 5F                      	POP	DI
 21972 0000372E 29F9                    	SUB	CX,DI
 21973 00003730 F7D9                    	NEG	CX		; Number of sectors not transferred
 21974                                  
 21975                                  ;hkn; SS override
 21976 00003732 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21977                                  	;test	ax,8000h
 21978                                  	; 17/12/2022
 21979                                  	;test	ah,80h
 21980 00003736 F6C480                  	test	ah,(STERR>>8)
 21981                                  	;test	AX,STERR
 21982 00003739 C3                      	retn
 21983                                  
 21984                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21985                                  ;---------------------------------------------------------------------------
 21986                                  ;
 21987                                  ; Procedure Name : HardErrRW
 21988                                  ;
 21989                                  ; Inputs:
 21990                                  ;	AX is error code from read or write
 21991                                  ;	Other registers set as per HARDERR
 21992                                  ; Function:
 21993                                  ;	Checks the error code for special extended
 21994                                  ;	errors and maps them if needed. Then invokes
 21995                                  ;	Harderr
 21996                                  ; Outputs:
 21997                                  ;	Of HARDERR
 21998                                  ; AX may be modified prior to call to HARDERR.
 21999                                  ; No other registers altered.
 22000                                  ;
 22001                                  ;---------------------------------------------------------------------------
 22002                                  
 22003                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22004                                  HARDERRRW:
 22005                                  	;cmp	al,0Fh
 22006 0000373A 3C0F                    	CMP	AL,error_I24_wrong_disk
 22007 0000373C 7512                    	JNZ	short DO_ERR				; Nothing to do
 22008                                  
 22009                                  	; MSDOS 3.3
 22010                                  	;push	ds
 22011                                  	;push	si
 22012                                  	;lds	si,[ss:CALLVIDRW]
 22013                                  	;mov	[ss:EXTERRPT+2], ds
 22014                                  	;mov	[ss:EXTERRPT], si
 22015                                  	;pop	si
 22016                                  	;pop	ds
 22017                                  
 22018                                  	; MSDOS 6.0
 22019 0000373E 50                      	push	ax
 22020 0000373F 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22021 00003743 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22022 00003747 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22023 0000374B 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22024 0000374F 58                      	pop	ax
 22025                                  DO_ERR:
 22026                                  	;;call	HARDERR
 22027                                  	;;retn
 22028                                  	; 16/12/2022
 22029                                  	; 10/06/2019
 22030 00003750 E9321B                  	jmp	HARDERR	
 22031                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22032                                  	;call	HARDERR
 22033                                  	;retn
 22034                                  
 22035                                  ; 24/07/2018 - Retro DOS v3.0
 22036                                  
 22037                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22038                                  ;----------------------------------------------------------------------------
 22039                                  ;
 22040                                  ; Procedure Name : SETUP
 22041                                  ;
 22042                                  ; Inputs:
 22043                                  ;	ES:DI point to SFT (value also in THISSFT)
 22044                                  ;	DMAAdd contains transfer address
 22045                                  ;	CX = Byte count
 22046                                  ;	DS = DOSDATA
 22047                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22048                                  ;		2nd of caller of caller.
 22049                                  ; Outputs:
 22050                                  ;	    CX = byte count
 22051                                  ;	    [THISDPB] = Base of drive parameters if file
 22052                                  ;		      = Pointer to device header if device or NET
 22053                                  ;	    ES:DI Points to SFT
 22054                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22055                                  ;	    [TRANS] = 0 (No transfers yet)
 22056                                  ;	    BytPos = Byte position in file
 22057                                  ;
 22058                                  ;	The following fields are relevant to local files (not devices) only:
 22059                                  ;
 22060                                  ;	    SecPos = Position of first sector (local files only)
 22061                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22062                                  ;	    [CLUSNUM] = First cluster (local files only)
 22063                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22064                                  ;	    [THISDRV] = Physical unit number (local files only)
 22065                                  ;
 22066                                  ;      RETURNS ONE LEVEL UP WITH:
 22067                                  ;	   CX = 0
 22068                                  ;	   CARRY = Clear
 22069                                  ;	IF AN ERROR IS DETECTED
 22070                                  ; All other registers destroyed
 22071                                  ;----------------------------------------------------------------------------
 22072                                  
 22073                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22074                                  
 22075                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22076                                  
 22077                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22078                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22079                                  
 22080                                  SETUP:
 22081                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22082                                  
 22083                                  	;lds 	si,[es:di+7]
 22084 00003753 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22085                                  
 22086                                  ;hkn; SS override
 22087 00003757 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22088                                  
 22089                                  ;hkn; SS is DOSDATA
 22090 0000375C 16                      	push	ss
 22091 0000375D 1F                      	pop	ds
 22092                                  
 22093 0000375E 8936[8A05]              	MOV	[THISDPB],SI
 22094                                  
 22095 00003762 8B1E[2C03]              	MOV	BX,[DMAADD]
 22096 00003766 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22097 0000376A C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22098                                  	;mov	ax,[es:di+15h]
 22099 0000376F 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22100                                  	;mov	dx,[es:di+17h]
 22101 00003773 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22102 00003777 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22103 0000377B A3[CE05]                	MOV	[BYTPOS],AX
 22104                                  	;test	word [es:di+5],8080h
 22105 0000377E 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22106 00003784 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22107 00003786 06                      	PUSH	ES
 22108 00003787 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22109                                  
 22110                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22111                                  	;;mov	bl,[es:bp+0]
 22112                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22113                                  	; 05/12/2022
 22114 0000378B 268A5E00                	mov	bl,[es:bp]
 22115                                  	
 22116 0000378F 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22117                                  	;mov	bx,[es:bp+2]
 22118 00003793 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22119                                  
 22120                                  	;; MSDOS 3.3
 22121                                  	;cmp	dx,bx
 22122                                  	;jnb	short EOFERR
 22123                                  	;div	bx
 22124                                  	;mov	[SECPOS],ax
 22125                                  	;mov	[BYTSECPOS],dx
 22126                                  	;mov	dx,ax
 22127                                  	;;and	al,[es:bp+4]
 22128                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22129                                  	;mov	[SECCLUSPOS],al
 22130                                  	;mov	ax,cx
 22131                                  	;;mov	cl,[es:bp+5]
 22132                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22133                                  	;shr	dx,cl
 22134                                  	;mov	[CLUSNUM],dx
 22135                                  	;pop	es
 22136                                  	;mov	cx,ax
 22137                                  
 22138                                  	; 04/05/2019 - Retro DOS v4.0
 22139                                  
 22140                                  	; MSDOS 6.0
 22141                                  ;M039: Optimized this section.
 22142 00003797 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22143 00003798 E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22144 0000379B 8916[CC05]              	MOV	[BYTSECPOS],DX
 22145 0000379F A3[C405]                	MOV	[SECPOS],AX
 22146 000037A2 890E[C605]              	MOV	[SECPOS+2],CX
 22147 000037A6 89CA                    	MOV	DX,CX
 22148                                  
 22149 000037A8 89C3                    	MOV	BX,AX
 22150                                  	;and	bl,[es:bp+4]
 22151 000037AA 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22152 000037AE 881E[7305]              	MOV	[SECCLUSPOS],BL
 22153                                  
 22154 000037B2 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22155 000037B5 59                      	POP	CX			;CX = byte count.
 22156 000037B6 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22157                                  	;cmp	ax,[es:bp+0Dh]
 22158 000037B8 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22159 000037BC 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22160                                  
 22161 000037BE A3[BC05]                	MOV	[CLUSNUM],AX
 22162 000037C1 07                      	POP	ES			; ES:DI point to SFT
 22163                                  ;M039
 22164                                  
 22165                                  NOSETSTUFF:
 22166 000037C2 89C8                    	MOV	AX,CX		; AX = Byte count.
 22167 000037C4 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22168 000037C8 730C                    	JNC	short setup_OK	; Must be less than 64
 22169 000037CA A1[2C03]                	MOV	AX,[DMAADD]
 22170 000037CD F7D8                    	NEG	AX		; Amount of room left in segment (know
 22171                                  				;    less than 64K since max value of CX
 22172                                  				;    is FFFF).
 22173 000037CF 7501                    	JNZ	short NoDec
 22174 000037D1 48                      	DEC	AX
 22175                                  NoDec:
 22176 000037D2 89C1                    	MOV	CX,AX		; Can do this much
 22177 000037D4 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22178                                  setup_OK:
 22179 000037D6 C3                      	retn
 22180                                  
 22181                                  EOFERR:
 22182 000037D7 07                      	POP	ES		; ES:DI point to SFT
 22183 000037D8 31C9                    	XOR	CX,CX		; No bytes read
 22184                                  ;;;;;;;;;;; 7/18/86
 22185                                  	; MSDOS 3.3
 22186                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22187                                  ;;;;;;;;;;;
 22188                                  NOROOM:
 22189 000037DA 5B                      	POP	BX		; Kill return address
 22190 000037DB F8                      	CLC
 22191 000037DC C3                      	retn			; RETURN TO CALLER OF CALLER
 22192                                  
 22193                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22194                                  ;---------------------------------------------------------------------------
 22195                                  ;
 22196                                  ; Procedure Name : BREAKDOWN
 22197                                  ;
 22198                                  ; Inputs:
 22199                                  ;	CX = Length of disk transfer in bytes
 22200                                  ;	ES:BP = Base of drive parameters
 22201                                  ;	[BYTSECPOS] = Byte position within first sector
 22202                                  ;	DS = DOSDATA
 22203                                  ; Outputs:
 22204                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22205                                  ;	[SECCNT] = No. of whole sectors to transfer
 22206                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22207                                  ; AX, BX, DX destroyed. No other registers affected.
 22208                                  ;---------------------------------------------------------------------------
 22209                                  
 22210                                  BREAKDOWN:
 22211 000037DD A1[CC05]                	MOV	AX,[BYTSECPOS]
 22212 000037E0 89CB                    	MOV	BX,CX
 22213 000037E2 09C0                    	OR	AX,AX
 22214 000037E4 740E                    	JZ	short SAVFIR	; Partial first sector?
 22215                                  	;sub	ax,[es:bp+2]
 22216 000037E6 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22217 000037EA F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22218 000037EC 29C3                    	SUB	BX,AX		; Subtract from total length
 22219 000037EE 7304                    	JAE	short SAVFIR
 22220 000037F0 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22221 000037F2 31DB                    	XOR	BX,BX		; And no bytes are left
 22222                                  SAVFIR:
 22223 000037F4 A3[D205]                	MOV	[BYTCNT1],AX
 22224 000037F7 89D8                    	MOV	AX,BX
 22225 000037F9 31D2                    	XOR	DX,DX
 22226                                  	;div	word [ES:BP+2]
 22227 000037FB 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22228 000037FF A3[D605]                	MOV	[SECCNT],AX
 22229 00003802 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22230                                  	; MSDOS 3.3
 22231                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22232                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22233                                  	;CMP	AX,1
 22234                                  	;retnz
 22235                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22236                                  	;MOV	[BYTCNT2],AX
 22237                                  	;MOV	[SECCNT],DX	; DX = 0
 22238                                  _RET45:
 22239 00003806 C3                      	retn
 22240                                  
 22241                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22242                                  
 22243                                  ;----------------------------------------------------------------------------
 22244                                  ;
 22245                                  ; Procedure Name : READ_LOCK_VIOLATION
 22246                                  ;
 22247                                  ; ES:DI points to SFT. This entry used by NET_READ
 22248                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22249                                  ; Else do retrys.
 22250                                  ; ES:DI,DS,CX preserved
 22251                                  ;
 22252                                  ;----------------------------------------------------------------------------
 22253                                  
 22254                                  READ_LOCK_VIOLATION:
 22255 00003807 C606[7505]00            	MOV	byte [READOP],0
 22256                                  ERR_ON_CHECK:
 22257                                  	;;test	word [es:di+2],8000h
 22258                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22259                                  	;JNZ	short HARD_ERR
 22260                                  
 22261                                  	; 04/05/2019
 22262                                  	;test	byte [es:di+3],80h
 22263 0000380C 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22264 00003811 7508                    	JNZ	short HARD_ERR
 22265                                  
 22266                                  	;PUSH	CX
 22267                                  	;;mov	cl,[es:di+2]
 22268                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22269                                  	;;and	cl,0F0h
 22270                                  	;AND	CL,SHARING_MASK
 22271                                  	;;cmp	cl,0
 22272                                  	;CMP	CL,SHARING_COMPAT
 22273                                  	;POP	CX
 22274                                  	;JNE	short NO_HARD_ERR
 22275                                  	; 21/09/2023
 22276 00003813 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22277 00003817 24F0                    	and	al,SHARING_MASK
 22278                                  	;cmp	al,SHARING_COMPAT
 22279                                  	;jne	short NO_HARD_ERR
 22280 00003819 7505                    	jnz	short NO_HARD_ERR
 22281                                  HARD_ERR:
 22282 0000381B E8753A                  	call	LOCK_VIOLATION
 22283 0000381E 73E6                    	jnc	short _RET45		; User wants Retrys
 22284                                  NO_HARD_ERR:
 22285 00003820 31C9                    	XOR	CX,CX			;No bytes transferred
 22286                                  	;mov	ax,21h
 22287 00003822 B82100                  	MOV	AX,error_lock_violation
 22288 00003825 F9                      	STC
 22289 00003826 C3                      	retn
 22290                                  
 22291                                  ;----------------------------------------------------------------------------
 22292                                  ;
 22293                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22294                                  ;
 22295                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22296                                  ; This entry used by NET_WRITE
 22297                                  ;
 22298                                  ;----------------------------------------------------------------------------
 22299                                  
 22300                                  WRITE_LOCK_VIOLATION:
 22301 00003827 C606[7505]01            	MOV	byte [READOP],1
 22302 0000382C EBDE                    	JMP	short ERR_ON_CHECK
 22303                                  
 22304                                  ; 04/05/2019 - Retro DOS v4.0
 22305                                  
 22306                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22307                                  
 22308                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22309                                  ;----------------------------------------------------------------------------
 22310                                  ;
 22311                                  ; Procedure Name : DISKREAD
 22312                                  ;
 22313                                  ; Inputs:
 22314                                  ;	Outputs of SETUP
 22315                                  ; Function:
 22316                                  ;	Perform disk read
 22317                                  ; Outputs:
 22318                                  ;    Carry clear
 22319                                  ;	CX = No. of bytes read
 22320                                  ;	ES:DI point to SFT
 22321                                  ;	SFT offset and cluster pointers updated
 22322                                  ;    Carry set
 22323                                  ;	CX = 0
 22324                                  ;	ES:DI point to SFT
 22325                                  ;	AX has error code
 22326                                  ;----------------------------------------------------------------------------
 22327                                  
 22328                                  ;hkn; called from disk.asm. DS already set up.
 22329                                  
 22330                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22331                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22332                                  
 22333                                  DISKREAD:
 22334                                  	;mov	ax,[es:di+11h]
 22335 0000382E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22336                                  	;mov	bx,[es:di+13h]
 22337 00003832 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22338 00003836 2B06[CE05]              	SUB	AX,[BYTPOS]
 22339 0000383A 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22340 0000383E 7226                    	JB	short RDERR		;Read starts past EOF
 22341 00003840 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22342 00003842 09C0                    	OR	AX,AX
 22343 00003844 7420                    	JZ	short RDERR		;Read starts at EOF
 22344 00003846 39C8                    	CMP	AX,CX
 22345 00003848 7302                    	JAE	short ENUF		;I/O fits
 22346 0000384A 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22347                                  ENUF:
 22348                                  	; MSDOS 3.3
 22349                                  	;test	byte [es:di+4],8
 22350                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22351                                  	;jnz	short SET_ACC_ERR
 22352                                  	;call	LOCK_CHECK
 22353                                  	;jnb	short _READ_OK
 22354                                  	;call	READ_LOCK_VIOLATION
 22355                                  	;jnb	short ENUF
 22356                                  	;retn
 22357                                  
 22358                                  	; MSDOS 6.0
 22359 0000384C E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22360 0000384F 7301                    	JNC	short _READ_OK 		; There are no locks
 22361 00003851 C3                      	retn
 22362                                  
 22363                                  _READ_OK:
 22364 00003852 C42E[8A05]              	LES	BP,[THISDPB]
 22365 00003856 E884FF                  	CALL	BREAKDOWN
 22366 00003859 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 22367                                  
 22368 0000385D E86E13                  	call	FNDCLUS
 22369                                       	; MSDOS 6.0			;M022 conditional removed here
 22370 00003860 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22371                                  					; migrated from 330a - HKN
 22372 00003862 09C9                    	OR	CX,CX
 22373 00003864 7413                    	JZ	short SKIPERR
 22374                                  RDERR:
 22375 00003866 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22376 00003868 E92102                  	jmp	WRTERR22
 22377                                  
 22378                                  ;RDLASTJ: 
 22379                                  	;JMP	RDLAST                  ;M039
 22380                                  
 22381                                  SETSFTJ2: 
 22382 0000386B E99600                  	JMP	SETSFT
 22383                                  
 22384                                  CANOT_READ:
 22385                                  	; MSDOS 3.3
 22386                                  	;POP	CX		;M039.
 22387                                  	; MSDOS 3.3 & MSDOS 6.0
 22388 0000386E 59                      	POP	CX              ;Clean stack.
 22389 0000386F 5B                      	POP	BX
 22390                                  
 22391                                  	;entry	SET_ACC_ERR_DS
 22392                                  SET_ACC_ERR_DS:
 22393                                  
 22394                                  ;hkn; SS is DOSDATA
 22395                                  	;Context DS
 22396 00003870 16                      	push	ss
 22397 00003871 1F                      	pop	ds
 22398                                  
 22399                                  	;entry	SET_ACC_ERR
 22400                                  SET_ACC_ERR:
 22401 00003872 31C9                    	XOR	CX,CX
 22402                                  	;mov	ax,5
 22403 00003874 B80500                  	MOV	AX,error_access_denied
 22404 00003877 F9                      	STC
 22405 00003878 C3                      	retn
 22406                                  
 22407                                  SKIPERR:
 22408 00003879 8916[BA05]              	MOV	[LASTPOS],DX
 22409 0000387D 891E[BC05]              	MOV	[CLUSNUM],BX
 22410 00003881 833E[D205]00            	CMP	word [BYTCNT1],0
 22411 00003886 7405                    	JZ	short RDMID
 22412                                  
 22413 00003888 E8B913                  	call	BUFRD
 22414 0000388B 72E3                    	JC	short SET_ACC_ERR_DS
 22415                                  
 22416                                  RDMID:
 22417 0000388D 833E[D605]00            	CMP	word [SECCNT],0
 22418                                  	;JZ	RDLAST ; 10/08/2018
 22419 00003892 7453                    	jz	short RDLAST
 22420                                  
 22421 00003894 E84214                  	call	NEXTSEC
 22422 00003897 72D2                    	JC	short SETSFTJ2
 22423                                  
 22424 00003899 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22425                                  ONSEC:
 22426 0000389E 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22427 000038A2 8B0E[D605]              	MOV	CX,[SECCNT]
 22428 000038A6 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22429                                  RDLP:
 22430 000038AA E85D14                  	call	OPTIMIZE
 22431 000038AD 72C1                    	JC	short SET_ACC_ERR_DS
 22432                                  
 22433 000038AF 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22434 000038B0 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22435 000038B1 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22436                                  	;mov	byte [ALLOWED],38h
 22437 000038B2 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22438 000038B7 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22439                                  
 22440 000038BB 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22441 000038BC 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22442                                  
 22443                                  	; 04/05/2019 - Retro DOS v4.0
 22444                                  
 22445                                  	; MSDOS 6.0
 22446 000038BD E80022                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22447                                  
 22448                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22449 000038C0 E8CFFD                  	call	DREAD
 22450                                  
 22451                                  	; MSDOS 3.3 
 22452                                  	;pop	bx
 22453                                  	;pop	dx
 22454                                  	;jc	short CANOT_READ
 22455                                  	;add	bx,dx	; (bx = Extent end)
 22456                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22457                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22458                                  	;call	SETVISIT
 22459                                  	; ->***
 22460                                  ;M039
 22461                                  	; MSDOS 6.0 
 22462 000038C3 59                      	pop	cx
 22463 000038C4 5A                      	pop	dx
 22464 000038C5 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22465 000038CA 72A2                    	jc	short CANOT_READ
 22466                                  
 22467 000038CC 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22468                                  
 22469                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22470                                  ;            sectors, also termed an "Extent".)
 22471                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22472                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22473                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22474                                  ;
 22475                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22476                                  ;	buffers must be "read" into the transfer memory block, so that the
 22477                                  ;       transfer memory reflects the most recent data.
 22478                                  
 22479 000038D1 E85E00                  	call	DskRdBufScan
 22480                                  
 22481                                  	;Context DS
 22482 000038D4 16                      	push	ss
 22483 000038D5 1F                      	pop	ds
 22484                                          
 22485 000038D6 59                      	pop	cx
 22486 000038D7 5B                              pop	bx
 22487                                  
 22488                                  ;       CX = # of sector remaining.
 22489                                  ;       BX = Next physical cluster.
 22490                                  
 22491                                  ;M039
 22492                                  
 22493                                  ;;;;;;;;
 22494                                  ;	; 25/07/2018 - Retro DOS v3.0
 22495                                  ;	; ***->
 22496                                  ;	; MSDOS 3.3
 22497                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22498                                  ;bufq:
 22499                                  ;;	DX = Extent start.
 22500                                  ;;	BX = Extent end.
 22501                                  ;;	 AL = Drive #.
 22502                                  ;;     DS:DI-> 1st buffer in queue.
 22503                                  ;
 22504                                  ;	;or	byte [di+5],20h
 22505                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22506                                  ;	;cmp	al,[di+4]	
 22507                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22508                                  ;	jnz	short bufq3
 22509                                  ;	;cmp	[di+6],dx
 22510                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22511                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22512                                  ;	;cmp	[di+6],bx
 22513                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22514                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22515                                  ;	
 22516                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22517                                  ;
 22518                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22519                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22520                                  ;;      as MRU (Most Recently Used).
 22521                                  ;
 22522                                  ;	;test	byte [di+5],40h
 22523                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22524                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22525                                  ;	pop	ax ; transfer address
 22526                                  ;	push	ax
 22527                                  ;	push	di
 22528                                  ;	push	dx
 22529                                  ;	;sub	dx,[di+6]
 22530                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22531                                  ;	neg	dx
 22532                                  ;
 22533                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22534                                  ;;           block.
 22535                                  ;
 22536                                  ;	mov	si,di
 22537                                  ;	mov	di,ax
 22538                                  ;	mov	ax,dx
 22539                                  ;	;mov	cx,[es:bp+6]	
 22540                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22541                                  ;	mul	cx
 22542                                  ;	add	di,ax
 22543                                  ;
 22544                                  ;	lea	si,[si+16]
 22545                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22546                                  ;	shr	cx,1
 22547                                  ;	push	es
 22548                                  ;	mov	es,[SS:DMAADD+2]
 22549                                  ;
 22550                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22551                                  ;;      DS:SI-> Buffer sector data.
 22552                                  ;;      ES:DI-> Destination within Transfer memory block.
 22553                                  ;
 22554                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22555                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22556                                  ;	;rep	movsb                   ;Copy last byte.
 22557                                  ;	jnc	short bufq1
 22558                                  ;	movsb
 22559                                  ;bufq1:
 22560                                  ;	pop	es
 22561                                  ;	pop	dx
 22562                                  ;	pop	di
 22563                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22564                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22565                                  ;bufq2:
 22566                                  ;	call	SCANPLACE
 22567                                  ;bufq3:
 22568                                  ;	call	SKIPVISIT
 22569                                  ;	jnz	short bufq
 22570                                  ;	
 22571                                  ;	push	ss
 22572                                  ;	pop	ds
 22573                                  ;	pop	cx
 22574                                  ;	pop	cx
 22575                                  ;	pop	bx	
 22576                                  ;bufq4:
 22577                                  ;;;;;;;
 22578 000038D8 E30D                    	JCXZ	RDLAST
 22579                                  
 22580 000038DA E8CB1B                  	call	IsEOF			; test for eof on fat size
 22581 000038DD 7325                    	JAE	short SETSFT
 22582                                  
 22583 000038DF B200                    	MOV	DL,0
 22584 000038E1 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22585 000038E5 EBC3                    	JMP	short RDLP ; 19/05/2019
 22586                                  
 22587                                  RDLAST:
 22588 000038E7 A1[D405]                	MOV	AX,[BYTCNT2]
 22589 000038EA 09C0                    	OR	AX,AX
 22590 000038EC 7416                    	JZ	short SETSFT
 22591 000038EE A3[D205]                	MOV	[BYTCNT1],AX
 22592                                  
 22593 000038F1 E8E513                  	call	NEXTSEC
 22594 000038F4 720E                    	JC	short SETSFT
 22595                                  
 22596 000038F6 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22597 000038FC E84513                  	call	BUFRD
 22598                                  	; 10/08/2018
 22599                                  
 22600 000038FF 7303                    	JNC	short SETSFT
 22601 00003901 E96CFF                  	JMP	SET_ACC_ERR_DS
 22602                                  
 22603                                  ;------------------------------------------------------------------------------
 22604                                  ;
 22605                                  ; Procedure Name : SETSFT
 22606                                  ; Inputs:
 22607                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22608                                  ;		and set cluster fields
 22609                                  ; Function:
 22610                                  ;	Update [THISSFT] based on the transfer
 22611                                  ; Outputs:
 22612                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22613                                  ;	ES:DI points to [THISSFT]
 22614                                  ;	CX No. of bytes transferred
 22615                                  ;	Carry clear
 22616                                  ;
 22617                                  ;----------------------------------------------------------------------------
 22618                                  
 22619                                  	;entry	SETSFT
 22620                                  
 22621                                  ; 26/07/2018 - Retro DOS v3.0
 22622                                  SETSFT:
 22623 00003904 C43E[9E05]              	LES	DI,[THISSFT]
 22624                                  
 22625                                  ; Same as SETSFT except ES:DI already points to SFT
 22626                                  	;entry	SETCLUS
 22627                                  SETCLUS:	
 22628 00003908 8B0E[B805]              	MOV	CX,[NEXTADD]
 22629 0000390C 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22630                                  	;;test	word [es:di+5],80h
 22631                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22632                                  	;JNZ	short ADDREC		; don't set clusters if device
 22633                                  
 22634                                  	; 04/05/2019 - Retro DOS v4.0
 22635                                  	;test	byte [es:di+5],80h
 22636 00003910 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22637 00003915 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22638                                  
 22639 00003917 A1[BC05]                	MOV	AX,[CLUSNUM]
 22640                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22641                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22642 0000391A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22643 0000391E A1[BA05]                	MOV	AX,[LASTPOS]
 22644                                  	;mov	[es:di+19h],ax
 22645 00003921 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22646                                  
 22647                                  ;----------------------------------------------------------------------------
 22648                                  ;
 22649                                  ; Procedure : AddRec
 22650                                  ; Inputs:
 22651                                  ;	ES:DI points to SFT
 22652                                  ;	CX is No. Bytes transferred
 22653                                  ; Function:
 22654                                  ;	Update the SFT offset based on the transfer
 22655                                  ; Outputs:
 22656                                  ;	sf_position updated to point to first byte after transfer
 22657                                  ;	ES:DI points to SFT
 22658                                  ;	CX No. of bytes transferred
 22659                                  ;	Carry clear
 22660                                  ;----------------------------------------------------------------------------
 22661                                  
 22662                                  	;entry	AddRec
 22663                                  ADDREC:
 22664 00003925 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22665                                  	;add	[es:di+15h],cx
 22666 00003927 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22667                                  	;adc	word [es:di+17h], 0
 22668 0000392B 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22669                                  RET28:	
 22670 00003930 F8                      	CLC
 22671 00003931 C3                      	retn
 22672                                  
 22673                                  ; 25/07/2018
 22674                                  ; MSDOS 6.0
 22675                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22676                                  ;----------------------------------------------------------------------------
 22677                                  ;
 22678                                  ; Procedure Name : DskRdBufScan
 22679                                  ;
 22680                                  ; Inputs:
 22681                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22682                                  ;            sectors, also termed an "Extent".)
 22683                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22684                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22685                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22686                                  ;
 22687                                  ; Function:
 22688                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22689                                  ;	"read" into the transfer memory block, so that the transfer memory
 22690                                  ;	reflects the most recent data.
 22691                                  ;
 22692                                  ; Outputs:
 22693                                  ;       Transfer memory updated as required.
 22694                                  ;
 22695                                  ; Uses:
 22696                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22697                                  ;       SS override for all global variables.
 22698                                  ;
 22699                                  ; Notes:
 22700                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22701                                  ;	than the FIRST.
 22702                                  ;----------------------------------------------------------------------------
 22703                                  ;M039: Created
 22704                                  
 22705                                  ; 04/05/2019 - Retro DOS v4.0
 22706                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22707                                  
 22708                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22709                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22710                                  
 22711                                  ;procedure DskRdBufScan,NEAR
 22712                                  ;
 22713                                  ;ASSUME  DS:NOTHING
 22714                                  
 22715                                  DskRdBufScan:
 22716 00003932 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22717 00003938 743C                    	je	short bufx		     ; -no, skip all work.
 22718                                  
 22719 0000393A 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22720 0000393F 89DE                    	mov     si,bx
 22721 00003941 01D1                    	add     cx,dx
 22722 00003943 83D600                  	adc     si,0
 22723                                  
 22724 00003946 E80F1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22725                                  	;mov	ax,[di+2]
 22726 00003949 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22727 0000394C 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22728                                  		
 22729                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22730                                  	;;mov	al,[es:bp+0]
 22731                                  	;mov	al,[es:bp+DPB.DRIVE]
 22732                                  	; 15/12/2022
 22733 00003950 268A4600                	mov	al,[es:bp]
 22734                                  
 22735                                  ;       BX:DX = Extent start.
 22736                                  ;       SI:CX = Extent end + 1.
 22737                                  ;          AL = Drive #.
 22738                                  ;       DS:DI-> 1st buffer in queue.
 22739                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22740                                  
 22741                                  bufq:	
 22742                                  	;cmp	al,[di+4]
 22743 00003954 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22744 00003957 7514                    	jne	short bufq1        	;  -no, jump.
 22745                                  
 22746                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22747                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22748                                  
 22749                                  	;cmp	bx,[di+8]
 22750 00003959 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22751 0000395C 7503                    	jne	short bufq01
 22752                                  	;cmp	dx,[di+6]
 22753 0000395E 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22754                                  bufq01:
 22755 00003961 770A                    	ja	short bufq1
 22756                                  
 22757                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22758                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22759                                  
 22760                                  	;cmp	si,[di+8]
 22761 00003963 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22762 00003966 7503                    	jne	short bufq02
 22763                                  	;cmp	cx,[di+6]
 22764 00003968 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22765                                  bufq02:
 22766 0000396B 770A                    	ja	short bufq2
 22767                                  bufq1:	
 22768 0000396D 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22769 00003972 8B3D                    	mov	di,[di]
 22770                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22771 00003974 75DE                    	jne	short bufq		; -no, do next buffer
 22772                                  bufx:
 22773 00003976 C3                      	retn				;Exit.
 22774                                  
 22775                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22776                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22777                                  ;       as MRU (Most Recently Used).
 22778                                  
 22779                                  bufq2:	
 22780 00003977 50                      	push	ax
 22781                                  	;test	byte [di+5],40h
 22782 00003978 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22783 0000397C 742D                    	jz	short bufq3                    ; -no, jump.
 22784                                  
 22785                                  ;       SaveReg <cx,dx,si,di,es>
 22786 0000397E 51                      	push	cx
 22787 0000397F 52                      	push	dx
 22788 00003980 56                      	push	si
 22789 00003981 57                      	push	di
 22790 00003982 06                      	push	es
 22791                                  
 22792 00003983 89D0                    	mov     ax,dx
 22793                                  	;sub	ax,[di+6]
 22794 00003985 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22795 00003988 F7D8                    	neg	ax
 22796                                  
 22797                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22798                                  ;            block. (Note: the upper word of the sector # may be ignored
 22799                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22800                                  ;            is imposed by the input parameters of the disk read operation.)
 22801                                  
 22802                                  	;lea	si,[di+20]
 22803 0000398A 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22804                                  	;mov	cx,[es:bp+2]
 22805 0000398D 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22806 00003991 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22807 00003993 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22808 00003998 01C7                    	add	di,ax
 22809 0000399A 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22810 0000399F D1E9                    	shr	cx,1
 22811                                  
 22812                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22813                                  ;       DS:SI-> Buffer sector data.
 22814                                  ;       ES:DI-> Destination within Transfer memory block.
 22815                                  
 22816 000039A1 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22817                                  	;; 04/05/2019
 22818                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22819                                  	;;rep	movsb                   ;Copy last byte.
 22820                                  	;jnc	short bufq03	
 22821                                  	;movsb
 22822                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22823                                  	;adc	cx,0
 22824                                  	;rep	movsb
 22825                                  	; 22/09/2023
 22826 000039A3 7301                    	jnc	short bufq03
 22827 000039A5 A4                      	movsb
 22828                                  bufq03:
 22829                                  	;RestoreReg <es,di,si,dx,cx>
 22830 000039A6 07                      	pop	es
 22831 000039A7 5F                      	pop	di
 22832 000039A8 5E                      	pop	si
 22833 000039A9 5A                      	pop	dx
 22834 000039AA 59                      	pop	cx
 22835                                  
 22836                                  ;       DS:DI -> current buffer.
 22837                                  bufq3:	
 22838 000039AB 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22839                                          ;invoke SCANPLACE
 22840 000039AD E8BA1E                  	call	SCANPLACE
 22841 000039B0 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22842 000039B5 58                      	pop	ax
 22843                                  	;jne	short bufq		; -no, jump.
 22844                                  	;;jmp	short bufx		; -yes, exit.
 22845                                  	;; 12/06/2019
 22846                                  	;retn
 22847                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22848 000039B6 759C                    	jne	short bufq
 22849 000039B8 EBBC                    	jmp	short bufx
 22850                                  
 22851                                  ;EndProc DskRdBufScan
 22852                                  
 22853                                  ;============================================================================
 22854                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22855                                  ;============================================================================
 22856                                  ; 04/05/2019 - Retro DOS v4.0
 22857                                  ; 24/07/2018 - Retro DOS v3.0
 22858                                  
 22859                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22860                                  ;----------------------------------------------------------------------------
 22861                                  ;
 22862                                  ; Procedure Name : DISKWRITE
 22863                                  ;
 22864                                  ; Inputs:
 22865                                  ;       Outputs of SETUP
 22866                                  ; Function:
 22867                                  ;       Perform disk write
 22868                                  ; Outputs:
 22869                                  ;    Carry clear
 22870                                  ;       CX = No. of bytes written
 22871                                  ;       ES:DI point to SFT
 22872                                  ;       SFT offset and cluster pointers updated
 22873                                  ;    Carry set
 22874                                  ;       CX = 0
 22875                                  ;       ES:DI point to SFT
 22876                                  ;       AX has error code
 22877                                  ;----------------------------------------------------------------------------
 22878                                  
 22879                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22880                                  
 22881                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22882                                  
 22883                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22884                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22885                                  
 22886                                  DISKWRITE:
 22887                                  	; MSDOS 3.3
 22888                                  	; IBMDOS.COM - Offset 436Dh
 22889                                  	;;test	byte [es:di+4],8
 22890                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22891                                  	;jz	short write_cont
 22892                                  	;jmp	SET_ACC_ERR_DS
 22893                                  ;write_cont:
 22894                                  	;push	cx
 22895                                  	;or	cx,cx
 22896                                  	;jnz	short Not_Truncate
 22897                                  	;;mov	cx,-1
 22898                                  	;dec	cx
 22899                                  ;Not_Truncate:
 22900                                  	;call	LOCK_CHECK
 22901                                  	;pop	cx
 22902                                  	;jnb	short _WRITE_OK
 22903                                  	;call	WRITE_LOCK_VIOLATION
 22904                                  	;jnb	short DISKWRITE
 22905                                  	;retn
 22906                                  
 22907                                  	; MSDOS 6.0
 22908 000039BA E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22909                                  	; 19/08/2018
 22910 000039BD 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22911 000039BF C3                      	retn
 22912                                  
 22913                                  WRTEOFJ:
 22914 000039C0 E9DC01                  	JMP     WRTEOF
 22915                                  
 22916                                  _WRITE_OK:
 22917                                   	; 27/07/2018
 22918                                  	; IBMDOS.COM - Offset 438Eh
 22919                                  	
 22920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22921                                  	;and	word [es:di+5],0BFBFh
 22922 000039C3 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22923                                  				; Mark file as dirty, clear no date on close
 22924                                  
 22925                                  	; 04/05/2019 - Retro DOS v4.0	
 22926                                  
 22927                                  	; MSDOS 6.0
 22928                                  	; mov 	ax,[es:di+11h]
 22929 000039C9 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22930 000039CD A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22931                                  	;mov	ax,[es:di+13h]
 22932 000039D0 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22933 000039D4 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22934                                  
 22935                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22936                                  
 22937                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22938 000039D7 C42E[8A05]              	LES     BP,[THISDPB]
 22939                                  
 22940 000039DB E8FFFD                  	call	BREAKDOWN
 22941                                  
 22942 000039DE A1[CE05]                	MOV     AX,[BYTPOS]
 22943 000039E1 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22944 000039E5 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22945 000039E7 01C8                    	ADD     AX,CX
 22946 000039E9 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22947                                  
 22948                                  	;mov	bx,[es:bp+2]
 22949 000039EC 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22950                                  
 22951                                  	; MSDOS 3.3
 22952                                  	;cmp	dx,bx
 22953                                  	;jnb	short WRTERR33
 22954                                  	;div	bx
 22955                                  	;mov	bx,ax
 22956                                  	;OR	DX,DX
 22957                                  	;JNZ	short CALCLUS
 22958                                  	;dec	ax
 22959                                  ;CALCLUS:
 22960                                  	; MSDOS 3.3
 22961                                  	;mov	cl,[es:bp+5]
 22962                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22963                                  	;shr	ax,cl
 22964                                  	;push	ax
 22965                                  	;push	dx
 22966                                  	;push	es
 22967                                  	;les	di,[THISSFT]
 22968                                  	;;mov	ax,[es:di+11h]
 22969                                  	;;mov	dx,[es:di+13h]
 22970                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22971                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22972                                  	;pop	es
 22973                                  	;;DX:AX = current file size (in bytes).
 22974                                  	;;div	word [es:bp+2]
 22975                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22976                                  	;mov	cx,ax
 22977                                  	;or	dx,dx
 22978                                  	;jz	short NORND
 22979                                  	;inc	ax
 22980                                  ;NORND:
 22981                                  	; MSDOS 6.0
 22982 000039F0 E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22983 000039F3 89C6                    	MOV	SI,AX
 22984 000039F5 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22985                                  
 22986                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22987                                  
 22988 000039F9 09D2                    	OR	DX,DX
 22989 000039FB 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22990 000039FC 89CA                    	MOV	DX,CX			;M039
 22991 000039FE 7506                    	JNZ	short CALCLUS
 22992 00003A00 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22993 00003A03 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22994                                  
 22995                                  CALCLUS:
 22996                                  	; MSDOS 6.0
 22997 00003A06 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22998 00003A09 5A                      	POP	DX
 22999                                  
 23000                                  ;       AX = Last cluster to write.
 23001                                  ;       DX = # of bytes in last sector to write (the "tail").
 23002                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23003                                  
 23004 00003A0A 50                      	PUSH	AX
 23005 00003A0B 52                      	PUSH	DX
 23006                                  ;M039
 23007 00003A0C 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23008 00003A10 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23009 00003A13 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23010 00003A16 890E[0E06]              	mov	[TEMP_VAR2],cx
 23011 00003A1A 890E[CA05]              	mov	[VALSEC+2],cx
 23012 00003A1E 89C1                    	mov	cx,ax
 23013 00003A20 89F3                    	mov	bx,si
 23014                                  
 23015                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23016                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23017                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23018                                  ;                     DX = # of bytes in last sector of current file.
 23019                                  ;M039
 23020 00003A22 09D2                    	OR	DX,DX
 23021 00003A24 7407                    	JZ	short NORND
 23022                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23023                                  	;ADC	word [VALSEC+2],0
 23024                                  	; 22/09/2023
 23025 00003A26 40                      	inc	ax  ; 0FFFFh -> 0
 23026 00003A27 7504                    	jnz	short NORND
 23027 00003A29 FF06[CA05]              	inc	word [VALSEC+2]
 23028                                  NORND:		
 23029                                  	; MSDOS 3.3 & MSDOS 6.0
 23030 00003A2D A3[C805]                	MOV     [VALSEC],AX
 23031                                  
 23032                                  ;       [VALSEC] = Last sector of current file.
 23033                                  
 23034 00003A30 31C0                    	XOR     AX,AX
 23035 00003A32 A3[DE05]                	MOV     [GROWCNT],AX
 23036 00003A35 A3[E005]                	MOV     [GROWCNT+2],AX
 23037 00003A38 58                      	POP     AX
 23038                                  
 23039                                  	; MSDOS 6.0
 23040 00003A39 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23041 00003A3D 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23042 00003A41 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23043 00003A43 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23044 00003A45 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23045 00003A47 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23046 00003A4B EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23047                                  lowsec:
 23048                                  	;MOV	DI,0			;F.C. >32mb
 23049                                  	; 22/09/2023
 23050 00003A4D 31FF                    	xor	di,di
 23051                                  	; MSDOS 3.3 & MSDOS 6.0
 23052 00003A4F 29CB                    	SUB	BX,CX			; Number of full sectors
 23053 00003A51 7253                    	JB	short NOGROW
 23054 00003A53 7444                    	JZ	short TESTTAIL
 23055                                  yesgrow:
 23056                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23057 00003A55 89D1                    	MOV     CX,DX
 23058 00003A57 93                      	XCHG    AX,BX
 23059                                  	;mul	word [es:bp+2]
 23060 00003A58 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23061                                  	
 23062                                  	; MSDOS 6.0
 23063 00003A5C 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 23064 00003A60 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 23065 00003A63 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 23066                                  	;mul	word [es:bp+2]
 23067 00003A65 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23068                                  	
 23069 00003A69 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 23070 00003A6D 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 23071 00003A6F A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 23072                                  
 23073                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23074 00003A72 29C8                    	SUB     AX,CX			; Take off current "tail"
 23075 00003A74 83DA00                  	SBB     DX,0			; 32-bit extension
 23076 00003A77 01D8                    	ADD     AX,BX			; Add on new "tail"
 23077 00003A79 83D200                  	ADC     DX,0			; ripple tim's head off
 23078 00003A7C EB21                    	JMP     SHORT SETGRW
 23079                                  
 23080                                  HAVSTART:
 23081                                  	;int 3
 23082 00003A7E 89C1                    	MOV     CX,AX
 23083 00003A80 E86B11                  	call	SKPCLP
 23084                                  	;JCXZ	DOWRTJ
 23085                                  	; 16/12/2022
 23086 00003A83 E357                    	jcxz	DOWRT
 23087                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23088                                  	;jcxz	DOWRTJ
 23089                                  
 23090 00003A85 E80D13                  	call	ALLOCATE
 23091                                  	;JNC	short DOWRTJ
 23092                                  	; 16/12/2022
 23093 00003A88 7352                    	jnc	short DOWRT
 23094                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23095                                  	;jnc	short DOWRTJ
 23096                                  
 23097                                  	;entry   WRTERR
 23098                                  WRTERR:
 23099 00003A8A B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 23100                                  
 23101                                  	;entry WRTERR22
 23102                                  WRTERR22:
 23103 00003A8C A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 23104                                  
 23105                                  	; 27/07/2018
 23106                                  WRTERR33:
 23107                                  	;MOV	CX,0			;No bytes transferred
 23108 00003A8F 31C9                    	XOR     CX,CX
 23109                                  					
 23110 00003A91 C43E[9E05]              	LES     DI,[THISSFT]
 23111                                  	;CLC ; 19/05/2019
 23112                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23113                                  	; 16/12/2022
 23114                                  	;clc
 23115 00003A95 C3                      	retn
 23116                                  
 23117                                  	; 16/12/2022
 23118                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23119                                  ;DOWRTJ:
 23120                                  	;JMP	short DOWRT
 23121                                  
 23122                                  ACC_ERRWJ:
 23123                                  	; 10/08/2018
 23124                                  	;JMP	SET_ACC_ERRW
 23125                                  	; 16/12/2022
 23126 00003A96 E9D7FD                  	jmp	SET_ACC_ERR_DS
 23127                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23128                                  	;jmp	SET_ACC_ERRW	
 23129                                  
 23130                                  TESTTAIL:
 23131 00003A99 29D0                    	SUB     AX,DX
 23132 00003A9B 7609                    	JBE	short NOGROW
 23133 00003A9D 31D2                    	XOR     DX,DX
 23134                                  SETGRW:
 23135 00003A9F A3[DE05]                	MOV	[GROWCNT],AX
 23136 00003AA2 8916[E005]              	MOV	[GROWCNT+2],DX
 23137                                  NOGROW:
 23138 00003AA6 58                      	POP     AX
 23139 00003AA7 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 23140 00003AAB E82011                  	call	FNDCLUS
 23141 00003AAE 72E6                    	JC	short ACC_ERRWJ
 23142 00003AB0 891E[BC05]              	MOV     [CLUSNUM],BX
 23143 00003AB4 8916[BA05]              	MOV     [LASTPOS],DX
 23144                                  
 23145 00003AB8 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23146 00003ABA 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23147 00003ABC E3C0                    	JCXZ    HAVSTART        ; See if no more data
 23148 00003ABE 51                      	PUSH    CX              ; No. of clusters short of first
 23149 00003ABF 89C1                    	MOV     CX,AX
 23150 00003AC1 E8D112                  	call	ALLOCATE
 23151 00003AC4 59                      	POP     CX
 23152 00003AC5 72C3                    	JC	short WRTERR
 23153 00003AC7 8B16[BA05]              	MOV     DX,[LASTPOS]
 23154 00003ACB 42                      	INC     DX
 23155 00003ACC 49                      	DEC     CX
 23156 00003ACD 7405                    	JZ	short NOSKIP
 23157 00003ACF E81C11                  	call	SKPCLP
 23158 00003AD2 72C2                    	JC	short ACC_ERRWJ
 23159                                  NOSKIP:
 23160 00003AD4 891E[BC05]              	MOV     [CLUSNUM],BX
 23161 00003AD8 8916[BA05]              	MOV     [LASTPOS],DX
 23162                                  DOWRT:
 23163 00003ADC 833E[D205]00            	CMP     word [BYTCNT1],0
 23164 00003AE1 7409                    	JZ	short WRTMID
 23165 00003AE3 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23166 00003AE7 E89311                  	call	BUFWRT
 23167 00003AEA 72AA                    	JC	short ACC_ERRWJ
 23168                                  WRTMID:
 23169 00003AEC A1[D605]                	MOV     AX,[SECCNT]
 23170 00003AEF 09C0                    	OR      AX,AX
 23171                                  	; 20/11/2022
 23172 00003AF1 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23173 00003AF3 0106[C405]              	ADD     [SECPOS],AX
 23174                                  	; 19/05/2019
 23175                                  	; MSDOS 6.0
 23176 00003AF7 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23177 00003AFC E8DA11                  	call	NEXTSEC
 23178                                  	; 16/12/2022
 23179 00003AFF 7295                    	JC	short ACC_ERRWJ
 23180                                  	;JC	short SET_ACC_ERRW	;M039
 23181 00003B01 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23182 00003B06 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23183 00003B0A 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23184 00003B0E 8B0E[D605]              	MOV     CX,[SECCNT]
 23185                                  WRTLP:
 23186 00003B12 E8F511                  	call	OPTIMIZE
 23187 00003B15 7248                    	JC	short SET_ACC_ERRW
 23188                                  	; 16/12/2022
 23189                                  	;JC	short ACC_ERRWJ
 23190                                  
 23191                                  ;M039
 23192                                  ;       DI = Next physical cluster.
 23193                                  ;       AX = # sectors remaining.
 23194                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23195                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23196                                  ;	     sectors, also termed an "Extent".)
 23197                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23198                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23199                                  ;
 23200                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23201                                  ;	are in Extent; they are being over-written.
 23202                                  
 23203 00003B17 57                      	push    di
 23204 00003B18 50                      	push    ax
 23205                                  
 23206                                  	; MSDOS 3.3
 23207                                  	; IBMDOS.COM (1987) - Offset 4497h
 23208                                  	;push	dx
 23209                                  	;push	bx
 23210                                  	;mov	al,[es:bp]
 23211                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23212                                  	;mov	bx,cx
 23213                                  	;add	bx,dx	; (bx = Extent end)
 23214                                  
 23215                                  ;	DX = Extent start.
 23216                                  ;	BX = Extent end.
 23217                                  ;	AL = Drive #.
 23218                                  
 23219                                  	;call	SETVISIT
 23220                                  
 23221                                  ;wbufq1:
 23222                                  	;;or	byte [di+5],20h
 23223                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23224                                  	;;cmp	al,[di+4]	
 23225                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23226                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23227                                  	;;cmp	[di+6],dx
 23228                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23229                                  	;jb	short wbufq2
 23230                                  	;;cmp	[di+6],bx
 23231                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23232                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23233                                  
 23234                                  	;; Buffer sector is in the Extent
 23235                                  
 23236                                  	;;mov	word [di+4],20FFh
 23237                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23238                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23239                                  	;				; .buf_flags, AH = 0, reset/clear
 23240                                  	;call	SCANPLACE
 23241                                  ;wbufq2:
 23242                                  	;call	SKIPVISIT
 23243                                  	;jnz	short wbufq1
 23244                                  	;pop	bx
 23245                                  	;pop	dx
 23246                                  
 23247                                          ; MSDOS 6.0
 23248 00003B19 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 23249                                  
 23250                                  ;ASSUME DS:NOTHING
 23251                                  ;M039
 23252                                  	; MSDOS 3.3 & MSDOS 6.0
 23253                                  ;hkn; SS override for DMAADD and ALLOWED
 23254 00003B1C 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23255                                  	;mov	byte [ss:ALLOWED],38h
 23256 00003B21 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23257                                  
 23258                                  ;	put logic from DWRITE in-line here so we can modify it
 23259                                  ;	for DISK FULL conditions.
 23260                                  
 23261                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23262                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23263                                  
 23264                                  	; 16/12/2022
 23265                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23266                                  	;call	DWRITE
 23267                                  
 23268                                  ;DWRITE_OKAY:
 23269                                  
 23270                                  	; 16/12/2022
 23271                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23272                                  	;pop     cx
 23273                                  	;pop     bx
 23274                                  	;push    ss
 23275                                  	;pop     ds
 23276                                  	;jc      short SET_ACC_ERRW
 23277                                  	;jcxz    WRTLAST
 23278                                  	;mov     dl, 0
 23279                                  	;inc     word [LASTPOS]
 23280                                  	;jmp     short WRTLP
 23281                                  
 23282                                  	; 16/12/2022
 23283                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23284                                  DWRITE_LUP:
 23285                                  	; 23/07/2019 - Retro DOS v3.2
 23286                                  
 23287                                  	; MSDOS 6.0
 23288 00003B27 E8E1FB                  	call	DSKWRITE
 23289 00003B2A 7417                    	jz	short DWRITE_OKAY
 23290                                  
 23291                                  ;;	int	3
 23292                                  
 23293 00003B2C 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23294 00003B2E 7423                    	jz	short DWRITE_DISK_FULL
 23295                                  
 23296                                  	; 16/12/2022
 23297                                  
 23298                                  ;;hkn; SS override
 23299 00003B30 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23300 00003B36 E801FC                  	call	HARDERRRW
 23301 00003B39 3C01                    	CMP	AL,1		; Check for retry
 23302 00003B3B 74EA                    	JZ	short DWRITE_LUP
 23303                                  
 23304                                  	; 16/12/2022
 23305                                  	; 23/07/2019
 23306                                  	;POP	CX ; *4*
 23307                                  	;POP	BX ; *5*
 23308                                  	;
 23309                                  	;push	ss
 23310                                  	;pop	ds
 23311                                  	;
 23312                                  
 23313                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23314                                  
 23315                                  	; 16/12/2022
 23316 00003B3D 3C03                    	CMP	AL,3		; Check for FAIL
 23317 00003B3F F8                      	CLC
 23318 00003B40 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23319 00003B42 F9                      	STC
 23320                                  
 23321                                  DWRITE_OKAY:
 23322                                  	; 16/12/2022
 23323                                  	; 23/07/2019
 23324                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23325 00003B43 59                      	POP	CX ; *4*
 23326 00003B44 5B                      	POP	BX ; *5*
 23327                                  
 23328                                  ;       CX = # sectors remaining.
 23329                                  ;       BX = Next physical cluster.
 23330                                  
 23331                                  ;hkn; SS override
 23332                                          ;Context DS
 23333                                  	; 16/12/2022
 23334                                  	;push	ss
 23335                                  	;pop	ds
 23336                                  
 23337                                  	; 16/12/2022
 23338 00003B45 7218                    	jc	short SET_ACC_ERRW
 23339                                  
 23340                                  	; 16/12/2022
 23341 00003B47 16                      	push	ss
 23342 00003B48 1F                      	pop	ds
 23343                                  
 23344 00003B49 E317                    	JCXZ    WRTLAST
 23345                                  
 23346                                  	;MOV	DL,0
 23347 00003B4B 30D2                    	xor	dl,dl ; 23/07/2019
 23348 00003B4D FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23349 00003B51 EBBF                    	JMP     short WRTLP
 23350                                  
 23351                                  	; 23/07/2019 - Retro DOS v3.2
 23352                                  	; 09/08/2018
 23353                                  	; MSDOS 6.0
 23354                                  DWRITE_DISK_FULL:
 23355                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23356                                  	; 16/12/2022
 23357 00003B53 16                      	push	ss
 23358 00003B54 1F                      	pop	ds
 23359 00003B55 59                      	pop	cx		; unjunk stack
 23360 00003B56 5B                      	pop	bx
 23361 00003B57 C606[0B06]01            	mov	byte [DISK_FULL],1
 23362                                  	;stc
 23363 00003B5C E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23364                                  
 23365                                  	; 16/12/2022
 23366                                  SET_ACC_ERRW:
 23367 00003B5F E90EFD                  	jmp	SET_ACC_ERR_DS
 23368                                  
 23369                                  WRTLAST:
 23370 00003B62 A1[D405]                	MOV     AX,[BYTCNT2]
 23371 00003B65 09C0                    	OR      AX,AX
 23372 00003B67 7413                    	JZ	short FINWRT
 23373 00003B69 A3[D205]                	MOV     [BYTCNT1],AX
 23374 00003B6C E86A11                  	call	NEXTSEC
 23375 00003B6F 72EE                    	JC	short SET_ACC_ERRW
 23376 00003B71 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23377 00003B77 E80311                  	call	BUFWRT
 23378 00003B7A 72E3                    	JC	short SET_ACC_ERRW
 23379                                  FINWRT:
 23380 00003B7C C43E[9E05]              	LES     DI,[THISSFT]
 23381 00003B80 A1[DE05]                	MOV     AX,[GROWCNT]
 23382 00003B83 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23383 00003B87 09C0                    	OR      AX,AX
 23384 00003B89 7502                    	JNZ	short UPDATE_size
 23385 00003B8B E30F                    	JCXZ    SAMSIZ
 23386                                  UPDATE_size:
 23387                                  	;add	[es:di+11h],ax
 23388 00003B8D 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23389                                  	;adc	[es:di+13h],cx
 23390 00003B91 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23391                                  
 23392                                  ; Make sure that all other SFT's see this growth also.
 23393                                  
 23394 00003B95 B80100                  	MOV     AX,1
 23395                                  ;if installed
 23396                                  	;Call	JShare + 14 * 4
 23397 00003B98 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23398                                  ;else
 23399                                  ;	Call    ShSU
 23400                                  ;endif
 23401                                  
 23402                                  SAMSIZ:
 23403 00003B9C E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23404                                  
 23405                                  	; 16/12/2022
 23406                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23407                                  ;SET_ACC_ERRW:
 23408                                  	;jmp	SET_ACC_ERR_DS
 23409                                  
 23410                                  WRTEOF:
 23411 00003B9F 89C1                    	MOV     CX,AX
 23412 00003BA1 09D1                    	OR      CX,DX
 23413 00003BA3 746C                    	JZ	short KILLFIL
 23414 00003BA5 83E801                  	SUB     AX,1
 23415 00003BA8 83DA00                  	SBB     DX,0
 23416                                  
 23417                                  	; MSDOS 3.3
 23418                                  	;;div	word [es:bp+2]
 23419                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23420                                  	;;mov	cl,[es:bp+5]
 23421                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23422                                  	;shr	ax,cl
 23423                                  
 23424                                  	; MSDOS 6.0
 23425 00003BAB 53                      	PUSH	BX
 23426                                  	;mov	bx,[es:bp+2]
 23427 00003BAC 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23428 00003BB0 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23429 00003BB3 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23430 00003BB4 89CA                    	MOV	DX,CX			      ;M039
 23431 00003BB6 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23432 00003BBA E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23433                                  
 23434 00003BBD 89C1                    	MOV     CX,AX
 23435 00003BBF E80C10                  	call	FNDCLUS
 23436                                  SET_ACC_ERRWJ2:
 23437 00003BC2 729B                    	JC	short SET_ACC_ERRW
 23438                                  
 23439 00003BC4 E326                    	JCXZ    RELFILE
 23440 00003BC6 E8CC11                  	call	ALLOCATE
 23441                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23442                                  	; 16/12/2022
 23443 00003BC9 7303                    	jnc	short UPDATE
 23444 00003BCB E9BCFE                  	JMP	WRTERR
 23445                                  UPDATE:
 23446 00003BCE C43E[9E05]              	LES	DI,[THISSFT]
 23447 00003BD2 A1[CE05]                	MOV	AX,[BYTPOS]
 23448                                  	;mov	[es:di+11h],ax
 23449 00003BD5 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23450 00003BD9 A1[D005]                	MOV	AX,[BYTPOS+2]
 23451                                  	;mov	[es:di+13h],ax
 23452 00003BDC 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23453                                  ;
 23454                                  ; Make sure that all other SFT's see this growth also.
 23455                                  ;
 23456 00003BE0 B80200                  	MOV     AX,2
 23457                                  ;if installed
 23458                                  	;Call	JShare + 14 * 4
 23459 00003BE3 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23460                                  ;else
 23461                                  ;	Call    ShSU
 23462                                  ;endif
 23463 00003BE7 31C9                    	XOR     CX,CX
 23464 00003BE9 E939FD                  	jmp	ADDREC
 23465                                  
 23466                                  	; 16/12/2022
 23467                                  ;WRTERRJ: 
 23468                                  	;JMP	WRTERR
 23469                                  
 23470                                  ;;;;;;;;;;;;;;;; 7/18/86
 23471                                  ;;;;;;;;;;;;;;;;
 23472                                  
 23473                                  RELFILE:
 23474                                  	; MSDOS 6.0
 23475 00003BEC 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23476 00003BED C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23477                                  	;cmp	dx,[es:di+19h]
 23478 00003BF1 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23479 00003BF5 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23480                                  	;mov	[es:di+19h],0
 23481 00003BF7 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23482                                  	;mov	dx,[es:di+0Bh]
 23483 00003BFD 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23484                                  	;mov	[es:di+35h],dx
 23485 00003C01 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23486                                  SKIPRESET:                            		;AN002; BL
 23487 00003C05 07                      	POP     ES                    		;AN002; BL
 23488                                  ;
 23489 00003C06 BAFFFF                  	MOV     DX,0FFFFH
 23490 00003C09 E83712                  	call	RELBLKS
 23491                                  	; 16/12/2022
 23492                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23493 00003C0C 73C0                    	jnc	short UPDATE
 23494                                  SET_ACC_ERRWJ:
 23495                                  	;JC	short SET_ACC_ERRWJ2
 23496                                  	;JMP	SHORT UPDATE
 23497                                  	; 16/12/2022
 23498 00003C0E E95FFC                  	jmp	SET_ACC_ERR_DS
 23499                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23500                                  	;JC	short SET_ACC_ERRWJ2
 23501                                  	;JMP	SHORT UPDATE
 23502                                  
 23503                                  KILLFIL:
 23504 00003C11 31DB                    	XOR     BX,BX
 23505 00003C13 06                      	PUSH    ES
 23506 00003C14 C43E[9E05]              	LES     DI,[THISSFT]
 23507                                  	;mov	[es:di+19h],bx
 23508 00003C18 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23509                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23510 00003C1C 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23511                                  	;xchg	bx,[es:di+0Bh]
 23512 00003C20 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23513 00003C24 07                      	POP	ES
 23514                                  
 23515 00003C25 09DB                    	OR	BX,BX
 23516                                  	;JZ	short UPDATEJ
 23517                                  	; 16/12/2022
 23518 00003C27 74A5                    	jz	short UPDATE
 23519                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23520                                  	;jz	short UPDATEJ
 23521                                  
 23522                                  ;; 10/23/86 FastOpen update
 23523 00003C29 06                      	PUSH	ES              ; since first cluster # is 0
 23524 00003C2A 55                      	PUSH	BP              ; we must delete the old cache entry
 23525 00003C2B 50                      	PUSH	AX
 23526 00003C2C 51                      	PUSH	CX
 23527 00003C2D 52                      	PUSH	DX
 23528 00003C2E C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23529                                  	; 15/12/2022
 23530 00003C32 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23531                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23532                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23533 00003C36 89D9                    	MOV	CX,BX                    ; first cluster #
 23534 00003C38 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23535 00003C3A E862EA                  	call	FastOpen_Update          ; call fastopen
 23536 00003C3D 5A                      	POP	DX
 23537 00003C3E 59                      	POP	CX
 23538 00003C3F 58                      	POP	AX
 23539 00003C40 5D                      	POP	BP
 23540 00003C41 07                      	POP	ES
 23541                                  ;; 10/23/86 FastOpen update
 23542                                  
 23543 00003C42 E8FC11                  	call	RELEASE
 23544 00003C45 72C7                    	JC	short SET_ACC_ERRWJ
 23545                                  UPDATEJ:
 23546                                  	; 20/11/2022
 23547 00003C47 EB85                    	JMP	short UPDATE ; 10/08/2018
 23548                                  
 23549                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23550                                  ;----------------------------------------------------------------------------
 23551                                  ;
 23552                                  ; Procedure Name : DskWrtBufPurge
 23553                                  ;
 23554                                  ; Inputs:
 23555                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23556                                  ;	     sectors, also termed an "Extent".)
 23557                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23558                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23559                                  ;
 23560                                  ; Function:
 23561                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23562                                  ;	are in Extent; they are being over-written.
 23563                                  ;
 23564                                  ; Outputs:
 23565                                  ;       (Same as Input.)
 23566                                  ; Uses:
 23567                                  ;       All registers except DS,AX,SI,DI preserved.
 23568                                  ;       SS override for all global variables.
 23569                                  ;----------------------------------------------------------------------------
 23570                                  ;M039: Created
 23571                                  
 23572                                  ;procedure   DskWrtBufPurge,NEAR
 23573                                  ;
 23574                                  ;ASSUME  DS:NOTHING
 23575                                  
 23576                                  ; 04/05/2019 - Retro DOS v4.0
 23577                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23578                                  
 23579                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23580                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23581                                  
 23582                                  DskWrtBufPurge:
 23583                                  	;SaveReg <bx,cx>
 23584 00003C49 53                      	push	bx
 23585 00003C4A 51                      	push	cx
 23586                                  
 23587 00003C4B 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23588 00003C50 89DE                    	mov	si,bx
 23589 00003C52 01D1                    	add	cx,dx
 23590 00003C54 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23591                                  
 23592                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23593                                  	;;mov	al,[es:bp+0]
 23594                                  	;mov	al,[es:bp+DPB.DRIVE]
 23595                                  	; 15/12/2022
 23596 00003C57 268A4600                	mov	al,[es:bp]
 23597                                  
 23598                                  ;	BX:DX = Extent start.
 23599                                  ;	SI:CX = Extent end + 1.
 23600                                  ;	AL = Drive #
 23601                                  
 23602 00003C5B 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23603 00003C61 7431                    	je	short nosc		; -no, jump.
 23604                                  
 23605                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23606                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23607                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23608                                  
 23609 00003C63 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23610 00003C68 752A                    	jne	short nosc		; -no, jump.
 23611                                  
 23612 00003C6A 50                      	push    ax
 23613 00003C6B 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23614 00003C6F 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23615                                  
 23616                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23617                                  	;jbe	short sc5		; -yes, jump.
 23618                                  
 23619 00003C74 39FE                    	cmp	si,di
 23620 00003C76 7502                    	jne	short sc01
 23621 00003C78 39C1                    	cmp	cx,ax
 23622                                  sc01: 
 23623 00003C7A 7617                    	jbe	short sc5	
 23624                                  
 23625 00003C7C 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23626 00003C81 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23627                                  	
 23628                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23629                                  	;jae	short sc5		; -yes, jump.
 23630                                  
 23631 00003C84 39FB                    	cmp	bx,di
 23632 00003C86 7502                    	jne	short sc02
 23633 00003C88 39C2                    	cmp	dx,ax
 23634                                  sc02:
 23635 00003C8A 7307                    	jnb	short sc5
 23636                                  
 23637 00003C8C 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23638                                  sc5:	
 23639 00003C93 58                      	pop     ax
 23640                                  
 23641                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23642                                  ;	written.
 23643                                  
 23644                                  nosc:	
 23645 00003C94 E8C11B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23646                                  
 23647                                  _bufq:	
 23648                                  	;cmpo	al,[di+4]
 23649 00003C97 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23650 00003C9A 7527                    	jne	short bufq5		; -no, jump.
 23651                                  
 23652                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23653                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23654                                  
 23655                                  	;cmp	bx,[di+8]
 23656 00003C9C 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23657 00003C9F 7503                    	jne	short bufq04
 23658                                  	;cmp	dx,[di+6]
 23659 00003CA1 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23660                                  bufq04:
 23661 00003CA4 771D                    	ja	short bufq5
 23662                                  
 23663                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23664                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23665                                  
 23666                                  	;cmp	si,[di+8]
 23667 00003CA6 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23668 00003CA9 7503                    	jne	short bufq05
 23669                                  	;cmp	cx,[di+6]
 23670 00003CAB 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23671                                  bufq05:
 23672 00003CAE 7613                    	jbe	short bufq5
 23673                                  
 23674                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23675                                  
 23676                                  	;test	byte [di+5],40h
 23677 00003CB0 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23678 00003CB4 7403                    	jz	short bufq4		; -no, jump.
 23679 00003CB6 E8201E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23680                                  bufq4:
 23681                                  	;mov	word [di+4],20FFh
 23682 00003CB9 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23683                                  
 23684 00003CBE E8A91B                  	call	SCANPLACE
 23685 00003CC1 EB02                    	jmp     short bufq6
 23686                                  bufq5: 
 23687 00003CC3 8B3D                    	mov     di,[di]
 23688                                  	;mov	di,[di+BUFFINFO.buf_next]
 23689                                  bufq6: 
 23690 00003CC5 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23691 00003CCA 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23692                                  	
 23693                                  	;RestoreReg <cx,bx>
 23694 00003CCC 59                      	pop	cx
 23695 00003CCD 5B                      	pop	bx
 23696 00003CCE C3                      	retn
 23697                                  
 23698                                  ;EndProc DskWrtBufPurge
 23699                                  
 23700                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23701                                  ;----------------------------------------------------------------------------
 23702                                  ;
 23703                                  ; Procedure Name : DIV32
 23704                                  ;
 23705                                  ; Inputs:
 23706                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23707                                  ; Function:
 23708                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23709                                  ; Outputs:
 23710                                  ;       CX:AX = quotient , DX= remainder
 23711                                  ; Uses:
 23712                                  ;       All registers except AX,CX,DX preserved.
 23713                                  ;----------------------------------------------------------------------------
 23714                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23715                                  
 23716                                  ; 04/05/2019 - Retro DOS v4.0
 23717                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23718                                  
 23719                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23720                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23721                                  
 23722                                  DIV32:
 23723 00003CCF 81FB0002                	cmp	bx,512
 23724 00003CD3 7515                    	jne	short div5
 23725                                  
 23726 00003CD5 89D1                    	mov	cx,dx
 23727 00003CD7 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23728 00003CD9 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23729 00003CDD 88E0                    	mov	al,ah
 23730 00003CDF 88CC                    	mov	ah,cl
 23731 00003CE1 88E9                    	mov	cl,ch
 23732 00003CE3 30ED                    	xor	ch,ch
 23733 00003CE5 D1E9                    	shr	cx,1
 23734 00003CE7 D1D8                    	rcr	ax,1
 23735 00003CE9 C3                      	retn
 23736                                  div5:	
 23737 00003CEA 89C1                    	mov	cx,ax
 23738 00003CEC 89D0                    	mov	ax,dx
 23739 00003CEE 31D2                    	xor	dx,dx
 23740 00003CF0 F7F3                    	div	bx              ; 0:AX/BX
 23741 00003CF2 91                      	xchg	cx,ax
 23742 00003CF3 F7F3                    	div	bx              ; DX:AX/BX
 23743 00003CF5 C3                      	retn
 23744                                  
 23745                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23746                                  ;----------------------------------------------------------------------------
 23747                                  ;
 23748                                  ; Procedure Name : SHR32
 23749                                  ;
 23750                                  ; Inputs:
 23751                                  ;	DX:AX = 32 bit sector number
 23752                                  ; Function:
 23753                                  ;       Perform 32 bit shift right
 23754                                  ; Outputs:
 23755                                  ;	AX = cluster number
 23756                                  ;	ZF = 1 if no error
 23757                                  ;	   = 0 if error (cluster number > 64k)
 23758                                  ; Uses:
 23759                                  ;       DX,CX
 23760                                  ;---------------------------------------------------------------------------
 23761                                  ; M017	- SHR32 rewritten for better performance
 23762                                  ; M039	- Additional optimization
 23763                                  
 23764                                  ; 04/05/2019 - Retro DOS v4.0
 23765                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23766                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23767                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23768                                  
 23769                                  SHR32:
 23770                                  	;mov	cl,[es:bp+5]
 23771 00003CF6 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23772 00003CFA 30ED                    	xor	ch,ch	    ;ZF=1
 23773 00003CFC E306                    	jcxz	norota
 23774                                  
 23775                                  rotashft2:
 23776 00003CFE D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23777 00003D00 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23778 00003D02 E2FA                    	loop	rotashft2
 23779                                  norota:
 23780 00003D04 C3                      	retn
 23781                                  
 23782                                  ;============================================================================
 23783                                  ; DIR.ASM, MSDOS 6.0, 1991
 23784                                  ;============================================================================
 23785                                  ; 27/07/2018 - Retro DOS v3.0
 23786                                  ; 19/05/2019 - Retro DOS v4.0 
 23787                                  
 23788                                  ;	TITLE	DIR - Directory and path cracking
 23789                                  ;	NAME	Dir
 23790                                  
 23791                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23792                                  ;---------------------------------------------------------------------------
 23793                                  ;
 23794                                  ; Procedure Name : FINDENTRY,SEARCH
 23795                                  ;
 23796                                  ; Inputs:
 23797                                  ;	[THISDPB] set
 23798                                  ;	[SECCLUSPOS] = 0
 23799                                  ;	[DIRSEC] = Starting directory sector number
 23800                                  ;	[CLUSNUM] = Next cluster of directory
 23801                                  ;	[CLUSFAC] = Sectors/Cluster
 23802                                  ;	[NAME1] = Name to look for
 23803                                  ; Function:
 23804                                  ;	Find file name in disk directory.
 23805                                  ;	"?" matches any character.
 23806                                  ; Outputs:
 23807                                  ;	Carry set if name not found
 23808                                  ;	ELSE
 23809                                  ;	Zero set if attributes match (always except when creating)
 23810                                  ;	AH = Device ID (bit 7 set if not disk)
 23811                                  ;	[THISDPB] = Base of drive parameters
 23812                                  ;	DS = DOSGROUP
 23813                                  ;	ES = DOSGROUP
 23814                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23815                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23816                                  ;	[CURBUF] has directory record with match
 23817                                  ;	[NAME1] has file name
 23818                                  ;	[LASTENT] is entry number of the entry
 23819                                  ; All other registers destroyed.
 23820                                  ;----------------------------------------------------------------------------
 23821                                  
 23822                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23823                                  ;hkn; this point.
 23824                                  
 23825                                  SEARCH:
 23826                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23827                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23828                                  
 23829                                  	; 19/05/2019 - Retro DOS v4.0
 23830                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23831                                  
 23832                                  	; 27/07/2018 - Retro DOS v3.0
 23833                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23834                                  	; 15/03/2018 - Retro DOS v2.0
 23835                                  
 23836                                  	; 24/01/2024
 23837                                  
 23838                                  	;entry	FindEntry
 23839                                  FINDENTRY:
 23840 00003D05 E82C04                  	call	STARTSRCH
 23841 00003D08 A0[6B05]                	MOV	AL,[ATTRIB]
 23842                                  	;and	al,9Eh
 23843 00003D0B 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23844                                  	;cmp	al,8
 23845 00003D0D 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23846 00003D0F 7503                    	JNZ	short NOTVOLSRCH	; No
 23847 00003D11 E86A01                  	CALL	SETROOTSRCH		; Yes force search of root
 23848                                  NOTVOLSRCH:
 23849 00003D14 E8FA00                  	CALL	GETENTRY
 23850                                  	;JNC	short SRCH
 23851                                  	;JMP	SETESRET
 23852                                  	; 24/01/2024
 23853 00003D17 723F                    	jc	short SETESRET
 23854                                  
 23855                                  	;entry	Srch
 23856                                  SRCH:
 23857 00003D19 1E                      	PUSH	DS
 23858 00003D1A 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23859                                  
 23860                                  ;	(DS:BX) = directory entry address
 23861                                  
 23862 00003D1E 8A27                    	mov	ah,[BX]
 23863                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23864 00003D20 08E4                    	OR	AH,AH			; End of directory?
 23865 00003D22 7437                    	JZ	short FREE
 23866                                  
 23867                                  ;hkn; SS override
 23868 00003D24 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23869 00003D29 7430                    	JZ	short FREE
 23870                                  	;test	byte [bx+0Bh],8
 23871 00003D2B F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23872                                  					; Volume ID file?
 23873 00003D2F 7405                    	JZ	short CHKFNAM 		; NO
 23874                                  
 23875                                  ;hkn; SS override
 23876 00003D31 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23877                                  CHKFNAM:
 23878                                  ;	Context ES
 23879 00003D36 8CD6                    	MOV	SI,SS
 23880 00003D38 8EC6                    	MOV	ES,SI
 23881 00003D3A 89DE                    	MOV	SI,BX
 23882                                  
 23883                                  ;hkn; NAME1 is in DOSDATA
 23884 00003D3C BF[4B05]                	MOV	DI,NAME1
 23885                                  ;;;;; 7/29/86
 23886                                  
 23887                                  ;hkn; SS override for NAME1
 23888                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23889                                  	;JNZ	short NO_E5
 23890                                  	;MOV	BYTE [SS:NAME1],05H
 23891                                  	; 22/09/2023
 23892 00003D3F 26803DE5                	cmp	byte [es:di],0E5h
 23893 00003D43 7504                    	jnz	short NO_E5
 23894 00003D45 26C60505                	mov	byte [es:di],05h
 23895                                  NO_E5:
 23896                                  ;;;;; 7/29/86
 23897 00003D49 E86100                  	CALL	MetaCompare
 23898 00003D4C 7429                    	JZ	short FOUND
 23899 00003D4E 1F                      	POP	DS
 23900                                  
 23901                                  	;entry	NEXTENT
 23902                                  NEXTENT:
 23903 00003D4F C42E[8A05]              	LES	BP,[THISDPB]
 23904 00003D53 E86600                  	CALL	NEXTENTRY
 23905 00003D56 73C1                    	JNC	short SRCH
 23906                                  	;JMP	SHORT SETESRET
 23907                                  	; 24/01/2024
 23908                                  SETESRET:
 23909 00003D58 16                      	PUSH	SS
 23910 00003D59 07                      	POP	ES
 23911 00003D5A C3                      	retn
 23912                                  FREE:
 23913 00003D5B 1F                      	POP	DS
 23914 00003D5C 8B0E[4803]              	MOV	CX,[LASTENT]
 23915 00003D60 3B0E[D805]              	CMP	CX,[ENTFREE]
 23916 00003D64 7304                    	JAE	short TSTALL
 23917 00003D66 890E[D805]              	MOV	[ENTFREE],CX
 23918                                  TSTALL:
 23919 00003D6A 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23920                                  NEXTENTJ:
 23921 00003D6E 74DF                    	je	short NEXTENT 		; No - continue search
 23922 00003D70 890E[DA05]              	MOV	[ENTLAST],CX
 23923 00003D74 F9                      	STC
 23924 00003D75 EBE1                    	JMP	SHORT SETESRET
 23925                                  
 23926                                  FOUND:
 23927                                  ; We have a file with a matching name. We must now consider the attributes:
 23928                                  ; ATTRIB	Action
 23929                                  ; ------	------
 23930                                  ; Volume_ID	Is Volume_ID in test?
 23931                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23932                                  ;		If create then Is ATTRIB equal to test?
 23933                                  
 23934 00003D77 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23935 00003D79 1F                      	POP	DS
 23936 00003D7A 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23937                                  	;and	ah,9Eh
 23938 00003D7E 80E4DE                  	AND	AH,~attr_ignore
 23939                                  	;lea	si,[si+15]
 23940 00003D81 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23941                                  					; point to first cluster field
 23942                                  	;test	ch,8
 23943 00003D84 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23944 00003D87 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23945                                  	;test	ah,8
 23946 00003D89 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23947                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23948                                  	; 16/12/2022
 23949 00003D8C 74C1                    	jz	short NEXTENT ; 19/05/2019
 23950                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23951                                  	;JZ	short NEXTENTJ
 23952 00003D8E 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23953 00003D90 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23954                                  check_one_volume_id:
 23955                                  	;CMP	ah,8
 23956 00003D92 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23957                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23958                                  	; 16/12/2022
 23959 00003D95 74B8                    	je	short NEXTENT ; 19/05/2019
 23960                                  	;JZ	short NEXTENTJ
 23961 00003D97 E8AE03                  	CALL	MatchAttributes
 23962 00003D9A 7407                    	JZ	SHORT RETFF
 23963 00003D9C F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23964                                  	; 16/12/2022
 23965                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23966 00003DA1 74AC                    	jz	short NEXTENT ; 19/05/2019
 23967                                  RETFF:
 23968 00003DA3 C42E[8A05]              	LES	BP,[THISDPB]
 23969                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23970                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23971                                  	; 15/12/2022
 23972 00003DA7 268A6600                	MOV	AH,[ES:BP]
 23973                                  ;SETESRET:
 23974                                  	;PUSH	SS
 23975                                  	;POP	ES
 23976                                  	;retn
 23977                                  	; 24/01/2024
 23978 00003DAB EBAB                    	jmp	short SETESRET	
 23979                                  
 23980                                  ;----------------------------------------------------------------------------
 23981                                  ;
 23982                                  ; Procedure Name : MetaCompare
 23983                                  ;
 23984                                  ; Inputs:
 23985                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23986                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23987                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23988                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23989                                  ; Function:
 23990                                  ;	Compare FCB style names allowing for ? match to any char
 23991                                  ; Outputs:
 23992                                  ;	Zero if match else NZ
 23993                                  ; Destroys CX,SI,DI all others preserved
 23994                                  ;----------------------------------------------------------------------------
 23995                                  
 23996                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23997                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23998                                  
 23999                                  MetaCompare:
 24000 00003DAD B90B00                  	MOV	CX,11
 24001                                  WILDCRD:
 24002 00003DB0 F3A6                    	REPE	CMPSB
 24003 00003DB2 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24004                                  CHECK_META:
 24005 00003DB4 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24006 00003DB9 74F5                    	JZ	short WILDCRD
 24007                                  MetaRet:
 24008 00003DBB C3                       	retn				; Zero set, Match
 24009                                  
 24010                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24011                                  ;----------------------------------------------------------------------------
 24012                                  ;
 24013                                  ; Procedure Name : NEXTENTRY
 24014                                  ;
 24015                                  ; Inputs:
 24016                                  ;	Same as outputs of GETENTRY, above
 24017                                  ; Function:
 24018                                  ;	Update BX, and [LASTENT] for next directory entry.
 24019                                  ;	Carry set if no more.
 24020                                  ;----------------------------------------------------------------------------
 24021                                  
 24022                                  NEXTENTRY:
 24023                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24024                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24025                                  
 24026                                  	; 19/05/2019 - Retro DOS v4.0
 24027                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24028                                  
 24029                                  	; 27/07/2018 - Retro DOS v3.0
 24030                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24031                                  	; 15/03/2018 - Retro DOS v2.0
 24032                                  
 24033 00003DBC A1[4803]                	MOV	AX,[LASTENT]
 24034 00003DBF 3B06[DA05]              	CMP	AX,[ENTLAST]
 24035 00003DC3 7422                    	JZ	short NONE
 24036 00003DC5 40                      	INC	AX
 24037                                  	;ADD	BX,32
 24038 00003DC6 8D5F20                  	LEA	BX,[BX+32]
 24039 00003DC9 39D3                    	CMP	BX,DX
 24040                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24041                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24042                                  	; 16/12/2022
 24043 00003DCB 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24044 00003DCD 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24045 00003DD1 FEC3                    	INC	BL
 24046 00003DD3 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24047 00003DD7 7215                    	JB	short SAMECLUS
 24048 00003DD9 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24049 00003DDD E8C816                  	call	IsEOF
 24050 00003DE0 7305                    	JAE	short NONE
 24051                                  	; 23/07/2019
 24052 00003DE2 83FB02                  	CMP	BX,2
 24053                                  	;JB	short NONE
 24054                                  	;JMP	short GETENT
 24055                                  	; 16/12/2022
 24056 00003DE5 732D                    	jnb	short GETENT
 24057                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24058                                  	;JB	short NONE
 24059                                  	;JMP	short GETENT
 24060                                  NONE:
 24061 00003DE7 F9                      	STC
 24062 00003DE8 C3                      	retn
 24063                                  HAVIT:
 24064 00003DE9 A3[4803]                	MOV	[LASTENT],AX
 24065 00003DEC F8                      	CLC
 24066                                  nextentry_retn:
 24067 00003DED C3                      	retn
 24068                                  SAMECLUS:
 24069 00003DEE 881E[7305]              	MOV	[SECCLUSPOS],BL
 24070 00003DF2 A3[4803]                	MOV	[LASTENT],AX
 24071 00003DF5 1E                      	PUSH	DS
 24072 00003DF6 C53E[E205]              	LDS	DI,[CURBUF]
 24073                                  	; 19/05/2019
 24074                                  	; MSDOS 6.0
 24075                                  	;;mov	dx,[di+8]
 24076                                  	; 23/09/2023
 24077                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24078                                  ;hkn; SS override
 24079                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24080                                  	; 23/09/2023
 24081 00003DFA 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 24082                                  	
 24083                                  	;mov	dx,[di+6]
 24084 00003DFD 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24085                                  	;inc	dx ; MSDOS 3.3
 24086                                  	; MSDOS 6.0
 24087                                  	;ADD	DX,1				;AN000; >32mb
 24088                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24089                                  	; 23/09/2023
 24090 00003E00 42                      	inc	dx
 24091 00003E01 7501                    	jnz	short nextexntry_fc
 24092 00003E03 46                      	inc	si
 24093                                  	;inc	word [SS:HIGH_SECTOR]
 24094                                  nextexntry_fc:
 24095                                  	; 23/09/2023
 24096 00003E04 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 24097                                  	; MSDOS 3.3 & MSDOS 6.0
 24098 00003E09 1F                      	POP	DS
 24099 00003E0A E847F8                  	call	FIRSTCLUSTER
 24100 00003E0D 31DB                    	XOR	BX,BX
 24101 00003E0F EB23                    	JMP	short SETENTRY
 24102                                  
 24103                                  ;----------------------------------------------------------------------------
 24104                                  ;
 24105                                  ; Procedure Name : GETENTRY
 24106                                  ;
 24107                                  ; Inputs:
 24108                                  ;	[LASTENT] has directory entry
 24109                                  ;	ES:BP points to drive parameters
 24110                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24111                                  ; Function:
 24112                                  ;	Locates directory entry in preparation for search
 24113                                  ;	GETENT provides entry for passing desired entry in AX
 24114                                  ; Outputs:
 24115                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24116                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24117                                  ;	[LASTENT] = New directory entry number
 24118                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24119                                  ;	Carry set if error (currently user FAILed to I 24)
 24120                                  ;----------------------------------------------------------------------------
 24121                                  
 24122                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24123                                  GETENTRY:
 24124                                  	; 27/07/2018 - Retro DOS v3.0
 24125 00003E11 A1[4803]                	MOV	AX,[LASTENT]
 24126                                  
 24127                                  	;entry	GETENT
 24128                                  GETENT:
 24129 00003E14 A3[4803]                	MOV	[LASTENT],AX
 24130                                  ;
 24131                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24132                                  ; directory.
 24133                                  ;
 24134 00003E17 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24135 00003E19 D3C0                    	rol	ax,cl			; keep hight order bits
 24136 00003E1B 89C2                    	mov	dx,ax
 24137                                  	; 19/05/2019 - Retro DOS v4.0
 24138                                  	;and	ax,0FFE0h
 24139                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24140                                  	;and	ax,~(32-1)		; mask off high order bits
 24141                                  	; 16/12/2022
 24142 00003E1D 24E0                    	and	al,0E0h ; ~31
 24143 00003E1F 83E21F                  	and	dx,1Fh
 24144                                  	;and	dx,32-1			; mask off low order bits
 24145                                  ;
 24146                                  ; DX:AX contain the byte offset of the required directory entry from the
 24147                                  ; beginning of the directory. Convert this to a sector number. Round the
 24148                                  ; sector size down to a multiple of 32.
 24149                                  ;
 24150                                  	;mov	bx,[es:bp+2]
 24151 00003E22 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24152 00003E26 80E3E0                  	and	bl,0E0h
 24153                                  	;AND	BL,255-31		; Must be multiple of 32
 24154 00003E29 F7F3                    	DIV	BX
 24155 00003E2B 89D3                    	MOV	BX,DX			; Position within sector
 24156 00003E2D 53                      	PUSH	BX
 24157 00003E2E E8CFF7                  	call	DIRREAD
 24158 00003E31 5B                      	POP	BX
 24159                                  	;retc
 24160 00003E32 72B9                    	jc	short nextentry_retn	
 24161                                  SETENTRY:
 24162 00003E34 8B16[E205]              	MOV	DX,[CURBUF]
 24163                                  	;add	dx,16 ; MSDOS 3.3
 24164                                  	;add	dx,20 ; MSDOS 6.0 
 24165 00003E38 83C214                  	ADD	DX,BUFINSIZ
 24166 00003E3B 01D3                    	ADD	BX,DX
 24167                                  	;add	dx,[es:bp+2]
 24168 00003E3D 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24169                                  	; 29/12/2022
 24170                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24171 00003E41 F8                      	clc
 24172 00003E42 C3                      	retn
 24173                                  
 24174                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24175                                  ;----------------------------------------------------------------------------
 24176                                  ;
 24177                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24178                                  ;
 24179                                  ; Inputs:
 24180                                  ;	BX cluster number of start of directory
 24181                                  ;	ES:BP Points to DPB
 24182                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24183                                  ; Function:
 24184                                  ;	Set up a directory search
 24185                                  ; Outputs:
 24186                                  ;	[DIRSTART] = BX
 24187                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24188                                  ;	Carry set if error (currently user FAILed to I 24)
 24189                                  ; destroys AX,DX,BX
 24190                                  ;----------------------------------------------------------------------------
 24191                                  
 24192                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24193                                  SETDIRSRCH:
 24194 00003E43 09DB                    	OR	BX,BX
 24195 00003E45 7437                    	JZ	short SETROOTSRCH
 24196 00003E47 891E[C205]              	MOV	[DIRSTART],BX
 24197                                  	;mov	al,[es:bp+4]
 24198 00003E4B 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24199 00003E4F FEC0                    	INC	AL
 24200 00003E51 A2[7705]                	MOV	[CLUSFAC],AL
 24201                                  
 24202                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24203                                  	;SAVE	<SI>
 24204 00003E54 56                      	push	si
 24205                                  	;test	byte [FastOpenFlg],2
 24206 00003E55 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24207 00003E5A 7507                    	JNZ	short UNP_OK
 24208                                  
 24209                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24210                                  	;invoke	UNPACK
 24211 00003E5C E86016                  	call	UNPACK
 24212 00003E5F 7302                    	JNC	short UNP_OK
 24213                                  	;RESTORE <SI>
 24214 00003E61 5E                      	pop	si
 24215                                  	;return
 24216 00003E62 C3                      	retn
 24217                                  
 24218                                  UNP_OK:
 24219 00003E63 893E[BC05]              	MOV	[CLUSNUM],DI
 24220 00003E67 89DA                    	MOV	DX,BX
 24221 00003E69 30DB                    	XOR	BL,BL
 24222 00003E6B 881E[7305]              	MOV	[SECCLUSPOS],BL
 24223                                  	;invoke	FIGREC
 24224 00003E6F E8F60E                  	call	FIGREC
 24225                                  	;RESTORE <SI>
 24226 00003E72 5E                      	pop	si
 24227                                  	
 24228                                  	; 19/05/2019 - Retro DOS v4.0
 24229                                  
 24230                                  	; MSDOS 6.0
 24231                                  	;PUSH	DX			   ;AN000; >32mb
 24232                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24233                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24234                                  	;POP	DX			   ;AN000; >32mb
 24235                                  
 24236                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24237                                  	;push	dx
 24238                                  	;mov	dx,[HIGH_SECTOR]
 24239                                  	;mov	[DIRSEC+2],dx
 24240                                  	;pop	dx
 24241                                  	;MOV	[DIRSEC],dx
 24242                                  	; 16/12/2022
 24243 00003E73 A1[0706]                	mov	ax,[HIGH_SECTOR]
 24244 00003E76 A3[C005]                	mov	[DIRSEC+2],AX
 24245 00003E79 8916[BE05]              	MOV	[DIRSEC],DX
 24246                                  
 24247                                  	; 16/12/2022
 24248                                  	; cf=0 (at the return of FIGREC)
 24249                                  	;CLC
 24250 00003E7D C3                      	retn
 24251                                  
 24252                                  	;entry	SETROOTSRCH
 24253                                  SETROOTSRCH:
 24254 00003E7E 31C0                    	XOR	AX,AX
 24255 00003E80 A3[C205]                	MOV	[DIRSTART],AX
 24256                                  	; 22/09/2023
 24257 00003E83 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24258 00003E86 A2[7305]                	MOV	[SECCLUSPOS],AL
 24259 00003E89 48                      	DEC	AX
 24260 00003E8A A3[BC05]                	MOV	[CLUSNUM],AX
 24261                                  	;mov	ax,[es:bp+0Bh]
 24262 00003E8D 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24263                                  	; 19/05/2019
 24264                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24265                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24266 00003E91 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24267 00003E95 29D0                    	SUB	AX,DX
 24268 00003E97 A2[7705]                	MOV	[CLUSFAC],AL
 24269 00003E9A 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24270                                  	; 22/09/2023
 24271                                  	; MSDOS 6.0
 24272                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24273 00003E9E F8                      	CLC
 24274 00003E9F C3                      	retn
 24275                                  
 24276                                  ;============================================================================
 24277                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24278                                  ;============================================================================
 24279                                  ; 27/07/2018 - Retro DOS v3.0
 24280                                  ; 19/05/2019 - Retro DOS v4.0 
 24281                                  
 24282                                  ;	TITLE	DIR2 - Directory and path cracking
 24283                                  ;	NAME	Dir2
 24284                                  
 24285                                  ;Break	<GETPATH -- PARSE A WFP>
 24286                                  ;----------------------------------------------------------------------------
 24287                                  ;
 24288                                  ; Procedure Name : GETPATH
 24289                                  ;
 24290                                  ; Inputs:
 24291                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24292                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24293                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24294                                  ;		( = -1 if current dir not involved, else
 24295                                  ;		 Points to first char after last "/" of current dir part)
 24296                                  ;	[THISCDS] Points to CDS being used
 24297                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24298                                  ;	[NoSetDir] set
 24299                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24300                                  ; Function:
 24301                                  ;	Crack the path
 24302                                  ; Outputs:
 24303                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24304                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24305                                  ;	ID1 field of [THISCDS] updated appropriately
 24306                                  ;	[ATTRIB] = [SATTRIB]
 24307                                  ;	ES:BP Points to DPB
 24308                                  ;	Carry set if bad path
 24309                                  ;	   SI Points to path element causing failure
 24310                                  ;	   Zero set
 24311                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24312                                  ;	      start a search on the last directory
 24313                                  ;	      CL is zero if there is a bad name in the path
 24314                                  ;	      CL is non-zero if the name was simply not found
 24315                                  ;		 [ENTFREE] may have free spot in directory
 24316                                  ;		 [NAME1] is the name.
 24317                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24318                                  ;	   Zero reset
 24319                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24320                                  ;		or path too long or malformed path
 24321                                  ;	ELSE
 24322                                  ;	   [CurBuf] = -1 if root directory
 24323                                  ;	   [CURBUF] contains directory record with match
 24324                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24325                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24326                                  ;	   AH = device ID
 24327                                  ;	      bit 7 of AH set if device SI and BX
 24328                                  ;	      will point DOSGROUP relative The firclus
 24329                                  ;	      field of the device entry contains the device pointer
 24330                                  ;	   [NAME1] Has name looked for
 24331                                  ;	   If last element is a directory zero is set and:
 24332                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24333                                  ;	      are set up to start a search on it.
 24334                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24335                                  ;	      like that for a file (except for zero flag)
 24336                                  ;	   If last element is a file zero is reset
 24337                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24338                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24339                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24340                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24341                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24342                                  ; DS preserved, Others destroyed
 24343                                  ;---------------------------------------------------------------------------
 24344                                  
 24345                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24346                                  ;hkn; DS already set up at this point.
 24347                                  
 24348                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24349                                  GETPATH:
 24350                                  	;mov	word [CREATING],0E500h
 24351 00003EA0 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24352                                  
 24353                                  ; Same as GetPath only CREATING and DELALL already set
 24354                                  
 24355                                  	;entry	GetPathNoSet
 24356                                  GetPathNoSet:
 24357                                  	;mov	byte [EXTERR_LOCUS],2	
 24358 00003EA6 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24359 00003EAB C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24360                                  
 24361                                  ; See if the input indicates a device that has already been detected. If so,
 24362                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24363                                  
 24364 00003EB1 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24365                                  	;cmp	word [DI+1],5C3Ah
 24366                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24367 00003EB5 817D013A5C              	cmp	word [DI+1],':\'
 24368 00003EBA 7438                    	JZ	short CrackIt
 24369                                  
 24370                                  ; Let ChkDev find it in the device list
 24371                                  
 24372 00003EBC 83C703                  	ADD	DI,3
 24373                                  	; 18/08/2018
 24374                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24375                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24376                                  	; 16/12/2022
 24377                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24378 00003EBF E8AB00                  	CALL	CHKDEV
 24379 00003EC2 722E                    	JC	short InternalError
 24380                                  
 24381                                  Build_devJ:
 24382 00003EC4 A0[6D05]                	MOV	AL,[SATTRIB]
 24383 00003EC7 A2[6B05]                	MOV	[ATTRIB],AL
 24384                                  	;mov	byte [EXTERR_LOCUS],1
 24385 00003ECA C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24386                                  					; "finding" a char device
 24387                                  					; set LOCUS to Unknown. This makes
 24388                                  					; certain idiotic problems reported
 24389                                  					; by a certain 3 letter OEM go away.
 24390                                  
 24391                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24392                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24393                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24394                                  ; wfp into the share set.
 24395                                  ;
 24396                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24397                                  ; non-space seen +1.  This position is kept in DX.
 24398                                  
 24399                                  ;hkn; SS is DOSDATA
 24400 00003ECF 16                      	push	ss
 24401 00003ED0 07                      	pop	es
 24402                                  
 24403                                  ;hkn; NAME1 is in DOSDATA
 24404 00003ED1 BE[4B05]                	mov	si,NAME1
 24405 00003ED4 8B3E[B205]              	mov	di,[WFP_START]
 24406 00003ED8 89FA                    	mov	dx,di
 24407 00003EDA B90800                  	mov	cx,8			; 8 chars in device name
 24408                                  MoveLoop:
 24409 00003EDD AC                      	lodsb
 24410 00003EDE AA                      	stosb
 24411 00003EDF 3C20                    	cmp	al," "
 24412 00003EE1 7402                    	jz	short NoSave
 24413                                  
 24414 00003EE3 89FA                    	mov	dx,di
 24415                                  NoSave:
 24416 00003EE5 E2F6                    	loop	MoveLoop
 24417                                  
 24418                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24419                                  ; at this point.
 24420                                  
 24421 00003EE7 89D7                    	mov	di,dx
 24422 00003EE9 C60500                  	mov	byte [di],0		; end of string
 24423 00003EEC E8C502                  	call	Build_device_ent	; Clears carry sets zero
 24424 00003EEF FEC0                    	INC	AL			; reset zero
 24425 00003EF1 C3                      	retn
 24426                                  
 24427                                  InternalError:
 24428                                  InternalError_loop:
 24429 00003EF2 EBFE                    	JMP	short InternalError_loop	; freeze
 24430                                  
 24431                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24432                                  
 24433                                  CrackIt:
 24434 00003EF4 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24435 00003EF8 83FEFF                  	CMP	SI,-1			; valid?
 24436 00003EFB 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24437 00003EFD 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24438                                  LOOK_SING:
 24439                                  	;mov	byte [ATTRIB],16h
 24440 00003F00 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24441                                  					; Attributes to search through Dirs
 24442 00003F05 C43E[A205]              	LES	DI,[THISCDS]
 24443 00003F09 B8FFFF                  	MOV	AX,-1
 24444                                  	;mov	bx,[es:di+73]
 24445 00003F0C 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24446 00003F10 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24447                                  
 24448                                  ; AX = -1
 24449                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24450                                  ;      has been uncertainly changed.
 24451                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24452                                  ;      may be -1 if no current directory part has been used.
 24453                                  
 24454 00003F14 39C6                    	CMP	SI,AX			; if Current directory is not part
 24455 00003F16 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24456 00003F18 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24457                                  
 24458                                  ; DOS 3.3  6/25/86
 24459 00003F1A 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24460                                  	;test	byte [FastOpenFlg],1
 24461 00003F1C F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24462 00003F21 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24463 00003F23 06                      	PUSH	ES			; save registers
 24464 00003F24 57                      	PUSH	DI
 24465 00003F25 51                      	PUSH	CX
 24466 00003F26 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24467 00003F29 56                      	PUSH	SI
 24468 00003F2A 53                      	PUSH	BX
 24469                                  
 24470 00003F2B C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24471 00003F2F 8B36[B205]              	MOV	SI,[WFP_START]
 24472                                  
 24473                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24474 00003F33 BB[300D]                	MOV	BX,FastOpenTable
 24475 00003F36 BF[460D]                	MOV	DI,Dir_Info_Buff
 24476 00003F39 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24477                                  	;mov	al,1
 24478 00003F3C B001                    	MOV	AL,FONC_Look_up
 24479 00003F3E 1E                      	PUSH	DS
 24480 00003F3F 07                      	POP	ES
 24481                                  	;call	far [BX+2]
 24482 00003F40 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24483 00003F43 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24484                                  					; Go to Got_Srch_cluster
 24485                                  	; 29/12/2022
 24486                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24487                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24488                                  	;stc
 24489                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24490                                  
 24491 00003F45 803C01                  	cmp	byte [si],1
 24492                                  GO_Chk_end1:	; 29/12/2022
 24493 00003F48 F5                      	cmc 
 24494                                  	; [si] = 0 -> cf = 0
 24495                                  	; [si] > 0 -> cf = 1
 24496                                  
 24497                                  ;GO_Chk_end1:
 24498                                  	; 29/12/2022
 24499                                  	;clc
 24500                                  
 24501                                  GO_Chk_end:				; restore registers
 24502 00003F49 5B                      	POP	BX
 24503 00003F4A 5E                      	POP	SI
 24504 00003F4B 8F44FF                  	POP	word [SI-1]
 24505 00003F4E 59                      	POP	CX
 24506 00003F4F 5F                      	POP	DI
 24507 00003F50 07                      	POP	ES
 24508 00003F51 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24509                                  
 24510                                  ; DOS 3.3  6/25/86
 24511                                  ;
 24512                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24513                                  ; of path and go crack from root.
 24514                                  
 24515                                  NO_CURR_D:
 24516 00003F53 8B36[B205]              	MOV	SI,[WFP_START]
 24517 00003F57 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24518 00003F5A C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24519 00003F5E EB3B                    	JMP	short ROOTPATH
 24520                                  
 24521                                  ; We are able to crack from the current directory part. Go set up for search
 24522                                  ; of specified cluster.
 24523                                  
 24524                                  GOT_SEARCH_CLUSTER:
 24525 00003F60 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24526 00003F64 E8DCFE                  	call	SETDIRSRCH
 24527                                  	;JC	short SETFERR
 24528                                  	;JMP	short FINDPATH
 24529                                  	; 16/12/2022
 24530 00003F67 7343                    	jnc	short FINDPATH ; 17/08/2018
 24531                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24532                                  	;JC	short SETFERR
 24533                                  	;JMP	short FINDPATH
 24534                                  SETFERR:
 24535 00003F69 30C9                    	XOR	CL,CL			; set zero
 24536 00003F6B F9                      	STC
 24537 00003F6C C3                      	retn
 24538                                  
 24539                                  ;---------------------------------------------------------------------------
 24540                                  ;
 24541                                  ; Procedure Name : ChkDev
 24542                                  ;
 24543                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24544                                  ;   device.
 24545                                  ; Blasts CX,SI,DI,AX,BX
 24546                                  ;---------------------------------------------------------------------------
 24547                                  
 24548                                  CHKDEV:
 24549 00003F6D 89FE                    	MOV	SI,DI
 24550 00003F6F 8CD7                    	MOV	DI,SS
 24551 00003F71 8EC7                    	MOV	ES,DI
 24552                                  
 24553 00003F73 BF[4B05]                	MOV	DI,NAME1
 24554 00003F76 B90900                  	MOV	CX,9
 24555                                  TESTLOOP:
 24556 00003F79 E84A10                  	call	GETLET
 24557                                  
 24558 00003F7C 3C2E                    	CMP	AL,'.'
 24559 00003F7E 740E                    	JZ	short TESTDEVICE
 24560 00003F80 E89910                  	call	PATHCHRCMP
 24561 00003F83 7407                    	JZ	short NOTDEV
 24562 00003F85 08C0                    	OR	AL,AL
 24563 00003F87 7405                    	JZ	short TESTDEVICE
 24564                                  
 24565 00003F89 AA                      	STOSB
 24566 00003F8A E2ED                    	LOOP	TESTLOOP
 24567                                  NOTDEV:
 24568 00003F8C F9                      	STC
 24569 00003F8D C3                      	retn
 24570                                  
 24571                                  TESTDEVICE:
 24572                                  	;ADD	CX,2
 24573                                  	; 23/09/2023
 24574 00003F8E 41                      	inc	cx
 24575 00003F8F 41                      	inc	cx
 24576 00003F90 B020                    	MOV	AL,' '
 24577 00003F92 F3AA                    	REP	STOSB
 24578 00003F94 8CD0                    	MOV	AX,SS
 24579 00003F96 8ED8                    	MOV	DS,AX
 24580                                  	;call	DEVNAME
 24581                                  	;retn
 24582                                  	; 18/12/2022
 24583 00003F98 E9BA01                  	jmp	DEVNAME
 24584                                  
 24585                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24586                                  ;----------------------------------------------------------------------------
 24587                                  ;
 24588                                  ; Procedure Name : ROOTPATH,FINDPATH
 24589                                  ;
 24590                                  ; Inputs:
 24591                                  ;	Same as FINDPATH but,
 24592                                  ;	SI Points to asciz string of path which is assumed to start at
 24593                                  ;		the root (no leading '/').
 24594                                  ; Function:
 24595                                  ;	Search from root for path
 24596                                  ; Outputs:
 24597                                  ;	Same as FINDPATH but:
 24598                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24599                                  ;	[NoSetDir] is ignored.
 24600                                  ;----------------------------------------------------------------------------
 24601                                  
 24602                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24603                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24604                                  
 24605                                  ROOTPATH:
 24606 00003F9B E8E0FE                  	call	SETROOTSRCH
 24607 00003F9E 803C00                  	CMP	BYTE [SI],0
 24608 00003FA1 7509                    	JNZ	short FINDPATH
 24609                                  
 24610                                  ; Root dir specified
 24611 00003FA3 A0[6D05]                	MOV	AL,[SATTRIB]
 24612 00003FA6 A2[6B05]                	MOV	[ATTRIB],AL
 24613 00003FA9 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24614                                  					; (dir), clears carry.
 24615 00003FAB C3                      	retn
 24616                                  
 24617                                  ; Inputs:
 24618                                  ;	[ATTRIB] Set to get through directories
 24619                                  ;	[SATTRIB] Set to find last element
 24620                                  ;	ES:BP Points to DPB
 24621                                  ;	SI Points to asciz string of path (no leading '/').
 24622                                  ;	[SECCLUSPOS] = 0
 24623                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24624                                  ;	[CLUSNUM] = Cluster # of next cluster
 24625                                  ;	[CLUSFAC] = Sectors per cluster
 24626                                  ;	[NoSetDir] set
 24627                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24628                                  ;		( = -1 if current dir not involved, else
 24629                                  ;		 Points to first char after last "/" of current dir part)
 24630                                  ;	[THISCDS] Points to CDS being used
 24631                                  ;	[CREATING] and [DELALL] set
 24632                                  ; Function:
 24633                                  ;	Parse path name
 24634                                  ; Outputs:
 24635                                  ;	ID1 field of [THISCDS] updated appropriately
 24636                                  ;	[ATTRIB] = [SATTRIB]
 24637                                  ;	ES:BP Points to DPB
 24638                                  ;	[THISDPB] = ES:BP
 24639                                  ;	Carry set if bad path
 24640                                  ;	   SI Points to path element causing failure
 24641                                  ;	   Zero set
 24642                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24643                                  ;	      start a search on the last directory
 24644                                  ;	      CL is zero if there is a bad name in the path
 24645                                  ;	      CL is non-zero if the name was simply not found
 24646                                  ;		 [ENTFREE] may have free spot in directory
 24647                                  ;		 [NAME1] is the name.
 24648                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24649                                  ;	   Zero reset
 24650                                  ;	      File in middle of path or bad name in path
 24651                                  ;		or path too long or malformed path
 24652                                  ;	ELSE
 24653                                  ;	   [CURBUF] contains directory record with match
 24654                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24655                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24656                                  ;	   [NAME1] Has name looked for
 24657                                  ;	   AH = device ID
 24658                                  ;	      bit 7 of AH set if device SI and BX
 24659                                  ;	      will point DOSGROUP relative The firclus
 24660                                  ;	      field of the device entry contains the device pointer
 24661                                  ;	   If last element is a directory zero is set and:
 24662                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24663                                  ;	      are set up to start a search on it,
 24664                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24665                                  ;	      like that for a file (except for zero flag)
 24666                                  ;	   If last element is a file zero is reset
 24667                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24668                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24669                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24670                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24671                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24672                                  ; Destroys all other registers
 24673                                  
 24674                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24675                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24676                                  
 24677                                      	;entry	FINDPATH
 24678                                  FINDPATH:
 24679 00003FAC 06                      	PUSH	ES			; Save ES:BP
 24680 00003FAD 56                      	PUSH	SI
 24681 00003FAE 89F7                    	MOV	DI,SI
 24682 00003FB0 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24683 00003FB4 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24684 00003FB9 740E                    	JZ	short NOIDS		; No current dir part
 24685 00003FBB 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24686 00003FBF 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24687 00003FC1 C43E[A205]              	LES	DI,[THISCDS]
 24688                                  	;mov	[es:di+73],cx
 24689 00003FC5 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24690                                  NOIDS:
 24691                                  
 24692                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24693                                  ; character in the string. CX,DI may be destroyed.
 24694                                  ;
 24695                                  ;	invoke	NAMETRANS
 24696                                  ;	MOV	CL,AL
 24697                                  ;
 24698                                  ; The above is the slow method. The name has *already* been munged by
 24699                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24700                                  ; the name until ., \ or 0 is hit.
 24701                                  
 24702 00003FC9 8CD0                    	MOV	AX,SS
 24703 00003FCB 8EC0                    	MOV	ES,AX
 24704                                  
 24705                                  ;hkn; Name1 is in DOSDATA
 24706 00003FCD BF[4B05]                	MOV	DI,NAME1
 24707 00003FD0 B82020                  	MOV	AX,'  ' ; 2020h
 24708 00003FD3 AA                      	STOSB
 24709 00003FD4 AB                      	STOSW
 24710 00003FD5 AB                      	STOSW
 24711 00003FD6 AB                      	STOSW
 24712 00003FD7 AB                      	STOSW
 24713 00003FD8 AB                      	STOSW
 24714                                  
 24715                                  ;hkn; Name1 is in DOSDATA
 24716 00003FD9 BF[4B05]                	MOV	DI,NAME1
 24717 00003FDC 30E4                    	XOR	AH,AH			; bits for CL
 24718                                  GetNam:
 24719                                  	; 19/05/2019 - Retro DOS v4.0
 24720                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24721                                  
 24722                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24723                                  	; 16/12/2022
 24724                                  	;inc	cl ; not required !	
 24725                                  	
 24726 00003FDE AC                      	LODSB
 24727 00003FDF 3C2E                    	CMP	AL,'.'	; 2Eh
 24728 00003FE1 7412                    	JZ	short _SetExt
 24729 00003FE3 08C0                    	OR	AL,AL
 24730 00003FE5 7424                    	JZ	short _GetDone
 24731 00003FE7 3C5C                    	CMP	AL,'\'	; 5Ch
 24732 00003FE9 7420                    	JZ	short _GetDone
 24733 00003FEB 3C3F                    	CMP	AL,'?'	; 3Fh
 24734 00003FED 7503                    	JNZ	short StoNam
 24735 00003FEF 80CC01                  	OR	AH,1
 24736                                  StoNam: 
 24737 00003FF2 AA                      	STOSB
 24738 00003FF3 EBE9                    	JMP	short GetNam
 24739                                  _SetExt:
 24740 00003FF5 BF[5305]                	MOV	DI,NAME1+8
 24741                                  GetExt:
 24742 00003FF8 AC                      	LODSB
 24743 00003FF9 08C0                    	OR	AL,AL
 24744 00003FFB 740E                    	JZ	short _GetDone
 24745 00003FFD 3C5C                    	CMP	AL,'\'
 24746 00003FFF 740A                    	JZ	short _GetDone
 24747 00004001 3C3F                    	CMP	AL,'?'
 24748 00004003 7503                    	JNZ	short StoExt
 24749 00004005 80CC01                  	OR	AH,1
 24750                                  StoExt: 
 24751 00004008 AA                      	STOSB
 24752 00004009 EBED                    	JMP	short GetExt
 24753                                  _GetDone:
 24754 0000400B 4E                      	DEC	SI
 24755 0000400C 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24756 0000400E 80C980                  	OR	CL,80H
 24757 00004011 5F                      	POP	DI			; Start of this element
 24758 00004012 07                      	POP	ES			; Restore ES:BP
 24759 00004013 39FE                    	CMP	SI,DI
 24760 00004015 7503                    	JNZ	short check_device
 24761 00004017 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24762                                  check_device:
 24763 0000401A 56                      	PUSH	SI			; Start of next element
 24764                                  	;MOV	AL,[SI]
 24765                                  	;OR	AL,AL
 24766                                  	; 23/09/2023
 24767 0000401B 803C00                  	cmp	byte [si],0
 24768 0000401E 7508                    	JNZ	short NOT_LAST
 24769                                  
 24770                                  ; for last element of the path switch to the correct search attributes
 24771                                  
 24772 00004020 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24773 00004024 883E[6B05]              	MOV	[ATTRIB],BH
 24774                                  
 24775                                  NOT_LAST:
 24776                                  
 24777                                  ; check name1 to see if we have a device...
 24778                                  
 24779 00004028 06                      	PUSH	ES			; Save ES:BP
 24780                                  
 24781                                  ;hkn; SS is DOSDATA
 24782                                  	;context ES
 24783 00004029 16                      	push	ss
 24784 0000402A 07                      	pop	es
 24785 0000402B E82701                  	call	DEVNAME 		; blast BX
 24786 0000402E 07                      	POP	ES			; Restore ES:BP
 24787 0000402F 720B                    	JC	short FindFile		; Not a device
 24788 00004031 08C0                    	OR	AL,AL			; Test next char again
 24789 00004033 7403                    	JZ	short GO_BDEV
 24790 00004035 E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24791                                  
 24792                                  GO_BDEV:
 24793 00004038 5E                      	POP	SI			; Points to NUL at end of path
 24794 00004039 E988FE                  	JMP	Build_devJ
 24795                                  
 24796                                  FindFile:
 24797                                  ;;;; 7/28/86
 24798 0000403C 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24799 00004041 7505                    	JNZ	short NOE5		; no
 24800 00004043 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24801                                  NOE5:
 24802                                  ;;;; 7/28/86
 24803 00004048 57                      	PUSH	DI			; Start of this element
 24804 00004049 06                      	PUSH	ES			; Save ES:BP
 24805 0000404A 51                      	PUSH	CX			; CL return from NameTrans
 24806                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24807                                  
 24808 0000404B E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24809 0000404E 7303                    	JNC	short DIR_FOUND		; found dir entry
 24810                                  
 24811                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24812 00004050 E8B2FC                  	call	FINDENTRY
 24813                                  DIR_FOUND:
 24814 00004053 59                      	POP	CX
 24815 00004054 07                      	POP	ES
 24816 00004055 5F                      	POP	DI
 24817 00004056 7303                    	JNC	short LOAD_BUF
 24818 00004058 E9CA00                  	JMP	BADPATHPOP
 24819                                  
 24820                                  LOAD_BUF:
 24821 0000405B C53E[E205]              	LDS	DI,[CURBUF]
 24822                                  	;test	byte [bx+0Bh],10h
 24823 0000405F F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24824 00004063 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24825 00004065 E99800                  	JMP	FILEINPATH		; Error or end of path
 24826                                  
 24827                                  ; if we are not setting the directory, then check for end of string
 24828                                  
 24829                                  GO_NEXT:
 24830                                  ;hkn; SS override
 24831 00004068 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24832 0000406E 7423                    	JZ	short SetDir
 24833 00004070 89FA                    	MOV	DX,DI			; Save pointer to entry
 24834 00004072 8CD9                    	MOV	CX,DS
 24835                                  
 24836                                  ;hkn; SS is DOSDATA
 24837                                  	;context DS
 24838 00004074 16                      	push	ss
 24839 00004075 1F                      	pop	ds
 24840 00004076 5F                      	POP	DI			; Start of next element
 24841                                  	; 19/05/2019 - Retro DOS v4.0
 24842                                  	; MSDOS 6.0
 24843 00004077 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24844 0000407C 740B                    	JZ	short _nofast			; the FastOpen
 24845 0000407E F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24846 00004083 7404                    	JZ	short _nofast			; no
 24847 00004085 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24848                                  _nofast:
 24849 00004089 803D00                  	CMP	BYTE [DI],0
 24850                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24851                                  	;;JMP	_SETRET  ; retn		; Got it
 24852                                  	;retn	; 05/09/2018
 24853                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24854                                  	;jmp	_SETRET
 24855                                  	; 16/12/2022
 24856 0000408C 7421                    	jz	short _SETRET
 24857                                  
 24858                                  NEXT_ONE:
 24859 0000408E 57                      	PUSH	DI			; Put start of next element back on stack
 24860 0000408F 89D7                    	MOV	DI,DX
 24861 00004091 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24862                                  SetDir:
 24863 00004093 8B14                    	MOV	DX,[SI] 		; Dir_first
 24864                                  
 24865                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24866 00004095 1E                      	PUSH	DS		      ; save [curbuf+2]
 24867                                  ;hkn; SS is DOSDATA
 24868 00004096 16                      	push	ss
 24869 00004097 1F                      	pop	ds		      ; set DS Dosgroup
 24870                                  	;test	byte [FastOpenFlg],2
 24871 00004098 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24872 0000409D 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24873 0000409F 89D3                    	MOV	BX,DX		      ; not found
 24874 000040A1 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24875 000040A5 50                      	PUSH	AX		      ; save device id (AH)
 24876 000040A6 E89AFD                  	call	SETDIRSRCH
 24877 000040A9 58                      	POP	AX		      ; restore device id (AH)
 24878 000040AA 83C402                  	ADD	SP,2		      ; pop ds in stack
 24879 000040AD EB37                    	JMP	short FAST_OPEN_SKIP
 24880                                  
 24881                                  	; 16/12/2022
 24882                                  _SETRET:
 24883 000040AF C3                      	retn
 24884                                  
 24885                                  DO_NORMAL:
 24886 000040B0 1F                      	POP	DS			; DS = [curbuf + 2]
 24887                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24888                                  
 24889 000040B1 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24890 000040B3 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24891 000040B5 53                      	PUSH	BX
 24892 000040B6 50                      	PUSH	AX
 24893 000040B7 56                      	PUSH	SI
 24894 000040B8 51                      	PUSH	CX
 24895                                  	;push	word [di+6]
 24896 000040B9 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24897                                  	; 19/05/2019
 24898                                  	; MSDOS 6.0
 24899                                  	;push	word [di+8]
 24900 000040BC FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24901 000040BF 89D3                    	MOV	BX,DX
 24902                                  
 24903                                  ;hkn; SS is DOSDATA
 24904                                  	;context DS
 24905 000040C1 16                      	push	ss
 24906 000040C2 1F                      	pop	ds
 24907                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24908 000040C3 E87DFD                  	call	SETDIRSRCH		; the entry sector buffer
 24909                                  	; 19/05/2019
 24910                                  	; MSDOS 6.0
 24911 000040C6 8F06[0706]              	POP	word [HIGH_SECTOR]
 24912 000040CA 5A                      	POP	DX
 24913 000040CB 7203                    	JC	short SKIP_GETB
 24914                                  	; 22/09/2023
 24915                                  	;;mov	byte [ALLOWED],18h
 24916                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24917                                  	;XOR	AL,AL ; *
 24918                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24919                                  	;call	GETBUFFR
 24920 000040CD E8FA17                  	call	GETBUFFER ; * ; pre-read
 24921                                  SKIP_GETB:
 24922 000040D0 59                      	POP	CX
 24923 000040D1 5E                      	POP	SI
 24924 000040D2 58                      	POP	AX
 24925 000040D3 5B                      	POP	BX
 24926 000040D4 7305                    	JNC	short SET_THE_BUF
 24927 000040D6 5F                      	POP	DI			; Start of next element
 24928 000040D7 89FE                    	MOV	SI,DI			; Point with SI
 24929 000040D9 EB21                    	JMP	SHORT _BADPATH
 24930                                  
 24931                                  SET_THE_BUF:
 24932 000040DB E87BF5                  	call	SET_BUF_AS_DIR
 24933 000040DE 8B3E[E205]              	MOV	DI,[CURBUF]
 24934 000040E2 01FE                    	ADD	SI,DI			; Get the offsets back
 24935 000040E4 01FB                    	ADD	BX,DI
 24936                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24937                                  FAST_OPEN_SKIP:
 24938 000040E6 5F                      	POP	DI			; Start of next element
 24939 000040E7 E89D02                  	CALL	InsertPath		; insert dir entry info
 24940                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24941 000040EA 8A05                    	MOV	AL,[DI]
 24942 000040EC 08C0                    	OR	AL,AL
 24943 000040EE 74BF                    	JZ	short _SETRET		; At end
 24944 000040F0 47                      	INC	DI			; Skip over "/"
 24945 000040F1 89FE                    	MOV	SI,DI			; Point with SI
 24946 000040F3 E8260F                  	call	PATHCHRCMP
 24947 000040F6 7503                    	JNZ	short find_bad_name	; oops
 24948 000040F8 E9B1FE                  	JMP	FINDPATH		; Next element
 24949                                  
 24950                                  find_bad_name:
 24951 000040FB 4E                      	DEC	SI			; Undo above INC to get failure point
 24952                                  _BADPATH:
 24953 000040FC 30C9                    	XOR	CL,CL			; Set zero
 24954 000040FE EB2C                    	JMP	SHORT BADPRET
 24955                                  
 24956                                  FILEINPATH:
 24957 00004100 5F                      	POP	DI			; Start of next element
 24958                                  
 24959                                  ;hkn; SS is DOSDATA
 24960                                  	;context DS			; Got to from one place with DS gone
 24961 00004101 16                      	push	ss
 24962 00004102 1F                      	pop	ds
 24963                                  
 24964                                  ; DOS 3.3 FastOpen
 24965                                  	;test	byte [FastOpenFlg],1
 24966 00004103 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24967 00004108 740B                    	JZ	short NO_FAST		; device info to fastopen
 24968                                  	;test	byte [FastOpenFlg],2
 24969 0000410A F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24970 0000410F 7404                    	JZ	short NO_FAST
 24971 00004111 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24972                                  					 ; success
 24973                                  NO_FAST:
 24974                                  ; DOS 3.3 FastOpen
 24975 00004115 8A05                    	MOV	AL,[DI]
 24976 00004117 08C0                    	OR	AL,AL
 24977 00004119 7404                    	JZ	short INCRET
 24978 0000411B 89FE                    	MOV	SI,DI			; Path too long
 24979 0000411D EB0D                    	JMP	SHORT BADPRET
 24980                                  
 24981                                  INCRET:
 24982                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24983                                  
 24984 0000411F E86502                  	CALL   InsertPath		; insert dir entry info
 24985                                  
 24986                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24987 00004122 FEC0                    	INC	AL			; Reset zero
 24988                                  	; 16/12/2022	
 24989                                  ;_SETRET:
 24990 00004124 C3                      	retn
 24991                                  
 24992                                  BADPATHPOP:
 24993 00004125 5E                      	POP	SI			; Start of next element
 24994 00004126 8A04                    	MOV	AL,[SI]
 24995 00004128 89FE                    	MOV	SI,DI			; Start of bad element
 24996 0000412A 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24997                                  BADPRET:
 24998 0000412C A0[6D05]                	MOV	AL,[SATTRIB]
 24999 0000412F A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25000 00004132 F9                      	STC
 25001 00004133 C3                      	retn
 25002                                  
 25003                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25004                                  ;---------------------------------------------------------------------------
 25005                                  ;
 25006                                  ; Procedure Name : STARTSRCH
 25007                                  ;
 25008                                  ; Inputs:
 25009                                  ;	[THISDPB] Set
 25010                                  ; Function:
 25011                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25012                                  ; Outputs:
 25013                                  ;	ES:BP = Drive parameters
 25014                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25015                                  ; Destroys ES,BP,AX
 25016                                  ;--------------------------------------------------------------------------
 25017                                  
 25018                                  STARTSRCH:
 25019 00004134 C42E[8A05]              	LES	BP,[THISDPB]
 25020 00004138 31C0                    	XOR	AX,AX
 25021 0000413A A3[4803]                	MOV	[LASTENT],AX
 25022 0000413D A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25023 00004140 48                      	DEC	AX
 25024 00004141 A3[D805]                	MOV	[ENTFREE],AX
 25025 00004144 A3[DA05]                	MOV	[ENTLAST],AX
 25026 00004147 C3                      	retn
 25027                                  
 25028                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25029                                  ;----------------------------------------------------------------------------
 25030                                  ; Procedure Name : MatchAttributes
 25031                                  ;
 25032                                  ; Input:    [Attrib] = attribute to search for
 25033                                  ;	    CH = found attribute
 25034                                  ; Output:   JZ <match>
 25035                                  ;	    JNZ <nomatch>
 25036                                  ; Registers modified: noneski
 25037                                  ;----------------------------------------------------------------------------
 25038                                  
 25039                                  MatchAttributes:
 25040 00004148 50                      	PUSH	AX
 25041                                  
 25042                                  ;hkn; SS override
 25043 00004149 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25044 0000414D F6D0                    	NOT	AL			; AL <- SearchSet'
 25045 0000414F 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25046                                  	;and	al,16h
 25047 00004151 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25048                                  ;
 25049                                  ; the result is non-zero if an attribute is not in the search set
 25050                                  ; and in the found set and in the important set. This means that we do not
 25051                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25052                                  ;
 25053 00004153 58                      	POP	AX
 25054 00004154 C3                      	retn
 25055                                  
 25056                                  ; 19/05/2019 - Retro DOS v4.0
 25057                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25058                                  
 25059                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25060                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25061                                  
 25062                                  ;Break <DevName - Look for name of device>
 25063                                  ;---------------------------------------------------------------------------
 25064                                  ;
 25065                                  ; Procedure Name : DevName
 25066                                  ;
 25067                                  ; Inputs:
 25068                                  ;	DS,ES:DOSDATA
 25069                                  ;	Filename in NAME1
 25070                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25071                                  ; Function:
 25072                                  ;	Determine if file is in list of I/O drivers
 25073                                  ; Outputs:
 25074                                  ;	Carry set if not a device
 25075                                  ;	ELSE
 25076                                  ;	Zero flag set
 25077                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25078                                  ;	     bits 0-4 set from low byte of attribute word
 25079                                  ;	DEVPT = DWORD pointer to Device header of device
 25080                                  ; BX destroyed, others preserved
 25081                                  ;---------------------------------------------------------------------------
 25082                                  
 25083                                  DEVNAME:
 25084                                  	; 28/07/2018 - Retro DOS v3.0
 25085                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25086                                  
 25087 00004155 56                      	PUSH	SI
 25088 00004156 57                      	PUSH	DI
 25089 00004157 51                      	PUSH	CX
 25090 00004158 50                      	PUSH	AX
 25091                                  
 25092                                  ; E5 special code
 25093 00004159 FF36[4B05]              	PUSH	WORD [NAME1]
 25094 0000415D 803E[4B05]05            	CMP	byte [NAME1],5
 25095 00004162 7505                    	JNZ	short NOKTR
 25096 00004164 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25097                                  NOKTR:
 25098                                  	;test	byte [ATTRIB],8
 25099 00004169 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25100                                  					; If looking for VOL id don't find devs
 25101 0000416E 7521                    	JNZ	short RET31
 25102                                  
 25103                                  ;hkn; NULDEV is in DOSDATA
 25104 00004170 BE[4800]                	MOV	SI,NULDEV
 25105                                  LOOKIO:
 25106                                  	; 21/11/2022
 25107                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25108                                  	; 17/12/2022
 25109                                  	;test	byte [si+5],80h
 25110 00004173 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25111                                  	;;test	word [si+4],8000h
 25112                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25113 00004177 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25114 00004179 89F0                    	MOV	AX,SI
 25115                                  	;add	si,10
 25116 0000417B 83C60A                  	ADD	SI,SYSDEV.NAME
 25117                                  
 25118                                  ;hkn; NAME1 is in DOSDATA
 25119 0000417E BF[4B05]                	MOV	DI,NAME1
 25120 00004181 B90400                  	MOV	CX,4			; All devices are 8 letters
 25121 00004184 F3A7                    	REPE	CMPSW			; Check for name in list
 25122 00004186 89C6                    	MOV	SI,AX
 25123 00004188 7415                    	JZ	short IOCHK		; Found it?
 25124                                  SKIPDEV:
 25125 0000418A C534                    	LDS	SI,[SI]			; Get address of next device
 25126 0000418C 83FEFF                  	CMP	SI,-1			; At end of list?
 25127 0000418F 75E2                    	JNZ	short LOOKIO
 25128                                  RET31:	
 25129 00004191 F9                      	STC				; Not found
 25130                                  RETNV:	
 25131 00004192 8CD1                    	MOV	CX,SS
 25132 00004194 8ED9                    	MOV	DS,CX
 25133                                  
 25134 00004196 8F06[4B05]              	POP	WORD [NAME1]
 25135 0000419A 58                      	POP	AX
 25136 0000419B 59                      	POP	CX
 25137 0000419C 5F                      	POP	DI
 25138 0000419D 5E                      	POP	SI
 25139 0000419E C3                      	RETN
 25140                                  
 25141                                  IOCHK:
 25142                                  ;hkn; SS override for DEVPT
 25143 0000419F 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25144                                  	;mov	bh,[si+4]
 25145 000041A4 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25146 000041A7 80CFC0                  	OR	BH,0C0h
 25147 000041AA 80E7DF                  	and	bh,0DFh
 25148                                  	;AND	BH,~(020h)		; Clears Carry
 25149 000041AD 368936[9A05]            	MOV	[SS:DEVPT],SI
 25150 000041B2 EBDE                    	JMP	short RETNV
 25151                                  
 25152                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25153                                  ;---------------------------------------------------------------------------
 25154                                  ; Procedure Name : Build_device_ent
 25155                                  ;
 25156                                  ; Inputs:
 25157                                  ;	[NAME1] has name
 25158                                  ;	BH is attribute field (supplied by DEVNAME)
 25159                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25160                                  ; Function:
 25161                                  ;	Build a directory entry for a device at DEVFCB
 25162                                  ; Outputs:
 25163                                  ;	BX points to DEVFCB
 25164                                  ;	SI points to dir_first field
 25165                                  ;	AH = input BH
 25166                                  ;	AL = 0
 25167                                  ;	dir_first = DEVPT
 25168                                  ;	Zero Set, Carry Clear
 25169                                  ; DS,ES,BP preserved, others destroyed
 25170                                  ;--------------------------------------------------------------------------
 25171                                  
 25172                                  Build_device_ent:
 25173 000041B4 B82020                  	MOV	AX,"  " ; 2020h
 25174                                  
 25175                                  ;hkn; DEVFCB is in DOSDATA
 25176 000041B7 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25177                                  
 25178                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25179                                  
 25180 000041BA AB                      	STOSW
 25181 000041BB AA                      	STOSB				; Blank out extent field
 25182                                  	;mov	al,40h
 25183 000041BC B040                    	MOV	AL,attr_device
 25184                                  
 25185                                  ;	Fill Dir_attr
 25186                                  
 25187 000041BE AA                      	STOSB				; Set attribute field
 25188 000041BF 31C0                    	XOR	AX,AX
 25189 000041C1 B90A00                  	MOV	CX,10
 25190                                  
 25191                                  ; Fill dir_pad
 25192                                  
 25193 000041C4 F3AB                    	REP	STOSW			; Fill rest with zeros
 25194 000041C6 E82CC9                  	call	DATE16
 25195                                  
 25196                                  ;hkn; DEVFCB is in DOSDATA
 25197 000041C9 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25198 000041CC 92                      	XCHG	AX,DX
 25199                                  
 25200                                  ; Fill dir_time
 25201                                  
 25202 000041CD AB                      	STOSW
 25203 000041CE 92                      	XCHG	AX,DX
 25204                                  
 25205                                  ; Fill dir_date
 25206                                  
 25207 000041CF AB                      	STOSW
 25208 000041D0 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25209 000041D2 A1[9A05]                	MOV	AX,[DEVPT]
 25210                                  
 25211                                  ; Fill dir_first
 25212                                  
 25213 000041D5 AB                      	STOSW				; Dir_first points to device
 25214 000041D6 A1[9C05]                	MOV	AX,[DEVPT+2]
 25215                                  ;
 25216                                  ; Fill dir_size_l
 25217                                  ;
 25218 000041D9 AB                      	STOSW
 25219 000041DA 88FC                    	MOV	AH,BH			; Put device atts in AH
 25220                                  
 25221                                  ;hkn; DEVFCB is in DOSDATA
 25222 000041DC BB[4B05]                	MOV	BX,DEVFCB
 25223 000041DF 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25224 000041E1 C3                      	retn
 25225                                  
 25226                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25227                                  ;----------------------------------------------------------------------------
 25228                                  ;
 25229                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25230                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25231                                  ;   If invalid, reset original CDS to root.
 25232                                  ;
 25233                                  ;   Inputs:	ThisCDS points to CDS of interest
 25234                                  ;		SS:DI points to temp buffer
 25235                                  ;   Outputs:	The current directory string is validated on the appropriate
 25236                                  ;		    drive
 25237                                  ;		ThisDPB changed
 25238                                  ;		ES:DI point to CDS
 25239                                  ;		Carry set if error (currently user FAILed to I 24)
 25240                                  ;   Registers modified: all
 25241                                  ;----------------------------------------------------------------------------
 25242                                  
 25243                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25244                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25245                                  
 25246                                  ValidateCDS:
 25247                                  	; 19/05/2019 - Retro DOS v4.0
 25248                                  	; 28/07/2018 - Retro DOS v3.0
 25249                                  
 25250                                     %define  Temp	[bp-2]	; word
 25251                                     %define  SaveCDS	[bp-6]	; dword
 25252                                     %define  SaveCDSL	[bp-6]	; word
 25253                                     %define  SaveCDSH	[bp-4]	; word
 25254                                  
 25255                                  	;Enter
 25256 000041E2 55                      	push	bp
 25257 000041E3 89E5                    	mov	bp,sp
 25258 000041E5 83EC06                  	sub	sp,6
 25259                                  
 25260 000041E8 897EFE                  	MOV	Temp,DI
 25261                                  
 25262                                  ;hkn; SS override
 25263 000041EB 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25264 000041F0 8976FA                  	MOV	SaveCDSL,SI
 25265 000041F3 8C5EFC                  	MOV	SaveCDSH,DS
 25266                                  	;EnterCrit critDisk
 25267 000041F6 E819D1                  	call	ECritDisk
 25268                                  	; 21/11/2022
 25269                                  	;test	byte [SI+curdir.flags+1],80h
 25270                                  	;test	word [si+67],8000h
 25271                                  	; 17/12/2022
 25272                                  	;test	byte [SI+68],80h
 25273 000041F9 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25274                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25275 000041FD 7403                    	JZ	short _DoSplice
 25276 000041FF E99200                  	JMP	FatFail
 25277                                  _DoSplice:
 25278 00004202 30D2                    	XOR	DL,DL
 25279 00004204 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25280                                  
 25281                                  ;hkn; SS is DOSDATA
 25282                                  	;Context ES
 25283 00004209 16                      	push	ss
 25284 0000420A 07                      	pop	es
 25285                                  	;Invoke	FStrcpy
 25286 0000420B E8D9CF                  	call	FStrCpy
 25287 0000420E 8B76FE                  	MOV	SI,Temp
 25288                                  
 25289                                  ;hkn; SS is DOSDATA
 25290                                  	;Context DS
 25291 00004211 16                      	push	ss
 25292 00004212 1F                      	pop	ds	
 25293                                  	;Invoke	Splice
 25294 00004213 E85D2B                  	call	Splice
 25295                                  
 25296                                   ;hkn; SS is DOSDATA
 25297                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25298 00004216 16                      	push	ss
 25299 00004217 1F                      	pop	ds
 25300 00004218 8816[4C03]              	MOV	[NoSetDir],DL
 25301 0000421C C43E[A205]              	LES	DI,[THISCDS]
 25302                                  	;SAVE	<BP>
 25303 00004220 55                      	push	bp
 25304                                  	;Invoke	FATREAD_CDS
 25305 00004221 E83114                  	call	FATREAD_CDS	
 25306                                  	;RESTORE <BP>
 25307 00004224 5D                      	pop	bp
 25308 00004225 726D                    	JC	short FatFail
 25309                                  
 25310 00004227 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25311                                  	;cmp	word [si+73],-1
 25312 0000422B 837C49FF                	CMP	word [SI+curdir.ID],-1
 25313 0000422F 7555                    	JNZ	short RestoreCDS
 25314                                  
 25315                                  ;hkn; SS is DOSDATA
 25316                                  	;Context ES
 25317 00004231 16                      	push	ss
 25318 00004232 07                      	pop	es
 25319                                  
 25320                                  ;hkn; SS override
 25321                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25322 00004233 36FF36[B205]            	push	word [SS:WFP_START]
 25323                                  	;cmp	si,[bp-6]
 25324 00004238 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25325 0000423B 750B                    	JNZ	short DoChdir
 25326                                  	;mov	di,[bp-2]
 25327 0000423D 8B7EFE                  	MOV	DI,Temp
 25328                                  
 25329                                  ;hkn; SS override
 25330 00004240 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25331                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25332 00004245 E89FCF                  	call	FStrCpy
 25333                                  DoChdir:
 25334                                  ;hkn; SS is DOSDATA
 25335                                  	;Context DS
 25336 00004248 16                      	push	ss
 25337 00004249 1F                      	pop	ds
 25338                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25339 0000424A FF36[6D05]              	push	word [SATTRIB]
 25340 0000424E 55                      	push	bp
 25341                                  	;Invoke	DOS_ChDir
 25342 0000424F E8F2EE                  	call	DOS_CHDIR
 25343                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25344 00004252 5D                      	pop	bp
 25345 00004253 5B                      	pop	bx
 25346 00004254 8F06[B205]              	pop	word [WFP_START]
 25347 00004258 881E[6D05]              	MOV	[SATTRIB],BL
 25348 0000425C C576FA                  	LDS	SI,SaveCDS
 25349 0000425F 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25350                                  
 25351                                  ;hkn; SS override for THISCDS
 25352 00004261 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25353 00004266 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25354 0000426B 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25355 0000426D 884C03                  	MOV	[SI+3],CL		;	    }
 25356                                  SetCluster:
 25357                                  	;mov	word [si+73],0FFFFh
 25358 00004270 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25359 00004275 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25360                                  	; 21/11/2022
 25361                                  	;test	byte [si+curdir.flags+1],20h
 25362                                  	; 19/05/2019
 25363                                  	; MSDOS 6.0
 25364                                  	; 17/12/2022
 25365                                  	;test	byte [si+68],20h
 25366 0000427A F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25367                                  	;;test	word [si+67],2000h
 25368                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25369 0000427E 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25370 00004280 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25371                                  _setdirclus:
 25372                                  	;mov	[si+73],cx
 25373 00004283 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25374                                  RestoreCDS:
 25375 00004286 C47EFA                  	LES	DI,SaveCDS
 25376 00004289 36893E[A205]            	MOV	[SS:THISCDS],DI
 25377 0000428E 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25378 00004293 F8                      	CLC
 25379                                  FatFail:
 25380                                  	;LeaveCrit critDisk
 25381 00004294 E896D0                  	call	LCritDisk
 25382                                  
 25383                                  	;les	di,[bp-6]
 25384 00004297 C47EFA                  	LES	DI,SaveCDS
 25385                                  	;Leave
 25386 0000429A 89EC                    	mov	sp,bp
 25387 0000429C 5D                      	pop	bp
 25388 0000429D C3                      	retn
 25389                                  
 25390                                  ; 28/07/2018 - Retro DOS v3.0
 25391                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25392                                  
 25393                                  ;Break	<CheckThisDevice - Check for being a device>
 25394                                  ;---------------------------------------------------------------------------
 25395                                  ;
 25396                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25397                                  ;   device specified. We will return carry if there is a device present. 
 25398                                  ;   The forms of devices we will recognize are:
 25399                                  ;
 25400                                  ;	[path]device
 25401                                  ;
 25402                                  ;   Note that the drive letter has *already* been removed. All other forms
 25403                                  ;   are not considered to be devices. If such a device is found we change
 25404                                  ;   the source pointer to point to the device component.
 25405                                  ;
 25406                                  ;   Inputs:	ES is DOSDATA
 25407                                  ;		DS:SI contains name
 25408                                  ;   Outputs:	ES is DOSDATA
 25409                                  ;		DS:SI point to name or device
 25410                                  ;		Carry flag set if device was found
 25411                                  ;		Carry flag reset otherwise
 25412                                  ;   Registers Modified: all except ES:DI, DS
 25413                                  ;----------------------------------------------------------------------------
 25414                                  
 25415                                  CheckThisDevice:
 25416 0000429E 57                      	push	di
 25417 0000429F 56                      	push	si
 25418 000042A0 89F7                    	MOV	DI,SI
 25419                                  
 25420                                  ; Check for presence of \dev\ (Dam multiplan!)
 25421                                  
 25422 000042A2 8A04                    	MOV	AL,[SI]
 25423 000042A4 E8750D                  	call	PATHCHRCMP		; is it a path char?
 25424 000042A7 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25425 000042A9 46                      	INC	SI			; simulate LODSB
 25426                                  
 25427                                  ; We have the leading path separator. Look for DEV part.
 25428                                  
 25429 000042AA AD                      	LODSW
 25430 000042AB 0D2020                  	OR	AX,2020h
 25431 000042AE 3D6465                  	cmp	ax,"de"
 25432                                  	;CMP	AX,"e"<< 8 + "d"
 25433 000042B1 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25434 000042B3 AC                      	LODSB
 25435 000042B4 0C20                    	OR	AL,20h
 25436 000042B6 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25437 000042B8 7526                    	JNZ	short NotDevice
 25438 000042BA AC                      	LODSB
 25439 000042BB E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25440 000042BE 7520                    	JNZ	short NotDevice		; no. go for it.
 25441                                  
 25442                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25443                                  ; SI and DevName may destroy DS.
 25444                                  
 25445                                  ParseDev:
 25446 000042C0 1E                      	push	ds
 25447 000042C1 56                      	push	si			; preserve the source pointer
 25448 000042C2 E8950C                  	call	NameTrans		; advance DS:SI
 25449 000042C5 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25450 000042C8 F9                      	STC				; simulate a Carry return from DevName
 25451 000042C9 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25452                                  
 25453                                  ;hkn; SS is DOSDATA
 25454 000042CB 16                      	push	ss
 25455 000042CC 1F                      	pop	ds
 25456                                  
 25457                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25458                                  ;
 25459                                  ; SR;
 25460                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25461                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25462                                  ; old call set the volume attribute bit.
 25463                                  
 25464 000042CD A0[6D05]                	mov	al,[SATTRIB]
 25465 000042D0 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25466                                  
 25467                                  ; M026 - end
 25468                                  
 25469 000042D3 E87FFE                  	call	DEVNAME
 25470                                  
 25471                                  SkipSearch:
 25472 000042D6 5E                      	pop	si
 25473 000042D7 1F                      	pop	ds
 25474                                  
 25475                                  ; SI points to the beginning of the potential device. If we have a device
 25476                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25477                                  ; original value. At this point Carry set indicates FILE.
 25478                                  
 25479                                  CheckReturn:
 25480 000042D8 5F                      	pop	di			; get original SI
 25481 000042D9 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25482 000042DB 89FE                    	MOV	SI,DI
 25483                                  Check_Done:
 25484 000042DD 5F                      	pop	di
 25485 000042DE F5                      	CMC				; invert carry. Carry => device
 25486 000042DF C3                      	retn
 25487                                  NotDevice:
 25488 000042E0 F9                      	STC
 25489 000042E1 EBF5                    	JMP	short CheckReturn
 25490                                  
 25491                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25492                                  ;-----------------------------------------------------------------------------
 25493                                  ;
 25494                                  ; Procedure Name : LookupPath
 25495                                  ;
 25496                                  ; Output  DS:SI -> path name,
 25497                                  ;	  ES:DI -> dir entry info buffer
 25498                                  ;	  ES:CX -> extended dir info buffer
 25499                                  ;
 25500                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25501                                  ;			     FastOpen, DS:SI points to char just one after
 25502                                  ;			     the last char of path name which is fully or
 25503                                  ;			     partially found in FastOPen
 25504                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25505                                  ;
 25506                                  ;----------------------------------------------------------------------------
 25507                                  
 25508                                  LookupPath:
 25509                                  ;	PUSH	AX
 25510                                  
 25511                                  ;hkn; SS override
 25512                                  	;test	byte [ss:FastOpenFlg],1
 25513 000042E3 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25514 000042E9 7503                    	JNZ	short FASTINST			    ; and this routine is
 25515                                  NOLOOK:
 25516 000042EB E99700                  	JMP	NOLOOKUP			    ; executed once
 25517                                  
 25518                                  FASTINST:
 25519                                  ;hkn; SS override
 25520                                  	;test	byte [ss:FastOpenFlg],8
 25521 000042EE 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25522 000042F4 75F5                    	JNZ	short NOLOOK			    ; yes
 25523                                  
 25524 000042F6 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25525                                  
 25526                                  ;hkn; SS override
 25527 000042F9 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25528 000042FE BF[460D]                	MOV	DI,Dir_Info_Buff
 25529 00004301 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25530 00004304 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25531 00004306 1E                      	PUSH	DS
 25532 00004307 07                      	POP	ES
 25533                                  
 25534                                  ;hkn; SS override
 25535                                  	;call	far [bx+2]
 25536 00004308 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25537 0000430B 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25538                                  
 25539 0000430D 8D5CFE                  	LEA	BX,[SI-2]
 25540                                  
 25541                                  ;hkn; SS override
 25542 00004310 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25543 00004315 745D                    	JZ	short NOTFOUND			    ; no
 25544                                  
 25545                                  	; 19/05/2019 - Retro DOS v4.0
 25546                                  
 25547                                  	; MSDOS 6.0				    ; fully or partially found
 25548 00004317 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25549 0000431A 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25550 0000431C 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25551                                  
 25552                                  ;hkn; SS override for attrib/sattrib
 25553 0000431D 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25554 00004322 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25555 00004327 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25556                                  	;mov	ch,[es:di+0Bh]
 25557 0000432C 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25558 00004330 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25559                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25560 00004333 59                      	POP	CX				    ;AN000;FO.;
 25561 00004334 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25562                                  parfnd:
 25563                                  
 25564                                  ;hkn; SS override
 25565 00004336 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25566 0000433B 89CB                    	MOV	BX,CX
 25567                                  	; MSDOS 6.0
 25568                                  	;mov	ax,[bx+7]
 25569 0000433D 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25570                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25571 00004340 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25572 00004344 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25573 00004347 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25574                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25575                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25576                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25577 0000434B 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25578 0000434E 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25579                                  
 25580 00004352 06                      	PUSH	ES				    ; save ES
 25581                                  ;hkn; SS override
 25582 00004353 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25583 00004358 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25584                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25585 0000435B 07                      	POP	ES				    ; pop ES
 25586                                  ;SR;
 25587                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25588                                  ;indicate it is not a root dir
 25589                                  
 25590 0000435C 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25591 00004363 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25592 00004368 89FB                    	MOV	BX,DI				    ; start of entry
 25593                                  	;lea	si,[di+1Ah]
 25594 0000436A 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25595                                  						    ; dir_first field in the
 25596                                  						    ; dir entry
 25597                                  ;hkn; SS override for FastOpenFlg
 25598                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25599 0000436D 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25600                                  ;	POP	AX
 25601 00004373 C3                      	RETN
 25602                                  NOTFOUND:
 25603 00004374 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25604 00004377 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25605 00004379 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25606                                  Partial_Success:
 25607                                  	;and	byte [SS:FastOpenFlg],0FBh
 25608 0000437F 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25609                                  NOLOOKUP:
 25610                                  ;	POP	AX
 25611 00004385 F9                      	STC
 25612 00004386 C3                      	RETN
 25613                                  
 25614                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25615                                  ;-----------------------------------------------------------------------------
 25616                                  ;
 25617                                  ; Procedure Name : InsertPath
 25618                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25619                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25620                                  ;	  DS = DOSDATA
 25621                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25622                                  ;
 25623                                  ;-----------------------------------------------------------------------------
 25624                                  
 25625                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25626                                  
 25627                                  InsertPath:
 25628 00004387 9C                      	PUSHF
 25629                                  ;hkn; SS override for FastOpenFlag
 25630                                  	;test	byte [SS:FastOpenFlg], 1
 25631 00004388 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25632 0000438E 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25633                                  	;test	byte [ss:FastOpenFlg],2
 25634 00004390 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25635 00004396 740D                    	JZ	short INSERT_DIR_INFO		; no
 25636                                  	;and	byte [ss:FastOpenFlg],0FDh
 25637 00004398 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25638 0000439E 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25639 000043A3 EB5E                    	JMP	short GET_NEXT2
 25640                                  INSERT_DIR_INFO:				; save registers
 25641 000043A5 1E                      	PUSH	DS
 25642 000043A6 06                      	PUSH	ES
 25643 000043A7 53                      	PUSH	BX
 25644 000043A8 56                      	PUSH	SI
 25645 000043A9 57                      	PUSH	DI
 25646 000043AA 51                      	PUSH	CX
 25647 000043AB 50                      	PUSH	AX
 25648                                  
 25649                                  ;hkn; SS override
 25650 000043AC 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25651 000043B1 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25652                                  	;mov	ax,[di+6]
 25653 000043B4 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25654                                  	; MSDOS 6.0
 25655                                  	;mov	[ss:si+1],ax
 25656 000043B7 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25657                                  	; 19/05/2019 - Retro DOS v4.0
 25658 000043BB 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25659                                  
 25660                                  ;hkn; SS is DOSDATA
 25661 000043BE 16                      	push	ss
 25662 000043BF 1F                      	pop	ds
 25663                                  	; MSDOS 3.3	
 25664                                  	;;mov	[si+1],ax	
 25665                                  	;MOV	[SI+FEI.dirsec],AX
 25666                                  	; MSDOS 6.0
 25667                                  	;mov	[si+3],ax
 25668 000043C0 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25669                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25670 000043C3 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25671                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25672                                  	;mov	[si+3],ax ; MSDOS 3.3
 25673 000043C6 894405                  	MOV	[SI+FEI.clusnum],AX
 25674                                  	; MSDOS 6.0
 25675 000043C9 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25676                                  	;mov	[si+7],ax
 25677 000043CC 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25678 000043CF A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25679                                  	;mov	[si+9],ax
 25680 000043D2 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25681                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25682 000043D5 89D8                    	MOV	AX,BX
 25683                                  	;;add	di,16  ; MSDOS 3.3
 25684                                  	;add	di,20  ; MSDOS 6.0
 25685 000043D7 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25686 000043DA 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25687                                  	;mov	cl,32
 25688 000043DC B120                    	MOV	CL,dir_entry.size
 25689 000043DE F6F1                    	DIV	CL
 25690                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25691 000043E0 8804                    	mov	[si],al
 25692                                  
 25693 000043E2 1E                      	PUSH	DS
 25694 000043E3 07                      	POP	ES
 25695                                  
 25696 000043E4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25697 000043E8 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25698                                  	;cmp	word [di+1Ah],0
 25699 000043EA 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25700                                  					; never insert info when file is empty
 25701 000043EE 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25702                                  
 25703 000043F0 56                      	PUSH	SI			; ES:BX -> extended info
 25704 000043F1 5B                      	POP	BX
 25705                                  
 25706                                  	;mov	al,2
 25707 000043F2 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25708 000043F4 BE[300D]                	MOV	SI,FastOpenTable
 25709                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25710                                  	; 07/12/2022
 25711 000043F7 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25712                                  
 25713 000043FB F8                      	CLC
 25714                                  SKIP_INSERT:
 25715 000043FC 58                      	POP	AX
 25716 000043FD 59                      	POP	CX			; restore registers
 25717 000043FE 5F                      	POP	DI
 25718 000043FF 5E                      	POP	SI
 25719 00004400 5B                      	POP	BX
 25720 00004401 07                      	POP	ES
 25721 00004402 1F                      	POP	DS
 25722                                  GET_NEXT2:
 25723                                  	;or	[ss:FastOpenFlg],8
 25724 00004403 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25725                                  					; we got dir info from fastopen so
 25726                                  GET_NEXT_ELEMENT:
 25727 00004409 9D                      	POPF
 25728 0000440A C3                      	RETN
 25729                                  
 25730                                  ;============================================================================
 25731                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25732                                  ;============================================================================
 25733                                  ; 17/07/2018 - Retro DOS v3.0
 25734                                  ; 30/04/2019 - Retro DOS v4.0
 25735                                  
 25736                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25737                                  
 25738                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25739                                  
 25740                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25741                                  
 25742                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25743                                  ;DEV001s:
 25744                                  ;		length of packets
 25745 0000440B 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25746                                  ;LenTab: db	22,14,22,13,15,14
 25747                                  
 25748                                  ;	Error Function
 25749                                  
 25750                                  CmdTab:
 25751 00004411 8604                    	DB	86h, DEVRD	; 0 input
 25752 00004413 8605                    	DB	86h, DEVRDND	; 1 input status
 25753 00004415 8708                    	DB	87h, DEVWRT	; 2 output
 25754 00004417 870A                    	DB	87h, DEVOST	; 3 output status
 25755 00004419 8607                    	DB	86h, DEVIFL	; 4 input flush
 25756 0000441B 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25757                                  
 25758                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25759                                  
 25760                                  ;CmdTab:
 25761                                  ;	db	86h, 4
 25762                                  ;	db	86h, 5
 25763                                  ;	db	87h, 8
 25764                                  ;	db	87h, 10
 25765                                  ;	db	86h, 7
 25766                                  ;	db	86h, 5
 25767                                  
 25768                                  ;DEV001E:
 25769                                  
 25770                                  ; 30/04/2019 - Retro DOS v4.0
 25771                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25772                                  
 25773                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25774                                  ;----------------------------------------------------------------------------
 25775                                  ;
 25776                                  ; Procedure Name : IOFUNC
 25777                                  ;
 25778                                  ; Inputs:
 25779                                  ;	DS:SI Points to SFT
 25780                                  ;	AH is function code
 25781                                  ;		= 0 Input
 25782                                  ;		= 1 Input Status
 25783                                  ;		= 2 Output
 25784                                  ;		= 3 Output Status
 25785                                  ;		= 4 Flush
 25786                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25787                                  ;				   present.
 25788                                  ;	AL = character if output
 25789                                  ; Function:
 25790                                  ;	Perform indicated I/O to device or file
 25791                                  ; Outputs:
 25792                                  ;	AL is character if input
 25793                                  ;	If a status call
 25794                                  ;		zero set if not ready
 25795                                  ;		zero reset if ready (character in AL for input status)
 25796                                  ; For regular files:
 25797                                  ;	Input Status
 25798                                  ;		Gets character but restores position
 25799                                  ;		Zero set on EOF
 25800                                  ;	Input
 25801                                  ;		Gets character advances position
 25802                                  ;		Returns ^Z on EOF
 25803                                  ;	Output Status
 25804                                  ;		Always ready
 25805                                  ; AX altered, all other registers preserved
 25806                                  ;----------------------------------------------------------------------------
 25807                                  
 25808                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25809                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25810                                  
 25811                                  IOFUNC:
 25812 0000441D 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25813                                  					; DEVIOBUF
 25814 00004422 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25815 00004429 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25816 00004430 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25817                                  	;test	byte [si+6],80h
 25818                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25819 00004434 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25820 00004438 7403                    	JZ	short IOTO22		;AN000;
 25821 0000443A E9A500                  	JMP	IOTOFILE		;AN000;
 25822                                  IOTO22:
 25823                                  	;test	word [si+5],80h
 25824                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25825 0000443D F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25826 00004441 7503                    	JNZ	short IOTO33		;AN000;
 25827 00004443 E99C00                  	JMP	IOTOFILE		;AN000;
 25828                                  IOTO33:
 25829 00004446 06                      	push	es ; * (MSDOS 6.21)
 25830 00004447 E81CC0                  	call	save_world
 25831 0000444A 8CDA                    	MOV	DX,DS
 25832 0000444C 8CD3                    	MOV	BX,SS
 25833 0000444E 8EDB                    	MOV	DS,BX
 25834 00004450 8EC3                    	MOV	ES,BX
 25835 00004452 31DB                    	XOR	BX,BX
 25836 00004454 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25837 00004457 7503                    	jnz	short _no_sys_wait
 25838                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25839                                  	; 16/12/2022
 25840 00004459 80CF04                  	or	bh,04h
 25841                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25842                                  				    ; It is up to device driver to carry out
 25843                                  				    ; appropriate action.
 25844                                  _no_sys_wait:
 25845 0000445C 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25846 00004460 31DB                    	XOR	BX,BX
 25847 00004462 881E[8903]              	MOV	[IOMED],BL
 25848                                  
 25849 00004466 88E3                    	MOV	BL,AH		 	; get function
 25850 00004468 2E8AA7[0B44]            	MOV	AH,[cs:BX+LenTab]
 25851 0000446D D1E3                    	SHL	BX,1
 25852 0000446F 2E8B8F[1144]            	MOV	CX,[cs:BX+CmdTab]
 25853 00004474 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25854 00004477 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25855 0000447B 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25856                                  
 25857 0000447F 8EDA                    	MOV	DS,DX
 25858 00004481 E86B01                  	CALL	DEVIOCALL
 25859 00004484 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25860 00004489 21FF                    	and	di,di
 25861 0000448B 7834                    	js	short DevErr
 25862                                  OKDevIO:
 25863 0000448D 8CD0                    	MOV	AX,SS
 25864 0000448F 8ED8                    	MOV	DS,AX
 25865                                  
 25866                                  	;cmp	ch,5
 25867 00004491 80FD05                  	CMP	CH,DEVRDND
 25868 00004494 7506                    	JNZ	short DNODRD
 25869 00004496 A0[8903]                	MOV	AL,[IORCHR]
 25870 00004499 A2[BC03]                	MOV	[DEVIOBUF],AL
 25871                                  
 25872                                  DNODRD: 
 25873 0000449C 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25874 000044A0 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25875                                  	;and	ah,2
 25876 000044A2 80E402                  	AND	AH,STBUI>>8
 25877                                  
 25878                                  QuickReturn:				;AN000; 2/13/KK
 25879 000044A5 E8A7BF                  	call	restore_world
 25880 000044A8 07                      	pop	es ; * (MSDOS 6.21)
 25881                                  
 25882                                  	; SR;
 25883                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25884                                  	; IoStatFail = -1 (set after return from the I24)
 25885                                  
 25886                                  	; MSDOS 6.0
 25887 000044A9 9C                      	pushf
 25888 000044AA 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25889 000044AE 98                      	cbw				;sign extend to word
 25890 000044AF 83F8FF                  	cmp	ax,-1
 25891 000044B2 7507                    	jne	short not_fail_ret
 25892 000044B4 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25893 000044B9 9D                      	popf
 25894 000044BA C3                      	retn
 25895                                  
 25896                                  not_fail_ret:
 25897 000044BB 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25898 000044BF 9D                      	popf
 25899 000044C0 C3                      	retn
 25900                                  
 25901                                  DevErr:
 25902 000044C1 88CC                    	MOV	AH,CL
 25903 000044C3 E88E0D                  	call	CHARHARD
 25904 000044C6 3C01                    	CMP	AL,1
 25905 000044C8 7507                    	JNZ	short NO_RETRY
 25906 000044CA E882BF                  	call	restore_world
 25907                                  	; 12/05/2019
 25908 000044CD 07                      	pop	es ; * (MSDOS 6.21)		
 25909 000044CE E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25910                                  
 25911                                  NO_RETRY:
 25912                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25913                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25914                                  	; simply wants to ignore the error.
 25915                                  	;
 25916                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25917                                  	; should be checked by the caller on return
 25918                                  
 25919                                  					; SS override
 25920 000044D1 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25921                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25922                                  
 25923                                  	; SR;
 25924                                  	; Check if user failed
 25925                                  
 25926                                  	; MSDOS 6.0
 25927 000044D7 3C03                    	cmp	al,3
 25928 000044D9 7505                    	jnz	short not_fail
 25929 000044DB 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25930                                  not_fail:
 25931 000044E0 EBAB                    	JMP	short OKDevIO
 25932                                  
 25933                                  IOTOFILE:
 25934 000044E2 08E4                    	OR	AH,AH
 25935 000044E4 7421                    	JZ	short IOIN
 25936 000044E6 FECC                    	DEC	AH
 25937 000044E8 7405                    	JZ	short IOIST
 25938 000044EA FECC                    	DEC	AH
 25939 000044EC 7411                    	JZ	short IOUT
 25940                                  IOUT_retn:	; 18/12/2022
 25941 000044EE C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25942                                  IOIST:
 25943                                  	;push	word [si+15h]
 25944 000044EF FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25945                                  	;push	word [si+17h]
 25946 000044F2 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25947 000044F5 E80F00                  	CALL	IOIN
 25948                                  	;pop	word [si+17h]
 25949 000044F8 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25950                                  	;pop	word [si+15h]
 25951 000044FB 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25952 000044FE C3                      	retn
 25953                                  IOUT:
 25954 000044FF E82500                  	CALL	SETXADDR
 25955 00004502 E882EF                  	call	DOS_WRITE
 25956                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25957                                  	; 18/12/2022
 25958 00004505 EB52                    	jmp	RESTXADDR
 25959                                  ;IOUT_retn:
 25960                                  	;retn			; come crying to me when things don't
 25961                                  				; work ARR
 25962                                  IOIN:
 25963 00004507 E81D00                  	CALL	SETXADDR
 25964                                  					; SS override for DOS34_FLAG
 25965                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25966                                  	;or	word [ss:DOS34_FLAG],40h
 25967                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25968                                  	; 16/12/2022
 25969 0000450A 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25970 00004510 E84BED                  	CALL	DOS_READ
 25971                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25972                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25973                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25974                                  	; 16/12/2022
 25975 00004513 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25976 00004519 09C9                    	OR	CX,CX			; Check EOF
 25977 0000451B E83B00                  	CALL	RESTXADDR
 25978                                  					; SS override
 25979 0000451E 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25980 00004522 75CA                    	jnz	short IOUT_retn	
 25981 00004524 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25982 00004526 C3                      	retn
 25983                                  
 25984                                  SETXADDR:
 25985                                  					; SS override
 25986 00004527 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25987                                  
 25988 0000452C 06                      	push	es ; * (MSDOS 6.21)
 25989                                  
 25990 0000452D E836BF                  	call	save_world
 25991                                  					; SS override for DMAADD and THISSFT
 25992                                  	; 24/09/2023
 25993                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25994                                  	;PUSH	WORD [SS:DMAADD+2]
 25995 00004530 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25996                                  
 25997 00004535 16                      	push	ss
 25998 00004536 1F                      	pop	ds
 25999                                  
 26000                                  	; 24/09/2023
 26001 00004537 FF36[2C03]              	push	word [DMAADD]
 26002 0000453B FF36[2E03]              	push	word [DMAADD+2]
 26003                                  
 26004 0000453F 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26005 00004543 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 26006 00004547 890E[2E03]              	MOV	[DMAADD+2],CX
 26007 0000454B 8B0E[8A03]              	MOV	CX,[IOXAD]
 26008 0000454F 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 26009 00004553 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26010 00004557 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26011                                  
 26012                                  RESTXADDR:
 26013 00004559 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26014 0000455D 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26015 00004561 8F06[2C03]              	POP	WORD [DMAADD]
 26016                                  
 26017 00004565 E8E7BE                  	call	restore_world
 26018                                  
 26019 00004568 07                      	pop	es ; * (MSDOS 6.21)
 26020                                  					; SS override
 26021                                  RESTRET:
 26022 00004569 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26023                                  
 26024                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26025                                  ; 21/11/2022
 26026                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26027                                  
 26028                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26029                                  
 26030                                  ;----------------------------------------------------------------------------
 26031                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26032                                  ;
 26033                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26034                                  ;	the SFT.
 26035                                  ;
 26036                                  ;	ENTRY	(ES:DI) = SFT
 26037                                  ;	EXIT	none
 26038                                  ;	USES	all
 26039                                  ;----------------------------------------------------------------------------
 26040                                  
 26041                                  DEV_OPEN_SFT:
 26042 0000456E 06                      	push	es ; * (MSDOS 6.21)
 26043 0000456F E8F4BE                  	call	save_world
 26044                                  	;mov	al,0Dh	
 26045 00004572 B00D                    	MOV	AL,DEVOPN
 26046 00004574 EB06                    	JMP	SHORT DO_OPCLS
 26047                                  
 26048                                  ;----------------------------------------------------------------------------
 26049                                  ; Procedure Name : DEV_CLOSE_SFT
 26050                                  ;
 26051                                  ; Inputs:
 26052                                  ;	ES:DI Points to SFT
 26053                                  ; Function:
 26054                                  ;	Issue a CLOSE call to the correct device
 26055                                  ; Outputs:
 26056                                  ;	None
 26057                                  ; ALL preserved
 26058                                  ;----------------------------------------------------------------------------
 26059                                  
 26060                                  DEV_CLOSE_SFT:
 26061 00004576 06                      	push	es ; * (MSDOS 6.21)
 26062 00004577 E8ECBE                  	call	save_world
 26063                                  	;mov	al,0Eh	
 26064 0000457A B00E                    	MOV	AL,DEVCLS
 26065                                  
 26066                                  	; Main entry for device open and close. AL contains the function 
 26067                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26068                                  	; open/close to block devices. This allows networks to function but 
 26069                                  	; does NOT hang up with bogus change-line code.
 26070                                  
 26071                                  	;entry	DO_OPCLS
 26072                                  DO_OPCLS:
 26073                                  	; Is the SFT for the net? If so, no action necessary.
 26074                                  
 26075                                  	; MSDOS 6.0
 26076                                  	;test	word [es:di+5],8000h
 26077                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26078 0000457C 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26079 00004581 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26080 00004583 30E4                    	XOR	AH,AH			; Unit
 26081                                  	;test	byte [es:di+5],80h
 26082 00004585 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26083                                  	;les	di,[es:di+7]
 26084 0000458A 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26085 0000458E 7513                    	JNZ	short GOT_DEV_ADDR
 26086                                  
 26087                                  	; We are about to call device open/close on a block driver. If no 
 26088                                  	; sharing then just short circuit to done.
 26089                                  	
 26090                                  	; MSDOS 6.0
 26091                                  					; SS override
 26092 00004590 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26093 00004596 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 26094                                  
 26095                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26096                                  	;mov	ah,[es:di+1]
 26097 00004598 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26098 0000459C 268A0D                  	mov	cl,[es:di]
 26099                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26100                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26101                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26102 0000459F 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26103                                  GOT_DEV_ADDR:				; ES:DI -> device
 26104                                  	;test	word [es:di+4],800h
 26105                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26106 000045A3 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26107 000045A8 7440                    	JZ	short OPCLS_DONE	; Device can't
 26108 000045AA 06                      	PUSH	ES
 26109 000045AB 1F                      	POP	DS
 26110 000045AC 89FE                    	MOV	SI,DI			; DS:SI -> device
 26111                                  
 26112                                  OPCLS_RETRY:
 26113                                  	;Context ES
 26114 000045AE 16                      	push	ss
 26115 000045AF 07                      	pop	es
 26116                                  					; DEVCALL is in DOSDATA
 26117 000045B0 BF[5A03]                	MOV	DI,DEVCALL
 26118                                  
 26119 000045B3 89FB                    	MOV	BX,DI
 26120 000045B5 50                      	PUSH	AX
 26121                                  	;mov	al,13
 26122 000045B6 B00D                    	MOV	AL,DOPCLHL
 26123 000045B8 AA                      	STOSB				; Length
 26124 000045B9 58                      	POP	AX
 26125 000045BA 86E0                    	XCHG	AH,AL
 26126 000045BC AA                      	STOSB				; Unit
 26127 000045BD 86E0                    	XCHG	AH,AL
 26128 000045BF AA                      	STOSB				; Command
 26129 000045C0 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26130 000045C5 50                      	PUSH	AX			; Save Unit,Command
 26131                                  	;invoke	DEVIOCALL2
 26132 000045C6 E82900                  	call	DEVIOCALL2
 26133                                  
 26134                                  	;mov	di,[es:bx+3]
 26135 000045C9 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26136                                  	;test	di,8000h
 26137                                  	;jz	short OPCLS_DONEP	
 26138 000045CD 21FF                    	and	di,di
 26139 000045CF 7918                    	jns	short OPCLS_DONEP	; No error
 26140                                  	; 21/11/2022
 26141                                  	;test	word [si+4],8000h
 26142                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26143                                  	;test	word [si+5],80h
 26144 000045D1 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26145 000045D5 7404                    	JZ	short BLKDEV
 26146 000045D7 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26147 000045D9 EB04                    	JMP	SHORT HRDERR
 26148                                  BLKDEV:
 26149 000045DB 88C8                    	MOV	AL,CL			; Drive # in AL
 26150 000045DD B406                    	MOV	AH,6			; Read error in data, Blk dev
 26151                                  HRDERR:
 26152                                  	;invoke	CHARHARD
 26153 000045DF E8720C                  	call	CHARHARD
 26154 000045E2 3C01                    	cmp	al,1
 26155 000045E4 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26156                                  					;  Note that FAIL is essentually IGNORED
 26157 000045E6 58                      	POP	AX			; Get back Unit, Command
 26158 000045E7 EBC5                    	JMP	short OPCLS_RETRY
 26159                                  OPCLS_DONEP:
 26160 000045E9 58                      	POP	AX			; Clean stack
 26161                                  OPCLS_DONE:
 26162 000045EA E862BE                  	call	restore_world
 26163 000045ED 07                      	pop	es ; * (MSDOS 6.21)
 26164 000045EE C3                      	retn
 26165                                  
 26166                                  ; 30/04/2019 - Retro DOS v4.0
 26167                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26168                                  
 26169                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26170                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26171                                  
 26172                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26173                                  ;----------------------------------------------------------------------------
 26174                                  ;**	DevIoCall  - Call Device
 26175                                  ;
 26176                                  ;	ENTRY	DS:SI Points to device SFT
 26177                                  ;		ES:BX Points to request data
 26178                                  ;	EXIT	DS:SI -> Device driver
 26179                                  ;	USES	DS:SI,AX
 26180                                  ;----------------------------------------------------------------------------
 26181                                  ;**	DevIoCall2 - Call Device
 26182                                  ;
 26183                                  ;	ENTRY	DS:SI Points to DPB
 26184                                  ;		ES:BX Points to request data
 26185                                  ;	EXIT	DS:SI -> Device driver
 26186                                  ;	USES	DS:SI,AX
 26187                                  ;----------------------------------------------------------------------------
 26188                                  
 26189                                  DEVIOCALL:
 26190                                  					; SS override for CALLSSEC, 
 26191                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26192 000045EF C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26193                                  
 26194                                  	;entry	DEVIOCALL2
 26195                                  DEVIOCALL2:
 26196                                  	;EnterCrit critDevice
 26197 000045F2 E852CD                  	call	ECritDevice
 26198                                  
 26199                                  	; MSDOS 6.0
 26200                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26201                                  	;test	byte [si+5],80h
 26202 000045F5 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26203 000045F9 7548                    	jnz	short chardev2		;AN000; >32mb no
 26204                                  
 26205                                  	; 16/12/2022
 26206                                  	; 22/11/2022
 26207 000045FB 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26208 000045FF 3C04                    	cmp	al,DEVRD	; 4
 26209 00004601 7408                    	je	short chkext	
 26210 00004603 3C08                    	cmp	al,DEVWRT	; 8
 26211 00004605 7404                    	je	short chkext
 26212 00004607 3C09                    	cmp	al,DEVWRTV	; 9
 26213 00004609 7538                    	jne	short chardev2
 26214                                  
 26215                                  	; 16/12/2022
 26216                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26217                                  	;;cmp	byte [es:bx+2],4
 26218                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26219                                  	;JZ	short chkext		;AN000; >32mb   yes
 26220                                  	;;cmp	byte [es:bx+2],8
 26221                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26222                                  	;JZ	short chkext		;AN000; >32mb   yes
 26223                                  	;;cmp	byte [es:bx+2],9
 26224                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26225                                  	;				;AN000; >32mb write/verify ?
 26226                                  	;JNZ	short chardev2		;AN000; >32mb no
 26227                                  chkext:
 26228 0000460B E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26229 0000460E 7255                    	JC	short dev_exit		;AN000;LB. done
 26230                                  
 26231                                  	;test	byte [si+4],2
 26232 00004610 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26233 00004614 741D                    	JZ	short chksector		;AN000;>32mb   no
 26234 00004616 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26235 0000461A 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26236 0000461E 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26237 00004625 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26238 00004629 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26239 0000462D 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26240 00004631 EB10                    	JMP	short chardev2		;AN000; >32mb
 26241                                  chksector:				;AN000; >32mb
 26242 00004633 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26243 00004639 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26244                                  	;mov	word [es:bx+3],8107h
 26245 0000463B 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26246                                  					;AN000; >32mb
 26247 00004641 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26248                                  
 26249                                  chardev2:				;AN000;
 26250                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26251                                  	; preserved
 26252                                  
 26253                                  	;mov	ax,[si+6]
 26254 00004643 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26255 00004646 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26256 0000464A 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26257 0000464F 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26258                                  
 26259                                  	;mov	ax,[si+8]
 26260 00004654 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26261 00004657 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26262 0000465B 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26263                                  
 26264                                  	; MSDOS 6.0
 26265 00004660 E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26266 00004663 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26267                                  
 26268                                  dev_exit:
 26269                                  	;LeaveCrit critDevice
 26270                                  	;call	LCritDevice
 26271                                  	;retn
 26272                                  	; 18/12/2022
 26273 00004665 E9FACC                  	jmp	LCritDevice
 26274                                  
 26275                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26276                                  ; 22/11/2022
 26277                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26278                                  
 26279                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26280                                  ;---------------------------------------------------------------------------
 26281                                  ;
 26282                                  ; Procedure Name : SETREAD, SETWRITE
 26283                                  ;
 26284                                  ; Inputs:
 26285                                  ;	DS:BX = Transfer Address
 26286                                  ;	CX = Record Count
 26287                                  ;	DX = Starting Record
 26288                                  ;	AH = Media Byte
 26289                                  ;	AL = Unit Code
 26290                                  ; Function:
 26291                                  ;	Set up the device call header at DEVCALL
 26292                                  ; Output:
 26293                                  ;	ES:BX Points to DEVCALL
 26294                                  ; No other registers effected
 26295                                  ;
 26296                                  ;---------------------------------------------------------------------------
 26297                                  
 26298                                  SETREAD:
 26299 00004668 57                      	PUSH	DI
 26300 00004669 51                      	PUSH	CX
 26301 0000466A 50                      	PUSH	AX
 26302 0000466B B104                    	MOV	CL,DEVRD ; mov cl,4
 26303                                  SETCALLHEAD:
 26304 0000466D B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26305 0000466F 16                      	PUSH	SS
 26306 00004670 07                      	POP	ES
 26307                                  					; DEVCALL is in DOSDATA
 26308 00004671 BF[5A03]                	MOV	DI,DEVCALL
 26309                                  
 26310 00004674 AA                      	STOSB				; length
 26311 00004675 58                      	POP	AX			; 
 26312 00004676 AA                      	STOSB				; Unit
 26313 00004677 50                      	PUSH	AX
 26314 00004678 88C8                    	MOV	AL,CL
 26315 0000467A AA                      	STOSB				; Command code
 26316 0000467B 31C0                    	XOR	AX,AX
 26317 0000467D AB                      	STOSW				; Status
 26318 0000467E 83C708                  	ADD	DI,8			; Skip link fields
 26319 00004681 58                      	POP	AX
 26320 00004682 86E0                    	XCHG	AH,AL
 26321 00004684 AA                      	STOSB				; Media byte
 26322 00004685 86C4                    	XCHG	AL,AH
 26323 00004687 50                      	PUSH	AX
 26324 00004688 89D8                    	MOV	AX,BX
 26325 0000468A AB                      	STOSW
 26326                                  
 26327 0000468B 8CD8                    	MOV	AX,DS
 26328 0000468D AB                      	STOSW				; Transfer addr
 26329                                  
 26330 0000468E 59                      	POP	CX			; Real AX
 26331 0000468F 58                      	POP	AX			; Real CX
 26332 00004690 AB                      	STOSW				; Count
 26333                                  
 26334 00004691 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26335 00004692 AB                      	STOSW				; Start
 26336 00004693 91                      	XCHG	AX,CX
 26337 00004694 87D1                    	XCHG	DX,CX
 26338 00004696 5F                      	POP	DI
 26339                                  					; DEVCALL is in DOSDATA
 26340 00004697 BB[5A03]                	MOV	BX,DEVCALL
 26341 0000469A C3                      	retn
 26342                                  
 26343                                  	;entry	SETWRITE
 26344                                  SETWRITE:
 26345                                  
 26346                                  ; Inputs:
 26347                                  ;	DS:BX = Transfer Address
 26348                                  ;	CX = Record Count
 26349                                  ;	DX = Starting Record
 26350                                  ;	AH = Media Byte
 26351                                  ;	AL = Unit Code
 26352                                  ; Function:
 26353                                  ;	Set up the device call header at DEVCALL
 26354                                  ; Output:
 26355                                  ;	ES:BX Points to DEVCALL
 26356                                  ; No other registers effected
 26357                                  
 26358 0000469B 57                      	PUSH	DI
 26359 0000469C 51                      	PUSH	CX
 26360 0000469D 50                      	PUSH	AX
 26361 0000469E B108                    	MOV	CL,DEVWRT ; mov cl,8
 26362 000046A0 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26363 000046A5 EBC6                    	JMP	SHORT SETCALLHEAD
 26364                                  
 26365                                  ; 30/04/2019 - Retro DOS v4.0
 26366                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26367                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26368                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26369                                  
 26370                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26371                                  ;---------------------------------------------------------------------------
 26372                                  ;
 26373                                  ; Procedure Name : RW_SC
 26374                                  ;
 26375                                  ; Inputs:
 26376                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26377                                  ;	 [SC_STATUS]= SC validity status
 26378                                  ;	 [SEQ_SECTOR]= last sector read
 26379                                  ; Function:
 26380                                  ;	Read from or write through secondary cache
 26381                                  ; Output:
 26382                                  ;	ES:BX Points to DEVCALL
 26383                                  ;	carry clear, I/O is not done
 26384                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26385                                  ;	carry set, I/O is done
 26386                                  ;
 26387                                  ;----------------------------------------------------------------------------
 26388                                  
 26389                                  RW_SC:
 26390                                  	; SS override for all variables used.
 26391                                  	
 26392 000046A7 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26393 000046AD 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26394 000046AF 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26395 000046B5 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26396 000046B7 51                      	PUSH	CX			    ;AN000;LB.
 26397 000046B8 52                      	PUSH	DX			    ;AN000;LB. yes
 26398 000046B9 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26399 000046BA 56                      	PUSH	SI			    ;AN000;LB.
 26400 000046BB 06                      	PUSH	ES			    ;AN000;LB.
 26401 000046BC 57                      	PUSH	DI			    ;AN000;LB.
 26402                                  
 26403 000046BD 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26404 000046C2 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26405 000046C8 7408                    	JZ	short doread		    ;AN000;LB. yes
 26406 000046CA E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26407 000046CD E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26408                                  scexit4:				    ;AN000;
 26409 000046D0 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26410 000046D1 C3                      	retn				    ;AN000;LB.
 26411                                  doread: 				    ;AN000;
 26412 000046D2 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26413 000046D5 720A                    	JC	short readSC		    ;AN000;LB.
 26414 000046D7 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26415 000046DE F9                      	STC				    ;AN000;LB. set carry
 26416 000046DF EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26417                                  readSC: 				    ;AN000;
 26418 000046E1 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26419 000046E5 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26420 000046EA 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26421 000046EF 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26422                                  	; 24/09/2023
 26423                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26424 000046F4 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26425                                  chklow: 						
 26426 000046F6 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26427 000046F9 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26428 000046FB 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26429 00004702 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26430 00004706 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26431                                  readsr:
 26432 0000470A 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26433 0000470E 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26434 00004712 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26435 00004716 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26436                                  
 26437 0000471A 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26438 0000471E 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26439 00004722 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26440 00004726 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26441 0000472A 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26442 00004730 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26443 00004734 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26444 00004738 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26445 0000473C 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26446 00004740 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26447 00004744 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26448                                  saveseq2:				    ;AN000;
 26449 00004748 F8                      	CLC				    ;AN000;LB. clear carry
 26450                                  saveseq:				    ;AN000;	
 26451 00004749 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26452 0000474D 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26453 00004751 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26454 00004755 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26455 00004759 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26456                                  scexit2:				    ;AN000;LB.
 26457 0000475B F8                      	CLC				    ;AN000;LB.	clear carry
 26458                                  scexit: 				    ;AN000;		
 26459 0000475C 5F                      	POP	DI			    ;AN000;LB.
 26460 0000475D 07                      	POP	ES			    ;AN000;LB. restore registers
 26461 0000475E 5E                      	POP	SI			    ;AN000;LB.
 26462 0000475F 1F                      	POP	DS			    ;AN000;LB.
 26463 00004760 5A                      	POP	DX			    ;AN000;LB.
 26464 00004761 59                      	POP	CX			    ;AN000;LB.
 26465 00004762 C3                      	retn				    ;AN000;LB.
 26466                                  
 26467                                  ;Break	<IN_SC -- check if in secondary cache>
 26468                                  ;--------------------------------------------------------------------------
 26469                                  ;
 26470                                  ; Procedure Name : IN_SC
 26471                                  ;
 26472                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26473                                  ;	   [CURSC_DRIVE]= current SC drive
 26474                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26475                                  ;	   [SC_CACHE_COUNT]= SC count
 26476                                  ;	   [HIGH_SECTOR]:DX= sector number
 26477                                  ; Function:
 26478                                  ;	Check if the sector is in secondary cache
 26479                                  ; Output:
 26480                                  ;	carry clear, in SC
 26481                                  ;	   CX= the index in the secondary cache
 26482                                  ;	carry set, not in SC
 26483                                  ;
 26484                                  ;---------------------------------------------------------------------------
 26485                                  
 26486                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26487                                  IN_SC:
 26488                                  	; SS override for all variables used
 26489 00004763 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26490 00004767 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26491 0000476C 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26492 0000476E 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26493 00004772 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26494 00004774 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26495 00004779 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26496                                  	; 24/09/2023
 26497                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26498 0000477E 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26499 00004780 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26500 00004785 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26501 00004787 F8                      	CLC				    ;AN000;;LB. clear carry
 26502                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26503                                  	; 16/12/2022
 26504 00004788 C3                      	retn	; 30/04/2019
 26505                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26506                                  	;jmp	short inexit
 26507                                  
 26508                                  outrange2:				    ;AN000;;LB. set carry
 26509 00004789 F9                      	STC				    ;AN000;;LB.
 26510                                  inexit: 				    ;AN000;;LB.
 26511 0000478A C3                      	retn				    ;AN000;;LB.
 26512                                  
 26513                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26514                                  ;---------------------------------------------------------------------------
 26515                                  ;
 26516                                  ; Procedure Name : Invalidate_Sc
 26517                                  ;
 26518                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26519                                  ;	   [CURSC_DRIVE]= current SC drive
 26520                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26521                                  ;	   [SC_CACHE_COUNT]= SC count
 26522                                  ;	   [SC_STATUS]= SC status word
 26523                                  ;	   [HIGH_SECTOR]:DX= sector number
 26524                                  ;
 26525                                  ; Function:
 26526                                  ;	invalidate secondary cache if in there
 26527                                  ; Output:
 26528                                  ;	[SC_STATUS] is updated
 26529                                  ;---------------------------------------------------------------------------
 26530                                  
 26531                                  INVALIDATE_SC:
 26532                                  	; SS override for all variables used
 26533                                  
 26534 0000478B E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26535 0000478E 720C                    	JC	short outrange		    ;AN000;;LB. no
 26536 00004790 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26537 00004793 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26538 00004795 F7D0                    	NOT	AX			    ;AN000;;LB.
 26539 00004797 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26540                                  outrange:				    ;AN000;;LB.
 26541 0000479C C3                      	retn				    ;AN000;;LB.
 26542                                  
 26543                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26544                                  ; 22/11/2022
 26545                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26546                                  
 26547                                  ;Break	<VIRREAD- virtually read data into buffer>
 26548                                  ;--------------------------------------------------------------------------
 26549                                  ;
 26550                                  ; Procedure Name : SC_FLAG
 26551                                  ;
 26552                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26553                                  ;		     1, continuous sectors were read into SC
 26554                                  ; Function:
 26555                                  ;	   Move data from SC to buffer
 26556                                  ; Output:
 26557                                  ;	 carry clear, data is moved to buffer
 26558                                  ;	 carry set, bad sector or exceeds maximum sector
 26559                                  ;	   SC_FLAG =0
 26560                                  ;	   CALLSCNT=1
 26561                                  ;	   SC_STATUS= -1 if succeeded
 26562                                  ;     
 26563                                  ;		       0 if failed
 26564                                  ;--------------------------------------------------------------------------
 26565                                  
 26566                                  VIRREAD:
 26567                                  	; SS override for all variables used
 26568                                  
 26569 0000479D 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26570 000047A3 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26571 000047A5 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26572 000047A9 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26573 000047AD 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26574 000047B1 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26575 000047B5 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26576 000047BB 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26577                                  
 26578                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26579 000047C2 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26580 000047C8 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26581 000047CA 1E                      	PUSH	DS			    ;AN000;;LB.
 26582 000047CB 56                      	PUSH	SI			    ;AN000;;LB.
 26583 000047CC 06                      	PUSH	ES			    ;AN000;;LB.
 26584 000047CD 57                      	PUSH	DI			    ;AN000;;LB.
 26585 000047CE 52                      	PUSH	DX			    ;AN000;;LB.
 26586 000047CF 51                      	PUSH	CX			    ;AN000;;LB.
 26587 000047D0 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26588 000047D2 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26589 000047D5 59                      	POP	CX
 26590 000047D6 5A                      	POP	DX			    ;AN000;;LB.
 26591 000047D7 5F                      	POP	DI			    ;AN000;;LB.
 26592 000047D8 07                      	POP	ES			    ;AN000;;LB.
 26593 000047D9 5E                      	POP	SI			    ;AN000;;LB.
 26594 000047DA 1F                      	POP	DS			    ;AN000;;LB.
 26595 000047DB EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26596                                  scerror:				    ;AN000;
 26597 000047DD 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26598 000047E4 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26599 000047EB 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26600 000047F1 F9                      	STC				    ;AN000;;LB. carry set
 26601 000047F2 C3                      	retn				    ;AN000;;LB.
 26602                                  sc2end: 				    ;AN000;
 26603 000047F3 F8                      	CLC				    ;AN000;;LB. carry clear
 26604 000047F4 C3                      	retn				    ;AN000;;LB.
 26605                                  
 26606                                  ; 30/04/2019 - Retro  DOS v4.0
 26607                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26608                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26609                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26610                                  
 26611                                  ;Break	<SC2BUF- move data from SC to buffer>
 26612                                  ;----------------------------------------------------------------------------
 26613                                  ;
 26614                                  ; Procedure Name : SC2BUF
 26615                                  ;
 26616                                  ; Inputs:  [SC_STATUS] = SC validity status
 26617                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26618                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26619                                  ; Function:
 26620                                  ;	   Move data from SC to buffer
 26621                                  ; Output:
 26622                                  ;	   carry clear, in SC  and data is moved
 26623                                  ;	   carry set, not in SC and data is not moved
 26624                                  ;---------------------------------------------------------------------------
 26625                                  
 26626                                  SC2BUF:
 26627                                  	; SS override for all variables used
 26628 000047F5 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26629                                  	;JC	short noSC		    ;AN000;LB. no
 26630                                  	; 24/09/2023
 26631 000047F8 723D                    	jc	short sexit
 26632 000047FA B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26633 000047FD D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26634 000047FF 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26635 00004804 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26636                                  ;entry SC2BUF2
 26637                                  SC2BUF2:				    ;AN000;
 26638                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26639                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26640                                  	; 24/09/2023
 26641 00004806 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26642 0000480A 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26643 0000480B F7E1                    	mul	cx
 26644 0000480D 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26645 00004812 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26646 00004817 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26647 00004819 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26648 0000481B 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26649 00004820 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26650                                  	; 24/09/2023
 26651                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26652 00004825 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26653                                  ;entry MOVWORDS
 26654                                  MOVWORDS:				    ;AN000;
 26655 00004827 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26656 0000482D 7403                    	JZ	short nodd		    ;AN000;LB. no
 26657 0000482F D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26658 00004831 66                      	DB	66H			    ;AN000;LB. use double word move
 26659                                  nodd:
 26660 00004832 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26661 00004834 F8                      	CLC				    ;AN000;LB. clear carry
 26662 00004835 C3                      	retn				    ;AN000;LB. exit
 26663                                  noSC:					    ;AN000;
 26664 00004836 F9                      	STC				    ;AN000;LB. set carry
 26665                                  sexit:					    ;AN000;
 26666 00004837 C3                      	retn				    ;AN000;LB.
 26667                                  
 26668                                  ;============================================================================
 26669                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26670                                  ;============================================================================
 26671                                  ; 29/07/2018 - Retro DOS v3.0
 26672                                  ; 19/05/2019 - Retro DOS v4.0
 26673                                  
 26674                                  ;	TITLE	MKNODE - Node maker
 26675                                  ;	NAME	MKNODE
 26676                                  
 26677                                  ;**	MKNODE.ASM
 26678                                  ;----------------------------------------------------------------------------
 26679                                  ;	Low level routines for making a new local file system node
 26680                                  ;	and filling in an SFT from a directory entry
 26681                                  ;
 26682                                  ;	BUILDDIR
 26683                                  ;	SETDOTENT
 26684                                  ;	MakeNode
 26685                                  ;	NEWENTRY
 26686                                  ;	FREEENT
 26687                                  ;	NEWDIR
 26688                                  ;	DOOPEN
 26689                                  ;	RENAME_MAKE
 26690                                  ;	CHECK_VIRT_OPEN
 26691                                  ;
 26692                                  ;	Revision history:
 26693                                  ;
 26694                                  ;	 AN000	version 4.0  Jan. 1988
 26695                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26696                                  
 26697                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26698                                  ;----------------------------------------------------------------------------
 26699                                  ;
 26700                                  ; Procedure Name : BUILDDIR,NEWDIR
 26701                                  ;
 26702                                  ; Inputs:
 26703                                  ;       ES:BP Points to DPB
 26704                                  ;       [THISSFT] Set if using NEWDIR entry point
 26705                                  ;               (used by ALLOCATE)
 26706                                  ;       [LASTENT] current last valid entry number in directory if no free
 26707                                  ;               entries
 26708                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26709                                  ; Function:
 26710                                  ;       Grow directory if no free entries and not root
 26711                                  ; Outputs:
 26712                                  ;       CARRY SET IF FAILURE
 26713                                  ;       ELSE
 26714                                  ;          AX entry number of new entry
 26715                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26716                                  ;               AX = first entry of new dir
 26717                                  ;       GETENT should be called to set [LASTENT]
 26718                                  ;
 26719                                  ;----------------------------------------------------------------------------
 26720                                  
 26721                                  ; 19/05/2019 - Retro DOS v4.0
 26722                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26723                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26724                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26725                                  
 26726                                  BUILDDIR:
 26727                                  	; 29/07/2018 - Retro DOS v3.0
 26728                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26729                                  
 26730 00004838 A1[D805]                        MOV     AX,[ENTFREE]
 26731 0000483B 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26732                                  	;JZ	short CHECK_IF_ROOT
 26733                                          ;CLC
 26734                                          ;retn
 26735                                  	; 24/09/2023
 26736 0000483E 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26737                                  
 26738                                  CHECK_IF_ROOT:
 26739 00004840 833E[C205]00                    CMP     word [DIRSTART],0
 26740 00004845 7502                            JNZ	short NEWDIR
 26741                                          ;STC
 26742                                  	; 24/09/2023
 26743                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26744                                  builddir_cmc_retn:
 26745                                  	; 24/09/2023
 26746 00004847 F5                      	cmc	; cf=1 <-> cf=0
 26747                                  builddir_retn:
 26748 00004848 C3                              retn				; Can't grow root
 26749                                  
 26750                                  	;entry   NEWDIR
 26751                                  NEWDIR: 
 26752 00004849 8B1E[C205]              	MOV     BX,[DIRSTART]
 26753 0000484D 09DB                            OR      BX,BX
 26754 0000484F 7405                            JZ	short NULLDIR
 26755 00004851 E82806                  	call	GETEOF
 26756 00004854 72F2                            jc	short builddir_retn	; Screw up
 26757                                  NULLDIR:
 26758 00004856 B90100                          MOV     CX,1
 26759 00004859 E83905                  	call	ALLOCATE
 26760 0000485C 72EA                            jc	short  builddir_retn
 26761 0000485E 8B16[C205]                      MOV     DX,[DIRSTART]
 26762 00004862 09D2                            OR      DX,DX
 26763 00004864 750D                            JNZ	short ADDINGDIR
 26764 00004866 E8DAF5                  	call	SETDIRSRCH
 26765 00004869 72DD                            jc	short  builddir_retn
 26766 0000486B C706[4803]FFFF                  MOV     word [LASTENT],-1
 26767 00004871 EB29                            JMP     SHORT GOTDIRREC
 26768                                  ADDINGDIR:
 26769 00004873 53                              PUSH    BX
 26770 00004874 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26771 00004878 E82D0C                          call	IsEOF
 26772 0000487B 5B                              POP     BX
 26773 0000487C 7217                            JB	short NOTFIRSTGROW
 26774                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26775 0000487E 891E[BC05]                      MOV     [CLUSNUM],BX
 26776                                  	; 24/09/2023
 26777                                  	;PUSH	CX ; (not necessary)
 26778 00004882 50                      	PUSH	AX
 26779 00004883 55                      	PUSH	BP
 26780 00004884 B401                            MOV     AH,1			; CLUSNUM update
 26781                                  	; 15/12/2022
 26782 00004886 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26783                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26784                                  	;;mov	dl,[es:bp+0]
 26785                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26786 0000488A 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26787 0000488E 89DD                            MOV     BP,BX 			; CLUSNUM
 26788 00004890 E80CDE                  	call	FastOpen_Update
 26789 00004893 5D                              POP     BP
 26790 00004894 58                              POP     AX
 26791                                  	; 24/09/2023
 26792                                          ;POP	CX
 26793                                  
 26794                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26795                                  NOTFIRSTGROW:
 26796 00004895 89DA                            MOV     DX,BX
 26797 00004897 30DB                            XOR     BL,BL
 26798 00004899 E8CC04                  	call	FIGREC
 26799                                  GOTDIRREC:
 26800                                  	;mov	cl,[es:bp+4]
 26801 0000489C 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26802 000048A0 FEC1                            INC     CL
 26803 000048A2 30ED                            XOR     CH,CH
 26804                                  ZERODIR:
 26805 000048A4 51                              PUSH    CX
 26806                                  	; 22/09/2023
 26807                                  	;;mov	byte [ALLOWED],18h
 26808                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26809 000048A5 B0FF                            MOV     AL,0FFH
 26810                                          ;call	GETBUFFR
 26811 000048A7 E82210                          call	GETBUFFRD ; *
 26812 000048AA 7302                    	JNC	short GET_SSIZE
 26813 000048AC 59                              POP     CX
 26814 000048AD C3                              retn
 26815                                  
 26816                                  GET_SSIZE:
 26817                                  	;mov	cx,[es:bp+2]
 26818 000048AE 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26819 000048B2 06                              PUSH    ES
 26820 000048B3 C43E[E205]                      LES     DI,[CURBUF]
 26821                                  	;or	byte [es:di+5],4
 26822 000048B7 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26823 000048BC 57                              PUSH    DI
 26824                                  	;;add	di,16	; MSDOS 3.3
 26825                                  	;add	di,20	; MSDOS 6.0	
 26826 000048BD 83C714                          ADD     DI,BUFINSIZ
 26827 000048C0 31C0                            XOR     AX,AX
 26828 000048C2 D1E9                            SHR     CX,1
 26829 000048C4 F3AB                            REP     STOSW
 26830 000048C6 7301                            JNC	short EVENZ
 26831 000048C8 AA                              STOSB
 26832                                  EVENZ:
 26833 000048C9 5F                              POP     DI
 26834                                  
 26835                                  	; MSDOS 6.0
 26836 000048CA 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26837                                  					;LB. if already dirty		  ;AN000;
 26838 000048CF 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26839 000048D1 E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26840                                          
 26841                                  	;or	byte [es:di+5],40h
 26842 000048D4 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26843                                  yesdirty7:
 26844 000048D9 07                              POP	ES
 26845 000048DA 59                              POP	CX
 26846                                  
 26847                                  	; 19/05/2019 - Retro DOS v4.0
 26848                                  
 26849                                  	; MSDOS 3.3
 26850                                  	;INC	DX
 26851                                  
 26852                                  	; MSDOS 6.0
 26853                                  	; 24/09/2023
 26854                                  	;add	dx,1
 26855                                  	;;adc	word [HIGH_SECTOR],0
 26856                                  	;; 24/09/2023
 26857                                  	;; ax=0
 26858                                  	;adc	[HIGH_SECTOR],ax ; 0
 26859                                  	; 24/09/2023
 26860 000048DB 42                      	inc	dx
 26861 000048DC 7504                    	jnz	short loop_zerodir
 26862 000048DE FF06[0706]              	inc	word [HIGH_SECTOR]
 26863                                  loop_zerodir:
 26864 000048E2 E2C0                            LOOP    ZERODIR
 26865                                  
 26866 000048E4 A1[4803]                        MOV     AX,[LASTENT]
 26867 000048E7 40                              INC     AX
 26868                                  	; 24/09/2023
 26869                                  	; cf=0
 26870                                  	;CLC
 26871 000048E8 C3                              retn
 26872                                  
 26873                                  ;--------------------------------------------------------------------------
 26874                                  ;
 26875                                  ; Procedure Name : SETDOTENT
 26876                                  ;
 26877                                  ; set up a . or .. directory entry for a directory.
 26878                                  ;
 26879                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26880                                  ;               AX contains ". " or ".."
 26881                                  ;               DX contains first cluster of entry
 26882                                  ;
 26883                                  ;----------------------------------------------------------------------------
 26884                                  
 26885                                  SETDOTENT:
 26886                                  ;	Fill in name field
 26887 000048E9 AB                              STOSW
 26888 000048EA B90400                          MOV     CX,4
 26889 000048ED B82020                          MOV     AX,"  " ; 2020h
 26890 000048F0 F3AB                            REP     STOSW
 26891 000048F2 AA                              STOSB
 26892                                  
 26893                                  ;	Set up attribute
 26894                                  	;mov	al, 10h
 26895 000048F3 B010                            MOV     AL,attr_directory
 26896 000048F5 AA                              STOSB
 26897                                  
 26898                                  ;	Initialize time and date of creation
 26899 000048F6 83C70A                          ADD     DI,10
 26900 000048F9 8B36[9E05]                      MOV     SI,[THISSFT]
 26901                                  	;mov	ax,[si+0Dh]
 26902 000048FD 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26903 00004900 AB                              STOSW
 26904                                  	;mov	ax,[si+0Fh]
 26905 00004901 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26906 00004904 AB                      	STOSW
 26907                                  
 26908                                  ;	Set up first cluster field
 26909 00004905 89D0                            MOV     AX,DX
 26910 00004907 AB                              STOSW
 26911                                  
 26912                                  ;	0 file size
 26913 00004908 31C0                            XOR     AX,AX
 26914 0000490A AB                              STOSW
 26915 0000490B AB                              STOSW
 26916 0000490C C3                              retn
 26917                                  
 26918                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26919                                  ;---------------------------------------------------------------------------
 26920                                  ;
 26921                                  ; Procedure Name : MakeNode
 26922                                  ;
 26923                                  ; Inputs:
 26924                                  ;       AL - attribute to create
 26925                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26926                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26927                                  ;               (AH ignored on dirs and devices)
 26928                                  ;
 26929                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26930                                  ;               a name already existant is ALWAYS an error in these cases.
 26931                                  ;
 26932                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26933                                  ;               terminated)
 26934                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26935                                  ;               ( = -1 if current dir not involved, else
 26936                                  ;                Points to first char after last "/" of current dir part)
 26937                                  ;       [THISCDS] Points to CDS being used
 26938                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26939                                  ; Function:
 26940                                  ;       Make a new node
 26941                                  ; Outputs:
 26942                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26943                                  ;       CARRY SET IF ERROR
 26944                                  ;          AX = 1 A node by this name exists and is a directory
 26945                                  ;          AX = 2 A new node could not be created
 26946                                  ;          AX = 3 A node by this name exists and is a disk file
 26947                                  ;               (AH was NZ on input)
 26948                                  ;          AX = 4 Bad Path
 26949                                  ;               SI return from GetPath maintained
 26950                                  ;          AX = 5 Attribute mismatch
 26951                                  ;          AX = 6 Sharing Violation
 26952                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26953                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26954                                  ;       ELSE
 26955                                  ;          AX = 0 Disk Node
 26956                                  ;          AX = 3 Device Node (error in some cases)
 26957                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26958                                  ;               containing new node.
 26959                                  ;          [CURBUF+2]:BX Points to entry
 26960                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26961                                  ;          [THISSFT] is filled in
 26962                                  ;               sf_mode = unchanged.
 26963                                  ;          Attribute byte in entry is input AL
 26964                                  ; DS preserved, others destroyed
 26965                                  ;
 26966                                  ;-------------------------------------------------------------------------
 26967                                  
 26968                                  ; 19/05/2019 - Retro DOS v4.0
 26969                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26970                                  
 26971                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26972                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26973                                  
 26974                                  MakeNode:
 26975                                  	;mov	word [CREATING],0E5FFh
 26976 0000490D C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26977 00004913 50                              PUSH    AX              ; Save AH value
 26978 00004914 C606[4C03]00            	MOV	byte [NoSetDir],0
 26979 00004919 A2[6D05]                	MOV	[SATTRIB],AL
 26980 0000491C E887F5                  	call	GetPathNoSet
 26981 0000491F 88CA                            MOV     DL,CL           ; Save CL info
 26982 00004921 89C1                            MOV     CX,AX           ; Device ID to CH
 26983 00004923 58                              POP     AX              ; Get back AH
 26984 00004924 732E                            JNC	short make_exists ; File existed
 26985 00004926 7505                            JNZ	short make_err_4 ; Path bad
 26986 00004928 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26987 0000492B 7406                            JZ	short make_type	; Name simply not found, and no metas
 26988                                  make_err_4:
 26989 0000492D B004                            MOV     AL,4            ; case 1 bad path
 26990                                  make_err_ret:
 26991 0000492F 30E4                            XOR     AH,AH
 26992 00004931 F9                              STC
 26993                                  ;make_retn:	; 22/11/2022
 26994 00004932 C3                              retn
 26995                                  
 26996                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26997                                  RENAME_MAKE:
 26998                                  make_type:
 26999                                  ;Extended Open hooks
 27000                                  	; MSDOS 6.0
 27001                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27002 00004933 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27003 00004938 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27004 0000493A 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27005                                  					;FT. set for extended open ;AN000;
 27006                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27007 0000493F F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27008 00004944 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27009 00004946 F9                      	STC				;FT. set carry			;AN000;
 27010 00004947 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27011                                  	; 22/11/2022
 27012                                  make_retn:
 27013                                  	;return
 27014 0000494A C3                      	retn				;FT.				;AN000;
 27015                                  
 27016                                  ;	Extended Open hooks
 27017                                  
 27018                                  make_type2:
 27019 0000494B C43E[9E05]                      LES     DI,[THISSFT]
 27020 0000494F 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 27021 00004951 F9                              STC                     ; Not found
 27022 00004952 EB5A                            JMP     short make_new
 27023                                  
 27024                                  ; The node exists. It may be either a device, directory or file:
 27025                                  ;   Zero set => directory
 27026                                  ;   High bit of CH on => device
 27027                                  ;   else => file
 27028                                  
 27029                                  make_exists:
 27030 00004954 7448                            JZ	short make_exists_dir
 27031 00004956 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 27032                                  	;test	byte [ATTRIB],18h
 27033 00004958 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27034 0000495D 753B                            JNZ	short make_err_ret_5
 27035                                  				; Cannot already exist as Disk or Device Node
 27036                                                                  ;       if making DIR or Volume ID
 27037 0000495F 08ED                            OR      CH,CH
 27038 00004961 781A                            JS	short make_share ; No further checks on attributes if device
 27039 00004963 08E4                            OR      AH,AH
 27040 00004965 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27041 00004967 51                              PUSH    CX              ; Save device ID
 27042 00004968 8E06[E405]                      MOV     ES,[CURBUF+2]
 27043                                  	;mov	ch,[es:bx+0Bh]
 27044 0000496C 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27045                                  	;test	ch,1
 27046 00004970 F6C501                  	test	CH,attr_read_only
 27047 00004973 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 27048 00004975 E8D0F7                  	call	MatchAttributes
 27049 00004978 59                              POP     CX              ; Devid back in CH
 27050 00004979 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 27051 0000497B 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 27052                                  make_share:
 27053 0000497D 30E4                            XOR     AH,AH
 27054 0000497F 50                              PUSH    AX              ; Save Disk or Device node
 27055 00004980 51                              PUSH    CX              ; Save Device ID
 27056 00004981 88EC                            MOV     AH,CH           ; Device ID to AH
 27057 00004983 E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 27058 00004986 C43E[9E05]                      LES     DI,[THISSFT]
 27059 0000498A 56                      	push	si
 27060 0000498B 53                      	push	bx		; Save CURBUF pointers
 27061 0000498C E86729                  	call	ShareEnter
 27062 0000498F 735A                            jnc	short MakeEndShare
 27063                                  
 27064                                  ; User failed request.
 27065 00004991 5B                      	pop	bx
 27066 00004992 5E                      	pop	si
 27067 00004993 59                      	pop	cx
 27068 00004994 58                      	pop	ax
 27069                                  
 27070                                  Make_Share_ret:
 27071 00004995 B006                            MOV     AL,6
 27072 00004997 EB96                            JMP	short make_err_ret
 27073                                  
 27074                                  make_err_ret_5P:
 27075 00004999 59                              POP     CX              ; Get back device ID
 27076                                  make_err_ret_5:
 27077 0000499A B005                            MOV     AL,5            ; Attribute mismatch
 27078                                          ; 22/11/2022
 27079 0000499C EB91                    	JMP     short make_err_ret
 27080                                  
 27081                                  make_exists_dir:
 27082 0000499E B001                            MOV     AL,1            ; exists as directory, always an error
 27083                                  	; 22/11/2022
 27084 000049A0 EB8D                    	JMP     short make_err_ret
 27085                                  
 27086                                  make_save:
 27087 000049A2 50                              PUSH    AX              ; Save whether Disk or File
 27088 000049A3 89C8                            MOV     AX,CX           ; Device ID to AH
 27089 000049A5 E87400                          CALL    NEWENTRY
 27090 000049A8 58                              POP     AX              ; 0 if Disk, 3 if File
 27091 000049A9 739F                            jnc	short make_retn
 27092 000049AB B002                            MOV     AL,2            ; create failed case 2
 27093                                  make_save_retn:
 27094 000049AD C3                              retn
 27095                                  
 27096                                  make_new:
 27097 000049AE E8F1FF                          call    make_save
 27098 000049B1 72FA                            jc	short make_save_retn	; case 2 fail
 27099                                  	;test	byte [ATTRIB],10h
 27100 000049B3 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27101 000049B8 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 27102                                  					; so don't tell the sharer about them
 27103 000049BA 50                      	push	ax
 27104 000049BB 53                      	push	bx
 27105 000049BC 56                      	push	si		
 27106 000049BD E83629                          call	ShareEnter
 27107 000049C0 5E                      	pop	si
 27108 000049C1 5B                      	pop	bx
 27109 000049C2 58                      	pop	ax
 27110 000049C3 73E8                    	jnc	short make_save_retn
 27111                                  
 27112                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27113                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27114                                  ; possible: delete the newly created directory entry and return share_error.
 27115                                  
 27116 000049C5 50                              PUSH    AX
 27117 000049C6 C43E[E205]                      LES     DI,[CURBUF]
 27118                                  	;mov	byte [es:bx],0E5h
 27119 000049CA 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27120                                  	
 27121                                  	; MSDOS 6.0
 27122                                  	;test	byte [es:di+5],40h
 27123 000049CE 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27124                                  					;LB. if already dirty		  ;AN000;
 27125 000049D3 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27126                                  	; 22/11/2022
 27127 000049D5 E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27128                                  	;or	byte [es:di+5],40h
 27129 000049D8 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27130                                  yesdirty8:
 27131 000049DD C42E[8A05]                      LES     BP,[THISDPB]
 27132                                  	; 15/12/2022
 27133 000049E1 268A4600                        mov	al,[ES:BP]
 27134                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27135                                  	;;mov	al,[es:bp+0]
 27136                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27137 000049E5 E8E60F                          call	FLUSHBUF		; write out buffer.
 27138 000049E8 58                              POP     AX
 27139 000049E9 EBAA                            jmp	short Make_Share_ret
 27140                                  
 27141                                  ; We have found an existing file. We have also entered it into the share set.
 27142                                  ; At this point we need to call newentry to correctly address the problem of
 27143                                  ; getting rid of old data (create an existing file) or creating a new
 27144                                  ; directory entry (create a new file). Unfortunately, this operation may
 27145                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27146                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27147                                  ; the share set now, do the operation and then reassert the share access.
 27148                                  ;
 27149                                  ; We are allowed to do this! There is no window! After all, we are in
 27150                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27151                                  
 27152                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27153                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27154                                  
 27155                                  MakeEndShare:
 27156 000049EB C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 27157 000049EF 31C0                            XOR     AX,AX
 27158 000049F1 E81EC9                  	call	ECritSFT
 27159 000049F4 268705                  	xchg	AX,[ES:DI]
 27160                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27161 000049F7 50                      	push	ax
 27162 000049F8 57                      	push	di
 27163 000049F9 06                      	push	es
 27164 000049FA 9C                              PUSHF
 27165 000049FB E8F328                          call	ShareEnd                ; remove sharing
 27166 000049FE 9D                              POPF
 27167 000049FF 07                      	pop	es
 27168 00004A00 5F                      	pop	di
 27169 00004A01 268F05                          pop	word [ES:DI]	
 27170                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27171 00004A04 E826C9                  	call	LCritSFT
 27172                                  	; 22/11/2022
 27173                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27174 00004A07 5B                      	pop	bx
 27175 00004A08 5E                      	pop	si
 27176 00004A09 59                      	pop	cx
 27177 00004A0A 58                      	pop	ax
 27178 00004A0B E894FF                          CALL    make_save
 27179                                  
 27180                                  ; If the user failed, we do not reenter into the sharing set.
 27181                                  
 27182 00004A0E 729D                            jc	short make_save_retn	; bye if error
 27183 00004A10 50                      	push	ax
 27184 00004A11 53                      	push	bx
 27185 00004A12 56                      	push	si
 27186 00004A13 9C                              PUSHF
 27187 00004A14 E8DF28                          call	ShareEnter
 27188 00004A17 9D                              POPF
 27189 00004A18 5E                      	pop	si
 27190 00004A19 5B                      	pop	bx
 27191 00004A1A 58                      	pop	ax
 27192                                  
 27193                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27194                                  
 27195                                  makeendshare_retn:
 27196 00004A1B C3                              retn
 27197                                  
 27198                                  ;---------------------------------------------------------------------------
 27199                                  ;
 27200                                  ; Procedure Name : NEWENTRY
 27201                                  ;
 27202                                  ; Inputs:
 27203                                  ;       [THISSFT] set
 27204                                  ;       [THISDPB] set
 27205                                  ;       [LASTENT] current last valid entry number in directory if no free
 27206                                  ;               entries
 27207                                  ;       [VOLID] set if a volume ID was found during search
 27208                                  ;	Attrib Contains attributes for new file
 27209                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27210                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27211                                  ;               NC means file existed (device)
 27212                                  ;               C  means file did not exist
 27213                                  ;       AH = Device ID byte
 27214                                  ;       If FILE
 27215                                  ;           [CURBUF+2]:BX points to start of directory entry
 27216                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27217                                  ;       If device
 27218                                  ;           DS:BX points to start of "fake" directory entry
 27219                                  ;           DS:SI points to dir_first of "fake" directory entry
 27220                                  ;               (has DWORD pointer to device header)
 27221                                  ; Function:
 27222                                  ;       Make a new directory entry
 27223                                  ;       If an old one existed it is truncated first
 27224                                  ; Outputs:
 27225                                  ;       Carry set if error
 27226                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 27227                                  ;               vol ID, user FAILed to I 24
 27228                                  ;       else
 27229                                  ;               outputs of DOOPEN
 27230                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27231                                  ;
 27232                                  ;----------------------------------------------------------------------------
 27233                                  
 27234                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27235                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27236                                  
 27237                                  NEWENTRY:
 27238 00004A1C C42E[8A05]              	LES     BP,[THISDPB]
 27239 00004A20 7315                            JNC	short EXISTENT	
 27240 00004A22 803E[4A03]00                    CMP     byte [FAILERR],0
 27241                                  	;STC
 27242                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 27243                                          ; 24/09/2023
 27244 00004A27 750C                    	jnz	short ERRRET3
 27245 00004A29 E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 27246 00004A2C 72ED                            jc	short makeendshare_retn	; Failed
 27247 00004A2E E8E3F3                          call	GETENT          ; Point at that free entry
 27248 00004A31 72E8                            jc	short makeendshare_retn	; Failed
 27249 00004A33 EB0E                            JMP     SHORT FREESPOT
 27250                                  
 27251                                  ERRRET3:
 27252 00004A35 F9                              STC
 27253                                  newentry_retn:
 27254 00004A36 C3                              retn
 27255                                  
 27256                                  EXISTENT:
 27257 00004A37 08E4                            OR      AH,AH           ; Check if file is I/O device
 27258 00004A39 7903                            JNS	short NOT_DEV1
 27259 00004A3B E98D00                          JMP     DOOPEN          ; If so, proceed with open
 27260                                  
 27261                                  NOT_DEV1:
 27262 00004A3E E82901                          call	FREEENT		; Free cluster chain
 27263 00004A41 72F3                            jc	short newentry_retn ; Failed
 27264                                  FREESPOT:
 27265                                  	;test	byte [ATTRIB],8
 27266 00004A43 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27267 00004A48 7407                            JZ	short NOTVOLID
 27268 00004A4A 803E[7B05]00                    CMP     BYTE [VOLID],0
 27269 00004A4F 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 27270                                  NOTVOLID:
 27271 00004A51 8E06[E405]                      MOV     ES,[CURBUF+2]
 27272 00004A55 89DF                            MOV     DI,BX
 27273                                  
 27274 00004A57 BE[4B05]                        MOV     SI,NAME1
 27275                                  
 27276 00004A5A B90500                          MOV     CX,5
 27277 00004A5D F3A5                            REP     MOVSW
 27278 00004A5F A4                              MOVSB                   ; Move name into dir entry
 27279 00004A60 A0[6B05]                	MOV	AL,[ATTRIB]
 27280 00004A63 AA                      	STOSB                   ; Attributes
 27281                                  
 27282                                  ;; File Tagging for Create DOS 4.00
 27283 00004A64 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 27284                                  ;; File Tagging for Create DOS 4.00
 27285                                  
 27286 00004A66 31C0                            XOR     AX,AX
 27287 00004A68 F3AB                            REP     STOSW           ; Zero pad
 27288 00004A6A E888C0                          call	DATE16
 27289 00004A6D 92                              XCHG    AX,DX
 27290 00004A6E AB                              STOSW                   ; dir_time
 27291 00004A6F 92                              XCHG    AX,DX
 27292 00004A70 AB                              STOSW                   ; dir_date
 27293 00004A71 31C0                            XOR     AX,AX
 27294 00004A73 57                              PUSH    DI              ; Correct SI input value
 27295                                  				; 	(recomputed for new buffer)
 27296 00004A74 AB                              STOSW                   ; Zero dir_first and size
 27297 00004A75 AB                              STOSW
 27298 00004A76 AB                              STOSW
 27299                                  updnxt:
 27300 00004A77 8B36[E205]              	MOV	SI,[CURBUF]
 27301                                  
 27302                                  	; 19/05/2019 - Retro DOS v4.0
 27303                                  
 27304                                  	; MSDOS 6.0
 27305 00004A7B 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27306                                  				;LB. if already dirty		  ;AN000;
 27307 00004A80 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27308 00004A82 E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27309                                          
 27310                                  	;or	byte [es:si+5],40h
 27311 00004A85 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27312                                  yesdirty9:
 27313 00004A8A C42E[8A05]                      LES     BP,[THISDPB]
 27314                                  	; 15/12/2022
 27315 00004A8E 268A4600                	MOV	AL,[ES:BP]
 27316                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27317                                  	;;mov	al,[es:bp+0]
 27318                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27319 00004A92 50                              PUSH    AX
 27320 00004A93 53                              PUSH    BX
 27321                                  
 27322                                  ; If we have a file, we need to increment the open ref. count so that
 27323                                  ; we have some protection against invalid media changes if an Int 24
 27324                                  ; error occurs.
 27325                                  ; Do nothing for a device.
 27326                                  
 27327 00004A94 06                      	push	es
 27328 00004A95 57                      	push	di
 27329 00004A96 C43E[9E05]                      LES     DI,[THISSFT]
 27330                                  	;test	word [es:di+5],80h
 27331                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27332 00004A9A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27333 00004A9F 751A                            jnz	short GotADevice
 27334 00004AA1 1E                      	push	ds
 27335 00004AA2 53                      	push	bx
 27336 00004AA3 C51E[8A05]                      LDS     BX,[THISDPB]
 27337                                  	;mov	[es:di+7],bx
 27338 00004AA7 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 27339 00004AAB 8CDB                            MOV     BX,DS
 27340                                  	;mov	[es:di+9],bx
 27341 00004AAD 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27342 00004AB1 5B                      	pop	bx
 27343 00004AB2 1F                      	pop	ds ; need to use DS for segment later on
 27344 00004AB3 E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27345 00004AB6 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27346                                  GotADevice:
 27347 00004ABB 5F                      	pop	di
 27348 00004ABC 07                      	pop	es
 27349                                  
 27350 00004ABD E80E0F                          call	FLUSHBUF
 27351 00004AC0 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27352 00004AC3 5B                              POP     BX
 27353 00004AC4 58                              POP     AX
 27354 00004AC5 5E                              POP     SI              ; Get SI input back
 27355 00004AC6 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27356 00004AC8 7301                    	jnc	short DOOPEN    ; Failed
 27357 00004ACA C3                      	retn
 27358                                  	
 27359                                  ;NOTE FALL THROUGH
 27360                                  
 27361                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27362                                  
 27363                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27364                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27365                                  
 27366                                  ; DOOPEN
 27367                                  ;----------------------------------------------------------------------------
 27368                                  ;
 27369                                  ; Inputs:
 27370                                  ;       [THISDPB] points to DPB if file
 27371                                  ;       [THISSFT] points to SFT being used
 27372                                  ;       AH = Device ID byte
 27373                                  ;       If FILE
 27374                                  ;           [CURBUF+2]:BX points to start of directory entry
 27375                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27376                                  ;       If device
 27377                                  ;           DS:BX points to start of "fake" directory entry
 27378                                  ;           DS:SI points to dir_first of "fake" directory entry
 27379                                  ;               (has DWORD pointer to device header)
 27380                                  ; Function:
 27381                                  ;       Fill in SFT from dir entry
 27382                                  ; Outputs:
 27383                                  ;       CARRY CLEAR
 27384                                  ;       sf_ref_count and sf_mode fields not altered
 27385                                  ;       sf_flags high byte = 0
 27386                                  ;       sf_flags low byte = AH except
 27387                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27388                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27389                                  ;       sf_position = 0
 27390                                  ;       If device
 27391                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27392                                  ;           sf_size = 0
 27393                                  ;       If file
 27394                                  ;           sf_firclus sf_size set from entry
 27395                                  ;           sf_devptr = [THISDPB]
 27396                                  ;           sf_cluspos = 0
 27397                                  ;           sf_lstclus = sf_firclus
 27398                                  ;           sf_dirsec sf_dirpos set
 27399                                  ; DS,SI,BX preserved, others destroyed
 27400                                  ;
 27401                                  ;----------------------------------------------------------------------------
 27402                                  
 27403                                  	;entry	DOOPEN
 27404                                  DOOPEN:
 27405                                  ;	Generate and store attribute
 27406                                  
 27407 00004ACB 88E6                            MOV     DH,AH           ; AH to different place
 27408 00004ACD C43E[9E05]                      LES     DI,[THISSFT]
 27409                                  	;add	di,4
 27410 00004AD1 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27411                                  	; 24/09/2023
 27412 00004AD4 31C0                    	xor	ax,ax
 27413                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27414                                  				;   attribute of 0 (for R/O testing etc).
 27415 00004AD6 08F6                            OR      DH,DH           ; See if our assumption good.
 27416 00004AD8 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27417 00004ADA 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27418                                  	;mov	al,[BX+0Bh]
 27419 00004ADE 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27420                                  				; If file, get attrib from dir entry
 27421                                  DEV_SFT1:
 27422 00004AE1 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27423                                  
 27424                                  ;	Generate and store flags word
 27425                                  
 27426                                  	; 24/09/2023
 27427                                  	;XOR	AX,AX
 27428                                          ; ah=0
 27429 00004AE2 88F0                    	MOV     AL,DH
 27430                                  	;or	al,40h
 27431 00004AE4 0C40                            OR      AL,devid_file_clean
 27432 00004AE6 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27433                                  
 27434                                  ;	Generate and store device pointer
 27435                                  
 27436 00004AE7 1E                              PUSH    DS
 27437                                  	;lds	ax,[bx+1Ah]
 27438 00004AE8 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27439 00004AEB 08F6                            OR      DH,DH
 27440 00004AED 7805                            JS	short DEV_SFT2
 27441                                  
 27442                                  ;hkn; SS override
 27443 00004AEF 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27444                                  DEV_SFT2:
 27445 00004AF4 AB                              STOSW 			; store offset
 27446 00004AF5 8CD8                            MOV     AX,DS
 27447 00004AF7 1F                              POP     DS
 27448 00004AF8 AB                      	STOSW			; store segment
 27449                                  				; ES:DI -> sf_firclus
 27450                                  
 27451                                  ;	Generate pointer to, generate and store first cluster 
 27452                                  ;	(irrelevant for devices)
 27453                                  
 27454 00004AF9 56                              PUSH    SI              ; Save pointer to dir_first
 27455 00004AFA A5                              MOVSW                   ; dir_first -> sf_firclus
 27456                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27457                                  
 27458                                  ;	Copy time/date of last modification
 27459                                  
 27460                                  	;sub	si,6
 27461 00004AFB 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27462                                  				; DS:SI->dir_time
 27463 00004AFE A5                              MOVSW                   ; dir_time -> sf_time
 27464                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27465 00004AFF A5                              MOVSW                   ; dir_date -> sf_date
 27466                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27467                                  
 27468                                  ;	Generate and store file size (0 for devices)
 27469                                  
 27470 00004B00 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27471 00004B01 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27472 00004B02 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27473 00004B04 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27474 00004B05 08F6                            OR      DH,DH
 27475 00004B07 7904                            JNS	short FILE_SFT1
 27476 00004B09 31C0                            XOR     AX,AX
 27477 00004B0B 89C1                            MOV     CX,AX           ; Devices are open ended
 27478                                  FILE_SFT1:
 27479 00004B0D 91                              XCHG    AX,CX
 27480 00004B0E AB                              STOSW                   ; Low word of sf_size
 27481 00004B0F 91                              XCHG    AX,CX
 27482 00004B10 AB                              STOSW                   ; High word of sf_size
 27483                                                                  ; ES:DI -> sf_position
 27484                                  ; Initialize position to 0
 27485                                  
 27486 00004B11 31C0                            XOR     AX,AX
 27487 00004B13 AB                              STOSW
 27488 00004B14 AB                              STOSW                   ; sf_position
 27489                                                                  ; ES:DI -> sf_cluspos
 27490                                  
 27491                                  ; Generate cluster optimizations for files
 27492                                  
 27493 00004B15 08F6                            OR      DH,DH
 27494 00004B17 7843                            JS	short DEV_SFT3
 27495 00004B19 AB                              STOSW                   ; sf_cluspos ; 19h
 27496                                  	;mov	ax,[bx+1Ah]
 27497 00004B1A 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27498                                  	; 19/05/2019
 27499                                  	; MSDOS 3.3
 27500                                  	;STOSW 			; sf_lstclus ; 1Bh
 27501                                  	; MSDOS 6.0
 27502 00004B1D 57                              PUSH	DI              ;AN004; save dirsec offset
 27503                                  	;sub	di,1Bh
 27504 00004B1E 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27505                                  	;mov	[es:di+35h],ax
 27506 00004B21 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27507 00004B25 5F                              POP	DI              ;AN004; restore dirsec offset
 27508                                  
 27509                                  ; DOS 3.3  FastOpen  6/13/86
 27510                                  
 27511 00004B26 1E                      	PUSH	DS
 27512                                  
 27513                                  ;hkn; SS is DOSDATA
 27514 00004B27 16                      	push	ss
 27515 00004B28 1F                      	pop	ds
 27516                                  	;test	byte [FastOpenFlg],4
 27517 00004B29 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27518 00004B2E 7411                    	JZ	short Not_FastOpen
 27519                                  
 27520                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27521 00004B30 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27522                                  
 27523                                  	;mov	ax,[si+1]
 27524 00004B33 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27525 00004B36 AB                              STOSW                   ; sf_dirsec
 27526                                  	; MSDOS 6.0
 27527                                  	;mov	ax,[si+3]
 27528 00004B37 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27529                                  				;;; changed for >32mb
 27530 00004B3A AB                              STOSW                   ; sf_dirsec
 27531                                  	; 19/08//2018
 27532 00004B3B 8A04                    	mov	al,[SI]
 27533                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27534 00004B3D AA                              STOSB                   ; sf_dirpos
 27535 00004B3E 1F                              POP	DS
 27536                                          ;JMP	short Next_Name
 27537                                  	; 24/09/2023
 27538 00004B3F EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27539                                  
 27540                                  ; DOS 3.3  FastOpen  6/13/86
 27541                                  
 27542                                  Not_FastOpen:
 27543                                          ;POP     DS		; normal path
 27544                                  
 27545                                  ;hkn; SS override
 27546                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27547                                  	; 16/12/2022
 27548                                  	; 28/07/2019
 27549 00004B41 8B36[E205]              	mov	si,[CURBUF]
 27550 00004B45 1F                      	pop	ds
 27551                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27552                                  	;pop	ds
 27553                                  	;mov	si,[ss:CURBUF]
 27554                                  	
 27555                                  	;mov	ax,[si+6]
 27556 00004B46 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27557 00004B49 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27558                                  	; 19/05/2019        
 27559                                  	; MSDOS 6.0
 27560                                  	;mov	ax,[si+8]
 27561 00004B4A 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27562 00004B4D AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27563                                          
 27564 00004B4E 89D8                    	MOV     AX,BX
 27565                                  	;;add	si,16	; MSDOS 3.3	
 27566                                  	;add	si,20	; MSDOS 6.0
 27567 00004B50 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27568 00004B53 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27569                                          ;mov	cl,32
 27570 00004B55 B120                    	MOV     CL,dir_entry.size
 27571 00004B57 F6F1                            DIV     CL
 27572 00004B59 AA                              STOSB                   ; sf_dirpos
 27573                                  Next_Name:
 27574 00004B5A EB03                            JMP     SHORT FILE_SFT2
 27575                                  
 27576                                  	; 24/09/2023
 27577                                  	; cf=0 (after 'or' instruction)
 27578                                  DEV_SFT3:
 27579                                  	;add	di,7
 27580 00004B5C 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27581                                  FILE_SFT2:
 27582                                  
 27583                                  ; Copy in the object's name
 27584                                  
 27585 00004B5F 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27586 00004B61 B90B00                          MOV     CX,11
 27587 00004B64 F3A4                            REP     MOVSB           ; sf_name
 27588 00004B66 5E                              POP     SI              ; recover DS:SI -> dir_first
 27589                                  
 27590                                  ;hkn; SS is DOSDATA
 27591 00004B67 16                              push	ss
 27592 00004B68 1F                      	pop	ds
 27593                                  	; 24/09/2023
 27594                                  	; cf=0
 27595                                          ;CLC
 27596 00004B69 C3                              retn
 27597                                  
 27598                                  ;---------------------------------------------------------------------------
 27599                                  ;
 27600                                  ; Procedure Name : FREEENT
 27601                                  ;
 27602                                  ; Inputs:
 27603                                  ;       ES:BP -> DPB
 27604                                  ;       [CURBUF] Set
 27605                                  ;       [CURBUF+2]:BX points to directory entry
 27606                                  ;       [CURBUF+2]:SI points to above dir_first
 27607                                  ; Function:
 27608                                  ;       Free the cluster chain for the entry if present
 27609                                  ; Outputs:
 27610                                  ;       Carry set if error (currently user FAILed to I 24)
 27611                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27612                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27613                                  ;---------------------------------------------------------------------------
 27614                                  
 27615                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27616                                  FREEENT:
 27617 00004B6A 1E                              PUSH    DS
 27618 00004B6B C53E[E205]                      LDS     DI,[CURBUF]
 27619 00004B6F 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27620                                  	; 19/05/2019 - Retro DOS v4.0
 27621                                  	; MSDOS 6.0
 27622 00004B71 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27623                                  ;hkn; SS override
 27624 00004B74 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27625 00004B79 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27626 00004B7C 1F                              POP     DS
 27627 00004B7D 83F902                  	CMP	CX,2
 27628 00004B80 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27629                                  	;cmp	cx,[es:bp+0Dh]
 27630 00004B82 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27631 00004B86 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27632 00004B88 29FB                            SUB     BX,DI
 27633 00004B8A 53                              PUSH    BX              ; Save offset
 27634 00004B8B FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27635 00004B8F 52                              PUSH    DX              ; Save sector number
 27636 00004B90 89CB                            MOV     BX,CX
 27637 00004B92 E8AC02                          call	RELEASE         ; Free any data allocated
 27638 00004B95 5A                              POP     DX
 27639 00004B96 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27640 00004B9A 7302                            JNC	short GET_BUF_BACK
 27641 00004B9C 5B                              POP     BX
 27642                                  freeent_retn:
 27643 00004B9D C3                              retn			; Screw up
 27644                                  
 27645                                  GET_BUF_BACK:
 27646                                  	; 22/09/2023
 27647                                  	;;mov	byte [ALLOWED],18h
 27648                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27649                                          ;XOR	AL,AL ; *
 27650                                  	;call	GETBUFFR        ; Get sector back
 27651 00004B9E E8290D                  	call	GETBUFFER ; * ; pre read  
 27652                                  
 27653 00004BA1 5B                              POP     BX              ; Get offset back
 27654 00004BA2 72F9                            jc	short freeent_retn
 27655 00004BA4 E8B2EA                  	call	SET_BUF_AS_DIR
 27656 00004BA7 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27657 00004BAB 89DE                            MOV     SI,BX
 27658                                  	;add	si,1Ah
 27659 00004BAD 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27660                                  RET1:
 27661 00004BB0 F8                              CLC
 27662 00004BB1 C3                              retn
 27663                                  
 27664                                  ;---------------------------------------------------------------------------
 27665                                  ;
 27666                                  ; Procedure Name : CHECK_VIRT_OPEN
 27667                                  ;
 27668                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27669                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27670                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27671                                  ; flag [VIRTUAL_OPEN].
 27672                                  ; No registers affected (including flags).
 27673                                  ; On input, [THISSFT] points to current SFT.
 27674                                  ;
 27675                                  ;---------------------------------------------------------------------------
 27676                                  
 27677                                  CHECK_VIRT_OPEN:
 27678 00004BB2 50                      	PUSH    AX
 27679 00004BB3 9F                              lahf                    ; preserve flags
 27680 00004BB4 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27681 00004BB9 7410                            JZ	short ALL_CLOSED
 27682 00004BBB C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27683 00004BC0 06                      	push	es
 27684 00004BC1 57                      	push	di
 27685 00004BC2 C43E[9E05]                      LES     DI,[THISSFT]
 27686 00004BC6 E8ADF9                          call	DEV_CLOSE_SFT
 27687 00004BC9 5F                      	pop	di
 27688 00004BCA 07                      	pop	es
 27689                                  
 27690                                  ALL_CLOSED:
 27691 00004BCB 9E                              sahf                    ; restore flags
 27692 00004BCC 58                              POP     AX
 27693 00004BCD C3                              retn
 27694                                  
 27695                                  ;============================================================================
 27696                                  ; ROM.ASM, MSDOS 6.0, 1991
 27697                                  ;============================================================================
 27698                                  ; 29/07/2018 - Retro DOS v3.0
 27699                                  ; 20/05/2019 - Retro DOS v4.0
 27700                                  
 27701                                  ;	TITLE	ROM - Miscellaneous routines
 27702                                  ;	NAME	ROM
 27703                                  
 27704                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27705                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27706                                  ;
 27707                                  ;	SKPCLP
 27708                                  ;	FNDCLUS
 27709                                  ;	BUFSEC
 27710                                  ;	BUFRD
 27711                                  ;	BUFWRT
 27712                                  ;	NEXTSEC
 27713                                  ;	OPTIMIZE
 27714                                  ;	FIGREC
 27715                                  ;	ALLOCATE
 27716                                  ;	RESTFATBYT
 27717                                  ;	RELEASE
 27718                                  ;	RELBLKS
 27719                                  ;	GETEOF
 27720                                  ;
 27721                                  ;	Modification history:
 27722                                  ;
 27723                                  ;		Created: ARR 30 March 1983
 27724                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27725                                  
 27726                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27727                                  ;--------------------------------------------------------------------------
 27728                                  ;
 27729                                  ; Procedure Name : FNDCLUS
 27730                                  ;
 27731                                  ; Inputs:
 27732                                  ;       CX = No. of clusters to skip
 27733                                  ;       ES:BP = Base of drive parameters
 27734                                  ;       [THISSFT] point to SFT
 27735                                  ; Outputs:
 27736                                  ;       BX = Last cluster skipped to
 27737                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27738                                  ;       DX = Position of last cluster
 27739                                  ;       Carry set if error (currently user FAILed to I 24)
 27740                                  ; DI destroyed. No other registers affected.
 27741                                  ;--------------------------------------------------------------------------
 27742                                  
 27743                                  ; 20/05/2019 - Retro DOS v4.0
 27744                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27745                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27746                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27747                                  
 27748                                  FNDCLUS:
 27749 00004BCE 06                      	PUSH	ES
 27750 00004BCF C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27751                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27752                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27753 00004BD3 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27754                                  	;mov	dx,[es:di+19h]
 27755 00004BD7 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27756 00004BDB 09DB                    	OR	BX,BX
 27757 00004BDD 7424                    	JZ	short NOCLUS
 27758                                  
 27759 00004BDF 29D1                            SUB     CX,DX
 27760 00004BE1 7308                            JNB	short FINDIT
 27761                                  
 27762 00004BE3 01D1                            ADD     CX,DX
 27763 00004BE5 31D2                            XOR     DX,DX
 27764                                  	;mov	bx,[es:di+0Bh]
 27765 00004BE7 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27766                                  FINDIT:
 27767 00004BEB 07                              POP	ES
 27768 00004BEC E313                    	JCXZ	RET9
 27769                                  
 27770                                  	;entry	SKPCLP
 27771                                  SKPCLP:
 27772 00004BEE E8CE08                  	call	UNPACK
 27773 00004BF1 7214                            jc	short fndclus_retn	; retc
 27774                                  
 27775                                  	; 09/09/2018
 27776                                  
 27777                                  	; MSDOS 3.3
 27778                                  	;push	bx
 27779                                  	;mov	bx,di
 27780                                  	;call	IsEOF
 27781                                  	;pop	bx	
 27782                                  	;jae	short RET9
 27783                                  
 27784                                  	; 20/05/2019 - Retro DOS v4.0
 27785                                  
 27786                                  	; MSDOS 6.0
 27787 00004BF3 87DF                    	xchg	bx,di
 27788 00004BF5 E8B008                  	call	IsEOF
 27789 00004BF8 87DF                    	xchg	bx,di
 27790 00004BFA 7305                    	jae	short RET9
 27791                                  
 27792 00004BFC 87DF                            XCHG    BX,DI
 27793 00004BFE 42                              INC     DX
 27794                                  
 27795 00004BFF E2ED                    	LOOP	SKPCLP			; RMFS
 27796                                  RET9:	
 27797 00004C01 F8                      	CLC
 27798 00004C02 C3                              retn
 27799                                  NOCLUS:
 27800 00004C03 07                              POP	ES
 27801 00004C04 41                              INC	CX
 27802 00004C05 4A                              DEC	DX
 27803 00004C06 F8                              CLC
 27804                                  
 27805                                  fndclus_retn:
 27806 00004C07 C3                              retn
 27807                                  
 27808                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27809                                  ;--------------------------------------------------------------------------
 27810                                  ;
 27811                                  ; Procedure Name : BUFSEC
 27812                                  ;
 27813                                  ; Inputs:
 27814                                  ;       AH = priority of buffer
 27815                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27816                                  ;       ES:BP = Base of drive parameters
 27817                                  ;       [CLUSNUM] = Physical cluster number
 27818                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27819                                  ;       [BYTCNT1] = Size of transfer
 27820                                  ; Function:
 27821                                  ;       Insure specified sector is in buffer, flushing buffer before
 27822                                  ;       read if necessary.
 27823                                  ; Outputs:
 27824                                  ;       ES:DI = Pointer to buffer
 27825                                  ;       SI = Pointer to transfer address
 27826                                  ;       CX = Number of bytes
 27827                                  ;       [NEXTADD] updated
 27828                                  ;       [TRANS] set to indicate a transfer will occur
 27829                                  ;       Carry set if error (user FAILed to I 24)
 27830                                  ;--------------------------------------------------------------------------
 27831                                  
 27832                                  BUFSEC:
 27833 00004C08 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27834 00004C0C 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27835                                  	;mov	byte [ALLOWED],38h
 27836 00004C10 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27837 00004C15 E85001                          CALL    FIGREC
 27838 00004C18 E8B60C                  	call	GETBUFFR
 27839 00004C1B 72EA                            jc	short fndclus_retn
 27840                                  
 27841 00004C1D C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27842 00004C22 8B36[B805]                      MOV     SI,[NEXTADD]
 27843 00004C26 89F7                            MOV     DI,SI
 27844 00004C28 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27845 00004C2C 01CF                            ADD     DI,CX
 27846 00004C2E 893E[B805]                      MOV     [NEXTADD],DI
 27847 00004C32 C43E[E205]                      LES     DI,[CURBUF]
 27848                                  	;or	byte [es:di+5],8
 27849 00004C36 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27850                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27851                                  	;lea	di,[di+20] ; MSDOS 6.0
 27852 00004C3B 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27853 00004C3E 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27854 00004C42 F8                              CLC
 27855 00004C43 C3                              retn
 27856                                  
 27857                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27858                                  
 27859                                  ;---------------------------------------------------------------------------
 27860                                  ;
 27861                                  ; Procedure Name : BUFRD
 27862                                  ;
 27863                                  ; Do a partial sector read via one of the system buffers
 27864                                  ; ES:BP Points to DPB
 27865                                  ; Carry set if error (currently user FAILed to I 24)
 27866                                  ;
 27867                                  ; DS - set to DOSDATA
 27868                                  ;
 27869                                  ;----------------------------------------------------------------------------
 27870                                  
 27871                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27872                                  	; 20/05/2019 - Retro DOS v4.0
 27873                                  BUFRD:
 27874 00004C44 06                              PUSH	ES
 27875 00004C45 31C0                            xor	ax, ax			; pre-read sector
 27876 00004C47 E8BEFF                          CALL    BUFSEC
 27877 00004C4A 7303                            JNC	short BUF_OK
 27878                                  
 27879                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27880 00004C4C 07                              POP	ES
 27881 00004C4D EB2B                            JMP     SHORT RBUFPLACED
 27882                                  
 27883                                  BUF_OK:
 27884 00004C4F 8CC3                            MOV     BX,ES
 27885 00004C51 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27886 00004C55 8EDB                            MOV     DS,BX
 27887 00004C57 87FE                    	XCHG    DI,SI
 27888 00004C59 D1E9                            SHR     CX,1
 27889                                  ;M039
 27890                                  	; MSDOS 3.3
 27891                                  	;JNC	short EVENRD
 27892                                  	;MOVSB
 27893                                  ;EVENRD:
 27894                                  	;REP     MOVSW
 27895                                  
 27896                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27897                                  ;       DS:SI-> Source within Buffer.
 27898                                  ;       ES:DI-> Destination within Transfer memory block.
 27899                                  
 27900                                  	; MSDOS 6.0
 27901 00004C5B F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27902                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27903                                  	;rep	movsb                   ;Copy last byte.
 27904                                  	; 16/12/2022
 27905 00004C5D 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27906 00004C5F A4                      	movsb ; ****
 27907                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27908                                  	;adc	cx,0
 27909                                  	;rep	movsb
 27910                                  ;M039
 27911                                  EVENRD: ; ****
 27912 00004C60 07                              POP	ES
 27913                                  ;hkn; SS override
 27914 00004C61 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27915                                  	;;lea	bx,[di+16]
 27916                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27917 00004C66 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27918 00004C69 29DE                            SUB     SI,BX                   ; Position in buffer
 27919 00004C6B E8030C                          call	PLACEBUF
 27920                                  	;cmp	si,[es:bp+2]
 27921 00004C6E 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27922 00004C72 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27923                                  ;M039
 27924                                  	; MSDOS 3.3
 27925                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27926                                                                          ;  even though it is MRU.
 27927                                          ; MSDOS 6.0
 27928 00004C74 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27929                                  ;M039					; chucking even though it is MRU.
 27930                                  
 27931                                  RBUFPLACEDC:
 27932 00004C79 F8                              CLC
 27933                                  RBUFPLACED:
 27934 00004C7A 16                      	push	ss
 27935 00004C7B 1F                      	pop	ds
 27936 00004C7C C3                              retn
 27937                                  
 27938                                  ;----------------------------------------------------------------------------
 27939                                  ;
 27940                                  ; Procedure : BUFWRT
 27941                                  ;
 27942                                  ; Do a partial sector write via one of the system buffers
 27943                                  ; ES:BP Points to DPB
 27944                                  ; Carry set if error (currently user FAILed to I 24)
 27945                                  ;
 27946                                  ; DS - set to DOSDATA
 27947                                  ;
 27948                                  ;----------------------------------------------------------------------------
 27949                                  
 27950                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27951                                  	; 20/05/2019 - Retro DOS v4.0
 27952                                  BUFWRT:
 27953                                          ;MOV     AX,[SECPOS]
 27954                                          ; MSDOS 6.0
 27955                                  	;ADD	AX,1            	; Set for next sector
 27956                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27957                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27958                                          ; 24/09/2023
 27959 00004C7D FF06[C405]              	inc	word [SECPOS]
 27960 00004C81 7504                    	jnz	short bufw_secpos
 27961 00004C83 FF06[C605]              	inc	word [SECPOS+2]
 27962                                  bufw_secpos:
 27963 00004C87 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27964 00004C8A 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27965 00004C8E B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27966 00004C90 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27967 00004C92 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27968 00004C94 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27969                                  
 27970                                  	; MSDOS 3.3
 27971                                  	;INC	AX
 27972                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27973                                  
 27974                                  	; 20/05/2019
 27975                                  	; MSDOS 3.3 & MSDOS 6.0
 27976 00004C97 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27977 00004C9B B001                            MOV     AL,1
 27978 00004C9D 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27979                                  _doread:
 27980 00004C9F 30C0                            XOR     AL,AL
 27981                                  NOREAD:
 27982 00004CA1 06                              PUSH	ES
 27983 00004CA2 E863FF                          CALL    BUFSEC
 27984 00004CA5 72A5                    	JC	short BUF_IO_FAIL
 27985 00004CA7 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27986 00004CAB D1E9                            SHR     CX,1
 27987                                  ;M039
 27988                                  	; MSDOS 3.3
 27989                                  	;JNC	short EVENWRT ; 09/09/2018
 27990                                  	;MOVSB
 27991                                  ;EVENWRT:
 27992                                  	;REP	MOVSW
 27993                                  
 27994                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27995                                  ;       DS:SI-> Source within Transfer memory block.
 27996                                  ;       ES:DI-> Destination within Buffer.
 27997                                  
 27998                                  	; MSDOS 6.0
 27999 00004CAD F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28000                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 28001                                  	;rep	movsb                   ;Copy last byte.
 28002                                  	; 16/12/2022
 28003 00004CAF 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28004 00004CB1 A4                      	movsb ; ****
 28005                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28006                                  	;adc	cx,0
 28007                                  	;rep	movsb
 28008                                  ;M039
 28009                                  EVENWRT: ; ****
 28010 00004CB2 07                              POP	ES
 28011                                  
 28012                                  ;hkn; SS override
 28013 00004CB3 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 28014                                  
 28015                                  	; MSDOS 6.0
 28016 00004CB8 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28017                                  					;LB. if already dirty		  ;AN000;
 28018 00004CBC 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 28019 00004CBE E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 28020                                  	
 28021                                  	;or	byte [bx+5],40h
 28022 00004CC1 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28023                                  yesdirty10:
 28024                                  	;;lea	si,[bx+16]
 28025                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28026 00004CC5 8D7714                          LEA     SI,[BX+BUFINSIZ]
 28027 00004CC8 29F7                            SUB     DI,SI                   ; Position in buffer
 28028                                  ;M039
 28029                                  	; MSDOS 3.3
 28030                                  	;MOV	SI,DI
 28031                                  	;MOV	DI,BX
 28032                                  	;call	PLACEBUF
 28033                                  	;;cmp	si,[es:bp+2]
 28034                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28035                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28036                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 28037                                                                          ;  even though it is MRU.
 28038                                  	; MSDOS 6.0
 28039                                  	;cmp	di,[es:bp+2]
 28040 00004CCA 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28041 00004CCE 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 28042 00004CD0 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28043                                  					; chucking even though it is MRU.
 28044                                  ;M039
 28045                                  
 28046                                  WBUFPLACED:
 28047 00004CD5 F8                              CLC
 28048 00004CD6 16                      	push	ss
 28049 00004CD7 1F                      	pop	ds
 28050 00004CD8 C3                              retn
 28051                                  
 28052                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28053                                  ;---------------------------------------------------------------------------
 28054                                  ;
 28055                                  ; Procedure Name : NEXTSEC
 28056                                  ;
 28057                                  ; Compute the next sector to read or write
 28058                                  ; ES:BP Points to DPB
 28059                                  ;
 28060                                  ;---------------------------------------------------------------------------
 28061                                  
 28062                                  NEXTSEC:
 28063 00004CD9 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28064 00004CDE 7426                            JZ	short CLRET
 28065                                  
 28066 00004CE0 A0[7305]                        MOV     AL,[SECCLUSPOS]
 28067 00004CE3 FEC0                            INC     AL
 28068                                  	;cmp	al,[es:bp+4]
 28069 00004CE5 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 28070 00004CE9 7618                            JBE	short SAVPOS
 28071                                  
 28072 00004CEB 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 28073 00004CEF E8B607                          call	IsEOF
 28074 00004CF2 7314                            JAE	short NONEXT
 28075                                  
 28076 00004CF4 E8C807                          call	UNPACK
 28077 00004CF7 720F                            JC	short NONEXT
 28078                                  clusgot:
 28079 00004CF9 893E[BC05]                      MOV     [CLUSNUM],DI
 28080 00004CFD FF06[BA05]                      INC     word [LASTPOS]
 28081 00004D01 B000                            MOV     AL,0
 28082                                  SAVPOS:
 28083 00004D03 A2[7305]                        MOV     [SECCLUSPOS],AL
 28084                                  CLRET:
 28085 00004D06 F8                              CLC
 28086 00004D07 C3                              retn
 28087                                  NONEXT:
 28088 00004D08 F9                              STC
 28089 00004D09 C3                              retn
 28090                                  
 28091                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28092                                  ;----------------------------------------------------------------------------
 28093                                  ;
 28094                                  ; Procedure Name : OPTIMIZE
 28095                                  ;
 28096                                  ; Inputs:
 28097                                  ;       BX = Physical cluster
 28098                                  ;       CX = No. of records
 28099                                  ;       DL = sector within cluster
 28100                                  ;       ES:BP = Base of drive parameters
 28101                                  ;       [NEXTADD] = transfer address
 28102                                  ; Outputs:
 28103                                  ;       AX = No. of records remaining
 28104                                  ;       BX = Transfer address
 28105                                  ;       CX = No. or records to be transferred
 28106                                  ;       DX = Physical sector address            (LOW)
 28107                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 28108                                  ;       DI = Next cluster
 28109                                  ;       [CLUSNUM] = Last cluster accessed
 28110                                  ;       [NEXTADD] updated
 28111                                  ;       Carry set if error (currently user FAILed to I 24)
 28112                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28113                                  ;
 28114                                  ;---------------------------------------------------------------------------
 28115                                  
 28116                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28117                                  OPTIMIZE:
 28118 00004D0A 52                      	PUSH    DX
 28119 00004D0B 53                              PUSH    BX
 28120                                  	;mov	al,[es:bp+4]
 28121 00004D0C 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 28122 00004D10 FEC0                            INC     AL              ; Number of sectors per cluster
 28123 00004D12 88C4                            MOV     AH,AL
 28124 00004D14 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 28125 00004D16 89CA                            MOV     DX,CX
 28126                                  	;MOV	CX,0
 28127                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28128                                  	; 16/12/2022
 28129 00004D18 31C9                    	xor	cx,cx	; sub cx,cx
 28130                                  OPTCLUS:
 28131                                  ; AL has number of sectors available in current cluster
 28132                                  ; AH has number of sectors available in next cluster
 28133                                  ; BX has current physical cluster
 28134                                  ; CX has number of sequential sectors found so far
 28135                                  ; DX has number of sectors left to transfer
 28136                                  ; ES:BP Points to DPB
 28137                                  ; ES:SI has FAT pointer
 28138                                  
 28139                                  do_norm3:
 28140 00004D1A E8A207                          call	UNPACK
 28141 00004D1D 7236                            JC	short OP_ERR
 28142                                  clusgot2:
 28143 00004D1F 00C1                    	ADD	CL,AL
 28144 00004D21 80D500                          ADC     CH,0
 28145 00004D24 39D1                            CMP     CX,DX
 28146 00004D26 7332                            JAE	short BLKDON
 28147 00004D28 88E0                            MOV     AL,AH
 28148 00004D2A 43                              INC     BX
 28149 00004D2B 39DF                            CMP     DI,BX
 28150 00004D2D 74EB                            JZ	short OPTCLUS
 28151 00004D2F 4B                              DEC     BX
 28152                                  FINCLUS:
 28153 00004D30 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 28154 00004D34 29CA                            SUB     DX,CX           ; Number of sectors still needed
 28155 00004D36 52                              PUSH    DX
 28156 00004D37 89C8                            MOV     AX,CX
 28157                                  	;mul	word[ES:BP+2]
 28158 00004D39 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28159                                  				; Number of sectors times sector size
 28160 00004D3D 8B36[B805]                      MOV     SI,[NEXTADD]
 28161 00004D41 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 28162 00004D43 A3[B805]                        MOV     [NEXTADD],AX
 28163 00004D46 58                              POP     AX              ; Number of sectors still needed
 28164 00004D47 5A                              POP     DX              ; Starting cluster
 28165 00004D48 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 28166 00004D4A 011E[BA05]                      ADD     [LASTPOS],BX
 28167 00004D4E 5B                              POP     BX              ; BL = sector position within cluster
 28168 00004D4F E81600                  	call	FIGREC
 28169 00004D52 89F3                            MOV     BX,SI
 28170                                  	; 24/09/2023
 28171                                  	; cf=0 (at the return of FIGREC)
 28172                                  	;CLC
 28173 00004D54 C3                              retn
 28174                                  OP_ERR:
 28175 00004D55 83C404                          ADD     SP,4
 28176 00004D58 F9                      	STC
 28177 00004D59 C3                              retn
 28178                                  BLKDON:
 28179 00004D5A 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 28180 00004D5C 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 28181 00004D5E FECC                            DEC     AH              ; Adjust to mean position within cluster
 28182 00004D60 8826[7305]                      MOV     [SECCLUSPOS],AH
 28183 00004D64 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 28184 00004D66 EBC8                            JMP     SHORT FINCLUS
 28185                                  
 28186                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28187                                  ;---------------------------------------------------------------------------
 28188                                  ;
 28189                                  ; Procedure Name : FIGREC
 28190                                  ;
 28191                                  ; Inputs:
 28192                                  ;       DX = Physical cluster number
 28193                                  ;       BL = Sector position within cluster
 28194                                  ;       ES:BP = Base of drive parameters
 28195                                  ; Outputs:
 28196                                  ;       DX = physical sector number           (LOW)
 28197                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 28198                                  ; No other registers affected.
 28199                                  ;
 28200                                  ;---------------------------------------------------------------------------
 28201                                  
 28202                                  	; 10/06/2019
 28203                                  	; 20/05/2019 - Retro DOS v4.0
 28204                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28205                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28206                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 28207                                  FIGREC:
 28208 00004D68 51                              PUSH    CX
 28209                                  	;mov	cl,[es:bp+5]
 28210 00004D69 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28211 00004D6D 4A                              DEC     DX
 28212 00004D6E 4A                              DEC     DX
 28213                                  
 28214                                  	; MSDOS 3.3
 28215                                  	;SHL	DX,CL
 28216                                  
 28217                                  ;hkn; SS override HIGH_SECTOR
 28218                                  	; MSDOS 6.0
 28219 00004D6F 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28220                                  	; 24/09/2023
 28221 00004D76 30ED                    	xor	ch,ch				;F.C. >32mb
 28222 00004D78 08C9                    	OR	CL,CL				;F.C. >32mb
 28223 00004D7A 740C                    	JZ	short noshift			;F.C. >32mb
 28224 00004D7C 30ED                    	XOR	CH,CH				;F.C. >32mb
 28225                                  rotleft:					;F.C. >32mb
 28226 00004D7E F8                      	CLC					;F.C. >32mb
 28227 00004D7F D1D2                    	RCL	DX,1				;F.C. >32mb
 28228                                  	; 10/06/2019
 28229 00004D81 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28230 00004D86 E2F6                    	LOOP	rotleft				;F.C. >32mb
 28231                                  noshift:
 28232                                  	; MSDOS 3.3 & MSDOS 6.0
 28233 00004D88 08DA                            OR      DL,BL
 28234                                  	;add	dx,[es:bp+0Bh]
 28235 00004D8A 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 28236                                  	; MSDOS 6.0
 28237                                  	; 10/06/2019
 28238                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28239                                  	; 24/09/2023
 28240                                  	; cx=0
 28241 00004D8E 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 28242                                  
 28243                                  	; MSDOS 3.3 & MSDOS 6.0
 28244 00004D93 59                      	POP     CX
 28245                                  figrec_retn:
 28246 00004D94 C3                              retn
 28247                                  
 28248                                  ; 20/05/2019 - Retro DOS v4.0
 28249                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28250                                  
 28251                                  ; 30/07/2018 - Retro DOS v3.0
 28252                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28253                                  
 28254                                  ;Break   <ALLOCATE -- Assign disk space>
 28255                                  ;---------------------------------------------------------------------------
 28256                                  ;
 28257                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28258                                  ;
 28259                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28260                                  ;   FAT-chained onto the end of the existing file.
 28261                                  ;
 28262                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28263                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28264                                  ;   numbered clusters, looking for the necessary free blocks.
 28265                                  ;
 28266                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28267                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28268                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28269                                  ;
 28270                                  ;       If we get to the end of the disk without satisfaction:
 28271                                  ;
 28272                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28273                                  ;               return (insufficient_disk_space)
 28274                                  ;           ELSE
 28275                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28276                                  ;
 28277                                  ;   Note that there is no multitasking interlock. There is no race when
 28278                                  ;   examining the entrys in an in-core FAT block since there will be no
 28279                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28280                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28281                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28282                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28283                                  ;   satisfied. We can't allow another activation to think this cluster is
 28284                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28285                                  ;   allocated.
 28286                                  ;
 28287                                  ;   Note that when we run out of space this algorithem will scan from
 28288                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28289                                  ;   redundantly scanning the later part of the disk. This only happens when
 28290                                  ;   we run out of space, so sue me.
 28291                                  ;
 28292                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28293                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28294                                  ;                                                                          ;
 28295                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28296                                  ;   explanation:
 28297                                  ;
 28298                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28299                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28300                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28301                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28302                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28303                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28304                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28305                                  ;   the
 28306                                  ;           LOOP   findfre         ; alloc more if needed
 28307                                  ;   instruction when the first cluster is allocated to the nul file. The
 28308                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28309                                  ;
 28310                                  ;   This method is obviously useless (because it is non-reentrant) for
 28311                                  ;   multitasking, and will have to be changed. Storing the required value on
 28312                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28313                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28314                                  ;   problems with INT 24 well.
 28315                                  ;
 28316                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28317                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28318                                  ;                                                                          ;
 28319                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28320                                  ;               CX = No. of clusters to allocate
 28321                                  ;               ES:BP = Base of drive parameters
 28322                                  ;               [THISSFT] = Points to SFT
 28323                                  ;
 28324                                  ;       EXIT    'C' set if insufficient space
 28325                                  ;                 [FAILERR] can be tested to see the reason for failure
 28326                                  ;                 CX = max. no. of clusters that could be added to file
 28327                                  ;               'C' clear if space allocated
 28328                                  ;                 BX = First cluster allocated
 28329                                  ;                 FAT is fully updated
 28330                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28331                                  ;
 28332                                  ;       USES    ALL but SI, BP
 28333                                  
 28334                                  ;callmagic  proc near
 28335                                  ;       push    ds                             ;push segment of routine 
 28336                                  ;       push    Offset MagicPatch              ;push offset for routine
 28337                                  ;       retf                                   ;simulate jmp far
 28338                                  ;                                              ;far return address is on
 28339                                  ;                                              ;stack, so far return from
 28340                                  ;                                              ;call will return this routine
 28341                                  ;callmagic  endp
 28342                                  
 28343                                  ALLOCATE:
 28344                                  	; 10/09/2018
 28345                                  ;BEGIN MAGICDRV MODIFICATIONS
 28346                                  ;
 28347                                  ;7/5/92 scottq
 28348                                  ;
 28349                                  ;This is the disk compression patch location which allows
 28350                                  ;the disk compression software to fail allocations if the
 28351                                  ;FAT would allows allocation, but the free space for compressed
 28352                                  ;data would not.
 28353                                  ;        
 28354                                  ;;;	call    far ptr MAGICPATCH
 28355                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28356                                  ;;; but we do know the segment and offset of the routine
 28357                                  ;;; so simulate a far call to dosdata:magicpatch
 28358                                  ;;; note dosassume above, so DS -> dosdata
 28359                                  
 28360                                  	; MSDOS 6.0
 28361                                          ;clc				;clear carry so we fall through
 28362                                  	;				;if no patch is present
 28363                                  	;push	cs			;push segment for far return
 28364                                          ;call	callmagic		;this is a near call
 28365                                          ;jnc	short Regular_Allocate_Path
 28366                                  	;jmp	Disk_Full_Return
 28367                                  
 28368                                  ;Regular_Allocate_Path:
 28369                                  	; 20/05/2019 - Retro DOS v4.0
 28370                                  ;END MAGICDRV MODIFICATIONS
 28371                                  
 28372                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28373                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28374                                  
 28375 00004D95 53                              PUSH    BX                      ; save (bx)
 28376 00004D96 31DB                            XOR     BX,BX
 28377 00004D98 E82407                  	call	UNPACK
 28378 00004D9B 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28379 00004D9F 5B                              POP     BX
 28380 00004DA0 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28381                                  
 28382 00004DA2 51                              PUSH    CX
 28383 00004DA3 53                              PUSH    BX
 28384                                  
 28385 00004DA4 89DA                            MOV     DX,BX
 28386                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28387                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28388 00004DA6 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28389 00004DAA 83FB02                          cmp     bx,2
 28390 00004DAD 7709                            ja	short FINDFRE
 28391                                  
 28392                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28393                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28394                                  
 28395                                  ads1:
 28396                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28397                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28398 00004DAF 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28399 00004DB5 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28400                                                                          ;       cluster examined is 2
 28401                                  
 28402                                  ;   Scanning both forwards and backwards for a free cluster
 28403                                  ;
 28404                                  ;       (BX) = forwards scan pointer
 28405                                  ;       (CX) = clusters remaining to be allocated
 28406                                  ;       (DX) = current last cluster in file
 28407                                  ;       (TOS) = last cluster of file
 28408                                  
 28409                                  FINDFRE:
 28410 00004DB8 43                              INC     BX
 28411                                  	;cmp	bx,[es:bp+0Dh]
 28412 00004DB9 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28413 00004DBD 7757                    	ja	short ads7	; at end of disk
 28414 00004DBF E8FD06                          call	UNPACK          ; check out this cluster
 28415 00004DC2 722F                            jc	short ads4	; FAT error             [INTERR?]
 28416 00004DC4 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28417                                  
 28418                                  ;   Have found a free cluster. Chain it to the file
 28419                                  ;
 28420                                  ;       (BX) = found free cluster #
 28421                                  ;       (DX) = current last cluster in file
 28422                                  
 28423                                  	;;mov	[es:bp+1Ch],bx
 28424                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28425 00004DC6 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28426 00004DCA 92                              xchg    ax,dx           ; save (dx) in ax
 28427 00004DCB BA0100                          mov     dx,1            ; mark this free guy as "1"
 28428 00004DCE E84207                  	call	PACK            ; set special "temporary" mark
 28429 00004DD1 7220                            jc	short ads4	; FAT error             [INTERR?]
 28430                                  	;;cmp	word [es:bp+1Eh],-1
 28431                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28432 00004DD3 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28433 00004DD8 7404                            JZ	short NO_ALLOC	; No
 28434                                  	;;dec	word [es:bp+1Eh]
 28435                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28436 00004DDA 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28437                                  NO_ALLOC:
 28438 00004DDE 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28439 00004DDF 87DA                            XCHG    BX,DX
 28440 00004DE1 89D0                            MOV     AX,DX
 28441 00004DE3 E82D07                  	call	PACK            ; link free cluster onto file
 28442                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28443                                                                  ;    cluster 0 with FIRCLUS value.
 28444 00004DE6 720B                            jc	short ads4	; FAT error [INTERR?]
 28445 00004DE8 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28446 00004DE9 89DA                            mov     dx,bx           ; (dx) = current end of file
 28447 00004DEB E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28448                                  
 28449                                  ;   We've successfully extended the file. Clean up and exit
 28450                                  ;
 28451                                  ;       (BX) = last cluster in file
 28452                                  
 28453 00004DED BAFFFF                          MOV     DX,0FFFFH
 28454 00004DF0 E82007                  	call	PACK            ; mark last cluster EOF
 28455                                  
 28456                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28457                                  ;   2 whole bytes. Hope its worth it...
 28458                                  ;
 28459                                  ;       'C' set if error
 28460                                  ;       calling (BX) and (CX) pushed on stack
 28461                                  
 28462                                  ads4:   
 28463 00004DF3 5B                      	POP     BX
 28464 00004DF4 59                              POP     CX              ; Don't need this stuff since we're successful
 28465 00004DF5 729D                            jc	short figrec_retn
 28466 00004DF7 E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28467                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28468 00004DFA 7298                            jc	short figrec_retn
 28469 00004DFC E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28470 00004DFF 7293                            jc	short figrec_retn
 28471 00004E01 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28472 00004E03 09FF                            OR      DI,DI           ; clear 'C'
 28473 00004E05 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28474                                  
 28475                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28476                                  ;   info
 28477                                  dofastk:
 28478                                  	; 20/05/2019
 28479                                  	; MSDOS 6.0
 28480                                  	;push	dx ; * MSDOS 6.0
 28481                                  	;;mov	dl,[es:bp+0]
 28482                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28483                                  	;mov	dl,[es:bp]
 28484                                  
 28485                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28486                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28487                                  	
 28488                                  	; 16/12/2022
 28489                                  	;push	dx ; *
 28490                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28491                                  	; 15/12/2022
 28492                                  	;mov	dl,[es:bp]
 28493                                  	
 28494                                  	; MSDOS 3.3 & MSDOS 6.0
 28495 00004E07 06                      	PUSH	ES
 28496 00004E08 C43E[9E05]              	LES     DI,[THISSFT]
 28497                                  	;mov	[es:di+0Bh],bx
 28498 00004E0C 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28499                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28500                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28501 00004E10 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28502 00004E14 07                      	POP	ES
 28503                                  	;retn
 28504                                  
 28505                                  	;pop	dx ; * MSDOS 6.0
 28506                                  
 28507                                  	; 16/12/2022
 28508                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28509                                  	;pop	dx ; *
 28510                                  
 28511 00004E15 C3                      	retn	
 28512                                  
 28513                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28514                                  ;   of the disk...
 28515                                  
 28516                                  ads7:   
 28517 00004E16 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28518 00004E1B 7592                    	jnz	short ads1	; start scan from front of disk
 28519                                  
 28520                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28521                                  ;   the space back to the free list and tell the caller how much he could have
 28522                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28523                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28524                                  ;
 28525                                  ;       (CX) = clusters remaining to be allocated
 28526                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28527                                  ;       (TOS+1) = # of clusters wanted to allocate
 28528                                  
 28529 00004E1D 5B                              POP     BX              ; (BX) = last cluster of file
 28530 00004E1E BAFFFF                          MOV     DX,0FFFFH
 28531 00004E21 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28532 00004E24 58                              POP     AX              ; No. of clusters requested
 28533                                                                  ; Don't "retc". We are setting Carry anyway,
 28534                                                                  ;   Alloc failed, so proceed with return CX
 28535                                                                  ;   setup.
 28536 00004E25 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28537 00004E27 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28538                                                                  ;   Alloc failed.
 28539                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28540                                          ; MSDOS 6.0
 28541 00004E2A C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28542 00004E2F F9                              STC
 28543 00004E30 C3                              retn
 28544                                  
 28545                                  ;-----------------------------------------------------------------------
 28546                                  ;
 28547                                  ; Procedure Name : RESTFATBYT
 28548                                  ;
 28549                                  ; SEE ALLOCATE CAVEAT
 28550                                  ;       Carry set if error (currently user FAILed to I 24)
 28551                                  ;-----------------------------------------------------------------------
 28552                                  
 28553                                  RESTFATBYT:
 28554 00004E31 53                              PUSH    BX
 28555 00004E32 52                              PUSH    DX
 28556 00004E33 57                              PUSH    DI
 28557 00004E34 31DB                            XOR     BX,BX
 28558 00004E36 8B16[9605]                      MOV     DX,[FATBYT]
 28559 00004E3A E8D606                  	call	PACK
 28560 00004E3D 5F                              POP     DI
 28561 00004E3E 5A                              POP     DX
 28562 00004E3F 5B                              POP     BX
 28563                                  ; 16/12/2022
 28564                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28565                                  ;RELEASE_flush:
 28566 00004E40 C3                      	retn
 28567                                  
 28568                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28569                                  ;---------------------------------------------------------------------------
 28570                                  ;
 28571                                  ; Procedure Name : RELEASE
 28572                                  ;
 28573                                  ; Inputs:
 28574                                  ;       BX = Cluster in file
 28575                                  ;       ES:BP = Base of drive parameters
 28576                                  ; Function:
 28577                                  ;       Frees cluster chain starting with [BX]
 28578                                  ;       Carry set if error (currently user FAILed to I 24)
 28579                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28580                                  ;
 28581                                  ;-----------------------------------------------------------------------------
 28582                                  
 28583                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28584                                  	; 20/05/2019 - Retro DOS v4.0
 28585                                  RELEASE:
 28586 00004E41 31D2                            XOR     DX,DX
 28587                                  
 28588                                  	;entry	RELBLKS
 28589                                  RELBLKS:
 28590                                  
 28591                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28592                                  ;   and free the rest in the chain.
 28593                                  
 28594 00004E43 E87906                  	call	UNPACK
 28595 00004E46 7224                    	jc	short RELEASE_flush
 28596 00004E48 7422                    	jz	short RELEASE_flush
 28597 00004E4A 89F8                            MOV     AX,DI
 28598 00004E4C 52                              PUSH    DX
 28599 00004E4D E8C306                  	call	PACK
 28600 00004E50 5A                              POP     DX
 28601 00004E51 7219                    	jc	short RELEASE_flush
 28602 00004E53 09D2                            OR      DX,DX
 28603 00004E55 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28604                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28605                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28606 00004E57 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28607 00004E5C 7404                            JZ	short NO_DEALLOC	; No
 28608 00004E5E 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28609                                  NO_DEALLOC:
 28610 00004E62 89C3                            MOV     BX,AX
 28611 00004E64 48                              dec     ax              ; check for "1"
 28612 00004E65 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28613 00004E67 E83E06                  	call	IsEOF
 28614 00004E6A 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28615                                  
 28616                                  	; 16/12/2022
 28617                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28618                                  ;%if 0
 28619                                  RELEASE_flush:
 28620                                  	; MSDOS 6.0
 28621 00004E6C 268A4600                	mov	al,[es:bp]
 28622                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28623 00004E70 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28624 00004E71 51                      	push	cx		;  them to be preserved.
 28625 00004E72 06                      	push	es
 28626 00004E73 55                      	push	bp
 28627 00004E74 E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28628 00004E77 5D                      	pop	bp
 28629 00004E78 07                      	pop	es
 28630 00004E79 59                      	pop	cx
 28631 00004E7A 5E                      	pop	si
 28632                                  ;%endif
 28633                                  RET12:
 28634 00004E7B C3                      	retn
 28635                                  
 28636                                  ;Break	<GETEOF -- Find the end of a file>
 28637                                  ;------------------------------------------------------------------------
 28638                                  ;
 28639                                  ; Procedure Name : GETEOF
 28640                                  ;
 28641                                  ; Inputs:
 28642                                  ;       ES:BP Points to DPB
 28643                                  ;       BX = Cluster in a file
 28644                                  ;       DS = CS
 28645                                  ; Outputs:
 28646                                  ;       BX = Last cluster in the file
 28647                                  ;       Carry set if error (currently user FAILed to I 24)
 28648                                  ; DI destroyed. No other registers affected.
 28649                                  ;
 28650                                  ;--------------------------------------------------------------------------
 28651                                  
 28652                                  GETEOF:
 28653 00004E7C E84006                  	call	UNPACK
 28654 00004E7F 72FA                            jc	short RET12
 28655 00004E81 53                              PUSH    BX
 28656 00004E82 89FB                            MOV     BX,DI
 28657 00004E84 E82106                  	call	IsEOF
 28658 00004E87 5B                              POP     BX
 28659 00004E88 73F1                            JAE     short RET12
 28660 00004E8A 89FB                            MOV     BX,DI
 28661 00004E8C EBEE                            JMP     short GETEOF
 28662                                  
 28663                                  ;============================================================================
 28664                                  ; FCB.ASM, MSDOS 6.0, 1991
 28665                                  ;============================================================================
 28666                                  ; 30/07/2018 - Retro DOS v3.0
 28667                                  ; 20/05/2019 - Retro DOS v4.0
 28668                                  
 28669                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28670                                  ;	NAME	FCB
 28671                                  
 28672                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28673                                  ;		  filename characters
 28674                                  ;
 28675                                  ;	MakeFcb
 28676                                  ;	NameTrans
 28677                                  ;	PATHCHRCMP
 28678                                  ;	GetLet
 28679                                  ;	UCase
 28680                                  ;	GetLet3
 28681                                  ;	GetCharType
 28682                                  ;	TESTKANJ
 28683                                  ;	NORMSCAN
 28684                                  ;	DELIM
 28685                                  ;
 28686                                  ;	Revision history:
 28687                                  ;
 28688                                  ;		A000  version 4.00  Jan. 1988
 28689                                  ;	
 28690                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28691                                  
 28692                                  TableLook	EQU	-1
 28693                                  
 28694                                  SCANSEPARATOR	EQU	1
 28695                                  DRVBIT		EQU	2
 28696                                  NAMBIT		EQU	4
 28697                                  EXTBIT		EQU	8
 28698                                  
 28699                                  ;----------------------------------------------------------------------------
 28700                                  ;
 28701                                  ; Procedure : MakeFcb
 28702                                  ;
 28703                                  ;----------------------------------------------------------------------------
 28704                                  
 28705                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28706                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28707                                  MAKEFCB:
 28708                                  ;hkn; SS override
 28709 00004E8E 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28710 00004E94 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28711                                  	;test	al,2
 28712 00004E96 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28713 00004E98 7504                    	JNZ	short DEFDRV
 28714 00004E9A 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28715                                  DEFDRV:
 28716 00004E9E 47                      	INC	DI
 28717 00004E9F B90800                  	MOV	CX,8
 28718                                  	;test	al,4
 28719 00004EA2 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28720 00004EA4 93                      	XCHG	AX,BX		; Save bits in BX
 28721 00004EA5 B020                    	MOV	AL," "
 28722 00004EA7 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28723 00004EA9 01CF                    	ADD	DI,CX
 28724 00004EAB 31C9                    	XOR	CX,CX		; Don't fill any
 28725                                  FILLB:
 28726 00004EAD F3AA                    	REP	STOSB
 28727 00004EAF B103                    	MOV	CL,3
 28728 00004EB1 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28729 00004EB4 7404                    	JZ	short FILLB2
 28730 00004EB6 01CF                    	ADD	DI,CX
 28731 00004EB8 31C9                    	XOR	CX,CX
 28732                                  FILLB2:
 28733 00004EBA F3AA                    	REP	STOSB
 28734 00004EBC 91                      	XCHG	AX,CX		; Put zero in AX
 28735 00004EBD AB                      	STOSW
 28736 00004EBE AB                      	STOSW			; Initialize two words after to zero
 28737 00004EBF 83EF10                  	SUB	DI,16		; Point back at start
 28738                                  	;test	bl,1
 28739 00004EC2 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28740 00004EC5 7409                    	JZ	short SKPSPC
 28741 00004EC7 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28742 00004ECA E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28743 00004ECD 7504                    	JNZ	short NOSCAN
 28744 00004ECF 46                      	INC	SI		; Skip over the delimiter
 28745                                  SKPSPC:
 28746 00004ED0 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28747                                  NOSCAN:
 28748 00004ED3 E8F000                  	CALL	GETLET
 28749 00004ED6 761E                    	JBE	short NODRV	; Quit if termination character
 28750 00004ED8 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28751 00004EDB 7519                    	JNZ	short NODRV
 28752 00004EDD 46                      	INC	SI		; Skip over colon
 28753 00004EDE 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28754 00004EE0 760F                    	JBE	short BADDRV	; Drive letter out of range
 28755                                  
 28756 00004EE2 50                      	PUSH	AX
 28757 00004EE3 E8161B                  	call	GetVisDrv
 28758 00004EE6 58                      	POP	AX
 28759 00004EE7 730A                    	JNC	short HAVDRV
 28760                                  
 28761                                  	; 20/05/2019 - Retro DOS v4.0
 28762                                  	; MSDOS 6.0
 28763                                  ;hkn; SS override
 28764 00004EE9 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28765                                  					; if not FAT drive ;AN000;
 28766 00004EEF 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28767                                  BADDRV:
 28768 00004EF1 B2FF                    	MOV	DL,-1
 28769                                  HAVDRV:
 28770 00004EF3 AA                      	STOSB			; Put drive specifier in first byte
 28771 00004EF4 46                      	INC	SI
 28772 00004EF5 4F                      	DEC	DI		; Counteract next two instructions
 28773                                  NODRV:
 28774 00004EF6 4E                      	DEC	SI		; Back up
 28775 00004EF7 47                      	INC	DI		; Skip drive byte
 28776                                  
 28777                                  	;entry	NORMSCAN
 28778                                  NORMSCAN:
 28779 00004EF8 B90800                  	MOV	CX,8
 28780 00004EFB E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28781 00004EFE 803C2E                  	CMP	BYTE [SI],"."
 28782 00004F01 7510                    	JNZ	short NODOT
 28783 00004F03 46                      	INC	SI		; Skip over dot if present
 28784                                  
 28785                                  	; 24/09/2023
 28786                                  	;mov	cx,3
 28787 00004F04 B103                    	mov	cl,3	; ch=0
 28788                                  
 28789                                  	; MSDOS 6.0
 28790                                  ;hkn; SS override
 28791                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28792                                  	; 10/06/2019
 28793 00004F06 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28794 00004F0C 7402                    	JZ	short VOLOK				;AN000;
 28795 00004F0E A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28796                                  	; 24/09/2023
 28797                                  	;MOV	CX,2					;AN000;
 28798 00004F0F 49                      	dec	cx  ; cx=2
 28799                                  	;JMP	SHORT contvol				;AN000;
 28800                                  VOLOK:
 28801                                  	;MOV	CX,3		; Get 3-letter extension
 28802                                  contvol:
 28803 00004F10 E81300                  	CALL	MUSTGETWORD
 28804                                  NODOT:
 28805 00004F13 88D0                    	MOV	AL,DL
 28806                                  
 28807                                  	; MSDOS 6.0
 28808                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28809                                  	; 18/12/2022
 28810 00004F15 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28811                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28812                                  
 28813 00004F1B C3                      	retn
 28814                                  
 28815                                  NONAM:
 28816 00004F1C 01CF                    	ADD	DI,CX
 28817 00004F1E 4E                      	DEC	SI
 28818 00004F1F C3                      	retn
 28819                                  
 28820                                  GETWORD:
 28821 00004F20 E8A300                  	CALL	GETLET		
 28822 00004F23 76F7                    	JBE	short NONAM	; Exit if invalid character
 28823 00004F25 4E                      	DEC	SI
 28824                                  
 28825                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28826                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28827                                  
 28828                                  MUSTGETWORD:
 28829 00004F26 E89D00                  	CALL	GETLET
 28830                                  
 28831                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28832                                  
 28833                                  ;IF NOT TABLELOOK
 28834                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28835                                  ;ENDIF
 28836 00004F29 750C                    	JNZ	short MustCheckCX
 28837                                  
 28838                                  ;hkn; SS override
 28839 00004F2B 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28840 00004F31 7419                    	JZ	short FILLNAM
 28841 00004F33 3C20                    	CMP	AL," "
 28842 00004F35 7515                    	JNZ	short FILLNAM
 28843                                  
 28844                                  MustCheckCX:
 28845 00004F37 E3ED                    	JCXZ	MUSTGETWORD
 28846 00004F39 49                      	DEC	CX
 28847 00004F3A 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28848 00004F3C 7504                    	JNZ	short NOSTAR
 28849 00004F3E B03F                    	MOV	AL,"?"
 28850 00004F40 F3AA                    	REP	STOSB
 28851                                  NOSTAR:
 28852 00004F42 AA                      	STOSB
 28853 00004F43 3C3F                    	CMP	AL,"?"
 28854 00004F45 75DF                    	JNZ	short MUSTGETWORD
 28855 00004F47 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28856 00004F4A EBDA                    	JMP	short MUSTGETWORD
 28857                                  FILLNAM:
 28858 00004F4C B020                    	MOV	AL," "
 28859 00004F4E F3AA                    	REP	STOSB
 28860 00004F50 4E                      	DEC	SI
 28861 00004F51 C3                      	retn
 28862                                  
 28863                                  SCANB:
 28864 00004F52 AC                      	LODSB
 28865 00004F53 E8A100                  	CALL	SPCHK
 28866 00004F56 74FA                    	JZ	short SCANB
 28867 00004F58 4E                      	DEC	SI
 28868                                  scanb_retn:
 28869 00004F59 C3                      	retn
 28870                                  
 28871                                  ;----------------------------------------------------------------------------
 28872                                  ;
 28873                                  ; Procedure Name : NameTrans
 28874                                  ;
 28875                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28876                                  ; allow spaces in pathnames
 28877                                  ;
 28878                                  ;   Inputs:	DS:SI points to start of path element
 28879                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28880                                  ;		ES = DOSGroup
 28881                                  ;		DS:SI advanced after name
 28882                                  ;   Registers modified: DI,AX,DX,CX
 28883                                  ;
 28884                                  ;----------------------------------------------------------------------------
 28885                                  
 28886                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28887                                  	; 20/05/2019 - Retro DOS v4.0
 28888                                  NameTrans:
 28889                                  ;hkn; SS override
 28890 00004F5A 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28891 00004F60 16                      	push	ss
 28892 00004F61 07                      	pop	es
 28893                                  
 28894                                  ;hkn; NAME1 is in DOSDATA
 28895 00004F62 BF[4B05]                	MOV	DI,NAME1
 28896 00004F65 57                      	PUSH	DI
 28897 00004F66 B82020                  	MOV	AX,'  '
 28898 00004F69 B90500                  	MOV	CX,5
 28899 00004F6C AA                      	STOSB
 28900 00004F6D F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28901 00004F6F 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28902 00004F71 88C2                    	MOV	DL,AL
 28903 00004F73 AA                      	STOSB
 28904 00004F74 5F                      	POP	DI
 28905                                  
 28906 00004F75 E880FF                  	CALL	NORMSCAN
 28907                                  
 28908                                  ;hkn; SS override for NAME1
 28909 00004F78 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28910 00004F7E 75D9                    	jnz	short scanb_retn
 28911 00004F80 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28912 00004F86 C3                      	retn
 28913                                  
 28914                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28915                                  ;============================================================================
 28916                                  
 28917                                  ; 20/05/2019 - Retro DOS v4.0
 28918                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28919                                  
 28920                                  ;If TableLook
 28921                                  
 28922                                  ;hkn; Table	SEGMENT
 28923                                  ;	PUBLIC	CharType
 28924                                  ;----------------------------------------------------------------------------
 28925                                  
 28926                                  ; Character type table for file name scanning
 28927                                  ; Table provides a mapping of characters to validity bits.
 28928                                  ; Four bits are provided for each character. Values 7Dh and above
 28929                                  ; have all bits set, so that part of the table is chopped off, and
 28930                                  ; the translation routine is responsible for screening these values.
 28931                                  ; The bit values are defined in DOSSYM.INC
 28932                                  
 28933                                  ;	      ; ^A and NUL
 28934                                  ;CharType:
 28935                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28936                                  ;	      ; ^C and ^B
 28937                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28938                                  ;	      ; ^E and ^D
 28939                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28940                                  ;	      ; ^G and ^F
 28941                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28942                                  ;	      ; TAB and BS
 28943                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28944                                  ;	      ; ^K and ^J
 28945                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28946                                  ;	      ; ^M and ^L
 28947                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28948                                  ;	      ; ^O and ^N
 28949                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28950                                  ;	      ; ^Q and ^P
 28951                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28952                                  ;	      ; ^S and ^R
 28953                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28954                                  ;	      ; ^U and ^T
 28955                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28956                                  ;	      ; ^W and ^V
 28957                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28958                                  ;	      ; ^Y and ^X
 28959                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28960                                  ;	      ; ESC and ^Z
 28961                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28962                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28964                                  ;	      ; ^_ and ^^
 28965                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28966                                  ;	      ; ! and SPACE
 28967                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28968                                  ;	      ; # and "
 28969                                  ;	 db   LOW (NOT FFCB+FCHK)
 28970                                  ;	      ; $ - )
 28971                                  ;	 db   3 dup (0FFh)
 28972                                  ;	      ; + and *
 28973                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28974                                  ;	      ; - and '
 28975                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28976                                  ;	      ; / and .
 28977                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28978                                  ;	      ; 0 - 9
 28979                                  ;	 db   5 dup (0FFh)
 28980                                  ;	      ; ; and :
 28981                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28982                                  ;	      ; = and <
 28983                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28984                                  ;	      ; ? and >
 28985                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28986                                  ;	      ; A - Z
 28987                                  ;	 db   13 dup (0FFh)
 28988                                  ;	      ; \ and [
 28989                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28990                                  ;	      ; ^ and ]
 28991                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28992                                  ;	      ; _ - {
 28993                                  ;	 db   15 dup (0FFh)
 28994                                  ;	      ; } and |
 28995                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28996                                  
 28997                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28998                                  ;					; character in the table
 28999                                  
 29000                                  ;FCHK	equ 1		; normal name char, no chks needed
 29001                                  ;FDELIM	equ 2		; is a delimiter
 29002                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29003                                  ;FFCB	equ 8		; is valid in an FCB
 29004                                  
 29005                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29006                                  ;----------------------------------------------------------------------------
 29007                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29008                                  
 29009                                  CharType: ; 63 bytes
 29010 00004F87 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29011 00004F8F 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29012 00004F97 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29013 00004F9F FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29014 00004FA7 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29015 00004FAF FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29016 00004FB7 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29017 00004FBF FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29018                                  
 29019                                  CharType_last equ ($ - CharType) * 2
 29020                                  
 29021                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29022                                  ;----------------------------------------------------------------------------
 29023                                  ;CharType:
 29024                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29025                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29026                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29027                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29028                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29029                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29030                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29031                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29032                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29033                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29034                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29035                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29036                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29037                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29038                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29039                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29040                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29041                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29042                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29043                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29044                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29045                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29046                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29047                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29048                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29049                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29050                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29051                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29052                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29053                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29054                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29055                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29056                                  
 29057                                  ;hkn; Table	ENDS
 29058                                  
 29059                                  ;ENDIF
 29060                                  
 29061                                  ; 20/05/2019 - Retro DOS v4.0
 29062                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29063                                  
 29064                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29065                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29066                                  
 29067                                  ;----------------------------------------------------------------------------
 29068                                  ;
 29069                                  ; Procedure Names : GetLet, UCase, GetLet3
 29070                                  ;
 29071                                  ; These routines take a character, convert it to upper case, and check
 29072                                  ; for delimiters.  Three different entry points:
 29073                                  ;	GetLet -  DS:[SI] = character to convert
 29074                                  ;	UCase  -  AL = character to convert
 29075                                  ;	GetLet3 - AL = character
 29076                                  ;		  [BX] = translation table to use
 29077                                  ;
 29078                                  ;	Exit (in all cases) : AL = upper case character
 29079                                  ;			      CY set if char is control char other than TAB
 29080                                  ;			      ZF set if char is a delimiter
 29081                                  ;	Uses : AX, flags
 29082                                  ;
 29083                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29084                                  ; inline version.  Return with carry set is only possible in the inline
 29085                                  ; version. The table lookup version is the one in use.
 29086                                  ;
 29087                                  ;----------------------------------------------------------------------------
 29088                                  
 29089                                  ; This entry point has character at [SI]
 29090                                  
 29091                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29092                                  GETLET:	
 29093 00004FC6 AC                      	LODSB
 29094                                  
 29095                                  ; This entry point has character in AL
 29096                                  
 29097                                  	;entry	UCase
 29098                                  UCase:	
 29099                                  	; 09/08/2018
 29100                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29101                                  _UCase:
 29102 00004FC7 53                      	PUSH	BX
 29103 00004FC8 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29104                                  
 29105                                  ; Convert the character in AL to upper case
 29106                                  
 29107                                  gl_0:
 29108 00004FCB 3C61                    	CMP	AL,"a"
 29109 00004FCD 7214                    	JB	short gl_2	; Already upper case, go check type
 29110 00004FCF 3C7A                    	CMP	AL,"z"
 29111 00004FD1 7702                    	JA	short gl_1
 29112 00004FD3 2C20                    	SUB	AL,20H		; Convert to upper case
 29113                                  
 29114                                  ; Map European character to upper case
 29115                                  
 29116                                  gl_1:
 29117 00004FD5 3C80                    	CMP	AL,80H
 29118 00004FD7 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29119 00004FD9 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29120                                  
 29121                                  	; M048 - Start 
 29122                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29123                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29124                                  	; preserve it.
 29125                                  
 29126                                  	; 09/08/2018 - Retro DOS v3.0
 29127                                  	; MSDOS 3.3
 29128                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29129                                  	;CS	XLAT
 29130                                  
 29131                                  	; 20/05/2019 - Retro DOS v4.0
 29132                                  
 29133                                  	; MSDOS 6.0
 29134 00004FDB 1E                      	push	ds
 29135                                  	;getdseg <ds>
 29136 00004FDC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29137 00004FE1 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29138 00004FE2 1F                      	pop	ds
 29139                                  
 29140                                  	; M048 - End
 29141                                  
 29142                                  ; Now check the type
 29143                                  
 29144                                  ;If TableLook
 29145                                  gl_2:
 29146                                  	; 20/05/2019 - Retro DOS v4.0
 29147 00004FE3 50                      	PUSH	AX
 29148                                  
 29149                                  	; MSDOS 3.3
 29150                                  	;mov	bx,CharType
 29151                                  	;; 09/08/2018
 29152                                  	;;xlat	byte [cs:bx]
 29153                                  	;cs	xlat	
 29154                                  	
 29155                                  	; MSDOS 6.0
 29156 00004FE4 E81800                  	CALL	GetCharType	; returns type flags in AL
 29157                                  	
 29158                                  	;test	al,1	
 29159 00004FE7 A801                    	TEST	AL,FCHK 	; test for normal character
 29160 00004FE9 58                      	POP	AX
 29161 00004FEA 5B                      	POP	BX
 29162 00004FEB C3                      	RETN
 29163                                  
 29164                                  ; This entry has character in AL and lookup table in BX
 29165                                  
 29166                                  	; MSDOS 6.0
 29167                                  ;	;entry GetLet3
 29168                                  GETLET3: ; 10/08/2018
 29169 00004FEC 53                      	PUSH	BX
 29170 00004FED EBDC                    	JMP	short gl_0
 29171                                  ;ELSE
 29172                                  ;
 29173                                  ;gl_2:
 29174                                  ;	POP	BX
 29175                                  ;	CMP	AL,"."
 29176                                  ;	retz
 29177                                  ;	CMP	AL,'"'
 29178                                  ;	retz
 29179                                  ;	CALL	PATHCHRCMP
 29180                                  ;	retz
 29181                                  ;	CMP	AL,"["
 29182                                  ;	retz
 29183                                  ;	CMP	AL,"]"
 29184                                  ;	retz
 29185                                  ;ENDIF
 29186                                  
 29187                                  ;---------------------------------------------------------------------
 29188                                  ;
 29189                                  ; DELIM - check if character is a delimiter
 29190                                  ;	Entry : AX = character to check
 29191                                  ;	Exit  : ZF set if character is not a delimiter
 29192                                  ;	Uses  : Flags
 29193                                  ;
 29194                                  ;--------------------------------------------------------------------
 29195                                  
 29196                                  	;entry	DELIM
 29197                                  DELIM:
 29198                                  ;IF TableLook
 29199                                  	; 20/05/2019 - Retro DOS v4.0
 29200 00004FEF 50                      	PUSH	AX
 29201                                  
 29202                                  	; MSDOS 3.3
 29203                                  	;push	bx
 29204                                  	;mov	bx,CharType
 29205                                  	;;09/08/2018
 29206                                  	;;xlat	byte [cs:bx]
 29207                                  	;cs	xlat
 29208                                  	;pop	bx
 29209                                  
 29210                                  	; MSDOS 6.0
 29211 00004FF0 E80C00                  	CALL	GetCharType
 29212                                  	
 29213                                  	;test	al,2
 29214 00004FF3 A802                    	TEST	AL,FDELIM
 29215 00004FF5 58                      	POP	AX
 29216 00004FF6 C3                      	RETN
 29217                                  ;ELSE
 29218                                  ;	CMP	AL,":"
 29219                                  ;	retz
 29220                                  ;
 29221                                  ;	CMP	AL,"<"
 29222                                  ;	retz
 29223                                  ;	CMP	AL,"|"
 29224                                  ;	retz
 29225                                  ;	CMP	AL,">"
 29226                                  ;	retz
 29227                                  ;
 29228                                  ;	CMP	AL,"+"
 29229                                  ;	retz
 29230                                  ;	CMP	AL,"="
 29231                                  ;	retz
 29232                                  ;	CMP	AL,";"
 29233                                  ;	retz
 29234                                  ;	CMP	AL,","
 29235                                  ;	retz
 29236                                  ;ENDIF
 29237                                  
 29238                                  ;-------------------------------------------------------------------------
 29239                                  ;
 29240                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29241                                  ;	Entry : AL = character to check
 29242                                  ;	Exit  : ZF set if character is a space
 29243                                  ;	Uses  : flags
 29244                                  ;
 29245                                  ;-------------------------------------------------------------------------
 29246                                  
 29247                                  	;entry SPCHK
 29248                                  SPCHK:
 29249                                  ;IF TableLook
 29250                                  	; 20/05/2019 - Retro DOS v4.0
 29251 00004FF7 50                      	PUSH	AX
 29252                                  
 29253                                  	; MSDOS 3.3
 29254                                  	;push	bx
 29255                                  	;mov	bx,CharType
 29256                                  	;; 09/08/2018
 29257                                  	;;xlat	byte [cs:bx]
 29258                                  	;cs	xlat
 29259                                  	;pop	bx
 29260                                  
 29261                                  	; MSDOS 6.0
 29262 00004FF8 E80400                  	CALL	GetCharType
 29263                                  	
 29264                                  	;test	al,4
 29265 00004FFB A804                    	TEST	AL,FSPCHK
 29266 00004FFD 58                      	POP	AX
 29267 00004FFE C3                      	RETN
 29268                                  ;ELSE
 29269                                  ;	CMP	AL,9		; Filter out tabs too
 29270                                  ;	retz
 29271                                  ;; WARNING! " " MUST be the last compare
 29272                                  ;	CMP	AL," "
 29273                                  ;	return
 29274                                  ;ENDIF
 29275                                  
 29276                                  ;-------------------------------------------------------------------------
 29277                                  ;
 29278                                  ;  GetCharType - return flag bits indicating character type
 29279                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29280                                  ;	defined above at label CharType.
 29281                                  ;
 29282                                  ;	Entry : AL = character to return type flags for
 29283                                  ;	Exit  : AL = type flags
 29284                                  ;	Uses  : AL, flags
 29285                                  ;
 29286                                  ;-------------------------------------------------------------------------
 29287                                  
 29288                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29289                                  
 29290                                  	; 20/05/2019 - Retro DOS v4.0
 29291                                  	; MSDOS 6.0
 29292                                  GetCharType:
 29293                                  	;cmp	al,7Eh
 29294 00004FFF 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29295 00005001 7316                    	jae	short gct_90		; return standard value
 29296                                  
 29297 00005003 53                      	push	bx
 29298 00005004 BB[874F]                	mov	bx,CharType		; load lookup table
 29299 00005007 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29300                                  	;xlat	cs:[bx] 		; get flags
 29301 00005009 2ED7                    	cs	xlat	
 29302 0000500B 5B                      	pop	bx
 29303                                  
 29304                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29305                                  ; we have to shift the flags down to the low nibble
 29306                                  
 29307 0000500C 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29308                                  
 29309 0000500E D0E8                    	shr	al,1			; we want high nibble, shift it down
 29310 00005010 D0E8                    	shr	al,1
 29311 00005012 D0E8                    	shr	al,1
 29312 00005014 D0E8                    	shr	al,1
 29313                                  gct_80:
 29314 00005016 240F                    	and	al,0Fh			; clear the unused nibble
 29315 00005018 C3                      	retn
 29316                                  gct_90:
 29317 00005019 B00F                    	mov	al,0Fh			; set all flags
 29318 0000501B C3                      	retn
 29319                                  
 29320                                  ;----------------------------------------------------------------------------
 29321                                  ;
 29322                                  ; Procedure : PATHCHRCMP
 29323                                  ;
 29324                                  ;----------------------------------------------------------------------------
 29325                                  
 29326                                  PATHCHRCMP:
 29327 0000501C 3C2F                    	CMP	AL,'/'
 29328 0000501E 7606                    	JBE	short PathRet
 29329 00005020 3C5C                    	CMP	AL,'\'
 29330 00005022 C3                      	retn
 29331                                  GotFor:
 29332 00005023 B05C                    	MOV	AL,'\'
 29333 00005025 C3                      	retn
 29334                                  PathRet:
 29335 00005026 74FB                    	JZ	short GotFor
 29336 00005028 C3                      	retn
 29337                                  
 29338                                  ;============================================================================
 29339                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29340                                  ;============================================================================
 29341                                  ; 30/07/2018 - Retro DOS v3.0
 29342                                  ; 29/04/2019 - Retro DOS v4.0
 29343                                  
 29344                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29345                                  
 29346                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29347                                  
 29348                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29349                                  ;	NAME	IBMCTRLC
 29350                                  
 29351                                  ;**	Low level routines for detecting special characters on CON input,
 29352                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29353                                  ;	process termination code, and the INT 0 divide overflow handler.
 29354                                  ;
 29355                                  ;	FATAL
 29356                                  ;	FATAL1
 29357                                  ;	reset_environment
 29358                                  ;	DSKSTATCHK
 29359                                  ;	SPOOLINT
 29360                                  ;	STATCHK
 29361                                  ;	CNTCHAND
 29362                                  ;	DIVOV
 29363                                  ;	CHARHARD
 29364                                  ;	HardErr
 29365                                  ;
 29366                                  ;	Revision history:
 29367                                  ;
 29368                                  ;	    AN000	version 4.0   Jan 1988
 29369                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29370                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29371                                  ;
 29372                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29373                                  ;	      flags register. In order to return to user normally DOS used to
 29374                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29375                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29376                                  ;
 29377                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29378                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29379                                  ;	      charhard.
 29380                                  
 29381                                  ; 29/04/2019 - Retro DOS v4.0
 29382                                  	; MSDOS 6.0
 29383                                  ;		public	LowInt23Addr		
 29384                                  LowInt23Addr: ;	LABEL	DWORD
 29385 00005029 [CD10]0000              	DW	LowInt23, 0
 29386                                  
 29387                                  ;		public	LowInt24Addr
 29388                                  LowInt24Addr: ;	LABEL	DWORD
 29389 0000502D [E110]0000              	DW	LowInt24, 0
 29390                                  
 29391                                  ;		public	LowInt28Addr
 29392                                  LowInt28Addr: ;	LABEL	DWORD
 29393 00005031 [F510]0000              	DW	LowInt28, 0
 29394                                  
 29395                                  ;Break	<Checks for ^C in CON I/O>
 29396                                  
 29397                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29398                                  ; 05/05/2019 - Retro DOS v4.0
 29399                                  
 29400                                  ;---------------------------------------------------------------------------
 29401                                  ;
 29402                                  ; Procedure Name : DSKSTATCHK
 29403                                  ;
 29404                                  ; Check for ^C if only one level in
 29405                                  ;
 29406                                  ;---------------------------------------------------------------------------
 29407                                  
 29408                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29409                                  
 29410                                  DSKSTATCHK:        
 29411                                  	;CMP	BYTE [INDOS],1
 29412 00005035 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29413                                  	;retnz			; Do NOTHING
 29414                                  	; 16/12/2022
 29415 0000503B 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29416                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29417                                  	;jz	short _RET37 ; dskstatchk1
 29418                                  	;retn
 29419                                  ;_RET37:
 29420                                  ;dskstatchk1:
 29421 0000503D 51                      	PUSH    CX
 29422 0000503E 06                              PUSH    ES
 29423 0000503F 53                              PUSH    BX
 29424 00005040 1E                              PUSH    DS
 29425 00005041 56                              PUSH    SI
 29426                                          
 29427                                  	;PUSH	CS
 29428                                          ;POP	ES
 29429                                          ;PUSH	CS
 29430                                          ;POP	DS
 29431                                  
 29432 00005042 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29433 00005044 8EC3                    	MOV	ES,BX		; for deviocall2
 29434 00005046 8EDB                    	MOV	DS,BX
 29435                                  
 29436                                  	; 16/12/2022
 29437                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29438                                  
 29439                                  	; 05/05/2019
 29440                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29441                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29442                                  	;mov	word [ss:DSKSTST],0
 29443                                  
 29444                                  	; 16/12/2022
 29445                                  	; 25/06/2019
 29446 00005048 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29447 0000504D C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29448 00005052 C706[9503]0000          	mov	word [DSKSTST],0
 29449                                  
 29450 00005058 BB[9203]                        MOV     BX,DSKSTCALL
 29451                                  
 29452                                  	;LDS	SI,[ss:BCON]
 29453                                          ; 25/062019
 29454 0000505B C536[3200]              	lds	si,[BCON]
 29455                                  
 29456                                  ; 16/12/2022
 29457                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29458                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29459                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29460                                  ;	mov	word [ss:DSKSTST],0
 29461                                  ;	mov	bx,DSKSTCALL
 29462                                  ;	lds	si,[ss:BCON]
 29463                                  
 29464 0000505F E890F5                  	CALL	DEVIOCALL2
 29465                                   	; 15/03/2018
 29466                                  	;;test	word [ss:DSKSTST],200h
 29467                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29468                                  	; 05/05/2019
 29469 00005062 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29470 00005068 7408                    	jz	short _GotCh		; No characters available
 29471                                  
 29472 0000506A 30C0                            XOR     AL,AL                   ; Set zero
 29473                                  RET36:
 29474 0000506C 5E                              POP     SI
 29475 0000506D 1F                              POP     DS
 29476 0000506E 5B                              POP     BX
 29477 0000506F 07                              POP     ES
 29478 00005070 59                              POP     CX
 29479                                  	; 16/12/2022
 29480                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29481                                  _RET37:
 29482 00005071 C3                              RETN
 29483                                  
 29484                                  _GotCh:
 29485 00005072 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29486                                  
 29487 00005076 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29488 00005078 75F2                            JNZ     SHORT RET36
 29489 0000507A 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29490 00005080 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29491 00005086 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29492                                  	; 09/09/2018
 29493 0000508B 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29494 00005092 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29495 00005099 E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29496 0000509C 5E                              POP     SI
 29497 0000509D 1F                              POP     DS
 29498 0000509E 5B                              POP     BX                      ; Clean stack
 29499 0000509F 07                              POP     ES
 29500 000050A0 59                              POP     CX
 29501 000050A1 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29502                                  
 29503                                  	; 05/05/2019
 29504                                  NOSTOP:
 29505                                  	; MSDOS 6.0
 29506 000050A4 3C10                    	CMP	AL,"P"-"@"
 29507 000050A6 7509                    	JNZ	short check_next
 29508                                  				    	; SS override
 29509 000050A8 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29510 000050AE 7405                    	JZ	short INCHKJ		; no
 29511                                  check_end:	; 24/09/2023
 29512 000050B0 C3                      	retn
 29513                                  check_next:
 29514                                  	;IF	NOT TOGLPRN
 29515                                  	;CMP	AL,"N"-"@"
 29516                                  	;JZ	short INCHKJ
 29517                                  	;ENDIF
 29518                                  
 29519 000050B1 3C03                    	CMP	AL,"C"-"@"
 29520                                  	; 24/09/2023
 29521                                  	;JZ	short INCHKJ
 29522                                  ;check_end:
 29523                                  	;retn
 29524 000050B3 75FB                    	jnz	short check_end
 29525                                  
 29526                                  	; 24/09/2023
 29527                                  	; 08/09/2018
 29528                                  INCHKJ:	; 10/08/2018
 29529 000050B5 E9A500                  	jmp	INCHK
 29530                                  
 29531                                  	; MSDOS 3.3
 29532                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29533                                          ;JZ	short INCHKJ
 29534                                  
 29535                                  	; 15/04/2018
 29536                                          ;;IF	NOT TOGLPRN
 29537                                          ;CMP	AL,"N"-"@"
 29538                                          ;JZ	SHORT INCHKJ
 29539                                          ;;ENDIF
 29540                                  	
 29541                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29542                                          ;JZ	short INCHKJ
 29543                                  	;RETN
 29544                                  
 29545                                  ;	; 08/09/2018
 29546                                  ;INCHKJ:; 10/08/2018
 29547                                  ;	JMP	INCHK
 29548                                  
 29549                                  ;----------------------------------------------------------------------------
 29550                                  ;
 29551                                  ; Procedure Name : SpoolInt
 29552                                  ;
 29553                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29554                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29555                                  ; the middle of an INT 24.
 29556                                  ;
 29557                                  ;----------------------------------------------------------------------------
 29558                                  
 29559                                  SPOOLINT:
 29560 000050B8 9C                              PUSHF
 29561                                  	; 15/03/2018
 29562 000050B9 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29563 000050BF 7423                            JZ      SHORT POPFRET
 29564 000050C1 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29565 000050C7 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29566                                  
 29567                                  	; 30/07/2018
 29568                                  
 29569                                  	; Note that we are going to allow an external program to issue system 
 29570                                  	; calls at this time. We MUST preserve IdleInt across this.
 29571                                  
 29572 000050C9 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29573                                  
 29574                                  	; 05/05/2019 - Retro DOS v4.0
 29575                                   
 29576                                  	; MSDOS 6.0
 29577 000050CE 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29578 000050D4 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29579 000050D6 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29580 000050D8 EB05                    	jmp	short spool_ret_addr
 29581                                  
 29582                                  do_low_int28:
 29583                                  	;call	far [ss:LowInt28Addr]
 29584 000050DA 2EFF1E[3150]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29585                                  
 29586                                  spool_ret_addr:
 29587                                  	;INT	int_spooler		; INT 28h
 29588                                  
 29589 000050DF 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29590                                  POPFRET:
 29591 000050E4 9D                              POPF
 29592                                  _RET18:  
 29593 000050E5 C3                      	RETN
 29594                                  
 29595                                  ; 05/05/2019 - Retro DOS v4.0
 29596                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29597                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29598                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29599                                  
 29600                                  ;----------------------------------------------------------------------------
 29601                                  ;
 29602                                  ; Procedure Name : STATCHK
 29603                                  ;
 29604                                  ;----------------------------------------------------------------------------
 29605                                  
 29606                                  STATCHK:
 29607 000050E6 E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29608                                                                          ; input redirection
 29609 000050E9 53                              PUSH    BX
 29610 000050EA 31DB                            XOR     BX,BX
 29611 000050EC E8EBE4                          CALL	GET_IO_SFT
 29612 000050EF 5B                              POP     BX
 29613 000050F0 72F3                            JC      SHORT _RET18
 29614                                  
 29615 000050F2 B401                            MOV     AH,1
 29616 000050F4 E826F3                          CALL	IOFUNC
 29617 000050F7 74BF                            JZ      SHORT SPOOLINT
 29618 000050F9 3C13                            CMP     AL,'S'-'@'
 29619 000050FB 75A7                            JNZ     SHORT NOSTOP
 29620                                  
 29621                                  	; 05/05/2019
 29622                                  	; MSDOS 6.0			; SS override
 29623 000050FD 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29624 00005103 75AB                    	JNZ	short check_end		; AN000; yes
 29625                                  
 29626 00005105 30E4                            XOR     AH,AH
 29627 00005107 E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29628 0000510A EB4A                            JMP     SHORT PAUSOSTRT
 29629                                  PRINTOFF:
 29630                                  PRINTON:
 29631 0000510C 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29632                                  
 29633                                  	; 30/07/2018 - Retro DOS v3.0
 29634 00005111 53                      	PUSH	BX
 29635 00005112 BB0400                  	MOV	BX,4
 29636 00005115 E8C2E4                  	call	GET_IO_SFT
 29637 00005118 5B                      	POP	BX
 29638 00005119 72CA                    	jc	short _RET18
 29639 0000511B 06                      	PUSH	ES
 29640 0000511C 57                      	PUSH	DI
 29641 0000511D 1E                      	PUSH	DS
 29642 0000511E 07                      	POP	ES
 29643 0000511F 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29644                                  	;test	word [es:di+5],800h
 29645                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29646                                  	; 05/05/2019
 29647 00005121 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29648 00005126 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29649                                  
 29650                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29651                                  					; See if allowed
 29652 00005128 50                      	push	ax
 29653 00005129 B82611                  	mov	ax,1126h
 29654 0000512C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29655                                  			; Return: CF set on error, AX = error code
 29656                                  			; STACK unchanged
 29657 0000512E 58                      	pop	ax
 29658                                  
 29659 0000512F 730F                    	JNC	short NORM_PR 		; Echo is OK
 29660                                  
 29661                                  					; SS override
 29662 00005131 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29663                                  
 29664                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29665                                  
 29666 00005137 50                      	push    ax
 29667 00005138 B82411                  	mov     ax,1124h
 29668 0000513B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29669                                  			; ES:DI -> SFT, SS = DOS CS
 29670 0000513D 58                      	pop     ax
 29671                                  
 29672 0000513E EB10                    	JMP	SHORT RETP6
 29673                                  NORM_PR:
 29674 00005140 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29675 00005146 7505                    	JNZ	short PRNOPN
 29676 00005148 E82BF4                  	call	DEV_CLOSE_SFT
 29677 0000514B EB03                    	JMP	SHORT RETP6
 29678                                  PRNOPN:
 29679 0000514D E81EF4                  	call	DEV_OPEN_SFT
 29680                                  RETP6:
 29681 00005150 5F                      	POP	DI
 29682 00005151 07                      	POP	ES
 29683                                  STATCHK_RETN:
 29684 00005152 C3                              RETN
 29685                                  PAUSOLP:
 29686 00005153 E862FF                          CALL    SPOOLINT
 29687                                  PAUSOSTRT:
 29688 00005156 B401                            MOV     AH,1
 29689 00005158 E8C2F2                          CALL	IOFUNC
 29690 0000515B 74F6                            JZ      SHORT PAUSOLP
 29691                                  INCHK:
 29692 0000515D 53                              PUSH    BX
 29693 0000515E 31DB                            XOR     BX,BX
 29694 00005160 E877E4                          CALL	GET_IO_SFT
 29695 00005163 5B                              POP     BX
 29696 00005164 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29697 00005166 30E4                            XOR     AH,AH
 29698 00005168 E8B2F2                          CALL	IOFUNC
 29699                                  	; 30/07/2018
 29700                                  	; MSDOS 3.3
 29701                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29702                                          ;JNZ	SHORT NOPRINT
 29703                                  
 29704                                  	;cmp	byte [SS:SCAN_FLAG],0
 29705                                  	;JZ	SHORT PRINTON	
 29706                                  	;mov	byte [ss:SCAN_FLAG],0
 29707                                  
 29708                                  	; 05/05/2019
 29709                                  	; MSDOS 6.0
 29710 0000516B 3C10                    	CMP	AL,"P"-"@"
 29711                                  	;;;;  7/14/86	ALT_Q key fix
 29712 0000516D 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29713                                  ;NOPRINT:	
 29714                                  	;IF	NOT TOGLPRN
 29715                                  	;CMP	AL,"N"-"@"
 29716                                  	;JZ	short PRINTOFF
 29717                                  	;ENDIF
 29718 0000516F 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29719                                  	;retnz
 29720 00005171 75DF                    	jnz	short STATCHK_RETN
 29721                                  
 29722                                  	; !! NOTE: FALL THROUGH !!
 29723                                  
 29724                                  ;---------------------------------------------------------------------------
 29725                                  ;
 29726                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29727                                  ;
 29728                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29729                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29730                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29731                                  ; processing to continue; 2) the original interrupt return address to the code
 29732                                  ; that performed the function call in the first place. If the user CTRL-C
 29733                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29734                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29735                                  ; is simulated.
 29736                                  ;
 29737                                  ;---------------------------------------------------------------------------
 29738                                  
 29739                                  CNTCHAND:
 29740                                  	; MSDOS 6.0			; SS override
 29741                                  					; AN002; from RAWOUT
 29742                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29743                                  	;JNZ	short around_deadlock 	; AN002;
 29744                                  
 29745                                  	; 05/05/2019 - Retro DOS v4.0
 29746                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29747 00005173 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29748 00005179 7508                    	JNZ	short around_deadlock 	; AN002;
 29749                                  
 29750 0000517B B003                            MOV     AL,3			; Display "^C"
 29751 0000517D E877C5                          CALL	BUFOUT
 29752 00005180 E815C4                          CALL	CRLF
 29753                                  around_deadlock:
 29754 00005183 16                              PUSH    SS
 29755 00005184 1F                              POP     DS
 29756 00005185 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29757 0000518A 7403                            JZ      SHORT NOSWAP
 29758 0000518C E8B5E0                          CALL	SWAPBACK
 29759                                  NOSWAP:
 29760 0000518F FA                      	CLI				; Prepare to play with stack
 29761 00005190 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29762 00005194 8B26[8405]              	MOV	SP,[USER_SP]
 29763 00005198 E8B4B2                          CALL	restore_world       ; User registers now restored
 29764                                  
 29765                                  	; 30/07/2018 - Retro DOS v3.0 
 29766                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29767                                          ; 14/03/2018 - Retro DOS v2.0
 29768                                  	;MOV	BYTE [CS:INDOS],0	
 29769                                          ;MOV	BYTE [CS:ERRORMODE],0
 29770                                          ;MOV	[CS:ConC_Spsave],SP
 29771                                  	;clc	;30/07/2018
 29772                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29773                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29774                                  			; Return: return via RETF 2 with CF set
 29775                                  			; DOS will abort program with errorlevel 0
 29776                                  			; else
 29777                                  			; interrupted DOS call continues
 29778                                  
 29779                                  	; 05/05/2019 - Retro DOS v4.0
 29780                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29781                                  
 29782                                  	; CS was used to address these variables. We have to use DOSDATA
 29783                                  	
 29784 0000519B 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29785                                  			; (pop es, after 'call restore_world')	
 29786 0000519C 1E                      	push	ds
 29787                                  	;getdseg <ds>			; ds -> dosdata
 29788 0000519D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29789 000051A2 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29790 000051A7 C606[2003]00            	mov	byte [ERRORMODE],0
 29791 000051AC 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29792                                  	; User SP has changed because of push. Adjust for it
 29793 000051B0 8306[3203]02            	add	word [ConC_Spsave],2
 29794                                  
 29795 000051B5 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29796 000051BA 1F                       	pop	ds	; restore ds
 29797 000051BB 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29798 000051BD F8                      	CLC				
 29799 000051BE CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29800 000051C0 EB06                    	jmp	short ctrlc_ret_addr
 29801                                  
 29802                                  	; 05/05/2019
 29803                                  do_low_int23:
 29804 000051C2 F8                      	clc
 29805 000051C3 2EFF1E[2950]            	call	far [cs:LowInt23Addr]	
 29806                                  
 29807                                  	; 30/07/2018 
 29808                                  
 29809                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29810                                  
 29811                                  ; The user has returned to us. The circumstances we allow are:
 29812                                  ;
 29813                                  ;   IRET	We retry the operation by redispatching the system call
 29814                                  ;   CLC/RETF	POP the stack and retry
 29815                                  ;   ... 	Exit the current process with ^C exit
 29816                                  ;
 29817                                  ; User's may RETURN to us and leave interrupts on. 
 29818                                  ; Turn 'em off just to be sure
 29819                                  
 29820                                  ctrlc_ret_addr: ; 05/05/2019
 29821                                  
 29822 000051C8 FA                      	CLI
 29823                                  
 29824                                  	; MSDOS 3.3 
 29825                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29826                                  	;PUSHF				; and the flags (maybe new call)
 29827                                  	;POP	AX
 29828                                  
 29829                                  	; 05/05/2019
 29830                                  	; MSDOS 6.0
 29831                                  
 29832                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29833                                  
 29834 000051C9 50                      	push	ax
 29835 000051CA 8CD8                    	mov	ax,ds
 29836                                  	;getdseg <ds>			; ds -> dosdata
 29837 000051CC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29838 000051D1 A3[0A0D]                	mov	[TEMPSEG],ax
 29839 000051D4 58                      	pop	ax
 29840 000051D5 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29841 000051D8 9C                      	pushf				; and the flags (maybe new call)
 29842 000051D9 58                      	pop	ax
 29843                                  
 29844                                  ; See if the input stack is identical to the output stack
 29845                                  
 29846                                  	; MSDOS 3.3
 29847                                  	;CMP	SP,[CS:ConC_Spsave]
 29848                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29849                                  
 29850                                  	; MSDOS 6.0
 29851 000051DA 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29852 000051DE 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29853                                  
 29854                                  ; Repeat the operation by redispatching the system call.
 29855                                  
 29856                                  ctrlc_repeat:
 29857                                  	; MSDOS 3.3
 29858                                  	;MOV	AX,[CS:USER_IN_AX]
 29859                                  	; 05/05/2019
 29860                                  	; MSDOS 6.0
 29861 000051E0 A1[3A03]                	mov	ax,[USER_IN_AX]
 29862 000051E3 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29863                                  	; MSDOS 3.3 & MSDOS 6.0 
 29864                                  	;transfer COMMAND
 29865                                  COMMANDJ:
 29866 000051E7 E91DB1                  	JMP	COMMAND
 29867                                  
 29868                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29869                                  ; RETF'd leaving some flags on the stack and examine the input
 29870                                  
 29871                                  ctrlc_try_new:
 29872 000051EA 83C402                  	ADD	SP,2			; pop those flags
 29873                                  	;;test	ax,1
 29874                                  	;TEST	AX,f_Carry		; did he return with carry?
 29875 000051ED A801                    	test	al,f_Carry ; test al,1
 29876 000051EF 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29877                                  
 29878                                  	; MSDOS 6.0
 29879 000051F1 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29880                                  
 29881                                  	; Well...  time to abort the user.  
 29882                                  	; Signal a ^C exit and use the EXIT system call..
 29883                                  
 29884                                  ctrlc_abort:
 29885                                  	; MSDOS 3.3
 29886                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29887                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29888                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29889                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29890                                  	;;JMP	SHORT COMMANDJ
 29891                                  	;JMP	COMMAND
 29892                                  
 29893                                  	; 05/05/2019 - Retro DOS v4.0
 29894                                  	; MSDOS 6.0
 29895 000051F5 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29896 000051F8 1E                      	push	ds
 29897                                  	;getdseg <ds>			; ds -> dosdata
 29898 000051F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29899 000051FE C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29900 00005203 1F                      	pop	ds
 29901                                  	;transfer COMMAND		; give up by faking $EXIT
 29902 00005204 EBE1                    	JMP	SHORT COMMANDJ
 29903                                  	;JMP	COMMAND
 29904                                  
 29905                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29906                                  ;----------------------------------------------------------------------------
 29907                                  ;
 29908                                  ; Procedure Name : DIVOV
 29909                                  ;
 29910                                  ; Default handler for division overflow trap
 29911                                  ;
 29912                                  ;----------------------------------------------------------------------------
 29913                                  
 29914                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29915                                  DIVOV: 
 29916                                  	; 05/05/2019 - Retro DOS v4.0
 29917                                  	; 30/07/2018
 29918                                  	; 07/07/2018 - Retro DOS v3.0
 29919 00005206 BE[A209]                	mov	si,DIVMES
 29920 00005209 2E8B1E[B509]            	mov	bx,[cs:DivMesLen]
 29921                                  	;mov	ax,cs
 29922                                  	;mov	ss,ax
 29923                                  	; 05/05/2019
 29924                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29925 0000520E 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29926 00005213 BC[A007]                	mov     sp,AUXSTACK
 29927                                  	;call	RealDivOv ; MSDOS 3.3
 29928 00005216 E80200                  	call	_OUTMES ; MSDOS 6.0
 29929 00005219 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29930                                  
 29931                                  ; 30/07/2018
 29932                                  
 29933                                  ; MSDOS 6.0
 29934                                  ;---------------------------------------------------------------------------
 29935                                  ;
 29936                                  ; Procedure Name : OutMes
 29937                                  ;
 29938                                  ;
 29939                                  ; OutMes: perform message output
 29940                                  ; Inputs:   SS:SI points to message
 29941                                  ;	    BX has message length
 29942                                  ; Outputs:  message to BCON
 29943                                  ;
 29944                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29945                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29946                                  ;NB. This procedure is called only from DIVOV. -SR
 29947                                  ;
 29948                                  ;---------------------------------------------------------------------------
 29949                                  
 29950                                  ;MSDOS 3.3
 29951                                  ;---------------------------------------------------------------------------
 29952                                  ; RealDivOv: perform actual divide overflow stuff.
 29953                                  ; Inputs:   none
 29954                                  ; Outputs:  message to BCON
 29955                                  ;---------------------------------------------------------------------------
 29956                                  
 29957                                  	; 05/05/2019 - Retro DOS v4.0
 29958                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29959                                  
 29960                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29961                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29962                                  
 29963                                  ;---------------------------------------------------------------------------
 29964                                  ;
 29965                                  ; Procedure Name : OutMes
 29966                                  ;
 29967                                  ; OutMes: perform message output
 29968                                  ; Inputs:   SS:SI points to message
 29969                                  ;	    BX has message length
 29970                                  ; Outputs:  message to BCON
 29971                                  ;
 29972                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29973                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29974                                  ;NB. This procedure is called only from DIVOV. -SR
 29975                                  ;
 29976                                  ;---------------------------------------------------------------------------
 29977                                  
 29978                                  	; 30/07/2018
 29979                                  	; MSDOS 6.0
 29980                                  _OUTMES:
 29981                                  	; MSDOS 3.3
 29982                                  ;RealDivOv:
 29983                                  	; 07/07/2018 - Retro DOS v3.0
 29984                                          ;Context ES
 29985 0000521B 16                      	push	ss ; 05/05/2019
 29986                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29987 0000521C 07                      	POP	ES
 29988                                          ;Context DS
 29989 0000521D 16                      	push	ss ; 05/05/2019	
 29990                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29991 0000521E 1F                      	POP	DS
 29992 0000521F C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29993 00005224 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29994 00005229 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29995                                  	; BX = [DivMesLen] = 19
 29996 0000522F 891E[A403]                      MOV     [DSKSTCNT],BX
 29997 00005233 BB[9203]                        MOV     BX,DSKSTCALL
 29998 00005236 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29999                                  	; 08/09/2018
 30000                                  	;mov	[DEVIOBUF_PTR],si
 30001                                  	; MSDOS 6.0
 30002                                  					; CS is used for string, fill in 
 30003                                  					; segment address 
 30004 0000523A 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30005                                  
 30006 0000523E C536[3200]                      LDS     SI,[BCON]
 30007 00005242 E8ADF3                          CALL	DEVIOCALL2
 30008                                  
 30009                                  	;; 14/03/2018
 30010                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30011                                  	;; 08/09/2018
 30012                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30013                                          ;MOV	WORD [CS:DSKSTCNT],1
 30014                                          
 30015                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30016                                  
 30017                                  	; ES still points to DOSDATA. ES is
 30018                                  					; not destroyed by deviocall2. So use
 30019                                  					; ES override.
 30020                                  
 30021 00005245 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30022 0000524C 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30023                                  
 30024 00005253 C3                      	RETN
 30025                                  
 30026                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30027                                  ;---------------------------------------------------------------------------
 30028                                  ;
 30029                                  ; Procedure Name : CHARHARD
 30030                                  ;
 30031                                  ;
 30032                                  ; Character device error handler
 30033                                  ; Same function as HARDERR
 30034                                  ;
 30035                                  ;---------------------------------------------------------------------------
 30036                                  
 30037                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30038                                  CHARHARD:
 30039                                  	; 05/05/2019 - Retro DOS v4.0
 30040                                  	; 30/07/2018
 30041                                  	; 08/07/2018 - Retro DOS v3.0
 30042                                  
 30043                                  	; MSDOS 6.0
 30044                                  		   			; M024 - start
 30045 00005254 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30046                                  	;jne	short @f		; Y: allow fail
 30047 0000525A 750B                    	jne	short chard1
 30048                                  
 30049 0000525C 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30050                                  
 30051 0000525F 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30052 00005265 7503                    	jnz	short ctrlp		; Y: 
 30053                                  ;@@:
 30054                                  chard1:					; M024 - end
 30055                                  	; MSDOS 6.0 & MSDOS 3.3
 30056                                  
 30057                                  ; Character device error handler
 30058                                  ; Same function as HARDERR
 30059                                  
 30060                                  	;or	ah,38h
 30061 00005267 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30062                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30063 0000526A 368826[4B03]            	mov	[SS:ALLOWED],ah
 30064                                  
 30065                                  	; 15/03/2018
 30066 0000526F 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30067 00005274 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30068 00005279 56                              PUSH    SI
 30069                                  	;and	di,0FFh
 30070 0000527A 81E7FF00                        AND     DI,STECODE
 30071 0000527E 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30072 00005280 E86400                          CALL    FATALC
 30073 00005283 5E                              POP     SI
 30074                                  	;return
 30075 00005284 C3                              RETN
 30076                                  
 30077                                  ;---------------------------------------------------------------------------
 30078                                  ;
 30079                                  ; Procedure Name : HardErr
 30080                                  ;
 30081                                  ; Hard disk error handler. Entry conditions:
 30082                                  ;	DS:BX = Original disk transfer address
 30083                                  ;	DX = Original logical sector number
 30084                                  ;	CX = Number of sectors to go (first one gave the error)
 30085                                  ;	AX = Hardware error code
 30086                                  ;	DI = Original sector transfer count	
 30087                                  ;	ES:BP = Base of drive parameters
 30088                                  ;	[READOP] = 0 for read, 1 for write
 30089                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30090                                  ; Output:
 30091                                  ;	[FAILERR] will be set if user responded FAIL
 30092                                  ;
 30093                                  ;--------------------------------------------------------------------------
 30094                                  
 30095                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30096                                  HARDERR:
 30097                                  	; 05/05/2019 - Retro DOS v4.0
 30098                                  	; 30/07/2018
 30099                                  	; 08/07/2018 - Retro DOS v3.0
 30100 00005285 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 30101                                          ;and	di,0FFh
 30102 00005286 81E7FF00                	AND     DI,STECODE              ; And off status bits
 30103                                          ;CMP	DI,WRECODE		; Write Protect Error?
 30104                                  	;cmp	di,0
 30105 0000528A 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30106 0000528D 750A                            JNZ     short NOSETWRPERR
 30107 0000528F 50                              PUSH    AX
 30108                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30109                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30110                                          ;;MOV	AL,[ES:BP+0]
 30111                                  	; 15/12/2022
 30112 00005290 268A4600                	mov	al,[ES:BP]
 30113                                          	; 15/03/2018
 30114 00005294 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 30115 00005298 58                              POP     AX
 30116                                  NOSETWRPERR:
 30117 00005299 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 30118 0000529B 01C2                            ADD     DX,AX                   ; First sector number to retry
 30119 0000529D 52                              PUSH    DX
 30120                                  	; 08/07/2018
 30121                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30122 0000529E 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30123 000052A2 5A                              POP     DX
 30124 000052A3 01C3                            ADD     BX,AX                   ; First address for retry
 30125 000052A5 30E4                            XOR     AH,AH                   ; Flag disk section in error
 30126                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 30127 000052A7 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30128 000052AB 721A                            JB      SHORT ERRINT
 30129 000052AD FEC4                            INC     AH                      ; Flag for FAT
 30130                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30131                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 30132 000052AF 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30133 000052B3 7308                    	JAE	short TESTDIR 		; No
 30134                                  		 ; Err in FAT must force recomp of freespace
 30135                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30136                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30137 000052B5 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30138 000052BB EB0A                    	JMP	SHORT ERRINT
 30139                                  TESTDIR:
 30140 000052BD FEC4                            INC     AH
 30141                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 30142 000052BF 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 30143 000052C3 7202                            JB      SHORT ERRINT
 30144 000052C5 FEC4                            INC     AH                      ; Must be in data area
 30145                                  ERRINT:
 30146 000052C7 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 30147 000052C9 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 30148                                  
 30149                                  	; 15/08/2018
 30150                                  					; SS override for allowed and EXITHOLD
 30151 000052CE 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30152                                  
 30153                                          ;entry   FATAL
 30154                                  FATAL:
 30155                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30156                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30157                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 30158                                  	; 15/12/2022
 30159 000052D3 268A4600                	MOV	AL,[ES:BP]        
 30160                                  
 30161                                  	;entry   FATAL1
 30162                                  FATAL1:  
 30163                                  	; 15/03/2018      
 30164 000052D7 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 30165 000052DC 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 30166                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30167                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30168 000052E1 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30169 000052E5 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 30170                                  
 30171                                  	; DI has the INT-24-style extended error. We now map the error code 
 30172                                  	; for this into the normalized get extended error set by using the 
 30173                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 30174                                  	; the device returned codes and leave all others beyond the look up 
 30175                                  	; table alone.
 30176                                  
 30177                                  	; 08/07/2018 - Retro DOS v3.0
 30178                                  FATALC:
 30179 000052E7 E89701                  	call	SET_I24_EXTENDED_ERROR
 30180                                  	;cmp	di,0Ch
 30181 000052EA 83FF0C                  	CMP	DI,error_I24_gen_failure
 30182 000052ED 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30183 000052EF BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30184                                  					;  Only come via GetExtendedError
 30185                                  ;** ----------------------------------------------------------------
 30186                                  ;
 30187                                  ; Entry point used by REDIRector on Network I 24 errors.
 30188                                  ;
 30189                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30190                                  ;
 30191                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30192                                  ;     EXITHOLD set for restore of ES:BP.
 30193                                  ; ------------------------------------------------------------------
 30194                                  	;entry	NET_I24_ENTRY
 30195                                  NET_I24_ENTRY:
 30196                                  GOT_RIGHT_CODE:
 30197 000052F2 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30198 000052F8 7404                            JZ	SHORT NoSetFail
 30199 000052FA B003                    	MOV	AL,3
 30200 000052FC EB6C                    	JMP	short FailRet
 30201                                  NoSetFail:
 30202 000052FE 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 30203 00005303 16                              PUSH	SS
 30204 00005304 07                              POP	ES
 30205                                      
 30206                                  	; Wango!!! We may need to free some user state info... In 
 30207                                  	; particular, we may have locked down a JFN for a user and he may 
 30208                                  	; NEVER return to us. Thus,we need to free it here and then 
 30209                                  	; reallocate it when we come back.
 30210                                  
 30211 00005305 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30212 0000530B 740C                    	JZ	short _NoFree
 30213 0000530D 1E                      	push	ds
 30214 0000530E 56                      	push	si
 30215 0000530F 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30216 00005314 C604FF                  	MOV	BYTE [SI],0FFH
 30217 00005317 5E                      	pop	si
 30218 00005318 1F                      	pop	ds
 30219                                  
 30220                                  _NoFree:
 30221 00005319 FA                      	CLI
 30222                                  					; Prepare to play with stack
 30223 0000531A 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30224 0000531F 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 30225                                  
 30226                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30227                                  
 30228                                  	;; Extended Open hooks
 30229                                  					; AN000;IFS.I24 error disabled
 30230                                  	;test	byte [ss:EXTOPEN_ON],2
 30231 00005324 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 30232 0000532A 7404                    	JZ	short i24yes		; AN000;IFS.no
 30233                                  faili24:				; AN000;
 30234 0000532C B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30235 0000532E EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30236                                  i24yes: 				; AN000;
 30237                                  	;; Extended Open hooks
 30238                                  
 30239 00005330 368E16[8605]                    MOV     SS,[SS:USER_SS]
 30240 00005335 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 30241                                  
 30242                                  	;;int	24h	
 30243                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 30244                                  					; must preserve ES
 30245                                  	; 05/05/2019
 30246 0000533A 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 30247 00005340 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30248 00005342 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30249                                  					; must preserve ES
 30250 00005344 EB05                    	jmp	short criterr_ret_addr
 30251                                  
 30252                                  do_low_int24:
 30253                                  	; 05/05/2019
 30254                                  	; MSDOS 6.0
 30255 00005346 2EFF1E[2D50]            	call    far [cs:LowInt24Addr]
 30256                                  criterr_ret_addr:
 30257 0000534B 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 30258 00005350 268C16[8605]                    MOV     [ES:USER_SS],SS
 30259 00005355 8CC5                            MOV     BP,ES
 30260 00005357 8ED5                            MOV     SS,BP
 30261                                  passi24:
 30262 00005359 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 30263 0000535E 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 30264 00005363 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 30265 00005369 FB                              STI
 30266                                  FailRet:
 30267 0000536A 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 30268                                  	
 30269                                  	; 08/07/2018
 30270                                  
 30271                                  	; Triage the user's reply.
 30272                                  
 30273 0000536F 3C01                    	CMP	AL,1
 30274 00005371 723D                    	JB	short CheckIgnore	; 0 => ignore
 30275 00005373 7445                    	JZ	short CheckRetry	; 1 => retry
 30276 00005375 3C03                    	CMP	AL,3			; 3 => fail
 30277 00005377 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 30278                                  
 30279                                  	; The reply was fail. See if we are allowed to fail.
 30280                                  
 30281                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 30282                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30283                                  	;test	byte [ss:ALLOWED],8
 30284 00005379 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30285 0000537F 7443                    	jz	short DoAbort	; No, do abort
 30286                                  DoFail:
 30287 00005381 B003                    	MOV	AL,3		; just in case...
 30288                                  				; AN000;EO. I24 error disabled
 30289                                  	; 05/05/2019
 30290                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30291 00005383 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30292 00005389 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30293                                  	
 30294 0000538B 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30295                                  CleanUp:
 30296 00005390 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30297 00005396 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30298                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30299                                  	;jnz	short CleanUp2
 30300                                  	;retn
 30301                                  	; 17/12/2022
 30302 0000539C 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30303                                  CleanUp2:
 30304 0000539E 1E                      	push	ds
 30305 0000539F 56                      	push	si
 30306 000053A0 50                      	push	ax
 30307 000053A1 36A1[AA05]              	MOV	AX,[ss:SFN]
 30308 000053A5 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30309 000053AA 8804                    	MOV	[SI],AL
 30310 000053AC 58                      	pop	ax
 30311 000053AD 5E                      	pop	si
 30312 000053AE 1F                      	pop	ds
 30313                                  Cleanup_retn:
 30314 000053AF C3                      	retn
 30315                                  
 30316                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30317                                  
 30318                                  CheckIgnore:
 30319                                  	;test	byte [ss:ALLOWED],20h
 30320 000053B0 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30321 000053B6 74C9                    	jz	short DoFail			 ; No, do fail
 30322 000053B8 EBD6                    	jmp	short CleanUp
 30323                                  
 30324                                  	; The reply was RETRY. See if we are allowed to retry.
 30325                                  
 30326                                  CheckRetry:
 30327                                  	;test	byte [ss:ALLOWED],10h
 30328 000053BA 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30329 000053C0 74BF                    	jz	short DoFail			; No, do fail
 30330 000053C2 EBCC                    	JMP	short CleanUp
 30331                                  
 30332                                  	; The reply was ABORT.
 30333                                  DoAbort:
 30334 000053C4 16                      	push	ss
 30335 000053C5 1F                      	pop	ds
 30336                                  
 30337 000053C6 803E[5703]00            	CMP	byte [CONSWAP],0
 30338 000053CB 7403                    	JZ	short NOSWAP2
 30339 000053CD E874DE                  	call	SWAPBACK
 30340                                  NOSWAP2:
 30341                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30342                                  	; turn this abort into a fail.
 30343                                  
 30344                                  	;test	[fAborting],0FFh
 30345                                  	;jnz	short DoFail
 30346                                  
 30347 000053D0 803E[5903]00            	cmp	byte [fAborting],0
 30348 000053D5 75AA                    	JNZ	short DoFail
 30349                                  
 30350                                  	; Set return code
 30351                                  
 30352 000053D7 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30353 000053DC 30C0                    	XOR	AL,AL
 30354                                  
 30355                                  	; we are truly aborting the process. Go restore information from 
 30356                                  	; the PDB as necessary.
 30357                                  
 30358 000053DE E9850D                  	jmp	exit_inner
 30359                                  
 30360                                  ;** --------------------------------------------------------------------------
 30361                                  ;
 30362                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30363                                  ; different, then an old-style return is performed. If they are the same,
 30364                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30365                                  ; the source of the terminate addresses.
 30366                                  ;
 30367                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30368                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30369                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30370                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30371                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30372                                  ; operation. In essence, we dis-allow the abort response.
 30373                                  ;
 30374                                  ; output:   none.
 30375                                  ; ----------------------------------------------------------------------------
 30376                                  
 30377                                  	;entry	reset_environment
 30378                                  	
 30379                                  reset_environment:
 30380                                  	; 30/07/2018 - Retro DOS v3.0
 30381                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30382                                  
 30383                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30384                                  
 30385 000053E1 1E                      	PUSH	DS			; save PDB of process
 30386                                  
 30387                                  	; There are no critical sections in force. Although we may enter 
 30388                                  	; here with critical sections locked down, they are no longer 
 30389                                  	; relevant. We may safely free all allocated resources.
 30390                                  
 30391 000053E2 B482                    	MOV	AH,82h
 30392                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30393                                  	;int	2Ah 	
 30394 000053E4 CD2A                    	INT	int_IBM
 30395                                  
 30396                                  					; SS override
 30397 000053E6 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30398                                  
 30399                                  					; DOS 4.00 doesn't need it
 30400                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30401                                  					; Allow REDIR to clear some stuff
 30402                                  					; On process exit.
 30403 000053EC B82211                  	mov     ax, 1122h
 30404 000053EF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30405                                  			; SS = DOS CS
 30406                                  	;mov	al,22h	
 30407 000053F1 B022                    	MOV	AL,int_terminate
 30408 000053F3 E8A3BA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30409                                  
 30410 000053F6 59                      	POP	CX			; get ThisPDB
 30411 000053F7 06                      	push	es
 30412 000053F8 53                      	push	bx			; save return address
 30413                                  
 30414 000053F9 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30415 000053FE 8EDB                    	MOV	DS,BX
 30416 00005400 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30417                                  
 30418                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30419                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30420                                  	; is not Exit_keep_process
 30421                                  	
 30422 00005403 39D8                    	CMP	AX,BX
 30423 00005405 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30424 00005407 39CB                    	CMP	BX,CX
 30425 00005409 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30426 0000540B 50                      	PUSH	AX			; save parent
 30427                                  
 30428                                  					; SS override
 30429                                  	;cmp	byte [SS:EXIT_TYPE],3
 30430 0000540C 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30431 00005412 7406                    	JZ	short reset_to_parent 	; keeping this process
 30432                                  
 30433                                  	; We are truly removing a process. Free all allocation blocks 
 30434                                  	; belonging to this PDB
 30435                                  
 30436                                  	;invoke	arena_free_process
 30437 00005414 E8870D                  	call	arena_free_process
 30438                                  
 30439                                  	; Kill off remainder of this process. Close file handles and signal 
 30440                                  	; to relevant network folks that this process is dead. Remember that 
 30441                                  	; CurrentPDB is STILL the current process!
 30442                                  
 30443                                  	;invoke	DOS_ABORT
 30444 00005417 E844DA                  	call	DOS_ABORT
 30445                                  
 30446                                  reset_to_parent:
 30447                                  					; SS override
 30448 0000541A 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30449                                  
 30450                                  reset_return:				; come here for normal return
 30451                                  	;Context DS			; DS is used to refer to DOSDATA  
 30452 0000541F 16                      	push	ss
 30453 00005420 1F                      	pop	ds	
 30454                                  
 30455 00005421 B0FF                    	MOV	AL,-1
 30456                                  
 30457                                  	; make sure that everything is clean In this case ignore any errors, 
 30458                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30459                                  
 30460                                  	;EnterCrit critDisk
 30461 00005423 E8ECBE                  	call	ECritDisk
 30462                                  	;invoke	FLUSHBUF
 30463 00005426 E8A505                  	call	FLUSHBUF
 30464                                  	;LeaveCrit critDisk
 30465 00005429 E801BF                  	call	LCritDisk
 30466                                  
 30467                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30468                                  
 30469 0000542C E883F7                  	call	CHECK_VIRT_OPEN
 30470 0000542F FA                      	CLI
 30471 00005430 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30472 00005435 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30473 0000543A C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30474 0000543F 8F06[8005]              	POP	WORD [EXITHOLD]
 30475 00005443 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30476                                  
 30477                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30478                                  
 30479 00005447 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30480 0000544B 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30481 0000544F 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30482                                  
 30483 00005453 E8F9AF                  	call	restore_world
 30484                                  
 30485                                  	; 05/05/2019
 30486 00005456 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30487                                  
 30488                                  	; MSDOS 6.0
 30489 00005457 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30490 00005458 8CD8                    	mov	ax,ds			; and not on stack.
 30491                                  	;getdseg <ds>			; ds -> dosdata
 30492 0000545A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30493 0000545F A3[0A0D]                	mov	[TEMPSEG],ax
 30494 00005462 58                      	pop	ax
 30495                                  					; set up ds to DOSDATA
 30496                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30497 00005463 A3[8405]                	mov	[USER_SP],ax
 30498                                  
 30499 00005466 58                      	POP	AX			; suck off CS:IP of interrupt...
 30500 00005467 58                      	POP	AX
 30501 00005468 58                      	POP	AX
 30502                                  
 30503                                  ; M011 : BEGIN
 30504                                  
 30505                                  	; MSDOS 3.3
 30506                                  ;	MOV	AX,0F202h	; STI
 30507                                  
 30508                                  	; MSDOS 6.0
 30509 00005469 9F                      	LAHF
 30510 0000546A 86E0                    	XCHG	AH,AL
 30511 0000546C 2402                    	AND	AL,2
 30512 0000546E B4F2                    	MOV	AH,0F2h
 30513                                  
 30514                                  ; M011 : END
 30515                                  
 30516                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30517 00005470 50                      	PUSH	AX
 30518                                   
 30519                                  	;PUSH	word [CS:EXITHOLD+2]
 30520                                  	;PUSH	word [CS:EXITHOLD]
 30521                                  	
 30522                                  	; MSDOS 6.0
 30523 00005471 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30524 00005475 FF36[8005]              	PUSH	word [EXITHOLD]
 30525                                  
 30526                                  	;MOV	AX,[CS:USER_SP]
 30527                                  
 30528                                  	; MSDOS 6.0
 30529 00005479 A1[8405]                	MOV	AX,[USER_SP]
 30530 0000547C 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30531                                  
 30532 00005480 CF                      	IRET			; Long return back to user terminate address
 30533                                  
 30534                                  ;---------------------------------------------------------------------------
 30535                                  ;
 30536                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30537                                  ;
 30538                                  ; This routine handles extended error codes.
 30539                                  ; Input : DI = error code from device
 30540                                  ; Output: All EXTERR fields are set
 30541                                  ;
 30542                                  ;--------------------------------------------------------------------------
 30543                                  
 30544                                  SET_I24_EXTENDED_ERROR:
 30545 00005481 50                      	PUSH	AX
 30546                                  					; ErrMap24End is in DOSDATA
 30547 00005482 B8[BB0E]                	MOV	AX,ErrMap24End
 30548 00005485 2D[AB0E]                	SUB	AX,ErrMap24
 30549                                  					; Change to dosdata to access 
 30550                                  					; ErrMap24 and EXTERR -SR
 30551                                  	; 05/05/2019 - Retro DOS v4.0
 30552                                  	
 30553                                  	; MSDOS 6.0
 30554 00005488 1E                      	push	ds
 30555                                  	;getdseg <ds>			; ds ->dosdata
 30556 00005489 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30557                                  
 30558                                  	; AX is the index of the first unavailable error. Do not translate 
 30559                                  	; if greater or equal to AX.
 30560                                  
 30561 0000548E 39C7                    	CMP	DI,AX
 30562 00005490 89F8                    	MOV	AX,DI
 30563 00005492 7306                    	JAE	short NoTrans
 30564                                  
 30565                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30566 00005494 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30567 00005498 30E4                    	XOR	AH,AH
 30568                                  NoTrans:
 30569                                  	;MOV	[CS:EXTERR],AX
 30570 0000549A A3[2403]                	mov	[EXTERR],AX
 30571 0000549D 1F                      	pop	ds
 30572                                  	;assume	ds:nothing
 30573 0000549E 58                      	POP	AX
 30574                                  
 30575                                  	; Now Extended error is set correctly. Translate it to get correct 
 30576                                  	; error locus class and recommended action.
 30577                                  
 30578 0000549F 56                      	PUSH	SI
 30579                                  					; ERR_TABLE_24 is in DOSCODE 
 30580 000054A0 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30581 000054A3 E8D8B1                  	call	CAL_LK			; Set other extended error fields
 30582 000054A6 5E                      	POP	SI
 30583 000054A7 C3                      	retn
 30584                                  
 30585                                  ;============================================================================
 30586                                  ; FAT.ASM, MSDOS 6.0, 1991
 30587                                  ;============================================================================
 30588                                  ; 30/07/2018 - Retro DOS v3.0
 30589                                  ; 20/05/2019 - Retro DOS v4.0
 30590                                  
 30591                                  ;	TITLE	FAT - FAT maintenance routines
 30592                                  ;	NAME	FAT
 30593                                  
 30594                                  ;**	FAT.ASM
 30595                                  ;----------------------------------------------------------------------------
 30596                                  ;	Low level local device routines for performing disk change sequence,
 30597                                  ;	setting cluster validity, and manipulating the FAT
 30598                                  ;
 30599                                  ;	IsEof
 30600                                  ;	UNPACK
 30601                                  ;	PACK
 30602                                  ;	MAPCLUSTER
 30603                                  ;	FATREAD_SFT
 30604                                  ;	FATREAD_CDS
 30605                                  ;	FAT_operation
 30606                                  ;
 30607                                  ;	Revision history:
 30608                                  ;
 30609                                  ;	  AN000  version Jan. 1988
 30610                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30611                                  ;
 30612                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30613                                  ;	       from CL0FATENTRY rather than disk.
 30614                                  
 30615                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30616                                  
 30617                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30618                                  ;----------------------------------------------------------------------------
 30619                                  ;
 30620                                  ; Procedure Name : IsEOF
 30621                                  ;
 30622                                  ; IsEOF - check the fat value in BX for eof.
 30623                                  ;
 30624                                  ;   Inputs:	ES:BP point to DPB
 30625                                  ;		BX has fat value
 30626                                  ;   Outputs:	JAE eof
 30627                                  ;   Registers modified: none
 30628                                  ;
 30629                                  ;---------------------------------------------------------------------------
 30630                                  
 30631                                  IsEOF:
 30632                                  	;cmp	word [es:bp+0Dh],0FF6h
 30633 000054A8 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30634 000054AE 730B                    	JAE	short EOF16			; yes, check for eof there
 30635                                  
 30636                                  ;J.K. 8/27/86
 30637                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30638                                  ;of any media that has "F0"(Other) as a MediaByte.
 30639                                  ;Hopely, this does not create any side effect for those who may use any value
 30640                                  ;other than "FF8-FFF" as an EOF for their own file.
 30641                                  
 30642 000054B0 81FBF00F                	cmp	bx,0FF0h
 30643 000054B4 7404                    	je	short IsEOF_other
 30644                                  
 30645 000054B6 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30646                                  IsEOF_other:
 30647 000054BA C3                      	retn
 30648                                  EOF16:
 30649 000054BB 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30650 000054BE C3                      	retn
 30651                                  
 30652                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30653                                  
 30654                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30655                                  ;---------------------------------------------------------------------------
 30656                                  ;
 30657                                  ; Procedur Name : UNPACK
 30658                                  ;
 30659                                  ; Inputs:
 30660                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30661                                  ;	ES:BP = Base of drive parameters
 30662                                  ; Outputs:
 30663                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30664                                  ;	Zero set means DI=0 (free cluster)
 30665                                  ;	Carry set means error (currently user FAILed to I 24)
 30666                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30667                                  ;
 30668                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30669                                  ;
 30670                                  ;----------------------------------------------------------------------------
 30671                                  	
 30672                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30673                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30674                                  
 30675                                  	; 20/05/2019 - Retro DOS v4.0
 30676                                  UNPACK:
 30677                                  	; MSDOS 6.0			; M014 - Start
 30678 000054BF 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30679 000054C1 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30680 000054C3 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30681 000054C7 09FF                    	or	di,di 			; return z if di=0
 30682 000054C9 C3                      	retn				; done
 30683                                  up_cont:				; M014 - End
 30684                                  	; MSDOS 3.3 & MSDOS 6.0
 30685                                  	;cmp	bx,[es:bp+0Dh]
 30686 000054CA 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30687 000054CE 7726                    	JA	short HURTFAT
 30688 000054D0 E8D600                  	CALL	MAPCLUSTER
 30689 000054D3 721E                    	jc	short _DoContext
 30690 000054D5 8B3D                    	MOV	DI,[DI]
 30691 000054D7 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30692 000054D9 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30693 000054DD 81FEF60F                	CMP	SI,4096-10
 30694 000054E1 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30695 000054E3 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30696 000054E5 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30697                                  High12:
 30698 000054E7 D1EF                    	SHR	DI,1
 30699 000054E9 D1EF                    	SHR	DI,1
 30700 000054EB D1EF                    	SHR	DI,1
 30701 000054ED D1EF                    	SHR	DI,1
 30702                                  Unpack12:
 30703 000054EF 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30704                                  _DoContext:
 30705 000054F3 16                      	PUSH	SS
 30706 000054F4 1F                      	POP	DS
 30707 000054F5 C3                      	retn
 30708                                  HURTFAT:
 30709                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30710                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30711 000054F6 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30712 000054FC 50                      	PUSH	AX
 30713 000054FD B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30714                                  
 30715                                  ;hkn; SS override
 30716 000054FF 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30717                                  ;
 30718                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30719                                  ;
 30720 00005505 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30721 00005508 E8C8FD                  	call	FATAL
 30722 0000550B 3C03                    	CMP	AL,3
 30723 0000550D F8                      	CLC
 30724 0000550E 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30725 00005510 F9                      	STC				; User said FAIL
 30726                                  OKU_RET:
 30727 00005511 58                      	POP	AX
 30728                                  hurtfat_retn:
 30729 00005512 C3                      	retn
 30730                                  
 30731                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30732                                  
 30733                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30734                                  ;----------------------------------------------------------------------------
 30735                                  ;
 30736                                  ; Procedure Name : PACK
 30737                                  ;
 30738                                  ; Inputs:
 30739                                  ;	BX = Cluster number
 30740                                  ;	DX = Data
 30741                                  ;	ES:BP = Pointer to drive DPB
 30742                                  ; Outputs:
 30743                                  ;	The data is stored in the FAT at the given cluster.
 30744                                  ;	SI,DX,DI all destroyed
 30745                                  ;	Carry set means error (currently user FAILed to I 24)
 30746                                  ;	No other registers affected
 30747                                  ;
 30748                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30749                                  ;
 30750                                  ;---------------------------------------------------------------------------
 30751                                  
 30752                                  	; 02/01/2024
 30753                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30754                                  	; 20/05/2019 - Retro DOS v4.0
 30755                                  PACK:
 30756                                  	; MSDOS 6.0			; M014 - start
 30757 00005513 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30758 00005515 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30759 00005517 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30760 0000551B C3                      	retn				; done
 30761                                  p_cont:					; M014 - end
 30762                                  	; MSDOS 3.3 & MSDOS 6.0
 30763 0000551C E88A00                  	CALL	MAPCLUSTER
 30764 0000551F 72D2                    	JC	short _DoContext
 30765 00005521 8B35                    	MOV	SI,[DI]
 30766 00005523 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30767 00005525 51                      	PUSH	CX			; move data to upper 12 bits
 30768 00005526 B104                    	MOV	CL,4
 30769 00005528 D3E2                    	SHL	DX,CL
 30770 0000552A 59                      	POP	CX
 30771 0000552B 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30772 0000552E EB14                    	JMP	SHORT PACKIN
 30773                                  ALIGNED:
 30774                                  	;cmp	word [es:bp+0Dh],0FF6h
 30775 00005530 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30776 00005536 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30777 00005538 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30778 0000553C 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30779 00005540 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30780                                  Pack16:
 30781 00005542 31F6                    	XOR	SI,SI			; MZ no original data
 30782                                  PACKIN:
 30783 00005544 09D6                    	OR	SI,DX
 30784 00005546 8935                    	MOV	[DI],SI
 30785                                  
 30786                                  ;hkn; SS override
 30787 00005548 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30788                                  	; MSDOS 6.0
 30789 0000554D F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30790                                  					;LB. if already dirty		  ;AN000;
 30791 00005551 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30792                                  	; 10/06/2019
 30793 00005553 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30794                                  	
 30795                                  	;or	byte [si+5],40h
 30796 00005556 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30797                                  yesdirty11:				;LB.				;AN000;
 30798                                  ;hkn; SS override
 30799 0000555A 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30800                                  ;hkn; SS is DOSDATA
 30801 00005560 16                      	push	ss
 30802 00005561 1F                      	pop	ds
 30803 00005562 74AE                    	jz	short hurtfat_retn	; Carry clear
 30804 00005564 50                      	PUSH	AX
 30805 00005565 53                      	PUSH	BX
 30806 00005566 51                      	PUSH	CX
 30807 00005567 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30808 0000556A 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30809                                  	;;add	si,16 ; MSDOS 3.3
 30810                                  	;add	si,20 ; MSDOS 6.0
 30811 0000556E 83C614                  	ADD	SI,BUFINSIZ
 30812 00005571 8824                    	MOV	[SI],AH
 30813                                  ;hkn; SS is DOSDATA
 30814                                  	;Context DS
 30815 00005573 16                      	push	ss
 30816 00005574 1F                      	pop	ds
 30817                                  	
 30818 00005575 50                      	PUSH	AX
 30819                                  	
 30820                                  	; MSDOS 6.0
 30821 00005576 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30822 0000557A 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30823                                  
 30824                                  	; MSDOS 3.3 & MSDOS 6.0
 30825 0000557E 8B16[9005]              	MOV	DX,[CLUSSEC]
 30826                                  
 30827                                  	;MOV	SI,1	  ; *
 30828                                  	;XOR	AL,AL     ; *
 30829                                  	;call	GETBUFFRB ; *
 30830                                  	; 22/09/2023
 30831 00005582 E83E03                  	call	GETBUFFRA ; *
 30832                                  
 30833 00005585 58                      	POP	AX
 30834 00005586 721B                    	JC	short POPP_RET
 30835 00005588 C53E[E205]              	LDS	DI,[CURBUF]
 30836                                  	
 30837                                  	; MSDOS 6.0
 30838 0000558C F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30839                                  					;LB. if already dirty		  ;AN000;
 30840 00005590 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30841 00005592 E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30842                                  	
 30843                                  	;or	byte [di+5],40h
 30844 00005595 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30845                                  yesdirty12:
 30846                                  	;;add	di,16
 30847                                  	;add	di,20 ; MSDOS 6.0
 30848                                  	; 02/01/2024
 30849                                  	;ADD	DI,BUFINSIZ
 30850                                  	;DEC	DI
 30851 00005599 83C713                  	add	di,BUFINSIZ-1 ; 19
 30852                                  
 30853                                  	;add	di,[es:bp+2]
 30854 0000559C 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30855 000055A0 8805                    	MOV	[DI],AL
 30856 000055A2 F8                      	CLC
 30857                                  POPP_RET:
 30858 000055A3 16                      	PUSH	SS
 30859 000055A4 1F                      	POP	DS
 30860 000055A5 59                      	POP	CX
 30861 000055A6 5B                      	POP	BX
 30862 000055A7 58                      	POP	AX
 30863 000055A8 C3                      	retn
 30864                                  
 30865                                  ; 31/07/2018 - Retro DOS v3.0
 30866                                  
 30867                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30868                                  ;---------------------------------------------------------------------------
 30869                                  ;
 30870                                  ; Procedure Name : MAPCLUSTER
 30871                                  ;
 30872                                  ; Inputs:
 30873                                  ;	ES:BP Points to DPB
 30874                                  ;	BX Is cluster number
 30875                                  ; Function:
 30876                                  ;	Get a pointer to the cluster
 30877                                  ; Outputs:
 30878                                  ;	DS:DI Points to contents of FAT for given cluster
 30879                                  ;	DS:SI Points to start of buffer
 30880                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30881                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30882                                  ;	Carry set if failed.
 30883                                  ; SI is destroyed.
 30884                                  ;
 30885                                  ;---------------------------------------------------------------------------
 30886                                  
 30887                                  	; 20/05/2019 - Retro DOS v4.0
 30888                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30889                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30890                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30891                                  
 30892                                  MAPCLUSTER:
 30893                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30894 000055A9 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30895                                  	;SAVE	<AX,BX,CX,DX>
 30896 000055AE 50                      	push	ax
 30897 000055AF 53                      	push	bx
 30898 000055B0 51                      	push	cx
 30899 000055B1 52                      	push	dx
 30900 000055B2 89D8                    	MOV	AX,BX			; AX = BX
 30901 000055B4 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30902 000055BA 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30903 000055BC D1E8                    	SHR	AX,1			; AX = BX/2
 30904                                  Map16:	
 30905                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30906 000055BE 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30907                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30908 000055C0 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30909 000055C2 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30910 000055C4 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30911                                  
 30912                                  ;IF FastDiv
 30913                                  ;
 30914                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30915                                  ; case and apply a really fast algorithm to get the desired results
 30916                                  ;
 30917                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30918                                  ; Fast method takes 39+20*4=119
 30919                                  ;
 30920                                  ; This saves a bunch.
 30921                                  
 30922 000055C8 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30923 000055CC 7510                    	jne	short _DoDiv		; 4  for no jump
 30924 000055CE 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30925 000055D0 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30926 000055D4 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30927                                  	; MDOS 3.3
 30928                                  	;shr	al,1	
 30929                                  	; MDOS 6.0
 30930 000055D6 D1EF                    	shr	di,1			; 2
 30931 000055D8 D0D8                    	rcr	al,1			; 2
 30932                                  	; MDOS 3.3 (& MSDOS 6.0)
 30933 000055DA 30E4                    	xor	ah,ah			; 3
 30934 000055DC EB04                    	jmp	short DivDone		; 16
 30935                                  _DoDiv:
 30936                                  ;ENDIF
 30937                                  	; MSDOS 3.3
 30938                                  	;xor	dx,dx
 30939                                  	; MSDOS 6.0
 30940 000055DE 89FA                    	mov	dx,di			; 2
 30941                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30942 000055E0 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30943                                  ;IF FastDiv
 30944                                  DivDone:
 30945                                  ;ENDIF
 30946                                  	;add	ax,[es:bp+6]
 30947 000055E2 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30948 000055E6 49                      	DEC	CX			; CX is sector size - 1
 30949                                  	;SAVE	<AX,DX,CX>
 30950 000055E7 50                      	push	ax
 30951 000055E8 52                      	push	dx
 30952 000055E9 51                      	push	cx
 30953 000055EA 89C2                    	MOV	DX,AX
 30954                                  
 30955                                  	; MSDOS 6.0
 30956                                  	; 22/09/2023
 30957                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 30958                                  	;
 30959                                  	; MDOS 3.3 (& MSDOS 6.0)
 30960                                  	;XOR	AL,AL	   ; *
 30961                                  	;MOV	SI,1	   ; *
 30962                                  	;;invoke GETBUFFRB ; *
 30963                                  	;call	GETBUFFRB  ; *
 30964                                  	; 22/09/2023
 30965 000055EC E8CE02                  	call	GETBUFFRC  ; *!
 30966                                  
 30967                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30968 000055EF 59                      	pop	cx
 30969 000055F0 58                      	pop	ax
 30970 000055F1 5A                      	pop	dx
 30971 000055F2 724C                    	JC	short MAP_POP
 30972                                  
 30973 000055F4 C536[E205]              	LDS	SI,[CURBUF]
 30974                                  	;;lea	di,[si+16]
 30975                                  	;lea	di,[si+20] ; MSDOS 6.0
 30976 000055F8 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30977 000055FB 01C7                    	ADD	DI,AX
 30978 000055FD 39C8                    	CMP	AX,CX
 30979 000055FF 752C                    	JNZ	short MAPRET
 30980 00005601 8A05                    	MOV	AL,[DI]
 30981                                  	;Context DS		 	;hkn; SS is DOSDATA
 30982 00005603 16                      	push	ss
 30983 00005604 1F                      	pop	ds	
 30984 00005605 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30985 00005609 A2[8E05]                	MOV	[CLUSSAVE],AL
 30986 0000560C 8916[9005]              	MOV	[CLUSSEC],DX
 30987                                  	; MSDOS 6.0
 30988 00005610 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 30989 00005616 42                      	INC	DX
 30990                                  
 30991                                  	; 22/09/2023
 30992                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 30993                                  	;
 30994                                  	; MDOS 3.3 (& MSDOS 6.0)
 30995                                  	;XOR	AL,AL	   ; *
 30996                                  	;MOV	SI,1	   ; *
 30997                                  	;;invoke GETBUFFRB ; *
 30998                                  	;call	GETBUFFRB  ; *
 30999                                  	; 22/09/2023
 31000 00005617 E8A302                  	call	GETBUFFRC  ; *!
 31001 0000561A 7224                    	JC	short MAP_POP
 31002                                  
 31003 0000561C C536[E205]              	LDS	SI,[CURBUF]
 31004 00005620 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31005 00005623 8A05                    	MOV	AL,[DI]
 31006                                  	;Context DS			;hkn; SS is DOSDATA
 31007 00005625 16                      	push	ss
 31008 00005626 1F                      	pop	ds
 31009 00005627 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31010                                  
 31011                                  ;hkn; CLUSSAVE is in DOSDATA
 31012 0000562A BF[8E05]                	MOV	DI,CLUSSAVE
 31013                                  MAPRET:
 31014                                  	;RESTORE <DX,CX,BX>
 31015 0000562D 5A                      	pop	dx
 31016 0000562E 59                      	pop	cx
 31017 0000562F 5B                      	pop	bx
 31018 00005630 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31019 00005632 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31020 00005638 7302                    	JAE	short MapSet		; MZ no, set flags
 31021 0000563A 89D8                    	MOV	AX,BX
 31022                                  MapSet:
 31023 0000563C A801                    	TEST	AL,1			; set zero flag if not on boundary
 31024                                  	;RESTORE <AX>
 31025 0000563E 58                      	pop	ax
 31026 0000563F C3                      	retn
 31027                                  
 31028                                  MAP_POP:
 31029                                  	;RESTORE <DX,CX,BX,AX>
 31030 00005640 5A                      	pop	dx
 31031 00005641 59                      	pop	cx
 31032 00005642 5B                      	pop	bx
 31033 00005643 58                      	pop	ax
 31034                                  fatread_sft_retn: ; 17/12/2022
 31035 00005644 C3                      	retn
 31036                                  
 31037                                  ; 20/05/2019 - Retro DOS v4.0
 31038                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31039                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31040                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31041                                  
 31042                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31043                                  ;----------------------------------------------------------------------------
 31044                                  ;
 31045                                  ; Procedure Name : FATREAD_SFT
 31046                                  ;
 31047                                  ; Inputs:
 31048                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31049                                  ;		giving a NET SFT will produce system crashing results).
 31050                                  ;	DS DOSDATA
 31051                                  ; Function:
 31052                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31053                                  ;	if disk changed.
 31054                                  ;	In other respects, same as FATREAD_CDS.
 31055                                  ;	(note ES:DI destroyed!)
 31056                                  ; Outputs:
 31057                                  ;	Carry set if error (currently user FAILed to I 24)
 31058                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31059                                  ;	as far as invalidating curdir_ID is concerned.
 31060                                  ;	Since getting a true disk changed on this call is a screw up
 31061                                  ;	anyway, that's the way it goes.
 31062                                  ;
 31063                                  ;---------------------------------------------------------------------------
 31064                                  
 31065                                  FATREAD_SFT:
 31066 00005645 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31067                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31068                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31069                                  	; 15/12/2022
 31070 00005649 268A4600                	mov	AL,[ES:BP]
 31071 0000564D A2[7605]                	MOV	[THISDRV],AL
 31072 00005650 E8DFAF                  	call	GOTDPB			;Set THISDPB
 31073                                  	;CALL	FAT_GOT_DPB
 31074                                  	; 17/12/2022
 31075 00005653 EB78                    	jmp	FAT_GOT_DPB
 31076                                  ;fatread_sft_retn:
 31077                                  	;retn
 31078                                  
 31079                                  ;----------------------------------------------------------------------------
 31080                                  ;
 31081                                  ; Procedure Name : FATREAD_CDS
 31082                                  ;
 31083                                  ; Inputs:
 31084                                  ;	DS:DOSDATA
 31085                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31086                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31087                                  ; Function:
 31088                                  ;	If disk may have been changed, media is determined and buffers are
 31089                                  ;	flagged invalid. If not, no action is taken.
 31090                                  ; Outputs:
 31091                                  ;	ES:BP = Drive parameter block
 31092                                  ;	THISDPB = ES:BP
 31093                                  ;	THISDRV set
 31094                                  ;	Carry set if error (currently user FAILed to I 24)
 31095                                  ; DS preserved , all other registers destroyed
 31096                                  ;
 31097                                  ;---------------------------------------------------------------------------
 31098                                  
 31099                                  	; 20/05/2019 - Retro DOS v4.0
 31100                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31101                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31102                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31103                                  
 31104                                  FATREAD_CDS:
 31105 00005655 06                      	PUSH	ES
 31106 00005656 57                      	PUSH	DI
 31107                                  	;les	bp,[es:di+45h]
 31108 00005657 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31109                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31110                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31111                                  	; 15/12/2022
 31112 0000565B 268A4600                	mov	AL,[ES:BP]
 31113 0000565F A2[7605]                	MOV	[THISDRV],AL
 31114 00005662 E8CDAF                  	call	GOTDPB			;Set THISDPB
 31115 00005665 E86500                  	CALL	FAT_GOT_DPB
 31116 00005668 5F                      	POP	DI			;Get back CDS pointer
 31117 00005669 07                      	POP	ES
 31118 0000566A 72D8                    	jc	short fatread_sft_retn
 31119 0000566C 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31120                                  
 31121                                  ;	Media changed. We now need to find all CDS structures which use this
 31122                                  ;	DPB and invalidate their ID pointers.
 31123                                  
 31124                                  MED_CHANGE:
 31125 0000566E 31C0                    	XOR	AX,AX
 31126 00005670 48                      	DEC	AX			; AX = -1
 31127 00005671 1E                      	PUSH	DS
 31128 00005672 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31129 00005676 30ED                    	XOR	CH,CH			; CX is number of structures
 31130                                  	;lds	si,[es:di+45h]
 31131 00005678 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31132                                  
 31133                                  ;hkn; SS override
 31134                                  
 31135                                  ;	Find all CDSs with this DevPtr
 31136                                  ;
 31137                                  ;	(ax) = -1
 31138                                  ;	(ds:si) = DevPtr
 31139                                  
 31140 0000567C 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31141                                  frcd20: 
 31142                                  	;;test	word [es:di+43h],8000h
 31143                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31144 00005681 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31145 00005686 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31146                                  
 31147                                  	; MSDOS 3.3
 31148                                  	;push	es
 31149                                  	;push	di
 31150                                  	;les	di,[es:di+45h]
 31151                                  	;;les	di,[ES:DI+curdir.devptr]
 31152                                  	;call	POINTCOMP
 31153                                  	;pop	di
 31154                                  	;pop	es
 31155                                  	;jnz	short frcd25
 31156                                  
 31157                                  	; MSDOS 6.0
 31158 00005688 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31159 0000568C 7512                    	jne	short frcd25		; no match
 31160 0000568E 8CDB                    	mov	bx,ds
 31161 00005690 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31162 00005694 750A                    	jne	short frcd25		; CDS not for this drive
 31163                                  
 31164                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31165                                  	;test	[es:di+49h],ax
 31166 00005696 26854549                	test	[ES:DI+curdir.ID],AX
 31167 0000569A 7404                    	JZ	short frcd25		; If root (0), leave root
 31168                                  	;mov	[es:di+49h],ax
 31169 0000569C 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31170                                  frcd25:	
 31171                                  	;;add	di,81  ; MSDOS 3.3
 31172                                  	;add	di,88  ; MSDOS 6.0	 
 31173 000056A0 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31174 000056A3 E2DC                    	LOOP	frcd20
 31175 000056A5 1F                      	POP	DS
 31176                                  NO_CHANGE:
 31177 000056A6 C42E[8A05]              	LES	BP,[THISDPB]
 31178 000056AA F8                      	CLC
 31179 000056AB C3                      	retn
 31180                                  
 31181                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31182                                  ;----------------------------------------------------------------------------
 31183                                  ;
 31184                                  ; Procedure Name : FAT_operation
 31185                                  ;
 31186                                  ;----------------------------------------------------------------------------
 31187                                  
 31188                                  	; 03/01/2024
 31189                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31190                                  
 31191                                  FAT_operation:
 31192                                  	; 31/07/2018 - Retro DOS v3.0
 31193                                  FATERR:
 31194                                  	;mov	word [es:bp+1Eh],-1
 31195                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31196 000056AC 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31197                                  					; Err in FAT must force recomp of freespace
 31198                                  	;and	di,0FFh
 31199 000056B2 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31200                                  	;mov	byte [ALLOWED],18h
 31201 000056B6 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31202                                  	;mov	ah,1Ah
 31203 000056BB B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31204 000056BD A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31205 000056C0 E814FC                  	call	FATAL1
 31206 000056C3 C42E[8A05]              	LES	BP,[THISDPB]
 31207 000056C7 3C03                    	CMP	AL,3
 31208 000056C9 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31209 000056CB F9                      	STC				; User said FAIL
 31210 000056CC C3                      	retn
 31211                                  
 31212                                  FAT_GOT_DPB:
 31213                                  	;Context DS			;hkn; SS is DOSDATA
 31214 000056CD 16                      	push	ss			
 31215 000056CE 1F                      	pop	ds
 31216                                  	;mov	al,0Fh
 31217 000056CF B00F                    	MOV	AL,DMEDHL
 31218                                  	;mov	ah,[es:bp+1]
 31219 000056D1 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31220 000056D5 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31221 000056D8 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31222 000056DD C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31223                                  	;;mov	al,[es:bp+16h]
 31224                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31225 000056E3 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31226 000056E7 A2[6703]                	MOV	[CALLMED],AL
 31227 000056EA 06                      	PUSH	ES
 31228 000056EB 1E                      	PUSH	DS
 31229                                  
 31230                                  ;hkn; DEVCALL is in DOSDATA
 31231 000056EC BB[5A03]                	MOV	BX,DEVCALL
 31232                                  	;;lds	si,[es:bp+12h]
 31233                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31234 000056EF 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31235 000056F3 07                      	POP	ES			; ES:BX Points to call header
 31236 000056F4 E8FBEE                  	call	DEVIOCALL2
 31237                                  	;Context DS		 	;hkn; SS is DOSDATA
 31238 000056F7 16                      	push	ss
 31239 000056F8 1F                      	pop	ds
 31240 000056F9 07                      	POP	ES			; Restore ES:BP
 31241 000056FA 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31242                                  	;test	di,8000h
 31243                                  	;jnz	short FATERR
 31244 000056FE 09FF                    	or	di,di
 31245 00005700 78AA                    	js	short FATERR		; have error
 31246 00005702 30E4                    	XOR	AH,AH
 31247                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31248                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31249 00005704 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31250 00005708 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31251                                  ; See if we had changed volume id by creating one on the diskette
 31252 0000570B 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31253 0000570F 7508                    	jnz	short CHECK_BYT
 31254 00005711 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31255 00005716 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31256                                  					; new volume label.
 31257                                  CHECK_BYT:
 31258 00005719 0A26[6803]              	OR	AH,[CALLRBYT]
 31259                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31260                                  	;JMP	short NEWDSK
 31261                                  	; 17/12/2022
 31262 0000571D 7863                    	js	short NEWDSK
 31263                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31264                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31265                                  	;JMP	short NEWDSK
 31266                                  
 31267                                  CHECK_ZR:
 31268 0000571F 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31269                                  	; 24/09/2023
 31270                                  	; cf=0 (after 'or' instruction)
 31271                                  	;CLC
 31272 00005721 C3                      	retn				; If Media not changed (NZ)
 31273                                  
 31274                                  DISK_CHNG_ERR:
 31275 00005722 06                      	PUSH	ES
 31276 00005723 55                      	PUSH	BP
 31277                                  	;;les	bp,[es:bp+12h]
 31278                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31279 00005724 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31280                                  	;;test	word [es:bp+4],800h
 31281                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31282 00005728 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31283 0000572D 5D                      	POP	BP
 31284 0000572E 07                      	POP	ES
 31285 0000572F 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31286 00005731 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31287 00005732 57                      	PUSH	DI
 31288 00005733 16                      	push	ss			;hkn; SS is DOSDATA
 31289 00005734 1F                      	pop	ds
 31290                                  	;mov	byte [ALLOWED],18h
 31291 00005735 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31292 0000573A 06                      	PUSH	ES
 31293 0000573B C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31294 0000573F 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31295 00005743 07                      	POP	ES
 31296 00005744 893E[2803]              	MOV	[EXTERRPT],DI
 31297                                  	;mov	ax,0Fh
 31298 00005748 B80F00                  	MOV	AX,error_I24_wrong_disk
 31299 0000574B C606[7505]01            	MOV	byte [READOP],1		; Write
 31300                                  	;invoke	HARDERR
 31301 00005750 E832FB                  	call	HARDERR
 31302 00005753 5F                      	POP	DI			; Get back buffer for ignore
 31303 00005754 1F                      	POP	DS
 31304 00005755 3C03                    	CMP	AL,3
 31305                                  FAIL_OPJ2:
 31306 00005757 741C                    	JZ	short FAIL_OP
 31307 00005759 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31308                                  
 31309                                  CHKBUFFDIRT:
 31310                                  	; 20/05/2019 - Retro DOS v4.0
 31311                                  
 31312                                  	; MSDOS 3.3
 31313                                  	;lds	di,[BUFFHEAD]
 31314                                  
 31315                                  	; MSDOS 6.0
 31316 0000575C 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31317 00005762 741E                    	je	short NEWDSK			; no, skip the check
 31318 00005764 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31319                                  nbuffer:
 31320                                  	;cmp	al,[di+4]
 31321 00005767 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31322 0000576A 750D                    	jne	short lfnxt			; no, go for next buffer
 31323                                  	;test   byte [di+5],40h
 31324 0000576C F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31325 00005770 7407                    	jz	short lfnxt			; no, go for next buffer
 31326                                  	;Context DS
 31327 00005772 16                      	push	ss
 31328 00005773 1F                      	pop	ds
 31329                                  	; 24/09/2023
 31330                                  	; cf=0 (after 'test' instruction)
 31331                                  	;clc
 31332 00005774 C3                      	retn
 31333                                  
 31334                                  FAIL_OP:					; This label & code is here
 31335                                  	;Context DS				;  for reachability
 31336 00005775 16                      	push	ss
 31337 00005776 1F                      	pop	ds
 31338 00005777 F9                      	STC
 31339 00005778 C3                      	retn
 31340                                  
 31341                                  lfnxt:
 31342                                  	; 15/08/2018 - Retro DOS v3.0
 31343                                  	; MSDOS 3.3
 31344                                  	;lds	di,[di]
 31345                                  
 31346                                  	; 20/05/2019 - Retro DOS v4.0
 31347 00005779 8B3D                    	mov	di,[di]
 31348                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31349                                  	
 31350                                  	; MSDOS 3.3
 31351                                  	;cmp	di,-1
 31352                                  	;jne	short nbuffer
 31353                                  	
 31354                                  	; MSDOS 6.0
 31355 0000577B 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31356 00005780 75E5                    	jne	short nbuffer			; no, check this guy also
 31357                                  
 31358                                  ; If no dirty buffers, assume Media changed
 31359                                  NEWDSK:
 31360                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31361                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31362 00005782 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31363                                  						;  recompute
 31364                                  	; MSDOS 3.3
 31365                                  	;call	SETVISIT
 31366                                  	; MSDOS 6.0
 31367 00005788 E8CD00                  	call	 GETCURHEAD
 31368                                  nxbuffer:
 31369                                  	; MSDOS 3.3
 31370                                  	;or 	byte [di+5],20h
 31371                                  	; MSDOS 3.3 & MSDOS 6.0
 31372                                  	;cmp	[di+4],al
 31373 0000578B 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31374 0000578E 7510                    	jne	short lfnxt2
 31375                                  	;test	byte [di+5],40h
 31376 00005790 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31377 00005794 758C                    	jnz	short DISK_CHNG_ERR
 31378                                  	;mov	word [di+4],20FFh
 31379 00005796 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31380 0000579B E8CC00                  	call	SCANPLACE
 31381                                  	; MSDOS 6.0
 31382 0000579E EB02                    	jmp	short skpbuff
 31383                                  lfnxt2:
 31384 000057A0 8B3D                    	mov	di,[di]
 31385                                  	;mov	di,[di+BUFFINFO.buf_next]
 31386                                  skpbuff:
 31387                                  	; MSDOS 6.0
 31388 000057A2 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31389 000057A7 75E2                    	jne	short nxbuffer
 31390                                  
 31391 000057A9 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31392 000057AF 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31393 000057B1 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31394 000057B6 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31395 000057B8 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31396                                  ;lfnxt2:
 31397                                  	; MSDOS 3.3
 31398                                  	;call	SKIPVISIT
 31399                                  	;jnz	short nxbuffer
 31400                                  GOGETBPB:
 31401                                  	; MSDOS 3.3 & MSDOS 6.0
 31402                                  	;;lds	di,[es:bp+12h]
 31403                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31404 000057BE 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31405                                  	; 20/05/2019
 31406                                  	;test	word [di+4],2000h
 31407                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31408 000057C2 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31409 000057C6 7510                    	JNZ	short GETFREEBUF
 31410                                  	;context DS	    		;hkn; SS is DOSDATA
 31411 000057C8 16                      	push	ss
 31412 000057C9 1F                      	pop	ds
 31413 000057CA BB0200                  	MOV	BX,2
 31414 000057CD E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31415                                  FAIL_OPJ:
 31416 000057D0 72A3                    	JC	short FAIL_OP
 31417 000057D2 C53E[E205]              	LDS	DI,[CURBUF]
 31418 000057D6 EB13                    	JMP	SHORT GOTGETBUF
 31419                                  
 31420                                  GETFREEBUF:
 31421 000057D8 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31422 000057D9 55                      	PUSH	BP
 31423                                  	; MSDOS 3.3
 31424                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31425                                  	; MSDOS 6.0
 31426 000057DA 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31427                                  ;hkn; SS override
 31428 000057DC 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 31429 000057E1 E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31430                                  	; MSDOS 3.3 & MSDOS 6.0
 31431 000057E4 E84F02                  	call	BUFWRITE
 31432 000057E7 5D                      	POP	BP
 31433 000057E8 07                      	POP	ES
 31434                                  	;JC	short FAIL_OPJ
 31435 000057E9 728A                    	jc	short FAIL_OP
 31436                                  GOTGETBUF:
 31437                                  	;;add	di,16
 31438                                  	;add	di,20 ; MSDOS 6.0
 31439 000057EB 83C714                  	ADD	DI,BUFINSIZ
 31440                                  
 31441                                  ;hkn; SS override
 31442 000057EE 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31443                                  	;Context DS			;hkn; SS is DOSDATA
 31444 000057F3 16                      	push	ss
 31445 000057F4 1F                      	pop	ds
 31446 000057F5 893E[6803]              	MOV	[CALLXAD],DI
 31447                                  	;mov	al,16h
 31448 000057F9 B016                    	MOV	AL,DBPBHL
 31449                                  	;mov	ah,[es:bp+1]
 31450 000057FB 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31451 000057FF A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31452 00005802 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31453 00005807 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31454                                  	;;mov	al,[es:bp+16h]
 31455                                  	;mov	al,[es:bp+17h]
 31456 0000580D 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31457 00005811 A2[6703]                	MOV	[CALLMED],AL
 31458 00005814 06                      	PUSH	ES ; **
 31459 00005815 1E                      	PUSH	DS ; *
 31460                                  	;;
 31461                                  ; 03/01/2023
 31462                                  %if 0
 31463                                  	;;push	word [es:bp+14h]
 31464                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31465                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31466                                  	;;push	word [es:bp+12h]
 31467                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31468                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31469                                  
 31470                                  ;hkn; DEVCALL is in DOSDATA
 31471                                  	MOV	BX,DEVCALL
 31472                                  	POP	SI
 31473                                  	POP	DS			; DS:SI Points to device header
 31474                                  %endif
 31475                                  	; 03/01/2024
 31476 00005816 BB[5A03]                	mov	bx,DEVCALL
 31477                                  	;lds	si,[es:bp+13h]
 31478 00005819 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31479                                  					; DS:SI Points to device header
 31480                                  	;;
 31481 0000581D 07                      	POP	ES ; *			; ES:BX Points to call header
 31482                                  	;invoke	DEVIOCALL2
 31483 0000581E E8D1ED                  	call	DEVIOCALL2
 31484 00005821 07                      	POP	ES ; **			; Restore ES:BP
 31485                                  	;Context DS
 31486 00005822 16                      	push	ss		 	;hkn; SS is DOSDATA
 31487 00005823 1F                      	pop	ds
 31488 00005824 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31489                                  	; MSDOS 3.3
 31490                                  	;test	di,8000h
 31491                                  	;jnz	short FATERRJ
 31492                                  	; MSDOS 6.0
 31493 00005828 09FF                    	or	di,di
 31494 0000582A 7829                    	js	short FATERRJ 		; have error
 31495                                  	;;mov	al,[es:bp+16h]
 31496                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31497 0000582C 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31498 00005830 C536[6C03]              	LDS	SI,[CALLBPB]
 31499                                  	;;mov	word [es:bp+1Ch],0
 31500                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31501 00005834 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31502                                  	;invoke	$SETDPB
 31503 0000583A E898B7                  	call	_$SETDPB
 31504                                  
 31505                                  ;hkn; SS override
 31506 0000583D 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31507                                  	;mov	al,[es:bp+8]
 31508 00005842 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31509                                  
 31510                                  	; MSDOS 3.3
 31511                                  	;;mov	ah,[es:bp+0Fh]
 31512                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31513                                  	;;mov	[DI-8],ax
 31514                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31515                                  
 31516                                  	; MSDOS 6.0
 31517                                  	;mov	[di-0Ah],al
 31518 00005846 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31519                                  						;>32mb		  ;AN000;
 31520                                  	;mov	ax,[es:bp+0Fh]
 31521 00005849 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31522                                  	;mov	[di-9h],ax			  ;AC000;
 31523 0000584D 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31524                                  					;>32mb Correct buffer info ;AC000;
 31525                                  	;Context DS			;hkn; SS is DOSDATA
 31526 00005850 16                      	push	ss
 31527 00005851 1F                      	pop	ds
 31528 00005852 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31529 00005854 C3                      	retn
 31530                                  
 31531                                  FATERRJ: 
 31532 00005855 E954FE                  	JMP	FATERR
 31533                                  
 31534                                  ;============================================================================
 31535                                  ; STDBUF.ASM
 31536                                  ;============================================================================
 31537                                  ; Retro DOS v2.0 - 12/03/2018
 31538                                  
 31539                                  ;
 31540                                  ; Standard buffer management for MSDOS
 31541                                  ;
 31542                                  
 31543                                  ;.xlist
 31544                                  ;.xcref
 31545                                  ;INCLUDE STDSW.ASM
 31546                                  ;.cref
 31547                                  ;.list
 31548                                  
 31549                                  ;TITLE	STDBUF - MSDOS buffer management
 31550                                  ;NAME	STDBUF
 31551                                  
 31552                                  ;INCLUDE BUF.ASM
 31553                                  
 31554                                  ;============================================================================
 31555                                  ; BUF.ASM
 31556                                  ;============================================================================
 31557                                  ; 31/07/2018 - Retro DOS v3.0
 31558                                  ; Retro DOS v2.0 - 12/03/2018
 31559                                  ;
 31560                                  ; buffer management for MSDOS
 31561                                  ;
 31562                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31563                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31564                                  ;
 31565                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31566                                  ;
 31567                                  ;SETVISIT:
 31568                                  ;	; 31/07/2018 - Retro DOS v3.0
 31569                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31570                                  ;; Inputs:
 31571                                  ;;      None
 31572                                  ;; Function:
 31573                                  ;;      Set up a scan of I/O buffers
 31574                                  ;; Outputs:
 31575                                  ;;      All visit flags = 0
 31576                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31577                                  ;;                    may cause a scan to stop in the middle leaving some
 31578                                  ;;                    visit flags set, and some not set.
 31579                                  ;;      DS:DI Points to [BUFFHEAD]
 31580                                  ;; No other registers altered
 31581                                  ;
 31582                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31583                                  ;	PUSH    AX
 31584                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31585                                  ;	;mov	al,0DFh
 31586                                  ;	mov	al,~buf_visit
 31587                                  ;SETLOOP:
 31588                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31589                                  ;	;and	[DI+5],al
 31590                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31591                                  ;       LDS     DI,[DI]
 31592                                  ;       CMP     DI,-1
 31593                                  ;       JNZ     SHORT SETLOOP
 31594                                  ;       POP     AX ; 09/09/2018
 31595                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31596                                  ;SVISIT_RETN:
 31597                                  ;       RETN
 31598                                  ;
 31599                                  ;SKIPVISIT:
 31600                                  ;	; 31/07/2018 - Retro DOS v3.0
 31601                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31602                                  ;
 31603                                  ;; Inputs:
 31604                                  ;;      DS:DI Points to a buffer
 31605                                  ;; Function:
 31606                                  ;;      Skip visited buffers
 31607                                  ;; Outputs:
 31608                                  ;;      DS:DI Points to next unvisited buffer
 31609                                  ;;      Zero is set if skip to LAST buffer
 31610                                  ;; No other registers altered
 31611                                  ;
 31612                                  ;       CMP     DI,-1
 31613                                  ;       ;retz
 31614                                  ;       JZ	SHORT SVISIT_RETN
 31615                                  ;
 31616                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31617                                  ;       ;;;retnz
 31618                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31619                                  ;
 31620                                  ;	;test	byte [di+5],20h
 31621                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31622                                  ;	JNZ	short SKIPLOOP
 31623                                  ;	
 31624                                  ;	push	ax
 31625                                  ;	or	al,1
 31626                                  ;	pop	ax
 31627                                  ;	retn	
 31628                                  ;
 31629                                  ;SKIPLOOP:
 31630                                  ;	LDS     DI,[DI]
 31631                                  ;       JMP     SHORT SKIPVISIT
 31632                                  
 31633                                  ;============================================================================
 31634                                  ; BUF.ASM, MSDOS 6.0, 1991
 31635                                  ;============================================================================
 31636                                  ; 31/07/2018 - Retro DOS v3.0
 31637                                  ; 04/05/2019 - Retro DOS v4.0
 31638                                  
 31639                                  ;	TITLE	BUF - MSDOS buffer management
 31640                                  ;	NAME	BUF
 31641                                  
 31642                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31643                                  ;
 31644                                  ;	GETCURHEAD
 31645                                  ;	ScanPlace
 31646                                  ;	PLACEBUF
 31647                                  ;	PLACEHEAD
 31648                                  ;	PointComp
 31649                                  ;	GETBUFFR
 31650                                  ;	GETBUFFRB
 31651                                  ;	FlushBuf
 31652                                  ;	BufWrite
 31653                                  ;	SET_RQ_SC_PARMS
 31654                                  ;
 31655                                  ;	Revision history:
 31656                                  ;
 31657                                  ;		AN000  version 4.00  Jan. 1988
 31658                                  ;		A004   PTM 3765 -- Disk reset failed
 31659                                  ;		M039 DB 10/17/90 - Disk write optimization
 31660                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31661                                  
 31662                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31663                                  ;----------------------------------------------------------------------------
 31664                                  ; Procedure Name : GetCurHead
 31665                                  ; Inputs:
 31666                                  ;	 No Inputs
 31667                                  ; Function:
 31668                                  ;	Returns the pointer to the first buffer in Queue
 31669                                  ;	and updates FIRST_BUFF_ADDR
 31670                                  ;       and invalidates LASTBUFFER (recency pointer)
 31671                                  ; Outputs:
 31672                                  ;	DS:DI = pointer to the first buffer in Queue
 31673                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31674                                  ;       LASTBUFFER = -1
 31675                                  ; No other registers altered
 31676                                  ;----------------------------------------------------------------------------
 31677                                  
 31678                                  ; 04/05/2019 - Retro DOS v4.0
 31679                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31680                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31681                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31682                                  
 31683                                  GETCURHEAD:
 31684 00005858 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31685 0000585D 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31686 00005864 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31687 00005869 C3                      	retn
 31688                                  
 31689                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31690                                  ;----------------------------------------------------------------------------
 31691                                  ; Procedure Name : ScanPlace
 31692                                  ; Inputs:
 31693                                  ;	Same as PLACEBUF
 31694                                  ; Function:
 31695                                  ;	Save scan location and call PLACEBUF
 31696                                  ; Outputs:
 31697                                  ;	DS:DI Points to saved scan location
 31698                                  ; All registers, except DS:DI, preserved.
 31699                                  ;----------------------------------------------------------------------------
 31700                                  ;M039: Rewritten to preserve registers.
 31701                                  
 31702                                  ;SCANPLACE:
 31703                                  ;	; 31/07/2018 - Retro DOS v3.0
 31704                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31705                                  ;	push	es
 31706                                  ;	les	si,[di]
 31707                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31708                                  ;	call	PLACEBUF
 31709                                  ;	push	es
 31710                                  ;	pop	ds
 31711                                  ;	mov	di,si
 31712                                  ;	pop	es
 31713                                  ;scanplace_retn:
 31714                                  ;	retn	
 31715                                  	
 31716                                  	; MSDOS 6.0
 31717                                  SCANPLACE:
 31718 0000586A FF35                    	push	word [di]
 31719                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31720 0000586C E80200                  	call	PLACEBUF
 31721 0000586F 5F                      	pop	di
 31722 00005870 C3                      	retn
 31723                                  
 31724                                  ;----------------------------------------------------------------------------
 31725                                  ; Procedure Name : PlaceBuf
 31726                                  ; Input:
 31727                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31728                                  ; Function:
 31729                                  ;	Remove buffer from queue and re-insert it in proper place.
 31730                                  ; NO registers altered
 31731                                  ;----------------------------------------------------------------------------
 31732                                  
 31733                                  ;procedure PLACEBUF,NEAR
 31734                                  
 31735                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31736                                  	; 20/05/2019 - Retro DOS v4.0
 31737                                  PLACEBUF:
 31738                                  	; 31/07/2018 - Retro DOS v3.0
 31739                                  
 31740                                  	; MSDOS 6.0
 31741 00005871 50                      	push	AX			;Save only regs we modify	;AN000;
 31742 00005872 53                      	push	BX							;AN000;
 31743                                  	; 23/09/2023
 31744                                  	;push	SI							;AN000;
 31745                                  	
 31746 00005873 8B05                    	mov	ax,[di]
 31747                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31748 00005875 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31749                                  	
 31750 0000587A 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31751 0000587C 7422                    	je	short nret			;Yes, special case	;AN000;
 31752 0000587E 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31753 00005880 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31754 00005882 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31755 00005886 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31756                                  not_first:
 31757                                  	; 23/09/2023
 31758 00005888 56                      	push	si
 31759                                  	;mov	si,[di+2]
 31760 00005889 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31761 0000588C 8904                    	mov	[si],ax
 31762                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31763 0000588E 96                      	xchg	si,ax
 31764                                  	;mov	[si+2],ax
 31765 0000588F 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31766                                  	
 31767 00005892 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31768 00005895 893C                    	mov	[si],di
 31769                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31770 00005897 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31771 0000589A 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31772 0000589D 891D                    	mov	[di],bx
 31773                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31774                                  	; 23/09/2023
 31775 0000589F 5E                      	pop	si
 31776                                  nret:	
 31777                                  	; 23/09/2023							;AN000;
 31778                                  	;pop	SI							;AN000;
 31779 000058A0 5B                      	pop	BX							;AN000;
 31780 000058A1 58                      	pop	AX							;AN000;
 31781                                  									;AN000;
 31782                                  	;cmp	byte [di+4],0FFh
 31783 000058A2 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31784 000058A6 7505                            jne	short pbx			; M039: -no, jump.
 31785 000058A8 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31786                                  pbx:	
 31787 000058AD C3                      	retn								;AN000;
 31788                                  
 31789                                  	; 31/07/2018 - Retro DOS v3.0
 31790                                  
 31791                                  	; MSDOS 3.3
 31792                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31793                                  
 31794                                  ;PLACEBUF:
 31795                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31796                                  ;	
 31797                                  ;       CALL	save_world
 31798                                  ;       LES     CX,[DI]
 31799                                  ;       CMP     CX,-1           	; Buf is LAST?
 31800                                  ;       JZ      SHORT NRET		; Buffer already last
 31801                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31802                                  ;       PUSH    DS
 31803                                  ;       POP     ES              	; Buf is ES:DI
 31804                                  ;	; 15/03/2018
 31805                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31806                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31807                                  ;       JNZ     SHORT BUFLOOP
 31808                                  ;       MOV     [SS:BUFFHEAD],CX
 31809                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31810                                  ;       JMP     SHORT LOOKEND
 31811                                  ;BUFLOOP:
 31812                                  ;	; 31/07/2018
 31813                                  ;	mov	ax,ds
 31814                                  ;	mov	bx,si
 31815                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31816                                  ;       LDS     SI,[SI]
 31817                                  ;       CALL    POINTCOMP
 31818                                  ;       jnz	short BUFLOOP
 31819                                  ;	;
 31820                                  ;	mov	ds,ax
 31821                                  ;	mov	si,bx
 31822                                  ;	mov	[SI],cx
 31823                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31824                                  ;	mov	[SI+2],bp
 31825                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31826                                  ;LOOKEND:
 31827                                  ;	mov	ax,ds
 31828                                  ;	mov	bx,si
 31829                                  ;       LDS     SI,[SI]
 31830                                  ;       CMP     SI,-1
 31831                                  ;       jnz     short LOOKEND
 31832                                  ;GOTHEEND:
 31833                                  ;       mov	ds,ax
 31834                                  ;	mov	[BX],di
 31835                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31836                                  ;       MOV     WORD [ES:DI],-1
 31837                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31838                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31839                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31840                                  ;NRET:
 31841                                  ;       CALL	restore_world
 31842                                  ;	
 31843                                  ;	;cmp	byte [di+4],-1
 31844                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31845                                  ;	jnz     short scanplace_retn
 31846                                  ;	call    PLACEHEAD
 31847                                  ;	retn
 31848                                  
 31849                                  ;EndProc PLACEBUF
 31850                                  
 31851                                  ;M039 - Removed PLACEHEAD.
 31852                                  ;----------------------------------------------------------------------------
 31853                                  ; places buffer at head
 31854                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31855                                  ;	ONE IN THE LIST!!!!!!!
 31856                                  ; BUGBUG ---- this routine can be removed because it has only
 31857                                  ; BUGBUG ---- one instruction. This routine is called from
 31858                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31859                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31860                                  ; BUGBUG ---- But kept as it is for modularity
 31861                                  ;----------------------------------------------------------------------------
 31862                                  ;procedure   PLACEHEAD,NEAR
 31863                                  ;	mov	word ptr [BufferQueue], di
 31864                                  ;	ret
 31865                                  ;EndProc PLACEHEAD
 31866                                  ;M039
 31867                                  
 31868                                  ;----------------------------------------------------------------------------
 31869                                  ; Procedure Name : PLACEHEAD
 31870                                  ;
 31871                                  ; SAME AS PLACEBUF except places buffer at head
 31872                                  ;----------------------------------------------------------------------------
 31873                                  
 31874                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31875                                  	; 05/09/2018
 31876                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31877                                  ;PLACEHEAD:
 31878                                  ;	; 31/07/2018 - Retro DOS v3.0
 31879                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31880                                  ;
 31881                                  ;       CALL	save_world
 31882                                  ;       PUSH	DS
 31883                                  ;       POP	ES
 31884                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31885                                  ;       LDS     SI,[SS:BUFFHEAD]
 31886                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31887                                  ;	CALL    POINTCOMP
 31888                                  ;       JZ      SHORT GOTHEEND2
 31889                                  ;	MOV	[ES:DI],SI
 31890                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31891                                  ;       MOV	[ES:DI+2],DS
 31892                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31893                                  ;       MOV	[SS:BUFFHEAD],DI
 31894                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31895                                  ;LOOKEND2:
 31896                                  ;       mov	ax,ds
 31897                                  ;	mov	bx,si
 31898                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31899                                  ;       LDS     SI,[SI]
 31900                                  ;       CALL    POINTCOMP
 31901                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31902                                  ;       mov	ds,ax
 31903                                  ;	mov	word [bx],-1
 31904                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31905                                  ;	mov	word [bx+2],-1
 31906                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31907                                  ;GOTHEEND2:
 31908                                  ;      	call	restore_world
 31909                                  ;placehead_retn:
 31910                                  ;	retn
 31911                                  
 31912                                  ; 20/05/2019 - Retro DOS v4.0
 31913                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31914                                  
 31915                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31916                                  ;----------------------------------------------------------------------------
 31917                                  ;
 31918                                  ; Procedure Name : PointComp
 31919                                  ; Inputs:
 31920                                  ;         DS:SI & ES:DI
 31921                                  ; Function:
 31922                                  ;          Checks for ((SI==DI) && (ES==DS))
 31923                                  ;	   Assumes that pointers are normalized for the
 31924                                  ;	   same segment
 31925                                  ;
 31926                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31927                                  ; DO NOT USE FOR < or >
 31928                                  ; No Registers altered
 31929                                  ;
 31930                                  ;----------------------------------------------------------------------------
 31931                                  
 31932                                  POINTCOMP:
 31933                                  	; 31/07/2018 - Retro DOS v3.0
 31934                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31935 000058AE 39FE                    	CMP	SI,DI
 31936 000058B0 750A                    	jnz	short _ret_label	; return if nz
 31937                                  	;jnz	short placehead_retn 
 31938 000058B2 51                      	PUSH	CX
 31939 000058B3 52                      	PUSH	DX
 31940 000058B4 8CD9                    	MOV	CX,DS
 31941 000058B6 8CC2                    	MOV	DX,ES
 31942 000058B8 39D1                    	CMP	CX,DX
 31943 000058BA 5A                      	POP	DX
 31944 000058BB 59                      	POP	CX
 31945                                  _ret_label:
 31946 000058BC C3                      	retn
 31947                                  
 31948                                  ; 01/08/2018 - Retro DOS v3.0
 31949                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31950                                  
 31951                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31952                                  
 31953                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31954                                  ;----------------------------------------------------------------------------
 31955                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31956                                  ;	It gets the specified local sector into one of the I/O buffers
 31957                                  ;	and shuffles the queue
 31958                                  ; 
 31959                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31960                                  ;		       ELSE no pre-read
 31961                                  ;		(DX) = Desired physical sector number	      (LOW)
 31962                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31963                                  ;		(ES:BP) = Pointer to drive parameters
 31964                                  ;		ALLOWED set in case of INT 24
 31965                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31966                                  ;		'C' clear if OK
 31967                                  ;		CURBUF Points to the Buffer for the sector
 31968                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31969                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31970                                  ;----------------------------------------------------------------------------
 31971                                  
 31972                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31973                                  ;----------------------------------------------------------------------------
 31974                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 31975                                  ;	It gets the specified sector into one of the I/O buffers
 31976                                  ;	and shuffles the queue. We need a special entry point so that
 31977                                  ;	we can read the alternate FAT sector if the first read fails, also
 31978                                  ;	so we can mark the buffer as a FAT sector.
 31979                                  ; 
 31980                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31981                                  ;		       ELSE no pre-read
 31982                                  ;		(DX) = Desired physical sector number	     (LOW)
 31983                                  ;		(SI) != 0
 31984                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31985                                  ;		(ES:BP) = Pointer to drive parameters
 31986                                  ;		ALLOWED set in case of INT 24
 31987                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31988                                  ;		'C' clear if OK
 31989                                  ;		CUR ddBUF Points to the Buffer for the sector
 31990                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31991                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31992                                  ;----------------------------------------------------------------------------
 31993                                  
 31994                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 31995                                  GETBUFFRC:
 31996 000058BD C706[0706]0000          	mov	word [HIGH_SECTOR],0
 31997                                  GETBUFFRA:
 31998 000058C3 30C0                    	xor	al,al
 31999 000058C5 BE0100                  	mov	si,1
 32000 000058C8 EB09                    	jmp	short GETBUFFRB
 32001                                  
 32002                                  	; 22/09/2023
 32003                                  GETBUFFER:
 32004 000058CA 30C0                    	xor	al,al
 32005                                  GETBUFFRD:
 32006                                  	;mov	byte [ALLOWED],18h
 32007 000058CC C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32008                                  
 32009                                  	; 20/05/2019 - Retro DOS v4.0
 32010                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32011                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32012                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32013                                  GETBUFFR:
 32014 000058D1 31F6                    	XOR	SI,SI
 32015                                  
 32016                                  ;	This entry point is called for FAT buffering with SI != 0
 32017                                  
 32018                                  GETBUFFRB:
 32019 000058D3 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32020                                  	; 15/12/2022
 32021 000058D6 268A4600                	mov	al,[ES:BP]
 32022                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32023                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32024 000058DA C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32025                                  	; MSDOS 6.0
 32026                                  ;hkn; SS override
 32027 000058DE 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32028                                  
 32029                                  ;	See if this is the buffer that was most recently returned.
 32030                                  ;	A big performance win if it is.
 32031                                  
 32032 000058E3 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32033 000058E6 7412                    	je	short getb5			; No
 32034                                  	;cmp	dx,[di+6]
 32035 000058E8 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32036 000058EB 750D                    	JNZ	short getb5			; Wrong sector
 32037                                  	
 32038                                  	; MSDOS 6.0
 32039                                  	;cmp	cx,[di+8]
 32040 000058ED 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32041 000058F0 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32042                                  	
 32043                                  	;cmp	al,[di+4]
 32044 000058F2 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32045                                  	;JZ	getb35				; Just asked for same buffer
 32046 000058F5 7503                    	jnz	short getb5
 32047                                  	;jmp	getb35
 32048                                  	; 17/12/2022
 32049                                  	; 28/07/2019
 32050 000058F7 E9C700                  	jmp	getb35x
 32051                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32052                                  	;jmp	getb35
 32053                                  
 32054                                  ;	It's not the buffer most recently returned. See if it's in the
 32055                                  ;	cache.
 32056                                  ;
 32057                                  ;	(cx:dx) = sector #
 32058                                  ;	(al) = drive #
 32059                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32060                                  ;	??? list may be incomplete ???
 32061                                  
 32062                                  getb5:	
 32063                                  	; MSDOS 3.3
 32064                                  	;lds	di,[SS:BUFFHEAD]
 32065                                  	; MSDOS 6.0
 32066 000058FA E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32067                                  getb10:	
 32068                                  	;cmp	dx,[di+6]
 32069 000058FD 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32070 00005900 750D                    	jne	short getb12			; wrong sector lo
 32071                                  	
 32072                                  	; MSDOS 6.0
 32073                                  	;cmp	cx,[di+8]
 32074 00005902 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32075 00005905 7508                    	jne	short getb12			; wrong sector hi
 32076                                  	
 32077                                  	;cmp	al,[di+4]
 32078 00005907 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32079                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32080 0000590A 7503                    	jne	short getb12
 32081 0000590C E98C00                  	jmp	getb25
 32082                                  getb12:	
 32083                                  	; MSDOS 3.3
 32084                                  	;;mov	di,[DI]
 32085                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32086                                  	;
 32087                                  	; 15/08/2018
 32088                                  	;lds	di,[di]
 32089                                  
 32090                                  	;cmp	di,-1 ; 0FFFFh
 32091                                  	;jne	short getb10
 32092                                  	;lds	di,[SS:BUFFHEAD]
 32093                                  
 32094                                  	; MSDOS 6.0
 32095 0000590F 8B3D                    	mov	di,[di]
 32096                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32097 00005911 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32098 00005916 75E5                    	jne	short getb10			; no, continue looking
 32099                                  
 32100                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32101                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32102                                  ;	new sector into it.
 32103                                  ;
 32104                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32105                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32106                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32107                                  ;	down a chain, but should be hashed.
 32108                                  ;
 32109                                  ;	(DS:DI) = first buffer in the queue
 32110                                  ;	(CX:DX) = sector # we want
 32111                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32112                                  
 32113                                  	; MSDOS 3.3 & MSDOS 6.0
 32114                                  ;hkn; SS override
 32115 00005918 51                      	PUSH	CX  ; MSDOS 6.0
 32116 00005919 56                      	push	si
 32117 0000591A 52                      	push	dx
 32118 0000591B 55                      	push	bp
 32119 0000591C 06                      	push	es
 32120 0000591D E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32121 00005920 07                      	pop	es
 32122 00005921 5D                      	pop	bp
 32123 00005922 5A                      	pop	dx
 32124 00005923 5E                      	pop	si
 32125 00005924 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32126                                  	;jc	short getbx			; if got hard error
 32127 00005929 7303                    	jnc	short getb13
 32128 0000592B E99D00                  	jmp	getbx
 32129                                  
 32130                                  getb13:
 32131                                  	; MSDOS 6.0
 32132 0000592E E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32133                                  
 32134                                  ;	We're ready to read in the buffer, if need be. If the caller
 32135                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32136                                  
 32137 00005931 30E4                    	XOR	AH,AH				; initial flags
 32138                                  ;hkn; SS override
 32139                                  	;test	byte [ss:PREREAD],0FFh
 32140                                  	;jnz	short getb20
 32141 00005933 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32142 00005938 7549                    	JNZ	short getb20			; no, we're done
 32143                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32144                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32145 0000593A 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32146                                  	;MOV	CX,1
 32147                                  	; 22/09/2023
 32148 0000593D 29C9                    	sub	cx,cx ; 0
 32149 0000593F 56                      	push	si
 32150 00005940 57                      	push	di
 32151 00005941 52                      	push	dx
 32152                                  	; MSDOS 6.0
 32153 00005942 06                      	push	es ; ***
 32154                                  
 32155                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32156                                  ;	this point. -mrw 10/88
 32157                                  	
 32158                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32159                                  	; 22/09/2023
 32160 00005943 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32161 00005948 7407                    	jz	short getb14
 32162 0000594A 1E                      	push	ds ; **
 32163 0000594B 53                      	push	bx ; *
 32164 0000594C 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32165                                  getb14:
 32166                                  ;M039: Eliminated redundant HMA code.
 32167                                  
 32168                                  	; 22/09/2023
 32169 00005951 41                      	inc	cx ; cx = 1
 32170                                  
 32171                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32172 00005952 09F6                    	OR	SI,SI			; FAT sector ?
 32173 00005954 7407                    	JZ	short getb15		
 32174                                  
 32175 00005956 E80DDD                  	call	FATSECRD
 32176                                  	;mov	ah,2
 32177 00005959 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32178                                  
 32179 0000595B EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32180                                  
 32181                                  getb15:
 32182 0000595D E832DD                  	call	DREAD			; Buffer is marked free if read barfs
 32183 00005960 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32184                                  getb17:
 32185                                  	; 17/12/2022	
 32186                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32187                                  ;%if 0
 32188                                  	; MSDOS 6.0							  ;I001
 32189 00005962 9C                      	pushf								  ;I001
 32190 00005963 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32191 00005969 7411                    	jz	short not_in_hma	; no				  ;I001
 32192                                  	;mov	cx,[es:bp+2]
 32193 0000596B 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32194 0000596F D1E9                    	shr	cx,1							  ;I001
 32195 00005971 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32196 00005972 89DE                    	mov	si,bx							  ;I001
 32197 00005974 5F                      	pop	di ; *							  ;I001
 32198 00005975 07                      	pop	es ; **							  ;I001
 32199 00005976 FC                      	cld								  ;I001
 32200 00005977 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32201 00005978 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32202 0000597A 06                      	push	es							  ;I001
 32203 0000597B 1F                      	pop	ds							  ;I001
 32204                                  ;%endif
 32205                                  
 32206                                  ; 17/12/2022
 32207                                  %if 0
 32208                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32209                                  	; MSDOS 5.0
 32210                                  	pushf
 32211                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32212                                  	jz	short not_in_hma	; no
 32213                                  	popf
 32214                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32215                                  	shr	cx,1
 32216                                  	mov	si,bx
 32217                                  	pop	di ; *
 32218                                  	pop	es ; **
 32219                                  	cld
 32220                                  	rep	movsw
 32221                                  	push	es
 32222                                  	pop	ds
 32223                                  	jmp	short getb19 ; 27/11/2022
 32224                                  %endif
 32225                                  
 32226                                  not_in_hma:								  ;I001
 32227 0000597C 9D                      	popf							 	  ;I001
 32228                                  getb19:
 32229 0000597D 07                      	pop	es ; ***
 32230 0000597E 5A                      	pop	dx
 32231 0000597F 5F                      	pop	di
 32232 00005980 5E                      	pop	si
 32233 00005981 7248                    	JC	short getbx
 32234                                  
 32235                                  ;	The buffer has the data setup in it (if we were to read)
 32236                                  ;	Setup the various buffer fields
 32237                                  ;
 32238                                  ;	(ds:di) = buffer address
 32239                                  ;	(es:bp) = DPB address
 32240                                  ;	(HIGH_SECTOR:DX) = sector #
 32241                                  ;	(ah) = BUF_FLAGS value
 32242                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32243                                  
 32244                                  ;hkn; SS override
 32245                                  getb20:	; MSDOS 6.0
 32246 00005983 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32247                                  	;mov	[di+8],cx
 32248 00005988 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32249                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32250                                   	;mov	[di+6],dx
 32251 0000598B 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32252                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32253                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32254 0000598E 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32255                                  	;;mov	[di+0Ch],es
 32256                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32257 00005991 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32258                                  	; 15/12/2022
 32259 00005994 268A4600                	mov	al,[es:bp]
 32260                                  	;mov	al,[es:bp+0]
 32261                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32262                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32263                                  	;mov	[di+4],ax
 32264 00005998 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32265                                  getb25:	
 32266                                  	; MSDOS 3.3
 32267                                  	;mov     ax,1
 32268                                  
 32269                                  	; MSDOS 6.0
 32270                                  	;mov	byte [di+0Ah],1
 32271 0000599B C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32272 0000599F 31C0                    	XOR	AX,AX
 32273                                  
 32274                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32275 000059A1 09F6                    	OR	SI,SI				; FAT sector ?
 32276 000059A3 740B                    	JZ	short getb30
 32277                                  
 32278                                  	;mov	al,[es:bp+8]
 32279 000059A5 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32280                                  	
 32281                                  	; MSDOS 6.0
 32282 000059A9 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32283                                  	;mov	ax,[es:bp+0Fh]
 32284 000059AC 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32285                                  						;  sectors
 32286                                  	; MSDOS 3.3
 32287                                  	;;mov	ah,[es:bp+0Fh]
 32288                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32289                                  
 32290                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32291                                  ;		is set
 32292                                  
 32293                                  getb30:	
 32294                                  	; MSDOS 6.0
 32295                                  	;mov	[di+0Bh],ax
 32296 000059B0 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32297                                  
 32298                                  	; MSDOS 3.3
 32299                                  	;;mov	[di+8],ax ; 15/08/2018	
 32300                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32301                                  
 32302 000059B3 E8BBFE                  	CALL	PLACEBUF
 32303                                  
 32304                                  ;hkn; SS override for next 4
 32305                                  getb35: 
 32306                                  	; 17/12/2022
 32307                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32308                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32309                                  	;MOV	[SS:CURBUF+2],DS
 32310                                  	;MOV	[SS:LastBuffer+2],DS
 32311                                  	;MOV	[SS:CURBUF],DI
 32312                                  	;MOV	[SS:LastBuffer],DI
 32313                                  	;CLC
 32314                                  
 32315                                  	; 17/12/2022
 32316                                  	; 07/12/2022
 32317                                  	; Retro DOS v4.0
 32318 000059B6 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32319 000059BB 36893E[1E00]            	mov	[ss:LastBuffer],di
 32320 000059C0 F8                      	clc
 32321                                  getb35x: ; 28/07/2019
 32322 000059C1 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32323 000059C6 36893E[E205]            	MOV	[ss:CURBUF],di
 32324                                  
 32325                                  ;	Return with 'C' set appropriately
 32326                                  ;	(dx) = caller's original value
 32327                                  
 32328                                  getbx:	
 32329 000059CB 16                      	push	ss
 32330 000059CC 1F                      	pop	ds
 32331                                  	;retn
 32332                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32333                                  getbuffrb_retn:
 32334                                  ;flushbuf_retn:	; 17/12/2022
 32335 000059CD C3                      	retn
 32336                                  
 32337                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32338                                  ;----------------------------------------------------------------------------
 32339                                  ; Input:
 32340                                  ;	DS = DOSGROUP
 32341                                  ;	AL = Physical unit number local buffers only
 32342                                  ;	   = -1 for all units and all remote buffers
 32343                                  ; Function:
 32344                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32345                                  ;	Carry set if error (user FAILed to I 24)
 32346                                  ;	    Flush operation completed.
 32347                                  ; DS Preserved, all others destroyed (ES too)
 32348                                  ;----------------------------------------------------------------------------
 32349                                  
 32350                                  	; 20/05/2019 - Retro DOS v4.0
 32351                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32352                                  
 32353                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32354                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32355                                  FLUSHBUF:
 32356                                  	; MSDOS 3.3
 32357                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32358                                  	;lds	di,[BUFFHEAD]
 32359                                  
 32360                                  	; MSDOS 6.0
 32361 000059CE E887FE                  	call	GETCURHEAD
 32362                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32363 000059D1 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32364 000059D7 7508                    	jnz	short scan_buf_queue
 32365 000059D9 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32366 000059DF 7423                    	je	short end_scan
 32367                                  	
 32368                                  scan_buf_queue:
 32369 000059E1 E82900                  	call	CHECKFLUSH
 32370                                  	;push	ax  ; MSDOS 3.3
 32371                                  	; MSDOS 6.0
 32372                                  	;mov	ah,[di+4]
 32373 000059E4 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32374 000059E7 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32375 000059EC 7408                    	je	short free_the_buf
 32376                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32377 000059EE 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32378 000059F4 7405                    	jz	short dont_free_the_buf
 32379                                  	; MSDOS 3.3
 32380                                  	;;mov	al,[di+4]
 32381                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32382                                  	;cmp	[SS:WPERR],al					;hkn;
 32383                                  	; 15/08/2018
 32384                                  	;jne	short dont_free_the_buf	
 32385                                  free_the_buf:
 32386                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32387 000059F6 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32388                                  dont_free_the_buf:
 32389                                  	;pop	ax  ; MSDOS 3.3 	   	
 32390                                  
 32391                                  	; MSDOS 3.3
 32392                                  	;mov	di,[DI]
 32393                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32394                                  	;
 32395                                  	; 15/08/2018
 32396                                  	;lds	di,[di]
 32397                                  	;
 32398                                  	;cmp	di,-1 ; 0FFFFh
 32399                                  	;jnz	short scan_buf_queue 
 32400                                  	
 32401                                  	; MSDOS 6.0
 32402 000059FB 8B3D                    	mov	di,[di]
 32403                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32404 000059FD 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32405 00005A02 75DD                    	jne	short scan_buf_queue
 32406                                  
 32407                                  end_scan:
 32408 00005A04 16                      	push	ss
 32409 00005A05 1F                      	pop	ds
 32410                                  	; 01/08/2018 - Retro DOS v3.0
 32411                                  	;cmp	byte [FAILERR],0
 32412                                  	;jne	short bad_flush
 32413                                  	;retn
 32414                                  ;bad_flush:
 32415                                  	;stc
 32416                                  	;retn
 32417                                  
 32418                                  	; 17/12/2022
 32419                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32420                                  	; 01/08/2018 - Retro DOS v3.0
 32421 00005A06 803E[4A03]01            	cmp	byte [FAILERR],1
 32422 00005A0B F5                      	cmc
 32423                                  flushbuf_retn:
 32424 00005A0C C3                      	retn
 32425                                  	
 32426                                  	; 17/12/2022
 32427                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32428                                  	;cmp	byte [FAILERR],0
 32429                                  	;jne	short bad_flush
 32430                                  	;retn
 32431                                  ;bad_flush:
 32432                                  	;stc
 32433                                  	;retn
 32434                                  
 32435                                  ;----------------------------------------------------------------------------
 32436                                  ;
 32437                                  ; Procedure Name : CHECKFLUSH
 32438                                  ;
 32439                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32440                                  ;	   DS:DI - pointer to buffer
 32441                                  ;
 32442                                  ; Function : Write out a buffer if it is dirty
 32443                                  ;
 32444                                  ; Carry set if problem (currently user FAILed to I 24)
 32445                                  ;
 32446                                  ;----------------------------------------------------------------------------
 32447                                  
 32448                                  CHECKFLUSH:
 32449                                  	; MSDOS 6.0
 32450 00005A0D B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 32451                                  	;cmp	[di+4],ah
 32452 00005A0F 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32453 00005A12 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32454 00005A14 38C4                    	CMP	AH,AL			; 
 32455 00005A16 7406                    	JZ	short DOBUFFER		; do this buffer
 32456                                  	;cmp	al,[di+4]
 32457 00005A18 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32458 00005A1B F8                      	CLC
 32459 00005A1C 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32460                                  DOBUFFER:
 32461                                  	;test	byte [di+5],40h
 32462 00005A1E F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32463 00005A22 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32464 00005A24 50                      	PUSH	AX
 32465                                  	;push	word [di+4]
 32466 00005A25 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32467 00005A28 E80B00                  	CALL	BUFWRITE
 32468 00005A2B 58                      	POP	AX
 32469 00005A2C 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32470                                  	;and	ah,0BFh
 32471 00005A2E 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32472                                  	;mov	[di+4],ax
 32473 00005A31 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32474                                  LEAVE_BUF:
 32475 00005A34 58                      	POP	AX			; Search info
 32476                                  checkflush_retn:
 32477 00005A35 C3                      	retn
 32478                                  
 32479                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32480                                  ;----------------------------------------------------------------------------
 32481                                  ;
 32482                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32483                                  ;
 32484                                  ;	ENTRY	DS:DI Points to the buffer
 32485                                  ;
 32486                                  ;	EXIT	Buffer marked free
 32487                                  ;		Carry set if error (currently user FAILed to I 24)
 32488                                  ;
 32489                                  ;	USES	All buf DS:DI
 32490                                  ;		HIGH_SECTOR
 32491                                  ;----------------------------------------------------------------------------
 32492                                  
 32493                                  	; 20/05/2019 - Retro DOS v4.0
 32494                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32495                                  
 32496                                  
 32497                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32498                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32499                                  
 32500                                  BUFWRITE:
 32501                                  	; 10/09/2018
 32502                                  	; 01/08/2018 - Retro DOS v3.0
 32503                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32504 00005A36 B8FF00                  	MOV	AX,00FFH
 32505                                  	;xchg	ax,[di+4]
 32506 00005A39 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32507 00005A3C 3CFF                    	CMP	AL,0FFH
 32508 00005A3E 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32509                                  	;test	ah,40h
 32510 00005A40 F6C440                  	test	AH,buf_dirty
 32511 00005A43 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32512                                  	; MSDOS 6.0
 32513 00005A45 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32514                                  
 32515                                  ;hkn; SS override
 32516 00005A48 363A06[2203]            	CMP	AL,[SS:WPERR]
 32517 00005A4D 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32518                                  
 32519                                  ;hkn; SS override
 32520                                  	; MSDOS 6.0
 32521 00005A4F 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32522                                  	
 32523                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32524                                  	;les	bp,[di+13] ; MSDOS 6.0
 32525 00005A53 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32526                                  	;;lea	bx,[di+16]
 32527                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32528 00005A56 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32529                                  	;mov	dx,[di+6]
 32530 00005A59 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32531                                  	
 32532                                  	; MSDOS 6.0
 32533                                  	;mov	cx,[di+8]
 32534 00005A5C 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32535                                  
 32536                                  ;hkn; SS override
 32537 00005A5F 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32538 00005A64 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32539                                  	; MSDOS 3.3
 32540                                  	;; mov	cx,[DI+8]
 32541                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32542                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32543 00005A67 30ED                    	XOR	CH,CH
 32544                                  	;;mov	ah,ch ; MSDOS 3.3
 32545                                  
 32546                                  ;hkn; SS override for ALLOWED
 32547                                  	;mov	byte [SS:ALLOWED],18h
 32548 00005A69 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32549                                  	;test	byte [di+5],8
 32550                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32551                                  	;test	ah,8
 32552 00005A6F F6C408                  	test	AH,buf_isDATA
 32553 00005A72 7406                    	JZ	short NO_IGNORE
 32554                                  	;or	byte [SS:ALLOWED],20h
 32555 00005A74 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32556                                  NO_IGNORE:
 32557                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32558                                  	; MSDOS 6.0
 32559                                  	;mov	ax,[di+11]
 32560 00005A7A 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32561                                  
 32562 00005A7D 57                      	PUSH	DI		; Save buffer pointer
 32563 00005A7E 31FF                    	XOR	DI,DI		; Indicate failure
 32564                                  
 32565 00005A80 1E                      	push	ds ; *
 32566 00005A81 53                      	push	bx ; **
 32567                                  WRTAGAIN:
 32568 00005A82 57                      	push	di ; ***
 32569 00005A83 51                      	push	cx ; ****
 32570 00005A84 50                      	push	ax ; *****
 32571                                  	;MOV	CX,1
 32572                                  	; 17/12/2022
 32573                                  	; ch = 0
 32574 00005A85 B101                    	mov	cl,1 ; 24/07/2019
 32575                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32576                                  	;mov	cx,1
 32577 00005A87 53                      	push	bx ; ******
 32578 00005A88 52                      	push	dx ; *******
 32579 00005A89 1E                      	push	ds ; ********
 32580                                  
 32581                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32582                                  
 32583                                  	; MSDOS 6.0
 32584                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32585                                  	; 22/09/2023
 32586 00005A8A 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32587 00005A8F 7418                    	jz	short NBUFFINHMA
 32588 00005A91 51                      	push	cx
 32589 00005A92 06                      	push	es
 32590 00005A93 89DE                    	mov	si,bx
 32591 00005A95 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32592 00005A99 D1E9                    	shr	cx,1
 32593 00005A9B 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32594 00005AA0 89FB                    	mov	bx,di
 32595 00005AA2 FC                      	cld
 32596 00005AA3 F3A5                    	rep	movsw
 32597 00005AA5 06                      	push	es
 32598 00005AA6 1F                      	pop	ds
 32599 00005AA7 07                      	pop	es
 32600 00005AA8 59                      	pop	cx
 32601                                  NBUFFINHMA:
 32602 00005AA9 E846DC                  	call	DWRITE		; Write out the dirty buffer
 32603 00005AAC 1F                      	pop	ds ; ********
 32604 00005AAD 5A                      	pop	dx ; *******
 32605 00005AAE 5B                      	pop	bx ; ******
 32606 00005AAF 58                      	pop	ax ; *****
 32607 00005AB0 59                      	pop	cx ; ****
 32608 00005AB1 5F                      	pop	di ; ***
 32609 00005AB2 7201                    	JC	short NOSET
 32610 00005AB4 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32611                                  NOSET:				;	succeedes.
 32612 00005AB5 01C2                    	ADD	DX,AX
 32613 00005AB7 E2C9                    	LOOP	WRTAGAIN
 32614 00005AB9 5B                      	pop	bx ; **
 32615 00005ABA 1F                      	pop	ds ; *
 32616                                  	;OR	DI,DI		; Clears carry
 32617                                  	;JNZ	short BWROK	; At least one write worked
 32618                                  	;STC			; DI never got INCed, all writes failed.
 32619                                  	; 22/09/2023
 32620 00005ABB 83FF01                  	cmp	di,1
 32621                                  BWROK:	
 32622 00005ABE 5F                      	POP	DI
 32623 00005ABF C3                      	retn
 32624                                  
 32625                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32626                                  ;----------------------------------------------------------------------------
 32627                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32628                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32629                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32630                                  ;	code and time
 32631                                  ;
 32632                                  ;	ENTRY	ES:BP = drive parameter block
 32633                                  ;
 32634                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32635                                  ;		[SC_DRIVE]= drive #
 32636                                  ;
 32637                                  ;	USES	Flags
 32638                                  ;----------------------------------------------------------------------------
 32639                                  
 32640                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32641                                  ; 04/05/2019 - Retro DOS v4.0
 32642                                  
 32643                                  SET_RQ_SC_PARMS:
 32644                                  ;hkn; SS override for all variables used in this procedure.
 32645 00005AC0 50                      	push	ax
 32646                                  	;mov	ax,[es:bp+2]
 32647 00005AC1 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32648 00005AC5 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32649                                  	;;mov	al,[es:bp+0]
 32650                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32651                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32652                                  	; 15/12/2022
 32653 00005AC9 268A4600                	mov	al,[ES:BP]
 32654 00005ACD 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32655 00005AD1 58                      	pop	ax
 32656                                  srspx:	
 32657 00005AD2 C3                      	retn					;LB. return
 32658                                  
 32659                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32660                                  ;----------------------------------------------------------------------------
 32661                                  ; Input:
 32662                                  ;	none
 32663                                  ; Function:
 32664                                  ;	increment dirty buffers count
 32665                                  ; Output:
 32666                                  ;	dirty buffers count is incremented
 32667                                  ;
 32668                                  ; All registers preserved
 32669                                  ;----------------------------------------------------------------------------
 32670                                  
 32671                                  INC_DIRTY_COUNT:
 32672                                  ;; BUGBUG  ---- remove this routine
 32673                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32674 00005AD3 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32675 00005AD8 C3                      	retn
 32676                                  
 32677                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32678                                  ;----------------------------------------------------------------------------
 32679                                  ; Input:
 32680                                  ;	none
 32681                                  ; Function:
 32682                                  ;	decrement dirty buffers count
 32683                                  ; Output:
 32684                                  ;	dirty buffers count is decremented
 32685                                  ;
 32686                                  ; All registers preserved
 32687                                  ;----------------------------------------------------------------------------
 32688                                  
 32689                                  DEC_DIRTY_COUNT:
 32690 00005AD9 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32691 00005ADF 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32692 00005AE1 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32693                                  					; error condition to underflow here? ;hkn;
 32694                                  ddcx:	
 32695 00005AE6 C3                      	retn
 32696                                  
 32697                                  ;============================================================================
 32698                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32699                                  ;============================================================================
 32700                                  ; 02/08/2018 - Retro DOS v3.0
 32701                                  ; 29/04/2019 - Retro DOS v4.0
 32702                                  
 32703                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32704                                  
 32705                                  ; Pseudo EXEC system call for DOS
 32706                                  
 32707                                  ;	TITLE	MSPROC - process maintenance
 32708                                  ;	NAME	MSPROC
 32709                                  
 32710                                  ; =========================================================================
 32711                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32712                                  ;	I/O specs are defined in DISPATCH.
 32713                                  ;
 32714                                  ;	$WAIT
 32715                                  ;	$EXEC
 32716                                  ;	$Keep_process
 32717                                  ;	Stay_resident
 32718                                  ;	$EXIT
 32719                                  ;	$ABORT
 32720                                  ;	abort_inner
 32721                                  ;
 32722                                  ;	Modification history:
 32723                                  ;
 32724                                  ;		Created: ARR 30 March 1983
 32725                                  ;		AN000	version 4.0 jan. 1988
 32726                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32727                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32728                                  ;
 32729                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32730                                  ;
 32731                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32732                                  ;		       dossym.inc. 7/30/90
 32733                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32734                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32735                                  ;		       stack is provided at the end of the program. Note that
 32736                                  ;		       only SP is changed.
 32737                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32738                                  ;
 32739                                  ;		M028 - 4b04 implementation
 32740                                  ;
 32741                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32742                                  ;			in memory block >= 64K, sp = 0. If memory block
 32743                                  ;			obtained is <64K, point sp at the end of the memory
 32744                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32745                                  ;			added for a stack segment which may be needed if it
 32746                                  ;			is loaded in low memory situations.
 32747                                  ;
 32748                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32749                                  ;
 32750                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32751                                  ;			a bad environment if it reached 32767 bytes. Changed
 32752                                  ;			to allow 32768 bytes of environment.
 32753                                  ;
 32754                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32755                                  ;		       COM file high. Also ensure that if the biggest block
 32756                                  ;		       into which we load the com file is less than 64K then
 32757                                  ;		       we provide atleast 256 bytes of stack to the user.
 32758                                  ;
 32759                                  ;		M050 - Made Lie table search CASE insensitive
 32760                                  ;
 32761                                  ;		M060 - Removed special version table from the kernal and
 32762                                  ;                      put it in a device drive which puts the address
 32763                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32764                                  ;		       as a DWORD.
 32765                                  ;
 32766                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32767                                  ;		       entry do not try to load low if there is no space in
 32768                                  ;		       UMBs.
 32769                                  ;
 32770                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32771                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32772                                  ;		       change return address to LeaveDos if AL=5.
 32773                                  ;
 32774                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32775                                  ;                      controls building a version of MSDOS.SYS that only
 32776                                  ;                      runs programs from a fixed list (defined in the
 32777                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32778                                  ;                      for details.  This feature is used to build a
 32779                                  ;                      "special" version of DOS that can be handed out to
 32780                                  ;                      OEM/ISV customers as part of a "service" disk.
 32781                                  ;
 32782                                  ; =========================================================================
 32783                                  
 32784                                  ;SAVEXIT  EQU  10
 32785                                  
 32786                                  ;BREAK	<$WAIT - return previous process error code>
 32787                                  ; =========================================================================
 32788                                  ;	$WAIT - Return previous process error code.
 32789                                  ;
 32790                                  ;	Assembler usage:
 32791                                  ;
 32792                                  ;	    MOV     AH, WaitProcess
 32793                                  ;	    INT     int_command
 32794                                  ;
 32795                                  ;	ENTRY	none
 32796                                  ;	EXIT	(ax) = exit code
 32797                                  ;	USES	all
 32798                                  ; =========================================================================
 32799                                  
 32800                                  	; 20/05/2019 - Retro DOS v4.0
 32801                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32802                                  
 32803                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32804                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32805                                  _$WAIT:
 32806                                  	; 02/08/2018 - Retro DOS v3.0
 32807                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32808                                  
 32809 00005AE7 31C0                    	xor	AX,AX
 32810 00005AE9 368706[3403]            	xchg	AX,[ss:exit_code]
 32811 00005AEE E94AAB                  	jmp	SYS_RET_OK
 32812                                  
 32813                                  ; =========================================================================
 32814                                  ;BREAK <$exec - load/go a program>
 32815                                  ;	EXEC.ASM - EXEC System Call
 32816                                  ;
 32817                                  ;
 32818                                  ; Assembler usage:
 32819                                  ;	    lds     DX, Name
 32820                                  ;	    les     BX, Blk
 32821                                  ;	    mov     AH, Exec
 32822                                  ;	    mov     AL, FUNC
 32823                                  ;	    int     INT_COMMAND
 32824                                  ;
 32825                                  ;	AL  Function
 32826                                  ;	--  --------
 32827                                  ;	 0  Load and execute the program.
 32828                                  ;	 1  Load, create the program header but do not
 32829                                  ;	    begin execution.
 32830                                  ;	 3  Load overlay. No header created.
 32831                                  ;
 32832                                  ;	    AL = 0 -> load/execute program
 32833                                  ;
 32834                                  ;	    +---------------------------+
 32835                                  ;	    | WORD segment address of	|
 32836                                  ;	    | environment.		|
 32837                                  ;	    +---------------------------+
 32838                                  ;	    | DWORD pointer to ASCIZ	|
 32839                                  ;	    | command line at 80h	|
 32840                                  ;	    +---------------------------+
 32841                                  ;	    | DWORD pointer to default	|
 32842                                  ;	    | FCB to be passed at 5Ch	|
 32843                                  ;	    +---------------------------+
 32844                                  ;	    | DWORD pointer to default	|
 32845                                  ;	    | FCB to be passed at 6Ch	|
 32846                                  ;	    +---------------------------+
 32847                                  ;
 32848                                  ;	    AL = 1 -> load program
 32849                                  ;
 32850                                  ;	    +---------------------------+
 32851                                  ;	    | WORD segment address of	|
 32852                                  ;	    | environment.		|
 32853                                  ;	    +---------------------------+
 32854                                  ;	    | DWORD pointer to ASCIZ	|
 32855                                  ;	    | command line at 80h	|
 32856                                  ;	    +---------------------------+
 32857                                  ;	    | DWORD pointer to default	|
 32858                                  ;	    | FCB to be passed at 5Ch	|
 32859                                  ;	    +---------------------------+
 32860                                  ;	    | DWORD pointer to default	|
 32861                                  ;	    | FCB to be passed at 6Ch	|
 32862                                  ;	    +---------------------------+
 32863                                  ;	    | DWORD returned value of	|
 32864                                  ;	    | CS:IP			|
 32865                                  ;	    +---------------------------+
 32866                                  ;	    | DWORD returned value of	|
 32867                                  ;	    | SS:IP			|
 32868                                  ;	    +---------------------------+
 32869                                  ;
 32870                                  ;	    AL = 3 -> load overlay
 32871                                  ;
 32872                                  ;	    +---------------------------+
 32873                                  ;	    | WORD segment address where|
 32874                                  ;	    | file will be loaded.	|
 32875                                  ;	    +---------------------------+
 32876                                  ;	    | WORD relocation factor to |
 32877                                  ;	    | be applied to the image.	|
 32878                                  ;	    +---------------------------+
 32879                                  ;
 32880                                  ; Returns:
 32881                                  ;	    AX = error_invalid_function
 32882                                  ;	       = error_bad_format
 32883                                  ;	       = error_bad_environment
 32884                                  ;	       = error_not_enough_memory
 32885                                  ;	       = error_file_not_found
 32886                                  ; =========================================================================
 32887                                  ;
 32888                                  ;   Revision history:
 32889                                  ;
 32890                                  ;	 A000	version 4.00  Jan. 1988
 32891                                  ;
 32892                                  ; =========================================================================
 32893                                  
 32894                                  Exec_Internal_Buffer		EQU	OPENBUF
 32895                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32896                                  
 32897                                  ; =========================================================================
 32898                                  
 32899                                  ;IF1		; warning message on buffers
 32900                                  ;%out	Please make sure that the following are contiguous and of the
 32901                                  ;%out	following sizes:
 32902                                  ;%out
 32903                                  ;%out	OpenBuf     128
 32904                                  ;%out	RenBuf	    128
 32905                                  ;%out	SearchBuf    53
 32906                                  ;%out	DummyCDS    curdirLen
 32907                                  ;ENDIF
 32908                                  
 32909                                  ; =========================================================================
 32910                                  
 32911                                  ; =========================================================================
 32912                                  ;
 32913                                  ; =========================================================================
 32914                                  
 32915                                  	; 20/05/2019 - Retro DOS v4.0
 32916                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32917                                  
 32918                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32919                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32920                                  	
 32921                                  _$EXEC:
 32922                                  	; 02/08/2018 - Retro DOS v3.0
 32923                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32924                                  
 32925                                  EXEC001S:
 32926                                  	;LocalVar    Exec_Blk		,DWORD
 32927                                  	;LocalVar    Exec_Func		,BYTE
 32928                                  	;LocalVar    Exec_Load_High	,BYTE
 32929                                  	;LocalVar    Exec_FH		,WORD
 32930                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32931                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32932                                  	;LocalVar    Exec_Environ	,WORD
 32933                                  	;LocalVar    Exec_Size		,WORD
 32934                                  	;LocalVar    Exec_Load_Block	,WORD
 32935                                  	;LocalVar    Exec_DMA		,WORD
 32936                                  	;LocalVar    ExecNameLen 	,WORD
 32937                                  	;LocalVar    ExecName		,DWORD
 32938                                  	;
 32939                                  	;LocalVar    Exec_DMA_Save	,WORD
 32940                                  	;LocalVar    Exec_NoStack	,BYTE
 32941                                  
 32942                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32943                                  	;%define	Exec_Blk	dword [bp-4]
 32944                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32945                                  	%define		Exec_BlkL	word [bp-4]	
 32946                                  	%define		Exec_BlkH	word [bp-2]
 32947                                  	%define		Exec_Func	byte [bp-5]
 32948                                  	%define		Exec_Load_High	byte [bp-6]
 32949                                  	%define		Exec_FH		word [bp-8]
 32950                                  	%define		Exec_Rel_Fac	word [bp-10]
 32951                                  	%define		Exec_Res_Len_Para word [bp-12]
 32952                                  	%define		Exec_Environ	word [bp-14]
 32953                                  	%define		Exec_Size	word [bp-16]
 32954                                  	%define		Exec_Load_Block	word [bp-18]
 32955                                  	%define		Exec_DMA	word [bp-20]
 32956                                  	%define		ExecNameLen	word [bp-22]
 32957                                  	;%define	ExecName	dword [bp-26]
 32958                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32959                                  	%define		ExecNameL	word [bp-26]	
 32960                                  	%define		ExecNameH	word [bp-24]
 32961                                  	; MSDOS 6.0
 32962                                  	%define		Exec_DMA_Save	word [bp-28]
 32963                                  	%define		Exec_NoStack	byte [bp-29]
 32964                                  	
 32965                                  	; ==================================================================
 32966                                  	; validate function
 32967                                  	; ==================================================================
 32968                                  		      	
 32969                                  	; M068 - Start
 32970                                  	;
 32971                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32972                                  	; possibility that the count may not be decremented all the way to
 32973                                  	; 0. A typical case is if the program for which we intended to keep 
 32974                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32975                                  	; calls), exits pre-maturely due to error conditions.
 32976                                  
 32977                                  	; MSDOS 6.0
 32978 00005AF1 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32979                                  
 32980                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32981                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32982                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32983                                  
 32984 00005AF7 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32985                                  	;jne	short @f
 32986 00005AF9 7505                    	jne	short Exec_@f		; N: continue
 32987                                  					; Y: change ret addr. to LeaveDos.
 32988 00005AFB 59                      	pop	cx			; Note CX is not input to ExecReady
 32989 00005AFC B9[0804]                	mov	cx,LeaveDOS
 32990 00005AFF 51                      	push	cx
 32991                                  ;@@:
 32992                                  Exec_@f:
 32993                                  	; M068 - End
 32994                                  	
 32995                                  	;Enter
 32996                                  
 32997 00005B00 55                      	push	bp
 32998 00005B01 89E5                    	mov	bp,sp
 32999                                  	;;sub	sp,26	; MSDOS 3.3
 33000                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33001                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33002                                  	; 17/12/2022
 33003                                  	; 20/05/2019
 33004 00005B03 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33005                                  
 33006                                  	; MSDOS 6.0
 33007 00005B06 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33008                                  					; M030
 33009 00005B08 7614                    	jna	short Exec_Check_2
 33010                                  
 33011                                  	; MSDOS 3.3
 33012                                  	;cmp	AL,3
 33013                                  	;jna	short Exec_Check_2
 33014                                  
 33015                                  Exec_Bad_Fun:
 33016 00005B0A 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33017                                  					; Extended Error Locus	;smr;SS Override
 33018                                  	;mov	al,1
 33019 00005B10 B001                    	mov	al,error_invalid_function
 33020                                  
 33021                                  Exec_Ret_Err:
 33022                                  	;Leave
 33023 00005B12 89EC                    	mov	sp,bp
 33024 00005B14 5D                      	pop	bp
 33025                                  	;transfer SYS_RET_ERR
 33026 00005B15 E92CAB                  	jmp	SYS_RET_ERR
 33027                                  
 33028                                  	; MSDOS 6.0
 33029                                  ExecReadyJ:
 33030 00005B18 E8FD17                  	call	ExecReady		; M028
 33031 00005B1B E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33032                                  
 33033                                  Exec_Check_2:
 33034 00005B1E 3C02                    	cmp	AL,2			
 33035 00005B20 74E8                    	je	short Exec_Bad_Fun
 33036                                  
 33037                                  	; MSDOS 6.0
 33038 00005B22 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33039 00005B24 74E4                    	je	short Exec_Bad_Fun
 33040                                  	
 33041 00005B26 3C05                    	cmp	al,5			; M028 ; M030
 33042 00005B28 74EE                    	je	short ExecReadyJ	; M028
 33043                                  
 33044                                  	;mov	[bp-4],bx
 33045 00005B2A 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33046                                  	;mov	[bp-2],es
 33047 00005B2D 8C46FE                  	mov	Exec_BlkH,ES
 33048                                  	;mov	[bp-5],al
 33049 00005B30 8846FB                  	mov	Exec_Func,AL
 33050                                  	;mov	byte [bp-6],0
 33051 00005B33 C646FA00                	mov	Exec_Load_High,0
 33052                                  
 33053                                  	;mov	[bp-26],dx
 33054 00005B37 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33055                                  	;mov	[bp-24],ds
 33056 00005B3A 8C5EE8                  	mov	ExecNameH,DS
 33057 00005B3D 89D6                    	mov	SI,DX			; move pointer to convenient place
 33058                                  	;invoke	DStrLen
 33059 00005B3F E8BCB6                  	call	DStrLen
 33060                                  	;mov	[bp-22],cx
 33061 00005B42 894EEA                  	mov	ExecNameLen,CX		; save length
 33062                                  
 33063                                  	; MSDOS 6.0
 33064 00005B45 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33065 00005B49 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33066                                  
 33067 00005B4D 30C0                    	xor	AL,AL			; open for reading
 33068 00005B4F 55                      	push	BP
 33069                                  
 33070                                  	; MSDOS 6.0
 33071                                  	;or	byte [ss:DOS_FLAG],1
 33072 00005B50 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33073                                  					; the redir that this open call is
 33074                                  					; due to an exec.
 33075                                  
 33076                                  	;invoke	$OPEN			; is the file there?
 33077 00005B56 E80513                  	call	_$OPEN
 33078                                  
 33079                                  	; MSDOS 6.0
 33080 00005B59 9C                      	pushf
 33081                                  	; 02/06/2019
 33082                                  	;and	byte [ss:DOS_FLAG],0FEh
 33083 00005B5A 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33084 00005B60 9D                      	popf
 33085                                  
 33086 00005B61 5D                      	pop	BP
 33087                                  
 33088                                  	; MSDOS 3.3 & MSDOS 6.0
 33089 00005B62 72AE                    	jc	short Exec_Ret_Err
 33090                                  
 33091                                  	;mov	[bp-8],ax
 33092 00005B64 8946F8                  	mov	Exec_FH,AX
 33093 00005B67 89C3                    	mov	BX,AX
 33094 00005B69 30C0                    	xor	AL,AL
 33095                                  	;invoke	$Ioctl
 33096 00005B6B E8CFC6                  	call	_$IOCTL
 33097 00005B6E 7207                    	jc	short Exec_BombJ
 33098                                  
 33099                                  	;test	dl,80h
 33100 00005B70 F6C280                  	test	DL,devid_ISDEV
 33101 00005B73 740A                    	jz	short Exec_Check_Environ
 33102                                  
 33103                                  	;mov	al,2
 33104 00005B75 B002                    	mov	AL,error_file_not_found
 33105                                  Exec_BombJ:
 33106 00005B77 E9CA00                  	jmp	Exec_Bomb
 33107                                  
 33108                                  BadEnv:
 33109                                  	;mov	al,0Ah
 33110 00005B7A B00A                    	mov	AL,error_bad_environment
 33111 00005B7C E9C500                  	jmp	Exec_Bomb
 33112                                  
 33113                                  Exec_Check_Environ:
 33114                                  	;mov	word [bp-18],0
 33115 00005B7F C746EE0000              	mov	Exec_Load_Block,0
 33116                                  	;mov	word [bp-14],0
 33117 00005B84 C746F20000              	mov	Exec_Environ,0
 33118                                  					; overlays... no environment
 33119                                  	;test	byte [bp-5],2
 33120 00005B89 F646FB02                	test	Exec_Func,exec_func_overlay
 33121 00005B8D 7552                    	jnz	short Exec_Read_Header
 33122                                  
 33123                                  	;lds	si,[bp-4]
 33124 00005B8F C576FC                  	lds	SI,Exec_Blk		; get block
 33125 00005B92 8B04                    	mov	ax,[SI]
 33126                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33127 00005B94 09C0                    	or	AX,AX
 33128 00005B96 750C                    	jnz	short Exec_Scan_Env
 33129                                  
 33130 00005B98 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33131                                  	;mov	ax,[44]
 33132 00005B9D A12C00                  	mov	AX,[PDB.ENVIRON]
 33133                                  
 33134                                  ; MSDOS 6.0
 33135                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33136                                  ;
 33137                                  ; Exec_environ is being correctly initialized after the environment has been
 33138                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33139                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33140                                  ; parent's environment.
 33141                                  ;	mov	Exec_Environ,AX
 33142                                  ;
 33143                                  ;----------------------------------------------------------------------------
 33144                                  
 33145                                  	;mov	[bp-14],ax
 33146                                  	;mov	Exec_Environ,ax
 33147                                  
 33148 00005BA0 09C0                    	or	AX,AX
 33149 00005BA2 743D                    	jz	short Exec_Read_Header
 33150                                  
 33151                                  Exec_Scan_Env:
 33152 00005BA4 8EC0                    	mov	ES,AX
 33153 00005BA6 31FF                    	xor	DI,DI
 33154                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33155 00005BA8 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33156 00005BAB 30C0                    	xor	AL,AL
 33157                                  
 33158                                  Exec_Get_Environ_Len:
 33159 00005BAD F2AE                    	repnz	scasb			; find that nul byte
 33160 00005BAF 75C9                    	jnz	short BadEnv
 33161                                  
 33162 00005BB1 49                      	dec	CX			; Dec CX for the next nul byte test
 33163 00005BB2 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33164                                  
 33165 00005BB4 AE                      	scasb				; is there another nul byte?
 33166 00005BB5 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33167                                  
 33168 00005BB7 57                      	push	DI
 33169                                  	;lea	bx,[DI+11h]
 33170 00005BB8 8D5D11                  	lea	BX,[DI+0Fh+2]
 33171                                  	;add	bx,[bp-22]
 33172 00005BBB 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33173                                  					; remember argv[0] length
 33174                                  					; round up and remember argc
 33175 00005BBE B104                    	mov	CL,4
 33176 00005BC0 D3EB                    	shr	BX,CL			; number of paragraphs needed
 33177 00005BC2 06                      	push	ES
 33178                                  	;invoke	$Alloc			; can we get the space?
 33179 00005BC3 E84406                  	call	_$ALLOC
 33180 00005BC6 1F                      	pop	DS
 33181 00005BC7 59                      	pop	CX
 33182                                  
 33183                                  	;jnc	short Exec_Save_Environ
 33184                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33185                                  	; 17/12/2022
 33186 00005BC8 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33187                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33188                                  	;jnc	short Exec_Save_Environ
 33189                                  	;jmp	SHORT Exec_No_Mem
 33190                                  
 33191                                  Exec_Save_Environ:
 33192 00005BCA 8EC0                    	mov	ES,AX
 33193                                  	;mov	[bp-14],ax
 33194 00005BCC 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33195 00005BCF 31F6                    	xor	SI,SI
 33196 00005BD1 89F7                    	mov	DI,SI
 33197 00005BD3 F3A4                    	rep	movsb			; copy the environment
 33198 00005BD5 B80100                  	mov	AX,1
 33199 00005BD8 AB                      	stosw
 33200                                  	;lds	si,[bp-26]
 33201 00005BD9 C576E6                  	lds	SI,ExecName
 33202                                  	;mov	cx,[bp-22]
 33203 00005BDC 8B4EEA                  	mov	CX,ExecNameLen
 33204 00005BDF F3A4                    	rep	movsb
 33205                                  
 33206                                  Exec_Read_Header:
 33207                                  	; We read in the program header into the above data area and
 33208                                  	; determine where in this memory the image will be located.
 33209                                  
 33210                                  	;Context DS
 33211 00005BE1 16                      	push	ss
 33212 00005BE2 1F                      	pop	ds
 33213                                  	;mov	cx,26
 33214 00005BE3 B91A00                  	mov	CX,exec_header_len	; header size
 33215 00005BE6 BA[C80F]                	mov	DX,exec_signature
 33216 00005BE9 06                      	push	ES
 33217 00005BEA 1E                      	push	DS
 33218 00005BEB E88304                  	call	ExecRead
 33219 00005BEE 1F                      	pop	DS
 33220 00005BEF 07                      	pop	ES
 33221 00005BF0 7250                    	jc	short Exec_Bad_File
 33222                                  
 33223 00005BF2 09C0                    	or	AX,AX
 33224 00005BF4 744C                    	jz	short Exec_Bad_File
 33225                                  	;cmp	ax,26
 33226 00005BF6 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33227 00005BF9 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33228                                  
 33229 00005BFB F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33230 00005C01 7504                    	jnz	short Exec_Check_Sig
 33231                                  
 33232                                  	;mov	byte [bp-6],0FFh
 33233 00005C03 C646FAFF                	mov	Exec_Load_High,-1
 33234                                  
 33235                                  Exec_Check_Sig:
 33236 00005C07 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33237                                  	;cmp	ax,5A4Dh ; 'MZ'
 33238 00005C0A 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33239 00005C0D 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33240                                  
 33241                                  	;cmp	ax,4D5Ah ; 'ZM'
 33242 00005C0F 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33243 00005C12 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33244                                  
 33245                                  Exec_Com_Filej:
 33246 00005C14 E9E901                  	jmp	Exec_Com_File
 33247                                  
 33248                                  	; We have the program header... determine memory requirements
 33249                                  
 33250                                  Exec_Save_Start:
 33251 00005C17 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33252 00005C1A B105                    	mov	CL,5			; convert to paragraphs
 33253 00005C1C D3E0                    	shl	AX,CL
 33254 00005C1E 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33255                                  	;mov	[bp-12],ax
 33256 00005C22 8946F4                  	mov	Exec_Res_Len_Para,AX
 33257                                  
 33258                                  		; Do we need to allocate memory?
 33259                                  		; Yes if function is not load-overlay
 33260                                  
 33261                                  	;test	byte [bp-5],2
 33262 00005C25 F646FB02                	test	Exec_Func,exec_func_overlay
 33263 00005C29 7445                    	jz	short Exec_Allocate	; allocation of space
 33264                                  
 33265                                  		; get load address from block
 33266                                  
 33267                                  	;les	di,[bp-4]
 33268 00005C2B C47EFC                  	les	DI,Exec_Blk
 33269 00005C2E 268B05                  	mov	ax,[es:di]
 33270                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33271                                  	;mov	[bp-20],ax
 33272 00005C31 8946EC                  	mov	Exec_DMA,AX
 33273                                  
 33274                                  	; 17/12/2022
 33275                                  	;;mov	ax,[es:di+2]
 33276                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33277                                  	;;mov	[bp-10],ax
 33278                                  	;mov	Exec_Rel_Fac,AX
 33279                                  
 33280                                  	; 17/12/2022
 33281                                  	; 30/11/2022 (!most proper code!)
 33282                                  	;mov	dx,[es:di+2]
 33283 00005C34 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33284                                  	;mov	[bp-10],dx
 33285 00005C38 8956F6                  	mov	Exec_Rel_Fac,dx
 33286                                  	; ax = Exec_DMA
 33287 00005C3B E9DE00                  	jmp	Exec_Find_Res
 33288                                  
 33289                                  ; 17/12/2022
 33290                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33291                                  ; 27/09/2023
 33292                                  %if 0
 33293                                  	; 02/06/2019 - Retro DOS v4.0
 33294                                  	;mov	ax,[bp-20]  ; *+*
 33295                                  	mov	AX,Exec_DMA ; *+*
 33296                                  	; 10/08/2018
 33297                                  	jmp	Exec_Find_Res		; M000
 33298                                  %endif
 33299                                  
 33300                                  Exec_No_Mem:
 33301                                  	;mov	al,8
 33302 00005C3E B008                    	mov	AL,error_not_enough_memory
 33303 00005C40 EB02                    	jmp	short Exec_Bomb
 33304                                  
 33305                                  Exec_Bad_File:
 33306                                  	;mov	al,0Bh
 33307 00005C42 B00B                    	mov	AL,error_bad_format
 33308                                  
 33309                                  Exec_Bomb:
 33310                                  	;mov	bx,[bp-8]
 33311 00005C44 8B5EF8                  	mov	BX,Exec_FH
 33312 00005C47 E84004                  	call	Exec_Dealloc
 33313                                  	;LeaveCrit CritMem
 33314 00005C4A E8E0B6                  	call	LCritMEM
 33315                                  	;save	<AX,BP>
 33316 00005C4D 50                      	push	ax
 33317 00005C4E 55                      	push	bp
 33318                                  	;invoke	$CLOSE
 33319 00005C4F E83D0A                  	call	_$CLOSE
 33320                                  	;restore <BP,AX>
 33321 00005C52 5D                      	pop	bp
 33322 00005C53 58                      	pop	ax
 33323 00005C54 E9BBFE                  	jmp	Exec_Ret_Err
 33324                                  
 33325                                  Exec_Chk_Mem: 
 33326                                  	
 33327                                  	; 24/09/2023
 33328                                  	; ds = DOSDATA
 33329                                  ; 17/12/2022
 33330                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33331                                  ;%if 0
 33332                                  	; MSDOS 6.0    			; M063 - Start
 33333                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33334                                  	; 10/06/2019
 33335 00005C57 A0[0203]                	mov	al,[AllocMethod]
 33336                                  	;mov	bl,[ss:ALLOCMSAVE]
 33337 00005C5A 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33338                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33339 00005C5E 881E[0203]              	mov	[AllocMethod],bl
 33340                                  	
 33341 00005C62 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33342 00005C65 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33343                                  	;				; N: continue
 33344                                  	;
 33345 00005C67 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33346 00005C69 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33347                                  	; 02/06/2019
 33348                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33349 00005C6B A1[8A00]                	mov	ax,[SAVE_AX]
 33350                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33351                                  					; M063 - End
 33352 00005C6E EB2B                    	jmp	short Exec_Norm_Alloc1
 33353                                  ;%endif
 33354                                  
 33355                                  ; 17/12/2022
 33356                                  %if 0
 33357                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33358                                  	; MSDOS 6.0    			; M063 - Start
 33359                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33360                                  	mov	bl,[ss:ALLOCMSAVE]
 33361                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33362                                  
 33363                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33364                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33365                                  	;				; N: continue
 33366                                  	;
 33367                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33368                                  	jz	short Exec_No_Mem	; N: no memory 
 33369                                  
 33370                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33371                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33372                                  					; M063 - End
 33373                                  %endif
 33374                                  
 33375                                  Exec_Allocate:
 33376                                  	; 09/09/2018
 33377                                  
 33378                                  	; M005 - START
 33379                                  	; If there is no STACK segment for this exe file and if this
 33380                                  	; not an overlay and the resident size is less than 64K - 
 33381                                  	; 256 bytes we shall add 256 bytes to the programs 
 33382                                  	; resident memory requirement and set Exec_SP to this value.
 33383                                  	
 33384                                  	; 17/12/2022
 33385 00005C70 29DB                    	sub	bx,bx ; 0	
 33386                                  
 33387                                  	; MSDOS 6.0
 33388                                  	;;mov	byte [bp-29],0
 33389                                  	;mov	Exec_NoStack,0
 33390                                  	; 17/12/2022
 33391 00005C72 885EE3                  	mov	Exec_NoStack,bl ; 0
 33392 00005C75 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33393                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33394 00005C79 7511                    	jne	short ea1		; Y: continue normal processing
 33395 00005C7B 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33396                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33397 00005C7F 750B                    	jne	short ea1		; Y: continue normal processing
 33398                                  
 33399                                  	;inc	byte [bp-29]
 33400 00005C81 FE46E3                  	inc	Exec_NoStack
 33401 00005C84 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33402 00005C87 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33403                                  
 33404 00005C89 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33405                                  ea1:
 33406                                  	; M005 - END
 33407                                  
 33408                                  	; MSDOS 6.0			; M000 - start
 33409                                  	; 20/05/2019
 33410                                  	; (ds = ss = DOSDATA)
 33411 00005C8C F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33412                                  					; Q: is the alloc strat high_first
 33413 00005C91 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33414                                  					; Y: set high_only bit
 33415 00005C93 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33416                                  					; M000 - end
 33417                                  Exec_Norm_Alloc:
 33418 00005C98 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33419                                  Exec_Norm_Alloc1:	; 02/06/2019
 33420                                  					; M000: attempt at allocating memory
 33421                                  	; MSDOS 3.3
 33422                                  	;push	ax			; M000
 33423                                  
 33424 00005C9B BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33425 00005C9E 1E                      	push	DS
 33426                                  	;invoke	$Alloc			; should have carry set and BX has max
 33427 00005C9F E86805                  	call	_$ALLOC
 33428 00005CA2 1F                      	pop	DS
 33429                                  
 33430                                  	; MSDOS 6.0
 33431 00005CA3 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33432                                  	; MSDOS 3.3
 33433                                  	;pop	ax			; M000
 33434                                  
 33435 00005CA6 83C010                  	add	AX,10h			; room for header
 33436 00005CA9 83FB11                  	cmp	BX,11h			; enough room for a header
 33437                                  	; MSDOS 6.0
 33438 00005CAC 72A9                    	jb	short Exec_Chk_Mem	; M000
 33439                                  	; MSDOS 3.3	
 33440                                  	;jb	short Exec_No_Mem
 33441                                  
 33442 00005CAE 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33443                                  	; MSDOS 6.0
 33444 00005CB0 77A5                    	ja	short Exec_Chk_Mem	; M000
 33445                                  	; MSDOS 3.3
 33446                                  	;ja	short Exec_No_Mem
 33447                                  
 33448                                  	;test	byte [bp-6],0FFh
 33449 00005CB2 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33450 00005CB6 7518                    	jnz	short Exec_BX_Max	; use max
 33451                                  
 33452                                  	; 09/09/2018
 33453                                  
 33454 00005CB8 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33455                                  	; MSDOS 6.0
 33456 00005CBC 7299                    	jc	short Exec_Chk_Mem		; M000
 33457                                  	; MSDOS 3.3
 33458                                  	;jc	short Exec_No_Mem
 33459                                  
 33460 00005CBE 39D8                    	cmp	AX,BX			; enough space?
 33461                                  	; MSDOS 6.0
 33462 00005CC0 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33463                                  	; MSDOS 3.3
 33464                                  	;ja	short Exec_No_Mem
 33465                                  
 33466 00005CC2 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33467 00005CC6 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33468 00005CCA 7204                    	jc	short Exec_BX_Max
 33469                                  
 33470 00005CCC 39D8                    	cmp	AX,BX
 33471 00005CCE 7602                    	jbe	short Exec_Got_Block
 33472                                  
 33473                                  Exec_BX_Max:
 33474 00005CD0 89D8                    	mov	AX,BX
 33475                                  
 33476                                  Exec_Got_Block:
 33477                                  	; 03/08/2018 - Retro DOS v3.0
 33478                                  
 33479 00005CD2 1E                      	push	DS
 33480 00005CD3 89C3                    	mov	BX,AX
 33481                                  	;mov	[bp-16],bx
 33482 00005CD5 895EF0                  	mov	Exec_Size,BX
 33483                                  	;invoke	$Alloc			; get the space
 33484 00005CD8 E82F05                  	call	_$ALLOC
 33485 00005CDB 1F                      	pop	DS
 33486                                  	; MSDOS 6.0
 33487                                  	;jc	short Exec_Chk_Mem	; M000
 33488                                  	; MSDOS 3.3
 33489                                  	;;jc	short Exec_No_Mem
 33490                                  	; 20/05/2019
 33491 00005CDC 7303                    	jnc	short ea0
 33492 00005CDE E976FF                  	jmp	Exec_Chk_Mem
 33493                                  ea0:
 33494                                  	; MSDOS 6.0
 33495 00005CE1 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33496 00005CE5 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33497                                  
 33498                                  ;M029; Begin changes
 33499                                  ; This code does special handling for programs with no stack segment. If so,
 33500                                  ;check if the current block is larger than 64K. If so, we do not modify
 33501                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33502                                  ;case Exec_SS is not changed.
 33503                                  
 33504                                  	; MSDOS 6.0
 33505                                  	;cmp	byte [bp-29],0
 33506 00005CE9 807EE300                	cmp	Exec_NoStack,0
 33507                                  	;je	@f
 33508 00005CED 7412                    	je	short ea2
 33509                                  
 33510 00005CEF 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33511                                  	;jae	@f			; Y: Exec_SP = 0
 33512 00005CF3 730C                    	jae	short ea2
 33513                                  
 33514                                  ;Make Exec_SP point at the top of the memory block
 33515                                  
 33516 00005CF5 B104                    	mov	cl,4
 33517 00005CF7 D3E3                    	shl	bx,cl			; get byte offset
 33518 00005CF9 81EB0001                	sub	bx,100h			; take care of PSP
 33519 00005CFD 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33520                                  ea2:
 33521                                  ;@@:
 33522                                  ;M029; end changes
 33523                                  
 33524                                  	;mov	[bp-18],ax
 33525 00005D01 8946EE                  	mov	Exec_Load_Block,AX
 33526 00005D04 83C010                  	add	AX,10h
 33527                                  	;test	byte [bp-6],0FFh
 33528 00005D07 F646FAFF                	test	Exec_Load_High,-1
 33529 00005D0B 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33530                                  
 33531                                  	;add	ax,[bp-16]
 33532 00005D0D 0346F0                  	add	AX,Exec_Size		; go to end
 33533                                  	;sub	ax,[bp-12]
 33534 00005D10 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33535 00005D13 83E810                  	sub	AX,10h			; drop off pdb
 33536                                  
 33537                                  Exec_Use_AX:
 33538                                  	;mov	[bp-10],ax
 33539 00005D16 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33540                                  	;mov	[bp-20],ax
 33541 00005D19 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33542                                  
 33543                                  	; Determine the location in the file of the beginning of
 33544                                  	; the resident
 33545                                  
 33546                                  ; 17/12/2022
 33547                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33548                                  ;%if 0
 33549                                  
 33550                                  Exec_Find_Res:
 33551                                  	; MSDOS 6.0
 33552                                  	;;mov	dx,[bp-20]
 33553                                  	;mov	DX,Exec_DMA ; *+*
 33554                                  	;;mov	[bp-28],dx
 33555                                  	;mov	Exec_DMA_Save,DX
 33556                                  
 33557                                  	; 17/12/2022
 33558                                  	; AX = Exec_DMA
 33559                                  
 33560                                  	; 02/06/2019 - Retro DOS v4.0
 33561                                  	;mov	[bp-28],ax ; *+*
 33562 00005D1C 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33563                                  
 33564                                  ;%endif
 33565                                  
 33566                                  ; 17/12/2022
 33567                                  %if 0
 33568                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33569                                  Exec_Find_Res:
 33570                                  	;mov	dx,[bp-20]
 33571                                  	mov	DX,Exec_DMA ; *+*
 33572                                  	;mov	[bp-28],dx
 33573                                  	mov	Exec_DMA_Save,DX
 33574                                  %endif
 33575                                  
 33576                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33577 00005D1F 8B16[D00F]              	mov	DX,[exec_par_dir]
 33578 00005D23 52                      	push	DX
 33579 00005D24 B104                    	mov	CL,4
 33580 00005D26 D3E2                    	shl	DX,CL			; low word of location
 33581 00005D28 58                      	pop	AX
 33582 00005D29 B10C                    	mov	CL,12
 33583 00005D2B D3E8                    	shr	AX,CL			; high word of location
 33584 00005D2D 89C1                    	mov	CX,AX			; CX <- high
 33585                                  
 33586                                  		; Read in the resident image (first, seek to it)
 33587                                  	;mov	bx,[bp-8]
 33588 00005D2F 8B5EF8                  	mov	BX,Exec_FH
 33589 00005D32 1E                      	push	DS
 33590 00005D33 30C0                    	xor	AL,AL
 33591                                  	;invoke	$Lseek			; Seek to resident
 33592 00005D35 E8D30A                  	call	_$LSEEK
 33593 00005D38 1F                      	pop	DS
 33594 00005D39 7303                    	jnc	short Exec_Big_Read
 33595                                  
 33596 00005D3B E906FF                  	jmp	Exec_Bomb
 33597                                  
 33598                                  Exec_Big_Read:				; Read resident into memory
 33599                                  	;mov	bx,[bp-12]
 33600 00005D3E 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33601 00005D41 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33602 00005D45 7203                    	jb	short Exec_Read_OK
 33603                                  
 33604 00005D47 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33605                                  
 33606                                  Exec_Read_OK:
 33607                                  	;sub	[bp-12],bx
 33608 00005D4A 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33609 00005D4D 53                      	push	BX
 33610 00005D4E B104                    	mov	CL,4
 33611 00005D50 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33612 00005D52 89D9                    	mov	CX,BX			; Count in correct register
 33613 00005D54 1E                      	push	DS
 33614                                  	;mov	ds,[bp-20]
 33615 00005D55 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33616                                  
 33617 00005D58 31D2                    	xor	DX,DX
 33618 00005D5A 51                      	push	CX			; Save our count
 33619 00005D5B E81303                  	call	ExecRead
 33620 00005D5E 59                      	pop	CX			; Get old count to verify
 33621 00005D5F 1F                      	pop	DS
 33622 00005D60 7248                    	jc	short Exec_Bad_FileJ
 33623                                  
 33624 00005D62 39C1                    	cmp	CX,AX			; Did we read enough?
 33625 00005D64 5B                      	pop	BX			; Get paragraph count back
 33626 00005D65 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33627                                  
 33628                                  	; The read did not match the request. If we are off by 512
 33629                                  	; bytes or more then the header lied and we have an error.
 33630                                  
 33631 00005D67 29C1                    	sub	CX,AX
 33632 00005D69 81F90002                	cmp	CX,512
 33633 00005D6D 733B                    	jae	short Exec_Bad_FileJ
 33634                                  
 33635                                  	; We've read in CX bytes... bump DTA location
 33636                                  
 33637                                  ExecCheckEnd:
 33638                                  	;add	[bp-20],bx
 33639 00005D6F 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33640                                  	;test	word [bp-12],0FFFFh
 33641 00005D72 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33642 00005D77 75C5                    	jnz	short Exec_Big_Read
 33643                                  
 33644                                  	; The image has now been read in. We must perform relocation
 33645                                  	; to the current location.
 33646                                  
 33647                                  exec_do_reloc:
 33648                                  	;mov	cx,[bp-10]
 33649 00005D79 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33650 00005D7C A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33651 00005D7F 01C8                    	add	AX,CX			; and relocate him
 33652 00005D81 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33653                                  
 33654 00005D84 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33655 00005D87 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33656                                  
 33657 00005D8A C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33658 00005D8E A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33659 00005D91 8CC0                    	mov	AX,ES			; rms;NSS
 33660 00005D93 01C8                    	add	AX,CX			; relocated...
 33661 00005D95 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33662                                  
 33663 00005D98 31C9                    	xor	CX,CX
 33664 00005D9A 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33665                                  	;mov	bx,[bp-8]
 33666 00005D9E 8B5EF8                  	mov	BX,Exec_FH
 33667 00005DA1 1E                      	push	DS
 33668 00005DA2 31C0                    	xor	AX,AX
 33669                                  	;invoke	$Lseek
 33670 00005DA4 E8640A                  	call	_$LSEEK
 33671 00005DA7 1F                      	pop	DS
 33672 00005DA8 7303                    	jnc	short exec_get_entries
 33673                                  
 33674                                  Exec_Bad_FileJ:
 33675 00005DAA E995FE                  	jmp	Exec_Bad_File
 33676                                  
 33677                                  exec_get_entries:
 33678 00005DAD 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33679                                  
 33680                                  exec_read_reloc:
 33681 00005DB1 52                      	push	DX
 33682                                  	;mov	dx,OPENBUF
 33683 00005DB2 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33684                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33685                                  	;mov	cx,396 ; MSDOS 6.0
 33686 00005DB5 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33687 00005DB8 1E                      	push	DS
 33688 00005DB9 E8B502                  	call	ExecRead
 33689 00005DBC 07                      	pop	ES
 33690 00005DBD 5A                      	pop	DX
 33691 00005DBE 72EA                    	jc	short Exec_Bad_FileJ
 33692                                  
 33693                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33694                                  	;mov	cx,99 ;  MSDOS 6.0
 33695 00005DC0 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33696                                  					; Pointer to byte location in header
 33697                                  	;mov	di,OPENBUF
 33698 00005DC3 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33699                                  	;mov	si,[bp-10]
 33700 00005DC6 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33701                                  
 33702                                  exec_reloc_one:
 33703 00005DC9 09D2                    	or	DX,DX			; Any more entries?
 33704 00005DCB 7416                    	jz	short Exec_Set_PDBJ
 33705                                  
 33706                                  exec_get_addr:
 33707 00005DCD 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33708 00005DD0 8CD8                    	mov	AX,DS			; Relocate address of item
 33709                                  
 33710                                  	; MSDOS 6.0
 33711                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33712                                  	;add	ax,[bp-28]
 33713 00005DD2 0346E4                  	add	AX,Exec_DMA_Save
 33714                                  
 33715 00005DD5 8ED8                    	mov	DS,AX
 33716 00005DD7 0137                    	add	[BX],SI
 33717 00005DD9 83C704                  	add	DI,4
 33718 00005DDC 4A                      	dec	DX
 33719 00005DDD E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33720                                  
 33721                                  	; We've exhausted a single buffer's worth. Read in the next
 33722                                  	; piece of the relocation table.
 33723                                  
 33724 00005DDF 06                      	push	ES
 33725 00005DE0 1F                      	pop	DS
 33726 00005DE1 EBCE                    	jmp	short exec_read_reloc
 33727                                  
 33728                                  Exec_Set_PDBJ:
 33729                                  	; MSDOS 6.0
 33730                                  	
 33731                                  	; We now determine if this is a buggy exe packed file and if 
 33732                                  	; so we patch in the right code. Note that fixexepatch will
 33733                                  	; point to a ret if dos loads low. The load segment as 
 33734                                  	; determined above will be in exec_dma_save
 33735                                  	
 33736 00005DE3 06                      	push	es
 33737 00005DE4 50                      	push	ax			; M030
 33738 00005DE5 51                      	push	cx			; M030
 33739                                  	;mov	es,[bp-28]
 33740 00005DE6 8E46E4                  	mov	es,Exec_DMA_Save
 33741 00005DE9 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33742 00005DED 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33743 00005DF2 36FF16[F811]            	call	word [ss:FixExePatch]
 33744                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33745                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33746                                  	;call	word [ss:Rational386PatchPtr]
 33747 00005DF7 59                      	pop	cx			; M030
 33748 00005DF8 58                      	pop	ax			; M030
 33749 00005DF9 07                      	pop	es
 33750                                  
 33751 00005DFA E9DE00                  	jmp	Exec_Set_PDB
 33752                                  
 33753                                  Exec_No_Memj:
 33754 00005DFD E93EFE                  	jmp	Exec_No_Mem
 33755                                  
 33756                                  	; we have a .COM file. First, determine if we are merely
 33757                                  	; loading an overlay.
 33758                                  
 33759                                  Exec_Com_File:
 33760                                  	;test	byte [bp-5],2
 33761 00005E00 F646FB02                	test	Exec_Func,exec_func_overlay
 33762 00005E04 742D                    	jz	short Exec_Alloc_Com_File
 33763                                  	;lds	si,[bp-4]
 33764 00005E06 C576FC                  	lds	SI,Exec_Blk		; get arg block
 33765 00005E09 AD                      	lodsw				; get load address
 33766                                  	;mov	[bp-20],ax
 33767 00005E0A 8946EC                  	mov	Exec_DMA,AX
 33768 00005E0D B8FFFF                  	mov	AX,0FFFFh
 33769 00005E10 EB63                    	jmp	short Exec_Read_Block	; read it all!
 33770                                  
 33771                                  Exec_Chk_Com_Mem:			
 33772                                  	; MSDOS 6.0	     		; M063 - Start
 33773 00005E12 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33774 00005E16 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33775 00005E1B 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33776 00005E20 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33777 00005E23 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33778                                  					; N: continue
 33779                                  	
 33780 00005E25 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33781 00005E27 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33782                                  	
 33783                                  	;mov	ax,[bp-18]
 33784 00005E29 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33785 00005E2C 31DB                    	xor	bx,bx			; M047: bx => free arena
 33786 00005E2E E87502                  	call	ChangeOwner		; M047: free this block
 33787                                  	
 33788 00005E31 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33789                                  					; M063 - End
 33790                                  	
 33791                                  	; We must allocate the max possible size block (ick!)
 33792                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33793                                  	; size of block.
 33794                                  
 33795                                  Exec_Alloc_Com_File:
 33796                                  	; MSDOS 6.0			; M000 -start
 33797 00005E33 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33798                                  					; Q: is the alloc strat high_first
 33799 00005E39 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33800                                  					; Y: set high_only bit
 33801 00005E3B 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33802                                  					; M000 - end
 33803                                  Exec_Norm_Com_Alloc:			; M000
 33804                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33805 00005E41 BBFFFF                  	mov	BX,0FFFFh
 33806                                  	;invoke	$Alloc			; largest piece available as error
 33807 00005E44 E8C303                  	call	_$ALLOC
 33808 00005E47 09DB                    	or	BX,BX
 33809                                  	; MSDOS 6.0
 33810 00005E49 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33811                                  	; MSDOS 3.3
 33812                                  	;jz	short Exec_No_Memj
 33813                                  
 33814                                  	;mov	[bp-16],bx
 33815 00005E4B 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33816 00005E4E 53                      	push	BX
 33817                                  	;invoke	$ALLOC			; largest piece available
 33818 00005E4F E8B803                  	call	_$ALLOC
 33819 00005E52 5B                      	pop	BX			; get size of block...
 33820                                  	;mov	[bp-18],ax
 33821 00005E53 8946EE                  	mov	Exec_Load_Block,AX
 33822                                  
 33823 00005E56 83C010                  	add	AX,10h			; increment for header
 33824                                  	;mov	[bp-20],ax
 33825 00005E59 8946EC                  	mov	Exec_DMA,AX
 33826                                  
 33827 00005E5C 31C0                    	xor	AX,AX			; presume 64K read...
 33828 00005E5E 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33829 00005E62 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33830                                  
 33831 00005E64 89D8                    	mov	AX,BX			; convert size to bytes
 33832 00005E66 B104                    	mov	CL,4
 33833 00005E68 D3E0                    	shl	AX,CL
 33834                                  	; 17/12/2022
 33835                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33836                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33837                                  	; MSDOS 5.0
 33838                                  	;cmp	AX,100h   
 33839                                  	; 02/06/2019 - Retro DOS v4.0
 33840                                  	; MSDOS 6.0
 33841                                          ; 17/12/2022
 33842 00005E6A 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33843 00005E6D 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33844                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33845                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33846                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33847                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33848                                  
 33849                                  					; M047: size of the block is < 64K
 33850 00005E6F 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33851                                  
 33852                                  Exec_Read_Com:
 33853                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33854 00005E72 2D0001                  	sub	AX,100h 		; remember size of psp
 33855                                  Exec_Read_Block:
 33856 00005E75 50                      	push	AX			; save number to read
 33857                                  	;mov	bx,[bp-8]
 33858 00005E76 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33859 00005E79 31C9                    	xor	CX,CX			; but seek to 0:0
 33860 00005E7B 89CA                    	mov	DX,CX
 33861 00005E7D 31C0                    	xor	AX,AX			; seek relative to beginning
 33862                                  	;invoke	$Lseek			; back to beginning of file
 33863 00005E7F E88909                  	call	_$LSEEK
 33864 00005E82 59                      	pop	CX			; number to read
 33865                                  	;mov	ds,[bp-20]
 33866 00005E83 8E5EEC                  	mov	DS,Exec_DMA
 33867 00005E86 31D2                    	xor	DX,DX
 33868 00005E88 51                      	push	CX
 33869 00005E89 E8E501                  	call	ExecRead
 33870 00005E8C 5E                      	pop	SI			; get number of bytes to read
 33871 00005E8D 7303                    	jnc	short OkRead
 33872 00005E8F E9B0FD                  	jmp	Exec_Bad_File
 33873                                  
 33874                                  	; 10/09/2018
 33875                                  OkRead:
 33876 00005E92 39F0                    	cmp	AX,SI			; did we read them all?
 33877                                  	; MSDOS 6.0
 33878                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33879                                  	; MSDOS 3.3
 33880                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33881 00005E94 7503                    	jne	short OkRead2
 33882 00005E96 E979FF                  	jmp	Exec_Chk_Com_Mem
 33883                                  OkRead2:
 33884                                  	; MSDOS 6.0
 33885 00005E99 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33886 00005E9E 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33887                                  
 33888                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33889                                  	;test	byte [bp-5],2
 33890 00005EA3 F646FB02                	test	Exec_Func,exec_func_overlay
 33891 00005EA7 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33892                                  
 33893                                  	;mov	ax,[bp-20]
 33894 00005EA9 8B46EC                  	mov	AX,Exec_DMA
 33895 00005EAC 83E810                  	sub	AX,10h
 33896 00005EAF 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33897 00005EB3 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33898                                  
 33899                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33900                                  	; of 0 on stack.
 33901                                  
 33902 00005EBA 81C6FE00                	add	SI,0FEh 		; make room for stack
 33903                                  
 33904                                  	; MSDOS 6.0
 33905 00005EBE 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33906 00005EC1 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33907 00005EC3 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33908                                  
 33909                                  Exec_St_Ok:
 33910                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33911 00005EC7 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33912 00005ECC 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33913 00005ED0 8ED8                    	mov	DS,AX
 33914 00005ED2 C7040000                	mov	WORD [SI],0		; 0 for return
 33915                                  
 33916                                  	; MSDOS 6.0
 33917                                  
 33918                                  	; M068
 33919                                  	;
 33920                                  	; We now determine if this is a Copy Protected App. If so the 
 33921                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33922                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33923                                  
 33924 00005ED6 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33925                                  
 33926                                  Exec_Set_PDB:
 33927                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33928                                  	;mov	bx,[bp-8]
 33929 00005EDB 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33930 00005EDE E8A901                  	call	Exec_Dealloc
 33931 00005EE1 55                      	push	BP
 33932                                  	;invoke	$Close			; release the jfn
 33933 00005EE2 E8AA07                  	call	_$CLOSE
 33934 00005EE5 5D                      	pop	BP
 33935 00005EE6 E89301                  	call	Exec_Alloc
 33936                                  	;test	byte [bp-5],2
 33937 00005EE9 F646FB02                	test	Exec_Func,exec_func_overlay
 33938 00005EED 743A                    	jz	short Exec_Build_Header
 33939                                  
 33940                                  	; MSDOS 6.0
 33941 00005EEF E8C201                  	call	Scan_Execname
 33942 00005EF2 E8D601                  	call	Scan_Special_Entries
 33943                                  ;SR;
 33944                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33945                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33946                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33947                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33948                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33949                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33950                                  ;issues the version check, it gets the lie version until the next overlay
 33951                                  ;call is issued.
 33952                                  
 33953 00005EF5 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33954 00005EFB 7426                    	je	short norm_ovl		;yes, no special handling
 33955 00005EFD 56                      	push	si
 33956 00005EFE 06                      	push	es
 33957 00005EFF 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33958                                  	 
 33959                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33960 00005F04 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33961 00005F08 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33962                                  	
 33963 00005F0A 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33964 00005F0F 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33965 00005F14 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33966                                  		;;; PDB.VERSION
 33967 00005F19 EB06                    	jmp	short setver_done
 33968                                  sysinit_done:
 33969 00005F1B 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33970                                  setver_done:
 33971 00005F21 07                      	pop	es
 33972 00005F22 5E                      	pop	si
 33973                                  norm_ovl:
 33974                                  	;leave
 33975 00005F23 89EC                    	mov	sp,bp		
 33976 00005F25 5D                      	pop	bp
 33977                                  
 33978                                  	;transfer SYS_RET_OK		; overlay load -> done
 33979 00005F26 E912A7                  	jmp	SYS_RET_OK
 33980                                  
 33981                                  Exec_Build_Header:
 33982                                  	;mov	dx,[bp-18]
 33983 00005F29 8B56EE                  	mov	DX,Exec_Load_Block
 33984                                  					; assign the space to the process
 33985                                  	;mov	si,1
 33986 00005F2C BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33987                                  	;mov	ax,[bp-14]
 33988 00005F2F 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33989 00005F32 09C0                    	or	AX,AX
 33990 00005F34 7405                    	jz	short No_Owner		; no environment
 33991                                  
 33992 00005F36 48                      	dec	AX			; point to header
 33993 00005F37 8ED8                    	mov	DS,AX
 33994 00005F39 8914                    	mov	[SI],DX 		; assign ownership
 33995                                  No_Owner:
 33996                                  	;mov	ax,[bp-18]
 33997                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33998                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33999                                  	; 17/12/2022
 34000 00005F3B 89D0                    	mov	ax,dx ; 06/06/2019
 34001                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34002                                  	
 34003 00005F3D 48                      	dec	AX
 34004 00005F3E 8ED8                    	mov	DS,AX			; point to header
 34005 00005F40 8914                    	mov	[SI],DX 		; assign ownership
 34006                                  
 34007                                  	; MSDOS 6.0
 34008 00005F42 1E                      	push	DS			;AN000;MS. make ES=DS
 34009 00005F43 07                      	pop	ES			;AN000;MS.
 34010                                  	;mov	di,8
 34011 00005F44 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34012 00005F47 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34013                                  					;	   ds:si->name, cx=name length
 34014 00005F4A 51                      	push	CX			;AN007;;MS. save for fake version
 34015 00005F4B 56                      	push	SI			;AN007;;MS. save for fake version
 34016                                  
 34017                                  MoveName:				;AN000;
 34018 00005F4C AC                      	lodsb				;AN000;;MS. get char
 34019 00005F4D 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34020 00005F4F 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34021                                  					;AN000;
 34022 00005F51 AA                      	stosb				;AN000;;MS. move char
 34023                                  					; MSKK bug fix - limit length copied
 34024 00005F52 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34025 00005F55 7302                    	jae	short Mem_Done		; jump if so
 34026                                  	;
 34027 00005F57 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34028                                  Mem_Done:				;AN000;
 34029 00005F59 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34030                                  	;cmp	di,16
 34031 00005F5B 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34032 00005F5E 7301                    	jae	short Fill8		;AN000;MS.
 34033                                  	
 34034 00005F60 AA                      	stosb				;AN000;MS.
 34035                                  	
 34036                                  Fill8:					;AN000;
 34037 00005F61 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34038 00005F62 59                      	pop	CX			;AN007;MS.
 34039                                  	
 34040 00005F63 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34041                                  
 34042                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34043 00005F66 52                      	push	DX
 34044                                  	;mov	si,[bp-16]
 34045 00005F67 8B76F0                  	mov	SI,Exec_Size
 34046 00005F6A 01D6                    	add	SI,DX
 34047                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34048 00005F6C E82DB1                  	call	_$DUP_PDB
 34049 00005F6F 5A                      	pop	DX
 34050                                  
 34051                                  	;push	word [bp-14]
 34052 00005F70 FF76F2                  	push	Exec_Environ
 34053                                  	;pop	WORD [ES:2Ch]
 34054 00005F73 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34055                                  
 34056                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34057                                  					; version number in PSP
 34058 00005F78 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34059 00005F7D 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34060                                  		; PDB.VERSION
 34061                                  
 34062                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34063                                  	;lds	si,[bp-4]
 34064 00005F82 C576FC                  	lds	SI,Exec_Blk		; get the block
 34065 00005F85 1E                      	push	DS			; save its location
 34066 00005F86 56                      	push	SI
 34067                                  	;lds	si,[si+6]
 34068 00005F87 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34069                                  
 34070                                  	; DS points to user space 5C FCB
 34071                                  
 34072 00005F8A B90C00                  	mov	CX,12			; copy drive, name and ext
 34073 00005F8D 51                      	push	CX
 34074 00005F8E BF5C00                  	mov	DI,5Ch
 34075 00005F91 8A1C                    	mov	BL,[SI]
 34076 00005F93 F3A4                    	rep	movsb
 34077                                  
 34078                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34079                                  
 34080 00005F95 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34081 00005F97 AB                      	stosw
 34082 00005F98 AB                      	stosw
 34083                                  
 34084                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34085                                  
 34086 00005F99 59                      	pop	CX
 34087 00005F9A 5E                      	pop	SI			; get block
 34088 00005F9B 1F                      	pop	DS
 34089 00005F9C 1E                      	push	DS			; save (again)
 34090 00005F9D 56                      	push	SI
 34091                                  	;lds	si,[si+0Ah]
 34092 00005F9E C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34093                                  
 34094                                  	; DS points to user space 6C FCB
 34095                                  
 34096 00005FA1 8A3C                    	mov	BH,[SI] 		; do same as above
 34097 00005FA3 F3A4                    	rep	movsb
 34098 00005FA5 AB                      	stosw
 34099 00005FA6 AB                      	stosw
 34100 00005FA7 5E                      	pop	SI			; get block (last time)
 34101 00005FA8 1F                      	pop	DS
 34102                                  	;ld	si,[si+2]
 34103 00005FA9 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34104                                  
 34105                                  	; DS points to user space 80 command line
 34106                                  
 34107 00005FAC 80C980                  	or	CL,80h
 34108 00005FAF 89CF                    	mov	DI,CX
 34109 00005FB1 F3A4                    	rep	movsb			; Wham!
 34110                                  
 34111                                  	; Process BX into default AX (validity of drive specs on args).
 34112                                  	; We no longer care about DS:SI.
 34113                                  
 34114 00005FB3 FEC9                    	dec	CL			; get 0FFh in CL
 34115 00005FB5 88F8                    	mov	AL,BH
 34116 00005FB7 30FF                    	xor	BH,BH
 34117                                  	;invoke	GetVisDrv
 34118 00005FB9 E8400A                  	call	GetVisDrv
 34119 00005FBC 7302                    	jnc	short Exec_BL
 34120                                  
 34121 00005FBE 88CF                    	mov	BH,CL
 34122                                  
 34123                                  Exec_BL:
 34124 00005FC0 88D8                    	mov	AL,BL
 34125 00005FC2 30DB                    	xor	BL,BL
 34126                                  	;invoke	GetVisDrv
 34127 00005FC4 E8350A                  	call	GetVisDrv
 34128 00005FC7 7302                    	jnc	short Exec_Set_Return
 34129                                  
 34130 00005FC9 88CB                    	mov	BL,CL
 34131                                  
 34132                                  Exec_Set_Return:
 34133                                  	;invoke	Get_User_Stack			; get his return address
 34134 00005FCB E8B7A4                  	call	Get_User_Stack
 34135                                  
 34136                                  	;push	word [si+14h]
 34137 00005FCE FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34138                                  	;push	word [si+12h]
 34139 00005FD1 FF7412                  	push	word [SI+user_env.user_IP]
 34140                                  	;push	word [si+14h]
 34141 00005FD4 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34142                                  	;push	word [si+12h]
 34143 00005FD7 FF7412                  	push	word [SI+user_env.user_IP]
 34144                                  	;pop	word [ES:0Ah]
 34145 00005FDA 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34146                                  	;pop	word [ES:0Ch]
 34147 00005FDF 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34148                                  
 34149 00005FE4 31C0                    	xor	AX,AX
 34150 00005FE6 8ED8                    	mov	DS,AX
 34151                                  					; save them where we can get them
 34152                                  					; later when the child exits.
 34153                                  	;pop	word [88h]
 34154 00005FE8 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34155                                  	;pop	word [90h]
 34156 00005FEC 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34157                                  
 34158 00005FF0 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34159 00005FF7 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34160 00005FFC 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34161                                  
 34162                                  	;test	byte [bp-5],1
 34163 00006001 F646FB01                	test	Exec_Func,exec_func_no_execute
 34164 00006005 7427                    	jz	short exec_go
 34165                                  
 34166 00006007 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34167                                  	;les	di,[bp-4]
 34168 0000600C C47EFC                  	les	DI,Exec_Blk		; and block for return
 34169                                  	;mov	[es:di+10h],ds
 34170 0000600F 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34171                                  
 34172 00006013 4E                      	dec	SI			; 'push' default AX
 34173 00006014 4E                      	dec	SI
 34174 00006015 891C                    	mov	[SI],BX 		; save default AX reg
 34175                                  	;mov	[es:di+0Eh], si
 34176 00006017 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34177                                  
 34178 0000601B 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34179                                  	;mov	[es:di+14h],ds
 34180 00006020 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34181                                  	;mov	[es:di+12h],ax
 34182 00006024 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34183                                  	
 34184                                  	;leave
 34185 00006028 89EC                    	mov	sp,bp
 34186 0000602A 5D                      	pop	bp	
 34187                                  
 34188                                  	;transfer SYS_RET_OK
 34189 0000602B E90DA6                  	jmp	SYS_RET_OK
 34190                                  
 34191                                  exec_go:
 34192 0000602E 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34193 00006033 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34194 00006038 8CC0                    	mov	AX,ES
 34195                                  
 34196                                  	; MSDOS 6.0
 34197 0000603A 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34198 00006040 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34199                                  
 34200 00006042 1E                      	push	ds			; Y: control must go to low mem stub
 34201                                  		
 34202 00006043 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34203                                  					;    control to user 
 34204 00006048 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34205                                  					; M004: Set bit to signal int 21
 34206                                  					; ah = 25 & ah= 49. See dossym.inc 
 34207                                  					; under TAG M003 & M009 for 
 34208                                  					; explanation
 34209 0000604D 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34210                                  					; M068: going to be turned OFF.
 34211                                  	
 34212 00006051 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34213 00006053 1F                      	pop	ds
 34214                                  	
 34215 00006054 50                      	push	ax			; ret far into the low mem stub
 34216 00006055 B8[FB10]                	mov	ax,disa20_xfer
 34217 00006058 50                      	push	ax
 34218 00006059 8CC0                    	mov	AX,ES			; restore ax
 34219 0000605B CB                      	retf
 34220                                  
 34221                                  Xfer_To_User:
 34222                                  	; DS:SI points to entry point
 34223                                  	; AX:DI points to initial stack
 34224                                  	; DX has PDB pointer
 34225                                  	; BX has initial AX value
 34226                                  
 34227 0000605C FA                      	cli
 34228                                  	; 15/08/2018
 34229 0000605D 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34230                                  
 34231 00006063 8ED0                    	mov	SS,AX			; set up user's stack
 34232 00006065 89FC                    	mov	SP,DI			; and SP
 34233 00006067 FB                      	sti
 34234                                  
 34235 00006068 1E                      	push	DS			; fake long call to entry
 34236 00006069 56                      	push	SI
 34237 0000606A 8EC2                    	mov	ES,DX			; set up proper seg registers
 34238 0000606C 8EDA                    	mov	DS,DX
 34239 0000606E 89D8                    	mov	AX,BX			; set up proper AX
 34240                                  
 34241 00006070 CB                      	retf
 34242                                  
 34243                                  ; 04/08/2018 - Retro DOS v3.0
 34244                                  
 34245                                  ;----------------------------------------------------------------------------
 34246                                  ;
 34247                                  ;----------------------------------------------------------------------------
 34248                                  
 34249                                  ExecRead:
 34250 00006071 E81600                  	CALL	Exec_Dealloc
 34251                                  	;mov	bx,[bp-8]
 34252 00006074 8B5EF8                  	MOV	bx,Exec_FH
 34253                                  
 34254 00006077 55                      	PUSH	BP
 34255 00006078 E82507                  	call	_$READ
 34256 0000607B 5D                      	POP	BP
 34257                                  
 34258                                  	;CALL	Exec_Alloc
 34259                                  	;retn
 34260                                  	; 18/12/2022
 34261                                  	;jmp	short Exec_Alloc
 34262                                  
 34263                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34264                                  
 34265                                  ;----------------------------------------------------------------------------
 34266                                  ;
 34267                                  ;----------------------------------------------------------------------------
 34268                                  
 34269                                  Exec_Alloc:
 34270 0000607C 53                      	push	BX
 34271                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34272                                  	; 20/05/2019 - Retro DOS v4.0
 34273                                  	; MSDOS 6.0
 34274 0000607D 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34275 00006082 E81000                  	call	ChangeOwners
 34276 00006085 E8A5B2                  	call	LCritMEM
 34277 00006088 5B                      	pop	BX
 34278 00006089 C3                      	retn
 34279                                  
 34280                                  ;----------------------------------------------------------------------------
 34281                                  ;
 34282                                  ;----------------------------------------------------------------------------
 34283                                  
 34284                                  Exec_Dealloc:
 34285 0000608A 53                      	push	BX
 34286                                  	;mov	bx,0
 34287 0000608B 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34288 0000608D E882B2                  	call	ECritMEM
 34289 00006090 E80200                  	call	ChangeOwners
 34290 00006093 5B                      	pop	BX
 34291 00006094 C3                      	retn
 34292                                  
 34293                                  ; 18/12/2022
 34294                                  %if 0
 34295                                  ;----------------------------------------------------------------------------
 34296                                  ;
 34297                                  ;----------------------------------------------------------------------------
 34298                                  
 34299                                  Exec_Alloc:
 34300                                  	push	BX
 34301                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34302                                  	; 20/05/2019 - Retro DOS v4.0
 34303                                  	; MSDOS 6.0
 34304                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34305                                  	call	ChangeOwners
 34306                                  	call	LCritMEM
 34307                                  	pop	BX
 34308                                  	retn
 34309                                  
 34310                                  %endif
 34311                                  
 34312                                  ;----------------------------------------------------------------------------
 34313                                  ;
 34314                                  ;----------------------------------------------------------------------------
 34315                                  
 34316                                  ChangeOwners:
 34317 00006095 9C                      	pushf
 34318 00006096 50                      	push	AX
 34319                                  	;mov	ax,[bp-14]
 34320 00006097 8B46F2                  	mov	AX,Exec_Environ
 34321 0000609A E80900                  	call	ChangeOwner
 34322                                  	;mov	ax,[bp-18]
 34323 0000609D 8B46EE                  	mov	AX,Exec_Load_Block
 34324 000060A0 E80300                  	call	ChangeOwner
 34325 000060A3 58                      	pop	AX
 34326 000060A4 9D                      	popf
 34327                                  chgown_retn:
 34328 000060A5 C3                      	retn
 34329                                  
 34330                                  ;----------------------------------------------------------------------------
 34331                                  ;
 34332                                  ;----------------------------------------------------------------------------
 34333                                  
 34334                                  ChangeOwner:
 34335 000060A6 09C0                    	or	AX,AX			; is area allocated?
 34336 000060A8 74FB                    	jz	short chgown_retn	; no, do nothing
 34337 000060AA 48                      	dec	AX
 34338 000060AB 1E                      	push	DS
 34339 000060AC 8ED8                    	mov	DS,AX
 34340 000060AE 891E0100                	mov	[ARENA.OWNER],BX
 34341 000060B2 1F                      	pop	DS
 34342 000060B3 C3                      	retn
 34343                                  
 34344                                  ;----------------------------------------------------------------------------
 34345                                  ;
 34346                                  ;----------------------------------------------------------------------------
 34347                                  
 34348                                  ; 20/05/2019 - Retro DOS v4.0
 34349                                  
 34350                                  	; MSDOS 6.0
 34351                                  Scan_Execname:
 34352 000060B4 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34353                                  Scan_Execname1:				; M028
 34354                                  Save_Begin:				;
 34355 000060B7 89F1                    	mov	CX,SI			; CX= starting addr
 34356                                  Scan0:					;
 34357 000060B9 AC                      	lodsb				; get char
 34358                                  
 34359 000060BA 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34360 000060BC 74F9                    	jz	short Save_Begin	; yes, save si
 34361 000060BE 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34362 000060C0 74F5                    	jz	short Save_Begin	; yes, save si
 34363 000060C2 3C00                    	cmp	AL,0			; is end of name
 34364 000060C4 75F3                    	jnz	short Scan0		; no, continue scanning
 34365 000060C6 29CE                    	sub	SI,CX			; get name's length
 34366 000060C8 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34367                                  
 34368 000060CA C3                      	retn
 34369                                  
 34370                                  ;----------------------------------------------------------------------------
 34371                                  ;
 34372                                  ;----------------------------------------------------------------------------
 34373                                  
 34374                                  ; 20/05/2019 - Retro DOS v4.0
 34375                                  
 34376                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34377                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34378                                  
 34379                                  	; MSDOS 6.0
 34380                                  
 34381                                  Scan_Special_Entries:
 34382                                  
 34383 000060CB 49                      	dec	CX			; cx= name length
 34384                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34385                                  					;reset to current version
 34386                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34387                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34388                                  	;mov	word [ss:SPECIAL_VERSION],5
 34389                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34390                                  
 34391                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34392 000060CC 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34393                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34394                                  				; 24/09/2023
 34395                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34396                                  ;***	call	Reset_Version
 34397                                  
 34398                                  ;M060	push	SS
 34399                                  ;M060	pop	ES
 34400                                  
 34401 000060D3 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34402 000060D8 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34403 000060DA 09F8                    	or	AX,DI			;M060; be sure the table exists
 34404 000060DC 7427                    	jz	short End_List		;M060; If ZR then no table
 34405                                  
 34406                                  GetEntries:
 34407 000060DE 268A05                  	mov	AL,[ES:DI]		; end of list
 34408 000060E1 08C0                    	or	AL,AL
 34409 000060E3 7420                    	jz	short End_List		; yes
 34410                                  
 34411 000060E5 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34412 000060EA 38C8                    	cmp	AL,CL			; same length ?
 34413 000060EC 751B                    	jnz	short SkipOne 		; no
 34414                                  
 34415 000060EE 47                      	inc	DI			; es:di -> special name
 34416 000060EF 51                      	push	CX			; save length and name addr
 34417 000060F0 56                      	push	SI
 34418                                  
 34419                                  ; M050 - BEGIN
 34420                                  
 34421 000060F1 50                      	push	ax			; save len
 34422                                  sse_next_char:
 34423 000060F2 AC                      	lodsb
 34424 000060F3 E8D1EE                  	call	UCase
 34425 000060F6 AE                      	scasb
 34426 000060F7 750D                    	jne	short Not_Matched
 34427 000060F9 E2F7                    	loop	sse_next_char
 34428                                  	
 34429                                  ;	repz	cmpsb			; same name ?
 34430                                  ;	jnz	short Not_Matched	; no
 34431                                  
 34432 000060FB 58                      	pop	ax			; take len off the stack
 34433                                  
 34434                                  ; M050 - END
 34435                                  
 34436 000060FC 268B05                  	mov	AX,[ES:DI]		; get special version
 34437 000060FF 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34438                                  
 34439                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34440                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34441                                  
 34442 00006103 5E                      	pop	SI
 34443 00006104 59                      	pop	CX
 34444                                  	; 18/12/2022
 34445                                  	;jmp	SHORT End_List
 34446                                  
 34447                                  	; 18/12/2022
 34448                                  End_List:
 34449 00006105 C3                      	retn
 34450                                  
 34451                                  Not_Matched:
 34452 00006106 58                      	pop	ax			; get len from stack ; M050
 34453 00006107 5E                      	pop	SI			; restore si,cx
 34454 00006108 59                      	pop	CX
 34455                                  
 34456                                  SkipOne:
 34457 00006109 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34458 0000610E 30E4                    	xor	AH,AH			; position to next entry
 34459 00006110 01C7                    	add	DI,AX
 34460                                  
 34461 00006112 83C703                  	add	DI,3			; DI -> next entry length
 34462                                  ;***	add	DI,4			; DI -> next entry length
 34463                                  
 34464 00006115 EBC7                    	jmp	short GetEntries
 34465                                  
 34466                                  	; 18/12/2022
 34467                                  ;End_List:
 34468                                  	;retn
 34469                                  
 34470                                  ; 04/08/2018 - Retro DOS v3.0
 34471                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34472                                  
 34473                                  ;----------------------------------------------------------------------------
 34474                                  ;SUBTTL Terminate and stay resident handler
 34475                                  ;
 34476                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34477                                  ;	    truncate the current block.
 34478                                  ;
 34479                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34480                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34481                                  ;	    and restoring the vectors.
 34482                                  ;
 34483                                  ;----------------------------------------------------------------------------
 34484                                  
 34485                                  	; 20/05/2019 - Retro DOS v4.0
 34486                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34487                                  
 34488                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34489                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34490                                  
 34491                                  _$KEEP_PROCESS:
 34492 00006117 50                      	push	AX			; keep exit code around
 34493                                  	;mov	byte [SS:EXIT_TYPE],3
 34494 00006118 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34495 0000611E 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34496 00006123 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34497 00006126 7303                    	jae	short Keep_Shrink	; info
 34498                                  
 34499 00006128 BA0600                  	mov	DX,6h
 34500                                  
 34501                                  Keep_Shrink:
 34502 0000612B 89D3                    	mov	BX,DX
 34503 0000612D 53                      	push	BX
 34504 0000612E 06                      	push	ES
 34505 0000612F E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34506 00006132 1F                      	pop	DS
 34507 00006133 5B                      	pop	BX
 34508 00006134 7207                    	jc	short Keep_Done		; failed on modification
 34509                                  
 34510 00006136 8CD8                    	mov	AX,DS
 34511 00006138 01D8                    	add	AX,BX
 34512                                  	;mov	[2],ax
 34513 0000613A A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34514                                  
 34515                                  Keep_Done:
 34516 0000613D 58                      	pop	AX
 34517 0000613E EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34518                                  
 34519                                  ;----------------------------------------------------------------------------
 34520                                  ;
 34521                                  ;----------------------------------------------------------------------------
 34522                                  
 34523                                  STAY_RESIDENT:
 34524                                  	;mov	ax,3100h
 34525 00006140 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34526 00006143 83C20F                  	add	DX,15
 34527 00006146 D1DA                    	rcr	DX,1
 34528 00006148 B103                    	mov	CL,3
 34529 0000614A D3EA                    	shr	DX,CL
 34530                                  
 34531 0000614C E9B8A1                  	jmp	COMMAND
 34532                                  
 34533                                  ;----------------------------------------------------------------------------
 34534                                  ;SUBTTL $EXIT - return to parent process
 34535                                  ;   Assembler usage:
 34536                                  ;	    MOV     AL, code
 34537                                  ;	    MOV     AH, Exit
 34538                                  ;	    INT     int_command
 34539                                  ;   Error return:
 34540                                  ;	    None.
 34541                                  ;
 34542                                  ;----------------------------------------------------------------------------
 34543                                  
 34544                                  	; 20/05/2019 - Retro DOS v4.0
 34545                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34546                                  
 34547                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34548                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34549                                  _$EXIT:
 34550                                  	; 04/08/2018 - Retro DOS v3.0
 34551                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34552 0000614F 30E4                    	xor	AH,AH
 34553 00006151 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34554 00006156 08E4                    	or	AH,AH
 34555                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34556 00006158 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34557 0000615E 7406                    	jz	short exit_inner
 34558                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34559 00006160 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34560                                  
 34561                                  	;entry	Exit_inner
 34562                                  exit_inner:
 34563 00006166 E81CA3                  	call	Get_User_Stack		;PBUGBUG
 34564                                  
 34565 00006169 36FF36[3003]            	push	word [ss:CurrentPDB]
 34566                                  	;pop	word [si+14h]
 34567 0000616E 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34568 00006171 EB08                    	jmp	short abort_inner
 34569                                  
 34570                                  ;BREAK <$ABORT -- Terminate a process>
 34571                                  ;----------------------------------------------------------------------------
 34572                                  ; Inputs:
 34573                                  ;	user_CS:00 must point to valid program header block
 34574                                  ; Function:
 34575                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34576                                  ;	to the terminate address
 34577                                  ; Returns:
 34578                                  ;	TO THE TERMINATE ADDRESS
 34579                                  ;----------------------------------------------------------------------------
 34580                                  
 34581                                  _$ABORT:
 34582 00006173 30C0                    	xor	AL,AL
 34583                                  	;mov	byte [SS:EXIT_TYPE],0
 34584                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34585 00006175 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34586                                  
 34587                                  	; abort_inner must have AL set as the exit code! The exit type
 34588                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34589                                  	; to be correct as the one that is terminating.
 34590                                  
 34591                                  abort_inner:
 34592 0000617B 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34593 00006180 36A3[3403]              	mov	[SS:exit_code],AX
 34594 00006184 E8FEA2                  	call	Get_User_Stack
 34595                                  
 34596                                  	;mov	ds,[si+14h]
 34597 00006187 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34598 0000618A 31C0                    	xor	AX,AX
 34599 0000618C 8EC0                    	mov	ES,AX
 34600                                  	;mov	si,10
 34601 0000618E BE0A00                  	mov	SI,SAVEXIT
 34602                                  	;mov	di,88h
 34603 00006191 BF8800                  	mov	DI,addr_int_terminate
 34604 00006194 A5                      	movsw
 34605 00006195 A5                      	movsw
 34606 00006196 A5                      	movsw
 34607 00006197 A5                      	movsw
 34608 00006198 A5                      	movsw
 34609 00006199 A5                      	movsw
 34610 0000619A E944F2                  	jmp	reset_environment
 34611                                  
 34612                                  ;----------------------------------------------------------------------------
 34613                                  ;
 34614                                  ; fixexepatch will point to this is DOS loads low. 
 34615                                  ;
 34616                                  ;----------------------------------------------------------------------------
 34617                                  ; MSDOS 6.0
 34618                                  
 34619                                  ; 29/04/2019 - Retro DOS v4.0
 34620                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34621                                  
 34622                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34623                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34624                                  
 34625                                  RetExePatch: ; proc near
 34626                                  	
 34627 0000619D C3                      	retn
 34628                                  
 34629                                  ;============================================================================
 34630                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34631                                  ;============================================================================
 34632                                  ; 04/08/2018 - Retro DOS v3.0
 34633                                  ; 14/05/2019 - Retro DOS v4.0
 34634                                  
 34635                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34636                                  
 34637                                  ;**
 34638                                  ;	Microsoft Confidential
 34639                                  ;	Copyright (C) Microsoft Corporation 1991
 34640                                  ;	All Rights Reserved.
 34641                                  ;
 34642                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34643                                  ;	I/O specs are defined in DISPATCH.
 34644                                  ;
 34645                                  ;	$ALLOC
 34646                                  ;	$SETBLOCK
 34647                                  ;	$DEALLOC
 34648                                  ;	$AllocOper
 34649                                  ;	arena_free_process
 34650                                  ;	arena_next
 34651                                  ;	check_signature
 34652                                  ;	Coalesce
 34653                                  ;
 34654                                  ;	Modification history:
 34655                                  ;
 34656                                  ;	    Created: ARR 30 March 1983
 34657                                  ;
 34658                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34659                                  ;		      M003 - added support for link/unlink UMBs from
 34660                                  ;			     DOS arena chain. 7/18/90
 34661                                  ;		      M009 - Added error returns invalid function and 
 34662                                  ;			     arena trashed in set link state call.
 34663                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34664                                  ;			     if UMB_HEAD is initialized.
 34665                                  ;
 34666                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34667                                  ;			     support. Please see under M009 in 
 34668                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34669                                  ;
 34670                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34671                                  ;			     sure that umb_head arena is valid and also make
 34672                                  ;			     sure that the previous arena is pointing to 
 34673                                  ;			     umb_head.
 34674                                  ;
 34675                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34676                                  ;			     set allloc strategy.
 34677                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34678                                  ;			     bx in AllocSetStrat.
 34679                                  ;
 34680                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34681                                  ;			     a bit to indicate to dos dispatcher to turn
 34682                                  ;			     a20 off before iret. See M016.
 34683                                  ;
 34684                                  
 34685                                  ;	BREAK	<memory allocation utility routines>
 34686                                  
 34687                                  
 34688                                  ; 15/04/2018 - Retro DOS v2.0
 34689                                  ;----------------------------------------------------------------------------
 34690                                  ; xenix memory calls for MSDOS
 34691                                  ;
 34692                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34693                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34694                                  ;
 34695                                  ;INCLUDE DOSSEG.ASM
 34696                                  
 34697                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34698                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34699                                  
 34700                                  ;.xlist
 34701                                  ;.xcref
 34702                                  ;INCLUDE DOSSYM.ASM
 34703                                  ;INCLUDE DEVSYM.ASM
 34704                                  ;.cref
 34705                                  ;.list
 34706                                  
 34707                                  ;TITLE ALLOC.ASM - memory arena manager
 34708                                  ;NAME Alloc
 34709                                  
 34710                                  ;SUBTTL memory allocation utility routines
 34711                                  ;PAGE
 34712                                  ;
 34713                                  ; arena data
 34714                                  ;
 34715                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34716                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34717                                  ;       i_need  FirstArena,WORD         ; first free block found
 34718                                  ;       i_need  BestArena,WORD          ; best free block found
 34719                                  ;       i_need  LastArena,WORD          ; last free block found
 34720                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34721                                  
 34722                                  ;**	Arena_Free_Process
 34723                                  ;----------------------------------------------------------------------------
 34724                                  ;	Free all arena blocks allocated to a prOcess
 34725                                  ;
 34726                                  ;	ENTRY	(bx) = PID of process
 34727                                  ;	EXIT	none
 34728                                  ;	USES	????? BUGBUG
 34729                                  ;----------------------------------------------------------------------------
 34730                                  
 34731                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34732                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34733                                  
 34734                                  arena_free_process:
 34735                                  	; 14/05/2019 - Retro DOS v4.0
 34736                                  	; 04/08/2018 - Retro DOS v3.0
 34737 0000619E 36A1[2400]                      MOV	AX,[SS:arena_head]
 34738                                  arena_free_process_start:
 34739 000061A2 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34740                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34741 000061A5 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34742                                  
 34743                                  arena_free_process_loop:
 34744                                          ;retc
 34745 000061A8 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34746 000061AA 06                      	PUSH    ES
 34747 000061AB 1F                              POP     DS
 34748                                  	;cmp	[1],bx 
 34749 000061AC 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34750 000061B0 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34751                                  	;mov	[1],di
 34752 000061B2 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34753                                  
 34754                                  arena_free_next:
 34755                                  	;cmp	byte [di],5Ah ;'Z'
 34756 000061B6 803D5A                          CMP     BYTE [DI],arena_signature_end
 34757                                                                          ; end of road, Jack?
 34758                                          ;retz				; never come back no more
 34759                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34760                                  	; 14/05/2019
 34761                                  	; MSDOS 6.0
 34762 000061B9 7405                    	jz	short arena_chk_umbs
 34763                                          
 34764 000061BB E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34765 000061BE EBE8                            JMP     SHORT arena_free_process_loop
 34766                                  
 34767                                  	; MSDOS 6.0
 34768                                  arena_chk_umbs:				; M010 - Start
 34769                                  	; 20/05/2019
 34770 000061C0 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34771 000061C4 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34772 000061C7 741E                    	je	short ret_label		; N: we're done
 34773                                  	
 34774 000061C9 8CDF                    	mov	di,ds			; di = last arena
 34775 000061CB 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34776 000061CD 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34777 000061CF EBD1                    	jmp	short arena_free_process_start
 34778                                  					; M010 - End
 34779                                  ;AFP_RETN:
 34780                                  ;	RETN
 34781                                  
 34782                                  ;	BREAK	<Arena Helper Routines>
 34783                                  
 34784                                  ;**	Arena_Next - Find Next item in Arena
 34785                                  ;----------------------------------------------------------------------------
 34786                                  ;	ENTRY	DS - pointer to block head
 34787                                  ;		(di) = 0
 34788                                  ;	EXIT	AX,ES - pointers to next head
 34789                                  ;		'C' set iff arena damaged
 34790                                  ;----------------------------------------------------------------------------
 34791                                  
 34792                                  arena_next:
 34793 000061D1 8CD8                            MOV     AX,DS                   ; AX <- current block
 34794 000061D3 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34795 000061D7 40                              INC     AX                      ; remember that header!
 34796                                  
 34797                                  ;       fall into check_signature and return
 34798                                  ;
 34799                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34800                                  ;       RETN
 34801                                  
 34802                                  ;**	Check_Signature - Check Memory Block Signature
 34803                                  ;----------------------------------------------------------------------------
 34804                                  ;	ENTRY	(AX) = address of block header
 34805                                  ;		(di) = 0
 34806                                  ;	EXIT	 ES = AX
 34807                                  ;		'C' clear if signature good
 34808                                  ;		'C' set if signature bad
 34809                                  ;	USES	ES, Flags
 34810                                  ;----------------------------------------------------------------------------
 34811                                  
 34812                                  check_signature:        
 34813                                  
 34814 000061D8 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34815                                  	;cmp	byte [es:di],4Dh ; 'M'
 34816 000061DA 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34817                                                                          ; IF next signature = not_end THEN
 34818 000061DE 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34819                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34820 000061E0 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34821                                                                          ; IF next signature = end then
 34822 000061E4 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34823 000061E6 F9                              STC                             ; set error
 34824                                  ret_label: ; MSDOS 6.0
 34825                                  AFP_RETN:
 34826                                   	; Retro DOS v2.0 - 05/03/2018
 34827                                  check_signature_ok:
 34828                                  COALESCE_RETN:
 34829 000061E7 C3                      	RETN
 34830                                  
 34831                                  ;**	Coalesce - Combine free blocks ahead with current block
 34832                                  ;----------------------------------------------------------------------------
 34833                                  ;	Coalesce adds the block following the argument to the argument block,
 34834                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34835                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34836                                  ;	preceeding allocated block.
 34837                                  ;
 34838                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34839                                  ;		(di) = 0
 34840                                  ;	EXIT	'C' clear if OK
 34841                                  ;		  (ds) unchanged, this block updated
 34842                                  ;		  (ax) = address of next block, IFF not at end
 34843                                  ;		'C' set if arena trashed
 34844                                  ;	USES	(cx)
 34845                                  ;----------------------------------------------------------------------------
 34846                                          
 34847                                  Coalesce:
 34848                                  	;cmp	byte [di],5Ah ; 'Z'
 34849 000061E8 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34850                                                                          ; IF current signature = END THEN
 34851                                          ;retz				;   GOTO ok
 34852 000061EB 74FA                            jz	short COALESCE_RETN
 34853 000061ED E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34854                                          ;retc				; IF no error THEN GOTO check
 34855 000061F0 72F5                    	jc	short COALESCE_RETN
 34856                                  
 34857                                  coalesce_check:
 34858                                  	;cmp	[es:1],di
 34859 000061F2 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34860                                          ;retnz				; IF next block isnt free THEN return
 34861 000061F7 75EE                            JNZ	SHORT COALESCE_RETN
 34862                                  	;mov	cx,[ES:3]
 34863 000061F9 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34864 000061FE 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34865                                          ;ADD	[3],CX
 34866 000061FF 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34867 00006203 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34868 00006206 880D                            MOV     [DI],CL
 34869 00006208 EBDE                            JMP     SHORT Coalesce		; try again
 34870                                  
 34871                                  ; 04/08/2018 - Retro DOS v3.0
 34872                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34873                                  
 34874                                  ;	BREAK  <$Alloc - allocate space in memory>
 34875                                  
 34876                                  ; MSDOS 6.0
 34877                                  ;----------------------------------------------------------------------------
 34878                                  ;**	$Alloc - Allocate Memory Space
 34879                                  ;
 34880                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34881                                  ;	Alloc returns a pointer to a free block of memory that
 34882                                  ;	has the requested size in paragraphs.
 34883                                  ;
 34884                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34885                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34886                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34887                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34888                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34889                                  ;
 34890                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34891                                  ;	starts from arena_head.
 34892                                  ;
 34893                                  ;	Assembler usage:
 34894                                  ;           MOV     BX,size
 34895                                  ;           MOV     AH,Alloc
 34896                                  ;           INT     21h
 34897                                  ;
 34898                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34899                                  ;	so that we start searching the arena at it's first non-trivial free
 34900                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34901                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34902                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34903                                  ;	verify that this is true; if so, this can stay as is
 34904                                  ;
 34905                                  ;	ENTRY	(bx) = requested size, in bytes
 34906                                  ;		(DS) = (ES) = DOSGROUP
 34907                                  ;	EXIT	'C' clear if memory allocated
 34908                                  ;		  (ax:0) = address of requested memory
 34909                                  ;		'C' set if request failed
 34910                                  ;		  (AX) = error_not_enough_memory
 34911                                  ;		    (bx) = max size we could have allocated
 34912                                  ;		  (ax) = error_arena_trashed
 34913                                  ;	USES	All
 34914                                  ;----------------------------------------------------------------------------
 34915                                  
 34916                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34917                                  ;----------------------------------------------------------------------------
 34918                                  ;SUBTTL $Alloc - allocate space in memory
 34919                                  ;
 34920                                  ;   Assembler usage:
 34921                                  ;           MOV     BX,size
 34922                                  ;           MOV     AH,Alloc
 34923                                  ;           INT     21h
 34924                                  ;         AX:0 is pointer to allocated memory
 34925                                  ;         BX is max size if not enough memory
 34926                                  ;
 34927                                  ;   Description:
 34928                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34929                                  ;       memory that has the requested  size  in  paragraphs.
 34930                                  ;
 34931                                  ;   Error return:
 34932                                  ;           AX = error_not_enough_memory
 34933                                  ;              = error_arena_trashed
 34934                                  ;----------------------------------------------------------------------------
 34935                                  
 34936                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34937                                  
 34938                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34939                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34940                                  
 34941                                  _$ALLOC:
 34942                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34943                                  	; 14/05/2019 - Retro DOS v4.0
 34944                                  	; 04/08/2018 - Retro DOS v3.0
 34945                                  	;EnterCrit critMem
 34946 0000620A E805B1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34947                                  
 34948                                  ; 17/12/2022
 34949                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34950                                  ;%if 0
 34951                                  	; 14/05/2019
 34952 0000620D 16                      	push	ss
 34953 0000620E 1F                      	pop	ds
 34954                                  
 34955                                  	; MSDOS 6.0
 34956                                  	;mov	ax,[ss:arena_head]
 34957                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34958                                  
 34959 0000620F A1[2400]                	mov	ax,[arena_head]
 34960 00006212 A3[8E00]                	mov	[START_ARENA],ax			
 34961                                  	
 34962                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34963 00006215 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34964                                  					; Q: should we start scanning from 
 34965                                  					;    UMB's
 34966 0000621A 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34967                                  		
 34968                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34969                                  	;cmp	word [UMB_HEAD],-1
 34970                                  	;je	short norm_alloc	; N: scan from arena_head
 34971                                  
 34972                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34973 0000621C F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34974 00006221 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34975                                  	
 34976                                  	;mov	ax,[ss:UMB_HEAD]
 34977                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34978 00006223 A1[8C00]                	mov	ax,[UMB_HEAD]
 34979 00006226 A3[8E00]                	mov	[START_ARENA],ax
 34980                                  					; M000 - end
 34981                                  norm_alloc:
 34982 00006229 31C0                            XOR     AX,AX
 34983 0000622B 89C7                            MOV     DI,AX
 34984                                  	; 15/03/2018
 34985                                          ;MOV	[SS:FirstArena],AX	; init the options
 34986                                          ;MOV	[SS:BestArena],AX
 34987                                          ;MOV	[SS:LastArena],AX
 34988                                  	; 14/05/2019
 34989 0000622D A3[4003]                	MOV	[FirstArena],AX		; init the options
 34990 00006230 A3[4203]                        MOV	[BestArena],AX
 34991 00006233 A3[4403]                        MOV	[LastArena],AX
 34992 00006236 50                              PUSH    AX                      ; alloc_max <- 0
 34993                                  	; 04/08/2018
 34994                                  start_scan:
 34995                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34996                                  	;MOV	AX,[arena_head]
 34997                                  
 34998                                  	; 14/05/2019	
 34999                                  	; MSDOS 6.0
 35000                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35001 00006237 A1[8E00]                	mov	ax,[START_ARENA]
 35002                                  
 35003                                  	; 27/09/2023 (BugFix) (*) 
 35004                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35005                                  start_scan_x:
 35006                                  
 35007 0000623A E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35008 0000623D 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35009                                  
 35010                                  ;%endif
 35011                                  
 35012                                  ; 17/12/2022
 35013                                  %if 0
 35014                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35015                                  
 35016                                  	; MSDOS 6.0
 35017                                  	mov	ax,[ss:arena_head]
 35018                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35019                                  
 35020                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35021                                  					; Q: should we start scanning from 
 35022                                  					;    UMB's
 35023                                  	jz	short norm_alloc	; N: scan from arena_head
 35024                                  		
 35025                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35026                                  	;je	short norm_alloc	; N: scan from arena_head
 35027                                  
 35028                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35029                                  	jz	short norm_alloc	; N: scan from arena_head
 35030                                  	
 35031                                  	mov	ax,[ss:UMB_HEAD]
 35032                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35033                                  					; M000 - end
 35034                                  norm_alloc:
 35035                                          XOR     AX,AX
 35036                                          MOV     DI,AX
 35037                                  	; 15/03/2018
 35038                                  	MOV	[SS:FirstArena],AX	; init the options
 35039                                  	MOV	[SS:BestArena],AX
 35040                                  	MOV	[SS:LastArena],AX
 35041                                          PUSH    AX                      ; alloc_max <- 0
 35042                                  	; 04/08/2018
 35043                                  start_scan:
 35044                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35045                                  	; 14/05/2019	
 35046                                  	; MSDOS 6.0
 35047                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35048                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35049                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35050                                  %endif
 35051                                  
 35052                                  alloc_scan:
 35053 0000623F 06                              PUSH    ES
 35054 00006240 1F                              POP     DS                      ; DS <- ES
 35055 00006241 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35056 00006245 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35057                                  
 35058                                  alloc_next:
 35059                                  	; MSDOS 6.0			; M000 - start 
 35060 00006247 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35061 0000624D 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35062                                  	
 35063 0000624F 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35064                                  					; Q: is alloc strategy high_first
 35065 00006255 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35066 00006257 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35067 0000625B 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35068                                  					;    arena_head
 35069 00006260 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35070 00006262 8CD8                    	mov	ax,ds			; ax = current block
 35071 00006264 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35072 00006269 EB03                    	jmp	short alloc_chk_end
 35073                                  
 35074                                  norm_strat:
 35075                                  	;cmp	byte [di],5Ah ; 'Z'
 35076 0000626B 803D5A                          CMP     BYTE [DI],arena_signature_end
 35077                                                                          ; IF current block is last THEN
 35078                                  alloc_chk_end:
 35079 0000626E 740E                            JZ      SHORT alloc_end		;   GOTO end
 35080 00006270 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35081 00006273 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35082                                  
 35083                                  alloc_err:
 35084 00006275 58                              POP     AX
 35085                                  
 35086                                  alloc_trashed:
 35087                                  	;LeaveCrit critMem
 35088 00006276 E8B4B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35089                                          ;error	error_arena_trashed
 35090                                  	;mov	al,7
 35091 00006279 B007                    	MOV	AL,error_arena_trashed
 35092                                  alloc_errj:
 35093 0000627B E9C6A3                  	JMP	SYS_RET_ERR
 35094                                  
 35095                                  alloc_end:
 35096                                  	; 18/05/2019
 35097 0000627E 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35098 00006284 7403                    	jz	short alloc_chk 
 35099 00006286 E98400                  	jmp	alloc_do_split
 35100                                  
 35101                                  alloc_chk:
 35102                                  	; MSDOS 6.0
 35103 00006289 36A1[2400]              	mov	ax,[ss:arena_head]
 35104 0000628D 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35105 00006292 740E                    	je	short alloc_fail	; Y: not enough memory
 35106                                  					; N:
 35107                                  					; Q: is the alloc strat HIGH_ONLY
 35108 00006294 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35109 0000629A 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35110                                  	
 35111 0000629C 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35112                                  	; 27/09/2023 (*)
 35113 000062A0 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35114                                  	;jmp	short start_scan
 35115                                  					; M000 - end
 35116                                  
 35117                                  alloc_fail:
 35118                                          ;invoke Get_User_Stack
 35119 000062A2 E8E0A1                          CALL	Get_User_Stack
 35120 000062A5 5B                      	POP     BX
 35121                                          ;MOV	[SI].user_BX,BX
 35122                                  	;MOV	[SI+2],BX
 35123 000062A6 895C02                  	mov	[SI+user_env.user_BX],bx
 35124                                  	;LeaveCrit critMem
 35125 000062A9 E881B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35126                                  	;error	error_not_enough_memory
 35127                                  	;mov	al,8
 35128 000062AC B008                    	MOV	AL,error_not_enough_memory
 35129                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35130 000062AE EBCB                    	jmp	short alloc_errj
 35131                                  	;JMP	SYS_RET_ERR
 35132                                  
 35133                                  alloc_free:
 35134 000062B0 E835FF                          CALL    Coalesce		; add following free block to current
 35135 000062B3 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35136 000062B5 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35137 000062B9 5A                              POP     DX                      ; check for max found size
 35138 000062BA 39D1                            CMP     CX,DX
 35139 000062BC 7602                            JNA     SHORT alloc_test
 35140 000062BE 89CA                            MOV     DX,CX
 35141                                  
 35142                                  alloc_test:
 35143 000062C0 52                              PUSH    DX
 35144 000062C1 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35145 000062C3 7782                    	JA      SHORT alloc_next	;   GOTO next
 35146                                  
 35147                                  	; 15/03/2018
 35148 000062C5 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35149 000062CB 7505                    	JNZ	SHORT alloc_best
 35150 000062CD 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35151                                  alloc_best:
 35152 000062D2 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35153 000062D8 740E                            JZ      SHORT alloc_make_best	; initial best
 35154 000062DA 06                              PUSH	ES
 35155 000062DB 368E06[4203]                    MOV     ES,[SS:BestArena]
 35156 000062E0 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35157 000062E5 07                              POP	ES
 35158 000062E6 7605                            JBE     SHORT alloc_last
 35159                                  alloc_make_best:
 35160 000062E8 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35161                                  alloc_last:
 35162 000062ED 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35163 000062F2 E952FF                          JMP     alloc_next
 35164                                  ;
 35165                                  ; split the block high
 35166                                  ;
 35167                                  alloc_do_split_high:
 35168 000062F5 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35169 000062FA 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35170 000062FE 29D9                            SUB     CX,BX
 35171 00006300 8CDA                            MOV     DX,DS
 35172 00006302 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35173 00006304 01CA                            ADD     DX,CX                   ; point to next block
 35174 00006306 8EC2                            MOV     ES,DX                   ; no decrement!
 35175 00006308 49                              DEC     CX
 35176 00006309 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35177 0000630B EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35178                                  ;
 35179                                  ; we have scanned memory and have found all appropriate blocks
 35180                                  ; check for the type of allocation desired; first and best are identical
 35181                                  ; last must be split high
 35182                                  ;
 35183                                  alloc_do_split:
 35184                                  
 35185                                  ; 17/12/2022
 35186                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35187                                  ;%if 0
 35188                                  	; 14/05/2019
 35189                                  	; MSDOS 6.0			; M000 - start
 35190                                  	;xor	cx,cx
 35191 0000630D 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35192                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35193 00006312 80E13F                  	and	cl,3Fh
 35194                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35195 00006315 80F901                  	cmp	cl,BEST_FIT
 35196 00006318 77DB                    	ja	short alloc_do_split_high
 35197                                  ;%endif
 35198                                  
 35199                                  	; 17/12/2022
 35200                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35201                                  	; MSDOS 6.0 & MSDOS 5.0
 35202                                  	;xor	cx,cx
 35203                                  	;mov	cl,[ss:AllocMethod]
 35204                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35205                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35206                                  	;ja	short alloc_do_split_high
 35207                                  
 35208                                  	; 15/03/2018
 35209                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35210                                  	; 04/08/2018
 35211                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35212                                          ;JA	SHORT alloc_do_split_high
 35213                                          
 35214 0000631A 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35215 0000631F 7205                    	JB      SHORT alloc_get_size
 35216 00006321 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35217                                  
 35218                                  alloc_get_size:
 35219 00006326 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35220 0000632A 29D9                            SUB     CX,BX                   ; get room left over
 35221 0000632C 8CD8                            MOV     AX,DS
 35222 0000632E 89C2                            MOV     DX,AX                   ; save for owner setting
 35223 00006330 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35224 00006332 01D8                            ADD     AX,BX
 35225 00006334 40                              INC     AX                      ; remember the header
 35226 00006335 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35227 00006337 49                              DEC     CX                      ; CX <- size of split block
 35228                                  alloc_set_sizes:
 35229 00006338 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35230 0000633C 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35231                                  	;mov	bl,4Dh ; 'M'
 35232 00006341 B34D                            MOV     BL,arena_signature_normal
 35233 00006343 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35234 00006345 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35235 00006348 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35236                                  
 35237                                  alloc_set_owner:
 35238 0000634D 8EDA                            MOV     DS,DX
 35239 0000634F 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35240 00006353 A30100                          MOV     [ARENA.OWNER],AX
 35241 00006356 8CD8                            MOV     AX,DS
 35242 00006358 40                              INC     AX
 35243 00006359 5B                              POP     BX
 35244                                  	;LeaveCrit critMem
 35245 0000635A E8D0AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35246                                  	
 35247                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35248                                  alloc_ok:
 35249                                          ;transfer SYS_RET_OK
 35250 0000635D E9DBA2                  	JMP	SYS_RET_OK
 35251                                  
 35252                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35253                                  
 35254                                  ; MSDOS 6.0
 35255                                  ;----------------------------------------------------------------------------
 35256                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35257                                  ;
 35258                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35259                                  ;	any following free space onto this block; then we try to trim the
 35260                                  ;	block down to the size requested.
 35261                                  ;
 35262                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35263                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35264                                  ;	Thus the maximum-size-possible value that we return has already
 35265                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35266                                  ;
 35267                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35268                                  ;		finish it's work. For this reason we build the allocsf
 35269                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35270                                  ;		code.
 35271                                  ;
 35272                                  ;	ENTRY	(es) = segment of old block
 35273                                  ;		(bx) = newsize
 35274                                  ;		(ah) = SETBLOCK
 35275                                  ;
 35276                                  ;	EXIT	'C' clear if OK
 35277                                  ;		'C' set if error
 35278                                  ;		  (ax) = error_invalid_block
 35279                                  ;		       = error_arena_trashed
 35280                                  ;		       = error_not_enough_memory
 35281                                  ;		       = error_invalid_function
 35282                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35283                                  ;	USES	???? BUGBUG
 35284                                  ;----------------------------------------------------------------------------
 35285                                  
 35286                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35287                                  ;----------------------------------------------------------------------------
 35288                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35289                                  ;
 35290                                  ;   Assembler usage:
 35291                                  ;           MOV     ES,block
 35292                                  ;           MOV     BX,newsize
 35293                                  ;           MOV     AH,setblock
 35294                                  ;           INT     21h
 35295                                  ;         if setblock fails for growing, BX will have the maximum
 35296                                  ;         size possible
 35297                                  ;   Error return:
 35298                                  ;           AX = error_invalid_block
 35299                                  ;              = error_arena_trashed
 35300                                  ;              = error_not_enough_memory
 35301                                  ;              = error_invalid_function
 35302                                  ;----------------------------------------------------------------------------
 35303                                  
 35304                                  _$SETBLOCK:        
 35305                                  	; 04/08/2018 - Retro DOS v3.0
 35306                                  	;EnterCrit   critMem
 35307 00006360 E8AFAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35308                                  
 35309 00006363 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35310 00006366 8CC0                            MOV     AX,ES
 35311 00006368 48                              DEC     AX
 35312 00006369 E86CFE                          CALL    check_signature
 35313 0000636C 7303                            JNC     SHORT setblock_grab
 35314                                  
 35315                                  setblock_bad:
 35316 0000636E E905FF                          JMP     alloc_trashed
 35317                                  
 35318                                  setblock_grab:
 35319 00006371 8ED8                            MOV     DS,AX
 35320 00006373 E872FE                          CALL    Coalesce
 35321 00006376 72F6                            JC      SHORT setblock_bad
 35322 00006378 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35323 0000637C 51                              PUSH    CX
 35324 0000637D 39CB                            CMP     BX,CX
 35325 0000637F 76A5                            JBE     SHORT alloc_get_size
 35326 00006381 E91EFF                          JMP     alloc_fail
 35327                                  
 35328                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35329                                  
 35330                                  ; MSDOS 6.0
 35331                                  ;----------------------------------------------------------------------------
 35332                                  ;**	$DEALLOC - Free Heap Memory
 35333                                  ;
 35334                                  ;	ENTRY	(es) = address of item
 35335                                  ;
 35336                                  ;	EXIT	'C' clear of OK
 35337                                  ;		'C' set if error
 35338                                  ;		  (AX) = error_invalid_block
 35339                                  ;	USES	???? BUGBUG
 35340                                  
 35341                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35342                                  ;----------------------------------------------------------------------------
 35343                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35344                                  ;
 35345                                  ;   Assembler usage:
 35346                                  ;           MOV     ES,block
 35347                                  ;           MOV     AH,dealloc
 35348                                  ;           INT     21h
 35349                                  ;
 35350                                  ;   Error return:
 35351                                  ;           AX = error_invalid_block
 35352                                  ;              = error_arena_trashed
 35353                                  ;---------------------------------------------------------------------------- 
 35354                                  
 35355                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35356                                  _$DEALLOC:
 35357                                  	; 14/05/2019 - Retro DOS v4.0    
 35358                                  	; 04/08/2018 - Retro DOS v3.0
 35359                                  	;EnterCrit   critMem
 35360 00006384 E88BAF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35361                                  
 35362                                  	; MSDOS 6.0			; M016, M068 - Start
 35363 00006387 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35364                                  					; Q: was the previous call an int 21
 35365                                  					;    exec call
 35366 0000638D 740D                    	jz	short deallocate	; N: continue
 35367 0000638F 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35368 00006395 7505                    	jne	short deallocate	; N: continue
 35369                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35370                                  	; 25/09/2023
 35371 00006397 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35372                                  deallocate:				; M016, M068 - End
 35373 0000639C BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35374 0000639F 8CC0                            MOV     AX,ES
 35375 000063A1 48                              DEC     AX
 35376 000063A2 E833FE                          CALL    check_signature
 35377 000063A5 720A                            JC      SHORT dealloc_err
 35378 000063A7 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35379                                  	;LeaveCrit critMem
 35380 000063AC E87EAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35381                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35382                                          ;transfer SYS_RET_OK
 35383                                  dealloc_ok:
 35384 000063AF EBAC                    	jmp	short alloc_ok
 35385                                  	;JMP	SYS_RET_OK
 35386                                  
 35387                                  dealloc_err:
 35388                                  	;LeaveCrit critMem
 35389 000063B1 E879AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35390                                          ;error	error_invalid_block
 35391                                  	;mov	al,9
 35392 000063B4 B009                    	MOV	AL,error_invalid_block
 35393                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35394                                  dealloc_errj:
 35395                                  AllocOperErrj:	; 17/12/2022
 35396 000063B6 E98BA2                  	JMP	SYS_RET_ERR
 35397                                  
 35398                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35399                                  
 35400                                  ; MSDOS 6.0
 35401                                  ;----------------------------------------------------------------------------
 35402                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35403                                  ;
 35404                                  ;	Assembler usage:
 35405                                  ;           MOV     AH,AllocOper
 35406                                  ;           MOV     BX,method
 35407                                  ;           MOV     AL,func
 35408                                  ;           INT     21h
 35409                                  ;
 35410                                  ;	ENTRY	
 35411                                  ;		(al) = 0
 35412                                  ;		  Get allocation Strategy in (ax)
 35413                                  ;
 35414                                  ;		(al) = 1, (bx) = method = zw0000xy
 35415                                  ;		  Set allocation strategy.
 35416                                  ;		   w  = 1  => HIGH_ONLY
 35417                                  ;		   z  = 1  => HIGH_FIRST
 35418                                  ;		   xy = 00 => FIRST_FIT
 35419                                  ;		      = 01 => BEST_FIT
 35420                                  ;		      = 10 => LAST_FIT
 35421                                  ;
 35422                                  ;		(al) = 2
 35423                                  ;		  Get UMB link state in (al)
 35424                                  ;
 35425                                  ;		(al) = 3
 35426                                  ;		  Set UMB link state
 35427                                  ;		   (bx) = 0 => Unlink UMBs
 35428                                  ;		   (bx) = 1 => Link UMBs
 35429                                  ;
 35430                                  ;
 35431                                  ;	EXIT	'C' clear if OK
 35432                                  ;
 35433                                  ;		 if (al) = 0
 35434                                  ;		  (ax) = existing method
 35435                                  ;		 if (al) = 1
 35436                                  ;		  Sets allocation strategy
 35437                                  ;		 if (al) = 2
 35438                                  ;		  (al) = 0 => UMBs not linked
 35439                                  ;		  (al) = 1 => UMBs linked in
 35440                                  ;		 if (al) = 3
 35441                                  ;		  Links/Unlinks the UMBs into DOS chain
 35442                                  ;
 35443                                  ;		'C' set if error
 35444                                  ;		  AX = error_invalid_function
 35445                                  ;
 35446                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35447                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35448                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35449                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35450                                  ;		    arena' if an arena sig is damaged.
 35451                                  ;----------------------------------------------------------------------------
 35452                                  
 35453                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35454                                  ;----------------------------------------------------------------------------
 35455                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35456                                  ;
 35457                                  ;   Assembler usage:
 35458                                  ;           MOV     AH,AllocOper
 35459                                  ;           MOV     BX,method
 35460                                  ;           MOV     AL,func
 35461                                  ;           INT     21h
 35462                                  ;
 35463                                  ;   Error return:
 35464                                  ;           AX = error_invalid_function
 35465                                  ;----------------------------------------------------------------------------
 35466                                  
 35467                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35468                                  _$ALLOCOPER:
 35469                                  	; 14/05/2019 - Retro DOS v4.0
 35470                                  	; MSDOS 6.0
 35471 000063B9 08C0                    	or	al,al ; 0
 35472 000063BB 741E                    	jz	short AllocGetStrat
 35473                                  	; 17/12/2022
 35474                                  	;cmp	al,1
 35475                                  	;jz	short AllocSetStrat
 35476                                  
 35477                                  	; 01/12/2022
 35478                                  	;cmp	al, 2
 35479                                  	;jb	short AllocSetStrat
 35480                                  	;ja	short AllocSetLink
 35481                                  	;;jmp	short AllocGetLink
 35482                                  ;AllocGetLink:
 35483                                  	; MSDOS 6.0
 35484                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35485                                  	;and 	al,LINKSTATE		
 35486                                  	;;transfer SYS_RET_OK
 35487                                  	;jmp	SYS_RET_OK
 35488                                  
 35489 000063BD 3C02                    	cmp	al,2
 35490                                  	; 17/12/2022
 35491 000063BF 7223                    	jb	short AllocSetStrat ; al = 1
 35492 000063C1 7432                    	je	short AllocGetLink
 35493                                  
 35494                                  	;cmp	al,2
 35495                                  	;jz	short AllocGetLink
 35496 000063C3 3C03                    	cmp	al,3
 35497 000063C5 7436                    	jz	short AllocSetLink
 35498                                  
 35499                                  	; 15/04/2018
 35500                                  	;CMP	AL,1
 35501                                          ;JB	SHORT AllocOperGet
 35502                                          ;JZ	SHORT AllocOperSet
 35503                                  
 35504                                  AllocOperError:
 35505                                  	; 04/08/2018 - Retro DOS v3.0
 35506                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35507                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35508 000063C7 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35509                                  	;error	error_invalid_function
 35510                                  	;mov	al,1
 35511 000063CD B001                    	MOV	AL,error_invalid_function
 35512                                  	; 17/12/2022
 35513                                  ;AllocOperErrj:
 35514                                  	;JMP	SYS_RET_ERR
 35515                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35516                                  	;jmp	short dealloc_errj
 35517                                  	; 17/12/2022
 35518 000063CF EBE5                    	jmp	short AllocOperErrj
 35519                                  
 35520                                  AllocArenaError:
 35521                                  	; MSDOS 6.0
 35522 000063D1 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35523                                  					; M009: Extended Error Locus
 35524                                  	;error	error_arena_trashed	; M009:
 35525                                  	;mov	al,7
 35526 000063D7 B007                    	MOV	AL,error_arena_trashed
 35527                                  	;JMP	SYS_RET_ERR
 35528 000063D9 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35529                                  
 35530                                  AllocGetStrat: 
 35531                                  	; MSDOS 6.0
 35532                                  AllocOperGet:
 35533 000063DB 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35534 000063DF 30E4                            XOR     AH,AH
 35535                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35536                                  	;transfer SYS_RET_OK
 35537                                  AllocOperOk:
 35538                                  	; 17/12/2022
 35539                                  	;jmp	short dealloc_ok
 35540 000063E1 E957A2                  	JMP	SYS_RET_OK
 35541                                  
 35542                                  AllocSetStrat: 
 35543                                  	; 14/05/2019
 35544                                  	; MSDOS 6.0
 35545 000063E4 53                      	push	bx			; M000 - start
 35546                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35547                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35548                                  	; 17/12/2022
 35549 000063E5 80E33F                  	and	bl,3Fh
 35550 000063E8 83FB02                  	cmp	bx,2			; BX must be 0-2
 35551                                  	;cmp	bl,2
 35552 000063EB 5B                      	pop	bx			; M000 - end
 35553 000063EC 77D9                    	ja	short AllocOperError
 35554                                  
 35555                                  AllocOperSet:
 35556 000063EE 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35557                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35558                                  	;transfer SYS_RET_OK
 35559                                  AllocOperOkj:
 35560 000063F3 EBEC                    	jmp	short AllocOperOk
 35561                                  	;JMP	SYS_RET_OK
 35562                                  
 35563                                  AllocGetLink:
 35564                                  	; MSDOS 6.0
 35565 000063F5 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35566                                  	;and	al,1
 35567 000063F9 2401                    	and 	al,LINKSTATE		
 35568                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35569                                  	;transfer SYS_RET_OK
 35570                                  AllocOperOkj2:
 35571                                  	; 17/12/2022
 35572 000063FB EBE4                    	jmp	short AllocOperOk
 35573                                  	;jmp	short AllocOperOkj
 35574                                  	;;JMP	SYS_RET_OK
 35575                                  
 35576                                  AllocSetLink:
 35577                                  	; MSDOS 6.0			; M009 - start
 35578 000063FD 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35579 00006402 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35580 00006405 74C0                    	je	short AllocOperError	; N: error
 35581                                  					; Y: continue
 35582                                  					; M009 - end
 35583 00006407 83FB01                  	cmp	bx,1			
 35584 0000640A 7204                    	jb	short UnlinkUmbs
 35585 0000640C 741C                    	jz	short LinkUmbs
 35586                                  	
 35587 0000640E EBB7                    	jmp	short AllocOperError
 35588                                  	
 35589                                  UnlinkUmbs:
 35590                                  	;test	byte [ss:UMBFLAG],1
 35591 00006410 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35592 00006416 7410                    	jz	short unlinked		; Y: return 
 35593                                  	
 35594 00006418 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35595 0000641B 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35596                                  	
 35597                                  					; make it last
 35598 0000641D C60600005A              	mov	byte [0],arena_signature_end
 35599                                  	
 35600                                  	;and	byte [ss:UMBFLAG],0FEh
 35601 00006422 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35602                                  	
 35603                                  unlinked:
 35604                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35605                                  	;transfer SYS_RET_OK
 35606                                  	; 17/12/2022
 35607 00006428 EBB7                    	jmp	short AllocOperOk
 35608                                  	;jmp	short AllocOperOkj2
 35609                                  	;;JMP	SYS_RET_OK
 35610                                  
 35611                                  LinkUmbs:
 35612 0000642A 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35613 00006430 7510                    	jnz	short linked		; Y: return
 35614                                  	
 35615 00006432 E80F00                  	call	GetLastArena		; get arena before umb_head
 35616 00006435 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35617                                  	
 35618                                  					; make it normal. M061: ds points to
 35619                                  					; arena before umb_head
 35620 00006437 C60600004D              	mov	byte [0],arena_signature_normal
 35621                                  	
 35622 0000643C 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35623                                  linked:
 35624                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35625                                  	;transfer SYS_RET_OK
 35626                                  	; 17/12/2022
 35627 00006442 EB9D                    	jmp	short AllocOperOk
 35628                                  	;jmp	short unlinked
 35629                                  	;;JMP	SYS_RET_OK
 35630                                  
 35631                                  ; MSDOS 6.0
 35632                                  ;--------------------------------------------------------------------------
 35633                                  ; Procedure Name : GetLastArena		-  M003
 35634                                  ;
 35635                                  ; Inputs	 : cx = umb_head
 35636                                  ;
 35637                                  ;
 35638                                  ; Outputs	 : If UMBs are linked
 35639                                  ;			ES = umb_head
 35640                                  ;			DS = arena before umb_head
 35641                                  ;		   else
 35642                                  ;			DS = last arena
 35643                                  ;			ES = next arena. will be umb_head if NC.
 35644                                  ;
 35645                                  ;		   CY if error
 35646                                  ;
 35647                                  ; Uses		 : DS, ES, DI, BX
 35648                                  ;--------------------------------------------------------------------------
 35649                                  
 35650                                  ; 14/05/2019 - Retro DOS v4.0
 35651                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35652                                  
 35653                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35654                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35655                                  	
 35656                                  GetLastArena:
 35657 00006444 50                      	push	ax			; save ax
 35658                                  
 35659 00006445 36A1[2400]              	mov	ax,[ss:arena_head]
 35660 00006449 8EC0                    	mov	es,ax			; es = arena_head
 35661 0000644B 31FF                    	xor	di,di
 35662                                  
 35663 0000644D 26803D5A                	cmp     byte [es:di],arena_signature_end
 35664                                  					; Q: is this the last arena
 35665 00006451 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35666                                  					
 35667                                  GLA_next:
 35668 00006453 8ED8                    	mov	ds,ax
 35669 00006455 E879FD                  	call	arena_next		; ax, es -> next arena
 35670                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35671                                  	;jc	short GLA_err
 35672                                  	; 17/12/2022
 35673 00006458 7228                    	jc	short GLA_err2
 35674                                  
 35675 0000645A 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35676 00006460 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35677                                  					;    umb_head
 35678                                  					; N: terminating condition is 05Ah
 35679                                  
 35680 00006462 26803D5A                	cmp     byte [es:di],arena_signature_end
 35681                                  					; Q: is this the last arena
 35682 00006466 EB02                    	jmp	short GLA_@f
 35683                                  GLA_chkumb:
 35684 00006468 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35685                                  GLA_@f:
 35686 0000646A 75E7                    	jne	short GLA_next		; N: get next arena
 35687                                  
 35688                                  GLA_done:
 35689                                  					; M061 - Start
 35690 0000646C 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35691 00006472 750B                    	jnz	short GLA_ret		; Y: we're done
 35692                                  					; N: let us confirm that the next 
 35693                                  					;    arena is umb_head
 35694 00006474 8ED8                    	mov	ds,ax
 35695 00006476 E858FD                  	call	arena_next		; ax, es -> next arena
 35696                                  	;jc	short GLA_err
 35697 00006479 7207                    	jc	short GLA_err2
 35698 0000647B 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35699 0000647D 7502                    	jne	short GLA_err		; N: error
 35700                                  					; M061 - End
 35701                                  GLA_ret:
 35702                                  	; 17/12/2022				
 35703                                  	;clc
 35704                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35705                                  	;clc
 35706 0000647F 58                      	pop	ax			; M061
 35707 00006480 C3                      	retn				; M061
 35708                                  
 35709                                  GLA_err:
 35710 00006481 F9                      	stc				; M061
 35711                                  GLA_err2:
 35712 00006482 58                      	pop	ax
 35713 00006483 C3                      	retn
 35714                                  
 35715                                  ;============================================================================
 35716                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35717                                  ;============================================================================
 35718                                  ; 04/08/2018 - Retro DOS v3.0
 35719                                  
 35720                                  ;	TITLE SRVCALL - Server DOS call
 35721                                  ;	NAME  SRVCALL
 35722                                  
 35723                                  ;**	SRVCALL.ASM - Server DOS call functions
 35724                                  ;
 35725                                  ;
 35726                                  ;	$ServerCall
 35727                                  ;
 35728                                  ;	Modification history:
 35729                                  ;
 35730                                  ;	    Created: ARR 08 August 1983
 35731                                  
 35732                                  ;AsmVars <Installed>
 35733                                  
 35734                                  ;include dpl.asm
 35735                                  
 35736                                  ;Installed = TRUE
 35737                                  
 35738                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35739                                  ; ---------------------------------------------------------------------------
 35740                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35741                                  
 35742                                  ;BREAK <ServerCall -- Server DOS call>
 35743                                  
 35744                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35745                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35746                                  
 35747                                  ;hkn; TABLE	SEGMENT
 35748                                  ;Public SRVC001S,SRVC001E
 35749                                  ;SRVC001S label byte
 35750                                  
 35751                                  SRVC001S:
 35752                                  
 35753 00006484 [8864]                  SERVERTAB:	dw	SERVER_DISP
 35754 00006486 [DA64]                  SERVERLEAVE:	dw	SERVERRETURN
 35755 00006488 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35756 00006489 [4265]                  		dw	SRV_CALL	; 0
 35757 0000648B [DB64]                  		dw	COMMIT_ALL	; 1
 35758 0000648D [1165]                  		dw	CLOSE_NAME	; 2
 35759 0000648F [1C65]                  		dw	CLOSE_UID	; 3
 35760 00006491 [2365]                  		dw	CLOSE_UID_PID	; 4
 35761 00006493 [2A65]                  		dw	GET_LIST	; 5
 35762 00006495 [8365]                  		dw	GET_DOS_DATA	; 6
 35763 00006497 [A765]                  		dw	SPOOL_OPER	; 7
 35764 00006499 [A765]                  		dw	SPOOL_OPER	; 8
 35765 0000649B [A765]                  		dw	SPOOL_OPER	; 9
 35766 0000649D [B365]                  		dw	_$SetExtendedError  ; 10
 35767                                  
 35768                                  SERVER_DISP_END:  ;  LABEL BYTE
 35769                                  
 35770                                  ;SRVC001E label byte
 35771                                  
 35772                                  SRVC001E:
 35773                                  
 35774                                  ;hkn; TABLE	ENDS
 35775                                  
 35776                                  ;----------------------------------------------------------------------------
 35777                                  ;
 35778                                  ; Procedure Name : $ServerCall
 35779                                  ;
 35780                                  ; Inputs:
 35781                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35782                                  ; Function:
 35783                                  ;	AL=0	Server DOS call
 35784                                  ;	AL=1	Commit All files
 35785                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35786                                  ;	AL=3	Close all files for DPL_UID
 35787                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35788                                  ;	AL=5	Get open file list entry
 35789                                  ;		    IN: BX File Index
 35790                                  ;			CX User Index
 35791                                  ;		    OUT:ES:DI -> Name
 35792                                  ;			BX = UID
 35793                                  ;		    CX = # locked blocks held by this UID
 35794                                  ;	AL=6	Get DOS data area
 35795                                  ;		    OUT: DS:SI -> Start
 35796                                  ;			CX size in bytes of swap if indos
 35797                                  ;			DX size in bytes of swap always
 35798                                  ;	AL=7	Get truncate flag
 35799                                  ;	AL=8	Set truncate flag
 35800                                  ;	AL=9	Close all spool files
 35801                                  ;	AL=10	SetExtendedError
 35802                                  ;
 35803                                  ;----------------------------------------------------------------------------
 35804                                  
 35805                                  _$ServerCall:
 35806                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35807                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35808                                  	; 10/06/2019
 35809                                  	; 29/04/2019 - Retro DOS v4.0
 35810                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35811                                  
 35812                                  	; 05/08/2018 - Retro DOS v3.0
 35813                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35814 0000649F 3C07                    	CMP	AL,7
 35815 000064A1 7204                    	JB	short SET_STUFF
 35816 000064A3 3C09                    	CMP	AL,9
 35817 000064A5 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35818                                  SET_STUFF:
 35819 000064A7 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35820                                  	;mov	bx,[si+12h]
 35821 000064A9 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35822                                  
 35823                                  	; MSDOS 6.0
 35824                                  ;SR;
 35825                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35826                                  ; of USER_ID
 35827                                  
 35828 000064AC 36F606[3010]01          	test	byte [SS:IsWin386],1
 35829 000064B2 7505                    	jnz	short skip_win386
 35830                                  
 35831                                  ;hkn; SS override for user_id and proc_id
 35832                                  	; 15/08/2018
 35833 000064B4 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35834                                  
 35835                                  skip_win386:
 35836 000064B9 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35837 000064BC 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35838                                  NO_SET_ID:
 35839                                  	; 10/06/2019 - Retro DOS v4.0
 35840 000064C1 2EFF36[8664]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35841 000064C6 2EFF36[8464]            	PUSH	word [cS:SERVERTAB]	; push table address
 35842 000064CB 50                      	PUSH	AX
 35843 000064CC E856AD                  	call	TableDispatch
 35844                                  
 35845                                  ;hkn; SS override
 35846                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35847 000064CF 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35848                                  	;error	error_invalid_function
 35849                                  	;mov	al,1
 35850 000064D5 B001                    	MOV	AL,error_invalid_function
 35851                                  servercall_error:
 35852 000064D7 E96AA1                  	JMP	SYS_RET_ERR
 35853                                  
 35854                                  SERVERRETURN:
 35855 000064DA C3                      	retn
 35856                                  
 35857                                  ; Commit - iterate through the open file list and make sure that the
 35858                                  ; directory entries are correctly updated.
 35859                                  
 35860                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35861                                  COMMIT_ALL:
 35862 000064DB 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35863 000064DD 16                      	push	ss
 35864 000064DE 1F                      	pop	ds
 35865 000064DF E830AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35866                                  CommitLoop:
 35867 000064E2 53                      	push	bx
 35868 000064E3 E82401                  	call	SFFromSFN
 35869 000064E6 7222                    	JC	short CommitDone
 35870 000064E8 26833D00                	cmp	word [es:di],0
 35871                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35872                                  					; if (ThisSFT->refcount != 0)
 35873 000064EC 7418                    	JZ	short CommitNext
 35874                                  	;cmp	word [es:di],0FFFFh ; -1
 35875 000064EE 26833DFF                	cmp	word [ES:DI],sf_busy
 35876                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35877                                  					; BUSY SFTs have god knows what
 35878 000064F2 7412                    	JZ	short CommitNext	;   in them.
 35879                                  	; 17/12/2022
 35880 000064F4 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35881                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35882 000064F9 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35883                                  					;	doesn't deadlock
 35884 000064FB 893E[9E05]              	MOV	[THISSFT],DI
 35885 000064FF 8C06[A005]              	MOV	[THISSFT+2],ES
 35886 00006503 E806CB                  	call	DOS_COMMIT		;	DOSCommit ();
 35887                                  CommitNext:
 35888 00006506 5B                      	pop	bx
 35889 00006507 43                      	INC	BX
 35890 00006508 EBD8                    	JMP	short CommitLoop
 35891                                  CommitDone:
 35892 0000650A E820AE                  	call	LCritSFT
 35893 0000650D 5B                      	pop	bx
 35894                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35895                                  Commit_Ok:
 35896 0000650E E92AA1                  	jmp	SYS_RET_OK
 35897                                  	
 35898                                  
 35899                                  CLOSE_NAME:
 35900                                  
 35901                                  ;if installed
 35902                                  
 35903                                  ;hkn; SS override
 35904                                  	;call	far [ss:MFTcloN]
 35905 00006511 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35906                                  ;else
 35907                                  ;	Call	MFTcloN
 35908                                  ;endif
 35909                                  
 35910                                  CheckReturns:
 35911 00006516 7202                    	JC	short func_err
 35912                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35913                                  	;transfer SYS_RET_OK
 35914                                  Commit_Okj:
 35915 00006518 EBF4                    	jmp	short Commit_Ok
 35916                                  	;jmp	SYS_RET_OK
 35917                                  
 35918                                  func_err:
 35919                                  	;transfer SYS_RET_ERR
 35920                                  	;jmp	SYS_RET_ERR
 35921 0000651A EBBB                    	jmp	short servercall_error
 35922                                  
 35923                                  CLOSE_UID:
 35924                                  
 35925                                  ;if installed
 35926                                  ;hkn; SS override
 35927                                  	;call	far [ss:MFTclU]
 35928 0000651C 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35929                                  ;else
 35930                                  ;	Call	MFTclU
 35931                                  ;endif
 35932 00006521 EBF3                    	JMP	short CheckReturns
 35933                                  
 35934                                  CLOSE_UID_PID:
 35935                                  
 35936                                  ;if installed
 35937                                  ;hkn; SS override
 35938                                  	;call	far [ss:MFTCloseP]
 35939 00006523 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35940                                  ;else
 35941                                  ;	Call	MFTCloseP
 35942                                  ;endif
 35943 00006528 EBEC                    	JMP	short CheckReturns
 35944                                  
 35945                                  GET_LIST:
 35946                                  
 35947                                  ;if installed
 35948                                  ;hkn; SS override
 35949                                  	;call	far [ss:MFT_get]
 35950 0000652A 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35951                                  ;else
 35952                                  ;	Call	MFT_get
 35953                                  ;endif
 35954 0000652F 72E9                    	JC	short func_err
 35955 00006531 E8519F                  	call	Get_User_Stack
 35956                                  	;mov	[si+2],bx
 35957 00006534 895C02                  	MOV	[SI+user_env.user_BX],BX
 35958                                  	;mov	[si+10],di
 35959 00006537 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35960                                  	;mov	[si+16],es
 35961 0000653A 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35962                                  SetCXOK:
 35963                                  	;mov	[si+4],cx
 35964 0000653D 894C04                  	MOV	[SI+user_env.user_CX],CX
 35965                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35966                                  	;transfer SYS_RET_OK
 35967                                  Commit_Okj2:
 35968                                  	; 17/12/2022
 35969 00006540 EBCC                    	jmp	short Commit_Ok
 35970                                  	;jmp	short Commit_Okj
 35971                                  	;;jmp	SYS_RET_OK
 35972                                  
 35973                                  SRV_CALL:
 35974 00006542 58                      	POP	AX			; get rid of call to $srvcall
 35975 00006543 1E                      	push	ds
 35976 00006544 56                      	push	si
 35977 00006545 E83D9F                  	call	Get_User_Stack
 35978 00006548 5F                      	pop	di
 35979 00006549 07                      	pop	es
 35980                                  
 35981                                  ; DS:SI point to stack
 35982                                  ; ES:DI point to DPL
 35983                                  
 35984 0000654A E8B7AC                  	call	XCHGP
 35985                                  
 35986                                  ; DS:SI point to DPL
 35987                                  ; ES:DI point to stack
 35988                                  ;
 35989                                  ; We now copy the registers from DPL to save stack
 35990                                  
 35991 0000654D 56                      	push	si
 35992 0000654E B90600                  	MOV	CX,6
 35993 00006551 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35994 00006553 47                      	INC	DI
 35995 00006554 47                      	INC	DI			; Skip user_BP
 35996 00006555 A5                      	MOVSW				; DS
 35997 00006556 A5                      	MOVSW				; ES
 35998 00006557 5E                      	pop	si			; DS:SI -> DPL
 35999 00006558 8B04                    	mov	ax,[SI]
 36000                                  	;MOV	AX,[SI+DPL.AX]
 36001                                  	;mov	bx,[si+2]
 36002 0000655A 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36003                                  	;mov	cx,[si+4]
 36004 0000655D 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36005                                  	;mov	dx,[si+6]
 36006 00006560 8B5406                  	MOV	DX,[SI+DPL.DX]
 36007                                  	;mov	di,[si+10]
 36008 00006563 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36009                                  	;mov	es,[si+14]
 36010 00006566 8E440E                  	MOV	ES,[SI+DPL.ES]
 36011                                  	;push	word [si+8]
 36012 00006569 FF7408                  	PUSH	word [SI+DPL.SI]
 36013                                  	;mov	ds,[si+12]
 36014 0000656C 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36015 0000656F 5E                      	POP	SI
 36016                                  
 36017                                  ;hkn; SS override for next 3
 36018 00006570 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36019 00006575 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36020 0000657A 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36021 00006580 E9049E                  	jmp	REDISP
 36022                                  
 36023                                  GET_DOS_DATA:
 36024 00006583 16                      	push	ss
 36025 00006584 07                      	pop	es
 36026 00006585 BF[2003]                	MOV     DI,SWAP_START
 36027 00006588 B9[AC0A]                	MOV     CX,SWAP_END
 36028 0000658B BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36029 0000658E 29F9                    	SUB     CX,DI
 36030 00006590 29FA                    	SUB     DX,DI
 36031 00006592 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36032 00006594 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36033 00006597 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36034 00006599 E8E99E                  	call	Get_User_Stack
 36035                                  	;mov	[si+14],es
 36036 0000659C 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36037                                  	;mov	[si+8],di
 36038 0000659F 897C08                  	MOV     [SI+user_env.user_SI],DI
 36039                                  	;mov	[si+6],dx
 36040 000065A2 895406                  	MOV     [SI+user_env.user_DX],DX
 36041 000065A5 EB96                    	JMP	short SetCXOK
 36042                                  
 36043                                  SPOOL_OPER:
 36044                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36045                                  
 36046 000065A7 50                      	push    ax
 36047 000065A8 B82511                  	mov     ax,1125h
 36048 000065AB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36049                                  			; STACK: WORD subfunction
 36050                                  			; Return: CF set on error, AX = error code
 36051                                  			; STACK unchanged
 36052 000065AD 5B                      	pop	bx
 36053                                  	; 17/12/2022
 36054                                  	;JC	short func_err2
 36055 000065AE 7390                    	jnc	short Commit_Okj2
 36056                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36057                                  	;;jmp	SYS_RET_OK
 36058                                  	;jmp	short Commit_Okj2
 36059                                  	
 36060                                  func_err2:
 36061 000065B0 E991A0                  	jmp	SYS_RET_ERR
 36062                                  
 36063                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36064                                  ;--------------------------------------------------------------------------
 36065                                  ;
 36066                                  ; Procedure Name : $SetExtendedError
 36067                                  ;
 36068                                  ; $SetExtendedError takes extended error information and loads it up for the
 36069                                  ; next extended error call. This is used by interrupt-level proccessors to
 36070                                  ; mask their actions.
 36071                                  ;
 36072                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36073                                  ;   Outputs: none
 36074                                  ;
 36075                                  ;---------------------------------------------------------------------------
 36076                                  
 36077                                  _$SetExtendedError:
 36078                                  
 36079                                  ;hkn; SS override for all variables used
 36080                                  
 36081 000065B3 8B04                    	mov	ax,[si]
 36082                                  	;MOV	AX,[SI+DPL.AX]
 36083 000065B5 36A3[2403]              	MOV	[SS:EXTERR],AX
 36084                                  	;mov	ax,[si+10]
 36085 000065B9 8B440A                  	MOV	AX,[SI+DPL.DI]
 36086 000065BC 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36087                                  	;mov	ax,[si+14]
 36088 000065C0 8B440E                  	MOV	AX,[SI+DPL.ES]
 36089 000065C3 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36090                                  	;mov	ax,[si+2]
 36091 000065C7 8B4402                  	MOV	AX,[SI+DPL.BX]
 36092 000065CA 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36093                                  	;mov	ax,[si+4]
 36094 000065CE 8B4404                  	MOV	AX,[SI+DPL.CX]
 36095 000065D1 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36096 000065D6 C3                      	retn
 36097                                  
 36098                                  ;============================================================================
 36099                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36100                                  ;============================================================================
 36101                                  ; 05/08/2018 - Retro DOS v3.0
 36102                                  ; 05/05/2019 - Retro DOS v4.0
 36103                                  
 36104                                  ;**	Handle related utilities for MSDOS 2.X.
 36105                                  ;----------------------------------------------------------------------------
 36106                                  ;	pJFNFromHandle	written
 36107                                  ;	SFFromHandle	written
 36108                                  ;	SFFromSFN	written
 36109                                  ;	JFNFree 	written
 36110                                  ;	SFNFree 	written
 36111                                  ;
 36112                                  ;	Modification history:
 36113                                  ;
 36114                                  ;	    Created: MZ 1 April 1983
 36115                                  ;----------------------------------------------------------------------------
 36116                                  
 36117                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36118                                  
 36119                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36120                                  ;----------------------------------------------------------------------------
 36121                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36122                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36123                                  ;
 36124                                  ;	NOTE:
 36125                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36126                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36127                                  ;
 36128                                  ;	ENTRY	(bx) = handle
 36129                                  ;	EXIT	'C' clear if ok
 36130                                  ;		  (es:di) = address of JFN value
 36131                                  ;		'C' set if error
 36132                                  ;		  (ax) = error code
 36133                                  ;	USES	AX, DI, ES, Flags
 36134                                  ;----------------------------------------------------------------------------
 36135                                  
 36136                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36137                                  
 36138                                  pJFNFromHandle:
 36139                                  	; 05/05/2019 - Retro DOS v4.0
 36140                                  	;getdseg <es>			; es -> dosdata
 36141 000065D7 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36142                                  	
 36143                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36144 000065DC 268E06[3003]            	mov	es,[es:CurrentPDB]
 36145                                  
 36146                                  	;cmp	bx,[ES:32h]
 36147 000065E1 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36148 000065E6 7204                    	JB	short pjfn10		; no, get offset
 36149                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36150                                  	;mov	al,6
 36151 000065E8 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36152                                  ReturnCarry:
 36153 000065EA F9                      	STC                             ; signal error
 36154 000065EB C3                      	retn				; go back
 36155                                  pjfn10: 
 36156                                  	;les	di,[es:34h]
 36157 000065EC 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36158 000065F1 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36159                                  	;clc
 36160                                  pJFNFromHandle_error:
 36161 000065F3 C3                      	retn
 36162                                  
 36163                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36164                                  ;----------------------------------------------------------------------------
 36165                                  ;
 36166                                  ; Procedure Name : SFFromHandle
 36167                                  ;
 36168                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36169                                  ;
 36170                                  ;   Input:      BX has handle
 36171                                  ;   Output:     Carry Set
 36172                                  ;                   AX has error code
 36173                                  ;               Carry Reset
 36174                                  ;                   ES:DI has pointer to SF entry
 36175                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36176                                  ; NOTE:
 36177                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36178                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36179                                  ;
 36180                                  ;----------------------------------------------------------------------------
 36181                                  
 36182                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36183                                  
 36184                                  SFFromHandle:
 36185 000065F4 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36186                                  	;retc				; return if error
 36187 000065F7 72FA                    	jc	short pJFNFromHandle_error
 36188 000065F9 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36189                                  	;JNZ	short GetSF		; nope, suck out SF
 36190                                  	;;mov	al,6
 36191                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36192                                  	;jmp	short ReturnCarry	; signal it
 36193                                  	; 17/12/2022
 36194                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36195 000065FD 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36196                                  	;JNZ	short GetSF		; nope, suck out SF
 36197                                  	;;mov	al,6
 36198                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36199                                  	;jmp	short ReturnCarry	; signal it
 36200                                  GetSF:
 36201 000065FF 53                      	push	bx			; save handle
 36202 00006600 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36203 00006603 30FF                    	XOR     BH,BH                   ; ignore upper half
 36204 00006605 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36205 00006608 5B                      	pop	bx			; restore
 36206 00006609 C3                      	retn                        	; say goodbye
 36207                                  
 36208                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36209                                  
 36210                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36211                                  ;----------------------------------------------------------------------------
 36212                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36213                                  ;	is more than just a simple index instruction because the SF table
 36214                                  ;	can be made up of multiple pieces chained together. We follow the
 36215                                  ;	chain to the right piece and then do the index operation.
 36216                                  ;
 36217                                  ;   NOTE:
 36218                                  ;	This routine is called from SFFromHandle which is called
 36219                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36220                                  ;
 36221                                  ;	ENTRY	BX has SF index
 36222                                  ;	EXIT	'C' clear if OK
 36223                                  ;		  ES:DI points to SF entry
 36224                                  ;		'C' set if index too large
 36225                                  ;	USES	BX, DI, ES
 36226                                  ;----------------------------------------------------------------------------
 36227                                  
 36228                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36229                                  
 36230                                  SFFromSFN:
 36231                                  	; 05/05/2019 - Retro DOS v4.0
 36232                                  	;getdseg <es>			; es -> dosdata
 36233 0000660A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36234                                  
 36235                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36236 0000660F 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36237                                  sfsfn5:	
 36238                                  	;cmp	bx,[es:di+4]
 36239 00006614 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36240 00006618 720E                    	JB	short sfsfn7		; yes, go grab it
 36241                                  	;sub	bx,[es:di+4]
 36242 0000661A 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36243 0000661E 26C43D                  	les	di,[es:di] ; 14/08/2018
 36244                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36245 00006621 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36246 00006624 75EE                    	JNZ	short sfsfn5		; no, try again
 36247 00006626 F9                      	STC
 36248 00006627 C3                      	retn				; return with error, not found
 36249                                  sfsfn7:
 36250 00006628 50                      	push	ax
 36251                                  	;mov	ax,53 ; MSDOS 3.3
 36252                                  	;mov	ax,59 ; MSDOS 6.0
 36253                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36254                                  	
 36255                                  	; 17/12/2022
 36256 00006629 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36257                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36258                                  	;mov	ax,SF_ENTRY.size ; 59
 36259                                  	
 36260 0000662B F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36261 0000662D 01C7                    	ADD	DI,AX			; add base of SF block
 36262 0000662F 58                      	pop	ax
 36263                                  	;add	di,6
 36264 00006630 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36265 00006633 C3                      	retn				; return with 'C' clear
 36266                                  
 36267                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36268                                  
 36269                                  ;**	JFNFree - Find a Free JFN Slot
 36270                                  ;----------------------------------------------------------------------------
 36271                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36272                                  ;
 36273                                  ;	ENTRY	(ss) = DOSDATA
 36274                                  ;	EXIT	'C' clear if OK
 36275                                  ;		  (bx) = new handle
 36276                                  ;		  (es:di) = pointer to JFN slot
 36277                                  ;		'C' set if error
 36278                                  ;		  (al) = error code
 36279                                  ;	USES	bx, di, es, flags
 36280                                  ;----------------------------------------------------------------------------
 36281                                  
 36282                                  JFNFree:
 36283 00006634 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36284                                  jfnf1:	
 36285 00006636 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36286 00006639 7209                    	JC	short jfnf5		; no more handles
 36287 0000663B 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36288 0000663F 7405                    	je	short jfnfx		; yes, carry is clear
 36289 00006641 43                      	INC     BX                      ; no, next handle
 36290 00006642 EBF2                    	JMP	short jfnf1		; and try again
 36291                                  
 36292                                  	; Error. 'C' set
 36293                                  jfnf5:	
 36294                                  	;mov	al,4
 36295 00006644 B004                    	MOV	AL,error_too_many_open_files
 36296                                  jfnfx:	
 36297 00006646 C3                      	retn				; bye
 36298                                  
 36299                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36300                                  
 36301                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36302                                  ;----------------------------------------------------------------------------
 36303                                  ;	SFNFree scans through the sf table looking for a free entry
 36304                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36305                                  ;
 36306                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36307                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36308                                  ;	we can't just mark it busy because we may get blown out of our open
 36309                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36310                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36311                                  ;	an SFT with this value we look to see if it belongs to this user
 36312                                  ;	and process.  If it does belong to us then it must be an orphan
 36313                                  ;	and we reclaim it.
 36314                                  ;
 36315                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36316                                  ;		over and over, but we could at least set a high water mark...
 36317                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36318                                  ;		even though this is not a frequently called routine - jgl
 36319                                  ;
 36320                                  ;	ENTRY	(ss) = DOSDATA
 36321                                  ;	EXIT	'C' clear if no error
 36322                                  ;		  (bx) = SFN
 36323                                  ;		  (es:di) = pointer to SFT
 36324                                  ;		  es:[di].SFT_REF_COUNT = -1
 36325                                  ;		'C' set if error
 36326                                  ;		  (al) = error code
 36327                                  ;	USES	bx, di, es, Flags
 36328                                  ;----------------------------------------------------------------------------
 36329                                  
 36330                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36331                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36332                                  
 36333                                  SFNFree:
 36334                                  	; 12/08/2018
 36335                                  	; 05/08/2018 - Retro DOS v3.0
 36336                                  	;
 36337                                  	; MSDOS 6.0
 36338 00006647 50                      	push	ax
 36339 00006648 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36340                                  sfnf5:	
 36341 0000664A 53                      	push	bx
 36342 0000664B E8BCFF                  	call	SFFromSFN		; get the potential handle
 36343 0000664E 5B                      	pop	bx
 36344 0000664F 723A                    	jc	short sfnf95		; no more free SFNs
 36345 00006651 26833D00                	cmp	word [ES:DI],0
 36346                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36347 00006655 741D                    	je	short sfnf20			; yep, got one
 36348                                  	
 36349                                  	;cmp	word [es:di],0FFFFh ; -1
 36350 00006657 26833DFF                	cmp	word [ES:DI],sf_busy
 36351                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36352 0000665B 7403                    	je	short sfnf10		; special busy mark
 36353                                  sfnf7:	
 36354 0000665D 43                      	inc	bx			; try the next one
 36355 0000665E EBEA                    	jmp	short sfnf5
 36356                                  
 36357                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36358                                  ;	it was abandoned during a earlier call and we can use it.
 36359                                  ;
 36360                                  ;	(bx)	= SFN
 36361                                  ;	(es:di) = pointer to SFT
 36362                                  ;	(TOS)	= caller's (ax)
 36363                                  
 36364                                  sfnf10:	
 36365 00006660 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36366                                  	;cmp	[es:di+2Fh],ax
 36367 00006664 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36368 00006668 75F3                    	jnz	short sfnf7		; not ours
 36369 0000666A 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36370                                  	;cmp	[es:di+31h],ax
 36371 0000666E 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36372 00006672 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36373                                  
 36374                                  ;	We have an SFT to allocate
 36375                                  ;
 36376                                  ;	(bx)	= SFN
 36377                                  ;	(es:di) = pointer to SFT
 36378                                  ;	(TOS)	= caller's (ax)
 36379                                  
 36380                                  sfnf20:
 36381                                  	; cf = 0 ;; Retro DOS v3.0
 36382                                  
 36383                                  	;mov	word [es:di],0FFFFh
 36384 00006674 26C705FFFF              	mov	word [ES:DI],sf_busy
 36385                                  					; make sure that this is allocated
 36386                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36387                                  
 36388 00006679 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36389                                  	;mov	[es:di+2Fh],ax
 36390 0000667D 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36391 00006681 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36392                                  	;mov	[es:di+31h],ax
 36393 00006685 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36394                                  sfnf21: ;; Retro DOS v3.0
 36395                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36396                                  	;pop	ax
 36397                                  	;;clc
 36398                                  	;retn				; return with no error
 36399                                  	; 17/12/2022
 36400 00006689 58                      	pop	ax
 36401                                  	;clc
 36402 0000668A C3                      	retn
 36403                                  
 36404                                  ;**	Error - no more free SFNs
 36405                                  ;
 36406                                  ;	'C' set
 36407                                  ;	(TOS) = saved ax
 36408                                  
 36409                                  sfnf95: 
 36410 0000668B 58                      	pop	ax
 36411                                  	;mov	al,4
 36412 0000668C B004                    	mov	al,error_too_many_open_files
 36413 0000668E C3                      	retn				; return with 'C' and error
 36414                                  
 36415                                  ;============================================================================
 36416                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36417                                  ;============================================================================
 36418                                  ; 13/07/2018 - Retro DOS v3.0
 36419                                  ; 20/05/2019 - Retro DOS v4.0
 36420                                  
 36421                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36422                                  
 36423                                  ;	BREAK <$Close - return a handle to the system>
 36424                                  ;----------------------------------------------------------------------------
 36425                                  ;
 36426                                  ;**	$Close - Close a file Handle
 36427                                  ;
 36428                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36429                                  ;		path
 36430                                  ;
 36431                                  ;	Assembler usage:
 36432                                  ;	    MOV     BX, handle
 36433                                  ;	    MOV     AH, Close
 36434                                  ;	    INT     int_command
 36435                                  ;
 36436                                  ;	ENTRY	(bx) = handle
 36437                                  ;	EXIT	<normal INT21 return convention>
 36438                                  ;	USES	all
 36439                                  ;
 36440                                  ;----------------------------------------------------------------------------
 36441                                  
 36442                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36443                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36444                                  
 36445                                  _$CLOSE:
 36446                                  ;	Grab the SFT pointer from the JFN.
 36447                                  
 36448 0000668F E85A02                  	call	CheckOwner		; get system file entry
 36449 00006692 722B                    	jc	short CloseError	; error return
 36450 00006694 16                      	push	ss
 36451 00006695 1F                      	pop	ds			; For DOS_CLOSE
 36452 00006696 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36453 0000669A 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36454                                  
 36455                                  ; DS:SI point to JFN table entry.
 36456                                  ; ES:DI point to SFT
 36457                                  ;
 36458                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36459                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36460                                  ; If the file was not a net FCB, we free the JFN too.
 36461                                  
 36462                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36463 0000669E 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36464 000066A2 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36465                                  	;mov	al,[ES:DI+2]
 36466 000066A4 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36467                                  	;and	al,0F0h
 36468 000066A8 24F0                    	AND	AL,SHARING_MASK
 36469                                  	;cmp	al,70h
 36470 000066AA 3C70                    	CMP	AL,SHARING_NET_FCB
 36471 000066AC 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36472                                  
 36473                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36474                                  ; -1.
 36475                                  
 36476                                  FreeJFN:
 36477 000066AE E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36478 000066B1 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36479                                  PostFree:
 36480                                  
 36481                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36482                                  
 36483 000066B5 E812C8                  	call	DOS_CLOSE
 36484                                  
 36485                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36486                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36487                                  
 36488 000066B8 7205                    	JC	short CloseError
 36489                                  	;mov	ah,3Eh
 36490 000066BA B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36491                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36492                                  CloseOk:
 36493 000066BC E97C9F                  	jmp	SYS_RET_OK
 36494                                  CloseError:
 36495 000066BF E9829F                  	jmp	SYS_RET_ERR
 36496                                  
 36497                                  ;	BREAK <$Commit - commit the file>
 36498                                  ;----------------------------------------------------------------------------
 36499                                  ;
 36500                                  ;**	$Commit - Commit a File
 36501                                  ;
 36502                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36503                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36504                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36505                                  ;	and fix this!! jgl
 36506                                  ;
 36507                                  ;	Assembler usage:
 36508                                  ;	    MOV     BX, handle
 36509                                  ;	    MOV     AH, Commit
 36510                                  ;	    INT     int_command
 36511                                  ;
 36512                                  ;	ENTRY	(bx) = handle
 36513                                  ;	EXIT	none
 36514                                  ;	USES	all
 36515                                  ;;----------------------------------------------------------------------------
 36516                                  
 36517                                  _$COMMIT:
 36518                                  ;	Grab the SFT pointer from the JFN.
 36519                                  
 36520 000066C2 E82702                  	call	CheckOwner		; get system file entry
 36521 000066C5 7213                    	JC	short CommitError	; error return
 36522 000066C7 16                      	push	ss
 36523 000066C8 1F                      	pop	ds			; For DOS_COMMIT
 36524 000066C9 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36525 000066CD 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36526                                  
 36527                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36528                                  ;
 36529                                  ;	ES:DI point to SFT
 36530                                  
 36531 000066D1 E838C9                  	call	DOS_COMMIT
 36532 000066D4 7204                    	JC	short CommitError
 36533                                  	; 07/12/2022
 36534                                  	;jc	short CloseError
 36535                                  	;mov	ah,68h
 36536 000066D6 B468                    	MOV	AH,COMMIT
 36537                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36538                                  	;jmp	SYS_RET_OK
 36539                                  CommitOk:
 36540 000066D8 EBE2                    	jmp	short CloseOk	
 36541                                  
 36542                                  CommitError:
 36543                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36544                                  	;jmp	SYS_RET_ERR
 36545 000066DA EBE3                    	jmp	short CloseError
 36546                                  
 36547                                  ;	BREAK <$ExtHandle - extend handle count>
 36548                                  
 36549                                  ;**	$ExtHandle - Extend Handle Count
 36550                                  ;----------------------------------------------------------------------------
 36551                                  ;	Assembler usage:
 36552                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36553                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36554                                  ;	    INT     int_command 		 busy )
 36555                                  ;
 36556                                  ;	ENTRY	(bx) = new number of handles
 36557                                  ;	EXIT	'C' clear if OK
 36558                                  ;		'C' set iff err
 36559                                  ;		  (ax) = error code
 36560                                  ;			 AX = error_not_enough_memory
 36561                                  ;			      error_too_many_open_files
 36562                                  ;	USES	all
 36563                                  ;----------------------------------------------------------------------------
 36564                                  
 36565                                  _$ExtHandle:
 36566 000066DC 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36567                                  	;cmp	bx,20
 36568 000066DE 83FB14                  	CMP	BX,FILPERPROC
 36569 000066E1 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36570 000066E3 BB1400                  	MOV	BX,FILPERPROC
 36571                                  exth2:	
 36572 000066E6 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36573                                  	;mov	cx,[ES:32h]
 36574 000066EB 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36575 000066F0 39CB                    	CMP	BX,CX			; the requested == current
 36576 000066F2 7455                    	JE	short ok_done 		; yes and exit
 36577 000066F4 7722                    	JA	short larger		; go allocate new table
 36578                                  
 36579                                  ;	We're going to shrink the # of handles available
 36580                                  
 36581 000066F6 BD0100                  	MOV	BP,1			; shrink
 36582                                  	;mov	ds,[ES:36h]
 36583 000066F9 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36584 000066FE 89DE                    	MOV	SI,BX			;
 36585 00006700 29D9                    	SUB	CX,BX			; get difference
 36586                                  
 36587                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36588                                  chck_handles:
 36589 00006702 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36590 00006705 753D                    	JNZ	short too_many_files	; status
 36591 00006707 46                      	INC	SI
 36592 00006708 E2F8                    	LOOP	chck_handles
 36593 0000670A 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36594 0000670D 7709                    	JA	short larger		; no
 36595                                  
 36596 0000670F BD0200                  	MOV	BP,2			; psp
 36597                                  	;mov	di,24
 36598 00006712 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36599 00006715 53                      	PUSH	BX
 36600 00006716 EB1D                    	JMP	short movhandl
 36601                                  
 36602                                  larger:
 36603 00006718 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36604 0000671B 747F                    	JZ	short invalid_func	; 10/08/2018
 36605 0000671D F8                      	CLC
 36606 0000671E 53                      	PUSH	BX			; save requested number
 36607 0000671F 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36608 00006722 B104                    	MOV	CL,4
 36609                                  	;ror	bx,cl			; MSDOS 3.3
 36610 00006724 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36611 00006726 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36612                                  
 36613 0000672A 55                      	PUSH	BP
 36614 0000672B E8DCFA                  	call	_$ALLOC			; allocate memory
 36615 0000672E 5D                      	POP	BP
 36616 0000672F 7266                    	JC	short no_memory		; not enough meory
 36617                                  
 36618 00006731 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36619 00006733 31FF                    	XOR	DI,DI
 36620                                  movhandl:
 36621 00006735 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36622                                  
 36623 0000673A F7C50300                	test	BP,3			; enlarge ?
 36624 0000673E 740C                    	JZ	short enlarge 		; yes
 36625 00006740 59                      	POP	CX			; cx = the amount you shrink
 36626 00006741 51                      	PUSH	CX
 36627 00006742 EB0C                    	JMP	short copy_hand
 36628                                  
 36629                                  ;	Done.  'C' clear
 36630                                  
 36631                                  ; 17/12/2022
 36632                                  ;ok_done:
 36633                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36634                                  ;	;jmp	short CommitOk
 36635                                  ;	; 17/12/2022
 36636                                  ;	jmp	SYS_RET_OK
 36637                                  
 36638                                  too_many_files:
 36639                                  	;mov	al,4
 36640 00006744 B004                    	MOV	AL,error_too_many_open_files
 36641                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36642                                  	;jmp	SYS_RET_ERR
 36643                                  CommitErrorj:
 36644                                  	;jmp	short CommitError
 36645                                  	; 17/12/2022
 36646 00006746 E9FB9E                  	jmp	SYS_RET_ERR
 36647                                  
 36648                                  ; 17/12/2022 
 36649                                  ok_done:
 36650                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36651                                  	;jmp	short CommitOk
 36652                                  	; 17/12/2022
 36653 00006749 E9EF9E                  	jmp	SYS_RET_OK
 36654                                  
 36655                                  enlarge:
 36656                                  	;mov	cx,[32h]
 36657 0000674C 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36658                                  copy_hand:
 36659 00006750 89CA                    	MOV	DX,CX
 36660                                  	;lds	si,[34h]
 36661 00006752 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36662 00006756 F3A4                    	REP	MOVSB			; copy infomation to new table
 36663 00006758 59                      	POP	CX			; get new number of handles
 36664 00006759 51                      	PUSH	CX			; save it again
 36665 0000675A 29D1                    	SUB	CX,DX			; get the difference
 36666 0000675C B0FF                    	MOV	AL,-1			; set availability to handles
 36667 0000675E F3AA                    	REP	STOSB
 36668 00006760 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36669                                  	;cmp	word [34h],0
 36670 00006765 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36671 0000676A 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36672 0000676C 55                      	PUSH	BP
 36673 0000676D 1E                      	PUSH	DS			; save old table segment
 36674 0000676E 06                      	PUSH	ES			; save new table segment
 36675 0000676F 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36676 00006773 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36677 00006776 07                      	POP	ES			; restore new table segment
 36678 00006777 1F                      	POP	DS			; restore old table segment
 36679 00006778 5D                      	POP	BP
 36680                                  
 36681                                  update_info:
 36682 00006779 F7C50200                	test	BP,2			; psp?
 36683 0000677D 7408                    	JZ	short non_psp 		; no
 36684                                  	;mov	word [34h],18h ; 24
 36685 0000677F C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36686 00006785 EB06                    	JMP	short final
 36687                                  non_psp:
 36688                                  	;mov	word [34h],0
 36689 00006787 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36690                                  final:
 36691                                  	;mov	[36h],es	
 36692 0000678D 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36693                                  	;pop	word [32h]
 36694 00006791 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36695                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36696                                  	;jmp	SYS_RET_OK
 36697                                  ok_done_j:
 36698 00006795 EBB2                    	jmp	short ok_done
 36699                                  
 36700                                  no_memory:
 36701 00006797 5B                      	POP	BX			; clean stack
 36702                                  	;mov	al,8
 36703 00006798 B008                    	MOV	AL,error_not_enough_memory
 36704                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36705                                  	;jmp	SYS_RET_ERR
 36706                                  CommitErrorj2:
 36707 0000679A EBAA                    	jmp	short CommitErrorj
 36708                                  
 36709                                  invalid_func:
 36710                                  	;mov	al,1
 36711 0000679C B001                    	MOV	AL,error_invalid_function
 36712                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36713                                  	;jmp	SYS_RET_ERR
 36714                                  CommitErrorj3:
 36715                                  	;jmp	short CommitErrorj2
 36716                                  	; 17/12/2022
 36717 0000679E EBA6                    	jmp	short CommitErrorj
 36718                                  
 36719                                  ; 20/05/2019 - Retro DOS v4.0
 36720                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36721                                  
 36722                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36723                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36724                                  
 36725                                  ;	BREAK <$READ - Read from a file handle>
 36726                                  ;----------------------------------------------------------------------------
 36727                                  ;
 36728                                  ;**	$Read - Read from a File Handle
 36729                                  ;
 36730                                  ;   Assembler usage:
 36731                                  ;
 36732                                  ;	LDS	DX, buf
 36733                                  ;	MOV	CX, count
 36734                                  ;	MOV	BX, handle
 36735                                  ;	MOV	AH, Read
 36736                                  ;	INT	int_command
 36737                                  ;	  AX has number of bytes read
 36738                                  ;
 36739                                  ;	ENTRY	(bx) = file handle
 36740                                  ;		(cx) = byte count
 36741                                  ;		(ds:dx) = buffer address
 36742                                  ;	EXIT	Through system call return so that to user:
 36743                                  ;		  'C' clear if OK
 36744                                  ;		    (ax) = bytes read
 36745                                  ;		  'C' set if error
 36746                                  ;		    (ax) = error code
 36747                                  ;
 36748                                  ;----------------------------------------------------------------------------
 36749                                  
 36750                                  _$READ:
 36751 000067A0 BE[5E32]                	MOV	SI,DOS_READ
 36752                                  ReadDo:
 36753 000067A3 E831FE                  	call	pJFNFromHandle
 36754 000067A6 7208                    	JC	short ReadError
 36755                                  
 36756 000067A8 268A05                  	MOV	AL,[ES:DI]
 36757 000067AB E83E01                  	call	CheckOwner		; get the handle
 36758 000067AE 7303                    	JNC	short ReadSetup		; no errors do the operation
 36759                                  
 36760                                  ;	Have an error. 'C' set
 36761                                  
 36762                                  ReadError:
 36763                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36764                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36765                                  	;jmp	short CommitErrorj3
 36766                                  	; 17/12/2022
 36767 000067B0 E9919E                  	jmp	SYS_RET_ERR
 36768                                  
 36769                                  ReadSetup:
 36770 000067B3 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36771 000067B8 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36772                                  	; 20/05/2019 - Retro DOS v4.0
 36773                                  	; MSDOS 6.0 
 36774                                  ;; Extended Open
 36775                                  	;test	byte [es:di+3],20h
 36776 000067BD 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36777                                  						 ;AN000;;EO. need i24
 36778 000067C2 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36779 000067C4 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36780                                  					;AN000;;EO. set it off;smr;SS Override
 36781                                  needi24:				;AN000;
 36782                                  ;; Extended Open
 36783 000067CA 36FF36[2C03]            	push	word [SS:DMAADD]
 36784 000067CF 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36785                                  
 36786                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36787                                  
 36788                                  	; 26/07/2019
 36789                                  
 36790                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36791                                  	;
 36792                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36793                                  	; there is not another caller; it is better to put the code in this proc
 36794                                   	; here instead of calling it as a subroutine; but I have modified code
 36795                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36796                                  
 36797                                  	; MSDOS 6.0
 36798 000067D4 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36799                                  	
 36800                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36801                                  	; MSDOS 3.3
 36802                                  	;MOV	BX,DX			; copy offset
 36803                                  	;push	cx			; don't stomp on count
 36804                                  	;MOV	CL,4			; bits to shift bytes->para
 36805                                  	;SHR	BX,CL			; get number of paragraphs
 36806                                  	;pop	cx			; get count back
 36807                                  	;MOV	AX,DS			; get original segment
 36808                                  	;ADD	AX,BX			; get new segment
 36809                                  	;MOV	DS,AX			; in seg register
 36810                                  	;AND	DX,0Fh			; normalize offset
 36811                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36812                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36813                                  						;smr;SS Override
 36814                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36815                                  	
 36816 000067D7 16                      	push	ss			; go for DOS addressability
 36817 000067D8 1F                      	pop	ds
 36818                                  
 36819 000067D9 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36820                                  
 36821 000067DB 8F06[2E03]              	pop	word [DMAADD+2]
 36822 000067DF 8F06[2C03]              	pop	word [DMAADD]
 36823                                  	;JNC	short READ_OK		;AN002;
 36824                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36825                                  	; 17/12/2022
 36826 000067E3 72CB                    	jc	short ReadError
 36827                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36828                                  	;jnc	short READ_OK		;AN002;
 36829                                  	;jmp	short ReadError
 36830                                  
 36831                                  READ_OK:
 36832 000067E5 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36833                                  Read_Okj:
 36834                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36835                                  	;;jmp	SYS_RET_OK		; successful return
 36836                                  	;jmp	short ok_done_j
 36837                                  	; 17/12/2022
 36838 000067E7 E9519E                  	jmp	SYS_RET_OK
 36839                                  
 36840                                  ; 13/07/2018 - Retro DOS v3.0
 36841                                  
 36842                                  ;----------------------------------------------------------------------------
 36843                                  
 36844                                  ;   Input: DS:DX points to user's buffer addr
 36845                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36846                                  ;   Output: [DMAADD] set
 36847                                  
 36848                                  ; 20/05/2019 - Retro DOS v4.0
 36849                                  ; 26/07/2019
 36850                                  ;	; MSDOS 6.0
 36851                                  ;Align_Buffer:
 36852                                  ;	MOV	BX,DX			; copy offset
 36853                                  ;	push	cx			; don't stomp on count
 36854                                  ;	MOV	CL,4			; bits to shift bytes->para
 36855                                  ;	SHR	BX,CL			; get number of paragraphs
 36856                                  ;	pop	cx			; get count back
 36857                                  ;	MOV	AX,DS			; get original segment
 36858                                  ;	ADD	AX,BX			; get new segment
 36859                                  ;	MOV	DS,AX			; in seg register
 36860                                  ;	AND	DX,0Fh			; normalize offset
 36861                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36862                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36863                                  ;						;smr;SS Override
 36864                                  ;	retn
 36865                                  
 36866                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36867                                  Align_Buffer:
 36868 000067EA 89D3                    	MOV	BX,DX			; copy offset
 36869 000067EC 51                      	push	cx			; don't stomp on count
 36870 000067ED B104                    	MOV	CL,4			; bits to shift bytes->para
 36871 000067EF D3EB                    	SHR	BX,CL			; get number of paragraphs
 36872 000067F1 59                      	pop	cx			; get count back
 36873 000067F2 8CD8                    	MOV	AX,DS			; get original segment
 36874 000067F4 01D8                    	ADD	AX,BX			; get new segment
 36875 000067F6 8ED8                    	MOV	DS,AX			; in seg register
 36876 000067F8 83E20F                  	AND	DX,0Fh			; normalize offset
 36877 000067FB 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36878 00006800 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36879                                  						;smr;SS Override
 36880 00006805 C3                      	retn
 36881                                  
 36882                                  ; 20/05/2019 - Retro DOS v4.0
 36883                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36884                                  
 36885                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36886                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36887                                  
 36888                                  ;BREAK <$WRITE - write to a file handle>
 36889                                  ;----------------------------------------------------------------------------
 36890                                  ;
 36891                                  ;   Assembler usage:
 36892                                  ;	    LDS     DX, buf
 36893                                  ;	    MOV     CX, count
 36894                                  ;	    MOV     BX, handle
 36895                                  ;	    MOV     AH, Write
 36896                                  ;	    INT     int_command
 36897                                  ;	  AX has number of bytes written
 36898                                  ;   Errors:
 36899                                  ;	    AX = write_invalid_handle
 36900                                  ;	       = write_access_denied
 36901                                  ;
 36902                                  ;   Returns in register AX
 36903                                  ;
 36904                                  ;----------------------------------------------------------------------------
 36905                                  
 36906                                  _$WRITE:
 36907 00006806 BE[8734]                	MOV	SI,DOS_WRITE
 36908 00006809 EB98                    	JMP	short ReadDo
 36909                                  
 36910                                  ;BREAK <$LSEEK - move r/w pointer>
 36911                                  ;----------------------------------------------------------------------------
 36912                                  ;
 36913                                  ;   Assembler usage:
 36914                                  ;	    MOV     DX, offsetlow
 36915                                  ;	    MOV     CX, offsethigh
 36916                                  ;	    MOV     BX, handle
 36917                                  ;	    MOV     AL, method
 36918                                  ;	    MOV     AH, LSeek
 36919                                  ;	    INT     int_command
 36920                                  ;	  DX:AX has the new location of the pointer
 36921                                  ;   Error returns:
 36922                                  ;	    AX = error_invalid_handle
 36923                                  ;	       = error_invalid_function
 36924                                  ;   Returns in registers DX:AX
 36925                                  ;
 36926                                  ;----------------------------------------------------------------------------
 36927                                  
 36928                                  ; 21/05/2019 - Retro DOS v4.0
 36929                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36930                                  
 36931                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36932                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36933                                  
 36934                                  _$LSEEK:
 36935 0000680B E8DE00                  	call	CheckOwner		; get system file entry
 36936                                  
 36937                                  	; 17/12/2022
 36938                                  ;LSeekError:
 36939                                  	;JNC	short CHKOWN_OK		;AN002;
 36940                                  	;JMP	short ReadError		;AN002; error return
 36941                                  	; 17/12/2022
 36942                                  	; 02/06/2019
 36943 0000680E 72A0                    	jc	short ReadError
 36944                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36945                                  	;JNC	short CHKOWN_OK		;AN002;
 36946                                  	;JMP	short ReadError		;AN002; error return
 36947                                  
 36948                                  CHKOWN_OK:
 36949                                  					;AN002;
 36950 00006810 3C02                    	CMP	AL,2			; is the seek value correct?
 36951 00006812 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36952                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36953 00006814 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36954                                  					;smr;SS Override
 36955                                  	;mov	al,1
 36956 0000681A B001                    	mov	al,error_invalid_function ; invalid method
 36957                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36958                                  LSeekError2:
 36959 0000681C EB92                    	jmp	short ReadError
 36960                                  
 36961                                  LSeekDisp:
 36962 0000681E 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36963 00006820 720A                    	JB	short LSeekStore	; just store CX:DX
 36964 00006822 771B                    	JA	short LSeekEOF		; seek from end of file
 36965                                  	;add	dx,[es:di+21]
 36966 00006824 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36967                                  	;adc	cx,[es:di+23]
 36968 00006828 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36969                                  LSeekStore:
 36970 0000682C 89C8                    	MOV	AX,CX			; AX:DX
 36971 0000682E 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36972                                  LSeekSetpos:
 36973                                  	;mov	[es:di+21],ax
 36974 0000682F 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36975                                  	;mov	[es:di+23],dx
 36976 00006833 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36977 00006837 E84B9C                  	call	Get_User_Stack
 36978                                  	;mov	[si+6],dx
 36979 0000683A 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36980                                  	;jmp	SYS_RET_OK		; successful return
 36981                                  	; 25/06/2019
 36982                                  	;jmp	SYS_RET_OK_clc
 36983                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36984                                  	;jmp	SYS_RET_OK_clc
 36985                                  LSeekOk:
 36986 0000683D EBA8                    	jmp     short Read_Okj
 36987                                  
 36988                                  LSeekEOF:
 36989                                  	;;test	word [es:di+5],8000h
 36990                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36991                                  	; 21/05/2019 - Retro DOS v4.0
 36992 0000683F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36993 00006844 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36994                                  LOCAL_LSeek:
 36995                                  	;add	dx,[es:di+17]
 36996 00006846 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36997                                  	;adc	cx,[es:di+19]
 36998 0000684A 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36999 0000684E EBDC                    	JMP	short LSeekStore	; go and set the position
 37000                                  
 37001                                  Check_LSeek_Mode:
 37002                                  	;;test	word [es:di+2],8000h
 37003                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37004                                  	; 21/05/2019
 37005 00006850 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37006 00006855 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37007                                  	;mov	ax,[es:di+2]
 37008 00006857 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37009                                  	;and	ax, 0F0h
 37010 0000685B 25F000                  	AND	AX,SHARING_MASK
 37011                                  	;cmp	ax,40h
 37012 0000685E 83F840                  	CMP	AX,SHARING_DENY_NONE
 37013 00006861 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37014                                  	;cmp	ax,30h
 37015 00006863 83F830                  	CMP	AX,SHARING_DENY_READ
 37016 00006866 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37017                                  NET_LSEEK:
 37018                                  ;	JMP	short LOCAL_LSeek
 37019                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37020                                  	;CallInstall Net_Lseek,MultNET,33
 37021                                  	;JNC	short LSeekSetPos
 37022                                  
 37023 00006868 B82111                  	mov     ax,1121h
 37024 0000686B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37025                                  			; CX:DX = offset (in bytes) from end
 37026                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37027                                  			; SS = DOS CS
 37028                                  			; Return: CF set on error
 37029                                  			; CF clear if successful, DX:AX = new file position
 37030 0000686D 73C0                    	jnb     short LSeekSetpos
 37031                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37032                                  	;jmp	SYS_RET_ERR
 37033                                  ;LSeekError3:
 37034                                  	; 17/12/2022
 37035                                  LSeekError:
 37036                                  	;jmp	short LSeekError2
 37037                                  DupErr:	; 17/12/2022
 37038 0000686F E9D29D                  	jmp	SYS_RET_ERR
 37039                                  
 37040                                  ;BREAK <FileTimes - modify write times on a handle>
 37041                                  ;----------------------------------------------------------------------------
 37042                                  ;
 37043                                  ;   Assembler usage:
 37044                                  ;	    MOV AH, FileTimes (57H)
 37045                                  ;	    MOV AL, func
 37046                                  ;	    MOV BX, handle
 37047                                  ;	; if AL = 1 then then next two are mandatory
 37048                                  ;	    MOV CX, time
 37049                                  ;	    MOV DX, date
 37050                                  ;	    INT 21h
 37051                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37052                                  ;	; for the handle.
 37053                                  ;
 37054                                  ;	AL=02		 get extended attributes
 37055                                  ;	   BX=handle
 37056                                  ;	   CX=size of buffer (0, return max size )
 37057                                  ;	   DS:SI query list (si=-1, selects all EA)
 37058                                  ;	   ES:DI buffer to hold EA list
 37059                                  ;
 37060                                  ;	AL=03		 get EA name list
 37061                                  ;	   BX=handle
 37062                                  ;	   CX=size of buffer (0, return max size )
 37063                                  ;	   ES:DI buffer to hold name list
 37064                                  ;
 37065                                  ;	AL=04		 set extended attributes
 37066                                  ;	   BX=handle
 37067                                  ;	   ES:DI buffer of EA list
 37068                                  ;
 37069                                  ;
 37070                                  ;   Error returns:
 37071                                  ;	    AX = error_invalid_function
 37072                                  ;	       = error_invalid_handle
 37073                                  ;
 37074                                  ;----------------------------------------------------------------------------
 37075                                  
 37076                                  ; 21/05/2019 - Retro DOS v4.0
 37077                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37078                                  
 37079                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37080                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37081                                  
 37082                                  _$FILE_TIMES:
 37083                                  	; 13/07/2018 - Retro DOS v3.0
 37084                                  
 37085                                  	; MSDOS 3.3
 37086                                  	;cmp	al,2			; correct subfunction ?
 37087                                  	;jb	short ft1
 37088                                  
 37089                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37090                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37091                                  						;SS Overr
 37092                                  	;;mov	al,1
 37093                                  	;mov	al,error_invalid_function ; give bad return
 37094                                  	;jmp	SYS_RET_ERR
 37095                                  
 37096                                  	; MSDOS 6.0
 37097 00006872 3C02                    	cmp	al,2			; correct subfunction ?
 37098 00006874 7340                    	jae	short inval_func
 37099                                  ;ft1:
 37100 00006876 E87300                  	call	CheckOwner		; get sft
 37101                                  	; 17/12/2022
 37102 00006879 72F4                    	jc	short LSeekError	; bad handle
 37103                                  
 37104 0000687B 08C0                    	or	al,al			; get time/date ?
 37105 0000687D 7515                    	jnz	short ft_set_time
 37106                                  
 37107                                  ;------ here we get the time & date from the sft for the user
 37108                                  
 37109 0000687F FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37110                                  	;mov	cx,[es:di+13]
 37111 00006880 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37112                                  	;mov	dx,[es:di+15]
 37113 00006884 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37114 00006888 FB                      	sti
 37115 00006889 E8F99B                  	call	Get_User_Stack
 37116                                  	;mov	[si+4],cx
 37117 0000688C 894C04                  	mov	[si+user_env.user_CX],cx
 37118                                  	;mov	[si+6],dx
 37119 0000688F 895406                  	mov	[si+user_env.user_DX],dx
 37120 00006892 EB1F                    	jmp	short ok_ret
 37121                                  
 37122                                  ;------ here we set the time in sft
 37123                                  
 37124                                  ft_set_time:
 37125 00006894 E87BAA                  	call    ECritSFT
 37126                                  	;mov	[es:di+13],cx
 37127 00006897 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37128                                  	;mov	[es:di+15],dx
 37129 0000689B 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37130                                  
 37131 0000689F 31C0                    	xor	ax, ax
 37132 000068A1 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37133                                  
 37134                                  ;------ set the flags in SFT entry
 37135                                  	;and	word [es:di+5],0FFBFh
 37136                                  	; 18/12/2022
 37137                                  	;and	byte [es:di+5],0BFh
 37138 000068A6 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37139                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37140                                  							; mark file as dirty
 37141                                  	;or	word [es:di+5],4000h
 37142                                  	; 17/12/2022
 37143                                  	;or	byte [es:di+6],40h
 37144 000068AB 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37145                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37146                                  							; ask close not to
 37147                                  							;   bother about date
 37148                                  							;   and time
 37149 000068B0 E87AAA                  	call	LCritSFT
 37150                                  ok_ret:
 37151                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37152                                  	; 17/12/2022
 37153 000068B3 E9859D                  	jmp	SYS_RET_OK
 37154                                  	;jmp	short LSeekOk
 37155                                  
 37156                                  inval_func:
 37157                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37158 000068B6 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37159                                  						;SS Overr
 37160                                  	;mov	al,1
 37161 000068BC B001                    	mov	al,error_invalid_function ; give bad return
 37162                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37163                                  ft_error:
 37164                                  	;;jmp	SYS_RET_ERR
 37165                                  	;jmp	short LSeekError3
 37166                                  	; 17/12/2022
 37167 000068BE EBAF                    	jmp	short LSeekError
 37168                                  
 37169                                  ; 21/05/2019 - Retro DOS v4.0
 37170                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37171                                  
 37172                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37173                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37174                                  
 37175                                  ;BREAK <$DUP - duplicate a jfn>
 37176                                  ;----------------------------------------------------------------------------
 37177                                  ;
 37178                                  ;   Assembler usage:
 37179                                  ;	    MOV     BX, fh
 37180                                  ;	    MOV     AH, Dup
 37181                                  ;	    INT     int_command
 37182                                  ;	  AX has the returned handle
 37183                                  ;   Errors:
 37184                                  ;	    AX = dup_invalid_handle
 37185                                  ;	       = dup_too_many_open_files
 37186                                  ;
 37187                                  ;----------------------------------------------------------------------------
 37188                                  
 37189                                  _$DUP:
 37190 000068C0 89D8                    	MOV	AX,BX			; save away old handle in AX
 37191 000068C2 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37192                                  DupErrorCheck:
 37193 000068C5 72A8                    	JC	short DupErr		; nope, bye
 37194 000068C7 06                      	push	es
 37195 000068C8 57                      	push	di			; save away SFT
 37196 000068C9 5E                      	pop	si			; into convenient place DS:SI
 37197 000068CA 1F                      	pop	ds
 37198 000068CB 93                      	XCHG	AX,BX			; get back old handle
 37199 000068CC E81D00                  	call	CheckOwner		; get sft in ES:DI
 37200 000068CF 729E                    	JC	short DupErr		; errors go home
 37201 000068D1 E80EC1                  	call	DOS_Dup_Direct
 37202 000068D4 E800FD                  	call	pJFNFromHandle		; get pointer
 37203 000068D7 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37204 000068DA 881C                    	MOV	[SI],BL			; stuff in new SFT
 37205                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37206                                  	;jmp	SYS_RET_OK		; and go home
 37207 000068DC EBD5                    	jmp	short ok_ret
 37208                                  
 37209                                  	; 17/12/2022
 37210                                  ;DupErr:
 37211                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37212                                  	;;jmp	SYS_RET_ERR
 37213                                  	;jmp	short ft_error
 37214                                  
 37215                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37216                                  ;----------------------------------------------------------------------------
 37217                                  ;
 37218                                  ;   Assembler usage:
 37219                                  ;	    MOV     BX, fh
 37220                                  ;	    MOV     CX, newfh
 37221                                  ;	    MOV     AH, Dup2
 37222                                  ;	    INT     int_command
 37223                                  ;   Error returns:
 37224                                  ;	    AX = error_invalid_handle
 37225                                  ;
 37226                                  ;----------------------------------------------------------------------------
 37227                                  
 37228                                  _$DUP2:
 37229 000068DE 53                      	push	bx
 37230 000068DF 51                      	push	cx			; save source
 37231 000068E0 89CB                    	MOV	BX,CX			; get one to close
 37232 000068E2 E8AAFD                  	call	_$CLOSE			; close destination handle
 37233 000068E5 5B                      	pop	bx
 37234 000068E6 58                      	pop	ax			; old in AX, new in BX
 37235 000068E7 E8EDFC                  	call	pJFNFromHandle		; get pointer
 37236 000068EA EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37237                                  
 37238                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37239                                  ;----------------------------------------------------------------------------
 37240                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37241                                  ;   process without the process knowing it (delete/rename of open files, for
 37242                                  ;   example), it is possible for the redirector to issue a call to a handle
 37243                                  ;   that it soes not rightfully own. We check here to make sure that the
 37244                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37245                                  ;   SFFromHandle to really make sure that the SFT is good.
 37246                                  ;
 37247                                  ;	ENTRY	BX has the handle
 37248                                  ;		User_ID is the current user
 37249                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37250                                  ;		Carry Set => AX has error code
 37251                                  ;	USES	none
 37252                                  ;----------------------------------------------------------------------------
 37253                                  
 37254                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37255                                  	; 21/05/2019 - Retro DOS v4.0
 37256                                  CheckOwner:
 37257                                  	; 13/07/2018 - Retro DOS v3.0
 37258                                  
 37259 000068EC E805FD                  	call	SFFromHandle
 37260 000068EF 721B                    	jc	short co_ret_label	; retc
 37261                                  
 37262 000068F1 50                      	push	ax
 37263                                  
 37264                                  	; MSDOS 6.0
 37265                                  
 37266                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37267                                  ;SR; are shared across multiple VMs in win386.
 37268                                  
 37269 000068F2 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37270 000068F8 7404                    	jz	short no_win386		;win386 is not present
 37271 000068FA 31C0                    	xor	ax,ax			;set the zero flag
 37272 000068FC EB08                    	jmp	short _skip_win386	
 37273                                  
 37274                                  no_win386:
 37275 000068FE 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37276                                  	;cmp	ax,[es:di+47]
 37277 00006902 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37278                                  
 37279                                  _skip_win386:
 37280 00006906 58                      	pop	ax
 37281                                  	
 37282                                  	; 17/12/2022
 37283 00006907 7403                    	jz	short co_ret_label
 37284                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37285                                  	;jnz	short CheckOwner_err
 37286                                  	;retn
 37287                                  	
 37288                                  CheckOwner_err:
 37289                                  	;mov	al,6
 37290 00006909 B006                    	mov	al,error_invalid_handle
 37291 0000690B F9                      	stc
 37292                                  
 37293                                  co_ret_label:
 37294 0000690C C3                      	retn
 37295                                  
 37296                                  ;============================================================================
 37297                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37298                                  ;============================================================================
 37299                                  ; Retro	DOS v3.0 - 11/07/2018
 37300                                  ; 21/05/2019 - Retro DOS v4.0
 37301                                  
 37302                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37303                                  ;	NAME	MACRO
 37304                                  
 37305                                  ;	Microsoft Confidential
 37306                                  ;	Copyright (C) Microsoft Corporation 1991
 37307                                  ;	All Rights Reserved.
 37308                                  
 37309                                  ;**	MACRO.ASM
 37310                                  ;
 37311                                  ;	$AssignOper
 37312                                  ;	FIND_DPB
 37313                                  ;	InitCDS
 37314                                  ;	$UserOper
 37315                                  ;	GetVisDrv
 37316                                  ;	GetThisDrv
 37317                                  ;	GetCDSFromDrv
 37318                                  ;
 37319                                  ;   Revision history:
 37320                                  ;
 37321                                  ;	Created: MZ 4 April 1983
 37322                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37323                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37324                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37325                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37326                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37327                                  ;				    aliasing.
 37328                                  ;
 37329                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37330                                  ;   each valid drive letter the text of the current directory on that drive.
 37331                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37332                                  ;   be at the root. A current directory is either the raw local directory
 37333                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37334                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37335                                  ;
 37336                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37337                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37338                                  ;   this and all * are expanded into ?'s.
 37339                                  ;
 37340                                  ;   The second part of name translation involves subtree aliasing. A list of
 37341                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37342                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37343                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37344                                  ;   replaced with the other subtree in the pair.
 37345                                  ;
 37346                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37347                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37348                                  ;   The output of the previous translation is examined to see if any of the
 37349                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37350                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37351                                  ;   'mount' one device under another.
 37352                                  ;
 37353                                  ;   The final form of name translation involves the mapping of a user's
 37354                                  ;   logical drive number into the internal physical drive. This is
 37355                                  ;   accomplished by converting the drive number into letter:CON, performing
 37356                                  ;   the above translation and then converting the character back into a drive
 37357                                  ;   number.
 37358                                  ;
 37359                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37360                                  ;   take a path and form the real text of the pathname with all . and ..
 37361                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37362                                  ;   TransPath.
 37363                                  ;
 37364                                  ;	A000	version 4.00  Jan. 1988
 37365                                  
 37366                                  ;Installed = TRUE
 37367                                  
 37368                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37369                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37370                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37371                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37372                                  ;					; current drive)
 37373                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37374                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37375                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37376                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37377                                  ;	I_need	MYNAME,16		; machine name
 37378                                  ;	I_need	MYNUM,WORD		; machine number
 37379                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37380                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37381                                  ;	I_need	DrvErr,BYTE		; drive error
 37382                                  
 37383                                  ;BREAK <$AssignOper -- Set up a Macro>
 37384                                  ;----------------------------------------------------------------------------
 37385                                  ; Inputs:
 37386                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37387                                  ;	AL = 01 set assign mode 		    (SetMode)
 37388                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37389                                  ;	AL = 03 Define Macro (attch start)
 37390                                  ;	    BL = Macro type
 37391                                  ;	       = 0 alias
 37392                                  ;	       = 1 file/device
 37393                                  ;	       = 2 drive
 37394                                  ;	       = 3 Char device -> network
 37395                                  ;	       = 4 File device -> network
 37396                                  ;	    DS:SI -> ASCIZ source name
 37397                                  ;	    ES:DI -> ASCIZ destination name
 37398                                  ;	AL = 04 Cancel Macro
 37399                                  ;	    DS:SI -> ASCIZ source name
 37400                                  ;	AL = 05 Modified get attach list entry
 37401                                  ;	AL = 06 Get ifsfunc item
 37402                                  ;	AL = 07 set in_use of a drive's CDS
 37403                                  ;	     DL = drive number, 0=default  0=A,,
 37404                                  ;	AL = 08 reset in_use of a drive's CDS
 37405                                  ;	     DL = drive number, 0=A, 1=B,,,
 37406                                  ; Function:
 37407                                  ;	Do macro stuff
 37408                                  ; Returns:
 37409                                  ;	Std Xenix style error return
 37410                                  ;----------------------------------------------------------------------------
 37411                                  
 37412                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37413                                  	; 21/05/2019 - Retro DOS v4.0
 37414                                  _$AssignOper:
 37415                                  	; MSDOS 6.0
 37416 0000690D 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37417 0000690F 7525                    	JNZ	short chk08		      ; no			;AN000;
 37418                                  srinuse:								;AN000;
 37419 00006911 50                      	PUSH	AX			      ; save al 		;AN000;
 37420 00006912 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37421 00006914 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37422 00006917 58                      	POP	AX			      ; 			;AN000;
 37423 00006918 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37424                                  	;cmp	word [si+45h],0
 37425 0000691A 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37426 0000691E 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37427 00006920 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37428 00006922 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37429                                  	;or	word [si+43h],4000h
 37430                                  	; 17/12/2022
 37431                                  	;or	byte [si+44h],40h
 37432 00006924 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37433                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37434 00006928 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37435                                  resetdrv:
 37436                                  	;and	word [si+43h],0BFFFh									;AN000;
 37437                                  	; 18/12/2022
 37438 0000692A 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37439                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37440 0000692E EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37441                                  
 37442                                  	; 17/12/2022
 37443                                  baddrv: 								;AN000;
 37444 00006930 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37445                                  
 37446                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37447                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37448                                  	; 17/12/2022
 37449                                  	; 21/05/2019
 37450                                  ASS_ERR:
 37451 00006933 E90E9D                  	jmp	SYS_RET_ERR
 37452                                  
 37453                                  chk08:									;AN000;
 37454 00006936 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37455 00006938 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37456                                  
 37457                                    ;IF	NOT INSTALLED
 37458                                  	;transfer NET_ASSOPER
 37459                                    ;ELSE
 37460                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37461 0000693A 50                      	PUSH	AX
 37462                                  	;mov	ax,111Eh
 37463                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37464 0000693B B81E11                  	mov	ax,(MultNET*256)+30
 37465 0000693E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37466                                  			; SS = DOS CS
 37467                                  			; STACK: WORD function to execute
 37468                                  			; Return: CF set on error, AX = error code
 37469                                  			; STACK unchanged
 37470 00006940 5B                      	POP	BX			; Don't zap error code in AX
 37471 00006941 72F0                    	JC	short ASS_ERR
 37472                                  okdone:
 37473 00006943 E9F59C                  	jmp	SYS_RET_OK
 37474                                  
 37475                                  	; 17/12/2022
 37476                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37477                                  ;ASS_ERR:
 37478                                  	;jmp	SYS_RET_ERR
 37479                                  
 37480                                    ;ENDIF
 37481                                  
 37482                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37483                                  ;----------------------------------------------------------------------------
 37484                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37485                                  ;
 37486                                  ;	ENTRY	AL has drive number A = 0
 37487                                  ;	EXIT	'C' set
 37488                                  ;		    No DPB for this drive number
 37489                                  ;		'C' clear
 37490                                  ;		    DS:SI points to DPB for drive
 37491                                  ;	USES	SI, DS, Flags
 37492                                  ;----------------------------------------------------------------------------
 37493                                  
 37494                                  	; 21/05/2019 - Retro DOS v4.0
 37495                                  FIND_DPB:
 37496 00006946 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37497                                  fdpb5:	
 37498 0000694B 83FEFF                  	CMP	SI,-1
 37499 0000694E 7409                    	JZ	short fdpb10
 37500 00006950 3A04                    	cmp	al,[si]
 37501                                  	;CMP	AL,[SI+DPB.DRIVE]
 37502 00006952 7406                    	jz	short ret_label15	; Carry clear (retz)
 37503                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37504                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37505 00006954 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37506 00006957 EBF2                    	JMP	short fdpb5
 37507                                  fdpb10:	
 37508 00006959 F9                      	STC
 37509                                  ret_label15:
 37510 0000695A C3                      	retn
 37511                                  
 37512                                  ;	Break <InitCDS - set up an empty CDS>
 37513                                  ;----------------------------------------------------------------------------
 37514                                  ;**	InitCDS - Setup an Empty CDS
 37515                                  ;
 37516                                  ;	ENTRY	ThisCDS points to CDS
 37517                                  ;		AL has uppercase drive letter
 37518                                  ;	EXIT	ThisCDS is now empty
 37519                                  ;		(ES:DI) = CDS
 37520                                  ;		'C' set if no DPB associated with drive
 37521                                  ;	USES	AH,ES,DI, Flags
 37522                                  ;----------------------------------------------------------------------------
 37523                                  
 37524                                  ; 21/05/2019 - Retro DOS v4.0
 37525                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37526                                  
 37527                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37528                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37529                                  
 37530                                  InitCDS:
 37531                                  	; 19/08/2018
 37532                                  	; 05/08/2018 - Retro DOS v3.0
 37533                                  	; MSDOS 6.0
 37534 0000695B 50                      	push	ax			; save (AL) for caller
 37535 0000695C 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37536                                  	;mov	word [es:di+67],0
 37537 00006961 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37538 00006967 2C40                    	SUB	AL,"A"-1                ; A = 1
 37539 00006969 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37540 0000696E 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37541 00006970 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37542 00006971 50                      	PUSH	AX			; save drive number for later
 37543 00006972 0441                    	add	al,"A"
 37544 00006974 B43A                    	MOV	AH,':'
 37545 00006976 268905                  	mov	[ES:DI],ax
 37546                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37547                                  	;mov	ax,"\"
 37548                                  	;mov	[es:di+2],ax
 37549                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37550 00006979 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37551                                  	;or	word [es:di+67],4000h
 37552                                  	;or	byte [es:di+68],40h
 37553 0000697F 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37554 00006984 29C0                    	sub	ax,ax
 37555                                  	;MOV	[es:di+73],ax ; 0
 37556 00006986 26894549                	MOV	[ES:DI+curdir.ID],ax
 37557                                  	;mov	[es:di+75],ax ; 0
 37558 0000698A 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37559 0000698E B002                    	mov	al,2
 37560                                  	;mov	[es:di+79],aX ; 2
 37561 00006990 2689454F                	MOV	[ES:DI+curdir.end],ax
 37562 00006994 58                      	POP	AX			; (al) = drive number
 37563 00006995 1E                      	push	ds
 37564 00006996 56                      	push	si
 37565 00006997 E8ACFF                  	call	FIND_DPB
 37566 0000699A 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37567                                  	;mov	[es:di+69],si
 37568 0000699C 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37569                                  	;mov	[es:di+71],ds
 37570 000069A0 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37571                                  icds5:	
 37572 000069A4 5E                      	pop	si
 37573 000069A5 1F                      	pop	ds
 37574                                  icdsx:	
 37575 000069A6 58                      	pop	ax
 37576                                  RET45:
 37577 000069A7 C3                      	retn
 37578                                  
 37579                                  ;Break <$UserOper - get/set current user ID (for net)>
 37580                                  ;----------------------------------------------------------------------------
 37581                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37582                                  ;	maintain this string and do no verifications.
 37583                                  ;
 37584                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37585                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37586                                  ;		DS:DX is user string pointer (calls 1,2)
 37587                                  ;		ES:DI is user buffer (call 3)
 37588                                  ;		BX is assign index (calls 2,3,4,5)
 37589                                  ;		CX is user number (call 1)
 37590                                  ;		DX is flag word (call 4)
 37591                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37592                                  ;			and user CX is set to the user number
 37593                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37594                                  ;		If AL = 5 then DX is flag word
 37595                                  ;----------------------------------------------------------------------------
 37596                                  
 37597                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37598                                  	; 21/05/2019 - Retro DOS v4.0
 37599                                  _$UserOper:
 37600                                  	; 05/08/2018 - Retro DOS v3.0
 37601                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37602 000069A8 50                      	PUSH	AX
 37603 000069A9 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37604 000069AB 58                      	POP	AX
 37605 000069AC 7211                    	JB	short UserGet 		; return to user the string
 37606 000069AE 742E                    	JZ	short UserSet 		; set the current user
 37607 000069B0 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37608 000069B2 763D                    	JBE	short UserPrint		; yep
 37609                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37610 000069B4 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37611                                  					; Extended Error Locus
 37612                                  	;error	error_invalid_function	; not 0,1,2,3
 37613                                  	;mov	al,1
 37614 000069BA B001                    	MOV	AL,error_invalid_function
 37615                                  useroper_error:
 37616                                  	; 17/12/2022
 37617                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37618 000069BC E9859C                  	JMP	SYS_RET_ERR
 37619                                  	;jmp	short ASS_ERR
 37620                                  
 37621                                  UserGet:
 37622                                  ; Transfer MYNAME to DS:DX
 37623                                  ; Set Return CX to MYNUM
 37624 000069BF 1E                      	PUSH	DS			; switch registers
 37625 000069C0 07                      	POP	ES
 37626 000069C1 89D7                    	MOV	DI,DX			; destination
 37627 000069C3 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37628 000069C8 E8BA9A                  	call	Get_User_Stack
 37629                                  	;mov	[si+4],cx
 37630 000069CB 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37631 000069CE 16                      	push	ss			; point to DOSDATA
 37632 000069CF 1F                      	pop	ds
 37633 000069D0 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37634                                  UserMove:
 37635 000069D3 B90F00                  	MOV	CX,15
 37636 000069D6 F3A4                    	REP	MOVSB			; blam.
 37637 000069D8 31C0                    	XOR	AX,AX			; 16th byte is 0
 37638 000069DA AA                      	STOSB
 37639                                  UserBye:
 37640 000069DB E95D9C                  	jmp	SYS_RET_OK		; no errors here
 37641                                  
 37642                                  UserSet:
 37643                                  ; Transfer DS:DX to MYNAME
 37644                                  ; CX to MYNUM
 37645 000069DE 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37646 000069E3 89D6                    	MOV	SI,DX			; user space has source
 37647 000069E5 16                      	push	ss
 37648 000069E6 07                      	pop	es
 37649 000069E7 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37650 000069EA 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37651 000069EF EBE2                    	JMP	short UserMove
 37652                                  
 37653                                  UserPrint:
 37654                                  
 37655                                    ;IF NOT Installed
 37656                                    ;	transfer PRINTER_GETSET_STRING
 37657                                    ;ELSE
 37658 000069F1 50                      	PUSH	AX
 37659                                  	;mov	ax,111Fh
 37660                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37661 000069F2 B81F11                  	mov	ax,(MultNET<<8)|31
 37662 000069F5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37663                                  			; STACK: WORD function
 37664                                  			; Return: CF set on error, AX = error code
 37665                                  			; STACK unchanged
 37666 000069F7 5A                      	POP	DX			; Clean stack
 37667                                  	;JNC	short OKPA
 37668 000069F8 73E1                    	jnc	short UserBye ; 21/05/2019
 37669                                  	; 17/12/2022
 37670 000069FA EBC0                    	jmp	short useroper_error
 37671                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37672                                  	;jnb     short OKPA
 37673                                  	;jmp     short useroper_error
 37674                                  
 37675                                  	; 17/12/2022
 37676                                  ;OKPA:
 37677                                  ;	jmp	short UserBye
 37678                                  
 37679                                    ;ENDIF
 37680                                  
 37681                                  
 37682                                  ;Break	<GetVisDrv - return visible drive>
 37683                                  ;----------------------------------------------------------------------------
 37684                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37685                                  ;
 37686                                  ;   Inputs:	AL has drive identifier (0=default)
 37687                                  ;   Outputs:	Carry Set - invalid drive/macro
 37688                                  ;		Carry Clear - AL has physical drive (0=A)
 37689                                  ;		    ThisCDS points to CDS
 37690                                  ;   Registers modified: AL
 37691                                  ;----------------------------------------------------------------------------
 37692                                  
 37693                                  	; 21/05/2019 - Retro DOS v4.0
 37694                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37695                                  
 37696                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37697                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37698                                  GetVisDrv:
 37699                                  	; 05/08/2018 - Retro DOS v3.0
 37700                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37701 000069FC E81900                  	CALL	GETTHISDRV		; get inuse drive
 37702 000069FF 72A6                    	jc	short RET45
 37703 00006A01 1E                      	push	ds
 37704 00006A02 56                      	push	si
 37705 00006A03 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37706                                  	;test	word [si+67],2000h
 37707                                  	; 17/12/2022
 37708                                  	;test	byte [si+68],20h
 37709 00006A08 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37710                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37711 00006A0C 5E                      	pop	si
 37712 00006A0D 1F                      	pop	ds
 37713 00006A0E 7497                    	jz	short RET45		; if not spliced, return OK
 37714                                  	; MSDOS 6.0
 37715                                  	;mov	byte [ss:DrvErr],0Fh
 37716 00006A10 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37717 00006A16 F9                      	STC				; signal error
 37718 00006A17 C3                      	retn
 37719                                  
 37720                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37721                                  ;----------------------------------------------------------------------------
 37722                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37723                                  ;	macro pointer
 37724                                  ;
 37725                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37726                                  ;   Outputs:
 37727                                  ;		Carry Set - invalid drive/macro
 37728                                  ;		Carry Clear - AL has physical drive (0=A)
 37729                                  ;		   ThisCDS points to macro
 37730                                  ;   Registers modified: AL
 37731                                  ;----------------------------------------------------------------------------
 37732                                  
 37733                                  	; 21/05/2019 - Retro DOS v4.0
 37734                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37735                                  
 37736                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37737                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37738                                  GETTHISDRV:
 37739                                  	; 05/08/2018
 37740                                  	; 12/07/2018 - Retro DOS v3.0
 37741                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37742                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37743 00006A18 08C0                    	OR	AL,AL			; are we using default drive?
 37744 00006A1A 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37745 00006A1C 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37746                                  	;INC	ax			; Counteract next instruction
 37747                                  	; 04/09/2018
 37748                                  	;inc	al
 37749                                  	; 07/12/2022
 37750 00006A20 40                      	inc	ax
 37751                                  GTD10:	
 37752                                  	;DEC	AX
 37753                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37754 00006A21 48                      	dec	ax			; 0 = A
 37755                                  	;dec	al
 37756 00006A22 1E                      	PUSH	DS			; save world
 37757 00006A23 56                      	PUSH	SI
 37758                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37759 00006A24 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37760 00006A2A 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37761 00006A30 7420                    	JZ	SHORT GTD20		; Logical
 37762 00006A32 50                      	PUSH	AX
 37763 00006A33 06                      	PUSH	ES
 37764 00006A34 57                      	PUSH	DI
 37765 00006A35 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37766                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37767 00006A3C 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37768 00006A41 0441                    	ADD	AL,'A'
 37769 00006A43 E815FF                  	CALL	InitCDS			; InitCDS(c);
 37770                                  	;test	word [es:di+67],4000h
 37771                                  	; 17/12/2022
 37772                                  	;test	byte [es:di+68],40h
 37773 00006A46 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37774                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37775 00006A4B 5F                      	POP	DI
 37776 00006A4C 07                      	POP	ES
 37777 00006A4D 58                      	POP	AX
 37778 00006A4E 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37779 00006A50 EB18                    	JMP	SHORT GTDX		; carry clear
 37780                                  GTD20:
 37781 00006A52 E81800                  	CALL	GetCDSFromDrv
 37782 00006A55 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37783                                  	;test	word [si+43h],4000h
 37784                                  	; 17/12/2022
 37785                                  	;test	byte [si+44h],40h
 37786 00006A57 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37787                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37788 00006A5B 750D                    	JNZ	SHORT GTDX		; carry clear
 37789                                  GTD30:	
 37790                                  	; 21/05/2019
 37791                                  	; MSDOS 6.0
 37792 00006A5D B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37793 00006A5F 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37794                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37795 00006A63 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37796 00006A69 F9                      	STC
 37797                                  GTDX:	
 37798 00006A6A 5E                      	POP	SI			; restore world
 37799 00006A6B 1F                      	POP	DS
 37800 00006A6C C3                      	RETN
 37801                                   
 37802                                  
 37803                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37804                                  ;----------------------------------------------------------------------------
 37805                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37806                                  ;	pointer, returning an error if the drive number is greater than the
 37807                                  ;	number of CDS's
 37808                                  ;
 37809                                  ;   Inputs:	AL is physical unit # A=0...
 37810                                  ;   Outputs:	Carry Set if Bad Drive
 37811                                  ;		Carry Clear
 37812                                  ;		    DS:SI -> CDS
 37813                                  ;		    [THISCDS] = DS:SI
 37814                                  ;   Registers modified: DS,SI
 37815                                  ;----------------------------------------------------------------------------
 37816                                  
 37817                                  	; 21/05/2019 - Retro DOS v4.0
 37818                                  GetCDSFromDrv:
 37819 00006A6D 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37820                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37821                                  	;STC				; signal error
 37822                                  	;RETN				; bye
 37823                                  	; 23/09/2023
 37824 00006A72 F5                      	cmc	; cf=1 <-> cf=0
 37825 00006A73 7217                    	jc	short GetCDS_retn
 37826                                  GetCDS:
 37827                                  	; 23/09/2023
 37828                                  	;PUSH	BX
 37829 00006A75 50                      	PUSH	AX
 37830 00006A76 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37831                                  	;mov	bl,81 ; MSDOS 3.3
 37832                                  	;mov	bl,88 ; MSDOS 6.0 
 37833                                  	; 23/09/2023
 37834                                  	;MOV	BL,curdir.size		; size in convenient spot
 37835                                  	;MUL	BL			; get net offset
 37836 00006A7B B458                    	mov	ah,curdir.size
 37837 00006A7D F6E4                    	mul	ah
 37838 00006A7F 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37839 00006A81 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37840 00006A86 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37841 00006A8B 58                      	POP	AX
 37842                                  	; 23/09/2023
 37843                                  	;POP	BX
 37844                                  	; (cf must be 0 here) ; *
 37845                                  	;CLC				; no error
 37846                                  GetCDS_retn:
 37847 00006A8C C3                      	RETN				; bye!
 37848                                  
 37849                                  ;============================================================================
 37850                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37851                                  ;============================================================================
 37852                                  ; Retro	DOS v3.0 - 12/07/2018
 37853                                  ; 22/05/2019 - Retro DOS v4.0
 37854                                  
 37855                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37856                                  ;----------------------------------------------------------------------------
 37857                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37858                                  ;       gritty substitution.
 37859                                  ;
 37860                                  ;   Inputs:     DS:DX - pointer to FCB
 37861                                  ;               ES:DI - point to destination
 37862                                  ;   Outputs:    Carry Set - invalid path in final map
 37863                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37864                                  ;                   Sattrib is set from possibly extended FCB
 37865                                  ;                   ExtFCB set if extended FCB found
 37866                                  ;   Registers modified: most
 37867                                  ;----------------------------------------------------------------------------
 37868                                  
 37869                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37870                                  TransFCB:
 37871                                  	; 22/05/2019 - Retro DOS v4.0
 37872                                  	; 12/07/2018 - Retro DOS v3.0
 37873                                  	;LocalVar FCBTmp,16
 37874                                  	;ENTER
 37875 00006A8D 55                      	push	bp
 37876 00006A8E 89E5                    	mov	bp,sp
 37877                                  	;sub	sp,15	; MSDOS 3.3
 37878 00006A90 83EC10                  	sub	sp,16	; MSDOS 6.0
 37879 00006A93 16                      	push	ss
 37880 00006A94 07                      	pop	es
 37881 00006A95 06                      	push	es
 37882 00006A96 57                      	push	di
 37883                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37884                                  	;LEA	DI,FCBTmp 
 37885 00006A97 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37886 00006A9A 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37887 00006AA0 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37888 00006AA6 E8ADB1                  	call	GetExtended             ; get FCB, extended or not
 37889                                  	; 06/12/2022
 37890 00006AA9 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37891 00006AAB 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37892 00006AAE 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37893 00006AB2 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37894                                  GetDrive:
 37895 00006AB8 AC                      	lodsb				; get drive byte
 37896 00006AB9 E85CFF                  	call	GETTHISDRV
 37897 00006ABC 722A                    	jc	short BadPack
 37898 00006ABE E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37899                                  
 37900                                  ; Scan the source to see if there are any illegal chars
 37901                                  
 37902                                  	;mov	bx,CharType		; load lookup table
 37903 00006AC1 B90B00                  	mov	cx,11
 37904 00006AC4 56                      	push	si			; back over name, ext
 37905                                  FCBScan:
 37906 00006AC5 AC                      	lodsb				; get a byte
 37907                                  	
 37908                                  	; 09/08/2018
 37909                                  	;;xlat	byte [es:bx]
 37910                                  	;es	xlat
 37911                                  
 37912                                  	; 22/05/2019 - Retro DOS v4.0	
 37913 00006AC6 E836E5                  	call	GetCharType		; get flags
 37914                                  
 37915                                  	;test	al,8	
 37916 00006AC9 A808                    	test	al,FFCB
 37917 00006ACB 741B                    	jz	short BadPack
 37918                                  NextCh: 
 37919 00006ACD E2F6                    	loop	FCBScan
 37920 00006ACF 5E                      	pop	si
 37921 00006AD0 89FB                    	mov	bx,di
 37922 00006AD2 E8BDB5                  	call	PackName                ; crunch the path
 37923 00006AD5 5F                      	pop	di			; get original destination
 37924 00006AD6 07                      	pop	es
 37925 00006AD7 16                      	push	ss			; get DS addressability
 37926 00006AD8 1F                      	pop	ds
 37927                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37928                                  	;LEA	SI,FCBTmp		; point at new pathname
 37929 00006AD9 8D76F0                  	lea	si,[bp-16]
 37930 00006ADC 803F00                  	cmp	byte [bx],0
 37931 00006ADF 7407                    	jz	short BadPack
 37932 00006AE1 55                      	push	bp
 37933 00006AE2 E80E00                  	call	TransPathSet            ; convert the path
 37934 00006AE5 5D                      	pop	bp
 37935 00006AE6 7303                    	jnc	short FCBRet		; bye with transPath error code
 37936                                  BadPack:
 37937 00006AE8 F9                      	STC
 37938                                  	;mov	al,3
 37939 00006AE9 B003                    	MOV     AL,error_path_not_found
 37940                                  FCBRet: 
 37941                                  	;LEAVE
 37942 00006AEB 89EC                    	mov	sp,bp
 37943 00006AED 5D                      	pop	bp
 37944                                  TransPath_retn:
 37945 00006AEE C3                      	retn
 37946                                  
 37947                                  ; 12/07/2018 - Retro DOS v3.0
 37948                                  
 37949                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37950                                  ;----------------------------------------------------------------------------
 37951                                  ;
 37952                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37953                                  ;       substitution, insertion of current directory and fixing . and ..
 37954                                  ;       entries. Perform splicing. Allow input string to match splice
 37955                                  ;       exactly.
 37956                                  ;
 37957                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37958                                  ;       matches splice.
 37959                                  ;
 37960                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37961                                  ;
 37962                                  ;   The following anomalous behaviour is required:
 37963                                  ;
 37964                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37965                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37966                                  ;       Raw net I/O sets ThisCDS => NULL.
 37967                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37968                                  ;
 37969                                  ;   Other behaviour:
 37970                                  ;
 37971                                  ;       ThisCDS set up.
 37972                                  ;       FatRead done on local CDS.
 37973                                  ;       ValidateCDS done on local CDS.
 37974                                  ;
 37975                                  ;   Brief flowchart:
 37976                                  ;
 37977                                  ;       if fSharing then
 37978                                  ;           set up DummyCDS (ThisCDS)
 37979                                  ;           canonicalize (sets cMeta)
 37980                                  ;           splice
 37981                                  ;           fatRead
 37982                                  ;           return
 37983                                  ;       if \\ or d:\\ lead then
 37984                                  ;           set up null CDS (ThisCDS)
 37985                                  ;           canonicalize (sets cMeta)
 37986                                  ;           return
 37987                                  ;       if device then
 37988                                  ;           set up dummyCDS (ThisCDS)
 37989                                  ;           canonicalize (sets cMeta)
 37990                                  ;           return
 37991                                  ;       if file then
 37992                                  ;           getCDS (sets (ThisCDS) from name)
 37993                                  ;           validateCDS (may reset current dir)
 37994                                  ;           Copy current dir
 37995                                  ;           canonicalize (set cMeta)
 37996                                  ;           splice
 37997                                  ;           generate correct CDS (ThisCDS)
 37998                                  ;           if local then
 37999                                  ;               fatread
 38000                                  ;           return
 38001                                  ;
 38002                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38003                                  ;               DI - point to buffer in DOSDATA
 38004                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38005                                  ;                   syntax, etc. or user FAILed to I 24.
 38006                                  ;               WFP_Start - points to beginning of buffer
 38007                                  ;               Curr_Dir_End - points to end of current dir in path
 38008                                  ;               DS - DOSDATA
 38009                                  ;   Registers modified: most
 38010                                  ;
 38011                                  ;----------------------------------------------------------------------------
 38012                                  
 38013                                  ; 22/05/2019
 38014                                  ; 13/05/2019 - Retro DOS v4.0
 38015                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38016                                  
 38017                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38018                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38019                                  
 38020                                  TransPath:
 38021 00006AEF 30C0                    	XOR     AL,AL
 38022 00006AF1 EB02                    	JMP     SHORT SetSplice
 38023                                  TransPathSet:
 38024 00006AF3 B0FF                    	MOV     AL,-1
 38025                                  SetSplice:
 38026 00006AF5 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38027 00006AF9 B0FF                    	MOV     AL,-1
 38028                                  TransPathNoSet:
 38029 00006AFB 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38030 00006AFF 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38031 00006B05 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38032 00006B0A 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38033 00006B11 16                      	push	ss
 38034 00006B12 07                      	pop	es
 38035                                  	;lea	bp,[di+134]
 38036 00006B13 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38037                                  ;
 38038                                  ; if this is through the server dos call, fsharing is set. We set up a
 38039                                  ; dummy cds and let the operation go.
 38040                                  ;
 38041 00006B17 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38042 00006B1D 7435                    	JZ	short CheckUNC		; skip to UNC check
 38043                                  ;
 38044                                  ; ES:DI point to buffer
 38045                                  ;
 38046 00006B1F E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38047 00006B22 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38048 00006B25 722A                    	jc	short NoPath
 38049 00006B27 E80A03                  	CALL	TextFromDrive		; drop in new
 38050 00006B2A 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38051 00006B2D E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38052 00006B30 72BC                    	jc	short TransPath_retn	; errors
 38053                                  ;
 38054                                  ; Perform splices for net guys.
 38055                                  ;
 38056 00006B32 16                      	push	ss
 38057 00006B33 1F                      	pop	ds
 38058 00006B34 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38059 00006B38 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38060 00006B3D 7403                    	JZ	short NoServerSplice
 38061 00006B3F E83102                  	CALL    Splice
 38062                                  NoServerSplice:
 38063 00006B42 16                      	push	ss
 38064 00006B43 1F                      	pop	ds                      ; for FATREAD
 38065 00006B44 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38066 00006B48 E8C7A7                  	call	ECritDisk
 38067 00006B4B E807EB                  	call	FATREAD_CDS
 38068 00006B4E E8DCA7                  	call	LCritDisk
 38069                                  NoPath:
 38070                                  	;mov	al,3
 38071 00006B51 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38072 00006B53 C3                      	retn				; any errors are in Carry flag
 38073                                  
 38074                                  ; Let the network decide if the name is for a spooled device. It will map
 38075                                  ; the name if so.
 38076                                  
 38077                                  CheckUNC:
 38078 00006B54 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38079                                  	;CallInstall NetSpoolCheck,MultNET,35
 38080 00006B5B B82311                  	mov	ax,1123h
 38081 00006B5E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38082                                  			; DS:SI -> ASCIZ filename to canonicalize
 38083                                  			; ES:DI -> 128-byte buffer for qualified name
 38084                                  			; Return: CF set if not resolved
 38085 00006B60 7329                    	JNC	short UNCDone
 38086                                  
 38087                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38088                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38089                                  ; input, then the name has been changed to the remote spooler by the above net
 38090                                  ; call. Also, there may be a drive in front of the \\.
 38091                                  
 38092                                  NO_CHECK:
 38093 00006B62 E8B902                  	CALL    DriveFromText		; eat drive letter
 38094 00006B65 50                      	PUSH    AX                      ; save it
 38095 00006B66 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38096 00006B68 E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 38097 00006B6B 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38098 00006B6D E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 38099 00006B70 751F                    	JNZ	short CheckDevice	; not a path char
 38100 00006B72 38C4                    	CMP     AH,AL                   ; are they same?
 38101 00006B74 751B                    	JNZ	short CheckDevice	; nope
 38102                                  
 38103                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38104                                  ; local machine root path
 38105                                  
 38106 00006B76 58                      	POP     AX
 38107 00006B77 A5                      	MOVSW                           ; get the lead \\.
 38108                                  UNCCpy:
 38109 00006B78 AC                      	LODSB                           ; get a byte
 38110 00006B79 E84BE4                   	call	UCase                   ;AN000;; convert the char
 38111 00006B7C 08C0                    	OR      AL,AL
 38112 00006B7E 740E                    	JZ	short UNCTerm		; end of string. All done.
 38113 00006B80 E899E4                  	call    PATHCHRCMP              ; is it a path char?
 38114 00006B83 89FB                    	MOV     BX,DI                   ; backup position
 38115 00006B85 AA                      	STOSB
 38116 00006B86 75F0                    	JNZ	short UNCCpy		; no, go copy
 38117 00006B88 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38118                                  UNCDone:
 38119 00006B8B 16                      	push	ss
 38120 00006B8C 1F                      	pop	ds
 38121 00006B8D C3                       	retn				; return error code
 38122                                  UNCTerm:
 38123 00006B8E AA                      	STOSB                           ;AN000;
 38124 00006B8F EBFA                    	JMP	short UNCDone		;AN000;
 38125                                  
 38126                                  CheckDevice:
 38127                                  
 38128                                  ; Check DS:SI for device. First eat any path stuff
 38129                                  
 38130 00006B91 58                      	POP     AX                      ; retrieve drive info
 38131 00006B92 803C00                  	CMP     BYTE [SI],0		; check for null file
 38132 00006B95 7504                    	JNZ	short CheckPath
 38133                                  	;mov	al,2 
 38134 00006B97 B002                    	MOV     AL,error_file_not_found ; bad file error
 38135 00006B99 F9                      	STC                             ; signal error on null input
 38136 00006B9A C3                      	RETN				; bye!
 38137                                  CheckPath:
 38138 00006B9B 50                      	push	ax
 38139 00006B9C 55                      	push	bp			; save drive number
 38140                                  
 38141                                  
 38142                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38143                                  %if 0
 38144                                  	; MSDOS 6.0
 38145                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38146                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38147                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38148                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38149                                  ;;;end up having a 5D in the opcode's displacement field. The
 38150                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38151                                  ;;;
 38152                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38153                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38154                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38155                                  ;;;
 38156                                  ;;;More info:
 38157                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38158                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38159                                  ;;;
 38160                                  	call	no5Dshere
 38161                                  start5Dhack:
 38162                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38163                                  backfrom5Dhack:
 38164                                  
 38165                                  %endif
 38166                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38167                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38168 00006B9D E8FED6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38169                                  
 38170 00006BA0 5D                      	pop	bp
 38171 00006BA1 58                      	pop	ax			; get drive letter back
 38172 00006BA2 731C                    	JNC	short DoFile		; yes we have a file.
 38173                                  
 38174                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38175                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38176                                  ; call.
 38177                                  
 38178 00006BA4 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38179 00006BAA E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38180 00006BAD 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38181                                  
 38182                                  ; Now that we have noted that we have a device, we put it into a form that
 38183                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38184                                  ; string. We relax this to state that if the d:\ is present then the path
 38185                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38186                                  ; a device.
 38187                                  
 38188 00006BB3 E87E02                  	CALL    TextFromDrive
 38189 00006BB6 B02F                    	MOV     AL,'/'                  ; path sep.
 38190 00006BB8 AA                      	STOSB
 38191 00006BB9 E81CA6                  	call	StrCpy			; move remainder of string
 38192                                  
 38193 00006BBC F8                      	CLC                             ; everything OK.
 38194 00006BBD 16                      	push	ss
 38195 00006BBE 1F                      	pop	ds                      ; remainder of OK stuff
 38196                                  DoFile_retn:
 38197 00006BBF C3                      	retn
 38198                                  
 38199                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38200                                  %if 0
 38201                                  
 38202                                  no5Dshere:
 38203                                  	; 10/08/2018
 38204                                  	jmp	CheckThisDevice		; snoop for device
 38205                                  %endif
 38206                                  
 38207                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38208                                  
 38209                                  ; We have a file. Get the raw CDS.
 38210                                  
 38211                                  DoFile:
 38212                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38213                                  
 38214 00006BC0 E839FE                  	call	GetVisDrv               ; get proper CDS
 38215                                  	;mov	al,3 
 38216 00006BC3 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38217 00006BC5 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38218                                  
 38219                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38220                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38221                                  ; Use the one that we are going to use (ES:DI).
 38222                                  
 38223                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38224 00006BC7 1E                      	push	ds
 38225 00006BC8 56                      	push	si
 38226 00006BC9 06                      	push	es
 38227 00006BCA 57                      	push	di
 38228 00006BCB E814D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38229                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38230 00006BCE 5F                      	pop	di
 38231 00006BCF 07                      	pop	es
 38232 00006BD0 5E                      	pop	si
 38233 00006BD1 1F                      	pop	ds
 38234                                  	;mov	al,3
 38235 00006BD2 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38236                                  	;retc				; someone failed an operation
 38237 00006BD4 72E9                    	jc	short DoFile_retn
 38238                                  
 38239                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38240                                  ; current directory. Copy it in.
 38241                                  
 38242 00006BD6 1E                      	push	ds
 38243 00006BD7 56                      	push	si
 38244 00006BD8 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38245 00006BDD 89FB                    	MOV     BX,DI                   ; point to destination
 38246                                  	;add	bx,[si+79] ; MSDOS 6.0
 38247 00006BDF 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38248                                  	;lea	bp,[di+134]
 38249 00006BE2 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38250                                  					;AN000;
 38251 00006BE6 E8FEA5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38252 00006BE9 4F                      	DEC     DI                      ; point to NUL byte
 38253                                  
 38254                                  ; Make sure that there is a path char at end.
 38255                                  
 38256 00006BEA B05C                    	MOV     AL,'\'
 38257 00006BEC 263845FF                	CMP     [ES:DI-1],AL
 38258 00006BF0 7401                    	JZ	short GetOrig
 38259 00006BF2 AA                      	STOSB
 38260                                  
 38261                                  ; Now get original string.
 38262                                  
 38263                                  GetOrig:
 38264 00006BF3 4F                      	DEC     DI                      ; point to path char
 38265 00006BF4 5E                      	pop	si
 38266 00006BF5 1F                      	pop	ds
 38267                                  
 38268                                  ; BX points to the end of the root part of the CDS (at where a path char
 38269                                  ; should be). Now, we decide whether we use this root or extend it with the
 38270                                  ; current directory. See if the input string begins with a leading 
 38272 00006BF6 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38273 00006BF9 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38274 00006BFB 08C0                    	OR      AL,AL                   ; end of string?
 38275 00006BFD 7410                    	JZ	short DoCanon		; yes, skip.
 38276                                  ;
 38277                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38278                                  ; to this root. Make sure that there is a path char there and advance the
 38279                                  ; source string over all leading \'s.
 38280                                  ;
 38281 00006BFF 89DF                    	MOV     DI,BX                   ; back up to root point.
 38282                                  SkipPath:
 38283 00006C01 AC                      	LODSB
 38284 00006C02 E817E4                  	call    PATHCHRCMP
 38285 00006C05 74FA                    	JZ	short SkipPath
 38286 00006C07 4E                      	DEC     SI
 38287 00006C08 08C0                    	OR      AL,AL
 38288 00006C0A 7403                    	JZ	short DoCanon
 38289                                  
 38290                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38291                                  ; for yucks.
 38292                                  
 38293                                  PathAssure:
 38294 00006C0C B05C                    	MOV     AL,'\'	; 5Ch
 38295 00006C0E AA                      	STOSB
 38296                                  
 38297                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38298                                  ; BP is the max extent to advance DI
 38299                                  ; BX is the backup limit for ..
 38300                                  
 38301                                  DoCanon:
 38302 00006C0F E85200                  	CALL    Canonicalize            ; wham.
 38303                                  	;retc				; badly formatted path.
 38304 00006C12 72AB                    	jc	short DoFile_retn
 38305                                  
 38306                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38307                                  ; to wfp_start and do string substitution. BP is still the max position in
 38308                                  ; buffer.
 38309                                  
 38310 00006C14 16                      	push	ss
 38311 00006C15 1F                      	pop	ds
 38312 00006C16 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38313 00006C1A C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38314 00006C1E E81B02                  	CALL    PathPref                ; is there a prefix?
 38315 00006C21 7514                    	JNZ	short DoSplice		; no, do splice
 38316                                  
 38317                                  ; We have a match. Check to see if we ended in a path char.
 38318                                  
 38319 00006C23 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38320 00006C26 E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38321 00006C29 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38322                                  Pathline:                               ; 2/13/KK
 38323 00006C2B 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38324 00006C2F 7406                    	JZ	short DoSplice
 38325 00006C31 47                      	INC     DI                      ; point to after current path char
 38326 00006C32 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38327                                  
 38328                                  ; Splice the result.
 38329                                  
 38330                                  DoSplice:
 38331 00006C37 16                      	push	ss
 38332 00006C38 1F                      	pop	ds			; back to DOSDATA
 38333 00006C39 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38334 00006C3D 31C9                    	XOR     CX,CX
 38335 00006C3F F606[7105]FF            	TEST	byte [FSPLICE],-1
 38336 00006C44 7403                    	JZ	short SkipSplice
 38337 00006C46 E82A01                  	CALL    Splice                  ; replaces in place.
 38338                                  SkipSplice:
 38339                                  
 38340                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38341                                  ; device.
 38342                                  
 38343 00006C49 16                      	push	ss
 38344 00006C4A 1F                      	pop	ds
 38345 00006C4B C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38346                                  	;test	word [es:di+67],8000h
 38347                                  	; 17/12/2022
 38348                                  	;test	byte [es:di+68],80h
 38349 00006C4F 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38350                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38351 00006C54 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38352 00006C56 E30B                    	JCXZ    Done
 38353 00006C58 E8B7A6                  	call	ECritDisk
 38354 00006C5B E8F7E9                  	call	FATREAD_CDS
 38355 00006C5E E8CCA6                  	call	LCritDisk
 38356                                  	;mov	al, 3
 38357 00006C61 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38358                                  Done:   
 38359 00006C63 C3                      	retn                         ; any errors in carry flag.
 38360                                  
 38361                                  ; 13/07/2018
 38362                                  
 38363                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38364                                  ;----------------------------------------------------------------------------
 38365                                  ;   Canonicalize - copy path removing . and .. entries.
 38366                                  ;
 38367                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38368                                  ;               ES:DI - point to buffer
 38369                                  ;               BX - backup limit (offset from ES) points to slash
 38370                                  ;               BP - end of buffer
 38371                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38372                                  ;                   syntax, etc.
 38373                                  ;               Carry Clear -
 38374                                  ;                   DS:DI - advanced to end of string
 38375                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38376                                  ;   Registers modified: AX CX DX (in addition to those above)
 38377                                  ;----------------------------------------------------------------------------
 38378                                  
 38379                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38380                                  
 38381                                  Canonicalize:
 38382                                  
 38383                                  ; We copy all leading path separators.
 38384                                  
 38385 00006C64 AC                      	LODSB                           ;   while (PathChr (*s))
 38386 00006C65 E8B4E3                  	call    PATHCHRCMP
 38387 00006C68 7507                    	JNZ	short CanonDec
 38388 00006C6A 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38389 00006C6C 7319                    	JAE	short CanonBad		;           goto error;
 38390 00006C6E AA                      	STOSB
 38391 00006C6F EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38392                                  CanonDec:
 38393 00006C71 4E                      	DEC     SI
 38394                                  
 38395                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38396                                  ; component (no leading path separators) and ES:DI being the destination
 38397                                  ; buffer.
 38398                                  
 38399                                  CanonLoop:
 38400                                  
 38401                                  ; If we are at the end of the source string, then we need to check to see that
 38402                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38403                                  ; Otherwise, do nothing
 38404                                  
 38405 00006C72 31C0                    	XOR     AX,AX
 38406 00006C74 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38407 00006C76 751A                    	JNZ	short DoComponent
 38408 00006C78 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38409 00006C7D 7505                    	JNZ	short DoTerminate
 38410 00006C7F B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38411 00006C81 AA                      	STOSB
 38412 00006C82 88E0                    	MOV     AL,AH
 38413                                  DoTerminate:
 38414 00006C84 AA                      	STOSB                           ;           *d++ = 0;
 38415 00006C85 F8                      	CLC                             ;           return (0);
 38416 00006C86 C3                      	retn
 38417                                  
 38418                                  CanonBad:
 38419 00006C87 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38420                                  	;mov	al,3
 38421 00006C8A B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38422 00006C8C 7402                    	JZ	short PathEnc		; path character encountered in string
 38423                                  	;mov	al,2
 38424 00006C8E B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38425                                  PathEnc:
 38426 00006C90 F9                      	STC
 38427                                  CanonBad_retn:
 38428 00006C91 C3                      	retn
 38429                                  
 38430                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38431                                  ; it to 8.3
 38432                                  
 38433                                  DoComponent:                            ;           }
 38434 00006C92 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38435 00006C95 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38436                                  
 38437                                  ; We special case the . and .. cases.  These will be backed up.
 38438                                  
 38439                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38440 00006C97 26833D2E                	CMP	WORD [ES:DI],002Eh
 38441 00006C9B 7408                    	JZ	short Skip1
 38442                                  	;CMP	WORD PTR ES:[DI],'..'
 38443 00006C9D 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38444 00006CA2 750A                    	JNZ	short CanonNormal
 38445 00006CA4 4F                      	DEC     DI                      ;           d--;
 38446                                  Skip1:  
 38447 00006CA5 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38448                                  	;mov	al,3
 38449 00006CA8 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38450 00006CAA 72E5                    	jc	short CanonBad_retn
 38451 00006CAC EB02                    	JMP     short CanonPath         ;           }
 38452                                  
 38453                                  ; We have a normal path. Advance destination pointer over it.
 38454                                  
 38455                                  CanonNormal:                            ;       else
 38456 00006CAE 01CF                    	ADD     DI,CX                   ;           d += ct;
 38457                                  
 38458                                  ; We have successfully copied a component. We are now pointing at a path
 38459                                  ; sep char or are pointing at a nul or are pointing at something else.
 38460                                  ; If we point at something else, then we have an error.
 38461                                  
 38462                                  CanonPath:
 38463 00006CB0 E81600                  	CALL    PathSep
 38464 00006CB3 75D2                    	JNZ	short CanonBad		; something else...
 38465                                  
 38466                                  ; Copy the first path char we see.
 38467                                  
 38468 00006CB5 AC                      	LODSB                           ; get the char
 38469 00006CB6 E863E3                  	call    PATHCHRCMP              ; is it path char?
 38470 00006CB9 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38471 00006CBB 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38472 00006CBD 73C8                    	JAE	short CanonBad		; yep, error.
 38473 00006CBF AA                      	STOSB                           ; copy the one byte
 38474                                  
 38475                                  ; Skip all remaining path chars
 38476                                  
 38477                                  CanonPathLoop:
 38478 00006CC0 AC                      	LODSB                           ; get next byte
 38479 00006CC1 E858E3                  	call    PATHCHRCMP              ; path char again?
 38480 00006CC4 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38481 00006CC6 4E                      	DEC     SI                      ; back up
 38482 00006CC7 EBA9                    	JMP	short  CanonLoop	; go copy component
 38483                                  
 38484                                  ;BREAK <PathSep - determine if char is a path separator>
 38485                                  ;----------------------------------------------------------------------------
 38486                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38487                                  ;   Inputs:     DS:SI - point to a char
 38488                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38489                                  ;               Zero set if AL is / \ or NUL
 38490                                  ;               Zero reset otherwise
 38491                                  ;   Registers modified: AL
 38492                                  ;----------------------------------------------------------------------------
 38493                                  
 38494                                  PathSep:
 38495 00006CC9 8A04                    	MOV     AL,[SI]                 ; get the character
 38496                                  PathSepGotCh:				; already have character
 38497 00006CCB 08C0                    	OR      AL,AL                   ; test for zero
 38498 00006CCD 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38499                                  	;call	PATHCHRCMP              ; check for path character
 38500                                  	;retn				; and return HIS determination
 38501                                  	; 18/12/2022
 38502 00006CCF E94AE3                  	jmp	PATHCHRCMP
 38503                                  
 38504                                  
 38505                                  ;BREAK <SkipBack - move backwards to a path separator>
 38506                                  ;----------------------------------------------------------------------------
 38507                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38509                                  ;               BX has current directory back up limit (point to a / \)
 38510                                  ;   Outputs:    ES:DI backed up to point to a path char
 38511                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38512                                  ;               Carry set if illegal backup
 38513                                  ;               Carry Clear if ok
 38514                                  ;   Registers modified: DI,AL
 38515                                  ;----------------------------------------------------------------------------
 38516                                  
 38517                                  SkipBack:
 38518 00006CD2 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38519 00006CD4 720B                    	JB	short SkipBad		;       if (d < dlim)
 38520 00006CD6 4F                      	DEC     DI                      ;           goto err;
 38521 00006CD7 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38522 00006CDA E83FE3                  	call    PATHCHRCMP              ;           break;
 38523 00006CDD 75F3                    	JNZ	short SkipBack		;       }
 38524 00006CDF F8                      	CLC                             ;   return (0);
 38525 00006CE0 C3                      	retn				;
 38526                                  SkipBad:                                ;err:
 38527                                  	;mov	al,3
 38528 00006CE1 B003                    	MOV     AL,error_path_not_found ; bad path error
 38529 00006CE3 F9                      	STC                             ;   return (-1);
 38530 00006CE4 C3                      	retn				;
 38531                                  
 38532                                  ;Break <CopyComponent - copy out a file path component>
 38533                                  ;----------------------------------------------------------------------------
 38534                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38535                                  ;
 38536                                  ;   Inputs:     DS:SI - source path
 38537                                  ;               ES:DI - destination
 38538                                  ;               ES:BP - end of buffer
 38539                                  ;   Outputs:    Carry Set - too long
 38540                                  ;               Carry Clear - DS:SI moved past component
 38541                                  ;                   CX has length of destination
 38542                                  ;   Registers modified: AX,CX,DX
 38543                                  ;----------------------------------------------------------------------------
 38544                                  
 38545                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38546                                  
 38547                                  CopyComponent:
 38548                                  
 38549                                  %define CopyBP	 [BP]		; word
 38550                                  %define CopyD	 [BP+2]		; dword
 38551                                  %define CopyDoff [BP+2]		; word
 38552                                  %define CopyS	 [BP+6]		; dword
 38553                                  %define CopySoff [BP+6]		; word
 38554                                  %define CopyTemp [BP+10]	; byte
 38555                                  
 38556 00006CE5 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38557 00006CE8 1E                      	push	ds
 38558 00006CE9 56                      	push	si
 38559 00006CEA 06                      	push	es
 38560 00006CEB 57                      	push	di
 38561 00006CEC 55                      	push	bp
 38562 00006CED 89E5                    	MOV     BP,SP
 38563 00006CEF B42E                    	MOV     AH,'.'
 38564 00006CF1 AC                      	LODSB
 38565 00006CF2 AA                      	STOSB
 38566 00006CF3 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38567 00006CF5 7518                    	JNZ	short NormalComp
 38568 00006CF7 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38569 00006CFA 740B                    	JZ	short NulTerm
 38570                                  TryTwoDot:
 38571 00006CFC AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38572 00006CFD AA                      	STOSB
 38573 00006CFE 38E0                    	CMP     AL,AH
 38574 00006D00 7557                    	JNZ	short CopyBad
 38575 00006D02 E8C4FF                  	CALL    PathSep
 38576 00006D05 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38577                                  NulTerm:                                ;               return -1;
 38578 00006D07 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38579 00006D09 AA                      	STOSB
 38580 00006D0A 897606                  	MOV     CopySoff,SI
 38581 00006D0D EB47                    	JMP     SHORT _GoodRet		;       }
 38582                                  NormalComp:                             ;   else {
 38583 00006D0F 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38584 00006D12 E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38585 00006D15 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38586 00006D18 743F                    	JZ	short CopyBad		;           return (-1);
 38587 00006D1A 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38588 00006D20 7510                    	JNZ	short DoPack
 38589 00006D22 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38590 00006D25 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38591 00006D2A 7F2D                    	JG	short CopyBad		;               return (-1);
 38592 00006D2C 7504                    	JNZ	short DoPack		;           else
 38593 00006D2E 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38594 00006D30 742F                    	JZ	short CopyBadPath	;               return (-1);
 38595                                  DoPack:                                 ;           }
 38596 00006D32 897606                  	MOV     CopySoff,SI ; [bp+6]
 38597 00006D35 16                      	push	ss
 38598 00006D36 1F                      	pop	ds
 38599 00006D37 BE[4B05]                	MOV     SI,NAME1
 38600 00006D3A 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38601 00006D3D 57                      	push	di
 38602 00006D3E E851B3                  	call	PackName                ;       PackName (Name1, temp);
 38603 00006D41 5F                      	pop	di
 38604 00006D42 E8ABA4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38605 00006D45 49                      	DEC     CX
 38606 00006D46 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38607                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38608                                  	;cmp	cx,[bp+0]
 38609                                  	; 15/12/2022
 38610                                  	;cmp	cx,[bp]
 38611 00006D49 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38612 00006D4C 730B                    	JAE	short CopyBad		;           return (-1);
 38613 00006D4E 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38614 00006D50 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38615 00006D53 E891A4                  	call	FStrCpy
 38616                                  _GoodRet:				;       }
 38617 00006D56 F8                      	CLC
 38618 00006D57 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38619                                  CopyBad:
 38620 00006D59 F9                      	STC
 38621 00006D5A E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38622                                  	;mov	al,2
 38623 00006D5D B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38624 00006D5F 7503                    	JNZ	short CopyEnd
 38625                                  CopyBadPath:
 38626 00006D61 F9                      	STC
 38627                                  	;mov	al,3
 38628 00006D62 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38629                                  CopyEnd:
 38630 00006D64 5D                      	pop	bp
 38631 00006D65 5F                      	pop	di
 38632 00006D66 07                      	pop	es
 38633 00006D67 5E                      	pop	si
 38634 00006D68 1F                      	pop	ds
 38635 00006D69 9F                      	LAHF
 38636 00006D6A 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38637 00006D6D E880A4                  	call	StrLen
 38638 00006D70 49                      	DEC     CX
 38639 00006D71 9E                      	SAHF
 38640 00006D72 C3                      	retn
 38641                                  
 38642                                  ; 14/05/2019 - Retro DOS v4.0
 38643                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38644                                  
 38645                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38646                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38647                                  
 38648                                  ;Break <Splice - pseudo mount by string substitution>
 38649                                  ;----------------------------------------------------------------------------
 38650                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38651                                  ;       ThisCDS to point to physical drive CDS.
 38652                                  ;   Inputs:     DS:SI point to string
 38653                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38654                                  ;   Outputs:    DS:SI points to thisCDS
 38655                                  ;               ES:DI points to DPB
 38656                                  ;               String at DS:SI may be reduced in length by removing prefix
 38657                                  ;               and substituting drive letter.
 38658                                  ;               CX = 0 If no splice done
 38659                                  ;               CX <> 0 otherwise
 38660                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38661                                  ;                   left alone
 38662                                  ;               ThisDPB points to proper DPB
 38663                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38664                                  ;----------------------------------------------------------------------------
 38665                                  
 38666                                  Splice:
 38667 00006D73 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38668 00006D79 7469                    	JZ	short AllDone
 38669 00006D7B 36FF36[A205]            	push	word [SS:THISCDS]
 38670 00006D80 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38671 00006D85 1E                      	push	ds
 38672 00006D86 56                      	push	si
 38673 00006D87 5F                      	pop	di
 38674 00006D88 07                      	pop	es
 38675 00006D89 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38676                                  SpliceScan:
 38677 00006D8B E8DFFC                  	call	GetCDSFromDrv
 38678 00006D8E 724A                    	JC	short SpliceDone
 38679 00006D90 FEC0                    	INC     AL
 38680                                  	; 17/12/2022
 38681                                  	;test	byte [si+68],20h
 38682 00006D92 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38683                                  	;;test	word [si+67],2000h
 38684                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38685 00006D96 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38686 00006D98 57                      	push	di
 38687 00006D99 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38688 00006D9C 7403                    	JZ	short SpliceFound	;
 38689                                  SpliceSkip:
 38690 00006D9E 5F                      	pop	di
 38691 00006D9F EBEA                    	JMP	short SpliceScan	;               continue;
 38692                                  SpliceFound:
 38693 00006DA1 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38694 00006DA5 7508                    	JNZ	short SpliceDo
 38695 00006DA7 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38696 00006DAD 75EF                    	JNZ	short SpliceSkip
 38697                                  SpliceDo:
 38698 00006DAF 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38699 00006DB1 06                      	push	es
 38700 00006DB2 1F                      	pop	ds
 38701 00006DB3 5F                      	pop	di
 38702 00006DB4 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38703 00006DB7 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38704 00006DBB 09C0                    	OR      AX,AX
 38705 00006DBD 7808                    	JS	short NoPoke
 38706 00006DBF 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38707 00006DC1 29F0                    	SUB     AX,SI
 38708 00006DC3 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38709                                  NoPoke:
 38710 00006DC7 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38711 00006DCA 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38712 00006DCC B05C                    	MOV     AL,"\"
 38713 00006DCE AA                      	STOSB
 38714                                  SpliceCopy:                             ;               strcpy (src, p);
 38715 00006DCF E815A4                  	call	FStrCpy
 38716 00006DD2 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38717 00006DD5 80C901                  	OR      CL,1                    ; signal splice done.
 38718 00006DD8 EB0C                    	JMP     SHORT DoSet             ;               return;
 38719                                  SpliceDone:                             ;               }
 38720 00006DDA 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38721 00006DDF 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38722                                  AllDone:
 38723 00006DE4 31C9                    	XOR     CX,CX
 38724                                  DoSet:
 38725 00006DE6 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38726                                  	;les	di,[si+69]
 38727 00006DEB C47C45                  	LES     DI,[SI+curdir.devptr]	
 38728 00006DEE 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38729 00006DF3 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38730                                  Splice_retn:
 38731 00006DF8 C3                      	retn
 38732                                  
 38733                                  ; 15/05/2019 - Retro DOS v4.0
 38734                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38735                                  
 38736                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38737                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38738                                  
 38739                                  ;Break <$NameTrans - partially process a name>
 38740                                  ;----------------------------------------------------------------------------
 38741                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38742                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38743                                  ;   to Transpath playing games with devices, we need to insure that the output
 38744                                  ;   has drive letter and : in it.
 38745                                  ;
 38746                                  ;   Inputs:     DS:SI - source string for translation
 38747                                  ;               ES:DI - pointer to buffer
 38748                                  ;   Outputs:
 38749                                  ;       Carry Clear
 38750                                  ;               Buffer at ES:DI is filled in with data
 38751                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38752                                  ;       Carry Set
 38753                                  ;               AX = error_path_not_found
 38754                                  ;   Registers modified: all
 38755                                  ;----------------------------------------------------------------------------
 38756                                  
 38757                                  _$NameTrans:
 38758 00006DF9 1E                      	push	ds
 38759 00006DFA 56                      	push	si
 38760 00006DFB 06                      	push	es
 38761 00006DFC 57                      	push	di
 38762 00006DFD 51                      	push	cx ; MSDOS 6.0
 38763                                  	
 38764                                  	; MSDOS 6.0	
 38765                                  ; M027 - Start
 38766                                  ;
 38767                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38768                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38769                                  ; device if the old call set the volume attribute bit. Note that devname in
 38770                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38771                                  ; and restore CX.
 38772                                  
 38773                                  	;mov	ch,16h
 38774 00006DFE B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38775 00006E00 E8B902                  	call	SetAttrib
 38776                                  
 38777                                  ; M027 - End
 38778                                  
 38779                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38780 00006E03 BF[BE03]                	MOV     DI,OPENBUF
 38781 00006E06 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38782 00006E09 59                      	pop	cx ; MSDOS 6.0
 38783 00006E0A 5F                      	pop     di
 38784 00006E0B 07                      	pop	es
 38785 00006E0C 5E                      	pop     si
 38786 00006E0D 1F                      	pop     ds
 38787 00006E0E 7303                    	JNC	short TransOK
 38788 00006E10 E93198                  	jmp	SYS_RET_ERR
 38789                                  TransOK:
 38790 00006E13 BE[BE03]                	MOV     SI,OPENBUF
 38791 00006E16 16                      	push	ss
 38792 00006E17 1F                      	pop	ds
 38793                                  ;GotText:
 38794 00006E18 E8CCA3                  	call	FStrCpy
 38795 00006E1B E91D98                  	jmp	SYS_RET_OK
 38796                                  
 38797                                  ;Break   <DriveFromText - return drive number from a text string>
 38798                                  ;----------------------------------------------------------------------------
 38799                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38800                                  ;   pointer.
 38801                                  ;
 38802                                  ;   Inputs:     DS:SI point to a text string
 38803                                  ;   Outputs:    AL has drive number
 38804                                  ;               DS:SI advanced
 38805                                  ;   Registers modified: AX,SI.
 38806                                  ;----------------------------------------------------------------------------
 38807                                  
 38808                                  DriveFromText:
 38809 00006E1E 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38810                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38811                                  	; 23/09/2023
 38812 00006E20 3804                    	cmp	[si],al ; 0
 38813 00006E22 74D4                    	jz	short Splice_retn
 38814 00006E24 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38815 00006E28 75CE                    	jnz	short Splice_retn
 38816 00006E2A AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38817 00006E2B 0C20                    	OR      AL,20h
 38818                                  	;sub	al,60h
 38819 00006E2D 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38820 00006E2F 75C7                    	jnz	short Splice_retn
 38821 00006E31 B0FF                    	MOV	AL,-1                   ; nuke AL...
 38822                                  	; 23/09/2023
 38823                                  	;dec	al ; -1
 38824 00006E33 C3                      	retn				;           }
 38825                                  
 38826                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38827                                  ;----------------------------------------------------------------------------
 38828                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38829                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38830                                  ;
 38831                                  ;   Inputs:     AL has 0-based drive number
 38832                                  ;   Outputs:    ES:DI advanced
 38833                                  ;   Registers modified: AX
 38834                                  ;----------------------------------------------------------------------------
 38835                                  
 38836                                  TextFromDrive:
 38837 00006E34 FEC0                    	INC     AL
 38838                                  TextFromDrive1:
 38839                                  	;add	al,40h
 38840 00006E36 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38841 00006E38 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38842 00006E3A AB                      	STOSW
 38843                                  PathPref_retn:
 38844 00006E3B C3                      	retn
 38845                                  
 38846                                  ;Break   <PathPref - see if one path is a prefix of another>
 38847                                  ;----------------------------------------------------------------------------
 38848                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38849                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38850                                  ;   prefix: A:\ and A:\FOO
 38851                                  ;
 38852                                  ;   Inputs:     DS:SI potential prefix
 38853                                  ;               ES:DI string
 38854                                  ;   Outputs:    Zero set => prefix found
 38855                                  ;                   DI/SI advanced past matching part
 38856                                  ;               Zero reset => no prefix, DS/SI garbage
 38857                                  ;   Registers modified: CX
 38858                                  ;----------------------------------------------------------------------------
 38859                                  
 38860                                  PathPref:
 38861 00006E3C E8BFA3                  	call	DStrLen                 ; get length
 38862 00006E3F 49                      	DEC     CX                      ; do not include nul byte
 38863 00006E40 F3A6                    	REPZ    CMPSB                   ; compare
 38864 00006E42 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38865 00006E44 50                      	push	ax			; save char register
 38866 00006E45 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38867 00006E48 E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38868 00006E4B 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38869                                  NotSep:                                 ; 2/13/KK
 38870 00006E4D 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38871 00006E50 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38872                                  Prefix:
 38873 00006E53 58                      	pop	ax			; get back original
 38874 00006E54 C3                      	retn
 38875                                  
 38876                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38877                                  ;----------------------------------------------------------------------------
 38878                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38879                                  ;     a path separator.
 38880                                  ;
 38881                                  ;     Input:    DS:SI target string (null terminated)
 38882                                  ;     Output:   Zero set => path separator encountered in string
 38883                                  ;               Zero clear => null encountered
 38884                                  ;     Registers modified: SI
 38885                                  ;----------------------------------------------------------------------------
 38886                                  
 38887                                  ScanPathChar:
 38888 00006E55 AC                      	LODSB                           ; fetch a character
 38889 00006E56 E872FE                  	call    PathSepGotCh
 38890 00006E59 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38891                                  	;call	PATHCHRCMP              ; path separator?
 38892                                  	;retn
 38893                                  	; 18/12/2022
 38894 00006E5B E9BEE1                  	jmp	PATHCHRCMP
 38895                                  
 38896                                  ;============================================================================
 38897                                  ; FILE.ASM, MSDOS 6.0, 1991
 38898                                  ;============================================================================
 38899                                  ; 14/07/2018 - Retro DOS v3.0
 38900                                  
 38901                                  ; 13/05/2019 - Retro DOS v4.0
 38902                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38903                                  
 38904                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38905                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38906                                  
 38907                                  ; MSDOS 2.11
 38908                                  ;BREAK <$Open - open a file handle>
 38909                                  ;----------------------------------------------------------------------------
 38910                                  ;   Assembler usage:
 38911                                  ;           LDS     DX, Name
 38912                                  ;           MOV     AH, Open
 38913                                  ;           MOV     AL, access
 38914                                  ;           INT     int_command
 38915                                  ;
 38916                                  ;       ACCESS          Function
 38917                                  ;       ------          --------
 38918                                  ;       open_for_read   file is opened for reading
 38919                                  ;       open_for_write  file is opened for writing
 38920                                  ;       open_for_both   file is opened for both reading and writing.
 38921                                  ;
 38922                                  ;   Error returns:
 38923                                  ;           AX = error_invalid_access
 38924                                  ;              = error_file_not_found
 38925                                  ;              = error_access_denied
 38926                                  ;              = error_too_many_open_files
 38927                                  ;----------------------------------------------------------------------------
 38928                                  
 38929                                  ; MSDOS 6.0
 38930                                  ;	BREAK <$Open - open a file from a path string>
 38931                                  ;----------------------------------------------------------------------------
 38932                                  ;
 38933                                  ;**	$OPen - Open a File
 38934                                  ;
 38935                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38936                                  ;	file and and returns a handle
 38937                                  ;
 38938                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38939                                  ;		(AL) = open mode
 38940                                  ;	EXIT	'C' clear if OK
 38941                                  ;		  (ax) = file handle
 38942                                  ;		'C' set if error
 38943                                  ;		  (ax) = error code
 38944                                  ;	USES	all
 38945                                  ;
 38946                                  ;----------------------------------------------------------------------------
 38947                                  
 38948                                  ; 13/05/2019 - Retro DOS v4.0
 38949                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38950                                  
 38951                                  _$OPEN:       
 38952 00006E5E 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38953                                  _$Open2:
 38954                                  	;mov	ch,16h
 38955 00006E60 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38956 00006E62 E85702                  	call	SetAttrib
 38957 00006E65 B9[142B]                	mov	cx,DOS_OPEN
 38958                                  
 38959                                  	;xor	ah,ah  ; MSDOS 3.3
 38960                                  
 38961 00006E68 50                      	push	ax
 38962                                  
 38963                                  ;*	General file open/create code. The $CREATE call and the various
 38964                                  ;	$OPEN calls all come here.
 38965                                  ;
 38966                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38967                                  ;	path names, etc., and then dispatch to our individual handlers.
 38968                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38969                                  ;
 38970                                  ;	(TOS) = create mode
 38971                                  ;	(CX) = address of routine to call to do actual function
 38972                                  ;	(DS:DX) = ASCIZ name
 38973                                  ;	SAttrib = Attribute mask
 38974                                  
 38975                                  ;	Get a free SFT and mark it "being allocated"
 38976                                  
 38977                                  AccessFile:
 38978 00006E69 E8A6A4                  	call	ECritSFT
 38979 00006E6C E8D8F7                  	call	SFNFree			; get a free sfn
 38980 00006E6F E8BBA4                  	call	LCritSFT
 38981 00006E72 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38982 00006E74 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38983 00006E79 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38984 00006E7E 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38985                                  
 38986                                  ;	Find a free area in the user's JFN table.
 38987                                  
 38988 00006E83 E8AEF7                  	call	JFNFree			; get a free jfn
 38989 00006E86 7303                    	jnc	short SaveJFN
 38990                                  OpenFailJ:
 38991 00006E88 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38992                                  
 38993                                  SaveJFN:
 38994 00006E8B 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38995 00006E90 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38996 00006E95 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38997                                  
 38998                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38999                                  ;	reusing the same JFN.
 39000                                  
 39001 00006E9A 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39002 00006E9F 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39003 00006EA2 89D6                    	MOV	SI,DX			; get name in appropriate place
 39004 00006EA4 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39005 00006EA7 51                      	push	cx			; save routine to call
 39006 00006EA8 E844FC                  	call	TransPath		; convert the path
 39007 00006EAB 5B                      	pop	bx			; (bx) = routine to call
 39008                                  
 39009 00006EAC 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39010 00006EB1 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39011 00006EB3 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39012 00006EB9 7404                    	JZ	short SetSearch
 39013                                  	;mov	al,2
 39014 00006EBB B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39015                                  OpenCleanJ:
 39016 00006EBD EB50                    	JMP	short OpenClean
 39017                                  
 39018                                  SetSearch:
 39019 00006EBF 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39020                                  
 39021                                  ;	We need to get the new inheritance bits.
 39022                                  
 39023 00006EC0 31C9                    	xor	cx,cx
 39024                                  	; MSDOS 6.0
 39025                                  	;mov	[si+2],cx ; 0
 39026 00006EC2 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39027                                  	;mov    [si+51],cx ; 0
 39028 00006EC5 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39029                                  	;
 39030 00006EC8 81FB[142B]              	CMP	BX,DOS_OPEN
 39031 00006ECC 7509                    	JNZ	short _DoOper
 39032                                  	;test   al,80h
 39033 00006ECE A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39034 00006ED0 7405                    	JZ	short _DoOper ; 10/08/2018
 39035 00006ED2 247F                    	AND	AL,7Fh			; mask off inherit bit
 39036                                  	;mov	cx,1000h
 39037 00006ED4 B90010                  	MOV	CX,sf_no_inherit
 39038                                  _DoOper:
 39039                                  	;; MSDOS 3.3
 39040                                  	;;mov	word [si+2], 0
 39041                                  	;;mov	word [si+33h], 0
 39042                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39043                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39044                                  
 39045                                  	; MSDOS 6.0
 39046                                  ;**	Check if this is an extended open. If so you must set the
 39047                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39048                                  ;	Set_EXT_mode in creat.asm
 39049                                  
 39050                                  	; MSDOS 6.0
 39051                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39052 00006ED7 57                      	push	di
 39053 00006ED8 06                      	push	es
 39054 00006ED9 1E                      	push	ds
 39055 00006EDA 07                      	pop	es
 39056 00006EDB 56                      	push	si
 39057 00006EDC 5F                      	pop	di			; (es:di) = SFT address
 39058 00006EDD E820BC                  	call	Set_EXT_mode
 39059                                  	;RESTORE <es, di>
 39060 00006EE0 07                      	pop	es
 39061 00006EE1 5F                      	pop	di
 39062                                  
 39063                                  	;Context DS
 39064 00006EE2 16                      	push	ss
 39065 00006EE3 1F                      	pop	ds	
 39066                                  
 39067 00006EE4 51                      	push	cx
 39068 00006EE5 FFD3                    	CALL	BX			; blam!
 39069 00006EE7 59                      	pop	cx
 39070 00006EE8 C536[9E05]              	LDS	SI,[THISSFT]
 39071 00006EEC 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39072                                  	;jc	short OpenE ; MSDOS 3.3
 39073                                  
 39074                                  ;	The SFT was successfully opened. Remove busy mark.
 39075                                  
 39076                                  OpenOK:
 39077                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39078 00006EEE C7040100                	mov	word [SI],1
 39079                                  	;or	[SI+5],cx
 39080 00006EF2 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39081                                  
 39082                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39083                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39084                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39085                                  ;
 39086                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39087                                  ; sharer.
 39088                                  
 39089 00006EF5 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39090 00006EF9 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39091                                  
 39092 00006EFE 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39093                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39094                                  OpenOkj:
 39095 00006F05 E93397                  	jmp	SYS_RET_OK		; bye with no errors
 39096                                  
 39097                                  	; MSDOS 6.0
 39098                                  ;Extended Open hooks check
 39099                                  OpenE2:					;AN000;;EO.
 39100 00006F08 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39101 00006F0B 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39102 00006F0D EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39103                                  
 39104                                  ;	Extended Open hooks check
 39105                                  ;
 39106                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39107                                  
 39108                                  OpenClean:
 39109 00006F0F 5B                      	pop	bx			; clean off stack
 39110                                  OpenE:
 39111                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39112 00006F10 C7040000                	mov	word [SI],0
 39113 00006F14 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39114 00006F19 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39115 00006F1C EB02                    	JMP	SHORT OpenCritLeave
 39116                                  
 39117                                  OpenFail:
 39118 00006F1E FB                      	STI
 39119 00006F1F 59                      	pop	cx			; Clean stack
 39120                                  OpenCritLeave:
 39121 00006F20 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39122                                  
 39123                                  	; MSDOS 6.0
 39124                                  ; File Tagging DOS 4.00
 39125 00006F27 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39126                                  					;AN000;;FT. code page mismatch
 39127 00006F2D 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39128 00006F2F E91A97                  	jmp	From_GetSet		;AN000;;FT. yes
 39129                                  NORERR: 				;AN000;
 39130                                  ; File Tagging DOS 4.00
 39131                                  
 39132 00006F32 E90F97                  	jmp	SYS_RET_ERR		; no free, return error
 39133                                  
 39134                                  ; MSDOS 2.11
 39135                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39136                                  ;----------------------------------------------------------------------------
 39137                                  ;   Assembler usage:
 39138                                  ;           LDS     DX, name
 39139                                  ;           MOV     AH, Creat
 39140                                  ;           MOV     CX, access
 39141                                  ;           INT     21h
 39142                                  ;       ; AX now has the handle
 39143                                  ;
 39144                                  ;   Error returns:
 39145                                  ;           AX = error_access_denied
 39146                                  ;              = error_path_not_found
 39147                                  ;              = error_too_many_open_files
 39148                                  ;----------------------------------------------------------------------------
 39149                                  
 39150                                  ; MSDOS 6.0
 39151                                  ;	BREAK <$Creat - create a brand-new file>
 39152                                  ;----------------------------------------------------------------------------
 39153                                  ;
 39154                                  ;**	$Creat - Create a File
 39155                                  ;
 39156                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39157                                  ;	initial attributes contained in CX
 39158                                  ;
 39159                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39160                                  ;		(CX) = initial attributes
 39161                                  ;	EXIT	'C' set if error
 39162                                  ;		  (ax) = error code
 39163                                  ;		'C' clear if OK
 39164                                  ;		  (ax) = file handle
 39165                                  ;	USES	all
 39166                                  ;
 39167                                  ;----------------------------------------------------------------------------
 39168                                  
 39169                                  _$CREAT:
 39170 00006F35 51                      	push	cx			; Save attributes on stack
 39171 00006F36 B9[EE29]                	mov	CX,DOS_CREATE		; routine to call
 39172                                  AccessSet:
 39173                                  	;mov	byte [ss:SATTRIB],6
 39174 00006F39 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39175                                  	; 10/08/2018
 39176 00006F3F E927FF                  	JMP	AccessFile		; use good ol' open
 39177                                  
 39178                                  ; MSDOS 6.0 (MSDOS 3.3)
 39179                                  ;	BREAK <$CHMOD - change file attributes>
 39180                                  ;----------------------------------------------------------------------------
 39181                                  ;
 39182                                  ;**	$CHMOD - Change File Attributes
 39183                                  ;
 39184                                  ;   Assembler usage:
 39185                                  ;	    LDS     DX, name
 39186                                  ;	    MOV     CX, attributes
 39187                                  ;	    MOV     AL,func (0=get, 1=set)
 39188                                  ;	    INT     21h
 39189                                  ;   Error returns:
 39190                                  ;	    AX = error_path_not_found
 39191                                  ;	    AX = error_access_denied
 39192                                  ;
 39193                                  ;----------------------------------------------------------------------------
 39194                                  
 39195                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39196                                  _$CHMOD:
 39197                                  	; 05/08/2018 - Retro DOS v3.0
 39198                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39199 00006F42 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39200 00006F45 50                      	push	ax
 39201 00006F46 51                      	push	cx			; save function and attributes
 39202 00006F47 89D6                    	MOV	SI,DX			; get things in appropriate places
 39203 00006F49 E8A7FB                  	call	TransPathSet		; get correct path
 39204 00006F4C 59                      	pop	cx
 39205 00006F4D 58                      	pop	ax			; and get function and attrs back
 39206 00006F4E 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39207 00006F50 16                      	push	ss			; set up for later possible calls
 39208 00006F51 1F                      	pop	ds
 39209 00006F52 803E[7A05]FF            	CMP	byte [CMETA],-1
 39210 00006F57 754E                    	JNZ	short ChModErr
 39211                                  	;mov	byte [SATTRIB],16h
 39212 00006F59 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39213 00006F5E 2C01                    	SUB	AL,1			; fast way to discriminate
 39214 00006F60 720B                    	JB	short ChModGet		; 0 -> go get value
 39215 00006F62 7417                    	JZ	short ChModSet		; 1 -> go set value
 39216                                  	;mov	byte [EXTERR_LOCUS],1
 39217 00006F64 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39218                                  	;mov	al,1
 39219 00006F69 B001                    	mov	al,error_invalid_function ; bad value
 39220                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39221                                  chmod_errj:	
 39222                                  	;;jmp	SYS_RET_ERR
 39223                                  	;jmp	short ChModE	
 39224 00006F6B EBC5                    	jmp	short NORERR	; 06/12/2022
 39225                                  ChModGet:
 39226 00006F6D E869B9                  	call	GET_FILE_INFO		; suck out the ol' info
 39227 00006F70 7237                    	JC	short ChModE		; error codes are already set for ret
 39228 00006F72 E81095                  	call	Get_User_Stack		; point to user saved vaiables
 39229                                  	;mov	[SI+4],ax
 39230 00006F75 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39231                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39232                                  OpenOkj2:
 39233                                  	; 17/12/2022
 39234                                  	;;jmp	SYS_RET_OK		; say sayonara
 39235                                  	;jmp	short OpenOkj
 39236                                  	; 25/06/2019
 39237 00006F78 E9C396                  	jmp	SYS_RET_OK_clc
 39238                                  
 39239                                  ChModSet:
 39240 00006F7B 89C8                    	MOV	AX,CX			; get attrs in position
 39241 00006F7D E8B7B9                  	call	SET_FILE_ATTRIBUTE	; go set
 39242 00006F80 7227                    	JC	short ChModE		; errors are set
 39243                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39244                                  	;jmp	SYS_RET_OK
 39245                                  OpenOkj3:
 39246                                  	;jmp	short OpenOkj2
 39247                                  	; 17/12/2022
 39248 00006F82 E9B696                  	jmp	SYS_RET_OK
 39249                                  
 39250                                  ; 17/12/2022
 39251                                  %if 0
 39252                                  ChModErr:
 39253                                  NotFound:	; 17/12/2022
 39254                                  	;mov	al,3
 39255                                  	mov	al,error_path_not_found
 39256                                  ChModE:
 39257                                  UnlinkE:	; 17/12/2022
 39258                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39259                                  	;;jmp	SYS_RET_ERR
 39260                                  	;jmp	short chmod_errj
 39261                                  	; 17/12/2022
 39262                                  	jmp	short NORERR
 39263                                  %endif
 39264                                  
 39265                                  ; 22/05/2019 - Retro DOS v4.0
 39266                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39267                                  
 39268                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39269                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39270                                  
 39271                                  ;	BREAK <$UNLINK - delete a file entry>
 39272                                  ;----------------------------------------------------------------------------
 39273                                  ;
 39274                                  ;**	$UNLINK - Delete a File
 39275                                  ;
 39276                                  ;
 39277                                  ;	Assembler usage:
 39278                                  ;	    LDS     DX, name
 39279                                  ;	    IF VIA SERVER DOS CALL
 39280                                  ;	     MOV     CX,SEARCH_ATTRIB
 39281                                  ;	    MOV     AH, Unlink
 39282                                  ;	    INT     21h
 39283                                  ;
 39284                                  ;	ENTRY	(ds:dx) = path name
 39285                                  ;		(cx) = search_attribute, if via server_dos
 39286                                  ;	EXIT	'C' clear if no error
 39287                                  ;		'C' set if error
 39288                                  ;		  (ax) = error code
 39289                                  ;			= error_file_not_found
 39290                                  ;			= error_access_denied
 39291                                  ;
 39292                                  ;----------------------------------------------------------------------------
 39293                                  
 39294                                  _$UNLINK:
 39295 00006F85 51                      	push	cx			; Save possible CX input parm
 39296 00006F86 89D6                    	MOV	SI,DX			; Point at input string
 39297 00006F88 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39298 00006F8B E865FB                  	call	TransPathSet		; go get normalized path
 39299 00006F8E 59                      	pop	cx
 39300 00006F8F 7216                    	JC	short ChModErr		; badly formed path
 39301 00006F91 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39302 00006F97 750E                    	JNZ	short NotFound
 39303 00006F99 16                      	push	ss
 39304 00006F9A 1F                      	pop	ds
 39305                                  	;mov	ch,6
 39306 00006F9B B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39307 00006F9D E81C01                  	call	SetAttrib
 39308 00006FA0 E838B5                  	call	DOS_DELETE		; remove that file
 39309                                  	;JC	short UnlinkE 		; error is there
 39310                                  	; 17/12/2022
 39311 00006FA3 728D                    	jc	short NORERR
 39312                                  
 39313                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39314                                  UnlinkOk:
 39315                                  	;jmp	SYS_RET_OK		; okey doksy
 39316 00006FA5 EBDB                    	jmp	short OpenOkj3
 39317                                  
 39318                                  	; 17/12/2022
 39319                                  ChModErr:	; 17/12/2022
 39320                                  NotFound:
 39321                                  	;mov	al,3
 39322 00006FA7 B003                    	MOV	AL,error_path_not_found
 39323                                  ChModE:		; 17/12/2022
 39324                                  UnlinkE:
 39325                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39326                                  	;;jmp	SYS_RET_ERR		; bye
 39327                                  	;jmp	short ChModE
 39328                                  	; 17/12/2022
 39329 00006FA9 EB87                    	jmp	short NORERR
 39330                                  
 39331                                  ;BREAK <$RENAME - move directory entries around>
 39332                                  ;----------------------------------------------------------------------------
 39333                                  ;
 39334                                  ;   Assembler usage:
 39335                                  ;	    LDS     DX, source
 39336                                  ;	    LES     DI, dest
 39337                                  ;	    IF VIA SERVER DOS CALL
 39338                                  ;	      MOV   CX,SEARCH_ATTRIB
 39339                                  ;	    MOV     AH, Rename
 39340                                  ;	    INT     21h
 39341                                  ;
 39342                                  ;   Error returns:
 39343                                  ;	    AX = error_file_not_found
 39344                                  ;	       = error_not_same_device
 39345                                  ;	       = error_access_denied
 39346                                  ;
 39347                                  ;----------------------------------------------------------------------------
 39348                                  
 39349                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39350                                  _$RENAME:
 39351                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39352 00006FAB 51                      	push	cx
 39353 00006FAC 1E                      	push	ds
 39354 00006FAD 52                      	push	dx			; save source and possible CX arg
 39355 00006FAE 06                      	PUSH	ES
 39356 00006FAF 1F                      	POP	DS			; move dest to source
 39357 00006FB0 89FE                    	MOV	SI,DI			; save for offsets
 39358 00006FB2 BF[3E04]                	MOV	DI,RENBUF
 39359 00006FB5 E83BFB                  	call	TransPathSet		; munge the paths
 39360 00006FB8 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39361 00006FBD 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39362 00006FC2 5E                      	pop	si
 39363 00006FC3 1F                      	pop	ds
 39364 00006FC4 59                      	pop	cx			; get back source and possible CX arg
 39365                                  epjc2:	
 39366 00006FC5 72E0                    	JC	short ChModErr		; get old error
 39367 00006FC7 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39368 00006FCD 75D8                    	JNZ	short NotFound
 39369 00006FCF 51                      	push	cx			; Save possible CX arg
 39370 00006FD0 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39371 00006FD3 E81DFB                  	call	TransPathSet		; wham
 39372 00006FD6 59                      	pop	cx
 39373 00006FD7 72EC                    	JC	short epjc2
 39374 00006FD9 16                      	push	ss
 39375 00006FDA 1F                      	pop	ds
 39376 00006FDB 803E[7A05]FF            	CMP	byte [CMETA],-1
 39377 00006FE0 72C5                    	JB	short NotFound
 39378                                  
 39379                                  	; MSDOS 6.0
 39380 00006FE2 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39381 00006FE6 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39382 00006FEA BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39383 00006FED 16                      	PUSH	SS			   ;AN000;;MS.
 39384 00006FEE 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39385 00006FEF 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39386                                  rnloop: 				   ;AN000;
 39387 00006FF1 E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39388 00006FF4 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39389 00006FF6 E8BDA1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39390 00006FF9 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39391 00006FFB FEC0                    	INC	AL			   ;AN000;;MS.	next
 39392 00006FFD EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39393                                  rnerr:					   ;AN000;
 39394 00006FFF 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39395                                  	;error	error_current_directory    ;AN000;;MS.
 39396 00007002 B010                    	mov	al,error_current_directory 
 39397                                  	;jmp	SYS_RET_ERR
 39398                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39399 00007004 EBA3                    	jmp	short UnlinkE
 39400                                  dorn:					   ;AN000;
 39401 00007006 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39402 0000700B 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39403                                  
 39404 00007010 16                      	push	ss
 39405 00007011 1F                      	pop	ds
 39406                                  
 39407                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39408                                  	;mov	ch,16h
 39409 00007012 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39410                                  					; rename appropriate files
 39411 00007014 E8A500                  	call	SetAttrib
 39412 00007017 E895B6                  	call	DOS_RENAME		; do the deed
 39413 0000701A 728D                    	JC	short UnlinkE 		; errors
 39414                                  
 39415                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39416                                  	;jmp	SYS_RET_OK
 39417 0000701C EB87                    	jmp	short UnlinkOk
 39418                                  
 39419                                  
 39420                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39421                                  
 39422                                  ; 14/07/2018 - Retro DOS v3.0
 39423                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39424                                  
 39425                                  ;Break <$CreateNewFile - Create a new directory entry>
 39426                                  ;----------------------------------------------------------------------------
 39427                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39428                                  ;	was no previous directory entry, and fail if a directory entry with
 39429                                  ;	the same name existed previously.
 39430                                  ;
 39431                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39432                                  ;		CX contains default file attributes
 39433                                  ;   Outputs:	Carry Clear:
 39434                                  ;		    AX has file handle opened for read/write
 39435                                  ;		Carry Set:
 39436                                  ;		    AX has error code
 39437                                  ;   Registers modified: All
 39438                                  ;----------------------------------------------------------------------------
 39439                                  
 39440                                  _$CreateNewFile:
 39441 0000701E 51                      	push	cx			; Save attributes on stack
 39442 0000701F B9[B72A]                	MOV	CX,DOS_Create_New	; routine to call
 39443 00007022 E914FF                  	JMP	AccessSet		; use good ol' open
 39444                                  
 39445                                  ;**	BinToAscii - convert a number to a string.
 39446                                  ;----------------------------------------------------------------------------
 39447                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39448                                  ;	This routine is used to generate temp file names so we don't spend
 39449                                  ;	the time and code needed for a true hex number, we just use
 39450                                  ;	A thorugh O.
 39451                                  ;
 39452                                  ;	ENTRY	(ax) = value
 39453                                  ;		(es:di) = destination
 39454                                  ;	EXIT	(es:di) updated by 4
 39455                                  ;	USES	cx, di, flags
 39456                                  ;----------------------------------------------------------------------------
 39457                                  
 39458                                  ; MSDOS 3.3
 39459                                  ;BinToAscii:
 39460                                  ;	mov     cx,4
 39461                                  ;bta5:
 39462                                  ;	push    cx
 39463                                  ;	mov     cl,4
 39464                                  ;	rol     ax,cl
 39465                                  ;	push    ax
 39466                                  ;	and     al,0Fh
 39467                                  ;	add     al,'0'
 39468                                  ;	cmp     al,'9'
 39469                                  ;	jbe     short bta6
 39470                                  ;	add     al,7
 39471                                  ;bta6: 
 39472                                  ;	stosb
 39473                                  ;	pop     ax
 39474                                  ;	pop     cx
 39475                                  ;	loop    bta5
 39476                                  ;	retn
 39477                                  
 39478                                  ; MSDOS 6.0
 39479                                  BinToAscii:
 39480 00007025 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39481                                  bta5:	
 39482 00007028 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39483 0000702A 50                      	push	ax			; preserve remainder of digits
 39484 0000702B 240F                    	AND	AL,0Fh			; grab low nibble
 39485 0000702D 0441                    	ADD	AL,'A'			; turn into ascii
 39486 0000702F AA                      	STOSB				; drop in the character
 39487 00007030 58                      	pop	ax			; (ax) = shifted number
 39488 00007031 FECD                    	dec	ch
 39489 00007033 75F3                    	jnz	short bta5		; process 4 digits
 39490 00007035 C3                      	retn
 39491                                  
 39492                                  ;Break	<$CreateTempFile - create a unique name>
 39493                                  ;----------------------------------------------------------------------------
 39494                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39495                                  ;	Method used is to get the current time, convert to a name and attempt
 39496                                  ;	a create new. Repeat until create new succeeds.
 39497                                  ;
 39498                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39499                                  ;		CX  contains default attributes
 39500                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39501                                  ;		AX has handle
 39502                                  ;   Registers modified: all
 39503                                  ;----------------------------------------------------------------------------
 39504                                  
 39505                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39506                                  
 39507                                  _$CreateTempFile:
 39508                                  	;Enter
 39509 00007036 55                      	push	bp
 39510 00007037 89E5                    	mov	bp,sp
 39511                                  
 39512                                  	;LocalVar  EndPtr,DWORD
 39513                                  	;LocalVar  FilPtr,DWORD
 39514                                  	;LocalVar  Attr,WORD
 39515                                  
 39516 00007039 83EC0A                  	sub	sp,10
 39517                                  
 39518                                  	;test	cx,0FFD8h
 39519 0000703C F7C1D8FF                	test	CX,~attr_changeable
 39520 00007040 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39521                                  
 39522                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39523                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39524                                  ; below. The code loops on error_access_denied, but if one of the non
 39525                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39526                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39527                                  ; need to detect these cases before getting to the loop.
 39528                                  
 39529                                  	;mov	ax, 5
 39530 00007042 B80500                  	MOV	AX,error_access_denied
 39531 00007045 EB69                    	JMP	SHORT SETTMPERR
 39532                                  
 39533                                  OKatts:
 39534                                  	;MOV	attr,CX 		; save attribute
 39535 00007047 894EF6                  	mov     [bp-10],cx
 39536                                  	;MOV	FilPtrL,DX		; pointer to file
 39537 0000704A 8956F8                  	mov	[bp-8],dx
 39538                                  	;MOV	FilPtrH,DS
 39539 0000704D 8C5EFA                  	mov	[bp-6],ds
 39540                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39541 00007050 8C5EFE                  	mov	[bp-2],ds
 39542 00007053 1E                      	PUSH	DS
 39543 00007054 07                      	POP	ES			; destination for nul search
 39544 00007055 89D7                    	MOV	DI,DX
 39545 00007057 89F9                    	MOV	CX,DI
 39546 00007059 F7D9                    	NEG	CX			; number of bytes remaining in segment
 39547                                  	; MSDOS 6.0
 39548 0000705B 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39549 0000705D 7501                    	JNZ	short okok		;AN000;MS. no
 39550                                  	;MOV	CX,-1			;AN000;MS.
 39551                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39552                                  	; 17/12/2022
 39553 0000705F 49                      	dec	cx  ; mov cx,-1
 39554                                  	;mov	cx,-1 ; 0FFFh
 39555                                  okok:					;AN000;
 39556 00007060 31C0                    	XOR	AX,AX			;AN000;
 39557 00007062 F2AE                    	REPNZ	SCASB			;AN000;
 39558                                  					;AN000;
 39559 00007064 4F                      	DEC	DI			; point back to the null
 39560 00007065 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39561 00007069 E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39562 0000706C 7403                    	JZ	short SETENDPTR		; Yes
 39563                                  STOREPTH:
 39564 0000706E B05C                    	MOV	AL,'\'
 39565 00007070 AA                      	STOSB				; Add a path separator (and INC DI)
 39566                                  SETENDPTR:
 39567                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39568 00007071 8856FC                  	mov	[bp-4],dl
 39569                                  CreateLoop:
 39570 00007074 16                      	push	ss			; let ReadTime see variables
 39571 00007075 1F                      	pop	ds
 39572 00007076 55                      	push	bp
 39573 00007077 E8A59A                  	call	READTIME		; go get time
 39574 0000707A 5D                      	pop	bp
 39575                                  ;
 39576                                  ; Time is in CX:DX. Go drop it into the string.
 39577                                  ;
 39578                                  	;les	di,EndPtr		; point to the string
 39579 0000707B C47EFC                  	les	di,[BP-4]
 39580 0000707E 89C8                    	mov	ax,cx
 39581 00007080 E8A2FF                  	call	BinToAscii		; store upper word
 39582 00007083 89D0                    	mov	ax,dx
 39583 00007085 E89DFF                  	call	BinToAscii		; store lower word
 39584 00007088 30C0                    	xor	al,al
 39585 0000708A AA                      	STOSB				; nul terminate
 39586                                  	;LDS	DX,FilPtr		; get name
 39587 0000708B C556F8                  	lds	dx,[bp-8]
 39588                                  	;MOV	CX,Attr 		; get attr
 39589 0000708E 8B4EF6                  	mov	cx,[bp-10]
 39590 00007091 55                      	push	bp
 39591 00007092 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39592 00007095 5D                      	pop	bp
 39593 00007096 7319                    	JNC	short CreateDone	; failed, go try again
 39594                                  
 39595                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39596                                  ; error and figure out what to do.
 39597                                  
 39598                                  	;; MSDOS 3.3			; M049 - start
 39599                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39600                                  ;;	cmp	al,error_file_exists
 39601                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39602                                  ;;	cmp	al,error_access_denied
 39603                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39604                                  
 39605                                  	; MSDOS 6.0
 39606                                  	;cmp	al,50h
 39607 00007098 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39608 0000709A 74D8                    	JZ	short CreateLoop	; Y: try again
 39609                                  	;cmp	al,5
 39610 0000709C 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39611 0000709E 7510                    	JNZ	short SETTMPERR		; N: Error out
 39612                                  					; Y: Check to see if we got this due
 39613                                  					;    to the network drive. Note that
 39614                                  					;    the redir will set the exterr
 39615                                  					;    to error_cannot_make if this is 
 39616                                  					;    so. 
 39617 000070A0 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39618                                  					; See if it's REALLY an att mismatch
 39619 000070A6 7408                    	je	short SETTMPERR		; no, network error, stop
 39620                                  ;M070
 39621                                  ; If the user failed on an I24, we do not want to try again
 39622                                  ;
 39623 000070A8 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39624                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39625                                  
 39626                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39627                                  	; 17/12/2022
 39628 000070AE 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39629                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39630                                  	;jz	short SETTMPERR
 39631                                  	;jmp	short CreateLoop
 39632                                  
 39633                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39634                                  					; M049 - end
 39635                                  SETTMPERR:
 39636 000070B0 F9                      	STC
 39637                                  CreateDone:
 39638                                  	;Leave
 39639 000070B1 89EC                    	mov	sp,bp
 39640 000070B3 5D                      	pop	bp
 39641 000070B4 7203                    	JC	short CreateFail
 39642 000070B6 E98295                  	jmp	SYS_RET_OK		; success!
 39643                                  CreateFail:
 39644 000070B9 E98895                  	jmp	SYS_RET_ERR
 39645                                  
 39646                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39647                                  ;   (CH) or to the value in CL if the current system call is through
 39648                                  ;   serverdoscall.
 39649                                  ;
 39650                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39651                                  ;		fSharing == TRUE => set sattrib to CL
 39652                                  ;   Outputs:	none
 39653                                  ;   Registers changed:	CX
 39654                                  
 39655                                  SetAttrib:
 39656 000070BC 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39657 000070C2 7502                    	jnz	short Set
 39658 000070C4 88E9                    	mov	cl,ch
 39659                                  Set:
 39660 000070C6 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39661 000070CB C3                      	retn
 39662                                  
 39663                                  ; 14/07/2018 - Retro DOS v3.0
 39664                                  ; MSDOS 6.0
 39665                                  
 39666                                  ; 29/04/2019 - Retro DOS v4.0
 39667                                  
 39668                                  ;Break	<Extended_Open- Extended open the file>
 39669                                  ;----------------------------------------------------------------------------
 39670                                  ; Input: AL= 0 reserved  AH=6CH
 39671                                  ;	 BX= mode
 39672                                  ;	 CL= create attribute  CH=search attribute (from server)
 39673                                  ;	 DX= flag
 39674                                  ;	 DS:SI = file name
 39675                                  ;	 ES:DI = parm list
 39676                                  ;			   DD  SET EA list (-1) null
 39677                                  ;			   DW  n  parameters
 39678                                  ;			   DB  type (TTTTTTLL)
 39679                                  ;			   DW  IOMODE
 39680                                  ; Function: Extended Open
 39681                                  ; Output: carry clear
 39682                                  ;		     AX= handle
 39683                                  ;		     CX=1 file opened
 39684                                  ;			2 file created/opened
 39685                                  ;			3 file replaced/opened
 39686                                  ;	  carry set: AX has error code
 39687                                  ;----------------------------------------------------------------------------
 39688                                  
 39689                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39690                                  _$Extended_Open:			  ;AN000;
 39691                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39692 000070CC 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39693 000070D1 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39694                                  	; 17/12/2022
 39695 000070D8 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39696                                  	;;test	dx,0FE00h
 39697                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39698 000070DB 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39699 000070DD 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39700 000070DF 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39701 000070E2 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39702                                  	;and	dl,0Fh
 39703 000070E4 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39704 000070E7 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39705 000070EA 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39706                                  	;and	ah,0F0h
 39707 000070EC 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39708 000070EF 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39709 000070F2 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39710                                  
 39711 000070F4 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39712 000070F9 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39713 000070FE 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39714 00007103 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39715 00007108 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39716 0000710D 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39717 00007112 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39718 00007117 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39719 0000711C 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39720 0000711E 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39721 00007120 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39722                                  ext_inval2:				  ;AN000;;EO.
 39723                                  	;mov	al,1
 39724 00007122 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39725                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39726                                  eo_err:
 39727                                  	;jmp	SYS_RET_ERR
 39728 00007124 EB93                    	jmp	short CreateFail
 39729                                  
 39730                                  ext_inval_parm:				  ;AN000;EO..
 39731 00007126 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39732 00007127 5E                      	POP	SI			  ;AN000;EO..
 39733                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39734                                  	;mov	al,13
 39735 00007128 B00D                    	mov	al,error_invalid_data
 39736                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39737                                  	;;jmp	SYS_RET_ERR
 39738                                  	;jmp	short eo_err
 39739                                  	; 17/12/2022
 39740 0000712A EB8D                    	jmp	short CreateFail
 39741                                  
 39742                                  	; 17/12/2022	
 39743                                  ;error_return:				  ;AN000;EO.
 39744                                  ;	retn				  ;AN000;EO.. return with error
 39745                                  
 39746                                  goopen2:				  ;AN000;
 39747                                  	; 17/12/2022
 39748                                  	;test	bh,20h				 
 39749 0000712C F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39750                                  	;;test	bx,2000h
 39751                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39752 0000712F 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39753                                  	;or	byte [SS:EXTOPEN_ON],2
 39754 00007131 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39755                                  goopen:					  ;AN000;
 39756                                  	;or	byte [SS:EXTOPEN_ON],1 
 39757 00007137 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39758                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39759                                  	; 18/12/2022
 39760 0000713D 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39761                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39762 00007143 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39763 00007149 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39764 0000714B E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39765 0000714E 723F                    	JC	short error_return	  ;AN000;;EO. error
 39766                                  
 39767 00007150 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39768 00007156 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39769                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39770 00007158 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39771 0000715F EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39772                                  
 39773                                  	; 17/12/2022
 39774                                  ;ok_return2:
 39775                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39776                                  
 39777                                  chknext:
 39778                                  	; 17/12/2022
 39779 00007161 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39780                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39781                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39782 00007167 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39783 00007169 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39784 0000716C 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39785 0000716E 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39786 00007174 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39787 00007176 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39788 0000717D 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39789 00007183 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39790 00007185 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39791 0000718C EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39792                                  error_return2:
 39793 0000718E F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39794                                  error_return:	 ;17/12/2022
 39795 0000718F C3                      	retn				  ;AN000;;EO. return with error
 39796                                  
 39797                                  	; 17/12/2022
 39798                                  ok_return:
 39799                                  ok_return2:
 39800 00007190 E9A894                  	jmp	SYS_RET_OK
 39801                                  
 39802                                  exist_open:				  ;AN000;
 39803 00007193 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39804 00007199 7402                    	jz	short noserver		  ;AN000;;EO. no
 39805 0000719B 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39806                                  noserver:
 39807 0000719D E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39808 000071A0 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39809 000071A2 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39810 000071A8 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39811                                  local_extopen:
 39812                                  	;cmp	ax,2
 39813 000071AA 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39814 000071AD 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39815                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39816                                  	; 17/12/2022
 39817 000071AF 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39818                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39819                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39820                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39821                                  	; 17/12/2022
 39822 000071B5 745D                    	jz	short extexit ; 10/06/2019
 39823                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39824                                  	;jnz	short do_creat
 39825                                  	;jmp	short extexit
 39826                                  do_creat:
 39827 000071B7 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39828 000071BC 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39829 000071C1 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39830 000071C3 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39831 000071C6 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39832                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39833 000071C8 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39834                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39835 000071CF EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39836                                  
 39837                                  ext_ok:
 39838 000071D1 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39839 000071D7 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39840                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39841 000071D9 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39842                                  setXAttr:
 39843                                  	; 29/04/2019
 39844 000071E0 50                      	push	ax
 39845 000071E1 E8A192                  	call	Get_User_Stack		  ;AN000;;EO.
 39846 000071E4 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39847                                  	;mov	[si+4],ax
 39848 000071E8 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39849 000071EB 58                      	pop	ax			  ;AN000;;EO.
 39850 000071EC 8904                    	mov	[si],ax
 39851                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39852                                  	; 17/12/2022
 39853 000071EE EBA0                    	jmp	short ok_return
 39854                                  ;ok_return:				  ;AN000;
 39855                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39856                                  
 39857                                  extexit2:				  ;AN000; ERROR RECOVERY
 39858 000071F0 5B                      	POP	BX			  ;AN000;EO. close the handle
 39859 000071F1 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39860                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39861 000071F2 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39862                                  					  ;AN000;EO. from create;smr;SS Override
 39863 000071F8 750C                    	JNZ	short justopen		  ;AN000;EO.
 39864 000071FA 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39865 000071FF C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39866 00007201 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39867 00007204 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39868                                  
 39869                                  justopen:				  ;AN000;
 39870 00007206 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39871                                  reserror:				  ;AN000;
 39872 00007209 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39873 0000720A EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39874                                  
 39875                                  ext_file_unfound:			  ;AN000;
 39876                                  	;mov	ax,2
 39877 0000720C B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39878 0000720F EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39879                                  ext_inval:				  ;AN000;
 39880                                  	;mov	ax,1
 39881 00007211 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39882                                  lockoperr:	; 17/12/2022
 39883                                  extexit:
 39884 00007214 E92D94                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39885                                  
 39886                                  ;============================================================================
 39887                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39888                                  ;============================================================================
 39889                                  ; 14/07/2018 - Retro DOS v3.0
 39890                                  ; 22/05/2019 - Retro DOS v4.0
 39891                                  
 39892                                  ;BREAK <$LockOper - Lock Calls>
 39893                                  ;----------------------------------------------------------------------------
 39894                                  ;
 39895                                  ;   Assembler usage:
 39896                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39897                                  ;	    MOV     CX, OffsetHigh
 39898                                  ;	    MOV     DX, OffsetLow
 39899                                  ;	    MOV     SI, LengthHigh
 39900                                  ;	    MOV     DI, LengthLow
 39901                                  ;	    MOV     AH, LockOper
 39902                                  ;	    MOV     AL, Request
 39903                                  ;	    INT     21h
 39904                                  ;
 39905                                  ;   Error returns:
 39906                                  ;	    AX = error_invalid_handle
 39907                                  ;	       = error_invalid_function
 39908                                  ;	       = error_lock_violation
 39909                                  ;
 39910                                  ;   Assembler usage:
 39911                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39912                                  ;
 39913                                  ;				    0? lock all
 39914                                  ;				    8? lock write
 39915                                  ;				    ?2 lock multiple
 39916                                  ;				    ?3 unlock multiple
 39917                                  ;				    ?4 lock/read
 39918                                  ;				    ?5 write/unlock
 39919                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39920                                  ;	    MOV     BX, Handle
 39921                                  ;	    MOV     CX, count or size
 39922                                  ;	    LDS     DX, buffer
 39923                                  ;	    INT     21h
 39924                                  ;
 39925                                  ;   Error returns:
 39926                                  ;	    AX = error_invalid_handle
 39927                                  ;	       = error_invalid_function
 39928                                  ;	       = error_lock_violation
 39929                                  ;
 39930                                  ;----------------------------------------------------------------------------
 39931                                  
 39932                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39933                                  _$LockOper:
 39934 00007217 3C01                    	CMP	AL,1
 39935 00007219 770B                    	JA	short lock_bad_func
 39936                                  
 39937 0000721B 57                      	PUSH	DI			       ; Save LengthLow
 39938 0000721C E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39939 0000721F 731D                    	JNC	short lock_do 		       ; have valid handle
 39940 00007221 5F                      	POP	DI			       ; Clean stack
 39941                                  	;mov	al,6
 39942 00007222 B006                    	mov	al,error_invalid_handle
 39943                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39944                                  ;lockoperr:
 39945                                  	;jmp	SYS_RET_ERR
 39946                                  	; 17/12/2022
 39947 00007224 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39948                                  
 39949                                  lock_bad_func:
 39950                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39951 00007226 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39952                                  	;mov	al,1
 39953 0000722C B001                    	mov	al,error_invalid_function
 39954                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39955                                  lockoperrj:
 39956                                  	;jmp	SYS_RET_ERR
 39957 0000722E EBE4                    	jmp	short lockoperr
 39958                                  
 39959                                  	; 22/05/2019 - Retro DOS v4.0
 39960                                  
 39961                                  	; MSDOS 6.0 
 39962                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39963                                  ; Dead code deleted, MD, 23 Mar 90
 39964                                  
 39965                                  ;lock_do:
 39966                                  ;	; MSDOS 3.3
 39967                                  ;	or	al,al
 39968                                  ;	pop	ax
 39969                                  ;	jz	short DOS_Lock
 39970                                  ;DOS_Unlock:
 39971                                  ;	;test	word [es:di+5],8000h
 39972                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39973                                  ;	JZ	short LOCAL_UNLOCK
 39974                                  ;	push    ax
 39975                                  ;	mov     ax,110Bh
 39976                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39977                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39978                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39979                                  ;			; SFT DPB field -> DPB of drive containing file
 39980                                  ;			; Return: CF set error
 39981                                  ;	pop     bx
 39982                                  ;	jmp     short ValChk
 39983                                  ;
 39984                                  ;LOCAL_UNLOCK:
 39985                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39986                                  ;ValChk:
 39987                                  ;	JNC	short Lock_OK
 39988                                  ;lockerror:
 39989                                  ;	jmp	SYS_RET_ERR
 39990                                  ;Lock_OK:
 39991                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39992                                  ;	jmp	SYS_RET_OK
 39993                                  ;DOS_Lock:
 39994                                  ;	;test	word [es:di+5],8000h
 39995                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39996                                  ;	JZ	short LOCAL_LOCK
 39997                                  ;	;CallInstall NET_XLock,MultNET,10
 39998                                  ;	mov     ax, 110Ah
 39999                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40000                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40001                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40002                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40003                                  ;			; Return: CF set error
 40004                                  ;	JMP	short ValChk
 40005                                  ;
 40006                                  ;LOCAL_LOCK:
 40007                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40008                                  ;	JMP	short ValChk
 40009                                  
 40010                                  ; 17/12/2022
 40011                                  LOCAL_UNLOCK:
 40012                                  	; MSDOS 3.3
 40013                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40014                                  	; MSDOS 6.0
 40015 00007230 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40016                                  ValChk:
 40017 00007234 7302                    	JNC	short Lock_OK
 40018                                  lockerror:
 40019                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40020                                  	;;jmp	SYS_RET_ERR
 40021                                  	;jmp	short lockoperrj
 40022                                  	; 17/12/2022
 40023 00007236 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40024                                  Lock_OK:
 40025                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40026                                  	; 10/06/2019
 40027 00007238 A1[0C06]                	mov	ax,[TEMP_VAR]
 40028 0000723B E9FD93                  	jmp	SYS_RET_OK
 40029                                  
 40030                                  	; 22/05/2019
 40031                                  lock_do:
 40032                                  	; MSDOS 6.0
 40033 0000723E 89C3                    	MOV	BX,AX				; save AX
 40034 00007240 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40035                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40036                                  	;;mov	[bp+0],dx
 40037                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40038                                  	; 15/12/2022
 40039 00007243 895600                  	mov	[bp],dx
 40040                                  	;mov	[bp+2],cx
 40041 00007246 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40042 00007249 59                      	POP	CX				; get low length
 40043                                  	;mov	[bp+4],cx
 40044 0000724A 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40045                                  	;mov	[bp+6],si
 40046 0000724D 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40047 00007250 B90100                  	MOV	CX,1				; one range
 40048                                  
 40049                                  ;	PUSH	CS				;
 40050                                  ;	POP	DS				; DS:DX points to
 40051                                  
 40052 00007253 16                      	push	ss
 40053 00007254 1F                      	pop	ds
 40054                                  
 40055 00007255 89EA                    	MOV	DX,BP				; Lock_Buffer
 40056                                  	;test	al,1
 40057 00007257 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40058                                  	;JNZ	short DOS_Unlock		; yes
 40059                                  	;JMP	short DOS_Lock			; function 0
 40060                                  	; 17/12/2022
 40061                                  	; 10/06/2019
 40062 00007259 740E                    	jz	short DOS_Lock
 40063                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40064                                  	;JNZ	short DOS_Unlock
 40065                                  	;JMP	short DOS_Lock
 40066                                  
 40067                                  DOS_Unlock:
 40068                                  	;;test	word [es:di+5],8000h
 40069                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40070 0000725B 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40071 00007260 74CE                    	JZ	short LOCAL_UNLOCK
 40072                                  
 40073                                  lock_unlock: ; 22/05/2019
 40074                                  	
 40075                                  	;CallInstall Net_Xlock,MultNET,10
 40076                                  	
 40077                                  	; MSDOS 3.3
 40078                                  	;mov     ax,110Bh
 40079                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40080                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40081                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40082                                  			; SFT DPB field -> DPB of drive containing file
 40083                                  			; Return: CF set error
 40084                                  	; MSDOS 6.0
 40085 00007262 B80A11                  	mov     ax,110Ah
 40086 00007265 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40087                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40088                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40089                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40090                                  			; Return: CF set error
 40091                                  
 40092 00007267 EBCB                    	JMP	SHORT ValChk
 40093                                  
 40094                                  ; 17/12/2022
 40095                                  %if 0
 40096                                  LOCAL_UNLOCK:
 40097                                  	; MSDOS 3.3
 40098                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40099                                  	; MSDOS 6.0
 40100                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40101                                  ValChk:
 40102                                  	JNC	short Lock_OK
 40103                                  lockerror:
 40104                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40105                                  	;jmp	SYS_RET_ERR
 40106                                  	jmp	short lockoperrj
 40107                                  Lock_OK:
 40108                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40109                                  	; 10/06/2019
 40110                                  	mov	ax,[TEMP_VAR]
 40111                                  	jmp	SYS_RET_OK
 40112                                  %endif
 40113                                  
 40114                                  DOS_Lock:
 40115                                  	;;test	word [es:di+5],8000h
 40116                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40117 00007269 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40118 0000726E 7407                    	JZ	short LOCAL_LOCK
 40119                                  
 40120                                  	;CallInstall NET_XLock,MultNET,10
 40121                                  
 40122 00007270 B80A11                  	mov     ax,110Ah
 40123 00007273 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40124                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40125                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40126                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40127                                  			; Return: CF set error
 40128                                  
 40129 00007275 EBBD                    	JMP	short ValChk
 40130                                  
 40131                                  LOCAL_LOCK:
 40132                                  	; MSDOS 3.3
 40133                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40134                                  	; MSDOS 6.0
 40135 00007277 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40136                                  
 40137 0000727B EBB7                    	JMP	short ValChk
 40138                                  
 40139                                  ; 14/07/2018 - Retro DOS v3.0
 40140                                  ; LOCK_CHECK
 40141                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40142                                  
 40143                                  ;----------------------------------------------------------------------------
 40144                                  ; Inputs:
 40145                                  ;	Outputs of SETUP
 40146                                  ;	[USER_ID] Set
 40147                                  ;	[PROC_ID] Set
 40148                                  ; Function:
 40149                                  ;	Check for lock violations on local I/O
 40150                                  ;	Retries are attempted with sleeps in between
 40151                                  ; Outputs:
 40152                                  ;    Carry clear
 40153                                  ;	Operation is OK
 40154                                  ;    Carry set
 40155                                  ;	A lock violation detected
 40156                                  ; Outputs of SETUP preserved
 40157                                  ;----------------------------------------------------------------------------
 40158                                  
 40159                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40160                                  	; 22/05/2019 - Retro DOS v4.0
 40161                                  LOCK_CHECK:
 40162 0000727D 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40163                                  LockRetry:
 40164 00007281 53                      	push	bx		; save regs
 40165 00007282 50                      	push	ax ; MSDOS 6.0
 40166                                  
 40167                                  	;MSDOS 3.3
 40168                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40169                                  	;MSDOS 6.0
 40170 00007283 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40171                                  
 40172 00007287 58                      	pop	ax ; MSDOS 6.0
 40173 00007288 5B                      	pop	bx		; restrore regs
 40174 00007289 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40175                                  LockN:
 40176 0000728B E87D9F                  	call	Idle		; wait a while
 40177 0000728E 4B                      	DEC	BX		; remember a retry
 40178 0000728F 75F0                    	JNZ	short LockRetry	; more retries left...
 40179 00007291 F9                      	STC
 40180                                  lc_ret_label:
 40181 00007292 C3                      	retn
 40182                                  
 40183                                  ; 14/07/2018 - Retro DOS v3.0
 40184                                  ; LOCK_VIOLATION
 40185                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40186                                  
 40187                                  ;----------------------------------------------------------------------------
 40188                                  ; Inputs:
 40189                                  ;	[THISDPB] set
 40190                                  ;	[READOP] indicates whether error on read or write
 40191                                  ; Function:
 40192                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40193                                  ; Outputs:
 40194                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40195                                  ;	Carry clear if user wants a retry
 40196                                  ;
 40197                                  ; DS, ES, DI, CX preserved, others destroyed
 40198                                  ;----------------------------------------------------------------------------
 40199                                  
 40200                                  LOCK_VIOLATION:
 40201 00007293 1E                      	PUSH	DS
 40202 00007294 06                      	PUSH	ES
 40203 00007295 57                      	PUSH	DI
 40204 00007296 51                      	PUSH	CX
 40205                                  	;mov	ax,21h
 40206 00007297 B82100                  	MOV	AX,error_lock_violation
 40207                                  	;mov	byte [ALLOWED],18h
 40208 0000729A C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40209 0000729F C42E[8A05]              	LES	BP,[THISDPB]
 40210 000072A3 BF0100                  	MOV	DI,1		; Fake some registers
 40211 000072A6 89F9                    	MOV	CX,DI
 40212                                  	;mov	dx,[es:bp+11]
 40213 000072A8 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40214 000072AC E8D6DF                  	call	HARDERR
 40215 000072AF 59                      	POP	CX
 40216 000072B0 5F                      	POP	DI
 40217 000072B1 07                      	POP	ES
 40218 000072B2 1F                      	POP	DS
 40219 000072B3 3C01                    	CMP	AL,1
 40220 000072B5 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40221 000072B7 F9                      	STC
 40222 000072B8 C3                      	retn
 40223                                  
 40224                                  ; 14/07/2018 - Retro DOS v3.0
 40225                                  
 40226                                  ;----------------------------------------------------------------------------
 40227                                  
 40228                                  ;	do a retz to return error
 40229                                  
 40230                                  	; 22/05/2019 - Retro DOS v4.0
 40231                                  CheckShare:
 40232                                  	; MSDOS 3.3
 40233                                  	;cmp	byte [cs:fShare],0
 40234                                  	;retn
 40235                                  
 40236                                  	; MSDOS 6.0
 40237 000072B9 1E                      	push	ds			;smr;
 40238                                  	;getdseg <ds>			; ds -> dosdata
 40239 000072BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40240 000072BF 803E[0303]00            	cmp	byte [fShare],0
 40241 000072C4 1F                      	pop	ds			;smr;
 40242 000072C5 C3                      	retn
 40243                                  	
 40244                                  ;============================================================================
 40245                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40246                                  ;============================================================================
 40247                                  ; 14/07/2018 - Retro DOS v3.0
 40248                                  ; 22/05/2019 - Retro DOS v4.0
 40249                                  
 40250                                  ; SHARE_CHECK
 40251                                  ;----------------------------------------------------------------------------
 40252                                  ; Inputs:
 40253                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40254                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40255                                  ;       [WFP_START] has full path of name
 40256                                  ;       [USER_ID] Set
 40257                                  ;       [PROC_ID] Set
 40258                                  ; Function:
 40259                                  ;       Check for sharing violations on local file/device access
 40260                                  ; Outputs:
 40261                                  ;    Carry clear
 40262                                  ;       Sharing approved
 40263                                  ;    Carry set
 40264                                  ;       A sharing violation detected
 40265                                  ;           AX is error code
 40266                                  ; USES    ALL but DS
 40267                                  ;----------------------------------------------------------------------------
 40268                                  
 40269                                  	; 22/05/2019 - Retro DOS v4.0
 40270                                  SHARE_CHECK:
 40271                                  	; 26/07/2019
 40272 000072C6 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40273                                  shchk_retn:
 40274 000072CA C3                      	retn
 40275                                  
 40276                                  ; SHARE_VIOLATION
 40277                                  ;----------------------------------------------------------------------------
 40278                                  ; Inputs:
 40279                                  ;       [THISDPB] Set
 40280                                  ;       AX has error code
 40281                                  ; Function:
 40282                                  ;       Handle Sharing errors
 40283                                  ; Outputs:
 40284                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40285                                  ;       Carry clear if user wants a retry
 40286                                  ;
 40287                                  ; DS, ES, DI preserved, others destroyed
 40288                                  ;----------------------------------------------------------------------------
 40289                                  
 40290                                  SHARE_VIOLATION:
 40291 000072CB 1E                      	PUSH    DS
 40292 000072CC 06                      	PUSH	ES
 40293 000072CD 57                      	PUSH    DI
 40294 000072CE C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40295                                  	;mov	byte [ALLOWED],18h
 40296 000072D3 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40297 000072D8 C42E[8A05]              	LES     BP,[THISDPB]
 40298 000072DC BF0100                  	MOV     DI,1			; Fake some registers
 40299 000072DF 89F9                    	MOV     CX,DI
 40300                                  	;mov	dx,[es:bp+17]
 40301 000072E1 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40302 000072E5 E89DDF                  	call	HARDERR
 40303 000072E8 5F                      	POP     DI
 40304 000072E9 07                      	POP	ES
 40305 000072EA 1F                      	POP     DS
 40306 000072EB 3C01                    	CMP     AL,1
 40307 000072ED 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40308 000072EF F9                      	STC
 40309 000072F0 C3                      	retn
 40310                                  
 40311                                  ;----------------------------------------------------------------------------
 40312                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40313                                  ;       NOT perform a close, it merely asserts that the sharing information
 40314                                  ;       for the SFT/UID/PID may be safely released.
 40315                                  ;
 40316                                  ;   Inputs:     ES:DI points to an SFT
 40317                                  ;   Outputs:    None
 40318                                  ;   Registers modified: all except DS,ES,DI
 40319                                  ;----------------------------------------------------------------------------
 40320                                  
 40321                                  ShareEnd:
 40322                                  	; 26/07/2019
 40323 000072F1 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40324 000072F5 C3                      	retn
 40325                                  
 40326                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40327                                  ;----------------------------------------------------------------------------
 40328                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40329                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40330                                  ;
 40331                                  ;   Inputs:     ThisSFT points to the SFT
 40332                                  ;               WFP_Start points to the WFP
 40333                                  ;   Outputs:    Carry clear => successful entry
 40334                                  ;               Carry set => failed system call
 40335                                  ;   Registers modified: all
 40336                                  ;----------------------------------------------------------------------------
 40337                                  
 40338                                  ShareEnter:
 40339 000072F6 51                      	push	cx
 40340                                  retry:
 40341 000072F7 8B0E[1A00]              	mov     cx,[RetryCount]
 40342                                  attempt:
 40343 000072FB C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40344 000072FF 31C0                    	XOR     AX,AX
 40345                                   	;mov	[es:di+51],axfff
 40346 00007301 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40347 00007305 51                      	push	cx
 40348 00007306 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40349 00007309 59                      	pop	cx
 40350 0000730A 730A                    	jnc	short done		; success, let the user see this
 40351 0000730C E8FC9E                  	call	Idle                    ; wait a while
 40352 0000730F E2EA                    	loop    attempt                 ; go back for another attempt
 40353 00007311 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40354 00007314 73E1                    	jnc	short retry		; user said to retry, go do it
 40355                                  done:
 40356 00007316 59                      	pop	cx
 40357 00007317 C3                      	retn
 40358                                  
 40359                                  ;============================================================================
 40360                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40361                                  ;============================================================================
 40362                                  ; 29/04/2019 - Retro DOS 4.0
 40363                                  
 40364                                  ;** EXEPATCH.ASM 
 40365                                  ;----------------------------------------------------------------------------
 40366                                  ;	Contains the foll:
 40367                                  ;
 40368                                  ;		- code to find and overlay buggy unpack code
 40369                                  ;		- new code to be overlayed on buggy unpack code 
 40370                                  ;		- old code sequence to identify buggy unpack code
 40371                                  ;
 40372                                  ;	Revision history:
 40373                                  ;
 40374                                  ;		Created: 5/14/90
 40375                                  ;----------------------------------------------------------------------------
 40376                                  
 40377                                  ;----------------------------------------------------------------------------
 40378                                  ;
 40379                                  ; M020 : Fix for rational bug - for details see routine header
 40380                                  ; M028 : 4b04 implementation
 40381                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40382                                  ; M032 : set turnoff bit only if DOS in HMA.
 40383                                  ; M033 : if IP < 2 then not exepacked.
 40384                                  ; M046 : support for a 4th version of exepacked files.
 40385                                  ; M068 : support for copy protected apps.
 40386                                  ; M071 : use A20OFF_COUNT of 10.
 40387                                  ;
 40388                                  ;----------------------------------------------------------------------------
 40389                                  
 40390                                  PATCH1_COM_OFFSET	EQU	06CH
 40391                                  PATCH1_OFFSET		EQU	028H
 40392                                  PATCH1_CHKSUM		EQU	0EF4EH
 40393                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40394                                  
 40395                                  PATCH2_COM_OFFSET	EQU	076H
 40396                                  PATCH2_OFFSET		EQU	032H
 40397                                  
 40398                                  	; The strings that start at offset 076h have two possible 
 40399                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40400                                  
 40401                                  PATCH2_CHKSUM		EQU	78B2H
 40402                                  CHKSUM2_LEN		EQU	119H/2
 40403                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40404                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40405                                  
 40406                                  PATCH3_COM_OFFSET	EQU	074H
 40407                                  PATCH3_OFFSET		EQU	032H
 40408                                  PATCH3_CHKSUM		EQU	4EDEH
 40409                                  CHKSUM3_LEN		EQU	117H/2
 40410                                  
 40411                                  ;**	Data structure passed for ExecReady call
 40412                                  ;
 40413                                  ;struc ERStruc
 40414                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40415                                  ; .ER_Flags:	resw	1
 40416                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40417                                  ; .ER_PSP:	resw	1	; PSP of the program
 40418                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40419                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40420                                  ; .size:
 40421                                  ;endstruc
 40422                                  
 40423                                  ;DOSCODE SEGMENT
 40424                                  
 40425                                  	; 22/05/2019 - Retro DOS v4.0
 40426                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40427                                  
 40428                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40429                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40430                                  
 40431                                  ; M028 - BEGIN
 40432                                  
 40433                                  ;--------------------------------------------------------------------------
 40434                                  ;
 40435                                  ;	Procedure Name		: ExecReady
 40436                                  ;
 40437                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40438                                  ;
 40439                                  ;--------------------------------------------------------------------------
 40440                                  
 40441                                  ExecReady:
 40442 00007318 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40443                                  	;;test	word [si+2],1
 40444                                  	; 17/12/2022
 40445 0000731A F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40446                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40447 0000731E 7413                    	jz	short er_setver		; only setver for .COM files
 40448                                  
 40449                                  	;mov	ax,[si+8]
 40450 00007320 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40451 00007323 83C010                  	add	ax,10h
 40452 00007326 8EC0                    	mov	es,ax
 40453                                  
 40454                                  	;mov	cx,[si+10]
 40455 00007328 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40456                                  	;mov	cx,[si+12]
 40457 0000732B 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40458                                  
 40459                                  	;call	[ss:FixExePatch]
 40460 0000732E 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 40461                                  	
 40462                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40463                                  	;call	[ss:Rational386PatchPtr]
 40464                                  
 40465                                  er_setver:
 40466                                  	;;test	word [si+2],2		; Q: is this an overlay
 40467                                  	; 17/12/2022
 40468 00007333 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40469                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40470 00007337 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40471                                  					; N: set up lie version first
 40472 00007339 1E                      	push	ds
 40473 0000733A 56                      	push	si
 40474                                  	;lds	si,[si+4]
 40475 0000733B C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40476 0000733E E876ED                  	call	Scan_Execname1
 40477 00007341 E887ED                  	call	Scan_Special_Entries
 40478 00007344 5E                      	pop	si
 40479 00007345 1F                      	pop	ds
 40480                                  	;mov	es,[si+8]
 40481 00007346 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40482 00007349 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40483 0000734D 26A34000                	mov	[es:PDB.Version],ax
 40484                                  
 40485                                  er_chkdoshi:
 40486 00007351 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40487 00007357 741F                    	je	short er_done		; M032: N: done
 40488                                  
 40489                                  					; M068 - Start
 40490                                  	;mov	ax,[si+8]
 40491 00007359 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40492                                  
 40493                                  	;or	byte [ss:DOS_FLAG],4
 40494 0000735C 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40495                                  					; ah = 25 & ah= 49. See dossym.inc 
 40496                                  					; under TAG M003 & M009 for 
 40497                                  					; explanation
 40498                                  	;;test	word [si+2],1
 40499                                  	; 17/12/2022
 40500 00007362 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40501                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40502 00007366 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40503                                  					;    a20off_psp and ret
 40504 00007368 1E                         	push	ds
 40505 00007369 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40506 0000736B E88E02                  	call	IsCopyProt		; check if copy protected
 40507 0000736E 1F                      	pop	ds
 40508                                  
 40509                                  er_setA20:
 40510                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40511                                  	; is non-zero at this point it indicates that the A20 is to be 
 40512                                  	; turned off for that many int 21 calls made by the app. In 
 40513                                  	; addition the A20 has to be turned off when we exit from this 
 40514                                  	; call. Hence the inc.
 40515                                  
 40516 0000736F 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40517 00007374 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40518                                  					; turned OFF.
 40519                                  er_done:				; M068 - End
 40520 00007378 31C0                    	xor	ax,ax
 40521 0000737A C3                      	retn
 40522                                  
 40523                                  ; M028 - END
 40524                                  
 40525                                  
 40526                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40527                                  %if 0
 40528                                  
 40529                                  ;----------------------------------------------------------------------------
 40530                                  ;
 40531                                  ; procedure : Rational386Patch
 40532                                  ;
 40533                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40534                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40535                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40536                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40537                                  ;
 40538                                  ; This routine applies patches to the Rational DOS Extender to work around
 40539                                  ; most of the register trashing bugs.
 40540                                  ;
 40541                                  ; Note that there are additional register trashing bugs not fixed by these
 40542                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40543                                  ; may be modified on interrupts.
 40544                                  ;
 40545                                  ; There are two different Rational DOS Extender patchs in this module.
 40546                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40547                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40548                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40549                                  ; or not.
 40550                                  ;
 40551                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40552                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40553                                  ; running in the HMA.
 40554                                  ;
 40555                                  ; This patch detection and replacement is based on an example supplied by
 40556                                  ; Ben Williams at Rational.
 40557                                  ;
 40558                                  ;----------------------------------------------------------------------------
 40559                                  
 40560                                  ; 22/05/2019 - Retro DOS v4.0
 40561                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40562                                  
 40563                                  ;----------------------------------------------------------------------------
 40564                                  ;
 40565                                  ; INPUT : ES = segment where program got loaded
 40566                                  ;
 40567                                  ;----------------------------------------------------------------------------
 40568                                  
 40569                                  rpFind1:
 40570                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40571                                  
 40572                                  rpFind1Len equ	$ - rpFind1
 40573                                  
 40574                                  ;	cli
 40575                                  ;	in	al, 21h
 40576                                  ;	pusha
 40577                                  ;	xor	ax, ax
 40578                                  ;	out	43h, al
 40579                                  ;	mov	dx, ...
 40580                                  
 40581                                  rpFind1a:
 40582                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40583                                  
 40584                                  rpFind1aLen equ	$ - rpFind1a
 40585                                  
 40586                                  ;	mov	al, 0Eh
 40587                                  ;	out	37h, al
 40588                                  ;	xor	ax, ax
 40589                                  ;	out	0F2h, al
 40590                                  
 40591                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40592                                  
 40593                                  rpFind2:
 40594                                  	db	0Fh, 20h, 0C0h
 40595                                  
 40596                                  rpFind2Len equ	$ - rpFind2
 40597                                  
 40598                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40599                                  
 40600                                  rpFind3:
 40601                                  	db	0Fh, 22h, 0C0h, 0EAh
 40602                                  
 40603                                  rpFind3Len equ	$ - rpFind3
 40604                                  
 40605                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40606                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40607                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40608                                  
 40609                                  ; note, there is no rpRepl1 string
 40610                                  
 40611                                  rpRepl2:
 40612                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40613                                  
 40614                                  rpRepl2Len equ	$ - rpRepl2
 40615                                  
 40616                                  ;	push	eax
 40617                                  ;	push	cx
 40618                                  ;	mov	eax, cr0
 40619                                  
 40620                                  rpRepl3:
 40621                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40622                                  
 40623                                  rpRepl3Len equ	$ - rpRepl3
 40624                                  
 40625                                  ;	mov	ss, bx
 40626                                  ;	pop	cx
 40627                                  ;	pop	eax
 40628                                  
 40629                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40630                                  
 40631                                  rpFind4:
 40632                                  	db	93h, 58h, 8Bh, 0CCh
 40633                                  
 40634                                  rpFind4Len equ	$ - rpFind4
 40635                                  
 40636                                  ;	xchg	bx, ax
 40637                                  ;	pop	ax
 40638                                  ;	mov	cx, sp
 40639                                  
 40640                                  rpFind5:
 40641                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40642                                  
 40643                                  rpFind5Len equ	$ - rpFind5
 40644                                  
 40645                                  ;	mov	ax, DE0Ch
 40646                                  ;	int	67h
 40647                                  ;	mov	sp, cx
 40648                                  ;	jmp	bx
 40649                                  
 40650                                  rpRepl4:
 40651                                  	db	93h, 58h, 8Bh, 0CCh
 40652                                  	db	02Eh, 066h, 0A3h
 40653                                  
 40654                                  rpRepl4o1Len equ $ - rpRepl4
 40655                                  
 40656                                  	db	00h, 00h
 40657                                  	db	02Eh, 066h, 89h, 36h
 40658                                  
 40659                                  rpRepl4o2Len equ $ - rpRepl4
 40660                                  
 40661                                  	db	00h, 00h
 40662                                  
 40663                                  rpRepl4Len equ	$ - rpRepl4
 40664                                  
 40665                                  ;	xchg	bx, ax
 40666                                  ;	pop	ax
 40667                                  ;	mov	cx, sp
 40668                                  ;	mov	dword ptr cs:[xxxx], eax
 40669                                  ;	mov	dword ptr cs:[xxxx], esi
 40670                                  
 40671                                  rpRepl5:
 40672                                  	db	8Bh, 0E1h
 40673                                  	db	2Eh, 66h, 0A1h
 40674                                  
 40675                                  rpRepl5o1Len equ $ - rpRepl5
 40676                                  
 40677                                  	db	00h, 00h
 40678                                  	db	2Eh, 66h, 8Bh, 36h
 40679                                  
 40680                                  rpRepl5o2Len equ $ - rpRepl5
 40681                                  
 40682                                  	db	00h, 00h
 40683                                  	db	0FFh, 0E3h
 40684                                  
 40685                                  rpRepl5Len equ	$ - rpRepl5
 40686                                  
 40687                                  ;	mov	sp, cx
 40688                                  ;	mov	eax, dword ptr cs:[xxxx]
 40689                                  ;	mov	esi, dword ptr cs:[xxxx]
 40690                                  ;	jmp	bx
 40691                                  
 40692                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40693                                  
 40694                                  rpFind6:
 40695                                  	db	0FAh, 52h, 51h
 40696                                  
 40697                                  rpFind6Len equ	$ - rpFind6
 40698                                  
 40699                                  ;	cli
 40700                                  ;	push	dx
 40701                                  ;	push	cx
 40702                                  
 40703                                  rpFind7a:
 40704                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40705                                  
 40706                                  rpFind7aLen equ	$ - rpFind7a
 40707                                  
 40708                                  ;	mov	ax, 0DE0Ch
 40709                                  ;	call	fword ptr es:[xxxx]
 40710                                  
 40711                                  rpFind7b:
 40712                                  	db	59h, 5Ah, 5Bh
 40713                                  
 40714                                  rpFind7bLen equ	$ - rpFind7b
 40715                                  
 40716                                  ;	pop	cx
 40717                                  ;	pop	dx
 40718                                  ;	pop	bx
 40719                                  
 40720                                  rpRepl6 :
 40721                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40722                                  
 40723                                  rpRepl6Len equ	$ - rpRepl6
 40724                                  
 40725                                  ;	cli
 40726                                  ;	push	eax
 40727                                  ;	push	ebx
 40728                                  ;	push	ecx
 40729                                  ;	push	edx
 40730                                  
 40731                                  rpRepl7:
 40732                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40733                                  
 40734                                  rpRepl7Len equ	$ - rpRepl7
 40735                                  
 40736                                  ;	pop	edx
 40737                                  ;	pop	ecx
 40738                                  ;	pop	ebx
 40739                                  ;	pop	eax
 40740                                  ;	pop	bx
 40741                                  
 40742                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40743                                  
 40744                                  rpFind8:
 40745                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40746                                  
 40747                                  rpFind8Len equ	$ - rpFind8
 40748                                  
 40749                                  ;	pusha
 40750                                  ;	push	es
 40751                                  ;	push	ds
 40752                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40753                                  ;	mov	ds, ax
 40754                                  
 40755                                  rpFind9 :
 40756                                  	db	1Fh, 07h, 61h
 40757                                  
 40758                                  rpFind9Len equ	$ - rpFind9
 40759                                  
 40760                                  ;	pop	ds
 40761                                  ;	pop	es
 40762                                  ;	popa
 40763                                  
 40764                                  rpRepl8:
 40765                                   	db	66h, 60h, 06h, 1Eh
 40766                                  
 40767                                  rpRepl8Len equ	$ - rpRepl8
 40768                                  
 40769                                  ;	pushad
 40770                                  ;	push	es
 40771                                  ;	push	ds
 40772                                  
 40773                                  rpRepl9:
 40774                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40775                                  
 40776                                  rpRepl9Len equ	$ - rpRepl9
 40777                                  
 40778                                  ;	pop	ds
 40779                                  ;	pop	es
 40780                                  ;	popad
 40781                                  ;	retn			;no need to jmp back to main-line
 40782                                  
 40783                                  ;----------------------------------------------------------------------------
 40784                                  
 40785                                  struc SearchPair
 40786                                   .sp_off1: resw 1	; offset of 1st search string
 40787                                   .sp_len1: resw 1	; length of 1st search string
 40788                                   .sp_off2: resw 1	; 2nd string
 40789                                   .sp_len2: resw 1	; 2nd string
 40790                                   .sp_diff: resw 1	; max difference between offsets
 40791                                   .size:
 40792                                  endstruc
 40793                                  
 40794                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40795                                  
 40796                                  rpBug1Strs:
 40797                                  	dw	rpFind2
 40798                                  	dw	rpFind2Len ; 3
 40799                                  	dw	rpFind3
 40800                                  	dw	rpFind3Len ; 4
 40801                                  	dw	20h
 40802                                  
 40803                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40804                                  
 40805                                  rpBug2Strs:
 40806                                  	dw	rpFind4
 40807                                  	dw	rpFind4Len ; 4
 40808                                  	dw	rpFind5
 40809                                  	dw	rpFind5Len ; 9
 40810                                  	dw	80h
 40811                                  
 40812                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40813                                  
 40814                                  rpBug3Strs:
 40815                                  	dw	rpFind6
 40816                                  	dw	rpFind6Len ; 3
 40817                                  	dw	rpFind7a
 40818                                  	dw	rpFind7aLen ; 7
 40819                                  	dw	80h
 40820                                  
 40821                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40822                                  
 40823                                  rpBug4Strs:
 40824                                  	dw	rpFind8
 40825                                  	dw	4
 40826                                  	dw	rpFind9
 40827                                  	dw	rpFind9Len ; 3
 40828                                  	dw	80h
 40829                                  
 40830                                  ;----------------------------------------------------------------------------
 40831                                  
 40832                                  struc StackVars
 40833                                   .sv_wVersion:	resw 1		; Rational extender version #
 40834                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40835                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40836                                   .size:
 40837                                  endstruc
 40838                                  
 40839                                  ;----------------------------------------------------------------------------
 40840                                  
 40841                                  ; 22/05/2019 - Retro DOS v4.0
 40842                                  
 40843                                  Rational386Patch:
 40844                                  	; Do a few quick checks to see if this looks like a Rational
 40845                                  	; Extended application. Hopefully this will quickly weed out
 40846                                  	; most non Rational apps.
 40847                                  
 40848                                  	cmp	word [es:0],395		; version number goes here - versions
 40849                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40850                                  
 40851                                  	cmp	word [es:0Ch],20h	; always has this value here
 40852                                  	jne	short rp3QuickOut
 40853                                  
 40854                                  	push	ax
 40855                                  
 40856                                  	mov	ax,18h 			; extender has 18h at
 40857                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40858                                  	jne	short rp3QO_ax
 40859                                  	cmp	[es:28],ax
 40860                                  	jne	short rp3QO_ax
 40861                                  	cmp	[es:36],ax
 40862                                  	je	short rp3Maybe
 40863                                  rp3QO_ax:
 40864                                  	pop	ax
 40865                                  rp3QuickOut:
 40866                                  	retn
 40867                                  
 40868                                  ; It might be the rational extender, do more extensive checking
 40869                                  
 40870                                  rp3Maybe:
 40871                                  	cld
 40872                                  	push	bx			; note ax pushed above
 40873                                  	push	cx
 40874                                  	push	dx
 40875                                  	push	si
 40876                                  	push	di
 40877                                  	push	es
 40878                                  	push	ds			; we use all of them
 40879                                  	push	bp
 40880                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40881                                  	mov	bp,sp
 40882                                  
 40883                                  	push	cs
 40884                                  	pop	ds
 40885                                  
 40886                                  	mov	ax,[es:0]		; save version #
 40887                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40888                                  	mov	[bp],ax	
 40889                                  					; check that binary version # matches
 40890                                  	call	VerifyVersion		;   ascii string
 40891                                  	jne	short rp3Exit_j
 40892                                  
 40893                                  ; Looks like this is it, find where to put the patch code.  The
 40894                                  ; patch will be located on top of Rational code specific to 80286
 40895                                  ; processors, so these patchs MUST NOT be applied if running on
 40896                                  ; an 80286 system.
 40897                                  
 40898                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40899                                  
 40900                                  	mov	cx,4500h		; force search len to 4700h (searches
 40901                                  	;mov	[bp+2],cx
 40902                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40903                                  
 40904                                  	mov	es,[es:20h]		; es=code segment
 40905                                  
 40906                                  	mov	si,rpFind1		; string to find
 40907                                  	mov	dx,rpFind1Len ; 10	; length to match
 40908                                  	call	ScanCodeSeq		; look for code seq
 40909                                  	jz	short rpGotPatch
 40910                                  
 40911                                  ; According to Rational, some very old versions of the extender may not
 40912                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40913                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40914                                  
 40915                                  	mov	si,rpFind1a
 40916                                  	mov	dx,rpFind1aLen  ;8
 40917                                  	call	ScanCodeSeq
 40918                                  	jz	short rpGotPatch
 40919                                  
 40920                                  rp3Exit_j:
 40921                                  	jmp	rp3Exit
 40922                                  
 40923                                  ; Found the location to write patch code! DI = offset in code seg.
 40924                                  
 40925                                  rpGotPatch:
 40926                                  	;mov	[bp+4],di
 40927                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40928                                  
 40929                                  ;----------------------------------------------------------------------------
 40930                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40931                                  
 40932                                  	;cmp	word [bp+0],381
 40933                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40934                                  	cmp	word [bp],381
 40935                                  	jae	short rpBug2			;   < 3.81
 40936                                  
 40937                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40938                                  	call	FindBadCode
 40939                                  	jc	short rpBug2
 40940                                  
 40941                                  ; si = rpFind2 offset, di = rpFind3 offset
 40942                                  
 40943                                  	push	di
 40944                                  	mov	di,si				; rpFind2 offset
 40945                                  	mov	dx,rpFind2Len ; 3
 40946                                  
 40947                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40948                                  	jne	short rp_no_cx
 40949                                  
 40950                                  	dec	di				;   yes, gobble up push cx too
 40951                                  	inc	dx
 40952                                  rp_no_cx:
 40953                                  	mov	si,rpRepl2			; patch out find2 sequence
 40954                                  	mov	cx,rpRepl2Len  ; 6
 40955                                  	call	GenPatch
 40956                                  
 40957                                  	pop	di				; rpFind3 offset
 40958                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40959                                  	jne	short rp_no_cx2
 40960                                  
 40961                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40962                                  rp_no_cx2:
 40963                                  	;mov	ax,[bp+4]
 40964                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40965                                  	;mov	[es:di+4],ax
 40966                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40967                                  
 40968                                  	push	di				; save find3 offset
 40969                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40970                                  	mov	cx,rpRepl3Len ; 5
 40971                                  	call	CopyPatch
 40972                                  
 40973                                  	pop	bx				; find3 offset
 40974                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40975                                  	call	GenJump 			; jmp back from patch area
 40976                                  	;mov	[bp+4],di
 40977                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40978                                  						;   area pointer
 40979                                  
 40980                                  ;----------------------------------------------------------------------------
 40981                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40982                                  
 40983                                  rpBug2:
 40984                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40985                                  	call	FindBadCode
 40986                                  	jc	short rpBug3
 40987                                  
 40988                                  ; si = rpFind4 offset, di = rpFind5 offset
 40989                                  
 40990                                  	;push	word [bp+4]
 40991                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40992                                  						;   (where repl4 goes)
 40993                                  	push	di				; save find5 offset
 40994                                  
 40995                                  	mov	di,si
 40996                                  	mov	dx,rpFind4Len ; 4
 40997                                  	mov	si,rpRepl4
 40998                                  	mov	cx,rpRepl4Len ; 15
 40999                                  	call	GenPatch			; patch out find4 code
 41000                                  
 41001                                  	pop	di				; find5 offset
 41002                                  	add	di,5				; keep 5 bytes of find5 code
 41003                                  	;mov	bx,[bp+4]
 41004                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41005                                  	push	bx				; save repl5 location
 41006                                  	call	GenJump
 41007                                  
 41008                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41009                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41010                                  	call	CopyPatch			;   so no need to jmp back to
 41011                                  						;   main-line code
 41012                                  
 41013                                  ; patches have been made, now update the patch code to store/load dwords just
 41014                                  ; after the code in the patch area
 41015                                  
 41016                                  	pop	di				; repl5 location
 41017                                  	pop	si				; repl4 location
 41018                                  
 41019                                  	;mov	ax,[bp+4]
 41020                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41021                                  
 41022                                  	;mov	[es:si+7],ax
 41023                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41024                                  	;mov	[es:di+5],ax
 41025                                  	mov	[es:di+rpRepl5o1Len],ax
 41026                                  	add	ax,4
 41027                                  	;mov	[es:si+0Dh],ax
 41028                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41029                                  	;mov	[es:di+0Bh],ax
 41030                                  	mov	[es:di+rpRepl5o2Len],ax
 41031                                  
 41032                                  	;add	word [bp+4],8
 41033                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41034                                  						; patch area
 41035                                  
 41036                                  ;----------------------------------------------------------------------------
 41037                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41038                                  
 41039                                  rpBug3:
 41040                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41041                                  	call	FindBadCode
 41042                                  	jc	short rpBug4
 41043                                  
 41044                                  	;add	di,9
 41045                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41046                                  	push	si				;   code and locate find7b
 41047                                  	mov	si,rpFind7b			;   sequence
 41048                                  	mov	dx,rpFind7bLen ; 3
 41049                                  	call	ScanCodeSeq_di
 41050                                  	pop	si
 41051                                  	jnz	short rpBug4
 41052                                  
 41053                                  	push	di				; save find7b code offset
 41054                                  
 41055                                  	mov	di,si
 41056                                  	mov	dx,rpFind6Len ; 3
 41057                                  	mov	si,rpRepl6
 41058                                  	mov	cx,rpRepl6Len ; 9
 41059                                  	call	GenPatch			; patch out find6 code
 41060                                  
 41061                                  	pop	di
 41062                                  	mov	dx,rpFind7bLen ; 3
 41063                                  	mov	si,rpRepl7
 41064                                  	mov	cx,rpRepl7Len ; 9
 41065                                  	call	GenPatch			; patch out find7b code
 41066                                  
 41067                                  ;----------------------------------------------------------------------------
 41068                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41069                                  
 41070                                  rpBug4:
 41071                                  	;cmp	word [bp+0],360
 41072                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41073                                  	cmp	word [bp],360
 41074                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41075                                  
 41076                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41077                                  	call	FindBadCode
 41078                                  	jc	short rp3Exit
 41079                                  
 41080                                  	push	di				; save find9 code offset
 41081                                  
 41082                                  	mov	di,si
 41083                                  	mov	dx,3
 41084                                  	mov	si,rpRepl8
 41085                                  	mov	cx,rpRepl8Len ; 4
 41086                                  	call	GenPatch			; patch out find8 code
 41087                                  
 41088                                  	pop	di				; find9 offset
 41089                                  	;mov	bx,[bp+4]
 41090                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41091                                  	call	GenJump 			;   patch area
 41092                                  
 41093                                  	mov	si,rpRepl9			; copy replacement code to
 41094                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41095                                  	call	CopyPatch			;   so no jmp back to main-line
 41096                                  
 41097                                  rp3Exit:
 41098                                  	add	sp,StackVars.size
 41099                                  	pop	bp
 41100                                  	pop	ds
 41101                                  	pop	es
 41102                                  	pop	di
 41103                                  	pop	si
 41104                                  	pop	dx
 41105                                  	pop	cx
 41106                                  	pop	bx
 41107                                  	pop	ax
 41108                                  	retn
 41109                                  
 41110                                  ;----------------------------------------------------------------------------
 41111                                  ;
 41112                                  ; FindBadCode
 41113                                  ;
 41114                                  ; Searches Rational code segment looking for a pair of find strings (all
 41115                                  ; patches have at least two find strings).
 41116                                  ;
 41117                                  ; Entry:
 41118                                  ;	ES    = code segment to search
 41119                                  ;	DS:BX = search pair structure for this search
 41120                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41121                                  ;
 41122                                  ; Exit:
 41123                                  ;	CY flag clear if both strings found, and
 41124                                  ;	SI    = offset in ES of 1st string
 41125                                  ;	DI    = offset in ES of 2nd string
 41126                                  ;	CY set if either string not found, or strings too far apart
 41127                                  ;
 41128                                  ; Used:
 41129                                  ;	CX
 41130                                  ;
 41131                                  ;----------------------------------------------------------------------------
 41132                                  
 41133                                  ;struc SearchPair
 41134                                  ; .sp_off1: resw 1	; offset of 1st search string
 41135                                  ; .sp_len1: resw 1	; length of 1st search string
 41136                                  ; .sp_off2: resw 1	; 2nd string
 41137                                  ; .sp_len2: resw 1	; 2nd string
 41138                                  ; .sp_diff: resw 1	; max difference between offsets
 41139                                  ; .size:
 41140                                  ;endstruc
 41141                                  
 41142                                  FindBadCode:
 41143                                  	;mov	cx,[bp+2]
 41144                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41145                                  
 41146                                  	mov	si,[bx]	; mov si,[bx+0]
 41147                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41148                                  	
 41149                                  	;mov	dx,[bx+2]
 41150                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41151                                  	call	ScanCodeSeq
 41152                                  	jnz	short fbc_error		; done if 1st not found
 41153                                  
 41154                                  	push	di			; save 1st string offset
 41155                                  
 41156                                  	;mov	si,[bx+4]
 41157                                  	mov	si,[bx+SearchPair.sp_off2]
 41158                                  	;mov	dx,[bx+6]
 41159                                  	mov	dx,[bx+SearchPair.sp_len2]
 41160                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41161                                  
 41162                                  	pop	si			; restore 1st string offset
 41163                                  	jnz	short fbc_error
 41164                                  
 41165                                  	mov	ax,di			; sanity check that
 41166                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41167                                  	jc	short fbc_error
 41168                                  	;cmp	ax,[bx+8]
 41169                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41170                                  	ja	short fbc_error
 41171                                  
 41172                                  	clc
 41173                                  	retn
 41174                                  
 41175                                  fbc_error:
 41176                                  	stc
 41177                                  	retn
 41178                                  
 41179                                  ;----------------------------------------------------------------------------
 41180                                  ;
 41181                                  ; GenPatch
 41182                                  ;
 41183                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41184                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41185                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41186                                  ; code.
 41187                                  ;
 41188                                  ; Entry:
 41189                                  ;	ES:DI = start of buggy code to be patched
 41190                                  ;	DX    = length of buggy code to be patched
 41191                                  ;	DS:SI = replacement patch code
 41192                                  ;	CX    = length of replacement patch code
 41193                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41194                                  ;
 41195                                  ; Exit:
 41196                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41197                                  ;
 41198                                  ; Used:
 41199                                  ;	AX, BX, SI, Flags
 41200                                  ;
 41201                                  ;----------------------------------------------------------------------------
 41202                                  
 41203                                  GenPatch:
 41204                                  	push	di			;save offset of buggy code
 41205                                  
 41206                                  	;mov	bx,[bp+4]
 41207                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41208                                  					;jump from buggy code to patch area
 41209                                  	call	GenJump
 41210                                  
 41211                                  	call	CopyPatch		;copy replacement code to patch area
 41212                                  
 41213                                  	pop	bx			;offset of buggy code + buggy code
 41214                                  	add	bx,dx			;  length = return from patch offset
 41215                                  
 41216                                  	call	GenJump 		;jump from patch area back to main-
 41217                                  	;mov	[bp+4],di
 41218                                  	mov	[bp+StackVars.sv_pPatch],di
 41219                                  					;  line code, update patch pointer
 41220                                  	retn
 41221                                  
 41222                                  ;----------------------------------------------------------------------------
 41223                                  ;
 41224                                  ; CopyPatch
 41225                                  ;
 41226                                  ; Copies patch code to patch location.
 41227                                  ;
 41228                                  ; Entry:
 41229                                  ;	DS:SI = patch code to be copied
 41230                                  ;	ES    = segment of code to patch
 41231                                  ;	CX    = length of code to copy
 41232                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41233                                  ;
 41234                                  ; Exit:
 41235                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41236                                  ;
 41237                                  ; Used:
 41238                                  ;	SI, Flags
 41239                                  ;
 41240                                  ;----------------------------------------------------------------------------
 41241                                  
 41242                                  CopyPatch:
 41243                                  	push	cx
 41244                                  	;mov	di,[bp+4]
 41245                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41246                                  	cld
 41247                                  	rep movsb
 41248                                  	pop	cx
 41249                                  	;mov	[bp+4],di
 41250                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41251                                  	retn
 41252                                  
 41253                                  ;----------------------------------------------------------------------------
 41254                                  ;
 41255                                  ; GenJump
 41256                                  ;
 41257                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41258                                  ;
 41259                                  ; Entry:
 41260                                  ;	ES:DI = from location (where to put jmp instruction)
 41261                                  ;	BX    = to location (where to jump to)
 41262                                  ;
 41263                                  ; Exit:
 41264                                  ;	DI = byte after generated jump
 41265                                  ;
 41266                                  ; Used:
 41267                                  ;	AX
 41268                                  ;
 41269                                  ;----------------------------------------------------------------------------
 41270                                  
 41271                                  GenJump:
 41272                                  	mov	al,0E9h		; jmp rel16 opcode
 41273                                  	stosb
 41274                                  
 41275                                  	mov	ax,bx		; calc offset to 'to' location
 41276                                  	sub	ax,di
 41277                                  	sub	ax,2
 41278                                  
 41279                                  	stosw			; output offset
 41280                                  
 41281                                  	retn
 41282                                  
 41283                                  ;----------------------------------------------------------------------------
 41284                                  ;
 41285                                  ; ScanCodeSeq
 41286                                  ;
 41287                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41288                                  ;
 41289                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41290                                  ;
 41291                                  ;----------------------------------------------------------------------------
 41292                                  
 41293                                  ScanCodeSeq:
 41294                                  	mov	di,200h
 41295                                  ScanCodeSeq_di:
 41296                                  	push	cx
 41297                                  	sub	cx,dx
 41298                                  	inc	cx
 41299                                  scsagain:
 41300                                  	push	si
 41301                                  	push	di
 41302                                  	push	cx
 41303                                  	mov	cx,dx
 41304                                  	rep	cmpsb
 41305                                  	pop	cx
 41306                                  	pop	di
 41307                                  	pop	si
 41308                                  	je	short scsfound
 41309                                  	inc	di
 41310                                  	loop	scsagain
 41311                                  scsfound:
 41312                                  	pop	cx
 41313                                  vvexit:		; 18/12/2022
 41314                                  	retn
 41315                                  	
 41316                                  ;----------------------------------------------------------------------------
 41317                                  ;
 41318                                  ; VerifyVersion
 41319                                  ;
 41320                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41321                                  ; from ES:2A.
 41322                                  ;
 41323                                  ;       Entry: AX = binary version number 
 41324                                  ;       Exit : Z flag set if version numbers match
 41325                                  ;
 41326                                  ;----------------------------------------------------------------------------
 41327                                  
 41328                                  VerifyVersion:
 41329                                  	mov	si,[es:2Ah]		; offset of version number
 41330                                  					;  in ascii
 41331                                  	mov	bl,10
 41332                                  	add	si,3			; point to last digit
 41333                                  
 41334                                  	call	VVDigit
 41335                                  	jne	short vvexit
 41336                                  	call	VVDigit
 41337                                  	jne	short vvexit
 41338                                  	cmp	byte [es:si],'.'
 41339                                  	jne	short vvexit
 41340                                  	dec	si
 41341                                  	;call	VVDigit
 41342                                  	; 18/12/2022
 41343                                  	;jmp	short VVDigit
 41344                                  ;vvexit:
 41345                                  	;retn
 41346                                  VVDigit:
 41347                                  	div	bl
 41348                                  	add	ah,'0'
 41349                                  	dec	si
 41350                                  	cmp	[es:si+1],ah
 41351                                  	mov	ah,0			; do not xor or sub we need Z
 41352                                  	retn
 41353                                  
 41354                                  %endif
 41355                                  
 41356                                  ;-----------------------------------------------------------------------
 41357                                  
 41358                                  ; 23/05/2019 - Retro DOS v4.0
 41359                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41360                                  
 41361                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41362                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41363                                  
 41364                                  exepatch_start:	 ; label byte
 41365                                  
 41366                                  	; The following is the code that'll be layed over the buggy unpack
 41367                                  	; code.
 41368                                  str1:
 41369 0000737B 06                      	db  06h	  		;push	es		 
 41370 0000737C 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41371                                  
 41372                                  first_stop equ	$-str1
 41373                                  			
 41374 0000737E 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41375                                  
 41376                                  first:  ; label	byte
 41377                                  
 41378 00007380 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41379 00007382 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41380 00007384 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41381 00007387 57                      	db  57h	    		;push	di
 41382 00007388 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41383 0000738B B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41384 0000738D F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41385 0000738F 47                      	db  47h	    		;inc	di			
 41386 00007390 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41387 00007392 5F                      	db  5Fh	    		;pop	di
 41388 00007393 58                      	db  58h	    		;pop	ax
 41389                                  
 41390                                  second_stop equ	$-first
 41391                                  
 41392 00007394 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41393                                  
 41394                                  second: ; label	byte
 41395                                  
 41396 00007396 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41397                                  		    		;NextRec:				
 41398 00007398 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41399                                  		    		;norm_agn:				
 41400 0000739B 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41401 0000739D F7D0                    	db  0F7h,0D0h		;not	ax		
 41402 0000739F D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41403 000073A1 7413                    	db  74h,13h		;jz	short SI_ok			
 41404 000073A3 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41405 000073A5 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41406 000073A8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41407 000073AA 7308                    	db  73h,08h		;jnc	short SItoDS			
 41408 000073AC F7DA                    	db  0F7h,0DAh		;neg	dx			
 41409 000073AE D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41410 000073B0 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41411 000073B2 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41412                                  				;SItoDS: 				
 41413 000073B4 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41414                                  				;SI_ok:					
 41415 000073B6 87F7                    	db  87h,0F7h		;xchg	si,di			
 41416 000073B8 1E                      	db  1Eh			;push	ds			
 41417 000073B9 06                      	db  06h			;push	es			
 41418 000073BA 1F                      	db  1Fh			;pop	ds			
 41419 000073BB 07                      	db  07h			;pop	es			
 41420 000073BC FECD                    	db  0FEh,0CDh		;dec	ch			
 41421 000073BE 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41422 000073C0 AC                      	db  0ACh		;lodsb			
 41423 000073C1 92                      	db  92h			;xchg	dx,ax
 41424 000073C2 4E                      	db  4Eh			;dec	si
 41425 000073C3 AD                      	db  0ADh		;lodsw			
 41426 000073C4 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41427 000073C6 46                      	db  46h			;inc	si		
 41428 000073C7 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41429 000073C9 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41430 000073CB 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41431 000073CD 7505                    	db  75h,05h		;jne	short TryEnum
 41432 000073CF AC                      	db  0ACh		;lodsb				
 41433 000073D0 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41434                                  
 41435                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41436 000073D2 EB06                    	db  0EBh,06h		;jmp	short TryNext
 41437                                  
 41438                                  				;TryEnum:
 41439 000073D4 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41440 000073D6 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41441 000073D8 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41442                                  				;TryNext:
 41443                                  
 41444 000073DA 92                      	db  92h			;xchg	dx,ax
 41445                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41446                                  
 41447 000073DB A801                    	db  0A8h,01h		;test	al,1			
 41448 000073DD 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41449 000073DF 9090                    	db  90h,90h		;nop,nop
 41450                                  	
 41451                                  last_stop equ $-second
 41452                                  size_str1 equ $-str1
 41453                                  
 41454                                  	; The following is the code that we need to look for in the exe
 41455                                  	; file.
 41456                                  
 41457                                  scan_patch1: ; label byte
 41458                                  
 41459 000073E1 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41460 000073E3 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41461 000073E5 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41462 000073E7 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41463 000073E9 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41464 000073EB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41465 000073EE B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41466 000073F1 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41467 000073F3 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41468 000073F5 47                      	db  47h			;inc	di			
 41469 000073F6 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41470 000073F8 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41471 000073FA 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41472 000073FC 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41473 000073FE BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41474                                  				;NextRec:
 41475 00007401 B104                    	db  0B1h,04h		;mov	cl,4
 41476 00007403 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41477 00007405 F7D0                    	db  0F7h,0D0h		;not	ax		
 41478 00007407 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41479 00007409 7409                    	db  74h,09h		;jz	short SI_ok
 41480 0000740B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41481 0000740D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41482 0000740F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41483 00007411 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41484                                  	       			;SI_ok:
 41485 00007414 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41486 00007416 F7D0                    	db  0F7h,0D0h		;not	ax
 41487 00007418 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41488 0000741A 7409                    	db  74h,09h		;jz	short DI_ok
 41489 0000741C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41490 0000741E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41491 00007420 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41492 00007422 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41493                                  				;DI_ok:
 41494                                  
 41495                                  size_scan_patch1 equ $-scan_patch1
 41496                                  
 41497                                  scan_patch2: ; label byte
 41498                                  			
 41499 00007425 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41500 00007427 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41501 00007429 48                      	db  48h			;dec	ax
 41502 0000742A 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41503 0000742C 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41504 0000742E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41505 00007431 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41506 00007434 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41507 00007436 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41508 00007438 47                      	db  47h			;inc	di			
 41509 00007439 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41510 0000743B 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41511 0000743D 48                      	db  48h			;dec	ax
 41512 0000743E 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41513 00007440 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41514                                  				;NextRec:
 41515 00007443 B104                    	db  0B1h,04h		;mov	cl,4
 41516 00007445 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41517 00007447 F7D0                    	db  0F7h,0D0h		;not	ax		
 41518 00007449 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41519 0000744B 740A                    	db  74h,0Ah		;jz	short SI_ok
 41520 0000744D 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41521 0000744F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41522 00007451 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41523 00007453 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41524                                  				;or	si,0FFF0H
 41525                                  				;SI_ok:
 41526 00007457 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41527 00007459 F7D0                    	db  0F7h,0D0h		;not	ax
 41528 0000745B D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41529 0000745D 740A                    	db  74h,0Ah		;jz	short DI_ok
 41530 0000745F 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41531 00007461 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41532 00007463 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41533 00007465 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41534                                  				;or	di,0FFF0H
 41535                                  				;DI_ok:
 41536                                  
 41537                                  size_scan_patch2 equ $-scan_patch2
 41538                                  
 41539                                  scan_patch3: ; label byte
 41540                                  
 41541 00007469 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41542 0000746B 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41543 0000746D 48                      	db  48h			;dec	ax
 41544 0000746E 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41545 00007470 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41546 00007472 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41547 00007475 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41548 00007478 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41549 0000747A F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41550 0000747C 47                      	db  47h			;inc	di			
 41551 0000747D 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41552 0000747F 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41553 00007481 48                      	db  48h			;dec	ax
 41554 00007482 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41555 00007484 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41556                                  				;NextRec:
 41557 00007487 B104                    	db  0B1h,04h		;mov	cl,4
 41558 00007489 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41559 0000748B F7D0                    	db  0F7h,0D0h		;not	ax		
 41560 0000748D D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41561 0000748F 7409                    	db  74h,09h		;jz	short SI_ok
 41562 00007491 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41563 00007493 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41564 00007495 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41565 00007497 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41566                                  				;SI_ok:
 41567 0000749A 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41568 0000749C F7D0                    	db  0F7h,0D0h		;not	ax
 41569 0000749E D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41570 000074A0 7409                    	db  74h,09h		;jz	short DI_ok
 41571 000074A2 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41572 000074A4 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41573 000074A6 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41574 000074A8 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41575                                  				;DI_ok:
 41576                                  
 41577                                  size_scan_patch3 equ $-scan_patch3
 41578                                  
 41579                                  scan_com: ; label byte
 41580                                  
 41581 000074AB AC                      	db  0ACh		;lodsb			
 41582 000074AC 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41583 000074AE 4E                      	db  4Eh			;dec	si
 41584 000074AF AD                      	db  0ADh		;lodsw			
 41585 000074B0 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41586 000074B2 46                      	db  46h			;inc	si		
 41587 000074B3 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41588 000074B5 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41589 000074B7 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41590 000074B9 7506                    	db  75h,06h		;jne	short TryEnum
 41591 000074BB AC                      	db  0ACh		;lodsb				
 41592 000074BC F3AA                    	db  0F3h,0AAh		;rep stosb			
 41593 000074BE EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41594                                  				;TryEnum:
 41595 000074C1 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41596 000074C3 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41597 000074C5 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41598                                  				;TryNext:
 41599 000074C7 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41600 000074C9 A801                    	db  0A8h,01h		;test	al,1			
 41601                                  ;	db  74h,0BAh		;jz	short NextRec			
 41602                                  
 41603                                  size_scan_com	equ	$-scan_com
 41604                                  
 41605                                  ;-----------------------------------------------------------------------
 41606                                  
 41607                                  ; 23/05/2019 - Retro DOS v4.0
 41608                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41609                                  
 41610                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41611                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41612                                  
 41613                                  ExePatch:
 41614                                  	; 28/12/2022 - Retro DOS v4.1
 41615                                  	;call	ExePackPatch
 41616                                  	;;call	word [ss:RationalPatchPtr]
 41617                                  	;retn
 41618                                  	; 28/12/2022
 41619                                  	;jmp	short ExePackPatch
 41620                                  
 41621                                  ;-----------------------------------------------------------------------
 41622                                  ;
 41623                                  ; Procedure Name 	: ExePackPatch
 41624                                  ;
 41625                                  ; Inputs	 	: DS 			-> DOSDATA
 41626                                  ;			  ES:0 			-> read in image
 41627                                  ;			  ax:cx = start cs:ip of program
 41628                                  ; Output		:		
 41629                                  ;
 41630                                  ;	1. If ES <= 0fffh
 41631                                  ;	   2. if exepack signature ('RB') found
 41632                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41633                                  ;	       	 4. if rest of the code & checksum compares
 41634                                  ;	  	    5. overlay buggy code with code in 
 41635                                  ;		       doscode:str1.
 41636                                  ;		 6. endif
 41637                                  ;	      7. endif
 41638                                  ;	   8. endif
 41639                                  ;	9. endif
 41640                                  ;
 41641                                  ;
 41642                                  ; Uses			: NONE
 41643                                  ;
 41644                                  ;-----------------------------------------------------------------------
 41645                                  		
 41646                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41647                                  	; 23/05/2019 - Retro DOS v4.0	
 41648                                  ExePackPatch:
 41649 000074CB 53                      	push	bx
 41650 000074CC 8CC3                    	mov	bx,es			; bx has load segment
 41651 000074CE 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41652 000074D2 7602                    	jbe	short ep_cont		; N: 
 41653 000074D4 5B                      	pop	bx			; Y: no need to patch
 41654 000074D5 C3                      	retn
 41655                                  ep_cont:
 41656 000074D6 1E                      	push	ds
 41657 000074D7 06                      	push	es
 41658 000074D8 50                      	push	ax
 41659 000074D9 51                      	push	cx
 41660 000074DA 56                      	push	si
 41661 000074DB 57                      	push	di
 41662                                  	
 41663                                  		; M033 - start
 41664                                  		; exepacked programs have an IP of 12h (>=2)
 41665                                  
 41666 000074DC 83E902                  	sub	cx,2			; Q: is IP >=2 
 41667 000074DF 7303                    	jnb	short epp_1		; N: exit
 41668 000074E1 E9C500                  	jmp	ep_notpacked
 41669                                  					; ax:cx now points to location of
 41670                                  					; 'RB' if this is an exepacked file.
 41671                                  		; M033 - end
 41672                                  epp_1:
 41673 000074E4 89CF                    	mov	di,cx
 41674 000074E6 8EC0                    	mov	es,ax
 41675 000074E8 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41676                                  					; unpack_offset
 41677                                  
 41678 000074ED 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41679                                  	;ljne	ep_notpacked
 41680 000074F2 7403                    	je	short epp_2
 41681 000074F4 E9B200                  	jmp	ep_notpacked
 41682                                  epp_2:
 41683 000074F7 0E                      	push	cs
 41684 000074F8 1F                      	pop	ds			; set ds to cs
 41685                                  
 41686                                  	;add	di,6Ch
 41687 000074F9 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41688                                  					;          file where we hope to find
 41689                                  					;	   scan string. 
 41690                                  
 41691 000074FC E8B200                  	call	chk_common_str		; check for match
 41692                                  
 41693 000074FF 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41694                                  					; N: check at patch2_offset
 41695                                  					; Y: check for rest of patch string
 41696 00007501 BE[E173]                	mov	si,scan_patch1
 41697                                  					; ds:si -> scan string 
 41698 00007504 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41699                                  
 41700                                  	;add	di,28h
 41701                                  	; 07/12/2022
 41702 00007509 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41703                                  					;          file where we hope to find
 41704                                  					;	   scan string. 
 41705                                  	;mov	cx,68
 41706 0000750C B94400                  	mov	cx,size_scan_patch1
 41707                                  	;mov	bx,142
 41708 0000750F BB8E00                  	mov	bx,CHKSUM1_LEN
 41709                                  	;mov	ax,0EF4Eh
 41710 00007512 B84EEF                  	mov	ax,PATCH1_CHKSUM
 41711 00007515 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41712 00007518 7208                    	jc	short ep_done1		; Q: did we pass the test
 41713                                  					; N: exit
 41714                                  					; Y: overlay code with new 
 41715 0000751A BE[7B73]                	mov	si,str1
 41716                                  	;mov	cx,102
 41717 0000751D B96600                  	mov	cx,size_str1
 41718                                  	
 41719 00007520 F3A4                    	rep	movsb
 41720                                  ep_done1:
 41721 00007522 E98400                  	jmp	ep_done
 41722                                  
 41723                                  ep_chkpatch2:
 41724                                  	;mov	di,76h
 41725 00007525 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41726                                  					; in another version of unpack
 41727 00007528 E88600                  	call	chk_common_str		; check for match
 41728                                  
 41729 0000752B 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41730                                  					; N: check for patch3_offset
 41731                                  					; Y: check for rest of patch string
 41732                                  
 41733 0000752D BE[2574]                	mov	si,scan_patch2
 41734                                  					; ds:si -> scan string 
 41735                                  	;mov	di,32h
 41736 00007530 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41737                                  					;          file where we hope to find
 41738                                  	;mov	cx,68			;	   scan string. 
 41739 00007533 B94400                  	mov	cx,size_scan_patch2
 41740                                  	;mov	bx,140
 41741 00007536 BB8C00                  	mov	bx,CHKSUM2_LEN
 41742                                  	;mov	ax,78B2h
 41743 00007539 B8B278                  	mov	ax,PATCH2_CHKSUM
 41744 0000753C E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41745                                  
 41746                                  					; M046 - Start
 41747                                  					; Q: did we pass the test
 41748 0000753F 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41749                                  					; N: try with a different chksum
 41750                                  
 41751                                  
 41752 00007541 BE[2574]                	mov	si,scan_patch2
 41753                                  					; ds:si -> scan string 
 41754                                  	;mov	cx,68
 41755 00007544 B94400                  	mov	cx,size_scan_patch2
 41756                                  	;mov	bx,129
 41757 00007547 BB8100                  	mov	bx,CHKSUM2A_LEN
 41758                                  	;mov	ax,1C47h
 41759 0000754A B8471C                  	mov	ax,PATCH2A_CHKSUM
 41760 0000754D E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41761                                  					; Q: did we pass the test
 41762 00007550 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41763                                  					; Y: overlay code with new 
 41764                                  						
 41765                                  ep_patchcode2:			       	; M046 - End
 41766 00007552 BE[7B73]                	mov	si,str1
 41767                                  	;mov	cx,3
 41768 00007555 B90300                  	mov	cx,first_stop
 41769 00007558 F3A4                    	rep	movsb
 41770 0000755A B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41771 0000755D AB                      	stosw
 41772 0000755E 83C602                  	add	si,2
 41773                                  	;mov	cx,20
 41774 00007561 B91400                  	mov	cx,second_stop
 41775 00007564 F3A4                    	rep	movsb
 41776 00007566 AB                      	stosw				; put in dec ax and nop
 41777 00007567 83C602                  	add	si,2
 41778                                  	;mov	cx,75
 41779 0000756A B94B00                  	mov	cx,last_stop
 41780 0000756D F3A4                    	rep	movsb
 41781 0000756F EB38                    	jmp	short ep_done
 41782                                  
 41783                                  ep_chkpatch3:
 41784                                  	;mov	di,74h
 41785 00007571 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41786                                  					; in another version of unpack
 41787 00007574 E83A00                  	call	chk_common_str		; check for match
 41788                                  
 41789 00007577 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41790                                  					; N: exit
 41791                                  					; Y: check for rest of patch string
 41792 00007579 BE[6974]                	mov	si,scan_patch3
 41793                                  					; ds:si -> scan string 
 41794                                  	;mov	di,32h
 41795 0000757C BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41796                                  					;          file where we hope to find
 41797                                  					;	   scan string. 
 41798                                  	;mov	cx,66
 41799 0000757F B94200                  	mov	cx,size_scan_patch3
 41800                                  	;mov	bx,139
 41801 00007582 BB8B00                  	mov	bx,CHKSUM3_LEN
 41802                                  	;mov	ax,4EDEh
 41803 00007585 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41804 00007588 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41805 0000758B 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41806                                  					; N: exit
 41807                                  					; Y: overlay code with new 
 41808 0000758D BE[7B73]                	mov	si,str1
 41809                                  	;mv	cx,3
 41810 00007590 B90300                  	mov	cx,first_stop
 41811 00007593 F3A4                    	rep	movsb
 41812 00007595 B048                    	mov	al,48h			; al = opcode for dec ax
 41813 00007597 AA                      	stosb
 41814 00007598 83C602                  	add	si,2
 41815                                  	;mov	cx,20
 41816 0000759B B91400                  	mov	cx,second_stop
 41817 0000759E F3A4                    	rep	movsb
 41818 000075A0 AA                      	stosb				; put in dec ax
 41819 000075A1 83C602                  	add	si,2
 41820                                  	;mov	cx,75
 41821 000075A4 B94B00                  	mov	cx,last_stop
 41822 000075A7 F3A4                    	rep	movsb
 41823                                  
 41824                                  ep_notpacked:
 41825                                  	;stc
 41826                                  ep_done:
 41827 000075A9 5F                      	pop	di
 41828 000075AA 5E                      	pop	si
 41829 000075AB 59                      	pop	cx
 41830 000075AC 58                      	pop	ax
 41831 000075AD 07                      	pop	es
 41832 000075AE 1F                      	pop	ds
 41833 000075AF 5B                      	pop	bx
 41834 000075B0 C3                      	retn
 41835                                  
 41836                                  ;-------------------------------------------------------------------------
 41837                                  ;
 41838                                  ; 	Procedure Name	: chk_common_str
 41839                                  ;
 41840                                  ;	Input		: DS = DOSCODE
 41841                                  ;			; ES:DI points to string in packed file
 41842                                  ;
 41843                                  ;	Output		; Z if match else NZ
 41844                                  ;
 41845                                  ;-------------------------------------------------------------------------
 41846                                  
 41847                                  	; 23/05/2019 - Retro DOS v4.0
 41848                                  chk_common_str:
 41849 000075B1 BE[AB74]                	mov	si,scan_com
 41850                                  					; ds:si -> scan string 
 41851                                  	;mov	cx,32
 41852 000075B4 B92000                  	mov	cx,size_scan_com
 41853                                  
 41854 000075B7 F3A6                    	repe	cmpsb	       
 41855                                  
 41856                                  					; M046 - start
 41857                                  	; a fourth possible version of these exepacked programs have a 
 41858                                  	; 056h instead of 06Bh. See scan_com above
 41859                                  	;
 41860                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41861                                  	;
 41862                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41863                                  	; we shall try to match the rest of the string
 41864                                  	;
 41865                                  
 41866 000075B9 7409                    	jz	short ccs_done
 41867 000075BB 26807DFF56              	cmp	byte [es:di-1],56h
 41868 000075C0 7502                    	jnz	short ccs_done
 41869                                  
 41870 000075C2 F3A6                    	repe	cmpsb	    
 41871                                  ccs_done:				; M046 - end
 41872 000075C4 C3                      	retn
 41873                                  
 41874                                  ;-------------------------------------------------------------------------
 41875                                  ;
 41876                                  ;	Procedure Name	: chk_patchsum
 41877                                  ;
 41878                                  ;	Input		: DS:SI -> string we're looking for
 41879                                  ;			: ES:DI -> offset in packed file
 41880                                  ;			: CX 	= scan length
 41881                                  ;			: BX	= length of check sum
 41882                                  ;			: AX 	= value of check sum
 41883                                  ;
 41884                                  ;	Output		: if patch & check sum compare
 41885                                  ;				NC
 41886                                  ;			  else
 41887                                  ;				CY
 41888                                  ;
 41889                                  ;	Uses		: AX, BX, CX, SI
 41890                                  ;
 41891                                  ;-------------------------------------------------------------------------
 41892                                  
 41893                                  	; 23/05/2019 - Retro DOS v4.0
 41894                                  chk_patchsum:
 41895 000075C5 57                      	push	di
 41896                                  
 41897 000075C6 F3A6                    	repe	cmpsb			   
 41898                                  
 41899 000075C8 7518                    	jnz	short cp_fail		; Q: does the patch match
 41900                                  					; N: exit
 41901                                  					; Y:	
 41902                                  
 41903                                  		; we do a check sum starting from the location of the 
 41904                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41905                                  		; unpacking code.
 41906                                  
 41907 000075CA 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41908 000075CF 89D9                    	mov	cx,bx			; cx = length of check sum
 41909                                  
 41910 000075D1 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41911 000075D3 31C0                    	xor	ax,ax
 41912                                  ep_chksum:
 41913 000075D5 260305                  	add	ax,[es:di]
 41914 000075D8 83C702                  	add	di,2
 41915 000075DB E2F8                    	loop	ep_chksum
 41916                                  
 41917 000075DD 5F                      	pop	di			; restore di
 41918                                  
 41919 000075DE 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41920                                  	;jne	short cp_fail		; N: exit
 41921                                  					; Y: 
 41922                                  	; 25/09/2023
 41923                                  	;clc	
 41924                                  	;retn
 41925 000075E0 74E2                    	je	short ccs_done ; cf=0
 41926                                  	
 41927                                  cp_fail:
 41928 000075E2 F9                      	stc
 41929 000075E3 C3                      	retn
 41930                                  
 41931                                  ; 28/12/2022 - Retro DOS v4.1
 41932                                  %if 0
 41933                                  ;--------------------------------------------------------------------------- 
 41934                                  
 41935                                  
 41936                                  ; M020 : BEGIN
 41937                                  ;
 41938                                  ;---------------------------------------------------------------------------
 41939                                  ;
 41940                                  ; procedure : RationalPatch
 41941                                  ;
 41942                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41943                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41944                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41945                                  ;
 41946                                  ; THE BUG is in the following code sequence:
 41947                                  ;
 41948                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41949                                  ;90		even				; word align
 41950                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41951                                  ;e8 xx xx	call	set_A20			; enable A20
 41952                                  ;
 41953                                  ; This patch routine replaces the mov & the loop with a far call into a
 41954                                  ; routine in DOS data segment which is in low memory (because A20 line
 41955                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41956                                  ; a mov & loop.
 41957                                  ;
 41958                                  ; Identification of Buggy Rational EXE
 41959                                  ; ====================================
 41960                                  ;
 41961                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41962                                  ;
 41963                                  ; OFFSET				Contains
 41964                                  ; ------				--------
 41965                                  ; 0000h			100 times Version number in binary
 41966                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41967                                  ;
 41968                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41969                                  ;
 41970                                  ; 002ah			offset where version number is stored in ASCII
 41971                                  ;				e.g. '3.48A'
 41972                                  ;
 41973                                  ; 0030h			offset of copyright string. Copyright strings either
 41974                                  ;			start with "DOS/16M Copyright...." or
 41975                                  ;			"Copyright.....". The string contains
 41976                                  ;			"Rational Systems, Inc."
 41977                                  ;
 41978                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41979                                  ;				from the program image
 41980                                  ; 0016h			word : size of buggy code segment
 41981                                  ;
 41982                                  ;	Buggy code is definite to start after offset 200h in its segment
 41983                                  ;
 41984                                  ;----------------------------------------------------------------------------
 41985                                  
 41986                                  ; 23/05/2019 - Retro DOS v4.0
 41987                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41988                                  
 41989                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41990                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41991                                  
 41992                                  RScanPattern1:
 41993                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41994                                  
 41995                                  RLen1 equ $ - RScanPattern1
 41996                                  
 41997                                  RScanPattern2:
 41998                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41999                                  
 42000                                  RLen2 equ $ - RScanPattern2
 42001                                  
 42002                                  RScanPattern3:
 42003                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42004                                  
 42005                                  RLen3 equ $ - RScanPattern2
 42006                                  
 42007                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42008                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42009                                  
 42010                                  ;----------------------------------------------------------------------------
 42011                                  ;
 42012                                  ; INPUT : ES = segment where program got loaded
 42013                                  ;
 42014                                  ;----------------------------------------------------------------------------
 42015                                  
 42016                                  RationalPatch:
 42017                                  	cld
 42018                                  	push	ax
 42019                                  	push	bx
 42020                                  	push	cx
 42021                                  	push	dx
 42022                                  	push	si
 42023                                  	push	di
 42024                                  	push	es
 42025                                  	push	ds			; we use all of them
 42026                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42027                                  	push	cs
 42028                                  	pop	ds
 42029                                  	
 42030                                  	mov	si,RScanPattern1
 42031                                  	;mov	cx,10
 42032                                  	mov	cx,RLen1
 42033                                  	rep	cmpsb			; do we have the pattern ?
 42034                                  	jne	short rpexit
 42035                                  	mov	ax,[es:0]
 42036                                  	cmp	ax,348			; is it a buggy version ?
 42037                                  	jb	short rpexit
 42038                                  	cmp	ax,383			; is it a buggy version
 42039                                  	ja	short rpexit
 42040                                  
 42041                                  	call	VerifyVersion
 42042                                  	jne	short rpexit
 42043                                  
 42044                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42045                                  	sub	cx,200h			; Length we search (we start
 42046                                  					;  at offset 200h)
 42047                                  	mov	es,[es:20h]		; es=buggy code segment
 42048                                  	mov	si,RScanPattern2
 42049                                  	;mov	dx,8	
 42050                                  	mov	dx,RLen2
 42051                                  	call	ScanCodeSeq		; look for code seq with nop
 42052                                  	jz	short rpfound
 42053                                  
 42054                                  	mov	si,RScanPattern3
 42055                                  	;mov	dx,15
 42056                                  	mov	dx,RLen3
 42057                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42058                                  	jnz	short rpexit
 42059                                  
 42060                                  rpfound:
 42061                                  	
 42062                                  ;	we set up a far call into DOS data
 42063                                  ;	dx has the length of the code seq we were searching for
 42064                                  
 42065                                  	mov	al,9Ah			; far call opcode
 42066                                  	stosb
 42067                                  	mov	ax,RatBugCode
 42068                                  	stosw
 42069                                  	mov	ax,ss
 42070                                  	stosw
 42071                                  	mov	cx,dx
 42072                                  	sub	cx,6			; filler (with NOPs)
 42073                                  	mov	al,90h
 42074                                  	rep	stosb
 42075                                  rpexit:
 42076                                  	pop	ds
 42077                                  	pop	es
 42078                                  	pop	di
 42079                                  	pop	si
 42080                                  	pop	dx
 42081                                  	pop	cx
 42082                                  	pop	bx
 42083                                  	pop	ax
 42084                                  	retn
 42085                                  
 42086                                  ; M020 END
 42087                                  
 42088                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42089                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42090                                  
 42091                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42092                                  
 42093                                  ;----------------------------------------------------------------------------
 42094                                  ;
 42095                                  ; ScanCodeSeq
 42096                                  ;
 42097                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42098                                  ;
 42099                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42100                                  ;
 42101                                  ;----------------------------------------------------------------------------
 42102                                  
 42103                                  ScanCodeSeq:
 42104                                  	; 17/12/2022
 42105                                  	mov	di,200h
 42106                                  ;ScanCodeSeq_di:
 42107                                  	push	cx
 42108                                  	sub	cx,dx
 42109                                  	inc	cx
 42110                                  	; 17/12/2022
 42111                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42112                                  	;mov	di,200h
 42113                                  scsagain:
 42114                                  	push	si
 42115                                  	push	di
 42116                                  	push	cx
 42117                                  	mov	cx,dx
 42118                                  	rep	cmpsb
 42119                                  	pop	cx
 42120                                  	pop	di
 42121                                  	pop	si
 42122                                  	je	short scsfound
 42123                                  	inc	di
 42124                                  	loop	scsagain
 42125                                  scsfound:
 42126                                  	pop	cx
 42127                                  vvexit:		; 18/12/2022
 42128                                  	retn
 42129                                  
 42130                                  
 42131                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42132                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42133                                  
 42134                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42135                                  
 42136                                  ;----------------------------------------------------------------------------
 42137                                  ;
 42138                                  ; VerifyVersion
 42139                                  ;
 42140                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42141                                  ; from ES:2A.
 42142                                  ;
 42143                                  ;       Entry: AX = binary version number 
 42144                                  ;       Exit : Z flag set if version numbers match
 42145                                  ;
 42146                                  ;----------------------------------------------------------------------------
 42147                                  
 42148                                  VerifyVersion:
 42149                                  	mov	si,[es:2Ah]		; offset of version number
 42150                                  					;  in ascii
 42151                                  	mov	bl,10
 42152                                  	add	si,3			; point to last digit
 42153                                  
 42154                                  	call	VVDigit
 42155                                  	jne	short vvexit
 42156                                  	call	VVDigit
 42157                                  	jne	short vvexit
 42158                                  	cmp	byte [es:si],'.' ; 2Eh
 42159                                  	jne	short vvexit
 42160                                  	dec	si
 42161                                  	;call	VVDigit
 42162                                  	; 18/12/2022
 42163                                  	;jmp	short VVDigit
 42164                                  ;vvexit:
 42165                                  	;retn
 42166                                  VVDigit:
 42167                                  	div	bl
 42168                                  	add	ah,'0' ; 30h
 42169                                  	dec	si
 42170                                  	cmp	[es:si+1],ah
 42171                                  	mov	ah,0			; do not xor or sub we need Z
 42172                                  	retn
 42173                                  
 42174                                  ;--------------------------------------------------------------------------- 
 42175                                  %endif	; 28/12/2022
 42176                                  
 42177                                  ;---------------------------------------------------------------------------
 42178                                  ;
 42179                                  ;	M068
 42180                                  ;
 42181                                  ; 	Procedure Name	: IsCopyProt
 42182                                  ;
 42183                                  ;	Inputs		: DS:100 -> start of com file just read in
 42184                                  ;
 42185                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42186                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42187                                  ;			  copy protect scheme that relies on the A20 line
 42188                                  ;			  being turned off for it's scheme to work.
 42189                                  ;
 42190                                  ;			  Note: The int 21 function dispatcher will turn 
 42191                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42192                                  ;				and dec the A20OFF_COUNT before	iretting 
 42193                                  ;				to the user. 
 42194                                  ;
 42195                                  ;	Uses		: ES, DI, SI, CX
 42196                                  ;
 42197                                  ;---------------------------------------------------------------------------
 42198                                  
 42199                                  ; 23/05/2019 - Retro DOS v4.0
 42200                                  
 42201                                  CPStartOffset	EQU	0175h
 42202                                  CPID1Offset	EQU	011Bh
 42203                                  CPID2Offset	EQU	0173h
 42204                                  CPID3Offset	EQU	0146h
 42205                                  CPID4Offset	EQU	0124h
 42206                                  ID1		EQU	05343h
 42207                                  ID2		EQU	05044h
 42208                                  ID3		EQU	0F413h
 42209                                  ID4		EQU	08000h
 42210                                  
 42211                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42212                                  
 42213                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42214                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42215                                  
 42216                                  CPScanPattern:
 42217 000075E4 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42218 000075E8 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42219 000075EC C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42220 000075F2 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42221 000075F6 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42222 000075F9 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42223                                  
 42224                                  CPSPlen	EQU $ - CPScanPattern
 42225                                  
 42226                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42227                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42228                                  
 42229                                  IsCopyProt:
 42230 000075FC 813E1B014353            	cmp	word [CPID1Offset],ID1
 42231 00007602 752D                    	jne	short CP_done
 42232                                  
 42233 00007604 813E73014450            	cmp	word [CPID2Offset],ID2
 42234 0000760A 7525                    	jne	short CP_done
 42235                                  
 42236 0000760C 813E460113F4            	cmp	word [CPID3Offset],ID3
 42237 00007612 751D                    	jne	short CP_done
 42238                                  
 42239 00007614 813E24010080            	cmp	word [CPID4Offset],ID4
 42240 0000761A 7515                    	jne	short CP_done
 42241                                  
 42242 0000761C 0E                      	push	cs
 42243 0000761D 07                      	pop	es
 42244 0000761E BF[E475]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42245                                  
 42246 00007621 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42247                                  					; of pattern
 42248                                  
 42249 00007624 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42250 00007627 F3A6                    	repe	cmpsb
 42251 00007629 7506                    	jnz	short CP_done
 42252                                  
 42253 0000762B 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42254                                  CP_done:
 42255 00007631 C3                      	retn
 42256                                  	
 42257                                  ;DOSCODE ENDS
 42258                                  
 42259                                  	;END
 42260                                  
 42261                                  ;----------------------------------------------------------------------------
 42262                                  
 42263                                  ;align 2 ; 05/09/2018 (Error!)
 42264                                  
 42265                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42266                                  ;align 16 ; 08/09/2018 (OK.)
 42267                                  align 2
 42268                                  
 42269                                  ; 06/08/2018 - Retro DOS v3.0
 42270                                  ;============================================================================
 42271                                  ; MSINIT.ASM
 42272                                  ;============================================================================
 42273                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42274                                  ;
 42275                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42276                                  ;
 42277                                  	; 15/07/2018 - Retro DOS v3.0
 42278                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42279                                  
 42280                                  ; temp iret instruction
 42281                                  
 42282                                  
 42283                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42284                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42285                                  
 42286                                  initiret: ; MSDOS 6.0
 42287                                  SYSBUF:
 42288                                  ;IRETT: ; 06/05/2019
 42289 00007632 CF                      	iret
 42290                                  
 42291                                  ; 22/04/2019 - Retro DOS v4.0
 42292                                  
 42293                                  ; pointer to the BIOS data segment that will be available just to the
 42294                                  ; initialization code
 42295                                  
 42296 00007633 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42297                                  
 42298                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42299                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42300                                  
 42301                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42302                                  
 42303                                  ParaRound:
 42304 00007635 83C00F                  	add	ax, 15
 42305 00007638 D1D8                    	rcr	ax, 1
 42306 0000763A D1E8                    	shr	ax, 1
 42307 0000763C D1E8                    	shr	ax, 1
 42308 0000763E D1E8                    	shr	ax, 1
 42309 00007640 C3                      	retn
 42310                                  
 42311                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42312                                  
 42313                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42314                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42315                                  	
 42316                                  	; 30/05/2019
 42317                                  	; 22/04/2019 - Retro DOS v4.0
 42318                                  	; 07/07/2018 - Retro DOS v3.0
 42319                                  	; Retro DOS v2.0 - 03/03/2018
 42320                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42321                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42322                                  DOSINIT:
 42323                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42324                                  	;
 42325                                  	; Far call from SYSINIT
 42326                                  	; DX = Memory size in paragraphs
 42327                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42328                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42329                                  	;
 42330                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42331                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42332                                  
 42333 00007641 FA                              CLI
 42334 00007642 FC                              CLD
 42335                                  
 42336                                  	; 03/11/2022
 42337                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42338                                  	
 42339                                  	; 17/12/2022
 42340                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42341                                  	;push	dx ; =*=		; save parameters from BIOS
 42342                                  	
 42343 00007643 56                      	push	si
 42344 00007644 1E                      	push	ds
 42345 00007645 57                      	push	di			;save di (ptr to BiosComBlock)
 42346                                  
 42347 00007646 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42348                                  
 42349                                  ; First, move the DOS data segment to its final location in low memory
 42350                                  
 42351                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42352                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42353 00007648 B8[C27A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42354                                  
 42355                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42356                                  	;and	ax,~15	; 0FFF0h	; boundary
 42357                                  
 42358                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42359                                  					; code segment
 42360                                  
 42361                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42362 0000764B 83C00F                  	add	ax,15			; round to nearest paragraph
 42363 0000764E 83E0F0                  	and	ax,~15			; boundary
 42364                                  
 42365 00007651 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42366                                  					; code segment
 42367                                  	; 05/12/2022
 42368                                  	; 30/04/2019 - Retro DOS v4.0
 42369                                  	;xor	si,si
 42370                                  	
 42371 00007653 8CC8                    	mov	ax,cs
 42372 00007655 8ED8                    	mov	ds,ax			; ds = current code segment
 42373                                  					; DS:SI now points to dosdata
 42374                                  
 42375                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42376                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42377                                  					;  BData segment. Cannot use
 42378                                  					;  getdseg macro here!!!
 42379                                  	; 17/12/2022
 42380 00007657 8E06[3376]              	mov	es,[InitBioDataSeg]
 42381                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42382                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42383                                  
 42384                                  	;mov	es,[es:3]
 42385 0000765B 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42386                                  
 42387 00007660 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42388                                  
 42389                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42390                                  	;mov	cx,4976  ; 25/05/2019
 42391                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42392                                  	;mov	cx,4962
 42393                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42394 00007662 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42395 00007665 F3A4                    	rep	movsb			; move data to final location
 42396                                  	
 42397 00007667 5F                      	pop	di			; restore ptr to BiosComBlock
 42398 00007668 1F                      	pop	ds			; restore parms from BIOS
 42399 00007669 5E                      	pop	si
 42400                                  	; 17/12/2022
 42401                                  	;pop	dx ; 30/05/2019	
 42402                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42403                                  	;pop	dx ; =*=		
 42404                                  
 42405 0000766A 06                      	push	es
 42406 0000766B 1E                      	push	ds
 42407 0000766C 07                      	pop	es			; es:si -> device chain
 42408 0000766D 1F                      	pop	ds			; ds points to dosdata
 42409                                  
 42410                                  ;SR;
 42411                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42412                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42413                                  ;lie table handling for device drivers. This can be expanded later on to
 42414                                  ;establish a communication block from the BIOS to the DOS.
 42415                                  
 42416                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42417                                  	;mov	[1042h],bx
 42418 0000766E 893E[4010]              	mov	[BiosDataPtr],di
 42419 00007672 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42420                                  
 42421 00007676 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42422                                  
 42423                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42424                                  
 42425 0000767B 2E8C1E[2B50]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42426 00007680 2E8C1E[2F50]            	mov	[cs:LowInt24Addr+2],ds
 42427 00007685 2E8C1E[3350]            	mov	[cs:LowInt28Addr+2],ds
 42428                                  
 42429                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42430                                  	;mov	[584h],sp
 42431                                  	;mov	[586h],ss
 42432 0000768A 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42433 0000768E 8926[8405]              	mov	[USER_SP],sp
 42434 00007692 8C16[8605]              	mov	[USER_SS],ss
 42435                                  
 42436 00007696 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42437 00007698 8ED0                    	mov	ss,ax
 42438                                  
 42439                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42440                                  	;mov	sp,offset dosdata:dskstack
 42441 0000769A BC[2009]                	mov	sp,DSKSTACK
 42442                                  
 42443                                  ;M023
 42444                                  ; Init patch ptrs to default values
 42445                                  
 42446                                  	;mov	word [1212h],RetExePatch
 42447                                  	;mov	word [1214h],RetExePatch
 42448                                  	;mov	word [61h],RetExePatch
 42449 0000769D C706[F811][9D61]        	mov	word [FixExePatch],RetExePatch	; M023
 42450                                  	; 28/12/2022 - Retro DOS v4.1
 42451                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42452 000076A3 C706[6100][9D61]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42453                                  
 42454                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42455                                  %if 0	
 42456                                  
 42457                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42458                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42459                                  ; running in the HMA.
 42460                                  
 42461                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42462                                  	cmp	al,2		;   386 or later?
 42463                                  	mov	ax,Rational386Patch
 42464                                  	jae	short di_set_patch
 42465                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42466                                  di_set_patch:
 42467                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42468                                  
 42469                                  %endif
 42470                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42471                                  
 42472 000076A9 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42473                                  
 42474                                  	; ax now holds segment of DOS code
 42475 000076AB A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42476                                  
 42477 000076AE 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42478 000076B2 8936[4800]              	mov	word [NULDEV],si
 42479                                  ;SR;
 42480                                  ; There are some locations in the Win386 instance data structures
 42481                                  ; which need to be set up with the DOS data segment. First, initialize
 42482                                  ; the segment part of the instance table pointer in the SIS.
 42483                                  
 42484                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42485 000076B6 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42486                                  
 42487                                  ; Now initialize the segment part of the pointer to the data in each
 42488                                  ; instance table entry.
 42489                                  
 42490 000076BA 56                      	push	si		; preserve pointer to device chain
 42491                                  	; 18/12/2022
 42492                                  	; cx = 0
 42493 000076BB B107                    	mov	cl,7
 42494                                  	;mov	cx,7		; There are 7 entries in the instance table
 42495                                  				; M019
 42496                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42497 000076BD BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42498                                  Instance_init_loop:
 42499 000076C0 8C1C                    	mov	[si],ds		; set offset in instance entry
 42500                                  	;add	si,6
 42501 000076C2 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42502 000076C5 E2F9                    	loop	Instance_init_loop
 42503                                  
 42504                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42505                                  
 42506                                  	; 18/12/2022
 42507 000076C7 B105                    	mov	cl,5
 42508                                  	;mov	cx,5		; There are five entries in the instance table
 42509                                  
 42510                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42511                                  	;mov	si,11EDh	; point si to segment field
 42512 000076C9 BE[D311]                	mov	si,OldInstanceJunk+6
 42513                                  OldInstance_init_loop:
 42514 000076CC 8C1C                    	mov	[si],ds		; set offset in instance entry
 42515 000076CE 83C606                  	add	si,6		; move on to next entry
 42516 000076D1 E2F9                    	loop	OldInstance_init_loop
 42517 000076D3 5E                      	pop	si		; restore pointer to device chain
 42518                                  
 42519                                  ; End of WIN386 2.xx compatibility bullshit
 42520                                  
 42521                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42522                                  %if 0	
 42523                                     	; 30/04/2019
 42524                                  	;push	es
 42525                                  	;pop	ds
 42526                                  			; ds:si points to console device
 42527                                  
 42528                                  	; 24/04/2019 - Retro DOS v4.0
 42529                                  
 42530                                  	; 15/07/2018
 42531                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42532                                  	; (Set INT 2Ah handler address to an 'IRET')
 42533                                  
 42534                                  	; need crit vector inited to use deviocall
 42535                                  	;push	ds			; preserve segment of device chain
 42536                                  	push	es ; 30/04/2019
 42537                                  
 42538                                  %endif
 42539                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42540 000076D4 06                      	push	es
 42541                                  	; 17/12/2022
 42542                                  	;pop	ds
 42543                                  	;push	ds
 42544                                  
 42545 000076D5 31C0                    	xor	ax,ax
 42546 000076D7 8ED8                    	mov	ds,ax			; point DS to int vector table
 42547 000076D9 B8[3276]                	mov	ax,initiret
 42548                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42549 000076DC A3A800                  	mov	[addr_int_ibm],ax
 42550 000076DF 8CC8                    	mov	ax,cs
 42551                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42552 000076E1 A3AA00                  	mov	[addr_int_ibm+2],ax
 42553 000076E4 1F                      	pop	ds			; restore segment of device chain
 42554                                  
 42555 000076E5 E81C02                  	call	CHARINIT  		; initialize console driver
 42556 000076E8 56                      	push	si			; save pointer to header
 42557                                  
 42558 000076E9 16                      	push	ss			; move pointer to dos data...
 42559 000076EA 07                      	pop	es			; ...into ES
 42560                                  
 42561                                  	;initialize sft for file 0 (CON)
 42562                                  
 42563                                          ; 07/07/2018 - Retro DOS v3.0
 42564                                  	; 24/04/2019 - Retro DOS v4.0
 42565                                  	;mov	di,SFTABL+6 
 42566 000076EB BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42567 000076EE B80300                          MOV     AX,3
 42568 000076F1 AB                              STOSW           	; Refcount
 42569 000076F2 FEC8                            DEC     AL
 42570 000076F4 AB                              STOSW           	; Access rd/wr, compatibility
 42571 000076F5 30C0                            XOR     AL,AL
 42572 000076F7 AA                              STOSB           	; attribute
 42573                                  	;mov	al,0C3h
 42574 000076F8 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42575 000076FA AB                      	STOSW			; flags
 42576 000076FB 89F0                            mov	ax,si
 42577 000076FD AB                              stosw			; device pointer in devptr	
 42578 000076FE 8CD8                            mov	ax,ds
 42579 00007700 AB                      	stosw
 42580 00007701 31C0                    	xor	ax,ax	; 0
 42581 00007703 AB                      	stosw			; firclus
 42582 00007704 AB                      	stosw			; time
 42583 00007705 AB                      	stosw			; date
 42584 00007706 48                      	dec	ax	; -1
 42585 00007707 AB                      	stosw			; size
 42586 00007708 AB                      	stosw
 42587 00007709 40                      	inc	ax	; 0
 42588 0000770A AB                      	stosw			; position
 42589 0000770B AB                      	stosw
 42590                                  	;add	di,7
 42591 0000770C 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42592                                  				; point at name
 42593                                  	;add	si,10
 42594 0000770F 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42595                                  				; point to name
 42596 00007712 B90400                  	mov	cx,4
 42597 00007715 F3A5                    	rep	movsw		; name
 42598 00007717 B103                    	mov	cl,3
 42599 00007719 B020                    	mov	al," "
 42600 0000771B F3AA                    	rep	stosb		; extension
 42601                                  
 42602 0000771D 5E                      	pop	si		; get back pointer to header
 42603                                  
 42604                                  				; mark device as CON I/O
 42605                                  	; 15/07/2018
 42606                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42607 0000771E 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42608                                  	; 12/03/2018
 42609                                  	;mov	[ss:32h],si
 42610 00007722 368936[3200]            	MOV     [SS:BCON],SI
 42611                                  	;mov	[ss:34h],ds
 42612 00007727 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42613                                  
 42614                                  	; initialize each device until the clock device is found
 42615                                  
 42616                                  CHAR_INIT_LOOP:
 42617 0000772C C534                            LDS     SI,[SI]			; AUX device
 42618 0000772E E8D301                  	call	CHARINIT 
 42619                                         	;15/07/2018
 42620                                  	;test	byte [SI+4],8
 42621 00007731 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42622 00007735 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42623                                  	; 12/03/2018
 42624                                  	;mov	[ss:2Eh],si
 42625 00007737 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42626                                  	;mov	[ss:30h],ds
 42627 0000773C 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42628                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42629                                  
 42630                                  	;mov	bp,4970			; bp = pointer to free mem
 42631                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42632                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42633                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42634 00007741 BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42635                                  
 42636 00007744 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42637 00007749 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42638                                  PERDRV:
 42639                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42640 0000774E C534                            LDS	SI,[SI]			; Next device
 42641 00007750 83FEFF                          CMP	SI,-1	; 0FFFFh
 42642 00007753 7479                    	JZ	SHORT CONTINIT
 42643                                  
 42644 00007755 E8AC01                          call	CHARINIT
 42645                                  
 42646                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42647                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42648                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42649                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42650                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42651                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42652                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42653                                  
 42654                                          ; 15/07/2018
 42655                                  	;test	word [SI+4],8000h		; DEVTYP
 42656                                          ; 17/12/2022
 42657                                  	;test	byte [SI+5],80h
 42658 00007758 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42659                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42660 0000775C 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42661                                  
 42662 0000775E 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42663 00007763 30ED                    	XOR     CH,CH
 42664                                          ; 07/07/2018
 42665                                  	;MOV	[SI+10],CL		; Number of units in name field
 42666 00007765 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42667 00007768 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42668 0000776D 30F6                    	XOR     DH,DH
 42669 0000776F 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42670 00007774 1E                      	PUSH    DS
 42671 00007775 56                              PUSH    SI
 42672 00007776 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42673                                  
 42674                                  PERUNIT:
 42675 0000777B 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42676 0000777D 43                              INC     BX
 42677 0000777E 43                              INC     BX                      ; On to next BPB
 42678                                  	; 15/12/2022
 42679                                  	; 07/07/2018
 42680                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42681 0000777F 26885600                	MOV     [ES:BP],DL
 42682                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42683                                  	;;mov	[ES:BP+0],DL
 42684                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42685                                  
 42686                                  	;MOV	[ES:BP+1],DH
 42687 00007783 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42688 00007787 53                              PUSH    BX
 42689 00007788 51                              PUSH    CX
 42690 00007789 52                              PUSH    DX
 42691                                  
 42692                                          ;invoke	$SETDPB
 42693 0000778A E84898                          CALL	_$SETDPB		; build DPB!
 42694                                  
 42695                                  	; 07/07/2018
 42696                                  	;MOV	AX,[ES:BP+2]
 42697 0000778D 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42698                                          ; 12/03/2018
 42699 00007791 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42700 00007796 7604                    	JBE     SHORT NOTMAX		; N:
 42701 00007798 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42702                                  NOTMAX:					
 42703                                  	; set the next dpb field in the currently built bpb
 42704                                  	; and mark as never accessed
 42705                                          
 42706                                  	; 24/04/2019
 42707 0000779C 89E8                    	mov	ax,bp			; get pointer to DPB
 42708                                  	;add	ax,33
 42709 0000779E 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42710                                  					; set seg & offset of next DPB
 42711                                  	;mov	[es:bp+25],ax
 42712 000077A1 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42713                                  	;mov	[es:bp+27],es
 42714 000077A5 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42715                                  					; mark as never accessed
 42716                                  	;mov	byte [es:bp+24],0FFh
 42717 000077A9 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42718                                  
 42719 000077AE 5A                      	POP     DX
 42720 000077AF 59                              POP     CX
 42721 000077B0 5B                              POP     BX
 42722 000077B1 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42723 000077B3 5E                              POP     SI
 42724 000077B4 1F                              POP     DS
 42725                                  					; ds:si -> device header
 42726                                  					; store it in the corresponding dpb
 42727                                  	; 07/07/2018
 42728                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42729 000077B5 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42730                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42731 000077B9 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42732                                  
 42733 000077BD 1E                              PUSH    DS			; save pointer to device header
 42734 000077BE 56                              PUSH    SI
 42735 000077BF FEC6                            INC     DH			; inc unit #
 42736 000077C1 FEC2                            INC     DL			; inc drive #
 42737 000077C3 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42738                                          ;add	bp,33 ; 24/04/2019
 42739 000077C5 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42740 000077C8 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42741                                          
 42742 000077CA 5E                      	POP     SI			; restore pointer to device header
 42743 000077CB 1F                              POP     DS
 42744 000077CC EB80                    	JMP	PERDRV			; process all drivers in chain
 42745                                  
 42746                                  CONTINIT:
 42747                                  	; 24/04/2019
 42748                                  	;sub	bp,33			; set link in last DPB to -1
 42749 000077CE 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42750                                  					; set last link offset & segment
 42751                                  	;mov	word [bp+25],0FFFFh
 42752 000077D1 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42753                                  	;mov	word [bp+27],0FFFFh
 42754 000077D6 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42755                                  	;add	bp,33
 42756 000077DB 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42757                                  					; the DPB chain is done.  
 42758 000077DE 16                      	push	ss
 42759 000077DF 1F                      	pop	ds
 42760                                  
 42761 000077E0 89E8                    	mov	ax,bp
 42762 000077E2 E850FE                  	call	ParaRound		; round up to segment
 42763                                  
 42764 000077E5 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42765 000077E7 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42766                                  
 42767 000077E9 BB0F00                  	mov	bx,0Fh
 42768                                  	
 42769                                  	; 24/05/2019
 42770                                  	;mov	cx,[ENDMEM]
 42771                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42772                                  	; 17/12/2022
 42773                                  	;mov	cx,[ENDMEM] 
 42774                                  					; set seg inpacketto dosdata					
 42775 000077EC 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42776                                  
 42777                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42778                                  ; Also patch in the segment of the pointers in the dosdata area.
 42779                                  ;
 42780                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42781                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42782                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42783                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42784                                  
 42785 000077F0 52                      	push	dx			; preserve first free segment
 42786                                  
 42787 000077F1 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42788 000077F4 8EC0                    	mov	es,ax			; es = segment of DOS
 42789 000077F6 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42790                                  
 42791 000077FC E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42792 000077FF E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42793                                  					; other tables with seg in ES.
 42794                                  	; 17/12/2022
 42795                                  	; cx = 0
 42796 00007802 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42797                                  
 42798 00007806 5A                      	pop	dx			; restore first free segment
 42799                                  
 42800                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42801                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42802                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42803                                  ; low_mem_stub by seg_reinit.
 42804                                  
 42805                                  	;xor	ax,ax ; 0
 42806                                  	;mov	ds,ax
 42807                                  	;mov	es,ax
 42808                                  	; 17/12/2022
 42809                                  	; cx = 0
 42810                                  	;xor	cx,cx ; 0
 42811 00007807 8ED9                    	mov	ds,cx
 42812 00007809 8EC1                    	mov	es,cx
 42813                                  
 42814                                  	; set the segment of int 24 vector that was 
 42815                                  	; left out by patch_vec_segments above.
 42816                                  
 42817                                  	; 17/12/2022
 42818                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42819                                  ;%if 0
 42820                                  	; 24/05/2019
 42821                                  	;;mov	di,90h
 42822                                  	;;mov	di,4*int_fatal_abort
 42823                                  	;mov	di,addr_int_fatal_abort
 42824 0000780B BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42825                                  
 42826 0000780E 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42827                                  	;mov	[di+2],ax  ; int 24h segment
 42828 00007812 8905                    	mov	[di],ax ; 24/05/2019
 42829                                  
 42830                                  	;;mov	di,82h
 42831                                  	;mov	di,INTBASE+2
 42832                                  
 42833                                  ;%endif
 42834                                  	; 17/12/2022
 42835                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42836                                  	;;mov	di,90h
 42837                                  	;;mov	di,4*int_fatal_abort
 42838                                  	;mov	di,addr_int_fatal_abort
 42839                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42840                                  	;mov	[di+2],ax  ; int 24h segment
 42841                                  	;;mov	di,82h
 42842                                  	;mov	di,INTBASE+2
 42843                                  
 42844                                  	; set default divide trap offset
 42845                                  
 42846                                  	;mov	word ptr ds:[0],offset doscode:divov
 42847 00007814 C7060000[0652]          	mov	word [0],DIVOV	
 42848                                  
 42849                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42850                                  
 42851                                  	;mov	di,80h
 42852 0000781A BF8000                  	mov	di,INTBASE
 42853                                  	;mov	ax,offset doscode:irett
 42854 0000781D B8[E102]                	mov	ax,IRETT
 42855                                  
 42856                                  	; 17/12/2022
 42857                                  	; cx = 0
 42858 00007820 B109                    	mov	cl,9
 42859                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42860                                  					;   sets offsets for ints 20h-28h
 42861                                  iset1:
 42862 00007822 AB                      	stosw
 42863                                  	;add	di,2
 42864                                  	; 20/06/2023
 42865 00007823 47                      	inc	di
 42866 00007824 47                      	inc	di
 42867 00007825 E2FB                    	loop	iset1
 42868                                  
 42869 00007827 83C704                  	add	di,4			; skip vector 29h
 42870                                  
 42871                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42872                                  ;					;   sets offsets for ints 2ah-2fh
 42873                                  ;iset2:
 42874                                  ;	stosw
 42875                                  ;	add	di,2
 42876                                  ;	loop	iset2
 42877                                  
 42878                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42879                                  ; patch_vec_segments above. So skip it.
 42880                                  
 42881                                  ;	add	di,8			; skip vector 30h & 31h 
 42882                                  
 42883                                  	;;;
 42884                                  	; 06/05/2019 - Retro DOS v4.0
 42885                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42886                                  	; 17/12/2022
 42887 0000782A B105                    	mov	cl,5 ; 28/06/2019
 42888                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42889                                  	;mov	cx,6
 42890                                  iset2:
 42891 0000782C AB                      	stosw
 42892                                  	;add	di,2
 42893                                  	; 20/09/2023
 42894 0000782D 47                      	inc	di
 42895 0000782E 47                      	inc	di	
 42896 0000782F E2FB                    	loop	iset2
 42897                                  
 42898                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42899                                  	; 17/12/2022
 42900 00007831 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42901                                  	;add	di,8
 42902                                  	;;;
 42903                                  
 42904                                  	; 17/12/2022
 42905 00007834 B10E                    	mov	cl,14
 42906                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42907                                  					;   sets offsets for ints 32h-3fh
 42908                                  iset3:
 42909 00007836 AB                      	stosw
 42910                                  	;add	di,2
 42911                                  	; 20/09/2023
 42912 00007837 47                      	inc	di
 42913 00007838 47                      	inc	di
 42914 00007839 E2FB                    	loop	iset3
 42915                                  
 42916                                  ;if installed
 42917                                  	; set the offset of int2f handler
 42918                                  	;mov	word [0BCh],INT2F
 42919 0000783B C706BC00[0707]          	mov	word [02Fh*4],INT2F
 42920                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42921 00007841 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42922                                  	;mov	[0BEh],ax
 42923 00007845 A3BE00                  	mov	[(02Fh*4)+2],ax
 42924                                  ;endif
 42925                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42926                                  	; long jump will be patched in by seg_reinit
 42927                                  
 42928                                  	;mov	byte [C0h],0EAh
 42929 00007848 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42930                                  	;mov	byte [C1h],CALL_ENTRY
 42931 0000784D C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42932                                  
 42933 00007853 C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42934 00007859 C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42935 0000785F C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42936 00007865 89168A00                	mov	word [addr_int_terminate+2],dx	
 42937 00007869 C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42938 0000786F C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42939 00007875 C7069C00[4061]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42940                                  
 42941 0000787B 16                      	push	ss
 42942 0000787C 1F                      	pop	ds
 42943                                  	
 42944                                  	; 24/05/2019
 42945                                  	;push	ss
 42946                                  	;pop	es
 42947                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42948                                  	; 17/12/2022
 42949                                  	;push	ss
 42950                                  	;pop	es
 42951                                  
 42952 0000787D 52                      	push	dx			; remember address of arena
 42953                                  
 42954 0000787E 42                      	inc	dx			; leave room for arena header
 42955                                  	;mov	[330h],dx
 42956 0000787F 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42957                                  
 42958 00007883 31FF                    	xor	di,di			; point es:di at end of memory
 42959 00007885 8EC2                    	mov	es,dx			; ...where psp will be
 42960 00007887 31C0                    	xor	ax,ax
 42961                                  	;mov	cx,80h			; psp is 128 words
 42962                                  	; 17/12/2022
 42963 00007889 B180                    	mov	cl,128 ; 28/06/2019
 42964                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42965                                  	;mov	cx,128
 42966                                  
 42967 0000788B F3AB                    	rep	stosw			; zero out psp area
 42968 0000788D A1[4603]                        mov     ax,[ENDMEM]
 42969                                  	
 42970                                  	; 17/12/2022
 42971                                  	; cx = 0
 42972 00007890 E89098                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42973                                  
 42974                                  	; ds, es now point to PSP
 42975                                  
 42976 00007893 16                      	push	ss
 42977 00007894 1F                      	pop	ds
 42978                                  
 42979                                  	;mov	di,24
 42980 00007895 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42981 00007898 31C0                    	xor	ax,ax
 42982 0000789A AB                      	stosw
 42983 0000789B AA                      	stosb				; 0,1 and 2 are con device
 42984 0000789C B0FF                    	mov	al,0FFh
 42985                                  	;mov	cx,FILPERPROC-3 ; 17
 42986                                  	; 17/12/2022
 42987                                  	; cx = 4
 42988 0000789E B111                    	mov	cl,FILPERPROC-3 ; 17
 42989 000078A0 F3AA                    	rep	stosb			; rest are unused
 42990                                  
 42991 000078A2 16                      	push	ss
 42992 000078A3 07                      	pop	es
 42993                                  					; must be set to print messages
 42994 000078A4 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42995                                  
 42996                                  ; after this point the char device functions for con will work for
 42997                                  ; printing messages
 42998                                  
 42999                                  	; 24/04/2019 - Retro DOS v4.0
 43000                                  
 43001                                  ; 12/05/2019
 43002                                  ;
 43003                                  ;write_version_msg:
 43004                                  ;
 43005                                  ;	;if	(not ibm)
 43006                                  ;	;mov	si,offset doscode:header
 43007                                  ;	mov	si,HEADER
 43008                                  ;outmes:
 43009                                  ;	;lods	cs:byte ptr [si]
 43010                                  ;	cs
 43011                                  ;	lodsb
 43012                                  ;	cmp	al,"$"
 43013                                  ;	je	short outdone
 43014                                  ;	call	OUTT
 43015                                  ;	jmp	short outmes
 43016                                  ;outdone:
 43017                                  ;	push	ss			; out stomps on segments
 43018                                  ;	pop	ds
 43019                                  ;	push	ss
 43020                                  ;	pop	es
 43021                                  ;	;endif
 43022                                  
 43023                                  	; at this point es is dosdata
 43024                                  
 43025                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43026                                  	; in sysinittable (ms_data.asm)
 43027                                  
 43028                                  	;mov	si,0D28h
 43029 000078A8 BE[280D]                	mov	si,SysInitTable
 43030                                  
 43031                                  	; 17/12/2022
 43032                                  	; ds = es = ss
 43033                                  
 43034                                  	; 17/12/2022
 43035                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43036                                  ;%if 0
 43037                                  	;;mov	[es:si+6],es
 43038                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43039                                  	;;mov	[es:si+2],es
 43040                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43041                                  	
 43042 000078AB 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43043 000078AE 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43044                                  
 43045                                  	; buffhead -> dosdata:hashinitvar 
 43046                                  
 43047                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43048 000078B1 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43049                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43050                                  	;mov	si,6Dh
 43051 000078B5 BE[6D00]                	mov	si,HASHINITVAR
 43052                                  	;mov	[es:BUFFHEAD],si
 43053 000078B8 8936[3800]              	mov	[BUFFHEAD],si
 43054                                  
 43055 000078BC 5A                              pop     dx                      ; restore address of arena
 43056                                  
 43057                                  	;mov	[032Ch+2],dx
 43058 000078BD 8916[2E03]                      mov     [DMAADD+2],dx
 43059                                  
 43060                                  	;mov	[es:arena_head],dx
 43061 000078C1 8916[2400]              	mov	[arena_head],dx
 43062                                  
 43063                                  ;%endif
 43064                                  
 43065                                  ; 17/12/2022
 43066                                  %if 0
 43067                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43068                                  	;;;
 43069                                  	;mov	[es:si+6],es
 43070                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43071                                  	;mov	[es:si+2],es
 43072                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43073                                  
 43074                                  	; buffhead -> dosdata:hashinitvar 
 43075                                  
 43076                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43077                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43078                                  	;mov	si,6Dh
 43079                                  	mov	si,HASHINITVAR
 43080                                  	mov	[es:BUFFHEAD],si
 43081                                  
 43082                                          pop     dx                      ; restore address of arena
 43083                                  
 43084                                  	;mov	[032Ch+2],dx
 43085                                          mov     [DMAADD+2],dx
 43086                                  
 43087                                  	mov	[es:arena_head],dx
 43088                                  	;;;
 43089                                  %endif
 43090                                  
 43091 000078C5 8EDA                            mov     ds,dx
 43092                                  
 43093                                  	;mov	byte [0],'Z'
 43094 000078C7 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43095                                          ;mov	word [1],0
 43096 000078CC C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43097                                  
 43098 000078D2 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43099 000078D6 29D0                    	sub	ax,dx
 43100 000078D8 48                              dec     ax
 43101 000078D9 A30300                          mov     [ARENA.SIZE],ax
 43102                                  
 43103                                  	; point to sft 0
 43104                                  
 43105                                  	;mov	di,offset dosdata:sftabl + sftable
 43106                                  	;mov	di,SFTABL+6
 43107 000078DC BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43108 000078DF B80300                          mov     ax,3
 43109 000078E2 AB                              stosw           		; adjust refcount
 43110                                  
 43111                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43112                                  
 43113                                          ;mov	di,offset dosdata:sysinittable
 43114                                  	;mov	di,0D28h
 43115 000078E3 BF[280D]                	mov	di,SysInitTable	
 43116                                  
 43117 000078E6 42                      	inc	dx			; advance dx from arena to psp
 43118 000078E7 8EDA                    	mov	ds,dx			; point ds to psp
 43119                                  
 43120                                  					; pass the address os seg_reinit 
 43121                                  					; in dx
 43122 000078E9 BA[5779]                	mov	dx,seg_reinit
 43123 000078EC B9[7B73]                	mov	cx,exepatch_start
 43124 000078EF 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43125                                  
 43126 000078F3 B8[3276]                	mov	ax,SYSBUF
 43127 000078F6 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43128                                  	
 43129 000078F9 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43130 000078FE 368E16[8605]                    mov     ss,[ss:USER_SS]
 43131                                  
 43132 00007903 CB                              retf
 43133                                  
 43134                                  ;
 43135                                  ; END OF DOSINIT
 43136                                  ;
 43137                                  ;--------------------------------------------------------------------------
 43138                                  
 43139                                  CHARINIT:
 43140                                  	; 24/04/2019 - Retro DOS v4.0
 43141                                  	; 07/07/2018 - Retro DOS v3.0
 43142                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43143 00007904 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43144                                  	;mov	byte [ss:035Bh],0
 43145 0000790A 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43146                                  	;mov	byte [ss:035Ch],0
 43147 00007910 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43148                                  	;mov	word [ss:035BD],0
 43149 00007916 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43150 0000791D 06                              PUSH	ES
 43151 0000791E 53                              PUSH	BX
 43152 0000791F 50                              PUSH	AX
 43153 00007920 BB[5A03]                        MOV	BX,DEVCALL
 43154                                          ;PUSH	CS
 43155 00007923 16                      	PUSH	SS ; 30/04/2019
 43156 00007924 07                              POP	ES
 43157 00007925 E8CACC                          CALL	DEVIOCALL2	
 43158 00007928 58                      	POP	AX
 43159 00007929 5B                              POP	BX
 43160 0000792A 07                              POP	ES
 43161 0000792B C3                              RETN
 43162                                  
 43163                                  ; 25/04/2019 - Retro DOS v4.0
 43164                                  
 43165                                  ;-----------------------------------------------------------------------------
 43166                                  ;
 43167                                  ;	check_XMM: routine to check presence of XMM driver
 43168                                  ;
 43169                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43170                                  ;
 43171                                  ;	USED:	none
 43172                                  ;
 43173                                  ;-----------------------------------------------------------------------------
 43174                                  
 43175                                  check_XMM: ; proc near
 43176                                  ;
 43177                                  ; determine whether or not an XMM driver is installed
 43178                                  ;
 43179 0000792C 50                      	push	ax
 43180                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43181 0000792D B80043                  	mov	ax,4300h
 43182 00007930 CD2F                    	int	2Fh
 43183                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43184                                  		; Return: AL = 80h XMS driver installed
 43185                                  		; AL <> 80h no driver
 43186 00007932 3C80                    	cmp	al,80h			; Q: installed
 43187 00007934 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43188                                  ;
 43189                                  ; get the XMM control functions entry point, save it, we
 43190                                  ; need to call it later.
 43191                                  ;
 43192 00007936 53                      	push	bx
 43193 00007937 52                      	push	dx
 43194 00007938 1E                      	push	ds
 43195 00007939 06                      	push	es
 43196                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43197 0000793A B81043                  	mov	ax,4310h
 43198 0000793D CD2F                    	int	2Fh
 43199                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43200                                  		; Return: ES:BX -> driver entry point
 43201                                  
 43202 0000793F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43203                                  
 43204 00007944 891E[4911]              	mov	[XMMcontrol],bx
 43205 00007948 8C06[4B11]              	mov	[XMMcontrol+2],es
 43206                                  cXMMexit:
 43207 0000794C F8                      	clc
 43208 0000794D 07                      	pop	es
 43209 0000794E 1F                      	pop	ds
 43210 0000794F 5A                      	pop	dx
 43211 00007950 5B                      	pop	bx
 43212 00007951 58                      	pop	ax
 43213 00007952 C3                      	retn				; done
 43214                                  ;
 43215                                  ; set carry if XMM driver not present
 43216                                  ;
 43217                                  cXMM_no_driver:
 43218 00007953 F9                      	stc
 43219 00007954 58                      	pop	ax
 43220 00007955 C3                      	retn
 43221                                  
 43222                                  ;-----------------------------------------------------------------------------
 43223                                  ;
 43224                                  ; Procedure Name : seg_reinit
 43225                                  ;
 43226                                  ; Inputs	 : ES has final dos code location
 43227                                  ;		   AX = 0 / 1
 43228                                  ;
 43229                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43230                                  ;		   if AX =0
 43231                                  ;		      if first entry
 43232                                  ;			 patch segment & offset of vectors with stub
 43233                                  ;			 and stub with segment in ES
 43234                                  ;		      else
 43235                                  ;			 patch stub with segment in ES
 43236                                  ;
 43237                                  ;		   else if AX = 1
 43238                                  ;			patch segment of vectors with segment in ES	
 43239                                  ;
 43240                                  ; NOTE		 : This routine can be called at most twice!
 43241                                  ;
 43242                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43243                                  ;-----------------------------------------------------------------------------
 43244                                  
 43245 00007956 00                      num_entry: db	0		; keeps track of the # of times this routine
 43246                                  				; has been called. (0 or 1)
 43247                                  
 43248                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43249                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43250                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43251                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43252                                  
 43253                                  seg_reinit:	; proc	far
 43254 00007957 1E                      	push	ds
 43255                                  
 43256 00007958 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43257                                  
 43258 0000795D E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43259                                  					; other tables with seg in ES.
 43260                                  	; 17/12/2022
 43261                                  	; cx = 0
 43262 00007960 39C8                    	cmp	ax,cx ; 0
 43263                                  	;cmp	ax,0
 43264 00007962 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43265                                  
 43266                                  	; 17/12/2022
 43267 00007964 2E380E[5679]            	cmp	[cs:num_entry],cl ; 0
 43268                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43269 00007969 7508                    	jne	short second_entry	; N: just patch the stub with 
 43270                                  					;    segment in ES
 43271                                  					; Y: patch the vectors with stub 
 43272 0000796B 8CD8                    	mov	ax,ds
 43273 0000796D E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43274 00007970 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43275                                  					; with those in the stub.
 43276                                  	; 17/12/2022
 43277                                  	; cx = 0
 43278                                  second_entry:
 43279 00007973 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43280                                  
 43281                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43282                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43283 00007975 BF[4810]                	mov	di,DOSINTTABLE
 43284                                  	; 17/12/2022
 43285                                  	; cx = 0
 43286                                  	;mov	cx,9
 43287 00007978 B109                    	mov	cl,9
 43288 0000797A 1E                      	push	ds			
 43289 0000797B 07                      	pop	es			; es:di -> DOSINTTABLE
 43290                                  
 43291                                  dosinttabloop:
 43292                                  	;add	di,2
 43293                                  	; 19/09/2023
 43294 0000797C 47                      	inc	di
 43295 0000797D 47                      	inc	di
 43296 0000797E AB                      	stosw
 43297 0000797F E2FB                    	loop	dosinttabloop	
 43298                                  
 43299                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43300                                  ; use the HMA, so we don't want to check CS
 43301                                  
 43302                                  ;ifndef ROMDOS
 43303 00007981 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43304 00007984 7220                    	jb	short sr_done		; N: done
 43305                                  ;endif
 43306 00007986 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43307 00007989 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43308                                  					; A20 toggling in the stub.
 43309                                  	; 17/12/2022
 43310                                  	; cx = 0
 43311 0000798B E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43312                                  ; M021-
 43313                                  	;mov	byte [1211h],1
 43314 0000798E C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43315                                  				
 43316                                  					; set pointer to the routine that 
 43317                                  					; patches buggy exepacked code.
 43318                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43319 00007993 C706[F811][CB74]        	mov	word [FixExePatch],ExePatch
 43320                                  					; M068: set pointer to the routine 
 43321                                  					; M068: that detects copy protected
 43322                                  					; M068: apps
 43323                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43324 00007999 C706[6100][FC75]        	mov	word [ChkCopyProt],IsCopyProt
 43325                                  
 43326                                  ; 28/12/2022 - Retro DOS v4.1
 43327                                  %if 0
 43328                                  ;----------------------------------------------------------------------------
 43329                                  
 43330                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43331                                  
 43332                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43333                                  ;
 43334                                  ;; M020 - begin
 43335                                  ;
 43336                                  ;	call	WhatCPUType
 43337                                  ;	cmp	al,1
 43338                                  ;	jne	short sr_done 		; we need Rational Patch only
 43339                                  ;					;  on 286 systems
 43340                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43341                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43342                                  ;
 43343                                  ;; M020 - end
 43344                                  ;
 43345                                  ;	jmp	short sr_done
 43346                                  ;
 43347                                  ;patch_vec_seg:				; patch vectors with segment in es
 43348                                  ;	mov	ax,es
 43349                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43350                                  ;					; NOTE we don't have to patch the 
 43351                                  ;					; offsets as they have been already
 43352                                  ;					; set to the doscode offsets at
 43353                                  ;					; DOSINIT.
 43354                                  ;sr_done:
 43355                                  ;	mov	byte [cs:num_entry],1
 43356                                  ;	pop	ds
 43357                                  ;	retf	; ! far return !
 43358                                  
 43359                                  ;----------------------------------------------------------------------------
 43360                                  ;
 43361                                  ; Procedure Name : WhatCPUType
 43362                                  ;
 43363                                  ; Inputs	 : none
 43364                                  ;
 43365                                  ; Outputs	 : AL = 0 if CPU <  286
 43366                                  ;		      = 1 if CPU == 286
 43367                                  ;		      = 2 if CPU >= 386
 43368                                  ;
 43369                                  ; Regs. Mod.	 : AX
 43370                                  ;
 43371                                  ;----------------------------------------------------------------------------
 43372                                  
 43373                                  WhatCPUType:
 43374                                  	; 25/04/2019 - Retro DOS v4.0
 43375                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43376                                  
 43377                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43378                                  
 43379                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43380                                  ; 	it is called from both CODE and SYSINITSEG.
 43381                                  ;
 43382                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43383                                  ;  Returns: AX = 0 if 8086 or 8088
 43384                                  ;              = 1 if 80286
 43385                                  ;              = 2 if 80386
 43386                                  
 43387                                  	; 04/11/2022
 43388                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43389                                  
 43390                                  Get_CPU_Type:	;macro
 43391                                  	pushf
 43392                                  	push	bx			; preserve bx
 43393                                  	xor	bx,bx			; init bx to zero
 43394                                  
 43395                                  	xor	ax,ax			; 0000 into AX
 43396                                  	push	ax			; put it on the stack...
 43397                                  	popf				; ...then shove it into the flags
 43398                                  	pushf				; get it back out of the flags...
 43399                                  	pop	ax			; ...and into ax
 43400                                  	and	ax,0F000h		; mask off high four bits
 43401                                  	cmp	ax,0F000h		; was it all 1's?
 43402                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43403                                  
 43404                                  	mov	ax,0F000h		; now try to set the high four bits..
 43405                                  	push	ax
 43406                                  	popf
 43407                                  	pushf
 43408                                  	pop	ax			; ...and see what happens
 43409                                  	and	ax,0F000h		; any high bits set ?
 43410                                  	jz	short cpu_286		; nay; it's an 80286
 43411                                  
 43412                                  cpu_386:				; bx starts as zero
 43413                                  	inc	bx			; inc twice if 386
 43414                                  cpu_286:				; just inc once if 286
 43415                                  	inc	bx
 43416                                  cpu_8086:				; don't inc at all if 086
 43417                                  	mov	ax,bx			; put CPU type value in ax
 43418                                  	pop	bx			; restore original bx
 43419                                  	popf
 43420                                  	
 43421                                  	;endm
 43422                                  
 43423                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43424                                  	;retn
 43425                                  
 43426                                  	; 04/11/2022
 43427                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43428                                  	cmp	al,1
 43429                                  	jne	short sr_done 		; we need Rational Patch only
 43430                                  					;  on 286 systems
 43431                                  	mov	word [RationalPatchPtr],RationalPatch
 43432                                  
 43433                                  ;----------------------------------------------------------------------------
 43434                                  %endif	; 28/12/2022
 43435                                  
 43436 0000799F EB05                    	jmp	short sr_done
 43437                                  
 43438                                  patch_vec_seg:				; patch vectors with segment in es
 43439 000079A1 8CC0                    	mov	ax,es
 43440 000079A3 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43441                                  					; NOTE we don't have to patch the 
 43442                                  					; offsets as they have been already
 43443                                  					; set to the doscode offsets at
 43444                                  					; DOSINIT.
 43445                                  sr_done:
 43446 000079A6 2EC606[5679]01          	mov	byte [cs:num_entry],1
 43447 000079AC 1F                      	pop	ds
 43448 000079AD CB                      	retf	; ! far return !
 43449                                  
 43450                                  ;----------------------------------------------------------------------------
 43451                                  ;
 43452                                  ; Procedure Name : patch_vec_segments
 43453                                  ;
 43454                                  ; Inputs	 : ax -> has segment address to patch in
 43455                                  ;		   ds -> DOSDATA
 43456                                  ;
 43457                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43458                                  ;			
 43459                                  ;			0,20-28,3a-3f
 43460                                  ;
 43461                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43462                                  ;
 43463                                  ;----------------------------------------------------------------------------
 43464                                  
 43465                                  patch_vec_segments:
 43466                                  
 43467 000079AE 06                      	push	es
 43468                                  
 43469 000079AF 31C9                    	xor	cx,cx ; 0
 43470 000079B1 8EC1                    	mov	es,cx
 43471                                  
 43472                                  	;mov	di,82h
 43473 000079B3 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43474                                  
 43475 000079B6 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43476                                  
 43477                                  					; set vectors 20 & 21
 43478                                  	; 04/11/2022
 43479                                  	;mov	cx,2
 43480                                  	; 17/12/2022
 43481                                  	;mov	cl,2
 43482                                  ps_set1:
 43483 000079BA AB                      	stosw	
 43484                                  	;add	di,2
 43485                                  	; 17/12/2022
 43486 000079BB 47                      	inc	di
 43487 000079BC 47                      	inc	di
 43488                                  	;loop	ps_set1
 43489                                  
 43490                                  	; 17/12/2022
 43491 000079BD AB                      	stosw	; int 21h segment
 43492                                  	;inc	di
 43493                                  	;inc	di
 43494                                  
 43495                                  	;add	di,4			; skip int 22h vector
 43496 000079BE 83C706                  	add	di,6 ; *
 43497                                  
 43498 000079C1 AB                      	stosw				; set int 23h
 43499 000079C2 83C706                  	add	di,6			; skip int 24h
 43500                                  
 43501                                  					; set vectors 25-28 and 2a-3f 
 43502                                  	; 04/11/2022
 43503                                  	;mov	cx,4			; set 4 segments
 43504                                  	; 17/12/2022
 43505 000079C5 B104                    	mov	cl,4
 43506                                  ps_set2:
 43507 000079C7 AB                      	stosw				
 43508                                  	;add	di,2
 43509                                  	; 17/12/2022
 43510 000079C8 47                      	inc	di
 43511 000079C9 47                      	inc	di
 43512 000079CA E2FB                    	loop	ps_set2
 43513                                  
 43514 000079CC 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43515                                  					;   already be set.
 43516                                  	; 04/11/2022
 43517                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43518                                  	; 17/12/2022
 43519 000079CF B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43520                                  ps_set3:
 43521 000079D1 AB                      	stosw
 43522                                  	;add	di,2
 43523                                  	; 17/12/2022
 43524 000079D2 47                      	inc	di
 43525 000079D3 47                      	inc	di
 43526 000079D4 E2FB                    	loop	ps_set3
 43527                                  
 43528                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43529                                  ; below. So skip it.
 43530                                  
 43531 000079D6 83C708                  	add	di,8			; skip vector 30h & 31h 
 43532                                  	
 43533                                  	; 04/11/2022
 43534                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43535                                  	; 17/12/2022
 43536 000079D9 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43537                                  ps_set4:
 43538 000079DB AB                      	stosw
 43539                                  	;add	di,2
 43540                                  	; 17/12/2022
 43541 000079DC 47                      	inc	di
 43542 000079DD 47                      	inc	di
 43543 000079DE E2FB                    	loop	ps_set4
 43544                                  
 43545                                  ; set offset of int2f
 43546                                  
 43547                                  ;if installed
 43548                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43549                                  ;endif
 43550                                  	;mov	[es:0C3h],ax
 43551 000079E0 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43552                                  	; 17/12/2022
 43553                                  	; cx = 0
 43554 000079E4 07                      	pop	es
 43555 000079E5 C3                      	retn
 43556                                  
 43557                                  ;---------------------------------------------------------------------------
 43558                                  ;
 43559                                  ; Procedure Name : patch_misc_segments
 43560                                  ;
 43561                                  ; Inputs	 : es = segment to patch in
 43562                                  ;		   ds = dosdata
 43563                                  ;
 43564                                  ; outputs	 : patches in the sharer and other tables in the dos
 43565                                  ;		   with right dos code segment in es
 43566                                  ;
 43567                                  ; Regs Mod	 : DI,SI,CX
 43568                                  ;
 43569                                  ;---------------------------------------------------------------------------
 43570                                  
 43571                                  patch_misc_segments:
 43572                                  
 43573 000079E6 53                      	push	bx
 43574 000079E7 06                      	push	es
 43575 000079E8 50                      	push	ax
 43576                                  
 43577 000079E9 8CC0                    	mov	ax,es			; ax - > DOS segment
 43578                                  	
 43579 000079EB 1E                      	push	ds
 43580 000079EC 07                      	pop	es			; es -> DOSDATA
 43581                                  	
 43582                                  ; initialize the jump table for the sharer...
 43583                                  
 43584                                  	;mov	di,offset dosdata:jshare
 43585                                  	;mov	di,90h
 43586 000079ED BF[9000]                	mov	di,JShare
 43587                                  	;mov	bx,[0AAAh]
 43588 000079F0 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43589                                  					; table was patched during the first
 43590                                  					; call to this routine
 43591 000079F4 B90F00                  	mov	cx,15
 43592                                  jumptabloop:
 43593                                  	;add	di,2			; skip offset
 43594                                  	; 17/12/2022
 43595 000079F7 47                      	inc	di
 43596 000079F8 47                      	inc	di
 43597 000079F9 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43598 000079FC 7405                    	je	short share_patch	; Y: patch in sharer table
 43599                                  					; N: 
 43600 000079FE 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43601 00007A01 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43602                                  share_patch:
 43603 00007A03 AB                      	stosw				; drop in segment
 43604                                  no_share_patch:
 43605 00007A04 E2F1                    	loop	jumptabloop
 43606                                  					; BUGBUG patching the country info 
 43607                                  					; with dosdata can be done inline
 43608                                  					; in dosinit.
 43609                                  					; for dos 3.3 country info
 43610                                  					; table address
 43611                                  
 43612                                  	;mov	si,offset dosdata:country_cdpg
 43613                                  	;mov	si,122Ah   
 43614 00007A06 BE[0512]                	mov	si,COUNTRY_CDPG
 43615                                  					; initialize double word
 43616                                  					; pointers with dosdata in ds
 43617                                  	;mov	[si+4Fh],ds
 43618                                  	;mov	[si+54h],ds
 43619                                  	;mov	[si+59h],ds
 43620                                  	;mov	[si+5Eh],ds
 43621                                  	;mov	[si+80h],ds
 43622                                  	;mov	[si+63h],ds
 43623 00007A09 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43624 00007A0C 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43625 00007A0F 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43626 00007A12 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43627 00007A15 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43628 00007A19 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43629                                  
 43630                                  					; fastopen routines are in doscode
 43631                                  					; so patch with doscode seg in ax
 43632                                  
 43633                                  	;mov	si,offset dosdata:fastopentable
 43634                                  	;mov	si,0D30h
 43635 00007A1C BE[300D]                	mov	si,FastOpenTable
 43636                                  
 43637                                  	; 17/12/2022
 43638                                  	; bx = [TEMP_DOSLOC]
 43639 00007A1F 83FBFF                  	cmp	bx,-1
 43640                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43641 00007A22 7405                    	je	short fast_patch	; Y: patch segment
 43642                                  	;mov	cx,[TEMP_DOSLOC]
 43643                                  					; Q: has fastopen patched in it's
 43644                                  					;    segment
 43645                                  	; 17/12/2022
 43646 00007A24 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43647                                  	;;cmp	cx,[si+4]
 43648                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43649 00007A27 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43650                                  
 43651                                  fast_patch:
 43652                                  	;mov	[si+4],ax
 43653 00007A29 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43654                                  no_fast_patch:
 43655                                  	; 17/12/2022
 43656                                  	; cx = 0
 43657 00007A2C 58                      	pop	ax
 43658 00007A2D 07                      	pop	es
 43659 00007A2E 5B                      	pop	bx
 43660                                  
 43661 00007A2F C3                      	retn
 43662                                  
 43663                                  ;--------------------------------------------------------------------------
 43664                                  ;
 43665                                  ; Procedure Name : patch_offset
 43666                                  ; 
 43667                                  ; Inputs	 : NONE
 43668                                  ;
 43669                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43670                                  ;		   0,20-28,3a-3f, and 30,31
 43671                                  ;
 43672                                  ;
 43673                                  ; Regs. Mod	 : AX,DI,CX
 43674                                  ;--------------------------------------------------------------------------
 43675                                  
 43676                                  patch_offset:
 43677 00007A30 06                      	push	es		; preserve es
 43678                                  
 43679 00007A31 31C0                    	xor	ax,ax
 43680 00007A33 8EC0                    	mov	es,ax
 43681                                  				; set default divide trap address
 43682                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43683                                  	;mov	word [es:0],108Ah
 43684 00007A35 26C7060000[7010]        	mov	word [es:0],ldivov
 43685                                  
 43686                                  	;mov	di,80h
 43687 00007A3C BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43688                                  	;mov	ax,offset dosdata:lirett
 43689                                  	;mov	ax,10DAh
 43690 00007A3F B8[C010]                	mov	ax,lirett
 43691                                  				; set vectors 20 & 21 to point to iret.
 43692                                  	; 17/12/2022
 43693                                  	; cx = 0
 43694                                  
 43695                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43696                                  po_iset1:
 43697 00007A42 AB                      	stosw	; int 20h offset
 43698                                  	;add	di,2 ; *
 43699                                  	;loop	po_iset1
 43700                                  	; 17/12/2022
 43701 00007A43 47                      	inc	di
 43702 00007A44 47                      	inc	di
 43703 00007A45 AB                      	stosw	; int 21h offset
 43704                                  
 43705                                  	;add	di,4		; skip vector 22h
 43706                                  	; 17/12/2022
 43707 00007A46 83C706                  	add	di,6 ; *	
 43708                                  
 43709 00007A49 AB                      	stosw			; set offset of 23h
 43710                                  	;add	di,6		; skip 24h
 43711                                  	; 19/09/2023
 43712 00007A4A 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43713                                  
 43714                                  				; set vectors 25-28 and 2a-3f to iret.
 43715                                  	; 04/11/2022
 43716                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43717                                  	; 19/09/2023
 43718                                  	; 17/12/2022
 43719                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43720                                  po_iset2:
 43721 00007A4D AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43722                                  	;add	di,2
 43723                                  	; 19/09/2023
 43724                                  	; 17/12/2022
 43725                                  	;inc	di
 43726                                  	;inc	di
 43727                                  	; 19/09/2023
 43728                                  	;loop	po_iset2
 43729                                  
 43730                                  	;add	di,4		; skip vector 29h
 43731                                  	; 19/09/2023
 43732 00007A4E 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43733                                  
 43734                                  	; 04/11/2022
 43735                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43736                                  	; 17/12/2022
 43737                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43738 00007A51 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43739                                  po_iset3:
 43740 00007A53 AB                      	stosw
 43741                                  	;add	di,2
 43742                                  	; 17/12/2022
 43743 00007A54 47                      	inc	di
 43744 00007A55 47                      	inc	di
 43745 00007A56 E2FB                    	loop	po_iset3
 43746                                  
 43747                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43748                                  ; below. So skip it.
 43749                                  
 43750                                  	;add	di,8		; skip vector 30h & 31h 
 43751                                  	; 17/12/2022
 43752 00007A58 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43753                                  
 43754                                  	; 04/11/2022
 43755                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43756                                  				;   sets offsets for ints 32h-3fh
 43757                                  	; 17/12/2022
 43758 00007A5B B10E                    	mov	cl,14 ; 26/06/2019
 43759                                  po_iset4:
 43760 00007A5D AB                      	stosw
 43761                                  	;add	di,2
 43762                                  	; 17/12/2022
 43763 00007A5E 47                      	inc	di
 43764 00007A5F 47                      	inc	di
 43765 00007A60 E2FB                    	loop	po_iset4
 43766                                  
 43767                                  ;if installed
 43768                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43769                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43770 00007A62 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43771                                  ;endif
 43772                                  
 43773                                  ; set up entry point call at vectors 30-31h
 43774                                  	;mov	byte [es:0C0h],0EAh
 43775 00007A69 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43776                                  	;mov	word [es:0C1h],10D0h
 43777                                  
 43778 00007A6F 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43779                                  
 43780                                  							; 19/09/2023
 43781                                  	;mov	word [es:80h],1094h
 43782 00007A76 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43783                                  	;mov	word [es:84h],109Eh
 43784 00007A7D 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43785                                  	;mov	word [es:94h],10A8h
 43786 00007A84 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43787                                  	;mov	word [es:98h],10B2h
 43788 00007A8B 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43789                                  	;mov	word [es:9Ch],10BCh
 43790 00007A92 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43791                                  
 43792                                  	; 17/12/2022
 43793                                  	; CX = 0
 43794 00007A99 07                      	pop	es		; restore es
 43795 00007A9A C3                      	retn
 43796                                  
 43797                                  ;--------------------------------------------------------------------------
 43798                                  ;
 43799                                  ; 	Procedure Name	:	patch_in_nops
 43800                                  ;
 43801                                  ; 	Entry		: 	ES -> DOSDATA
 43802                                  ;
 43803                                  ;	Regs Mod	: 	cx, di
 43804                                  ;
 43805                                  ;	Description:
 43806                                  ;		This routine patches in 2 nops at the offsets specified in 
 43807                                  ;	patch_table. This basically enables the low mem stub to start 
 43808                                  ;	making XMS calls.
 43809                                  ;
 43810                                  ;--------------------------------------------------------------------------
 43811                                  
 43812                                  	; 04/11/2022
 43813                                  	; (MSDOS 5.0 MSDOS.SYS)
 43814                                  	; DOSCODE:0BC50h
 43815                                  
 43816                                  patch_table:	; label	byte
 43817                                  	;dw	offset dosdata:i0patch
 43818                                  	;dw	offset dosdata:i20patch
 43819                                  	;dw	offset dosdata:i21patch
 43820                                  	;dw	offset dosdata:i25patch
 43821                                  	;dw	offset dosdata:i26patch
 43822                                  	;dw	offset dosdata:i27patch
 43823                                  	;dw	offset dosdata:i2fpatch
 43824                                  	;dw	offset dosdata:cpmpatch
 43825 00007A9B [7010]                  	dw	i0patch
 43826 00007A9D [7A10]                  	dw	i20patch
 43827 00007A9F [8410]                  	dw	i21patch
 43828 00007AA1 [8E10]                  	dw	i25patch
 43829 00007AA3 [9810]                  	dw	i26patch
 43830 00007AA5 [A210]                  	dw	i27patch
 43831 00007AA7 [AC10]                  	dw	i2fpatch
 43832 00007AA9 [B610]                  	dw	cpmpatch
 43833                                  
 43834                                  patch_table_size equ ($-patch_table)/2
 43835                                  
 43836                                  patch_in_nops:
 43837 00007AAB 50                      	push	ax
 43838 00007AAC 56                      	push	si
 43839 00007AAD BE[9B7A]                	mov	si,patch_table
 43840 00007AB0 B89090                  	mov	ax,9090h ; nop, nop
 43841                                  	; 17/12/2022
 43842                                  	; cx = 0
 43843                                  	;mov	cx,8
 43844                                  	;mov	cx,patch_table_size ; 8
 43845 00007AB3 B108                    	mov	cl,patch_table_size ; 8
 43846                                  pin_loop:
 43847 00007AB5 2E8B3C                  	mov	di,[cs:si]
 43848 00007AB8 AB                      	stosw
 43849                                  	;add	si,2
 43850                                  	; 17/12/2022
 43851 00007AB9 46                      	inc	si
 43852 00007ABA 46                      	inc	si
 43853 00007ABB E2F8                    	loop	pin_loop
 43854 00007ABD 5E                      	pop	si
 43855 00007ABE 58                      	pop	ax
 43856 00007ABF C3                      	retn
 43857                                  
 43858                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43859                                  ; ---------------------------------------------------------------------------
 43860                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43861                                  ; ---------------------------------------------------------------------------
 43862                                  
 43863                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43864                                  DOSCODE_END:
 43865                                  	;times	9 db 0	; db 9 dup(0)
 43866                                  	; 18/12/2022
 43867 00007AC0 0000                    	dw	0  ;	times 2 db 0
 43868                                  
 43869                                  ;align 16
 43870                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43871                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43872                                  
 43873                                  ; ---------------------------------------------------------------------------
 43874                                  
 43875                                  
 43876                                  ;memstrt label word
 43877                                  ; ---------------------------------------------------------------------------
 43878                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43879                                  ; ---------------------------------------------------------------------------
 43880                                  
 43881                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43882                                  
 43883                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43884                                  ; the dos initialization segment
 43885                                  
 43886                                  ;ifndef ROMDOS
 43887                                  
 43888                                  ;doscode ends
 43889                                  
 43890                                  ;else
 43891                                  
 43892                                  ;;dosinitseg ends
 43893                                  
 43894                                  ;endif ; ROMDOS
 43895                                  
 43896                                  ;============================================================================
 43897                                  
 43898                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43899                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43900                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43901                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43902                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43903                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43904                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43905                                  
 43906                                  ;; burasý doscode sonu
 43907                                  
 43908                                  ;============================================================================
 43909                                  ; DOSDATA
 43910                                  ;============================================================================
 43911                                  ; 29/04/2019 - Retro DOS 4.0
 43912                                  
 43913                                  ;[BITS 16]
 43914                                  
 43915                                  ;[ORG 0]
 43916                                  
 43917                                  ; 25/04/2019 - Retro DOS v4.0
 43918                                  
 43919                                  ;============================================================================
 43920                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43921                                  ;============================================================================
 43922                                  
 43923                                  ;align 16
 43924                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43925                                  	; (4970 bytes for MSDOS 6.21)
 43926                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43927                                  
 43928                                  ;============================================================================
 43929                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43930                                  ;============================================================================
 43931                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43932                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43933                                  ; 16/07/2018 - Retro DOS 3.0	
 43934                                  
 43935                                  ;Break <Initialized data and data used at DOS initialization>
 43936                                  ;----------------------------------------------------------------------------
 43937                                  
 43938                                  ; We need to identify the parts of the data area that are relevant to tasks
 43939                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43940                                  ; data will be gathered with the system code. The process data under 2.x will
 43941                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43942                                  ;
 43943                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43944                                  ; describing that data item.
 43945                                  
 43946                                  ;DOSDATA SEGMENT
 43947                                  
 43948                                  ; 04/11/2022
 43949                                  ;[ORG 0]
 43950                                  
 43951                                  ; ----------------------------------------------------------------------------
 43952                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43953                                  ; ----------------------------------------------------------------------------
 43954                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43955                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43956                                  ; ----------------------------------------------------------------------------
 43957                                  
 43958                                  ; 04/11/2022
 43959                                  
 43960                                  ;DOSDATA:0000h
 43961                                  
 43962 00007AC2 90<rep Eh>              align 16
 43963                                  
 43964                                  ; ----------------------------------------------------------------------------
 43965                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43966                                  ; ----------------------------------------------------------------------------
 43967                                  
 43968                                  segment .data  vstart=0 ; 06/12/2022
 43969                                  								
 43970                                  ; ============================================================================
 43971                                  
 43972                                  ; 06/12/2022
 43973                                  ;DOSDATASTART equ $
 43974                                  DOSDATASTART:
 43975                                  
 43976                                  
 43977                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43978                                  
 43979                                  	;; 03/11/2022
 43980                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43981                                  
 43982                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43983                                  	;db	4 dup (?)	
 43984 00000000 00<rep 4h>              	times	4 db 0
 43985                                  
 43986                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43987                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43988                                  	;dw	0
 43989                                  
 43990                                  	;EVEN
 43991                                  
 43992                                  ;align 2
 43993                                  
 43994                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43995                                  ; area compatability. This location must be incremented EACH TIME the data
 43996                                  ; area here gets mucked with.
 43997                                  ;
 43998                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43999                                  
 44000                                  MSCT001S:	; LABEL BYTE
 44001                                  	
 44002                                  DataVersion:	
 44003 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44004                                  
 44005                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44006                                  ;hkn; been removed to DOSCODE above
 44007                                  
 44008                                  ;M044
 44009                                  ; First part of save area for saving last para of Window memory
 44010                                  
 44011                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44012 00000006 00<rep 8h>              	times	8 db 0
 44013                                  
 44014                                  	; MSDOS 6.21 DOSDATA:000Eh
 44015                                  MYNUM:			; Offset 000Eh
 44016 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44017                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44018 00000010 0000                    	dw	0
 44019                                  OpenLRU:
 44020 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44021                                  OEM_HANDLER: 		
 44022 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44023                                  
 44024                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44025                                  ;;			way that we leave DOS???? - jgl
 44026                                  
 44027                                  LeaveAddr:
 44028 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44029                                  RetryCount:		
 44030 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44031                                  RetryLoop:
 44032 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44033                                  LastBuffer:
 44034 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44035                                  CONTPOS:
 44036 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44037                                  arena_head:
 44038 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44039                                  
 44040                                  ;; 16/07/2018
 44041                                  ;;***************************************************************************
 44042                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44043                                  ;;***************************************************************************
 44044                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44045                                  ;;
 44046                                  ;;	AH = 52h
 44047                                  ;;
 44048                                  ;;	on return:
 44049                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44050                                  ;;		Known "invars" fields follow (varies with DOS version):
 44051                                  ;;
 44052                                  ;;	Offset Size		 Description
 44053                                  ;;
 44054                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44055                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44056                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44057                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44058                                  ;;		      0 indicates no unread input (DOS 3.x)
 44059                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44060                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44061                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44062                                  ;;	  08   dword  pointer to $CLOCK device driver
 44063                                  ;;	  0C   dword  pointer to CON device driver
 44064                                  ;;	  10   byte   number of logical drives in system
 44065                                  ;;	  11   word   maximum bytes/block of any block device
 44066                                  ;;	  13   dword  pointer to DOS cache buffer header
 44067                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44068                                  ;;		      point to the next device in device chain
 44069                                  ;;
 44070                                  ;;***************************************************************************
 44071                                  
 44072                                  ; The following block of data is used by SYSINIT. 
 44073                                  ; Do not change the order or size of this block
 44074                                  
 44075                                  ;SYSINITVAR:
 44076                                  ;----------------------------------------------------------------------------
 44077                                  SYSINITVARS:
 44078                                  DPBHEAD:
 44079 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44080                                  SFT_ADDR:
 44081 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44082                                  BCLOCK:
 44083 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44084                                  BCON:
 44085 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44086                                  MAXSEC:
 44087 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44088                                  BUFFHEAD:
 44089 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44090                                  CDSADDR:
 44091 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44092                                  SFTFCB:
 44093 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44094                                  KEEPCOUNT:
 44095 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44096                                  NUMIO:
 44097 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44098                                  CDSCOUNT:
 44099 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44100                                  
 44101                                  ; A fake header for the NUL device
 44102                                  NULDEV:
 44103 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44104                                  	;dw	8004h
 44105 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44106 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44107 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44108 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44109                                  SPLICES:
 44110 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44111                                  
 44112                                  Special_Entries:
 44113 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44114                                  UU_IFS_DOS_CALL:
 44115 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44116                                  ; 
 44117                                  ; UU_IFS_HEADER:
 44118                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44119                                  
 44120                                  ChkCopyProt:
 44121 00000061 0000                    	dw	0	; M068
 44122                                  A20OFF_PSP:
 44123 00000063 0000                    	dw	0	; M068
 44124                                  BUFFERS_PARM1:
 44125 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44126                                  BUFFERS_PARM2:
 44127 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44128                                  BOOTDRIVE:
 44129 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44130                                  DDMOVE:
 44131 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44132                                  EXT_MEM_SIZE:
 44133 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44134                                  
 44135                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44136                                  ;
 44137                                  ; Replaced by next two declarations
 44138                                  ;
 44139                                  ;UU_BUF_HASH_PTR:
 44140                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44141                                  ;UU_BUF_HASH_COUNT:
 44142                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44143                                  
 44144                                  BufferQueue:
 44145 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44146                                  DirtyBufferCount:
 44147 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44148                                  			; BUGBUG ---- change to byte
 44149                                  SC_CACHE_PTR:
 44150 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44151                                  SC_CACHE_COUNT:
 44152 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44153                                  BuffInHMA:
 44154 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44155                                  LoMemBuff:
 44156 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44157                                  			;  in Low mem when buffs are in HMA
 44158                                  ;
 44159                                  ; All variables which have UU_ as prefix can be reused for other
 44160                                  ; purposes and can be renamed. All these variables were used for
 44161                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44162                                  ; manager ---- MOHANS
 44163                                  ;
 44164                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44165                                  UU_BUF_EMS_FIRST_PAGE:	
 44166 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44167                                  
 44168                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44169                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44170                                  ;	dw	0			
 44171                                  
 44172                                  CL0FATENTRY:
 44173 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44174                                  			; is used in pack/unpack rts.
 44175                                  			; in fat.asm if cluster 0 is specified.
 44176                                  			; SR;
 44177                                  IoStatFail:
 44178 00000083 00                      	db	0	; IoStatFail has been added to 
 44179                                  			; record a fail on an I24 
 44180                                  			; issued from IOFUNC on a status call. 
 44181                                  
 44182                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44183                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44184                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44185                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44186                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44187                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44188                                  ;
 44189                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44190                                  						; state of the 	buffers page.
 44191                                  						; This one byte is retained to 
 44192                                  						; keep the size of this data 
 44193                                  						; block the same.;
 44194                                  ALLOCMSAVE:
 44195 00000084 00                      	db	0	; M063: temp var. used to 
 44196                                  			; M063: save alloc method in
 44197                                  			; M063: msproc.asm
 44198                                  A20OFF_COUNT:
 44199 00000085 00                      	db	0	; M068: indiactes the # of 
 44200                                  			; M068: int 21 calls for 
 44201                                  			; M068: which A20 is off
 44202                                  DOS_FLAG:
 44203 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44204                                  			; definitions
 44205                                  UNPACK_OFFSET:
 44206 00000087 0000                    	dw	0	; saves pointer to the start
 44207                                  			; of unpack code in exepatch.
 44208                                  			; asm.
 44209                                  UMBFLAG:
 44210 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44211                                  			; M003: link state of the UMBs
 44212                                  			; M003: whether linked or not 
 44213                                  			; M003: to the DOS arena chain
 44214                                  SAVE_AX:
 44215 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44216                                  			; M000: in msproc.asm
 44217                                  UMB_HEAD:
 44218 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44219                                  			; M000: the first umb arena by 
 44220                                  			; M000: BIOS sysinit.
 44221                                  START_ARENA:
 44222 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44223                                  			; M000: from which DOS will 
 44224                                  			; M000: start its scan for alloc.
 44225                                  
 44226                                  ; End of SYSINITVar block
 44227                                  ;----------------------------------------------------------------------------
 44228                                  
 44229                                  ; 25/04/2019 - Retro DOS v4.0
 44230                                  
 44231                                  ; 16/07/2018
 44232                                  ; MSDOS 3.3 (& MDOS 6.0)
 44233                                  
 44234                                  ;
 44235                                  ; Sharer jump table
 44236                                  ;
 44237                                  
 44238                                  ;PUBLIC	JShare
 44239                                  	;EVEN
 44240                                  
 44241                                  ;JShare	LABEL	DWORD
 44242                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44243                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44244                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44245                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44246                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44247                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44248                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44249                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44250                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44251                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44252                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44253                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44254                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44255                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44256                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44257                                  
 44258                                  align 2
 44259                                  
 44260                                  JShare:
 44261 00000090 [0107]0000              		DW	BadCall,0
 44262 00000094 [0507]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44263 00000098 [0507]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44264 0000009C [0107]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44265 000000A0 [0107]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44266 000000A4 [0107]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44267 000000A8 [0107]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44268 000000AC [0107]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44269 000000B0 [0507]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44270 000000B4 [0107]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44271 000000B8 [0107]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44272 000000BC [0107]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44273 000000C0 [0507]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44274 000000C4 [0107]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44275 000000C8 [0107]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44276                                  
 44277                                  
 44278                                  ;============================================================================
 44279                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44280                                  ;============================================================================
 44281                                  ; 25/04/2019 - Retro DOS 4.0 
 44282                                  ; 16/07/2018 - Retro DOS 3.0	
 44283                                  
 44284                                  ;Break <Initialized data and data used at DOS initialization>
 44285                                  ;----------------------------------------------------------------------------
 44286                                  
 44287                                  ; We need to identify the parts of the data area that are relevant to tasks
 44288                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44289                                  ; data will be gathered with the system code.  The process data under 2.x will
 44290                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44291                                  ;
 44292                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44293                                  ; describing that data item.
 44294                                  
 44295                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44296                                  
 44297                                  ;
 44298                                  ; Table of routines for assignable devices
 44299                                  ;
 44300                                  ; MSDOS allows assignment if the following standard devices:
 44301                                  ;   stdin  (usually CON input)
 44302                                  ;   stdout (usually CON output)
 44303                                  ;   auxin  (usually AUX input)
 44304                                  ;   auxout (usually AUX output)
 44305                                  ;   stdlpt (usually PRN output)
 44306                                  ;
 44307                                  ; SPECIAL NOTE:
 44308                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44309                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44310                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44311                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44312                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44313                                  ;   as EOF).
 44314                                  
 44315                                  ; Default SFTs for boot up
 44316                                  
 44317                                  		;PUBLIC	SFTABL
 44318                                  
 44319                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44320 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44321 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44322 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44323                                  		;times 295 db 0 ; MSDOS 6.0
 44324 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44325                                  
 44326                                  ; the next two variables relate to the position of the logical stdout/stdin
 44327                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44328                                  ; console.
 44329                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44330 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44331 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44332                                  					;	   of buffered input call
 44333 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44334 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44335                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44336 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44337 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44338 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44339                                  switch_character:
 44340 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44341 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44342 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44343 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44344 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44345                                  
 44346                                  ; The following table is a list of addresses that the sharer patches to be
 44347                                  ; PUSH AX to enable the critical sections
 44348                                  
 44349                                  		; DOSDATA:0315h (MSDOS 6.21)
 44350                                  
 44351                                  ;PUBLIC	CritPatch
 44352                                  
 44353                                  CritPatch:	; LABEL WORD
 44354                                  
 44355                                  ;IRP sect,<critDisk,critDevice>
 44356                                  
 44357                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44358                                  ;
 44359                                  ;SR; Change code patch address to a variable in data segment
 44360                                  ;
 44361                                  ;       dw OFFSET DOSDATA: redir_patch
 44362                                  ;       dw OFFSET DOSDATA: redir_patch
 44363                                  ;
 44364                                  ;;hkn	Short_Addr  E&sect
 44365                                  ;;hkn	Short_Addr  L&sect
 44366                                  ;
 44367                                  ;ELSE
 44368                                  ;	DW	0
 44369                                  ;	DW	0
 44370                                  ;ENDIF
 44371                                  ;ENDM
 44372                                  ;	DW	0
 44373                                  
 44374                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44375                                   
 44376 00000315 [0C0D]                  	dw 	redir_patch
 44377 00000317 [0C0D]                  	dw 	redir_patch			
 44378 00000319 [0C0D]                  	dw	redir_patch
 44379 0000031B [0C0D]                  	dw 	redir_patch
 44380                                  
 44381 0000031D 0000                    	dw	0
 44382                                  
 44383                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44384                                  ; Also, IBM server 1.0 requires this also.
 44385                                  
 44386                                  	;EVEN			; Force swap area to start on word boundry
 44387 0000031F 90                      align 2
 44388                                  	;PUBLIC	SWAP_START
 44389                                  SWAP_START:	; LABEL BYTE
 44390 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44391 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44392 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44393 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44394 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44395                                  
 44396                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44397 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44398 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44399                                  ; end warning
 44400                                   
 44401 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44402                                  
 44403 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44404 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44405 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44406 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44407 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44408 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44409                                  ;				; F.C. 2/17/86
 44410 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44411 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44412                                  ;align 2
 44413                                  SWAP_ALWAYS:	; 05/08/2018
 44414 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44415                                  				;   extended error type stuff.
 44416                                  				;   NOTE: does not have Correct value on
 44417                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44418                                  				;   GetExtendedError system calls)
 44419 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44420 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44421 00000340 0000                    FirstArena:	dw 0		; first free block found
 44422 00000342 0000                    BestArena:	dw 0		; best free block found
 44423 00000344 0000                    LastArena:	dw 0		; last free block found
 44424 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44425 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44426 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44427 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44428 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44429 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44430 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44431                                  
 44432                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44433                                  	;EVEN
 44434 0000034F 90                      align 2
 44435                                  		; DOSDATA:0350h (MSDOS 6.21)
 44436 00000350 00                      DAY:		db 0		; Day of month
 44437 00000351 00                      MONTH:		db 0		; Month of year
 44438 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44439 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44440 00000356 00                      WEEKDAY:	db 0		; Day of week
 44441                                  ; end warning
 44442                                  
 44443 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44444 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44445 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44446                                  
 44447                                  ; Combination of all device call parameters
 44448                                  	;PUBLIC	DEVCALL 	;
 44449                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44450                                  DEVCALL: ; 08/08/2018
 44451 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44452 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44453 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44454 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44455 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44456                                  
 44457                                  	;PUBLIC	CALLUNIT
 44458                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44459                                  CALLFLSH: ; LABEL   WORD	;
 44460 00000367 00                      CALLMED:	db 0		; media byte
 44461                                  CALLBR:	  ; LABEL   DWORD	;
 44462                                  	;PUBLIC	CALLXAD 	;
 44463                                  CALLXAD:  ; LABEL   DWORD	;
 44464 00000368 00                      CALLRBYT:	db 0		;
 44465                                  	;PUBLIC	CALLVIDM	;
 44466                                  CALLVIDM: ; LABEL   DWORD	;
 44467 00000369 00<rep 3h>              	times 3 db 0	;
 44468                                  	;PUBLIC CallBPB		;
 44469                                  CALLBPB:  ; LABEL   DWORD	;
 44470                                  CALLSCNT:			;
 44471 0000036C 0000                    		dw 0		;
 44472                                  	;PUBLIC	CALLSSEC	;
 44473                                  CALLSSEC: ; LABEL   WORD	;
 44474 0000036E 0000                    		dw 0		;
 44475 00000370 00000000                CALLVIDRW:	dd 0		;
 44476                                  ;MSDOS 6.0
 44477 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44478 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44479                                  
 44480                                  ; Same as above for I/O calls	;
 44481                                  				;
 44482                                  	;PUBLIC	IOCall		;
 44483                                  ;IOCALL	SRHEAD	<>		;
 44484                                  IOCALL:	; 07/08/2018
 44485 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44486 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44487 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44488 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44489 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44490                                  IOFLSH:	  ; LABEL   WORD	;
 44491                                          ;PUBLIC  IORCHR		;
 44492                                  IORCHR:	  ; LABEL   BYTE	;
 44493 00000389 00                      IOMED:		db 0		;
 44494 0000038A 00000000                IOXAD:		dd 0		;
 44495 0000038E 0000                    IOSCNT:		dw 0		;	
 44496 00000390 0000                    IOSSEC:		dw 0		;
 44497                                  
 44498                                  ; Call struct for DSKSTATCHK	;
 44499 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44500 00000393 00                      		db 0
 44501 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44502 00000395 0000                    DSKSTST:	dw 0		;
 44503 00000397 00<rep 8h>              	times 8	db 0		;
 44504 0000039F 00                      DSKCHRET:	db 0		;
 44505                                  
 44506                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44507                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44508                                  ;hkn   short_addr  DEVIOBUF	;
 44509                                  	
 44510 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44511 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44512 000003A4 0100                    DSKSTCNT:	dw 1		;
 44513 000003A6 0000                    		dw 0		;
 44514                                  
 44515 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44516                                  
 44517                                  ;MSDOS 6.0
 44518                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44519 000003A9 00000000                		dd 0		;MS. position
 44520 000003AD 00000000                		dd 0		;MS. length
 44521                                  
 44522                                  ;hkn; the foll. was moved from dosmes.asm.
 44523                                  
 44524                                  	;EVEN
 44525 000003B1 90                      align 2				; needed to maintain offsets
 44526                                  
 44527                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44528                                  USERNUM:
 44529 000003B2 0000                     		dw 0		; 24 bit user number
 44530 000003B4 00                      		db 0
 44531                                  ;IF IBM
 44532                                  ;IF IBMCOPYRIGHT
 44533                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44534                                  ;ELSE
 44535                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44536                                  ;ENDIF
 44537                                  ;ELSE
 44538 000003B5 FF                      OEMNUM:		DB 0FFh
 44539                                  ;ENDIF
 44540                                  
 44541                                  ;============================================================================
 44542                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44543                                  ;============================================================================
 44544                                  ; 25/04/2019 - Retro DOS 4.0
 44545                                  
 44546                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44547                                  ; ----------------------------------------------------------
 44548                                  ; This data section which was named as uninitialized data
 44549                                  ; (as overlayed by initialization code) but follows 
 44550                                  ; initialized data section from DOSDATA:03B6h address
 44551                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44552                                  ; and there is not overlaying..)
 44553                                  ; **********************************************************
 44554                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44555                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44556                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44557                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44558                                  ; TIMEBUF is at offset 03B6h.
 44559                                  ; **********************************************************	
 44560                                  
 44561                                  ;Break <Uninitialized data overlayed by initialization code>
 44562                                  ;----------------------------------------------------------------------------
 44563                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44564                                  ; Init code overlaps with data area below
 44565                                  
 44566                                  ; 	ORG     0
 44567                                  
 44568                                  MSDAT001S:	; label byte
 44569                                  
 44570                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44571                                  TIMEBUF: ;	times 6 db 0
 44572 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44573 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44574                                  
 44575                                  ; The following areas are used as temp buffer in EXEC system call
 44576                                  
 44577                                  ; DOSDATA:03BEh
 44578                                  OPENBUF: ;times 64  dw	0
 44579 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44580                                  RENBUF:	
 44581 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44582                                  
 44583                                  ; Buffer for search calls
 44584                                  SEARCHBUF:	
 44585 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44586                                  DUMMYCDS:  ;times 88 db 0
 44587 000004F3 00<rep 58h>             	times	curdirLen db 0
 44588                                  
 44589                                  ; End of contiguous buffer
 44590                                   
 44591                                  ; Temporary directory entry for use by many routines. Device directory
 44592                                  ; entries (bogus) are built here.
 44593                                  
 44594                                  ; DOSDATA:054Bh
 44595                                  
 44596                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44597                                  
 44598                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44599                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44600                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44601                                  
 44602                                  NAME1:	
 44603 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44604                                  NAME2:
 44605 00000557 00<rep Dh>              	times	13 db	0 		;
 44606                                  DESTSTART:
 44607 00000564 0000                    	dw	0			;
 44608                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44609                                  	;times	5  db	0
 44610 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44611                                  
 44612                                  ; End Temporary directory entry.
 44613                                  
 44614 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44615                                  EXTFCB:	
 44616 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44617                                  SATTRIB:
 44618 0000056D 00                      	db	0		; Storage for search attributes
 44619                                  OPEN_ACCESS:
 44620 0000056E 00                      	db	0		; access of open system call
 44621                                  FOUNDDEL:
 44622 0000056F 00                      	db	0		; true => file was deleted
 44623                                  FOUND_DEV:
 44624 00000570 00                      	db	0		; true => search found a device
 44625                                  FSPLICE:
 44626 00000571 00                      	db	0		; true => do a splice in transpath
 44627                                  FSHARING:
 44628 00000572 00                      	db	0		; TRUE => no redirection
 44629                                  SECCLUSPOS:
 44630 00000573 00                      	db	0		; Position of first sector within cluster
 44631 00000574 00                      TRANS:	db	0		;
 44632 00000575 00                      READOP:	db	0		;
 44633                                  THISDRV:
 44634 00000576 00                      	db	0		;
 44635                                  CLUSFAC:
 44636 00000577 00                      	db	0		;
 44637                                  CLUSSPLIT:
 44638 00000578 00                      	db	0		;
 44639                                  INSMODE:
 44640 00000579 00                      	db	0		; true => insert mode in buffered read
 44641 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44642 0000057B 00                      VOLID:	db	0		;
 44643                                  EXIT_TYPE:
 44644 0000057C 00                      	db	0		; type of exit...
 44645                                   
 44646                                  	;EVEN
 44647                                  
 44648 0000057D 90                      align 2
 44649                                  
 44650                                  ; DOSDATA:057Eh
 44651                                  
 44652                                  ; WARNING - the following two items are accessed as a word
 44653                                  
 44654                                  CREATING:
 44655 0000057E 00                      	db	0		; true => creating a file
 44656 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44657                                  				; = DIRFREE iff BUGBUG
 44658                                  EXITHOLD:
 44659 00000580 00000000                	dd	0		; Temp location for proc terminate
 44660                                  USER_SP:
 44661 00000584 0000                    	dw	0		; User SP for system call
 44662                                  USER_SS:
 44663 00000586 0000                    	dw	0		; User SS for system call
 44664                                  CONTSTK:
 44665 00000588 0000                    	dw	0		;
 44666                                  THISDPB:
 44667 0000058A 00000000                	dd	0		;
 44668                                  CLUSSAVE:
 44669 0000058E 0000                    	dw	0		;
 44670                                  CLUSSEC:
 44671 00000590 00000000                	dd	0		;>32mb			AC0000
 44672                                  PREREAD:
 44673 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44674 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44675                                  FATBYTE:
 44676 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44677                                  ; DOSDATA:059Ah
 44678 0000059A 00000000                DEVPT:	dd	0		;
 44679                                  THISSFT:
 44680 0000059E 00000000                	dd	0		; Address of user SFT
 44681                                  THISCDS:
 44682 000005A2 00000000                	dd	0		; Address of current CDS
 44683                                  THISFCB:
 44684 000005A6 00000000                	dd	0		; Address of user FCB
 44685 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44686 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44687 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44688                                  WFP_START:
 44689 000005B2 0000                    	dw	0		;
 44690                                  REN_WFP:
 44691 000005B4 0000                    	dw	0		;
 44692                                  CURR_DIR_END:
 44693 000005B6 0000                    	dw	0		;
 44694                                  NEXTADD:
 44695 000005B8 0000                    	dw	0		;
 44696                                  LASTPOS:
 44697 000005BA 0000                    	dw	0		;
 44698                                  CLUSNUM:
 44699 000005BC 0000                    	dw	0		;
 44700 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44701                                  DIRSTART:
 44702 000005C2 0000                    	dw	0		;
 44703 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44704 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44705                                                                  ; sectors
 44706                                  BYTSECPOS:
 44707 000005CC 0000                    	dw	0		; Position of first byte within sector
 44708                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44709 000005CE 0000<rep 2h>                    times	2 dw 0
 44710                                  BYTCNT1:
 44711 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44712                                  BYTCNT2:
 44713 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44714 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44715                                  ; DOSDATA:05D8h
 44716                                  ENTFREE:
 44717 000005D8 0000                    	dw	0		;
 44718                                  ENTLAST:
 44719 000005DA 0000                    	dw	0		;
 44720                                  NXTCLUSNUM:
 44721 000005DC 0000                    	dw	0		;
 44722                                  GROWCNT:
 44723 000005DE 00000000                	dd	0		;
 44724 000005E2 00000000                CURBUF:	dd	0		;
 44725 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44726 000005EA 0000                    SAVEBX:	dw	0		;
 44727 000005EC 0000                    SAVEDS:	dw	0		;
 44728                                  RESTORE_TMP:
 44729 000005EE 0000                    	dw	0		; return address for restore world
 44730 000005F0 0000                    NSS:	dw	0
 44731 000005F2 0000                    NSP:	dw	0
 44732                                  ; DOSDATA:05F4h
 44733                                  EXTOPEN_FLAG:
 44734 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44735                                  EXTOPEN_ON:
 44736 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44737                                  EXTOPEN_IO_MODE:
 44738 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44739                                  SAVE_DI:
 44740 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44741                                  SAVE_ES:
 44742 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44743                                  SAVE_DX:
 44744 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44745                                  SAVE_CX:
 44746 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44747                                  SAVE_BX:
 44748 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44749                                  SAVE_SI:
 44750 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44751                                  SAVE_DS:
 44752 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44753                                  
 44754                                  ; DOSDATA:0607h
 44755                                  
 44756                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44757                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44758                                  ; the high 16, the low 16 are still in the register.
 44759                                  
 44760                                  HIGH_SECTOR:	
 44761 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44762                                  ;OffsetMagicPatch:
 44763                                  ;	dw	MagicPatch ;scottq 8/6/92
 44764                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44765 00000609 0000                    	dw	0
 44766                                  				;see dos\mpatch.asm
 44767                                  DISK_FULL:
 44768 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44769                                  TEMP_VAR:
 44770 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44771                                  TEMP_VAR2:
 44772 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44773 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44774                                  DOS34_FLAG:
 44775 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44776                                  NO_FILTER_PATH:
 44777 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44778                                  NO_FILTER_DPATH:
 44779 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44780                                  ; M008
 44781                                  AbsRdWr_SS:
 44782 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44783                                  AbsRdWr_SP:
 44784 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44785                                  
 44786                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44787                                  ; M008
 44788                                   
 44789                                   
 44790                                  ; make those pushes fast!!!
 44791                                  
 44792                                  ;EVEN
 44793                                  
 44794 0000061F 90                      align 2
 44795                                  
 44796                                  StackSize   equ 180h  ; 384	; gross but effective
 44797                                  
 44798                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44799                                  ;				; made up their minds about
 44800                                   
 44801                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44802                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44803                                  
 44804                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44805                                   
 44806 00000620 00<rep 180h>                    times	StackSize db	0	;
 44807                                  AUXSTACK:			; LABEL   BYTE
 44808                                   
 44809 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44810                                  DSKSTACK:			; LABEL   BYTE
 44811                                   
 44812 00000920 00<rep 180h>                    times	StackSize db	0	;
 44813                                  IOSTACK:			; LABEL   BYTE
 44814                                  
 44815                                  ; DOSDATA:0AA0h 
 44816                                   
 44817                                  ; patch space for Boca folks.
 44818                                  ; Say What????!!! This does NOT go into the swappable area!
 44819                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44820                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44821                                   
 44822                                  IBMPATCH: ; label byte
 44823                                  PRINTER_FLAG:
 44824 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44825                                  VOLCHNG_FLAG:
 44826 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44827                                  VIRTUAL_OPEN:
 44828 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44829                                   
 44830                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44831                                  
 44832                                  FSeek_drive:
 44833 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44834                                  FSeek_firclus:
 44835 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44836                                  FSeek_logclus:
 44837 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44838                                  FSeek_logsave:
 44839 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44840                                  
 44841                                  ; DOSDATA:0AAAh
 44842                                  
 44843                                  TEMP_DOSLOC:
 44844 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44845                                  				;at SYSINIT time.
 44846                                  SWAP_END:  ; LABEL   BYTE
 44847                                   
 44848                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44849                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44850                                  ; to include this byte.
 44851                                   
 44852 00000AAC 00                      	db	0
 44853                                  
 44854                                  ; DOSDATA:0AADh
 44855                                   
 44856                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44857                                  
 44858                                  ;DOSDATA    ENDS
 44859                                  
 44860                                  ;============================================================================
 44861                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44862                                  ;============================================================================
 44863                                  ; 27/04/2019 - Retro DOS 4.0
 44864                                  ; 16/07/2018 - Retro DOS 3.0
 44865                                  
 44866                                  ;DOSDATA Segment
 44867                                  
 44868                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44869                                  
 44870                                  ;
 44871                                  ; upper case table
 44872                                  ; ---------------------------------------------------------------------------
 44873                                  UCASE_TAB:	; label   byte
 44874 00000AAD 8000                    	dw	128
 44875 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44876 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44877 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44878 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44879 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44880 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44881 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44882 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44883 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44884 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44885 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44886 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44887 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44888 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44889 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44890 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44891                                  ;
 44892                                  ; file upper case table
 44893                                  ; ---------------------------------------------------------------------------
 44894                                  FILE_UCASE_TAB:	; label  byte
 44895 00000B2F 8000                    	dw	128
 44896 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44897 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44898 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44899 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44900 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44901 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44902 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44903 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44904 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44905 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44906 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44907 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44908 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44909 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44910 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44911 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44912                                  ;
 44913                                  ; file char list
 44914                                  ; ---------------------------------------------------------------------------
 44915                                  FILE_CHAR_TAB:	; label  byte
 44916 00000BB1 1600                    	dw	22				; length
 44917 00000BB3 0100FF                  	db	1,0,255 			; include all
 44918 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44919 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44919 00000BC2 7C3C3E2B3D3B2C     
 44920                                  	;db	24 dup (?)			; reserved
 44921 00000BC9 00<rep 18h>             	times	24 db 0
 44922                                  
 44923                                  ;
 44924                                  ; collate table
 44925                                  ; ---------------------------------------------------------------------------
 44926                                  COLLATE_TAB:	; label   byte
 44927 00000BE1 0001                    	dw	256
 44928 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44929 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44930 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44931 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44932 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44933 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44934 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44935 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44936 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44937 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44938 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44939 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44940 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44941 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44942 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44943 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44944 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44945 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44946 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44947 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44948 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44949 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44950 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44951 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44952 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44953 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44954 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44955 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44956 00000CC3 E053                    	db	224,"S"
 44957 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44958 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44959 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44960 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44961                                  
 44962                                  ; ------------------------------------------------<MSKK01>----------------------
 44963                                  
 44964                                  ; DOSDATA:0CE3h
 44965                                  
 44966                                  ; 29/04/2019
 44967                                  
 44968                                  ; dbcs is not supported in DOS 3.3
 44969                                  ;		   DBCS_TAB	    CC_DBCS <>
 44970                                  ;
 44971                                  ; DBCS for DOS 4.00			   2/12/KK
 44972                                  
 44973                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44974                                  ; ------------------------------------------------<MSKK01>----------------------
 44975                                  ;ifdef	DBCS
 44976                                  ; ifdef	  JAPAN
 44977                                  ;		dw	6		; <MSKK01>
 44978                                  ;		db	081h,09fh	; <MSKK01>
 44979                                  ;		db	0e0h,0fch	; <MSKK01>
 44980                                  ;		db	0,0		; <MSKK01>
 44981                                  ;
 44982                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44983                                  ; endif
 44984                                  ; ifdef	  TAIWAN
 44985                                  ;		dw	4		; <TAIWAN>
 44986                                  ;		db	081h,0FEh	; <TAIWAN>
 44987                                  ;		db	0,0		; <TAIWAN>
 44988                                  ;
 44989                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44990                                  ; endif
 44991                                  ; ifdef   KOREA                         ; Keyl
 44992                                  ;               dw      4               ; <KOREA>
 44993                                  ;               db      0A1h,0FEh       ; <KOREA>
 44994                                  ;               db      0,0             ; <KOREA>
 44995                                  ;
 44996                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44997                                  ;  endif
 44998                                  ;else
 44999 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45000                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45001 00000CE5 00<rep 10h>             		times	16 db 0
 45002                                  
 45003                                  ;		dw	6		;  2/12/KK
 45004                                  ;		db	081h,09Fh	;  2/12/KK
 45005                                  ;		db	0E0h,0FCh	;  2/12/KK
 45006                                  ;		db	0,0		;  2/12/KK
 45007                                  ;
 45008                                  ;endif
 45009                                  ; ------------------------------------------------<MSKK01>----------------------
 45010                                  
 45011                                  ; DOSDATA:0CF5h
 45012                                  
 45013                                  ; ---------------------------------------------------------------------------
 45014                                  ;
 45015                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45016                                  ;     ENTRY: AL = Character to map
 45017                                  ;     EXIT:  AL = The converted character
 45018                                  ; Alters no registers except AL and flags.
 45019                                  ; The routine should do nothing to chars below 80H.
 45020                                  ; ---------------------------------------------------------------------------
 45021                                  ; Example:
 45022                                  
 45023                                  MAP_CASE:
 45024                                  ;Procedure MAP_CASE,FAR
 45025                                  
 45026 00000CF5 3C80                    	CMP	AL,80h
 45027 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45028 00000CF9 CB                      	RETF
 45029                                  Map1:
 45030 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45031 00000CFC 1E                      	PUSH	DS
 45032 00000CFD 53                      	PUSH	BX
 45033 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45034                                  FINISH:
 45035 00000D01 0E                      	PUSH	CS		;Move to DS
 45036 00000D02 1F                      	POP	DS
 45037 00000D03 D7                      	XLAT			;Get upper case character
 45038 00000D04 5B                      	POP	BX
 45039 00000D05 1F                      	POP	DS
 45040                                  L_RET:	
 45041 00000D06 CB                      	RETF
 45042                                  
 45043                                  ;EndProc MAP_CASE
 45044                                  
 45045                                  ; ---------------------------------------------------------------------------
 45046                                  
 45047                                  ; The variables for ECS version are moved here for the same data alignments
 45048                                  ; as IBM-DOS and MS-DOS.
 45049                                  
 45050                                  InterChar:
 45051 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45052                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45053                                  DUMMY:	; LABEL   WORD
 45054                                  InterCon:  
 45055 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45056                                  SaveCurFlg:
 45057 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45058                                  
 45059                                  ; ---------------------------------------------------------------------------
 45060                                  
 45061 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45062                                  redir_patch:
 45063 00000D0C 00                      	  db	0
 45064                                  
 45065                                  ; DOSDATA:0D0Dh
 45066                                  
 45067                                  Mark1:	; label byte
 45068                                  
 45069                                  ;IF2
 45070                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45071                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45072                                  ;	ENDIF
 45073                                  ;ENDIF
 45074                                  
 45075 00000D0D 00<rep 5h>              	  times 5 db 0
 45076                                  
 45077                                  ;############################################################################
 45078                                  ;
 45079                                  ; ** HACK FOR DOS 4.0 REDIR **
 45080                                  ; 
 45081                                  ; The redir requires the following:
 45082                                  ;
 45083                                  ;	MSVERS	offset D12H
 45084                                  ;	YRTAB	offset D14H
 45085                                  ; 	MONTAB	offset D1CH
 45086                                  ;
 45087                                  ; WARNING! WARNING!
 45088                                  ; 
 45089                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45090                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45091                                  ;
 45092                                  ; CURRENTLY MARK1 = 0D0DH
 45093                                  ;
 45094                                  ;############################################################################
 45095                                  
 45096                                  	;ORG	0D12h
 45097                                  
 45098                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45099                                  
 45100                                  	;db	6
 45101                                  	;db	20
 45102                                  
 45103                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45104                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45105 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45106 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45107                                  
 45108                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45109                                  ;
 45110                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45111                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45112                                  
 45113                                  ; Days in year
 45114                                  
 45115                                  YRTAB:   
 45116 00000D14 C8A6                    	DB	200,166			; Leap year
 45117 00000D16 C8A5                    	DB	200,165
 45118 00000D18 C8A5                    	DB	200,165
 45119 00000D1A C8A5                    	DB	200,165
 45120                                  
 45121                                  ; Days of each month
 45122                                  
 45123                                  MONTAB:        
 45124 00000D1C 1F                      	DB      31                      ; January
 45125                                  february:
 45126 00000D1D 1C                      	DB	28 			; February--reset each 
 45127                                  					; time year changes
 45128 00000D1E 1F                              DB      31                      ; March
 45129 00000D1F 1E                              DB      30                      ; April
 45130 00000D20 1F                              DB      31                      ; May
 45131 00000D21 1E                              DB      30                      ; June
 45132 00000D22 1F                              DB      31                      ; July
 45133 00000D23 1F                              DB      31                      ; August
 45134 00000D24 1E                              DB      30                      ; September
 45135 00000D25 1F                              DB      31                      ; October
 45136 00000D26 1E                              DB      30                      ; November
 45137 00000D27 1F                              DB      31                      ; December
 45138                                  
 45139                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45140                                  
 45141                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45142                                  
 45143                                  SysInitTable:
 45144                                  	;dw	SYSINITVAR
 45145 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45146 00000D2A 0000                            dw      0		; segment
 45147 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45148 00000D2E 0000                            dw      0		; segment of pointer
 45149                                  
 45150                                  ; DOS 3.3 F.C. 6/12/86
 45151                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45152                                  
 45153                                  FastTable:				; a better name
 45154                                  FastOpenTable:
 45155 00000D30 0200                    	dw      2                       ; number of entries
 45156 00000D32 [A912]                  	dw      FastRet			; pointer to ret instr.
 45157 00000D34 0000                    	dw      0                       ; and will be modified by
 45158 00000D36 [A912]                  	dw      FastRet			; FASTxxx when loaded in
 45159 00000D38 0000                    	dw      0                       
 45160                                  
 45161                                  ; DOS 3.3 F.C. 6/12/86
 45162                                  
 45163                                  FastFlg:				; flags
 45164                                  FastOpenFlg:
 45165 00000D3A 00                      	db	0			; don't change the foll: order  
 45166                                  
 45167                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45168                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45169                                  ; or filled by FastOPen when calling FastOpen Lookup
 45170                                  
 45171                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45172                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45173                                  	;times	11 db 0
 45174 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45175                                  
 45176                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45177                                  ; when calling FastOpen Lookup
 45178                                  
 45179                                  Dir_Info_Buff:	; label  byte
 45180                                  	;db   	SIZE dir_entry dup (0)
 45181                                  	;times	32 db 0
 45182 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45183                                  
 45184                                  Next_Element_Start:
 45185 00000D66 0000                    	dw	0			; save next element start offset
 45186                                  Del_ExtCluster:
 45187 00000D68 0000                    	dw	0			; for dos_delete                       
 45188                                  
 45189                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45190                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45191                                  ; not to destroy the INT 21 stack saved for the user.
 45192                                  
 45193                                  USER_SP_2F:	; LABEL  WORD
 45194 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45195                                  
 45196                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45197                                  DOS_TEMP:	; label  word		; temporary word
 45198                                  FAKE_STACK_2F:  
 45199                                  	; dw  14 dup (0)		; 12 register temporary storage
 45200 00000D6C 0000<rep Eh>            	times 14 dw 0
 45201                                  
 45202                                  Hash_Temp: 	;label  word		; temporary word             
 45203                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45204 00000D88 0000<rep 4h>            	times 4 dw 0
 45205                                              	
 45206                                  SCAN_FLAG:	
 45207 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45208                                  DATE_FLAG:
 45209 00000D91 0000                    	dw     0                	; flag to update the date
 45210                                  
 45211                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45212 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45213                                  
 45214                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45215 00000D95 00000000                	dd     0               		; for extended error                   
 45216 00000D99 00000000                	dd     0			; for parser                           
 45217 00000D9D 00000000                	dd     0			; for critical errror                  
 45218 00000DA1 00000000                	dd     0			; for IFS                              
 45219 00000DA5 00000000                	dd     0			; for code reduction                   
 45220                                  
 45221                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45222 00000DA9 FFFFFFFF                	dd     -1                                                        
 45223                                  SC_SECTOR_SIZE:
 45224 00000DAD 0000                    	dw	0			; sector size for SC                 
 45225                                  SC_DRIVE:
 45226 00000DAF 00                      	db	0			; drive # for secondary cache        
 45227                                  CurSC_DRIVE:
 45228 00000DB0 FF                      	db	-1			; current SC drive                   
 45229                                  CurSC_SECTOR:
 45230 00000DB1 00000000                	dd	0			; current SC starting sector         
 45231                                  SC_STATUS:
 45232 00000DB5 0000                    	dw	0			; SC status word                     
 45233                                  SC_FLAG:
 45234 00000DB7 00                      	db	0			; SC flag                            
 45235                                  AbsDskErr:
 45236 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45237                                                                                            
 45238                                  NO_NAME_ID:	; label byte                                                           
 45239 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45239 00000DC3 2020               
 45240                                  
 45241                                  ;hkn; moved from TABLE segment in kstrin.asm
 45242                                  
 45243                                  KISTR001S:	; label	byte		; 2/17/KK
 45244 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45245                                  KISTR001E:	; label	byte		; 2/17/KK
 45246                                  
 45247                                  ; the nul device driver used to be part of the code. However, since the 
 45248                                  ; header is in the data, and the entry points are only given as an offset,
 45249                                  ; the strategy and interrupt entry points must also be in the data now.
 45250                                  
 45251                                  ; DOSDATA:0DC6h
 45252                                  
 45253                                  SNULDEV:
 45254                                  ;procedure snuldev,far
 45255                                  	;or	word [es:bx+3],100h
 45256                                  	; 17/12/2022
 45257                                  	;or	byte [es:bx+4],01h
 45258                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45259                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45260 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45261                                  INULDEV:
 45262 00000DCC CB                      	retf				; must not be a return!
 45263                                  ;endproc snuldev
 45264                                  
 45265                                  ;M044
 45266                                  ; Second part of save area for saving last para of Windows memory
 45267                                  
 45268                                  WinoldPatch2:
 45269                                  	;db	8 dup (?)	; M044
 45270 00000DCD 00<rep 8h>              	times	8 db 0	
 45271                                  UmbSave2:
 45272                                  	;db	5 dup (?)	; M062
 45273 00000DD5 00<rep 5h>              	times	5 db 0
 45274                                  UmbSaveFlag:
 45275 00000DDA 00                      	db	0		; M062
 45276                                  
 45277                                  ; DOSDATA:0DDBh
 45278                                  
 45279                                  Mark2:	; label byte
 45280                                  
 45281                                  ;IF2
 45282                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45283                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45284                                  ;	ENDIF
 45285                                  ;ENDIF
 45286                                  
 45287                                  ;############################################################################
 45288                                  ;
 45289                                  ; ** HACK FOR DOS 4.0 REDIR **
 45290                                  ; 
 45291                                  ; The redir requires the following:
 45292                                  ;
 45293                                  ;	ERR_TABLE_21	offset DDBH
 45294                                  ;	ERR_TABLE_24	offset E5BH
 45295                                  ; 	ErrMap24	offset EABH
 45296                                  ;
 45297                                  ; WARNING! WARNING!
 45298                                  ;
 45299                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45300                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45301                                  ;
 45302                                  ; CURRENTLY MARK2 = 0DD0H
 45303                                  ;
 45304                                  ;############################################################################
 45305                                  
 45306                                  	;ORG	0DDBh
 45307                                  
 45308                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45309                                  
 45310                                  ; ---------------------------------------------------------------------------
 45311                                  ;
 45312                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45313                                  ; errors. Each entry is 4 bytes long:
 45314                                  ;
 45315                                  ;       Err#,Class,Action,Locus
 45316                                  ;
 45317                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45318                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45319                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45320                                  ;
 45321                                  ; ---------------------------------------------------------------------------
 45322                                  
 45323                                  ;ErrTab  Macro   err,class,action,locus
 45324                                  ;ifidn <locus>,<0FFh>
 45325                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45326                                  ;ELSE
 45327                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45328                                  ;ENDIF
 45329                                  ;ENDM
 45330                                  
 45331                                  ERR_TABLE_21: ; LABEL   BYTE
 45332 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45333 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45334 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45335 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45336 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45337 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45338 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45339 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45340 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45341 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45342 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45343 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45344 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45345 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45346 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45347 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45348 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45349 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45350 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45351 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45352 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45353 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45354 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45355 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45356 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45357 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45358 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45359 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45360                                      ; MSDOS 6.0
 45361 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45362 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45363 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45364 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45365                                  
 45366                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45367                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45368                                  ;		db 2,8,3,2
 45369                                  ;		db 3,8,3,2
 45370                                  ;		db 4,1,4,1
 45371                                  ;		db 5,3,3,0FFh
 45372                                  ;		db 6,7,4,1
 45373                                  ;		db 7,7,5,5
 45374                                  ;		db 8,1,4,5
 45375                                  ;		db 9,7,4,5
 45376                                  ;		db 0Ah,7,4,5
 45377                                  ;		db 0Bh,9,3,1
 45378                                  ;		db 0Ch,7,4,1
 45379                                  ;		db 0Dh,9,4,1
 45380                                  ;		db 0Fh,8,3,2
 45381                                  ;		db 10h,3,3,2
 45382                                  ;		db 11h,0Dh,3,2
 45383                                  ;		db 12h,8,3,2
 45384                                  ;		db 50h,0Ch,3,2
 45385                                  ;		db 20h,0Ah,2,2
 45386                                  ;		db 21h,0Ah,2,2
 45387                                  ;		db 54h,1,4,0FFh
 45388                                  ;		db 56h,3,3,1
 45389                                  ;		db 52h,1,4,2
 45390                                  ;		db 32h,9,3,3
 45391                                  ;		db 55h,0Ch,3,3
 45392                                  ;		db 57h,9,3,1
 45393                                  ;		db 53h,0Dh,4,1
 45394                                  ;		db 24h,1,4,5
 45395                                  ; MSDOS 6.0 (MSDOS 6.21)
 45396                                  ;		db 26h,1,4,1
 45397                                  ;		db 27h,1,4,1
 45398                                  ;		db 5Ah,0Dh,4,2
 45399                                  ; MSDOS 6.0 & MSDOS 3.3
 45400                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45401                                  
 45402                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45403                                  
 45404                                  ; ---------------------------------------------------------------------------
 45405                                  ;
 45406                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45407                                  ; errors. Each entry is 4 bytes long:
 45408                                  ;
 45409                                  ;       Err#,Class,Action,Locus
 45410                                  ;
 45411                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45412                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45413                                  ; THE END.
 45414                                  ;
 45415                                  ; ---------------------------------------------------------------------------
 45416                                  
 45417                                  ERR_TABLE_24: ; LABEL   BYTE
 45418 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45419 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45420 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45421 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45422 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45423 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45424 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45425 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45426 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45427 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45428 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45429 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45430 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45431 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45432 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45433 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45434 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45435 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45436 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45437 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45438                                  
 45439                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45440                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45441                                  ;		db 14h,4,5,1
 45442                                  ;		db 15h,5,7,0FFh
 45443                                  ;		db 16h,4,5,1
 45444                                  ;		db 17h,0Bh,4,2
 45445                                  ;		db 18h,4,5,1
 45446                                  ;		db 19h,5,1,2
 45447                                  ;		db 1Ah,0Bh,7,2
 45448                                  ;		db 1Bh,0Bh,4,2
 45449                                  ;		db 1Ch,2,7,4
 45450                                  ;		db 1Dh,5,4,0FFh
 45451                                  ;		db 1Eh,5,4,0FFh
 45452                                  ;		db 1Fh,0Dh,4,0FFh
 45453                                  ;		db 20h,0Ah,2,2
 45454                                  ;		db 21h,0Ah,2,2
 45455                                  ;		db 22h,0Bh,7,2
 45456                                  ;		db 32h,9,3,3
 45457                                  ;		db 23h,7,4,1
 45458                                  ;		db 24h,1,4,5
 45459                                  ;		db 0FFh,0Dh,5,0FFh
 45460                                  
 45461                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45462                                  
 45463                                  ; ---------------------------------------------------------------------------
 45464                                  ;
 45465                                  ; We need to map old int 24 errors and device driver errors into the new set
 45466                                  ; of errors. The following table is indexed by the new errors
 45467                                  ;
 45468                                  ; ---------------------------------------------------------------------------
 45469                                  
 45470                                  ;Public  ErrMap24
 45471                                  ErrMap24: ; Label   BYTE
 45472 00000EAB 13                          DB  error_write_protect	; 0
 45473 00000EAC 14                          DB  error_bad_unit		; 1
 45474 00000EAD 15                          DB  error_not_ready		; 2
 45475 00000EAE 16                          DB  error_bad_command	; 3
 45476 00000EAF 17                          DB  error_CRC		; 4
 45477 00000EB0 18                          DB  error_bad_length	; 5
 45478 00000EB1 19                          DB  error_seek		; 6
 45479 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45480 00000EB3 1B                          DB  error_sector_not_found	; 8
 45481 00000EB4 1C                          DB  error_out_of_paper	; 9
 45482 00000EB5 1D                          DB  error_write_fault	; A
 45483 00000EB6 1E                          DB  error_read_fault	; B
 45484 00000EB7 1F                          DB  error_gen_failure	; C
 45485 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45486 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45487 00000EBA 22                          DB  error_wrong_disk	; F
 45488                                  
 45489                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45490                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45491                                  	
 45492                                  ErrMap24End: ; LABEL   BYTE
 45493                                  
 45494                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45495                                  
 45496                                  ; ---------------------------------------------------------------------------
 45497                                  
 45498                                  ; 27/04/2019 - Retro DOS v4.0
 45499                                  
 45500                                  FIRST_BUFF_ADDR:
 45501 00000EBB 0000                    	dw	0			; first buffer address               
 45502                                  SPECIAL_VERSION:
 45503 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45504                                  FAKE_COUNT:
 45505 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45506                                  OLD_FIRSTCLUS:
 45507 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45508                                  
 45509                                  ; ---------------------------------------------------------------------------
 45510                                  
 45511                                  ;smr; moved from TABLE segment in exec.asm
 45512                                  
 45513 00000FC0 0000                    exec_init_SP: dw 0
 45514 00000FC2 0000                    exec_init_SS: dw 0
 45515 00000FC4 0000                    exec_init_IP: dw 0
 45516 00000FC6 0000                    exec_init_CS: dw 0
 45517                                  
 45518                                  exec_signature:
 45519 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45520                                  exec_len_mod_512:
 45521 00000FCA 0000                    	dw	0	; low 9 bits of length
 45522                                  exec_pages:
 45523 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45524                                  exec_rle_count:
 45525 00000FCE 0000                    	dw	0	; count of reloc entries
 45526                                  exec_par_dir:
 45527 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45528                                  exec_min_BSS:
 45529 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45530                                  exec_max_BSS:
 45531 00000FD4 0000                    	dw	0	; max number of para of BSS
 45532                                  exec_SS:
 45533 00000FD6 0000                    	dw	0	; stack of image
 45534                                  exec_SP:
 45535 00000FD8 0000                    	dw	0	; SP of image
 45536                                  exec_chksum:
 45537 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45538                                  exec_IP:
 45539 00000FDC 0000                    	dw	0	; IP of entry
 45540                                  exec_CS:
 45541 00000FDE 0000                    	dw	0	; CS of entry
 45542                                  exec_rle_table:
 45543 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45544                                  
 45545                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45546                                  
 45547                                  ;smr; eom
 45548                                  
 45549                                  ; ---------------------------------------------------------------------------
 45550                                  
 45551                                  ;SR;
 45552                                  ; WIN386 instance table for DOS
 45553                                  
 45554                                  Win386_Info:
 45555 00000FE2 0300                    	db	3, 0
 45556 00000FE4 000000000000000000-     	dd	0, 0, 0
 45556 00000FED 000000             
 45557 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45558                                  
 45559                                  Instance_Table:
 45560 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45561 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45562 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45563 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45564 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45565 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45566 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45567 0000101E 00000000                	dw	0, 0
 45568                                  
 45569                                  ; M001; SR;
 45570                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45571                                  ; M001; some DOS variables. Note that the only really important variable in 
 45572                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45573                                  ; M001; which does not need to be done in DOS 5.0. 
 45574                                  
 45575                                  ; 29/12/2022
 45576                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45577                                  
 45578                                  Win386_DOSVars:
 45579 00001022 05                      	db	5	;Major version 5 ; M001
 45580 00001023 00                      	db	0	;Minor version 0 ; M001
 45581 00001024 [EC05]                  	dw	SAVEDS	; M001
 45582 00001026 [EA05]                  	dw	SAVEBX	; M001
 45583 00001028 [2103]                  	dw	INDOS	; M001
 45584 0000102A [3E03]                  	dw	USER_ID	; M001
 45585 0000102C [1503]                  	dw	CritPatch ; M001
 45586 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45587                                  
 45588                                  ;SR;
 45589                                  ; Flag to indicate whether WIN386 is running or not
 45590                                  
 45591 00001030 00                      IsWin386: db	0
 45592                                  
 45593                                  ;M018
 45594                                  ; This variable contains the path to the VxD device needed for Win386
 45595                                  
 45596 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45596 0000103A 2E33383600         
 45597                                  
 45598                                  ;End WIN386 support
 45599                                  
 45600                                  ; ---------------------------------------------------------------------------
 45601                                  
 45602                                  ;SR;
 45603                                  ; These variables have been added for the special lie support for device
 45604                                  ;drivers.
 45605                                  ;
 45606                                  
 45607                                  DriverLoad:	
 45608 0000103F 01                      	db	1	;initialized to do special handling
 45609                                  BiosDataPtr:
 45610 00001040 00000000                	dd	0
 45611                                  
 45612                                  ; 29/12/2022 - Retro DOS v4.1
 45613                                  %if 0
 45614                                  
 45615                                  ; 27/04/2019 - Retro DOS v4.0
 45616                                  ; 04/11/2022
 45617                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45618                                  
 45619                                  ;------------------------------------------------------------------------
 45620                                  ; Patch for Sidekick
 45621                                  ;
 45622                                  ; A documented method for finding the offset of the Errormode flag in the 
 45623                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45624                                  ; for the following sequence of instructions.
 45625                                  ;
 45626                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45627                                  ;
 45628                                  ; The Offset of Errormode flag is 0320h
 45629                                  ;
 45630                                  ;------------------------------------------------------------------------
 45631                                  
 45632                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45633                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45634                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45635                                  	db	0CDh, 028h			 ; int  28h
 45636                                  
 45637                                  ;--------------------------------------------------------------------------
 45638                                  ; Patch for PortOfEntry - M036
 45639                                  ;
 45640                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45641                                  ; the offset of Errormode flag. The following patch is to support them in 
 45642                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45643                                  ;
 45644                                  ;---------------------------------------------------------------------------
 45645                                  
 45646                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45647                                  	db	075h, 037h			 ; jnz	NearLabel
 45648                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45649                                  
 45650                                  %endif ; 29/12/2022
 45651                                  
 45652                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45653                                  
 45654                                  ;--------------------------------------------------------------------------
 45655                                  
 45656                                  ;*** New FCB Implementation
 45657                                  ; This variable is used as a cache in the new FCB implementation to remember
 45658                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45659                                  
 45660 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45661                                  
 45662                                  ;DOSDATA ENDS
 45663                                  
 45664                                  ;============================================================================
 45665                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45666                                  ;============================================================================
 45667                                  ; 27/04/2019 - Retro DOS 4.0
 45668                                  
 45669                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45670                                  
 45671                                  ;---------------------------------------------------------------------------
 45672                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45673                                  ;----------------------------------------------------------------------------
 45674                                  	
 45675                                  	;db	90h
 45676                                  
 45677                                  	;EVEN
 45678                                  align 2
 45679                                  
 45680                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45681                                  
 45682                                  DOSINTTABLE:	; LABEL	DWORD
 45683                                  
 45684                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45685                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45686                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45687                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45688                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45689                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45690                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45691                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45692                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45693                                  	
 45694 00001048 [0652]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45695 0000104C [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45696 00001050 [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45697 00001054 [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45698 00001058 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45699 0000105C [4061]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45700 00001060 [0707]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45701 00001064 [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45702 00001068 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45703                                  
 45704 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45705 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45706                                  
 45707                                  ;-------------------------------------------------------------------------
 45708                                  ;
 45709                                  ; LOW MEM STUB:
 45710                                  ;
 45711                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45712                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45713                                  ; DOS load in HIMEM. Each entry point does this.
 45714                                  ;
 45715                                  ; 	1. if jmp to 8 has been patched out
 45716                                  ;	   2. if A20 OFF
 45717                                  ;	      3. Enable A20
 45718                                  ;	   4. else 
 45719                                  ;	      5. just go to dos entry
 45720                                  ;	   6. endif
 45721                                  ;	7. else
 45722                                  ;	   8. just go to dos entry
 45723                                  ;	9. endif
 45724                                  ;
 45725                                  ;--------------------------------------------------------------------------
 45726                                  
 45727                                  ; 27/04/2019 - Retro DOS v4.0
 45728                                  
 45729                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45730                                  
 45731                                  ;--------------------------------------------------------------------------
 45732                                  ;
 45733                                  ; DIVIDE BY 0 handler
 45734                                  ;
 45735                                  ;--------------------------------------------------------------------------
 45736                                  
 45737                                  ldivov:
 45738                                  	; The following jump, skipping the XMS calls will be patched to 
 45739                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45740                                  	; needed because the stub is installed even before the XMS driver
 45741                                  	; is loaded if the user specifies dos=high in the config.sys
 45742                                  i0patch:
 45743 00001070 EB03                    	jmp	short divov_cont	
 45744                                  
 45745 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45746                                  divov_cont:
 45747 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45748                                  
 45749                                  ;------------------------------------------------------------------------
 45750                                  ;
 45751                                  ; INT 20 Handler
 45752                                  ;
 45753                                  ; Here we do not have to set up the stack to return here as the abort call
 45754                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45755                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45756                                  ; will be restored then.
 45757                                  ;
 45758                                  ;-------------------------------------------------------------------------
 45759                                  
 45760                                  lquit:
 45761                                  	; The following jump, skipping the XMS calls will be patched to 
 45762                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45763                                  	; needed because the stub is installed even before the XMS driver
 45764                                  	; is loaded if the user specifies dos=high in the config.sys
 45765                                  i20patch:
 45766 0000107A EB03                    	jmp	short quit_cont	
 45767                                  
 45768 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45769                                  quit_cont:
 45770 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45771                                  
 45772                                  ;--------------------------------------------------------------------------
 45773                                  ;
 45774                                  ; INT 21 Handler
 45775                                  ;
 45776                                  ;--------------------------------------------------------------------------
 45777                                  
 45778                                  lcommand:
 45779                                  	; The following jump, skipping the XMS calls will be patched to 
 45780                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45781                                  	; needed because the stub is installed even before the XMS driver
 45782                                  	; is loaded if the user specifies dos=high in the config.sys
 45783                                  i21patch:
 45784 00001084 EB03                    	jmp	short command_cont	
 45785                                  
 45786 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45787                                  command_cont:
 45788 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45789                                  
 45790                                  ;------------------------------------------------------------------------
 45791                                  ;
 45792                                  ; INT 25 
 45793                                  ;
 45794                                  ;----------------------------------------------------------------------------
 45795                                  
 45796                                  labsdrd:
 45797                                  	; The following jump, skipping the XMS calls will be patched to 
 45798                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45799                                  	; needed because the stub is installed even before the XMS driver
 45800                                  	; is loaded if the user specifies dos=high in the config.sys
 45801                                  i25patch:
 45802 0000108E EB03                    	jmp	short absdrd_cont	
 45803                                  
 45804 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45805                                  absdrd_cont:
 45806 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45807                                  
 45808                                  ;-------------------------------------------------------------------------
 45809                                  ;
 45810                                  ; INT 26
 45811                                  ;
 45812                                  ;-----------------------------------------------------------------------
 45813                                  
 45814                                  labsdwrt:
 45815                                  	; The following jump, skipping the XMS calls will be patched to 
 45816                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45817                                  	; needed because the stub is installed even before the XMS driver
 45818                                  	; is loaded if the user specifies dos=high in the config.sys
 45819                                  i26patch:
 45820 00001098 EB03                    	jmp	short absdwrt_cont	
 45821                                  
 45822 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45823                                  absdwrt_cont:
 45824 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45825                                  
 45826                                  ;------------------------------------------------------------------------
 45827                                  ;
 45828                                  ; INT 27
 45829                                  ;
 45830                                  ;-----------------------------------------------------------------------
 45831                                  
 45832                                  lstay_resident:
 45833                                  	; The following jump, skipping the XMS calls will be patched to 
 45834                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45835                                  	; needed because the stub is installed even before the XMS driver
 45836                                  	; is loaded if the user specifies dos=high in the config.sys
 45837                                  i27patch:
 45838 000010A2 EB03                    	jmp	short sr_cont	
 45839                                  
 45840 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45841                                  sr_cont:
 45842 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45843                                  
 45844                                  ;-----------------------------------------------------------------------------
 45845                                  ;
 45846                                  ; INT 2f
 45847                                  ;
 45848                                  ;-------------------------------------------------------------------------
 45849                                  
 45850                                  lint2f:
 45851                                  	; The following jump, skipping the XMS calls will be patched to 
 45852                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45853                                  	; needed because the stub is installed even before the XMS driver
 45854                                  	; is loaded if the user specifies dos=high in the config.sys
 45855                                  i2fpatch:
 45856 000010AC EB03                    	jmp	short int2f_cont	
 45857                                  
 45858 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45859                                  int2f_cont:
 45860 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45861                                  
 45862                                  ;-----------------------------------------------------------------------------
 45863                                  ;
 45864                                  ; CPM entry
 45865                                  ;
 45866                                  ;------------------------------------------------------------------------
 45867                                  
 45868                                  lcall_entry:
 45869                                  	; The following jump, skipping the XMS calls will be patched to 
 45870                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45871                                  	; needed because the stub is installed even before the XMS driver
 45872                                  	; is loaded if the user specifies dos=high in the config.sys
 45873                                  cpmpatch:
 45874 000010B6 EB03                    	jmp	short callentry_cont	
 45875                                  
 45876 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45877                                  callentry_cont:
 45878 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45879                                  
 45880                                  ;--------------------------------------------------------------------------
 45881                                  
 45882                                  lirett:
 45883 000010C0 CF                      	iret
 45884                                  
 45885                                  ;---------------------------------------------------------------------------
 45886                                  ;
 45887                                  ; LowIntXX:
 45888                                  ;
 45889                                  ; Interrupts from DOS that pass control to a user program must be done from
 45890                                  ; low memory, as the user program may change the state of the A20 line or
 45891                                  ; they may require that the A20 line be OFF. The following piece of code is
 45892                                  ; far call'd from the following places in DOS:
 45893                                  ;
 45894                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45895                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45896                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45897                                  ;
 45898                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45899                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45900                                  ; before doing the ints and then do a far junp back into DOS.
 45901                                  ;
 45902                                  ;---------------------------------------------------------------------------
 45903                                  
 45904 000010C1 00000000                DosRetAddr23:	dd	0
 45905 000010C5 00000000                DosRetAddr24:	dd	0
 45906 000010C9 00000000                DosRetAddr28:	dd	0
 45907                                  
 45908                                  	; Execute int 23h from low memory
 45909                                  LowInt23:
 45910                                  					; save the return address that is on
 45911                                  					; the stack
 45912 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45913 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45914                                  
 45915 000010D7 CD23                    	int	23h			; ctrl C
 45916                                  					; turn on A20 it has been turned OFF
 45917                                  					; by int 28/23/24 handler.
 45918                                  
 45919 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45920                                  
 45921 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45922                                  
 45923                                  
 45924                                  	; Execute int 24h from low memory
 45925                                  LowInt24:
 45926                                  					; save the return address that is on
 45927                                  					; the stack
 45928 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45929 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45930                                  
 45931 000010EB CD24                    	int	24h			; crit error
 45932                                  					; turn on A20 it has been turned OFF
 45933                                  					; by int 28/23/24 handler.
 45934                                  
 45935 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45936                                  
 45937 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45938                                  
 45939                                  
 45940                                   
 45941                                  	; Execute int 28h from low memory
 45942                                  LowInt28:
 45943 000010F5 CD28                    	int	28h			; idle int
 45944                                  					; turn on A20 it has been turned OFF
 45945                                  					; by int 28/23/24 handler.
 45946                                  
 45947 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45948                                  
 45949 000010FA CB                      	retf
 45950                                  
 45951                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45952                                  
 45953                                  ;-------------------------------------------------------------------------
 45954                                  ;
 45955                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45956                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45957                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45958                                  ; This is so because exepac'd programs rely on address wrap.
 45959                                  ;
 45960                                  ;------------------------------------------------------------------------- 
 45961                                  
 45962                                  disa20_xfer:
 45963 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45964                                  
 45965                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45966                                  
 45967                                  	; DS:SI points to entry point
 45968                                  	; AX:DI points to initial stack
 45969                                  	; DX has PDB pointer
 45970                                  	; BX has initial AX value
 45971                                  
 45972 000010FE FA                      	cli
 45973 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45974                                  
 45975 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45976 00001107 89FC                    	mov	SP,DI			; and SP
 45977 00001109 FB                      	sti
 45978                                  
 45979 0000110A 1E                      	push	DS			; fake long call to entry
 45980 0000110B 56                      	push	SI
 45981 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45982 0000110E 8EDA                    	mov	DS,DX
 45983 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45984 00001112 CB                      	retf
 45985                                  
 45986                                  ;-------------------------------------------------------------------------
 45987                                  ;
 45988                                  ; M003:
 45989                                  ;
 45990                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45991                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45992                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45993                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45994                                  ; more info.	
 45995                                  ;
 45996                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45997                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45998                                  ; stack to avoid additional stack overhead for the user.
 45999                                  ;
 46000                                  ; -------------------------------------------------------------------------
 46001                                  
 46002                                  disa20_iret:
 46003 00001113 E82700                  	call	XMMDisableA20
 46004 00001116 FE0E[2103]              	dec	byte [INDOS]
 46005 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46006 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46007 00001122 89E5                    	mov	BP,SP
 46008                                  	;mov	[BP+user_env.user_AX],AL
 46009 00001124 884600                  	mov	[bp],al
 46010 00001127 A1[F205]                	mov	AX,[NSP]
 46011 0000112A A3[8405]                	mov	[USER_SP],AX
 46012 0000112D A1[F005]                	mov	AX,[NSS]
 46013 00001130 A3[8605]                	mov	[USER_SS],AX
 46014                                  
 46015 00001133 58                      	pop	AX			; restore user regs
 46016 00001134 5B                      	pop	BX
 46017 00001135 59                      	pop	CX
 46018 00001136 5A                      	pop	DX
 46019 00001137 5E                      	pop	SI
 46020 00001138 5F                      	pop	DI
 46021 00001139 5D                      	pop	BP
 46022 0000113A 1F                      	pop	DS
 46023 0000113B 07                      	pop	ES
 46024 0000113C CF                      	iret
 46025                                  
 46026                                  ;**************************************************************************
 46027                                  ;***	XMMDisableA20 - switch 20th address line			      
 46028                                  ;									      
 46029                                  ;	This routine is used to disable the 20th address line in 	      
 46030                                  ;	the system using XMM calls.					      
 46031                                  ;									      
 46032                                  ;	ENTRY	none		;ds = _DATA				      
 46033                                  ;	EXIT	A20 line disabled					      
 46034                                  ;	USES	NOTHING					      
 46035                                  ;									      
 46036                                  ;**************************************************************************
 46037                                  
 46038                                  XMMDisableA20:
 46039 0000113D 53                      	push	bx
 46040 0000113E 50                      	push	ax
 46041                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46042 0000113F B406                    	mov	ah,6
 46043 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46044 00001146 58                      	pop	ax
 46045 00001147 5B                      	pop	bx
 46046 00001148 C3                      	retn
 46047                                  
 46048                                  ; The entry point in the BIOS XMS driver is defined here.
 46049                                  
 46050                                  XMMcontrol:
 46051 00001149 00000000                	dd	0
 46052                                  
 46053                                  ;--------------------------------------------------------------------------
 46054                                  ;
 46055                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46056                                  ;									      
 46057                                  ;	This routine is used to query the A20 state in		 	      
 46058                                  ;	the system using XMM calls.					      
 46059                                  ;									      
 46060                                  ;	ENTRY: none		
 46061                                  ;
 46062                                  ;	EXIT : A20 will be ON
 46063                                  ;		
 46064                                  ; 	USES : NONE								      
 46065                                  ;									      
 46066                                  ;--------------------------------------------------------------------------
 46067                                  
 46068                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46069 0000114D 8000                    	dw	00080h
 46070 0000114F 0000                    	dw	00000h
 46071                                  
 46072                                  HighMemory:	; label dword
 46073 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 46074 00001153 FFFF                    	dw	0FFFFh
 46075                                  
 46076                                  EnsureA20ON:
 46077 00001155 9C                      	pushf
 46078 00001156 1E                      	push    ds
 46079 00001157 06                      	push	es
 46080 00001158 51                      	push	cx
 46081 00001159 56                      	push	si
 46082 0000115A 57                      	push	di
 46083                                  
 46084 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46085 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46086 00001165 B90400                  	mov	cx,4
 46087 00001168 FC                      	cld
 46088 00001169 F3A7                    	repe    cmpsw
 46089                                  
 46090 0000116B 7407                    	jz	short EA20_OFF
 46091                                  EA20_RET:
 46092 0000116D 5F                      	pop	di
 46093 0000116E 5E                      	pop	si
 46094 0000116F 59                      	pop	cx
 46095 00001170 07                      	pop	es
 46096 00001171 1F                      	pop	ds
 46097 00001172 9D                      	popf
 46098 00001173 C3                      	retn
 46099                                  
 46100                                  EA20_OFF:
 46101                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46102                                  	; NOTE: ints are disabled at this point.
 46103                                  
 46104 00001174 53                      	push	bx
 46105 00001175 50                      	push	ax
 46106                                  
 46107 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 46108 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46109 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46110 00001181 8CC8                    	mov	ax,cs
 46111 00001183 8ED0                    	mov	ss,ax
 46112 00001185 BC[A007]                	mov	sp,AUXSTACK
 46113                                  					; ss:sp -> DOSDATA:AuxStack
 46114                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46115 00001188 B405                    	mov	ah,5
 46116 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46117 0000118F 09C0                    	or	ax,ax
 46118 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46119                                  
 46120 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46121 00001197 8ED0                    	mov	ss,ax
 46122 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46123                                  
 46124 0000119E 58                      	pop	ax
 46125 0000119F 5B                      	pop	bx
 46126                                  
 46127 000011A0 EBCB                    	jmp	short EA20_RET
 46128                                  
 46129                                  XMMerror:				; M006 - Start
 46130 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 46131 000011A4 CD10                    	int	10h
 46132 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 46133 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 46134 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 46135 000011AC B002                    	mov	al,02h			; 80 X 25 text
 46136 000011AE CD10                    	int	10h
 46137                                  XMMcont:
 46138 000011B0 B405                    	mov	ah,05h			; set display page
 46139 000011B2 30C0                    	xor	al,al			; page 0
 46140 000011B4 CD10                    	int	10h
 46141                                  	
 46142 000011B6 BE[9312]                	mov	si,XMMERRMSG
 46143 000011B9 0E                      	push	cs
 46144 000011BA 1F                      	pop	ds
 46145 000011BB FC                      	cld				; clear direction flag
 46146                                  XMMprnt:
 46147 000011BC AC                      	lodsb
 46148 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46149 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 46150 000011C1 B40E                    	mov	ah,0Eh
 46151 000011C3 BB0700                  	mov	bx,7
 46152 000011C6 CD10                    	int	10h
 46153 000011C8 EBF2                    	jmp	short XMMprnt
 46154                                  
 46155                                  XMMStall:
 46156 000011CA FB                      	sti				; allow the user to warm boot
 46157 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 46158                                  
 46159                                  ;---------------------------------------------------------------------------
 46160                                  
 46161                                  ; 27/04/2019 - Retro DOS v4.0
 46162                                  
 46163                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46164                                  ALTAH	equ 0Ch
 46165                                  
 46166                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46167                                  ;table was different for this. Segments will be patched in at init time.
 46168                                  
 46169                                  OldInstanceJunk:
 46170 000011CD 7000                    	dw	70h	;segment of BIOS
 46171 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 46172 000011D1 0600                    	dw	6	;5 instance items
 46173                                  
 46174                                  	;dw	0,offset dosdata:contpos, 2
 46175                                  	;dw	0,offset dosdata:bcon, 4
 46176                                  	;dw	0,offset dosdata:carpos,106h
 46177                                  	;dw	0,offset dosdata:charco, 1
 46178                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46179                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46180                                  
 46181 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 46182 000011D9 0000[3200]0400          	dw	0,BCON,4
 46183 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 46184 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 46185 000011EB 0000[C00F]2200          	dw	0,exec_init_SP,34
 46186 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46187                                  
 46188                                  ;---------------------------------------------------------------------------
 46189                                  
 46190                                  ; M021-
 46191                                  ;
 46192                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46193                                  ; 	takes control of the HMA. When running, this word is a reliable
 46194                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46195                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46196                                  
 46197                                  DosHasHMA:
 46198 000011F7 00                      	db	0
 46199                                  FixExePatch:
 46200 000011F8 0000                    	dw	0		; M012
 46201                                  ; 28/12/2022 - Retro DOS v4.1
 46202                                  ;RationalPatchPtr:
 46203                                  ;	dw	0		; M012
 46204                                  
 46205                                  ; End M021
 46206                                  
 46207                                  ;---------------------------------------------------------------------------
 46208                                  
 46209                                  ; 28/12/2022 - Retro DOS v4.1
 46210                                  %if 0
 46211                                  ; M020 Begin
 46212                                  
 46213                                  RatBugCode:	; proc	far
 46214                                  	push	cx
 46215                                  	mov	cx,[10h]
 46216                                  rbc_loop:
 46217                                  	;loop	$
 46218                                  	loop	rbc_loop
 46219                                  	pop	cx
 46220                                  	retf
 46221                                  		
 46222                                  ; M020 End
 46223                                  %endif
 46224                                  
 46225                                  ;---------------------------------------------------------------------------
 46226                                  	
 46227                                  UmbSave1:
 46228                                  	;db	11 dup (?)	; M023
 46229 000011FA 00<rep Bh>              	times	11 db 0	
 46230                                  
 46231                                  ; DOSDATA:122Ah
 46232                                  
 46233                                  Mark3:	; label byte
 46234                                  
 46235                                  ;IF2
 46236                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46237                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46238                                  ;	ENDIF
 46239                                  ;ENDIF
 46240                                  
 46241                                  ;############################################################################
 46242                                  ;
 46243                                  ; ** HACK FOR DOS 4.0 REDIR **
 46244                                  ;
 46245                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46246                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46247                                  ; COUNTRY_CDPG if it can. 
 46248                                  ;
 46249                                  ; MARK3 SHOULD NOT BE > 122AH 
 46250                                  ;
 46251                                  ; As of 9/6/90, this area is FULL!
 46252                                  ;
 46253                                  ;############################################################################
 46254                                   
 46255                                  	;ORG	0122Ah
 46256                                  
 46257                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46258                                  
 46259                                  ; The following table is used for DOS 3.3
 46260                                  ;DOS country and code page information is defined here for DOS 3.3.
 46261                                  ;The initial value for ccDosCountry is 1 (USA).
 46262                                  ;The initial value for ccDosCodepage is 850.
 46263                                  
 46264                                  ; country and code page information
 46265                                  ; ---------------------------------------------------------------------------
 46266                                  COUNTRY_CDPG:	; label  byte
 46267 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46268 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46268 00001216 53595300           
 46269                                  	;db   51 dup (?)
 46270 0000121A 00<rep 33h>             	times 51 db 0
 46271                                  ; ------------------------------------------------<MSKK01>-------------------
 46272                                  ;ifdef	DBCS
 46273                                  ;  ifdef JAPAN
 46274                                  ;	dw   932			; system code page id (JAPAN)
 46275                                  ;  endif
 46276                                  ;  ifdef TAIWAN
 46277                                  ;	dw   938			; system code page id (TAIWAN)
 46278                                  ;  endif
 46279                                  ;  ifdef KOREA
 46280                                  ;	dw   934			; system code page id (KOREA IBM)
 46281                                  ;  endif
 46282                                  ;else
 46283 0000124D B501                    	dw   437			; system code page id
 46284                                  ;endif
 46285                                  ; ------------------------------------------------<MSKK01>-------------------
 46286 0000124F 0600                    	dw   6				; number of entries
 46287 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 46288 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46289 00001254 0000                    	dw   0				; segment of poiter
 46290 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46291 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46292 00001259 0000                    	dw   0				; segment of poiter
 46293 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 46294 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46295 0000125E 0000                    	dw   0				; segment of poiter
 46296 00001260 06                      	db   SetCollate	; 6		; collate type
 46297 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46298 00001263 0000                    	dw   0				; segment of poiter
 46299 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46300 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46301 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46302 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 46303 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46304                                  ; ------------------------------------------------<MSKK01>-------------------
 46305                                  ;ifdef	DBCS
 46306                                  ;	...... 
 46307                                  ;else
 46308 0000126D 0100                    	dw   1				; USA country id
 46309 0000126F B501                    	dw   437			; USA system code page id
 46310 00001271 0000                    	dw   0 				; date format
 46311 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 46312 00001278 2C00                    	db   ',',0			; thousand separator
 46313 0000127A 2E00                    	db   '.',0			; decimal separator
 46314 0000127C 2D00                    	db   '-',0			; date separator
 46315 0000127E 3A00                    	db   ':',0			; time separator
 46316 00001280 00                      	db   0				; currency format flag
 46317 00001281 02                      	db   2				; # of digits in currency
 46318 00001282 00                      	db   0 				; time format
 46319 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46320 00001285 0000                    	dw   0				; segment of entry point
 46321 00001287 2C00                    	db   ',',0			; data list separator
 46322 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46322 00001292 00                 
 46323                                  ;endif
 46324                                  ; ------------------------------------------------<MSKK01>-------------------
 46325                                  
 46326                                  ; 27/04/2019 - Retro DOS v4.0
 46327                                  
 46328                                  ;include msdos.cl2			; XMMERRMSG
 46329                                  
 46330                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 46331                                  
 46332                                  XMMERRMSG:
 46333 00001293 0D0A                    	db	0Dh,0Ah
 46334 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46334 0000129E 617265204572726F72-
 46334 000012A7 0D0A24             
 46335                                  
 46336                                  ; DOSDATA ends
 46337                                  
 46338                                  ; 05/11/2022
 46339                                  ;----------------------------------------------------------------------------
 46340                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46341                                  ;----------------------------------------------------------------------------
 46342                                  
 46343                                  ; 28/12/2022 - Retro DOS v4.1
 46344                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46345                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46346                                  ;----------------------------------------------------------------------------
 46347                                  %if 0
 46348                                  ;----------------------------------------------------------------------------
 46349                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46350                                  
 46351                                  ;============================================================================
 46352                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46353                                  ;============================================================================
 46354                                  ; 27/04/2019 - Retro DOS 4.0
 46355                                  
 46356                                  ;DOSDATA Segment
 46357                                  
 46358                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46359                                  
 46360                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46361                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46362                                  
 46363                                  ; first and second DOS patches
 46364                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46365                                  ;
 46366                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46367                                  ;	DVRDLP:
 46368                                  ;	DVWRTLP:
 46369                                  ;
 46370                                  ;
 46371                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46372                                  ;	lds	si,si+7 				  ; sf_devptr
 46373                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46374                                  
 46375                                  DOSP1_ID:	db	036h,0C5h,036h
 46376                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46377                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46378                                  
 46379                                  		db	90h, 90h
 46380                                  
 46381                                  DOSP12_ID:	db	036h,0C5h,036h
 46382                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46383                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46384                                  
 46385                                  ; DOSDATA:12E3h
 46386                                  
 46387                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46388                                  ;
 46389                                  ; Code in disk.asm, 1 location
 46390                                  ;	GETBUF:
 46391                                  ;
 46392                                  ; 051h	push	cx	<- begin special int28 mode
 46393                                  ;	push	es
 46394                                  ;	push	di
 46395                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46396                                  ;	call	????	; $STD_CON_STRING_INPUT
 46397                                  ;	pop	di
 46398                                  ;	pop	es
 46399                                  ; 059h	pop	cx	<- end special int28 mode
 46400                                  
 46401                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46402                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46403                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46404                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46405                                  DOSP4_ID:	db	059h			; pop cx
 46406                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46407                                  	
 46408                                  ; DOSDATA:12EFh
 46409                                  
 46410                                  ; Fifth DOS patch - System call 40h (Write) to console
 46411                                  ;
 46412                                  ; Code in disk.asm, 1 location
 46413                                  ;
 46414                                  ;		push	cx
 46415                                  ;      WRCONLP: lodsb
 46416                                  ;		cmp	al,1Ah
 46417                                  ;		jz	????
 46418                                  ;		call	????	<- "simulate" int28 event
 46419                                  ;		loop	WRCONLP
 46420                                  ;      CONEOF:	pop	ax
 46421                                  
 46422                                  DOSP5_ID:	db	051h			; push cx
 46423                                  		db	0ACh,03Ch,01Ah,074h,005h
 46424                                  		db	0E8h			; call
 46425                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46426                                  
 46427                                  ; DOSDATA:12F6h
 46428                                  
 46429                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46430                                  ;
 46431                                  ; Code in disp.asm, 1 location
 46432                                  ;
 46433                                  ;
 46434                                  ;	mov [SaveDS],ds
 46435                                  ;	mov [SaveBX],bx
 46436                                  ;	mov bx,cs
 46437                                  ;	mov ds,bx
 46438                                  ;	inc [indos]
 46439                                  ;	xor ax,ax
 46440                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46441                                  
 46442                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46443                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46444                                  		db	02Eh,089h,01Eh
 46445                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46446                                  		db	08Ch,0CBh		; mov bx,cs
 46447                                  		db	08Eh,0DBh		; mov ds,bx
 46448                                  		db	0FEh,006h
 46449                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46450                                  		db	033h,0C0h		; xor ax,ax
 46451                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46452                                  
 46453                                  ; DOSDATA:130Ah
 46454                                  
 46455                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46456                                  ;
 46457                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46458                                  ;
 46459                                  ;
 46460                                  ;
 46461                                  ;	push	ax
 46462                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46463                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46464                                  ;	pop	ax
 46465                                  ;	jz	????
 46466                                  
 46467                                  DOSP8_ID:	db	050h			; push ax
 46468                                  		db	036h,0A1h
 46469                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46470                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46471                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46472                                  		db	02Fh,058h		; pop  ax
 46473                                  
 46474                                  ; DOSDATA:1314h
 46475                                  
 46476                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46477                                  ;
 46478                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46479                                  ;   a yeild when a character is not ready to be read.
 46480                                  ;
 46481                                  ; Code in disk.asm, 3 locations
 46482                                  ;
 46483                                  ;   DVRDRAW:
 46484                                  ;	    PUSH    ES
 46485                                  ;	    POP     DS
 46486                                  ;   ReadRawRetry:				<- Patch 10
 46487                                  ;	    MOV     BX,DI
 46488                                  ;	    XOR     AX,AX			<- Reenter #2
 46489                                  ;	    MOV     DX,AX
 46490                                  ;	    call    SETREAD
 46491                                  ;	    PUSH    DS				<- Reenter #1
 46492                                  ;	    LDS     SI,[THISSFT]
 46493                                  ;	    call    DEVIOCALL
 46494                                  ;	    MOV     DX,DI
 46495                                  ;	    MOV     AH,86H
 46496                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46497                                  ;	    TEST    DI,STERR
 46498                                  ;	    JZ	    CRDROK
 46499                                  ;	    call    CHARHARD
 46500                                  ;	    MOV     DI,DX
 46501                                  ;	    OR	    AL,AL
 46502                                  ;	    JZ	    CRDROK
 46503                                  ;	    CMP     AL,3
 46504                                  ;	    JZ	    CRDFERR
 46505                                  ;	    POP     DS
 46506                                  ;	    JMP     ReadRawRetry
 46507                                  ;
 46508                                  ;   CRDFERR:
 46509                                  ;	    POP     DI				<- Patch 11
 46510                                  ;   DEVIOFERR:
 46511                                  ;	    LES     DI,[THISSFT]
 46512                                  ;	    jmp     SET_ACC_ERR_DS
 46513                                  ;
 46514                                  ;   CRDROK:
 46515                                  ;	    POP     DI				<- Patch 12
 46516                                  ;	    MOV     DI,DX
 46517                                  ;	    ADD     DI,[CALLSCNT]
 46518                                  ;	    JMP     SHORT ENDRDDEVJ3
 46519                                  
 46520                                  DOSP10_ID:		db	006H,01FH
 46521                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46522                                  DOSP10_LOC:		db	08BH,0DFH
 46523                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46524                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46525                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46526                                  			db	0DFH,00EH
 46527                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46528                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46529                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46530                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46531                                  			db	009H,003H
 46532                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46533                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46534                                  			db	01FH,0EBH,0CFH
 46535                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46536                                  			db	05FH
 46537                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46538                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46539                                  
 46540                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46541                                  			db	05FH,08BH,0FAH
 46542                                  ; DOSDATA:1353h
 46543                                  
 46544                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46545                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46546                                  ;
 46547                                  ;	    Sets focus to current VM so user can see fatal message.
 46548                                  ;
 46549                                  ;
 46550                                  ;	l0: lodsb		<- Setfocus here
 46551                                  ;	    cmp al, '$'
 46552                                  ;	    je l1
 46553                                  ;	    mov bl, 7
 46554                                  ;	    mov ah, 0Eh
 46555                                  ;	    int 10h
 46556                                  ;	    jmp l0
 46557                                  ;	l1: jmp $
 46558                                  
 46559                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46560                                  		db	03Ch,024h		;     cmp al, '$'
 46561                                  		db	074h,008h		;     je l1
 46562                                  		db	0B3h,007h		;     mov bl, 7
 46563                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46564                                  		db	0CDh,010h		;     int 10h
 46565                                  		db	0EBh,0F3h		;     jmp l0
 46566                                  		db	0EBh,0FEh		; l1: jmp $
 46567                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46568                                  
 46569                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46570                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46571                                  
 46572                                  ; 06/12/2022
 46573                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46574                                  
 46575                                  ; DOSDATA ends
 46576                                  
 46577                                  ;============================================================================
 46578                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46579                                  ;============================================================================
 46580                                  ; 27/04/2019 - Retro DOS 4.0
 46581                                  
 46582                                  ;mpatch.asm -- holds data patch location for callouts 
 46583                                  ; -- allocate cluster in rom.asm
 46584                                  ;
 46585                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46586                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46587                                  ; cluster allocation, however it can be expanded to be used by other
 46588                                  ; patches. This is important since we have an easy-access pointer to
 46589                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46590                                  ; only patch out a far call/retf, so any space after that could be
 46591                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46592                                  ; to call out here.
 46593                                  ;
 46594                                  ; Currently, we allocate only the minimum space required for the 6
 46595                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46596                                  ; to reserve space here if your new data will be position dependent
 46597                                  ; and would prohibit growing of this table.
 46598                                  ;       
 46599                                  ;history	-	created 8-7-92 by scottq
 46600                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46601                                  ;
 46602                                  ;Exported Functions
 46603                                  ;==================
 46604                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46605                                  
 46606                                  ; DosData Segment
 46607                                  
 46608                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46609                                  
 46610                                  ; ---------------------------------------------------------------------------
 46611                                  
 46612                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46613                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46614                                  ; greater). Added to this file because it needed to be somewhere and is
 46615                                  ; 'patch' related.
 46616                                  
 46617                                  Rational386PatchPtr:
 46618                                  	dw	0	; points to patch routine or RET instr.
 46619                                  ; ---------------------------------------------------------------------------
 46620                                  
 46621                                  MagicPatch:
 46622                                  ;MagicPatch proc far
 46623                                          retf            ;default is to just return to allocate
 46624                                          nop             ;however, this code will be patched
 46625                                          nop             ;by magicdrv.sys to
 46626                                          nop             ; call far ?:?     
 46627                                          nop             ; retf or perhaps just jmp far
 46628                                          nop             ;retf/nop take one byte, so we need six instructions
 46629                                                          ;for 6 byte patch
 46630                                  ;MagicPatch endp
 46631                                  
 46632                                  ; ---------------------------------------------------------------------------
 46633                                  
 46634                                  ;DosData Ends
 46635                                  
 46636                                  ; DOSDATA:136Ah
 46637                                  
 46638                                  ;----------------------------------------------------------------------------
 46639                                  
 46640                                  ;DOSDATALAST SEGMENT
 46641                                  
 46642                                  ; 29/04/2019 - Retro DOS v4.0
 46643                                  
 46644                                  ;----------------------------------------------------------------------------
 46645                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46646                                  
 46647                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 46648                                  
 46649                                  ;align 16
 46650                                  
 46651                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46652                                  
 46653                                  ;----------------------------------------------------------------------------
 46654                                  
 46655                                  %endif	; 05/11/2022
 46656                                  
 46657                                  ; 05/12/2022
 46658                                  ;MSDAT001E:	; label byte
 46659                                  
 46660                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46661                                  DOSDATAEND equ $
 46662                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46663                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46664                                  
 46665                                  ;DOSDATALAST ENDS
 46666                                  
 46667                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46668                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46669                                  ;============================================================================
 46670                                  ;	END
 46671                                  ;============================================================================
 46672                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46673                                  ; -----------------------------
 46674                                  ; MAY 2019, ISTANBUL - TURKIYE.
