     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/01/2024	((Previous: 27/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9BA78                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2023]"	; 27/09/2023
  3269 000000C1 526574726F20444F53-     	db	"Retro DOS v4.0 by Erdogan Tan [2024]"	; 05/01/2024
  3269 000000CA 2076342E3020627920-
  3269 000000D3 4572646F67616E2054-
  3269 000000DC 616E205B323032345D 
  3270 000000E5 0D0A2400                	db	13,10,"$", 0 
  3271                                  
  3272                                  ;============================================================================
  3273                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3274                                  ;============================================================================
  3275                                  ; 11/07/2018 - Retro DOS v3.0
  3276                                  
  3277                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3278 000000E9 90                      align 2
  3279                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3280                                  
  3281                                  ; Standard Functions
  3282                                  ;DISPATCH  LABEL WORD
  3283                                  DISPATCH:
  3284                                  	; 16/07/2018 - Retro DOS v3.0
  3285                                  	; (MSDOS 3.3)
  3286                                  
  3287                                  ; 29/04/2019
  3288                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3289                                  
  3290                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3291                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3292                                  
  3293 000000EA [1A63]                          short_addr  _$ABORT			    ;  0      0
  3294 000000EC [D816]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3295 000000EE [E116]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3296 000000F0 [9317]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3297 000000F2 [AE17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3298 000000F4 [B417]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3299 000000F6 [1F16]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3300 000000F8 [4B16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3301 000000FA [EF13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3302 000000FC [4914]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3303 000000FE [5514]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3304 00000100 [C817]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3305 00000102 [D217]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3306 00000104 [1110]                          short_addr  _$DISK_RESET		    ; 13      D
  3307 00000106 [F00E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3308 00000108 [AE1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3309 0000010A [7818]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3310 0000010C [C01F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3311 0000010E [5220]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3312 00000110 [1718]                          short_addr  _$FCB_DELETE		    ; 19     13
  3313 00000112 [AC1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3314 00000114 [B11F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3315 00000116 [921F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3316 00000118 [E818]                          short_addr  _$FCB_RENAME		    ; 23     17
  3317                                  	; 16/07/2018
  3318                                          ;short_addr _CPMFUNC			    ; 24     18	
  3319 0000011A [A006]                          short_addr  NO_OP			    ; 24     18
  3320 0000011C [EB0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3321 0000011E [E00E]                          short_addr  _$SET_DMA			    ; 26     1A
  3322                                  
  3323                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3324                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3325                                  ;                                                                          ;
  3326 00000120 [9D0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3327 00000122 [9F0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3328                                  ;                                                                          ;
  3329                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3330                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3331                                  
  3332                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3333                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3334                                  
  3335                                  ; 08/07/2018 - Retro DOS v3.0
  3336                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3337                                  
  3338 00000124 [A006]                  	short_addr  NO_OP			    ; 29     1D
  3339 00000126 [A006]                  	short_addr  NO_OP			    ; 30     1E
  3340                                  
  3341                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3342                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3343                                  ;                                                                          ;
  3344 00000128 [E10F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3345                                  ;                                                                          ;
  3346                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                          ;short_addr _CPMFUNC			    ; 32     20
  3349                                  
  3350                                  ; 08/07/2018 - Retro DOS v3.0
  3351                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3352                                  
  3353 0000012A [A006]                  	short_addr  NO_OP			    ; 32     20
  3354                                  
  3355 0000012C [B61F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3356 0000012E [BB1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3357 00000130 [2918]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3358 00000132 [FF17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3359                                  
  3360                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3361                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3362                                  
  3363                                  ; Extended Functions
  3364 00000134 [120F]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000136 [1D11]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372 00000138 [A71F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3373 0000013A [A21F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3374 0000013C [920F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3375 0000013E [B20A]                          short_addr  _$GET_DATE                      ; 42     2A
  3376 00000140 [CF0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3377 00000142 [EE0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3378 00000144 [FF0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3379 00000146 [BE0C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3380                                  
  3381                                  ; Extended functionality group
  3382 00000148 [CC0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3383 0000014A [940C]                          short_addr  _$GET_VERSION                   ; 48     30
  3384 0000014C [BE62]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3385                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3386                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3387                                  ;                                                                          ;
  3388 0000014E [E30F]                          short_addr  _$GET_DPB			    ; 50     32
  3389                                  ;                                                                          ;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3392 00000150 [A102]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3393 00000152 [C90F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3394 00000154 [020F]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3395 00000156 [A30E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3396 00000158 [400F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3397 0000015A [C50C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3398                                  ; XENIX CALLS
  3399                                  ;   Directory Group
  3400 0000015C [AC22]                          short_addr  _$MKDIR			    ; 57     39
  3401 0000015E [F821]                          short_addr  _$RMDIR			    ; 58     3A
  3402 00000160 [3322]                          short_addr  _$CHDIR			    ; 59     3B
  3403                                  ;   File Group
  3404 00000162 [E270]                          short_addr  _$CREAT			    ; 60     3C
  3405 00000164 [0B70]                          short_addr  _$OPEN			    ; 61     3D
  3406 00000166 [3768]                          short_addr  _$CLOSE		 	    ; 62     3E
  3407 00000168 [4869]                          short_addr  _$READ			    ; 63     3F
  3408 0000016A [AE69]                          short_addr  _$WRITE			    ; 64     40
  3409 0000016C [3271]                          short_addr  _$UNLINK			    ; 65     41
  3410 0000016E [B369]                          short_addr  _$LSEEK			    ; 66     42
  3411 00000170 [EF70]                          short_addr  _$CHMOD			    ; 67     43
  3412 00000172 [0D23]                          short_addr  _$IOCTL			    ; 68     44
  3413 00000174 [686A]                          short_addr  _$DUP			    ; 69     45
  3414 00000176 [866A]                          short_addr  _$DUP2			    ; 70     46
  3415 00000178 [8921]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3416                                  ;   Memory Group
  3417 0000017A [B163]                          short_addr  _$ALLOC			    ; 72     48
  3418 0000017C [2B65]                          short_addr  _$DEALLOC                       ; 73     49
  3419 0000017E [0765]                          short_addr  _$SETBLOCK                      ; 74     4A
  3420                                  ;   Process Group
  3421 00000180 [985C]                          short_addr  _$EXEC			    ; 75     4B
  3422 00000182 [F662]                          short_addr  _$EXIT			    ; 76     4C
  3423 00000184 [8E5C]                          short_addr  _$WAIT			    ; 77     4D
  3424 00000186 [C520]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3425                                  ;   Special Group
  3426 00000188 [1B21]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3427                                  ; SPECIAL SYSTEM GROUP
  3428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3430                                  ;                                                                          ;
  3431 0000018A [F802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3432 0000018C [0403]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3433 0000018E [D50F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3434 00000190 [4610]                          short_addr  _$SETDPB			    ; 83     53
  3435                                  ;                                                                          ;
  3436                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3437                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3438 00000192 [B90C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3439                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3440                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3441                                  ;                                                                          ;
  3442 00000194 [0C11]                          short_addr  _$DUP_PDB                       ; 85     55
  3443                                  ;                                                                          ;
  3444                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3445                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3446 00000196 [5871]                          short_addr  _$RENAME			    ; 86     56
  3447 00000198 [1A6A]                          short_addr  _$FILE_TIMES                    ; 87     57
  3448 0000019A [6165]                          short_addr  _$ALLOCOPER                     ; 88     58
  3449                                  
  3450                                  ; 08/07/2018 - Retro DOS v3.0
  3451                                  ; -------------------------------------------------------------------------;
  3452                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3453                                  
  3454                                  ; Network extention system calls
  3455 0000019C [540F]                          short_addr  _$GetExtendedError              ; 89     59
  3456 0000019E [E371]                          short_addr  _$CreateTempFile                ; 90     5A
  3457 000001A0 [CB71]                          short_addr  _$CreateNewFile                 ; 91     5B
  3458 000001A2 [C473]                          short_addr  _$LockOper                      ; 92     5C
  3459 000001A4 [4766]                          short_addr  _$ServerCall                    ; 93     5D
  3460 000001A6 [506B]                          short_addr  _$UserOper                      ; 94     5E
  3461 000001A8 [B56A]                          short_addr  _$AssignOper                    ; 95     5F
  3462 000001AA [A56F]                          short_addr  _$NameTrans                     ; 96     60
  3463 000001AC [A006]                  	short_addr  NO_OP			    ; 97     61
  3464 000001AE [0403]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3465                                  ; the next call is reserved for hangool sys call
  3466                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3467 000001B0 [770F]                  	short_addr  _$ECS_Call			    ; 99     63
  3468                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3471                                  ;                                                                          ;
  3472 000001B2 [1003]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3473                                  ;                                                                          ;
  3474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3476 000001B4 [500D]                          short_addr  _$GetExtCntry                   ; 101    65
  3477 000001B6 [4F0E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3478 000001B8 [8468]                          short_addr  _$ExtHandle                     ; 103    67
  3479 000001BA [6A68]                          short_addr  _$COMMIT                        ; 104    68
  3480                                  
  3481                                  ; 08/07/2018
  3482                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3483                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3484                                  
  3485                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3486 000001BC [0F12]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3487 000001BE [6A68]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3488 000001C0 [A006]                  	short_addr  NO_OP                           ; 107    6B   
  3489                                  						    ; IFS_IOCTL no longer 
  3490                                  						    ; supported
  3491 000001C2 [7972]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3492                                  
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496                                  ;ifdef ROMEXEC
  3497                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3498                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3499                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3500                                  ;endif
  3501                                  ;                                                                          ;
  3502                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3503                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3504                                  
  3505                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3506                                  
  3507                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3508                                  
  3509                                  ; 08/07/2018 - Retro DOS v3.0
  3510                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3511                                  
  3512                                  ;	If 	Installed
  3513                                  
  3514                                  align 2
  3515                                  
  3516                                  ;PUBLIC FOO
  3517                                  
  3518                                  FOO:	; LABEL WORD
  3519 000001C4 [5D07]                          short_addr  Leave2F
  3520                                  
  3521 000001C6 [C801]                  DTab:	DW  DOSTable
  3522                                  
  3523                                  	;PUBLIC FOO,DTAB
  3524                                  
  3525                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3526                                  
  3527                                  ; 29/04/2019
  3528                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3529                                  
  3530                                  
  3531                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3532                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3533                                         
  3534                                  DOSTable:  ; LABEL  WORD
  3535 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3536 000001C9 [8809]                          short_addr  DOSInstall          ;   0 install check
  3537 000001CB [CF2F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3538 000001CD [350F]                          short_addr  RECSET              ;   2   RECSET
  3539 000001CF [8209]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3540 000001D1 [AE51]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3541 000001D3 [E316]                          short_addr  OUTT                ;   5   OUT
  3542 000001D5 [8554]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3543 000001D7 [285A]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3544 000001D9 [CD30]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3545 000001DB [DA5B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3546 000001DD [7874]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3547 000001DF [152D]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3548 000001E1 [FF2C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3549 000001E3 [460B]                          short_addr  DATE16              ;   13  DATE16
  3550 000001E5 [7B12]                          short_addr  Idle		;   14      empty slot
  3551 000001E7 [215A]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3552 000001E9 [7B12]                          short_addr  Idle		;   16      empty slot
  3553 000001EB [4812]                          short_addr  StrCpy              ;   17  StrCpy
  3554 000001ED [6012]                          short_addr  StrLen              ;   18  StrLen
  3555 000001EF [5951]                          short_addr  UCase		;   19  UCase
  3556 000001F1 [655A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3557 000001F3 [B15B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3558 000001F5 [B267]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3559 000001F7 [156C]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3560 000001F9 [CA04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3561 000001FB [C06B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3562 000001FD [CA6F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3563 000001FF [F00B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3564 00000201 [8A0C]                          short_addr  DSUM                ;   28  DSUM
  3565 00000203 [E40B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3566 00000205 [2612]                          short_addr  StrCmp              ;   30  StrCmp
  3567 00000207 [036B]                          short_addr  InitCDS             ;   31  initcds
  3568 00000209 [7F67]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3569 0000020B [A56F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3570 0000020D [C706]                          short_addr  CAL_LK              ;   34  CAL_LK
  3571 0000020F [BB42]                          short_addr  DEVNAME             ;   35  DEVNAME
  3572 00000211 [7B12]                          short_addr  Idle                ;   36  Idle
  3573 00000213 [6E12]                          short_addr  DStrLen             ;   37  DStrLen
  3574 00000215 [1F13]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3575 00000217 [3768]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3576 00000219 [2513]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3577 0000021B [4869]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3578 0000021D [DF12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3579 0000021F [6213]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3580 00000221 [5113]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3581 00000223 [7F13]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3582                                          
  3583                                  	; 29/04/2019 - Retro DOS v4.0
  3584 00000225 [8413]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3585                                  
  3586 00000227 [A006]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3587                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3588                                  
  3589                                  DOSTableEnd:  ; LABEL BYTE
  3590                                  
  3591                                  	;ENDIF
  3592                                  
  3593                                  ; ----------------------------------------------------------------------------
  3594                                  ; BREAK   <Copyright notice and version>
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  ;CODSTRT EQU	$
  3598                                  
  3599                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3600                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3601                                  
  3602                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3603                                  ;       module. The reason is so that the data alignments are the same in
  3604                                  ;       IBM-DOS and MS-DOS up through header.
  3605                                  
  3606                                  	;PUBLIC	HEADER
  3607                                  
  3608                                  HEADER:	; LABEL	BYTE
  3609                                          ;IF	DEBUG
  3610                                          ;DB	13,10,"Debugging DOS version "
  3611                                          ;DB	MAJOR_VERSION + "0"
  3612                                          ;DB	"."
  3613                                          ;DB	(MINOR_VERSION / 10) + "0"
  3614                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3615                                          ;ENDIF
  3616                                  
  3617                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3618                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3619                                  %if 0
  3620                                          ;IF	NOT IBM
  3621                                          DB	13,10,"MS-DOS version "
  3622                                          DB	MAJOR_VERSION + "0"
  3623                                          DB	"."
  3624                                          DB	(MINOR_VERSION / 10) + "0"
  3625                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3626                                          DB	(MINOR_VERSION % 10) + "0"
  3627                                  
  3628                                          ;IF	HIGHMEM
  3629                                          ;DB	"H"
  3630                                          ;ENDIF
  3631                                  
  3632                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3633                                  	; 30/04/2019 - Retro DOS v4.0
  3634                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3635                                  
  3636                                  	;ENDIF
  3637                                  
  3638                                  %endif
  3639                                  
  3640                                  ;IF DEBUG
  3641                                  ;	DB	13,10,"$"
  3642                                  ;ENDIF
  3643                                  
  3644                                  ;include copyrigh.inc
  3645                                  
  3646                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3647                                  
  3648                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3649                                  	;DB	"Licensed Material - Property of Microsoft "
  3650                                  	;DB	"All rights reserved "
  3651                                  
  3652                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3653                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3654                                  
  3655                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3656                                  ms_copyright:
  3657 00000229 4D5320444F53205665-     	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3657 00000232 7273696F6E20352E30-
  3657 0000023B 3020284329436F7079-
  3657 00000244 726967687420313938-
  3657 0000024D 312D31393931204D69-
  3657 00000256 63726F736F66742043-
  3657 0000025F 6F727020           
  3658 00000263 4C6963656E73656420-     	db	'Licensed Material - Property of Microsoft '
  3658 0000026C 4D6174657269616C20-
  3658 00000275 2D2050726F70657274-
  3658 0000027E 79206F66204D696372-
  3658 00000287 6F736F667420       
  3659 0000028D 416C6C207269676874-     	db	'All rights reserved '
  3659 00000296 732072657365727665-
  3659 0000029F 6420               
  3660                                  
  3661                                  ;============================================================================
  3662                                  ; MSCODE.ASM
  3663                                  ;============================================================================
  3664                                  
  3665                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3666                                  ; 03/03/2018
  3667                                  
  3668                                  ;
  3669                                  ; MSCODE.ASM -- MSDOS code
  3670                                  ;
  3671                                  
  3672                                  ;INCLUDE DOSSEG.ASM
  3673                                  ;INCLUDE STDSW.ASM
  3674                                  
  3675                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3676                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3677                                  
  3678                                  ;.xcref
  3679                                  ;INCLUDE DOSSYM.ASM
  3680                                  ;INCLUDE DEVSYM.ASM
  3681                                  ;.cref
  3682                                  ;.list
  3683                                  
  3684                                  ;IFNDEF  KANJI
  3685                                  ;KANJI   EQU     0       ; FALSE
  3686                                  ;ENDIF
  3687                                  
  3688                                  ;IFNDEF  IBM
  3689                                  ;IBM     EQU     0
  3690                                  ;ENDIF
  3691                                  
  3692                                  ;IFNDEF  HIGHMEM
  3693                                  ;HIGHMEM  EQU     0
  3694                                  ;ENDIF
  3695                                  
  3696                                          ;i_need  USER_SP,WORD
  3697                                          ;i_need  USER_SS,WORD
  3698                                          ;i_need  SAVEDS,WORD
  3699                                          ;i_need  SAVEBX,WORD
  3700                                          ;i_need  INDOS,BYTE
  3701                                          ;i_need  NSP,WORD
  3702                                          ;i_need  NSS,WORD
  3703                                          ;i_need  CURRENTPDB,WORD
  3704                                          ;i_need  AUXSTACK,BYTE
  3705                                          ;i_need  CONSWAP,BYTE
  3706                                          ;i_need  IDLEINT,BYTE
  3707                                          ;i_need  NOSETDIR,BYTE
  3708                                          ;i_need  ERRORMODE,BYTE
  3709                                          ;i_need  IOSTACK,BYTE
  3710                                          ;i_need  WPERR,BYTE
  3711                                          ;i_need  DSKSTACK,BYTE
  3712                                          ;i_need  CNTCFLAG,BYTE
  3713                                          ;i_need  LEAVEADDR,WORD
  3714                                          ;i_need  NULLDEVPT,DWORD
  3715                                  
  3716                                          ;IF NOT IBM
  3717                                          ;i_need  OEM_HANDLER,DWORD
  3718                                          ;ENDIF
  3719                                  
  3720                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3721                                  
  3722                                  ;============================================================================
  3723                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3724                                  ;============================================================================
  3725                                  ; 11/07/2018 - Retro DOS v3.0
  3726                                  ; 01/05/2019 - Retro DOS v4.0
  3727                                  
  3728                                  ; DosCode SEGMENT
  3729                                  
  3730                                  ; ==========================================================================
  3731                                  ;
  3732                                  ; $Set_CTRL_C_Trapping
  3733                                  ;
  3734                                  ; Function:
  3735                                  ;	Enable disable ^C checking in dispatcher
  3736                                  ;
  3737                                  ; Inputs:
  3738                                  ;		AL = 0 read ^C status
  3739                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3740                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3741                                  ;		AL = 5 get DOS boot drive
  3742                                  ;		AL = 6 Get version number
  3743                                  ;			RETURNS:
  3744                                  ;				BH = Minor version number
  3745                                  ;				BL = Major version number
  3746                                  ;				DL = DOS internal revision
  3747                                  ;				DH = DOS type flags
  3748                                  ;					Bit 3 	- DOS in ROM
  3749                                  ;					Bit 4 	- DOS in HMA
  3750                                  ;					Bit 0-2, 5-7 - Reserved
  3751                                  ; Outputs:
  3752                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3753                                  ;
  3754                                  ; History:
  3755                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3756                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3757                                  ; ==========================================================================
  3758                                  
  3759                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3760                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3761                                  
  3762                                  _$SET_CTRL_C_TRAPPING:
  3763                                  	; 01/05/2019 - Retro DOS v4.0
  3764                                  
  3765 000002A1 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3766 000002A3 7603                    	jbe	short scct_1		; If yes continue processing
  3767                                  
  3768 000002A5 B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3769                                  
  3770 000002A7 CF                      	iret
  3771                                  scct_1:
  3772 000002A8 1E                      	push	DS
  3773                                  
  3774                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3775 000002A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3776                                  	
  3777 000002AE 50                      	push	AX			; DL only register that can change
  3778 000002AF 56                      	push	SI
  3779                                  
  3780 000002B0 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3781 000002B3 30E4                    	xor	AH,AH			; Clear high byte of AX
  3782 000002B5 09C0                    	or	AX,AX			; Check for subfunction 0
  3783 000002B7 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3784                                  
  3785 000002B9 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3786 000002BB EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3787                                  scct_2:
  3788 000002BD 48                      	dec	AX			; Now dec AX and see if it was 1
  3789 000002BE 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3790                                  
  3791 000002C0 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3792 000002C3 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3793 000002C5 EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3794                                  scct_3:
  3795 000002C7 48                      	dec	AX			; Dec AX again to see if it was 2
  3796 000002C8 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3797                                  
  3798 000002CA 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3799 000002CD 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3800 000002CF EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3801                                  scct_4:
  3802 000002D1 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3803 000002D4 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3804 000002D6 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3805 000002DA EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3806                                  scct_5:
  3807 000002DC 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3808 000002DF 7511                    	jne	short scct_9s		; If not equal then not get version
  3809                                  	
  3810                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3811                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3812 000002E1 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3813 000002E4 B200                    	mov	dl,0
  3814                                  	;mov	DL,DOSREVNM ; 0
  3815                                  
  3816 000002E6 30F6                    	xor	dh,dh			; assume vanilla DOS
  3817 000002E8 803E[1112]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3818                                  	;je	short @F
  3819 000002ED 7403                    	je	short scct_6
  3820 000002EF 80CE10                  	or	dh,10h
  3821                                  	;or	DH,DOSINHMA ; 10h
  3822                                  ;@@:
  3823                                  scct_6:
  3824                                  
  3825                                  ;ifdef ROMDOS
  3826                                  ;	or	DH, DOSINROM
  3827                                  ;endif ; ROMDOS
  3828                                  
  3829                                  scct_9s:
  3830 000002F2 5E                      	pop	SI
  3831 000002F3 58                      	pop	AX
  3832 000002F4 1F                      	pop	DS
  3833                                  
  3834                                  scct_9f:
  3835 000002F5 CF                      	iret
  3836                                  
  3837                                  SetCtrlShortEntry:			; This allows a conditional entry
  3838                                  					; from main dispatch code
  3839 000002F6 EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3840                                  
  3841                                  ; ==========================================================================
  3842                                  ;									   
  3843                                  ; The following two routines are dispatched to directly with ints disabled
  3844                                  ; immediately after the int 21h entry.	no DIS state is set.
  3845                                  ;
  3846                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3847                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3848                                  ;
  3849                                  ; ==========================================================================
  3850                                  
  3851                                  _$SET_CURRENT_PDB:
  3852 000002F8 1E                      	push	DS
  3853                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3854 000002F9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3855 000002FE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3856 00000302 1F                      	pop	DS
  3857 00000303 CF                      	iret
  3858                                  
  3859                                  ; ==========================================================================
  3860                                  ;
  3861                                  ; $get_current_PDB returns in BX the current process
  3862                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3863                                  ;
  3864                                  ; ==========================================================================
  3865                                  
  3866                                  _$GET_CURRENT_PDB:
  3867 00000304 1E                      	push	DS
  3868                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3869 00000305 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3870 0000030A 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3871 0000030E 1F                      	pop	DS
  3872 0000030F CF                      	iret
  3873                                  
  3874                                  ; ==========================================================================
  3875                                  ;
  3876                                  ; Sets the Printer Flag to whatever is in AL.
  3877                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3878                                  ;
  3879                                  ; ==========================================================================
  3880                                  
  3881                                  _$SET_PRINTER_FLAG:
  3882 00000310 1E                      	push	ds
  3883                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3884 00000311 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3885 00000316 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3886 00000319 1F                      	pop	ds
  3887 0000031A CF                      	iret
  3888                                  
  3889                                  ; 01/05/2019 - Retro DOS v4.0
  3890                                  ; 08/07/2018 - Retro DOS v3.0
  3891                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3892                                  
  3893                                  ; ----------------------------------------------------------------------------
  3894                                  ; BREAK   <System call entry points and dispatcher>
  3895                                  ; ----------------------------------------------------------------------------
  3896                                  
  3897                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3898                                  
  3899                                  ; ==========================================================================
  3900                                  ;
  3901                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3902                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3903                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3904                                  ;
  3905                                  ; ==========================================================================
  3906                                  
  3907                                  SYSTEM_CALL:    ; PROC NEAR
  3908                                  
  3909                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3910                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3911                                  
  3912                                  ;entry	QUIT				
  3913                                  QUIT:				; INT 20H entry point	
  3914                                  	;MOV	AH,0
  3915 0000031B 30E4                    	xor	ah,ah ; 08/07/2018
  3916 0000031D EB36                    	JMP     SHORT SAVREGS
  3917                                  
  3918                                  ; ---------------------------------------------------------------------------
  3919                                  
  3920                                  	; The system call in AH is out of the range that we know how
  3921                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3922                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3923                                  	; error as this may break some programs compatability.
  3924                                  
  3925                                  BADCALL:
  3926                                          ;MOV	AL,0
  3927 0000031F 30C0                    	xor	al,al ; 08/07/2018
  3928                                  IRETT:	; 06/05/2019
  3929                                  _IRET:
  3930 00000321 CF                              IRET
  3931                                  
  3932                                  ; ---------------------------------------------------------------------------
  3933                                  
  3934                                  ; 01/05/2019 - Retro DOS v4.0
  3935                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3936                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3937                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3938                                  
  3939                                  	; An alternative method of entering the system is to perform a
  3940                                  	; CALL 5 in the program segment prefix with the contents of CL
  3941                                  	; indicating what system call the user would like. A subset of
  3942                                  	; the possible system calls is allowed here only the
  3943                                  	; CPM-compatible calls may get dispatched.
  3944                                  
  3945                                  		; System call entry point and dispatcher
  3946                                  CALL_ENTRY:
  3947 00000322 1E                      	push	DS
  3948                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3949 00000323 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3950 00000328 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3951                                  
  3952 0000032C 58                              POP     AX                      ; IP from the long call at 5
  3953 0000032D 58                              POP     AX                      ; Segment from the long call at 5
  3954 0000032E 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3955                                  
  3956                                  		; Re-order the stack to simulate an interrupt 21.
  3957                                  
  3958 00000332 9C                      	PUSHF				; Start re-ordering the stack
  3959 00000333 FA                      	CLI
  3960 00000334 50                              PUSH    AX                      ; Save segment
  3961 00000335 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3962                                  	; 04/11/2022
  3963                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3964                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3965 00000339 FF36[EC05]              	push	word [SAVEDS]
  3966 0000033D 1F                      	pop	ds
  3967                                  	;
  3968                                  	;cmp	cl,36
  3969 0000033E 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3970 00000341 77DC                            JA      SHORT BADCALL
  3971 00000343 88CC                            MOV     AH,CL
  3972                                  	; 08/07/2018
  3973 00000345 EB0E                    	jmp	short SAVREGS
  3974                                  
  3975                                  ; ---------------------------------------------------------------------------
  3976                                  
  3977                                  ; 01/05/2019 - Retro DOS v4.0
  3978                                  
  3979                                  	; This is the normal INT 21 entry point. We first perform a
  3980                                  	; quick test to see if we need to perform expensive DOS-entry
  3981                                  	; functions. Certain system calls are done without interrupts
  3982                                  	; being enabled.
  3983                                  
  3984                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3985                                  
  3986                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3987                                  ; 04/11/2022
  3988                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3989                                  
  3990                                  COMMAND:
  3991                                  	; 22/12/2022
  3992 00000347 FA                      	cli
  3993                                  
  3994                                  	; 01/05/2019 - Retro DOS v4.0
  3995                                  	; 08/07/2018 - Retro DOS v3.0
  3996                                  
  3997                                  ; 22/12/2022
  3998                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3999                                  	;IF	NOT IBM
  4000 00000348 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4001 0000034B 7203                    	JB	SHORT NOTOEM
  4002 0000034D E98401                  	JMP	_$SET_OEM_HANDLER
  4003                                  
  4004                                  NOTOEM:
  4005                                  	;ENDIF
  4006                                  
  4007                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4008                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4009                                  
  4010                                  	; 22/12/2022
  4011                                  	;cli	; 08/07/2018
  4012                                  
  4013                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4014                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4015                                  	; 04/11/2022
  4016 00000350 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4017                                  	;JBE	SHORT SAVREGS
  4018 00000353 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4019                                  
  4020                                  	; 31/05/2019
  4021                                  
  4022                                  	; The following set of calls are issued by the server at
  4023                                  	; *arbitrary* times and, therefore, must be executed on
  4024                                  	; the user's entry stack and executed with interrupts off.
  4025                                  
  4026                                  SAVREGS:
  4027                                  	; 01/05/2019 - Retro DOS v4.0
  4028                                  	; 10/08/2018
  4029                                  	; 08/07/2018 - Retro DOS v3.0
  4030 00000355 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4031                                  	;;je	_$SET_CTRL_C_TRAPPING
  4032                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4033 00000358 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4034                                  	; 04/11/2022
  4035 0000035A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4036 0000035C 80FC64                  	cmp	ah,64h			; Check Max case number
  4037 0000035F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4038 00000361 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4039 00000363 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4040 00000366 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4041 00000368 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4042 0000036B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4043 0000036D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4044 00000370 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4045                                  
  4046                                  SaveAllRegs:
  4047                                  	; 01/05/2019 - Retro DOS v4.0
  4048                                  
  4049 00000372 06                              push	ES
  4050 00000373 1E                      	push	DS
  4051 00000374 55                      	push	BP
  4052 00000375 57                      	push	DI
  4053 00000376 56                      	push	SI
  4054 00000377 52                      	push	DX
  4055 00000378 51                      	push	CX
  4056 00000379 53                      	push	BX
  4057 0000037A 50                      	push	AX
  4058                                  
  4059 0000037B 8CD8                    	mov	AX,DS
  4060                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4061 0000037D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4062 00000382 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4063 00000385 891E[EA05]              	mov	[SAVEBX],BX
  4064                                  
  4065                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4066                                  	
  4067                                  	; 08/07/2018 - Retro DOS v3.0        
  4068                                  	;xor     ax,ax
  4069                                  	;mov     [USER_ID],ax
  4070                                  	;mov     ax,[CurrentPDB]
  4071                                  	;mov     [PROC_ID],ax
  4072                                  
  4073                                  	; 01/05/2019
  4074                                  
  4075                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4076                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4077                                  	; this!!!
  4078                                  
  4079 00000389 A1[8405]                	MOV     AX,[USER_SP]
  4080 0000038C A3[F205]                        MOV     [NSP],AX
  4081 0000038F A1[8605]                        MOV     AX,[USER_SS]
  4082 00000392 A3[F005]                        MOV     [NSS],AX
  4083                                  
  4084 00000395 31C0                    	xor	AX,AX ; 0
  4085 00000397 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4086                                  
  4087 0000039A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4088 0000039F 7503                    	jnz	short set_indos_flag	; if win386 present
  4089 000003A1 A3[3E03]                	mov	[USER_ID],AX
  4090                                  set_indos_flag:
  4091 000003A4 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4092                                  
  4093 000003A8 8926[8405]                      MOV     [USER_SP],SP
  4094 000003AC 8C16[8605]                      MOV     [USER_SS],SS
  4095                                  
  4096 000003B0 A1[3003]                	mov	AX,[CurrentPDB]
  4097 000003B3 A3[3C03]                	mov	[PROC_ID],AX
  4098 000003B6 8ED8                    	mov	DS,AX
  4099 000003B8 58                      	pop	AX
  4100 000003B9 50                      	push	AX
  4101                                  
  4102                                  	; save user stack in his area for later returns (possibly from EXEC)
  4103                                  
  4104 000003BA 89262E00                        MOV     [PDB.USER_STACK],SP
  4105 000003BE 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4106                                  
  4107                                  	; 18/07/2018
  4108                                  	;mov	byte [CS:FSHARING], 0
  4109                                  
  4110                                  	;MOV     BX,CS			; no holes here.
  4111                                  	;MOV     SS,BX
  4112                                  
  4113                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4114 000003C2 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4115                                  					;entry	REDISP
  4116                                  REDISP:
  4117 000003C7 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4118 000003CA FB                              STI                             ; stack is in our space now...
  4119                                  
  4120 000003CB 8CD3                    	mov	bx,ss
  4121 000003CD 8EDB                    	mov	ds,bx
  4122                                  
  4123 000003CF 93                      	xchg	ax,bx
  4124                                  
  4125 000003D0 31C0                    	xor	ax,ax ; 0
  4126                                  
  4127                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4128                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4129                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4130                                  
  4131                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4132                                  
  4133                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4134                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4135                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4136                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4137                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4138                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4139                                  	;inc	ax
  4140                                  	;;inc	AL			; AL = 1
  4141                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4142                                  
  4143                                  	; 15/12/2022
  4144 000003D2 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4145                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4146 000003D5 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4147 000003DB A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4148                                  	;mov	byte [IDLEINT],1
  4149 000003DE A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4150 000003E1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4151 000003E4 40                      	inc	ax
  4152                                  	;inc	al			; AL = 1
  4153 000003E5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4154                                  
  4155 000003E8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4156                                  
  4157 000003E9 88E3                    	MOV     BL,AH			
  4158 000003EB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4159                                         
  4160 000003ED FC                      	CLD
  4161                                  		; Since the DOS maintains mucho state information across system
  4162                                  		; calls, we must be very careful about which stack we use.
  4163                                  		; First, all abort operations must be on the disk stack. This
  4164                                  		; is due to the fact that we may be hitting the disk (close
  4165                                  		; operations, flushing) and may need to report an INT 24.
  4166                                          
  4167 000003EE 08E4                    	OR      AH,AH
  4168 000003F0 7416                            JZ      SHORT DSKROUT		; ABORT
  4169                                  
  4170                                          ;CMP	AH,12
  4171                                          ;JBE	SHORT IOROUT		; Character I/O
  4172                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4173                                          ;JZ	SHORT IOROUT
  4174                                          ;CMP	AH,SET_CURRENT_PDB
  4175                                          ;JNZ	SHORT DSKROUT
  4176                                  
  4177                                  		; Second, PRINT and PSPRINT and the server issue
  4178                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4179                                  		; This call MUST, therefore, use the AUXSTACK.
  4180                                  
  4181                                  	; 10/08/2018
  4182 000003F2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4183 000003F5 743D                    	je      short DISPCALL
  4184                                  	
  4185                                  	; 01/05/2019
  4186                                  	
  4187                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4188                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4189                                  
  4190 000003F7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4191 000003FA 770C                    	ja      short DSKROUT
  4192                                  
  4193                                  IOROUT:
  4194                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4195                                  	; (ss: prefix was not needed here! ds=ss)
  4196                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4197                                  	; 15/12/2022
  4198 000003FC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4199 00000401 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4200 00000403 BC[A00A]                        MOV     SP,IOSTACK
  4201 00000406 EB2C                            JMP     SHORT DISPCALL
  4202                                  
  4203                                  		; We are on a system call that is classified as "the rest".
  4204                                  		; We place ourselves onto the DSKSTACK and away we go.
  4205                                  		; We know at this point:
  4206                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4207                                  		;    ErrorMode and WpErr
  4208                                  		; *  That there can be no critical sections in effect.
  4209                                  		;    We signal the server to remove all the resources.
  4210                                  
  4211                                  DSKROUT:
  4212                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4213                                  	; 08/07/2018 - Retro DOS v3.0
  4214 00000408 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4215 0000040B C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4216                                  	
  4217 00000410 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4218 00000415 C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4219                                  	                   		; make sure flags are reset
  4220                                  
  4221                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4222                                  	; (ss: prefix was not needed here! ds=ss)
  4223                                  
  4224                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4225                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4226                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4227                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4228                                                                          ; make sure flags are reset
  4229 0000041A 50                      	push    ax
  4230 0000041B B482                    	mov     ah,82h			; Release all resource information
  4231 0000041D CD2A                    	int     2Ah 		; Microsoft Networks 
  4232                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4233 0000041F 58                      	pop     ax
  4234                                  
  4235                                  		; Since we are going to be running on the DSKStack and since
  4236                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4237                                  		; generation of INT 28's.
  4238                                  
  4239                                  	; 15/12/2022
  4240                                  	;mov     byte [ss:IDLEINT],0
  4241                                  	;
  4242                                          ;mov	sp,DSKSTACK
  4243                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4244                                          ;jz	short DISPCALL
  4245                                  
  4246 00000420 C606[5803]00            	mov     byte [IDLEINT],0
  4247                                  
  4248 00000425 BC[2009]                	MOV     SP,DSKSTACK
  4249 00000428 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4250 0000042D 7405                    	JZ      SHORT DISPCALL
  4251                                  
  4252 0000042F 50                              PUSH    AX
  4253                                          ;invoke	DSKSTATCHK
  4254 00000430 E8944D                          CALL	DSKSTATCHK
  4255 00000433 58                      	POP     AX
  4256                                  DISPCALL:
  4257                                  	; 01/05/2019 - Retro DOS v4.0
  4258 00000434 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4259                                  
  4260                                  	; 15/12/2022
  4261 00000439 871E[EA05]              	xchg	bx,[SAVEBX]
  4262 0000043D 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4263                                  
  4264                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4265                                  	; (ss: prefix was not needed here! ds=ss)        
  4266                                  	;xchg	bx,[ss:SAVEBX]
  4267                                  	;mov	ds,[ss:SAVEDS]
  4268                                  
  4269 00000441 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4270                                  
  4271                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4272                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4273                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4274                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4275                                  	; because this bit is used to indicate to the next int 21 call that
  4276                                  	; the previous int 21 was an exec.
  4277                                  	;
  4278                                  	; So do not add any code between the call above and the label 
  4279                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4280                                  
  4281                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4282 00000446 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4283                                  
  4284                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4285                                  ; DOSCODE:41F7h
  4286                                  
  4287                                  ;entry LEAVE
  4288                                  ;;;_LEAVE:				; Exit from a system call
  4289                                  LeaveDOS: ; 18/07/2018 
  4290                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4291 0000044C FA                      	CLI
  4292                                  
  4293                                  	; 01/05/2019
  4294                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4295 0000044D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4296 00000452 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4297 00000457 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4298                                  
  4299                                  LeaveA20On:
  4300 00000459 FE0E[2103]                      DEC     BYTE [INDOS]
  4301                                          ; 04/11/2022
  4302 0000045D 8E16[8605]              	mov	ss,[USER_SS]
  4303 00000461 8B26[8405]              	MOV     SP,[USER_SP]
  4304                                  	;MOV	SS,[USER_SS]
  4305 00000465 89E5                    	MOV     BP,SP
  4306                                  	;MOV	[BP.user_AX],AL	
  4307                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4308                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4309                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4310                                  	; 15/12/2022
  4311 00000467 884600                  	MOV	[BP],AL
  4312 0000046A A1[F205]                	MOV     AX,[NSP]
  4313 0000046D A3[8405]                        MOV     [USER_SP],AX
  4314 00000470 A1[F005]                        MOV     AX,[NSS]
  4315 00000473 A3[8605]                        MOV     [USER_SS],AX
  4316                                  
  4317 00000476 58                      	pop	AX
  4318 00000477 5B                      	pop	BX
  4319 00000478 59                      	pop	CX
  4320 00000479 5A                      	pop	DX
  4321 0000047A 5E                      	pop	SI
  4322 0000047B 5F                      	pop	DI
  4323 0000047C 5D                      	pop	BP
  4324 0000047D 1F                      	pop	DS
  4325 0000047E 07                      	pop	ES
  4326                                  
  4327 0000047F CF                              IRET
  4328                                  
  4329                                  disa20:	   				; M068 - Start
  4330 00000480 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4331 00000484 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4332 00000488 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4333                                  					;    a20 off
  4334                                  					; Y: turn a20 off and dec a20off_count
  4335 0000048A FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4336                                   					; Start - M004
  4337 0000048E 1E                      	push	ds			; segment of stub
  4338 0000048F BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4339 00000492 53                      	push	bx
  4340 00000493 CB                      	retf	  			; go to stub
  4341                                  					; End - M004
  4342                                  ;SYSTEM_CALL ENDP
  4343                                  
  4344                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4345                                  ; 04/11/2022
  4346                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4347                                  
  4348                                  ; ==========================================================================
  4349                                  ;
  4350                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4351                                  ; the stack prior to giving the user control
  4352                                  ;
  4353                                  ; ==========================================================================
  4354                                  
  4355                                  ; 01/05/2019 - Retro DOS v4.0
  4356                                  
  4357                                          ;procedure restore_world,NEAR
  4358                                  restore_world:
  4359                                  	;getdseg <es>		; es -> dosdata
  4360 00000494 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4361                                  
  4362 00000499 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4363                                  
  4364 0000049E 58                              POP     AX
  4365 0000049F 5B                              POP     BX
  4366 000004A0 59                              POP     CX
  4367 000004A1 5A                              POP     DX
  4368 000004A2 5E                              POP     SI
  4369 000004A3 5F                              POP     DI
  4370 000004A4 5D                              POP     BP
  4371 000004A5 1F                              POP     DS
  4372                                  
  4373 000004A6 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4374                                  
  4375                                  ;restore_world	ENDP
  4376                                  
  4377                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4378                                  
  4379                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4380                                  ; 04/11/2022
  4381                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4382                                  
  4383                                  ; ==========================================================================
  4384                                  ;
  4385                                  ; Save_World saves complete registers on the stack
  4386                                  ;
  4387                                  ; ==========================================================================
  4388                                  
  4389                                          ;procedure save_world,NEAR
  4390                                  save_world:
  4391                                  	;getdseg <es>		; es -> dosdata
  4392 000004AB 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4393                                  
  4394 000004B0 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4395                                  
  4396                                  	; 12/05/2019
  4397                                          
  4398 000004B5 1E                      	PUSH    DS
  4399 000004B6 55                              PUSH    BP
  4400 000004B7 57                              PUSH    DI
  4401 000004B8 56                              PUSH    SI
  4402 000004B9 52                              PUSH    DX
  4403 000004BA 51                              PUSH    CX
  4404 000004BB 53                              PUSH    BX
  4405 000004BC 50                              PUSH    AX
  4406                                  
  4407 000004BD 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4408                                  
  4409 000004C2 55                      	push	BP		
  4410 000004C3 89E5                    	mov	BP,SP
  4411 000004C5 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4412 000004C8 5D                      	pop	BP
  4413                                  	
  4414 000004C9 C3                      	retn
  4415                                  
  4416                                  ;save_world	ENDP
  4417                                  
  4418                                  ; 01/05/2019
  4419                                  
  4420                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4421                                  ; 04/11/2022
  4422                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4423                                  
  4424                                  ; ==========================================================================
  4425                                  ;
  4426                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4427                                  ;
  4428                                  ; ==========================================================================
  4429                                  
  4430                                          ;procedure get_user_stack,NEAR
  4431                                  Get_User_Stack:
  4432                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4433 000004CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4434 000004CF C536[8405]                      lds	si,[USER_SP]
  4435 000004D3 C3                      	retn
  4436                                  
  4437                                  ;get_user_stack  ENDP
  4438                                  
  4439                                  ; 22/12/2022
  4440                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4441                                  ;%if 0
  4442                                  
  4443                                  ; ---------------------------------------------------------------------------
  4444                                  ;
  4445                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4446                                  ; Inputs:
  4447                                  ;	User registers, User Stack, INTS disabled
  4448                                  ;	If CALL F8, DS:DX is new handler address
  4449                                  ; Function:
  4450                                  ;	Process OEM INT 21 extensions
  4451                                  ; Outputs:
  4452                                  ;	Jumps to OEM_HANDLER if appropriate
  4453                                  ;
  4454                                  ; ---------------------------------------------------------------------------
  4455                                  
  4456                                  ;IF	NOT IBM
  4457                                  
  4458                                  _$SET_OEM_HANDLER:
  4459                                  	; 01/05/2019 - Retro DOS v4.0
  4460                                  	
  4461                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4462                                  	;(jb	short NOTOOEM)
  4463                                  
  4464 000004D4 06                      	push	es ; *
  4465                                  	;getdseg <es>			; es -> dosdata
  4466 000004D5 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4467                                  
  4468 000004DA 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4469                                  						; (message) request	
  4470                                  	; AH = 0F8h = SET OEM HANDLER
  4471                                  
  4472 000004DC 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4473 000004E1 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4474                                  
  4475 000004E6 07                      	pop	es ; *
  4476                                  
  4477 000004E7 CF                      	IRET                            ; Quick return, Have altered no registers
  4478                                  
  4479                                  check_trueversion_request:
  4480                                  	; 18/07/2019 - Retro DOS v3.0
  4481                                  
  4482                                  	; Retro DOS v2.0 - 20/04/2018
  4483 000004E8 83F8FF                  	CMP	AX,0FFFFh
  4484                                  	; 18/07/2018
  4485 000004EB 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4486                                  
  4487                                  	; 01/05/2019
  4488 000004ED 07                      	pop	es ; *
  4489                                  
  4490 000004EE B40E                    	mov	ah,0Eh
  4491                                  
  4492                                  	; Retro DOS v4.0 feature only!
  4493 000004F0 81FBA101                	cmp	bx,417  ; Signature to bypass
  4494                                  			; Retro DOS true version message	
  4495 000004F4 7414                    	je	short true_version_iret
  4496                                  
  4497 000004F6 56                      	push	si
  4498 000004F7 53                      	push	bx
  4499                                  
  4500 000004F8 BE[BF00]                	mov	si,RETRODOSMSG
  4501                                  wrdosmsg:
  4502                                  	;movb	ah,0Eh
  4503 000004FB BB0700                  	mov	bx,7
  4504                                  wrdosmsg_nxt:
  4505 000004FE 2EAC                    	cs	lodsb
  4506 00000500 3C24                    	cmp	al,'$'
  4507 00000502 7404                    	je	short wrdosmsg_ok		
  4508 00000504 CD10                    	int	10h
  4509 00000506 EBF6                    	jmp	short wrdosmsg_nxt
  4510                                  
  4511                                  wrdosmsg_ok:
  4512 00000508 5B                      	pop	bx
  4513 00000509 5E                      	pop	si
  4514                                  
  4515                                  true_version_iret:
  4516                                  	; ah = 0Eh
  4517 0000050A B040                    	mov	al,40h ; Retro DOS v4.0 
  4518 0000050C CF                      	iret
  4519                                  
  4520                                  	; If above F8 try to jump to handler
  4521                                  
  4522                                  DO_OEM_FUNC:
  4523                                  	; 01/05/2019
  4524 0000050D 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4525 00000513 7504                    	JNE     short OEM_JMP
  4526 00000515 07                      	pop	es ; *
  4527 00000516 E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4528                                  OEM_JMP:
  4529 00000519 06                      	push	es
  4530 0000051A 1F                      	pop	ds ; DOSDATA segment !
  4531 0000051B 07                      	pop	es ; *
  4532                                  
  4533                                  	; 22/12/2022
  4534 0000051C FB                      	sti	; (enable interrupts before jumping to private handler)  
  4535                                  
  4536 0000051D FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4537                                  
  4538                                  ;       ENDIF
  4539                                  
  4540                                  ; ---------------------------------------------------------------------------
  4541                                  
  4542                                  ;%endif
  4543                                  
  4544                                  ;============================================================================
  4545                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4546                                  ;============================================================================
  4547                                  ; 17/07/2018 - Retro DOS v3.0
  4548                                  
  4549                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4550                                  ;	NAME	IBMCODE
  4551                                  
  4552                                  ;BREAK <NullDev -- Driver for null device>
  4553                                  
  4554                                  ; ROMDOS note:
  4555                                  ;	NUL device driver used to be here, but it was removed and placed in
  4556                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4557                                  ;	header, which is also in DOSDATA.
  4558                                  
  4559                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4560                                  
  4561                                  ;----------------------------------------------------------------------------
  4562                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4563                                  ;----------------------------------------------------------------------------
  4564                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4565                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4566                                  
  4567                                  ;Public MSC001S,MSC001E
  4568                                  ;MSC001S label byte
  4569                                  	;IF	IBM
  4570                                  ; Codes returned by BIOS
  4571                                  ERRIN:
  4572 00000521 02                      	DB	2			; NO RESPONSE
  4573 00000522 06                      	DB	6			; SEEK FAILURE
  4574 00000523 0C                      	DB	12			; GENERAL ERROR
  4575 00000524 04                      	DB	4			; BAD CRC
  4576 00000525 08                      	DB	8			; SECTOR NOT FOUND
  4577 00000526 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4578                                  ERROUT:
  4579                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4580 00000527 80                      	DB	80H			; NO RESPONSE
  4581 00000528 40                      	DB	40H			; Seek failure
  4582 00000529 02                      	DB	2			; Address Mark not found
  4583 0000052A 10                      	DB	10H			; BAD CRC
  4584 0000052B 04                      	DB	4			; SECTOR NOT FOUND
  4585 0000052C 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4586                                  
  4587                                  NUMERR	EQU	$-ERROUT
  4588                                  	;ENDIF
  4589                                  ;MSC001E label byte
  4590                                  ;----------------------------------------------------------------------------
  4591                                  
  4592                                  ;============================================================================
  4593                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4594                                  ;============================================================================
  4595                                  ; 18/07/2018 - Retro DOS v3.0
  4596                                  ; 15/05/2019 - Retro DOS v4.0
  4597                                  
  4598                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4599                                  
  4600                                  ;   AbsSetup - setup for abs disk functions
  4601                                  ;----------------------------------------------------------------------------
  4602                                  
  4603                                  AbsSetup:
  4604 0000052D 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4605 00000532 FB                      	STI
  4606 00000533 FC                      	CLD
  4607 00000534 1E                      	PUSH	DS
  4608 00000535 16                      	push	ss
  4609 00000536 1F                      	pop	ds
  4610 00000537 E80C01                  	CALL	GETBP
  4611 0000053A 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4612                                  	;mov	word [es:bp+1Fh]
  4613 0000053C 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4614                                  errdriv:
  4615 00000542 1F                      	POP	DS
  4616 00000543 7301                    	jnc	short AbsSetup2
  4617                                  AbsSetup_retn:
  4618 00000545 C3                      	retn
  4619                                  
  4620                                  AbsSetup2:
  4621                                  	; 15/05/2019 - Retro DOS v4.0
  4622                                  	; MSDOS 6.0
  4623                                  					; SS override
  4624 00000546 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4625 0000054D E83B04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4626 00000550 72F3                    	jc	short AbsSetup_retn
  4627 00000552 E81257                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4628                                  
  4629                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4630 00000555 1E                      	PUSH	DS
  4631 00000556 56                      	PUSH	SI
  4632 00000557 50                      	PUSH	AX
  4633                                  
  4634 00000558 16                      	push	ss
  4635 00000559 1F                      	pop	ds
  4636                                  	
  4637 0000055A BE[BE03]                	MOV	SI,OPENBUF
  4638 0000055D 8804                    	MOV	[SI],AL
  4639 0000055F 800441                  	ADD	BYTE [SI],"A"
  4640 00000562 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4641 00000567 B80003                  	MOV	AX,0300H
  4642 0000056A F8                      	CLC
  4643 0000056B CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4644                                  		
  4645                                  		; 04/11/2022
  4646                                  		; (INT 2Ah - AX = 0300h)
  4647                                  		; Microsoft Networks - CHECK DIRECT I/O
  4648                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4649                                  		;    only drive specifier--must include the colon)
  4650                                  		; Return: CF clear if absolute disk access allowed
  4651                                  
  4652 0000056D 58                      	POP	AX
  4653 0000056E 5E                      	POP	SI
  4654 0000056F 1F                      	POP	DS
  4655 00000570 73D3                    	jnc	short AbsSetup_retn
  4656                                  
  4657                                  	;mov	word [ss:EXTERR],32h
  4658 00000572 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4659 00000579 C3                      	retn
  4660                                  
  4661                                  ;---------------------------------------------------------------------------
  4662                                  ;
  4663                                  ; Procedure Name : ABSDRD
  4664                                  ;
  4665                                  ; Interrupt 25 handler. Performs absolute disk read.
  4666                                  ; Inputs:	AL - 0-based drive number
  4667                                  ;		DS:BX point to destination buffer
  4668                                  ;		CX number of logical sectors to read
  4669                                  ;		DX starting logical sector number (0-based)
  4670                                  ; Outputs:	Original flags still on stack
  4671                                  ;		Carry set
  4672                                  ;		    AH error from BIOS
  4673                                  ;		    AL same as low byte of DI from INT 24
  4674                                  ;
  4675                                  ;---------------------------------------------------------------------------
  4676                                          ;procedure   ABSDRD,FAR
  4677                                  ABSDRD:
  4678                                  	; 15/05/2019 - Retro DOS v4.0
  4679                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4680                                  	; 04/11/2022
  4681                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4682                                  	
  4683                                  	; MSDOS 6.0
  4684 0000057A FA                      	CLI
  4685                                  	
  4686                                  ;	set up ds to point to DOSDATA
  4687                                  
  4688 0000057B 50                      	push	ax			; preserve AX value
  4689 0000057C 8CD8                    	mov	ax,ds			; store DS value in AX
  4690                                  	;getdseg <ds>
  4691 0000057E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4692 00000583 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4693 00000586 58                      	pop	ax			; restore AX value
  4694                                  
  4695                                  	; M072:
  4696                                  	; We shall save es on the user stack here. We need to use ES in
  4697                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4698                                  	; time in order to restore the user stack.
  4699                                  
  4700 00000587 06                      	push	es  ; ****		; M072
  4701                                  
  4702 00000588 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4703 0000058C 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4704                                  
  4705                                  ; 	set up ss to point to DOSDATA
  4706                                  ;
  4707                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4708                                  ; version of the getdseg macro with the SS register! An interrupt will
  4709                                  ; sneak through.
  4710                                  
  4711                                  ;ifndef ROMDOS
  4712                                  	;getdseg <ss>			; cli in entry of routine
  4713 00000590 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4714                                  ;else
  4715                                  ;	mov	ds, cs:[BioDataSeg]
  4716                                  ;	assume	ds:bdata
  4717                                  ;
  4718                                  ;	mov	ss, ds:[DosDataSg]
  4719                                  ;	assume	ss:DOSDATA
  4720                                  ;
  4721                                  ;endif ; ROMDOS
  4722                                  
  4723 00000595 BC[2009]                	MOV	SP,DSKSTACK
  4724                                  
  4725 00000598 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4726                                  
  4727 0000059C 06                      	push	es ; *** (MSDOS 6.21)
  4728 0000059D E80BFF                  	call	save_world		; save all regs
  4729                                  
  4730 000005A0 06                      	PUSH	ES ; **
  4731 000005A1 E889FF                  	CALL	AbsSetup
  4732 000005A4 723D                    	JC	short ILEAVE
  4733                                  
  4734                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4735                                  	;  the secondary cache. The secondary cache does not check for media
  4736                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4737                                  	;  read, and get data from the previous disk. To get around this,
  4738                                  	;  we just won't use the secondary cache for absolute disk reads.
  4739                                  	;                                                      -mw 8/5/88
  4740                                  
  4741                                  	;EnterCrit critDisk
  4742 000005A6 E8DC0D                  	call	ECritDisk
  4743 000005A9 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4744                                  	;LeaveCrit critDisk
  4745 000005AF E8EE0D                  	call	LCritDisk
  4746                                  
  4747                                          ;invoke	DSKREAD
  4748 000005B2 E86D32                  	CALL	DSKREAD
  4749 000005B5 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4750                                  
  4751 000005B7 89F9                            mov     cx,di
  4752 000005B9 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4753 000005BE 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4754                                  
  4755                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4756                                  ;            sectors, also termed an "Extent".)
  4757                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4758                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4759                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4760                                  ;
  4761                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4762                                  ;	buffers must be "read" into the transfer memory block, so that the
  4763                                  ;       transfer memory reflects the most recent data.
  4764                                  
  4765                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4766 000005C3 E8B234                          call	DskRdBufScan
  4767 000005C6 EB1B                    	jmp     short ILEAVE
  4768                                  
  4769                                  TLEAVE:
  4770 000005C8 7419                    	JZ	short ILEAVE
  4771                                  
  4772                                  ERR_LEAVE:				; M039
  4773                                  	; 15/07/2018 - Retro DOS v3.0
  4774                                          ;IF	IBM
  4775                                  ; Translate the error code to ancient 1.1 codes
  4776 000005CA 06                              PUSH    ES ; *
  4777 000005CB 0E                              PUSH    CS
  4778 000005CC 07                              POP     ES
  4779 000005CD 30E4                            XOR     AH,AH			; Nul error code
  4780                                  	;mov	cx,6
  4781 000005CF B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4782 000005D2 BF[2105]                        MOV     DI,ERRIN		; Point to error conditions
  4783 000005D5 F2AE                            REPNE   SCASB
  4784 000005D7 7504                            JNZ     SHORT LEAVECODE		; Not found
  4785                                  	;mov	ah,[ES:DI+5]
  4786 000005D9 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4787                                  LEAVECODE:
  4788 000005DD 07                              POP     ES ; *
  4789                                  	; 15/05/2019 - Retro DOS v4.0
  4790 000005DE 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4791                                          ;ENDIF
  4792                                  
  4793 000005E2 F9                              STC
  4794                                  ILEAVE:
  4795                                  	; 15/05/2019
  4796 000005E3 07                              POP     ES ; **
  4797 000005E4 E8ADFE                  	call	restore_world
  4798 000005E7 07                              pop	es ; *** (MSDOS 6.21)
  4799 000005E8 FA                      	CLI
  4800 000005E9 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4801 000005ED 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4802 000005F2 16                              push	ss			; M072 - Start
  4803 000005F3 07                      	pop	es			; es - dosdata
  4804 000005F4 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4805 000005F9 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4806 000005FE 07                      	pop	es  ; ****		; Note es was saved on user
  4807                                  					; stack at entry 
  4808                                  					; M072 - End
  4809 000005FF FB                              STI
  4810 00000600 CB                      	RETF   ; ! FAR return !
  4811                                  
  4812                                  ;ABSDRD	ENDP
  4813                                  
  4814                                  ;---------------------------------------------------------------------------
  4815                                  ;
  4816                                  ; Procedure Name : ABSDWRT
  4817                                  ;
  4818                                  ; Interrupt 26 handler. Performs absolute disk write.
  4819                                  ; Inputs:	AL - 0-based drive number
  4820                                  ;		DS:BX point to source buffer
  4821                                  ;		CX number of logical sectors to write
  4822                                  ;		DX starting logical sector number (0-based)
  4823                                  ; Outputs:	Original flags still on stack
  4824                                  ;		Carry set
  4825                                  ;		    AH error from BIOS
  4826                                  ;		    AL same as low byte of DI from INT 24
  4827                                  ;
  4828                                  ;---------------------------------------------------------------------------
  4829                                          ;procedure   ABSDWRT,FAR
  4830                                  ABSDWRT:
  4831                                  	; 15/05/2019 - Retro DOS v4.0
  4832                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4833                                  	; 04/11/2022
  4834                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4835                                  
  4836 00000601 FA                      	CLI
  4837                                  
  4838                                  ;	set up ds to point to DOSDATA
  4839                                  
  4840 00000602 50                      	push	ax
  4841 00000603 8CD8                    	mov	ax,ds
  4842                                  	;getdseg <ds>
  4843 00000605 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4844 0000060A A3[0A0D]                	mov	[TEMPSEG],ax
  4845 0000060D 58                      	pop	ax
  4846                                  
  4847                                  	; M072:
  4848                                  	; We shall save es on the user stack here. We need to use ES in
  4849                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4850                                  	; time in order to restore the user stack.
  4851                                  
  4852 0000060E 06                      	push	es ; ****		; M072
  4853                                  
  4854 0000060F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4855 00000613 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4856                                  
  4857                                  	; set up ss to point to DOSDATA
  4858                                  	;
  4859                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4860                                  	; ROMDOS version of the getdseg macro with the SS register!
  4861                                  	; An interrupt will sneak through.
  4862                                  
  4863                                  ;ifndef ROMDOS
  4864                                  	;getdseg <ss>			; cli in entry of routine
  4865 00000617 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4866                                  ;else
  4867                                  ;	mov	ds, cs:[BioDataSeg]
  4868                                  ;	assume	ds:bdata
  4869                                  ;
  4870                                  ;	mov	ss, ds:[DosDataSg]
  4871                                  ;	assume	ss:DOSDATA
  4872                                  ;
  4873                                  ;endif ; ROMDOS
  4874                                  
  4875 0000061C BC[2009]                	MOV	SP,DSKSTACK
  4876                                  		; we are now switched to DOS's disk stack
  4877                                  
  4878 0000061F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4879                                  
  4880 00000623 06                      	push	es ; *** (MSDOS 6.21)
  4881                                  
  4882 00000624 E884FE                  	call	save_world	      	; save all regs
  4883                                  
  4884 00000627 06                      	PUSH	ES ; **
  4885 00000628 E802FF                  	CALL	AbsSetup
  4886 0000062B 72B6                    	JC	short ILEAVE
  4887                                  
  4888                                  	;EnterCrit critDisk
  4889 0000062D E8550D                  	call	ECritDisk
  4890 00000630 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4891 00000636 E89803                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4892                                  	;LeaveCrit critDisk
  4893 00000639 E8640D                  	call	LCritDisk
  4894                                  
  4895                                  ;M039
  4896                                  ;       DS:BX = transfer address (source data address).
  4897                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4898                                  ;	     sectors, also termed an "Extent".)
  4899                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4900                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4901                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4902                                  ;
  4903                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4904                                  ;       written. Note that all the above registers are preserved for
  4905                                  ;       DSKWRITE.
  4906                                  
  4907 0000063C 1E                              push    ds
  4908                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4909 0000063D E85337                  	call	DskWrtBufPurge
  4910 00000640 1F                              pop     ds
  4911                                  ;M039
  4912                                  	;invoke	DSKWRITE
  4913 00000641 E80732                  	call	DSKWRITE
  4914 00000644 EB82                    	JMP	short TLEAVE
  4915                                  
  4916                                  ;ABSDWRT ENDP
  4917                                  
  4918                                  ;----------------------------------------------------------------------------
  4919                                  ;
  4920                                  ; Procedure Name : GETBP
  4921                                  ;
  4922                                  ; Inputs:
  4923                                  ;	AL = Logical unit number (A = 0)
  4924                                  ; Function:
  4925                                  ;	Find Drive Parameter Block
  4926                                  ; Outputs:
  4927                                  ;	ES:BP points to DPB
  4928                                  ;	[THISDPB] = ES:BP
  4929                                  ;	Carry set if unit number bad or unit is a NET device.
  4930                                  ;		Later case sets extended error error_I24_not_supported
  4931                                  ; No other registers alteredjjj
  4932                                  ;
  4933                                  ;----------------------------------------------------------------------------
  4934                                  
  4935                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4936                                  GETBP:
  4937                                  	; 15/05/2019 - Retro DOS v4.0
  4938                                  	; 11/07/2018 - Retro DOS v3.0
  4939 00000646 50                      	PUSH	AX
  4940 00000647 0401                    	ADD	AL, 1		; No increment; need carry flag
  4941 00000649 7216                    	JC	SHORT SKIPGET
  4942 0000064B E87265                  	CALL	GETTHISDRV
  4943                                  	; MSDOS 6.0
  4944 0000064E 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4945 00000650 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4946 00000652 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4947 00000655 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4948 00000657 F9                      	STC				;DCR.			;AN000;
  4949 00000658 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4950 0000065B C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4951                                  SKIPGET:
  4952 00000661 58                      	POP	AX
  4953 00000662 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4954                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4955                                  	;jnc	short getbp_t
  4956                                  	;retn
  4957                                  getbp_t:
  4958 00000664 C42E[A205]              	LES	BP,[THISCDS]
  4959                                  	; 15/12/2022
  4960 00000668 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4961                                  	; 07/12/2022
  4962                                  	;TEST	WORD [ES:BP+43H],8000H
  4963                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4964 0000066D 7408                    	JZ	SHORT GETBP_CDS
  4965 0000066F C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4966 00000675 F9                      	STC
  4967                                  GETBP_RETN:
  4968 00000676 C3                      	RETN
  4969                                  
  4970                                  GETBP_CDS:
  4971                                  	;LES	BP,[ES:BP+45H]
  4972 00000677 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4973                                  GOTDPB:
  4974                                  	; Load THISDPB from ES:BP
  4975 0000067B 892E[8A05]              	MOV	[THISDPB],BP
  4976 0000067F 8C06[8C05]              	MOV	[THISDPB+2],ES
  4977 00000683 C3                      	RETN
  4978                                  
  4979                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4980                                  
  4981                                  ;----------------------------------------------------------------------------
  4982                                  ;
  4983                                  ; Procedure Name : SYS_RETURN
  4984                                  ;
  4985                                  ; These are the general system call exit mechanisms. All internal system
  4986                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4987                                  ; is to set the user's flags and set his AX register for return.
  4988                                  ;
  4989                                  ;----------------------------------------------------------------------------
  4990                                  
  4991                                          ;procedure   SYS_RETURN,NEAR
  4992                                  SYS_RETURN:        
  4993                                          ;entry	SYS_RET_OK
  4994                                  SYS_RET_OK:   
  4995 00000684 E843FE                  	call    Get_User_Stack
  4996                                  		; turn off user's carry flag
  4997                                  SYS_RET_OK_clc: ; 25/06/2019 
  4998                                          ;;and	word [SI+16h],0FFFEh 
  4999                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5000                                          ; 25/06/2019
  5001 00000687 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5002 0000068B EB10                    	JMP     SHORT DO_RET
  5003                                  
  5004                                          ;entry   SYS_RET_ERR
  5005                                  SYS_RET_ERR:        
  5006 0000068D 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5007 0000068F E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5008 00000692 E81A00                  	CALL	ErrorMap
  5009                                  
  5010                                  	;entry	From_GetSet
  5011                                  From_GetSet:
  5012 00000695 E832FE                          call    Get_User_Stack
  5013                                  		 ; signal carry to user
  5014                                  	;;or	word [SI+16h],1
  5015                                  	;OR	word [SI+user_env.user_F],f_Carry
  5016                                  	; 25/06/2019
  5017 00000698 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5018 0000069C F9                      	STC			; also, signal internal error
  5019                                  DO_RET:
  5020                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5021 0000069D 8904                    	MOV	[SI],AX
  5022 0000069F C3                      	RETN
  5023                                  
  5024                                  	;entry	FCB_RET_OK
  5025                                  FCB_RET_OK:
  5026                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5027                                  NO_OP:
  5028 000006A0 30C0                    	XOR	AL,AL
  5029 000006A2 C3                      	retn
  5030                                  
  5031                                  	;entry	FCB_RET_ERR
  5032                                  FCB_RET_ERR:
  5033 000006A3 30E4                    	XOR	AH,AH
  5034 000006A5 36A3[2403]              	mov	[ss:EXTERR],AX
  5035 000006A9 E80300                  	CALL	ErrorMap
  5036 000006AC B0FF                    	MOV	AL,-1
  5037 000006AE C3                      	retn
  5038                                  
  5039                                  	;entry	ErrorMap
  5040                                  ErrorMap:
  5041 000006AF 56                      	PUSH	SI
  5042                                  				; ERR_TABLE_21 is now in DOSDATA
  5043 000006B0 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5044                                  				; SS override for FAILERR and EXTERR
  5045 000006B3 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5046 000006B9 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5047                                  		 ; Ooops, this is the REAL reason
  5048                                  	;mov	word [SS:EXTERR],53h
  5049 000006BB 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5050                                  EXTENDED_NORMAL:
  5051 000006C2 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5052 000006C5 5E                      	POP	SI
  5053 000006C6 C3                      	retn
  5054                                  
  5055                                  	;EndProc SYS_RETURN
  5056                                  
  5057                                  ;---------------------------------------------------------------------------
  5058                                  ;
  5059                                  ; Procedure Name : CAL_LK
  5060                                  ;
  5061                                  ; Inputs:
  5062                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5063                                  ;		(DS NEED not be DOSDATA)
  5064                                  ;	[EXTERR] is set with error
  5065                                  ; Function:
  5066                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5067                                  ; Outputs:
  5068                                  ;	[EXTERR_CLASS] set
  5069                                  ;	[EXTERR_ACTION] set
  5070                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5071                                  ; Destroys SI, FLAGS
  5072                                  ;
  5073                                  ;---------------------------------------------------------------------------
  5074                                  
  5075                                  	;procedure CAL_LK,NEAR
  5076                                  CAL_LK:
  5077 000006C7 1E                      	PUSH	DS
  5078 000006C8 50                      	PUSH	AX
  5079 000006C9 53                      	PUSH	BX
  5080                                  
  5081                                  ;M048	Context DS		; DS:SI -> Table
  5082                                  ;
  5083                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5084                                  ; is DOSDATA
  5085                                  
  5086                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5087                                  	; 15/05/2019 - Retro DOS v4.0
  5088 000006CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5089                                  
  5090                                  	; 18/07/2018
  5091                                  	;push	ss
  5092                                  	;pop	ds
  5093                                  
  5094 000006CF 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5095                                  TABLK1:
  5096 000006D3 AC                      	LODSB
  5097                                  
  5098 000006D4 3CFF                    	CMP	AL,0FFH
  5099 000006D6 7409                    	JZ	short GOT_VALS	; End of table
  5100 000006D8 38D8                    	CMP	AL,BL
  5101 000006DA 7405                    	JZ	short GOT_VALS	; Got entry
  5102 000006DC 83C603                  	ADD	SI,3		; Next table entry
  5103                                  	; 15/08/2018
  5104 000006DF EBF2                    	JMP	short TABLK1
  5105                                  
  5106                                  GOT_VALS:
  5107 000006E1 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5108                                  
  5109 000006E2 80FCFF                  	CMP	AH,0FFH
  5110 000006E5 7404                    	JZ	short NO_SET_ACT
  5111 000006E7 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5112                                  NO_SET_ACT:
  5113 000006EB 3CFF                    	CMP	AL,0FFH
  5114 000006ED 7403                    	JZ	short NO_SET_CLS
  5115 000006EF A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5116                                  NO_SET_CLS:
  5117 000006F2 AC                      	LODSB			; Get LOCUS
  5118                                  
  5119 000006F3 3CFF                    	CMP	AL,0FFH
  5120 000006F5 7403                    	JZ	short NO_SET_LOC
  5121 000006F7 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5122                                  NO_SET_LOC:
  5123 000006FA 5B                      	POP	BX
  5124 000006FB 58                      	POP	AX
  5125 000006FC 1F                      	POP	DS
  5126 000006FD C3                      	retn
  5127                                  
  5128                                  	;EndProc CAL_LK
  5129                                  
  5130                                  ;---------------------------------------------------------------------------
  5131                                  ;
  5132                                  ; Procedure Name : ETAB_LK
  5133                                  ;
  5134                                  ; Inputs:
  5135                                  ;	AX is error code
  5136                                  ;	[USER_IN_AX] has AH value of system call involved
  5137                                  ; Function:
  5138                                  ;	Make sure error code is appropriate to this call.
  5139                                  ; Outputs:
  5140                                  ;	AX MAY be mapped error code
  5141                                  ;	[EXTERR] = Input AX
  5142                                  ; Destroys ONLY AX and FLAGS
  5143                                  ;
  5144                                  ;---------------------------------------------------------------------------
  5145                                  
  5146                                  	;procedure ETAB_LK,NEAR
  5147                                  
  5148                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5149 000006FE 1E                      	PUSH	DS
  5150 000006FF 56                      	PUSH	SI
  5151 00000700 51                      	PUSH	CX
  5152 00000701 53                      	PUSH	BX
  5153                                  
  5154                                  	;Context DS			; SS is DOSDATA
  5155                                  
  5156 00000702 16                      	push	ss
  5157 00000703 1F                      	pop	ds
  5158                                  
  5159 00000704 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5160                                  
  5161                                  					; I21_MAP_E_TAB is now in DOSCODE
  5162 00000707 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5163 0000070A 88C7                    	MOV	BH,AL			; Real code to BH
  5164 0000070C 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5165                                  TABLK2:
  5166                                  	; 15/05/2019 - Retro DOS v4.0
  5167 00000710 2E                      	cs
  5168 00000711 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5169                                  	
  5170                                  	; 18/07/2018 - Retro DOS v3.0
  5171                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5172                                  
  5173 00000712 3CFF                    	CMP	AL,0FFH 		; End of table?
  5174 00000714 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5175 00000716 38D8                    	CMP	AL,BL			; Found call?
  5176 00000718 740C                    	JZ	short GOT_CALL		; Yes
  5177 0000071A 86E0                    	XCHG	AH,AL			; Count to AL
  5178 0000071C 30E4                    	XOR	AH,AH			; Make word for add
  5179 0000071E 01C6                    	ADD	SI,AX			; Next table entry
  5180 00000720 EBEE                    	JMP	short TABLK2
  5181                                  
  5182                                  NOT_IN_TABLE:
  5183 00000722 88F8                    	MOV	AL,BH			; Restore original code
  5184 00000724 EB0C                    	JMP	SHORT NO_MAP
  5185                                  
  5186                                  GOT_CALL:
  5187 00000726 88E1                    	MOV	CL,AH
  5188 00000728 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5189                                  CHECK_CODE:
  5190                                  	; 15/05/2019 - Retro DOS v4.0
  5191 0000072A 2E                      	cs
  5192 0000072B AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5193                                  
  5194                                  	; 18/07/2018
  5195                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5196                                  
  5197 0000072C 38F8                    	CMP	AL,BH			; Code OK?
  5198 0000072E 7402                    	JZ	short NO_MAP		; Yes
  5199 00000730 E2F8                    	LOOP	CHECK_CODE
  5200                                  NO_MAP:
  5201 00000732 30E4                    	XOR	AH,AH			; AX is now valid code
  5202 00000734 5B                      	POP	BX
  5203 00000735 59                      	POP	CX
  5204 00000736 5E                      	POP	SI
  5205 00000737 1F                      	POP	DS
  5206 00000738 C3                      	retn
  5207                                  
  5208                                  	;EndProc ETAB_LK
  5209                                  
  5210                                  ; 18/07/2018 - Retro DOS v3.0
  5211                                  ;---------------------------------------------------------------------------
  5212                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5213                                  
  5214                                  ;IF installed ; (*)
  5215                                  
  5216                                  ;---------------------------------------------------------------------------
  5217                                  ;
  5218                                  ; Procedure Name : SetBad
  5219                                  ;
  5220                                  ; SetBad sets up info for bad functions
  5221                                  ;
  5222                                  ;---------------------------------------------------------------------------
  5223                                  
  5224                                  SetBad:
  5225                                  	;mov	ax,1
  5226 00000739 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5227                                  
  5228                                  	; MSDOS 3.3
  5229                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5230                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5231                                  
  5232                                  ;	set up ds to point to DOSDATA
  5233                                  
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235                                  	; MSDOS 6.0
  5236 0000073C 1E                      	push	ds
  5237                                  
  5238                                  	;getdseg <ds>
  5239 0000073D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5240                                  
  5241 00000742 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5242                                  
  5243 00000747 1F                      	pop	ds	  	;hkn; restore ds
  5244                                  
  5245 00000748 F9                      	STC
  5246 00000749 C3                      	retn
  5247                                  
  5248                                  ;--------------------------------------------------------------------------
  5249                                  ;
  5250                                  ; Procedure Name : BadCall
  5251                                  ;
  5252                                  ; BadCall is the initial routine for bad function calls
  5253                                  ;
  5254                                  ;--------------------------------------------------------------------------
  5255                                  
  5256                                  BadCall:
  5257 0000074A E8ECFF                  	call	SetBad
  5258 0000074D CB                      	retf
  5259                                  
  5260                                  ;--------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; OKCall always sets carry to off.
  5263                                  ;
  5264                                  ;-----------------------------------------------------------------------
  5265                                  
  5266                                  OKCall:
  5267 0000074E F8                      	CLC
  5268 0000074F CB                      	retf
  5269                                  
  5270                                  ;---------------------------------------------------------------------------
  5271                                  ;
  5272                                  ; Procedure Name : INT2F
  5273                                  ;
  5274                                  ; INT 2F handler works as follows:
  5275                                  ;   PUSH    AX
  5276                                  ;   MOV     AX,multiplex:function
  5277                                  ;   INT     2F
  5278                                  ;   POP     ...
  5279                                  ; The handler itself needs to make the AX available for the various routines.
  5280                                  ;
  5281                                  ;----------------------------------------------------------------------------
  5282                                  
  5283                                  ; 15/05/2019 - Retro DOS v4.0
  5284                                  
  5285                                  ;KERNEL_SEGMENT equ 70h
  5286                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5287                                  DOSBIODATASEG equ 70h
  5288                                  
  5289                                  ; retrodos4.s - offset in BIOSDATA
  5290                                  bios_i2f equ 5
  5291                                  
  5292                                  ;PUBLIC	Int2F
  5293                                  ;INT2F	PROC	FAR
  5294                                  
  5295                                  ; 15/05/2019
  5296                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5297                                  
  5298                                  ; 04/11/2022
  5299                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5300                                  
  5301                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5302                                  	; 18/07/2018 - Retro DOS v3.0
  5303                                  INT2F:
  5304                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5305                                  INT2FNT:
  5306                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5307 00000750 FB                      	STI
  5308                                  	;cmp	ah,11h
  5309 00000751 80FC11                  	CMP	AH,MultNET
  5310 00000754 750A                    	JNZ	short INT2FSHR
  5311                                  TestInstall:
  5312 00000756 08C0                    	OR	AL,AL
  5313 00000758 7403                    	JZ	short Leave2F
  5314                                  BadFunc:
  5315 0000075A E8DCFF                  	CALL	SetBad
  5316                                  
  5317                                  	;entry	Leave2F
  5318                                  Leave2F:
  5319 0000075D CA0200                  	RETF	2			; long return + clear flags off stack
  5320                                  
  5321                                  INT2FSHR:
  5322                                  	;cmp	ah,10h
  5323 00000760 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5324 00000763 74F1                    	JZ	short TestInstall	; yes, check for installation
  5325                                  INT2FNLS:
  5326                                  	;cmp	ah,14h
  5327 00000765 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5328 00000768 74EC                    	JZ	short TestInstall	; yes check for installation
  5329                                  INT2FDOS:
  5330                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5331                                  
  5332                                  	; 18/07/2018
  5333                                  	; MSDOS 3.3
  5334                                  	;;cmp	ah,12h	
  5335                                  	;CMP	AH,MultDOS
  5336                                  	;jz	short DispatchDOS
  5337                                  	;iret
  5338                                  
  5339                                  	; 15/05/2019
  5340                                  	; MSDOS 6.0
  5341                                  	;cmp	ah,12h	; 07/12/2022
  5342 0000076A 80FC12                  	CMP	AH,MultDOS
  5343 0000076D 7503                    	JNZ	short check_win		;check if win386 broadcast
  5344 0000076F E9F801                  	jmp	DispatchDOS
  5345                                  
  5346                                  	; .... win386 .... 
  5347                                  
  5348                                  check_win:
  5349                                  	;cmp	ah,16h
  5350 00000772 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5351 00000775 7408                    	je	short Win386_Msg
  5352                                  
  5353                                  	; M044
  5354                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5355                                  	; of Windows. If so, do special action of going and saving last para
  5356                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5357                                  	; bug
  5358                                  
  5359 00000777 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5360                                  	;jne	short next_i2f		; no, chain on
  5361                                  	; 15/12/2022
  5362                                  	;jmp	winold_swap		; yes, do desired action
  5363 0000077A 7442                    	je	short winold_swap
  5364 0000077C E90701                  	jmp	next_i2f
  5365                                  
  5366                                  	; 15/12/2022
  5367                                  ;next_i2f:
  5368                                  ;	;;;jmp	bios_i2f
  5369                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5370                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5371                                  ;	; 04/11/2022
  5372                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5373                                  
  5374                                  ;	IRET				; This assume that we are at the head
  5375                                  					; of the list
  5376                                  ;INT2F	ENDP
  5377                                  
  5378                                  ; 15/05/2019 - Retro DOS v4.0
  5379                                  
  5380                                  ; We have received a message from Win386. There are three possible
  5381                                  ; messages we could get from Win386:
  5382                                  ;
  5383                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5384                                  ;		  to the Win386 startup info structure.
  5385                                  ; Exit		- for this, we clear the IsWin386 flag.
  5386                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5387                                  ;		  has already been handled. this is indicated by setting
  5388                                  ;		  CX to a non-zero value.
  5389                                  
  5390                                  Win386_Msg:
  5391 0000077F 1E                      	push	ds
  5392                                  
  5393                                  	;getdseg <DS>			; ds is DOSDATA
  5394 00000780 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5395                                  
  5396                                  	; For WIN386 2.xx instance data
  5397                                  
  5398 00000785 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5399 00000787 7503                    	jne	short Win386_Msg_exit
  5400 00000789 E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5401                                  Win386_Msg_exit:
  5402 0000078C 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5403 0000078E 7503                    	jne	short Win386_Msg_devcall
  5404 00000790 E92E01                  	jmp	Win386_Leaving
  5405                                  Win386_Msg_devcall:
  5406 00000793 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5407 00000795 7503                    	jne	short Win386_Msg_init
  5408 00000797 E96501                  	jmp	Win386_Query
  5409                                  Win386_Msg_init:
  5410 0000079A 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5411 0000079C 7403                    	je	short Win386_Starting
  5412 0000079E E9E400                  	jmp	win_nexti2f		; no, return
  5413                                  Win386_Starting:
  5414                                  	; 17/12/2022
  5415 000007A1 F6C201                  	test	dl,1
  5416                                  	;test	dx,1			; is this really win386?
  5417 000007A4 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5418 000007A6 E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5419                                  Win386_vchk:
  5420                                  	; M018 -- start of block changes
  5421                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5422                                  	; than 030Ah, we skip the VxD presence check
  5423                                  
  5424                                  ;M067 -- Begin changes
  5425                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5426                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5427                                  ;So, we null out the VxD ptr before the check.
  5428                                  
  5429                                  	;mov	word [Win386_Info+6],0
  5430 000007A9 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5431                                  	;mov	word [Win386_Info+8],0
  5432 000007AF C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5433                                  
  5434                                  ;M067 -- End changes
  5435                                  
  5436                                  ;ifdef JAPAN
  5437                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5438                                  ;else
  5439 000007B5 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5440                                  ;endif
  5441                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5442 000007B9 724E                    	jb	short Win386_vxd
  5443 000007BB E9DF00                  	jmp	noVxD31
  5444                                  
  5445                                  	; 15/12/2022
  5446                                  winold_swap:
  5447 000007BE 1E                      	push	ds
  5448 000007BF 06                      	push	es
  5449 000007C0 56                      	push	si
  5450 000007C1 57                      	push	di
  5451 000007C2 51                      	push	cx
  5452                                  
  5453                                  	;getdseg <ds>			;ds = DOSDATA
  5454 000007C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5455                                  
  5456 000007C8 3C01                    	cmp	al,1			;swap Windows out call
  5457 000007CA 751B                    	jne	short swapin		;no, check if Swap in call
  5458 000007CC E88E01                  	call	getwinlast
  5459 000007CF 1E                      	push	ds
  5460 000007D0 07                      	pop	es
  5461 000007D1 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5462 000007D3 31F6                    	xor	si,si
  5463 000007D5 BF[0600]                	mov	di,WinoldPatch1
  5464 000007D8 B90800                  	mov	cx,8
  5465 000007DB FC                      	cld
  5466 000007DC 51                      	push	cx
  5467 000007DD F3A4                    	rep	movsb			;save first 8 bytes
  5468 000007DF 59                      	pop	cx
  5469 000007E0 BF[CD0D]                	mov	di,WinoldPatch2
  5470 000007E3 F3A4                    	rep	movsb			;save next 8 bytes
  5471 000007E5 EB1B                    	jmp	short winold_done
  5472                                  swapin:
  5473 000007E7 3C02                    	cmp	al,2			;swap Windows in call?
  5474 000007E9 7517                    	jne	short winold_done	;no, something else, pass it on
  5475 000007EB E86F01                  	call	getwinlast
  5476 000007EE 8EC6                    	mov	es,si
  5477 000007F0 31FF                    	xor	di,di
  5478 000007F2 BE[0600]                	mov	si,WinoldPatch1
  5479 000007F5 B90800                  	mov	cx,8
  5480 000007F8 FC                      	cld
  5481 000007F9 51                      	push	cx
  5482 000007FA F3A4                    	rep	movsb			;restore first 8 bytes
  5483 000007FC 59                      	pop	cx
  5484 000007FD BE[CD0D]                	mov	si,WinoldPatch2
  5485 00000800 F3A4                    	rep	movsb			;restore next 8 bytes
  5486                                  winold_done:
  5487 00000802 59                      	pop	cx
  5488 00000803 5F                      	pop	di
  5489 00000804 5E                      	pop	si
  5490 00000805 07                      	pop	es
  5491 00000806 1F                      	pop	ds
  5492 00000807 EB7D                    	jmp	short next_i2f		;chain on
  5493                                  	; 15/12/2022
  5494                                  	;jmp	next_i2f	
  5495                                  
  5496                                  Win386_vxd:
  5497 00000809 50                      	push	ax
  5498 0000080A 53                      	push	bx
  5499 0000080B 51                      	push	cx
  5500 0000080C 52                      	push	dx
  5501 0000080D 56                      	push	si
  5502 0000080E 57                      	push	di			; save regs !!dont change order!!
  5503                                  
  5504 0000080F 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5505 00000813 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5506 00000816 7421                    	je	short Vxd31		; N: continue
  5507                                  					; Y: save arena associated with 
  5508                                  					;    umb_head
  5509                                  
  5510 00000818 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5511                                  					; umb_arena
  5512 0000081D 1E                      	push	ds
  5513 0000081E 06                      	push	es
  5514                                  
  5515 0000081F 8CD8                    	mov	ax,ds
  5516 00000821 8EC0                    	mov	es,ax			; es - > dosdata
  5517                                  
  5518 00000823 8EDB                    	mov	ds,bx
  5519 00000825 31F6                    	xor	si,si			; ds:si -> umb_head
  5520                                  
  5521 00000827 FC                      	cld
  5522                                  
  5523 00000828 BF[1F12]                	mov	di,UmbSave1
  5524 0000082B B90B00                  	mov	cx,11
  5525 0000082E F3A4                    	rep	movsb
  5526                                  
  5527 00000830 BF[D50D]                	mov	di,UmbSave2
  5528                                  	;mov	cx,5
  5529                                  	; 18/12/2022
  5530 00000833 B105                    	mov	cl,5
  5531 00000835 F3A4                    	rep	movsb	
  5532                                  
  5533 00000837 07                      	pop	es
  5534 00000838 1F                      	pop	ds			; M062 - End
  5535                                  
  5536                                  Vxd31:
  5537                                  	;test	byte [DOS_FLAG],2
  5538 00000839 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5539 0000083E 7408                    	jz	short Dont_Supress		; M066
  5540 00000840 5F                      	pop	di				; M066
  5541 00000841 5E                      	pop	si				; M066
  5542 00000842 5A                      	pop	dx				; M066
  5543 00000843 59                      	pop	cx				; M066
  5544 00000844 5B                      	pop	bx				; M066
  5545 00000845 58                      	pop	ax				; M066
  5546 00000846 EB55                    	jmp	short noVxD31			; M066
  5547                                  
  5548                                  	; We check here if the VxD is available in the root of the boot drive. 
  5549                                  	; We do an extended open to suppress any error messages
  5550                                  	
  5551                                  Dont_Supress:
  5552 00000848 A0[6900]                	mov	al,[BOOTDRIVE]
  5553 0000084B 0440                    	add	al,'A' - 1		; get drive letter
  5554 0000084D A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5555                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5556                                  	;mov	al,0			; no extended attributes
  5557                                  	; 18/12/2022
  5558 00000850 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5559 00000853 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5560                                  					; no inherit, suppress crit err
  5561 00000856 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5562 00000859 BA0100                  	mov	dx,1			; fail if file does not exist
  5563 0000085C BE[3110]                	mov	si,VxDpath	
  5564                                  					; path of VxD file
  5565 0000085F BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5566                                  
  5567 00000862 CD21                    	int	21h			; do extended open
  5568                                  
  5569 00000864 5F                      	pop	di
  5570 00000865 5E                      	pop	si
  5571 00000866 5A                      	pop	dx
  5572 00000867 59                      	pop	cx
  5573                                  
  5574 00000868 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5575                                  
  5576                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5577                                  	; to indicate error to Windows after displaying message to user that 
  5578                                  	; VxD needs to be present to run Windows in enhanced mode.
  5579                                  
  5580 0000086A 52                      	push	dx
  5581 0000086B 1E                      	push	ds
  5582 0000086C 56                      	push	si
  5583 0000086D BE[060A]                	mov	si,NoVxDErrMsg
  5584 00000870 0E                      	push	cs
  5585 00000871 1F                      	pop	ds
  5586 00000872 B96300                  	mov	cx,VxDMesLen ; 99	;
  5587 00000875 B402                    	mov	ah,2			; write char to console
  5588 00000877 FC                      	cld
  5589                                  vxdlp:
  5590 00000878 AC                      	lodsb
  5591 00000879 86D0                    	xchg	dl,al			; get char in dl
  5592 0000087B CD21                    	int	21h
  5593 0000087D E2F9                    	loop	vxdlp
  5594                                  
  5595 0000087F 5E                      	pop	si
  5596 00000880 1F                      	pop	ds
  5597 00000881 5A                      	pop	dx
  5598 00000882 5B                      	pop	bx
  5599 00000883 58                      	pop	ax			;all registers restored
  5600 00000884 41                      	inc	cx			;cx != 0 to indicate error
  5601                                  	; 15/12/22022
  5602                                  	;jmp	win_nexti2f		;chain on
  5603                                  	;jmp	short win_nexti2f
  5604                                  
  5605                                  	; 15/12/2022
  5606                                  win_nexti2f:
  5607 00000885 1F                      	pop	ds
  5608                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5609                                  	; 15/12/2022
  5610                                  next_i2f:
  5611                                  	;;;jmp	bios_i2f
  5612                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5613                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5614                                  	; 04/11/2022
  5615 00000886 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5616                                  
  5617                                  VxDthere:
  5618 0000088B 89C3                    	mov	bx,ax
  5619 0000088D B43E                    	mov	ah,CLOSE ; 3Eh
  5620 0000088F CD21                    	int	21h			;close the file
  5621                                  
  5622                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5623                                  
  5624                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5625                                  	;mov	bx,Win386_Info
  5626                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5627                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5628                                  	; 15/12/2022
  5629 00000891 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5630 00000897 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5631                                  
  5632 0000089B 5B                      	pop	bx
  5633 0000089C 58                      	pop	ax
  5634                                  noVxD31:
  5635                                  	; M018; End of block changes
  5636                                  
  5637 0000089D 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5638 000008A2 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5639                                  
  5640                                  	; M002;
  5641                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5642                                  
  5643 000008A7 52                      	push	dx			; M002
  5644 000008A8 89DA                    	mov	dx,bx			; M002
  5645                                  					; point ES:BX to Win386_Info ; M002
  5646 000008AA BB[E20F]                	mov	bx,Win386_Info 
  5647 000008AD 895702                  	mov	[bx+2],dx		; M002
  5648 000008B0 8C4704                  	mov	[bx+4],es		; M002
  5649 000008B3 5A                      	pop	dx			; M002
  5650 000008B4 1E                      	push	ds			; M002
  5651 000008B5 07                      	pop	es			; M002
  5652                                  	;jmp	win_nexti2f		; M002
  5653                                  	; 15/12/2022
  5654 000008B6 EBCD                    	jmp	short win_nexti2f
  5655                                  
  5656                                  	; 15/12/2022
  5657                                  	; Code to return Win386 2.xx instance table
  5658                                  OldWin386Init:
  5659 000008B8 58                      	pop	ax			; discard ds pushed on stack
  5660 000008B9 BE[E711]                	mov	si,OldInstanceJunk 
  5661                                  					; ds:si = instance table
  5662 000008BC B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5663                                  	;jmp	next_i2f
  5664                                  	; 15/12/2022
  5665 000008BF EBC5                    	jmp	short next_i2f
  5666                                  
  5667                                  Win386_Leaving:
  5668                                  	; 15/12/2022
  5669 000008C1 F6C201                  	test 	dl,1
  5670                                  	;test	dx,1			; is this really win386?
  5671                                  	;jz	short Win386_Leaving_c
  5672                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5673                                  	; 15/12/2022
  5674 000008C4 75BF                    	jnz	short win_nexti2f	
  5675                                  
  5676                                  Win386_Leaving_c:
  5677                                  					; M062 - Start
  5678 000008C6 803E[DA0D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5679                                  					;    up.
  5680 000008CB 7526                    	jne	short noumb		; N: not saved 
  5681 000008CD C606[DA0D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5682                                  					;    previously saved umb_head
  5683 000008D2 50                      	push	ax
  5684 000008D3 06                      	push	es
  5685 000008D4 51                      	push	cx
  5686 000008D5 56                      	push	si
  5687 000008D6 57                      	push	di
  5688                                  
  5689 000008D7 A1[8C00]                	mov	ax,[UMB_HEAD]	
  5690 000008DA 8EC0                    	mov	es,ax
  5691 000008DC 31FF                    	xor	di,di			; es:di -> umb_head
  5692                                  
  5693 000008DE FC                      	cld
  5694                                  
  5695 000008DF BE[1F12]                	mov	si,UmbSave1
  5696 000008E2 B90B00                  	mov	cx,11
  5697 000008E5 F3A4                    	rep	movsb
  5698 000008E7 BE[D50D]                	mov	si,UmbSave2
  5699                                  	;mov	cx,5
  5700                                  	; 18/12/2022
  5701 000008EA B105                    	mov	cl,5
  5702 000008EC F3A4                    	rep	movsb
  5703                                  
  5704 000008EE 5F                      	pop	di
  5705 000008EF 5E                      	pop	si
  5706 000008F0 59                      	pop	cx
  5707 000008F1 07                      	pop	es
  5708 000008F2 58                      	pop	ax
  5709                                  noumb:					; M062 - End
  5710 000008F3 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5711 000008F8 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5712 000008FD EB86                    	jmp	short win_nexti2f
  5713                                  
  5714                                  ;	; 15/12/2022
  5715                                  ;	; Code to return Win386 2.xx instance table
  5716                                  ;OldWin386Init:
  5717                                  ;	pop	ax			; discard ds pushed on stack
  5718                                  ;	mov	si,OldInstanceJunk 
  5719                                  ;					; ds:si = instance table
  5720                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5721                                  ;	;jmp	next_i2f
  5722                                  ;	; 15/12/2022
  5723                                  ;	jmp	short _next_i2f
  5724                                  
  5725                                  Win386_Query:
  5726 000008FF 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5727 00000902 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5728 00000904 09C9                    	or	cx,cx			; is it an instance query?
  5729 00000906 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5730 00000908 41                      	inc	cx			; indicate that data is instanced
  5731                                  ;
  5732                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5733                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5734                                  ; M001;  
  5735                                  ; M001; OFFSETS STRUC
  5736                                  ; M001; 	Major_version	db	?
  5737                                  ; M001; 	Minor_version	db	?
  5738                                  ; M001; 	SaveDS		dw	?
  5739                                  ; M001; 	SaveBX		dw	?
  5740                                  ; M001; 	Indos		dw	?
  5741                                  ; M001; 	User_id		dw	?
  5742                                  ; M001; 	CritPatch	dw	?
  5743                                  ; M001; OFFSETS	ENDS
  5744                                  ; M001; 
  5745                                  ; M001; User_Id is the only variable really important for proper functioning  
  5746                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5747                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5748                                  ; M001; pass this table because Win386 depends on this table to get the 
  5749                                  ; M001; User_Id offset.
  5750                                  ; M001; 
  5751 00000909 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5752 0000090C 1E                      	push	ds			; M001
  5753 0000090D 07                      	pop	es			; es:bx points at offset table ; M001
  5754 0000090E EB41                    	jmp	short PopIret		; M001
  5755                                  
  5756                                  ; 15/12/2022
  5757                                  ;	; Code to return Win386 2.xx instance table
  5758                                  ;OldWin386Init:
  5759                                  ;	pop	ax			; discard ds pushed on stack
  5760                                  ;	mov	si,OldInstanceJunk 
  5761                                  ;					; ds:si = instance table
  5762                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5763                                  ;	;jmp	next_i2f
  5764                                  ;	; 15/12/2022
  5765                                  ;	jmp	short _next_i2f
  5766                                  
  5767                                  dosmgr_func:
  5768 00000910 49                      	dec	cx
  5769 00000911 7436                    	jz	short win386_patch	; call to patch DOS
  5770 00000913 49                      	dec	cx
  5771 00000914 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5772 00000916 49                      	dec	cx
  5773 00000917 743A                    	jz	short win386_size	; get size of DOS data structures
  5774 00000919 49                      	dec	cx
  5775 0000091A 7429                    	jz	short win386_inst	; instance more data
  5776 0000091C 49                      	dec	cx
  5777 0000091D 7532                    	jnz	short PopIret		; no functions above this
  5778                                  
  5779                                  	; Get DOS device driver size -- es:di points at device driver header
  5780                                  	; In DOS 4.x, the para before the device header contains an arena 
  5781                                  	; header for the driver.
  5782                                  
  5783 0000091F 8CC0                    	mov	ax,es			; ax = device header segment
  5784                                  
  5785                                  	; We check to see if we have a memory arena for this device driver. 
  5786                                  	; The way to do this would be to look at the previous para to see if
  5787                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5788                                  	; in the arena is the same as the device header segment. These two 
  5789                                  	; checks together should take care of all cases
  5790                                  
  5791 00000921 48                      	dec	ax			; get arena header
  5792 00000922 06                      	push	es
  5793 00000923 8EC0                    	mov	es,ax			; arena header for device driver
  5794                                  
  5795 00000925 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5796 00000929 7517                    	jnz	short cantsize		; no, cant size this driver
  5797 0000092B 40                      	inc	ax			; get back device header segment
  5798 0000092C 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5799 00000930 7510                    	jnz	short cantsize		; no, not a proper arena
  5800                                  
  5801 00000932 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5802 00000936 07                      	pop	es
  5803                                  
  5804                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5805                                  	; Speed is not critical and so we choose the shortest method 
  5806                                  	; -- use "mul"
  5807                                  
  5808 00000937 BB1000                  	mov	bx,16
  5809 0000093A F7E3                    	mul	bx
  5810 0000093C 89C1                    	mov	cx,ax
  5811 0000093E 89D3                    	mov	bx,dx
  5812 00000940 EB09                    	jmp	short win386_done	; return with device driver size
  5813                                  cantsize:
  5814 00000942 07                      	pop	es
  5815 00000943 31C0                    	xor	ax,ax
  5816                                  win386_inst:	; 05/01/2024
  5817 00000945 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5818 00000947 EB08                    	jmp	short PopIret		; return
  5819                                  
  5820                                  win386_patch:
  5821                                  	; dx contains bits marking the patches to be applied. We return 
  5822                                  	; the field with all bits set to indicate that all patches have been
  5823                                  	; done
  5824                                  
  5825 00000949 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5826                                   	;jmp	short win386_done	; done, return
  5827                                  	; 15/12/2022
  5828                                  	; 15/12/2022
  5829                                  win386_done:
  5830 0000094B B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5831 0000094E BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5832                                  PopIret:
  5833 00000951 1F                      	pop	ds
  5834 00000952 CF                      	iret	
  5835                                  
  5836                                  win386_size:
  5837                                  	; Return the size of DOS data structures -- currently only CDS size
  5838                                  
  5839                                  	; 17/12/2022
  5840 00000953 F6C201                  	test	dl,1
  5841                                  	;test	dx,1			; check for CDS size bit
  5842 00000956 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5843                                  
  5844 00000958 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5845 0000095B EBEE                    	jmp	short win386_done	; return with the size
  5846                                  
  5847                                  ; 05/01/2024
  5848                                  %if 0
  5849                                  win386_inst:
  5850                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5851                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5852                                  	; this by returning a status of not previously instanced. The basic
  5853                                  	; structure of these things have not changed and so the current
  5854                                  	; DOSMGR code should be able to work it out
  5855                                  
  5856                                  	xor	dx,dx			; make sure dx has a not done value
  5857                                  	jmp	short PopIret		; skip done indication
  5858                                  %endif
  5859                                  
  5860                                  	; 15/12/2022
  5861                                  ;win386_done:
  5862                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5863                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5864                                  ;PopIret:
  5865                                  ;	pop	ds
  5866                                  ;	iret				; return back up the chain
  5867                                  
  5868                                  	; 15/12/2022
  5869                                  ;win_nexti2f:
  5870                                  	;pop	ds
  5871                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5872                                  
  5873                                  ;End WIN386 support
  5874                                  
  5875                                  ; 15/05/2019
  5876                                  
  5877                                  ;M044; Start of changes
  5878                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5879                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5880                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5881                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5882                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5883                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5884                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5885                                  ; last para of the Windows memory block and then restore this para on the
  5886                                  ; Windows swapin callout. 
  5887                                  
  5888                                  getwinlast:
  5889                                  	; 07/12/2022
  5890 0000095D 8B36[3003]              	mov	si,[CurrentPDB]
  5891 00000961 4E                      	dec	si
  5892 00000962 8EC6                    	mov	es,si
  5893 00000964 2603360300              	add	si,[es:3]
  5894 00000969 C3                      	retn
  5895                                  
  5896                                  ; 15/12/2022
  5897                                  %if 0
  5898                                  winold_swap:
  5899                                  	push	ds
  5900                                  	push	es
  5901                                  	push	si
  5902                                  	push	di
  5903                                  	push	cx
  5904                                  
  5905                                  	;getdseg <ds>			;ds = DOSDATA
  5906                                  	mov	ds,[cs:DosDSeg]
  5907                                  
  5908                                  	cmp	al,1			;swap Windows out call
  5909                                  	jne	short swapin		;no, check if Swap in call
  5910                                  	call	getwinlast
  5911                                  	push	ds
  5912                                  	pop	es
  5913                                  	mov	ds,si			;ds = memory arena of Windows
  5914                                  	xor	si,si
  5915                                  	mov	di,WinoldPatch1
  5916                                  	mov	cx,8
  5917                                  	cld
  5918                                  	push	cx
  5919                                  	rep	movsb			;save first 8 bytes
  5920                                  	pop	cx
  5921                                  	mov	di,WinoldPatch2
  5922                                  	rep	movsb			;save next 8 bytes
  5923                                  	jmp	short winold_done
  5924                                  swapin:
  5925                                  	cmp	al,2			;swap Windows in call?
  5926                                  	jne	short winold_done	;no, something else, pass it on
  5927                                  	call	getwinlast
  5928                                  	mov	es,si
  5929                                  	xor	di,di
  5930                                  	mov	si,WinoldPatch1
  5931                                  	mov	cx,8
  5932                                  	cld
  5933                                  	push	cx
  5934                                  	rep	movsb			;restore first 8 bytes
  5935                                  	pop	cx
  5936                                  	mov	si,WinoldPatch2
  5937                                  	rep	movsb			;restore next 8 bytes
  5938                                  winold_done:
  5939                                  	pop	cx
  5940                                  	pop	di
  5941                                  	pop	si
  5942                                  	pop	es
  5943                                  	pop	ds
  5944                                  	jmp	next_i2f		;chain on
  5945                                  
  5946                                  %endif
  5947                                  
  5948                                  ;M044; End of changes
  5949                                  
  5950                                  ; 15/05/2019
  5951                                  
  5952                                  DispatchDOS:
  5953 0000096A 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5954 0000096F 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5955 00000974 50                      	PUSH	AX			; push index
  5956 00000975 55                      	PUSH	BP
  5957 00000976 89E5                    	MOV	BP,SP
  5958                                  		; stack looks like:
  5959                                  		;   0	BP
  5960                                  		;   2	DISPATCH
  5961                                  		;   4	TABLE
  5962                                  		;   6	RETURN
  5963                                  		;   8	LONG-RETURN
  5964                                  		;   C	FLAGS
  5965                                  		;   E	AX
  5966                                  	
  5967 00000978 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5968 0000097B 5D                      	POP	BP
  5969 0000097C E81609                  	call	TableDispatch
  5970 0000097F E9D8FD                  	JMP	BadFunc 		; return indicates invalid function
  5971                                  
  5972                                  INT2F_etcetera:
  5973                                  	;entry	DosGetGroup
  5974                                  DosGetGroup:
  5975                                  	; MSDOS 3.3
  5976                                  	;push	cs
  5977                                  	;pop	ds
  5978                                  	;retn
  5979                                  
  5980                                  	; MSDOS 6.0
  5981                                  ;SR; Cannot use CS now
  5982                                  ;
  5983                                  ;	PUSH	CS
  5984                                  ;	POP	DS
  5985                                  
  5986                                  	; 04/11/2022
  5987                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5988                                  
  5989                                  	;getdseg <ds>
  5990 00000982 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5991 00000987 C3                      	retn
  5992                                  
  5993                                  	;entry	DOSInstall
  5994                                  DOSInstall:
  5995 00000988 B0FF                    	MOV	AL,0FFh
  5996 0000098A C3                      	retn
  5997                                  
  5998                                  ;ENDIF ; (*)
  5999                                  
  6000                                  
  6001                                  ; 15/05/2019 - Retro DOS v4.0
  6002                                  
  6003                                  ;------------------------------------------------------------------------
  6004                                  ;
  6005                                  ; Procedure Name : RW32_CONVERT
  6006                                  ;
  6007                                  ;Input: same as ABSDRD and ABSDWRT
  6008                                  ;	 ES:BP -> DPB
  6009                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6010                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6011                                  ;	 carry clear, parms ok
  6012                                  ;
  6013                                  ;------------------------------------------------------------------------
  6014                                  
  6015                                  RW32_CONVERT:
  6016 0000098B 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6017 0000098E 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6018 00000990 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6019 00000991 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6020 00000992 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6021 00000996 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6022 0000099A 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6023 0000099D 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6024                                  	;INC	DL			;>32mb			;AN000;
  6025                                  	; 17/12/2022
  6026 0000099F 42                      	inc	dx
  6027 000009A0 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6028 000009A2 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6029 000009A4 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6030                                  letold:
  6031 000009A6 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6032 000009A7 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6033 000009A8 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6034                                  
  6035 000009AA 1E                      	push	ds
  6036                                  	;getdseg <ds>
  6037 000009AB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6038 000009B0 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6039 000009B6 1F                      	pop	ds
  6040                                  
  6041 000009B7 F9                      	STC				;>32mb			;AN000;
  6042 000009B8 C3                      	retn				;>32mb			;AN000;
  6043                                  
  6044                                  new32format:
  6045                                  	;mov	dx,[bx+2]
  6046 000009B9 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6047                                  
  6048 000009BC 1E                      	push	ds			; set up ds to DOSDATA
  6049                                  	;getdseg <ds>
  6050 000009BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6051 000009C2 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6052 000009C6 1F                      	pop	ds
  6053                                  
  6054 000009C7 8B17                    	mov	dx,[bx]
  6055                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6056                                  	;mov	cx,[bx+4]
  6057 000009C9 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6058                                  	;lds	bx,[bx+6]
  6059 000009CC C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6060                                  old_style:				;>32mb			;AN000;
  6061 000009CF F8                      	CLC				;>32mb			;AN000;
  6062 000009D0 C3                      	retn				;>32mb			;AN000;
  6063                                  
  6064                                  ;------------------------------------------------------------------------
  6065                                  ;
  6066                                  ; Procedure Name : Fastxxx_Purge
  6067                                  ;
  6068                                  ; Input: None
  6069                                  ; Functions: Purge Fastopen/ Cache Buffers
  6070                                  ; Output: None
  6071                                  ;
  6072                                  ;------------------------------------------------------------------------
  6073                                  
  6074                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6075                                  
  6076                                  Fastxxx_Purge:
  6077 000009D1 50                      	PUSH	AX			; save regs.	;AN000;
  6078 000009D2 56                      	PUSH	SI						;AN000;
  6079 000009D3 52                      	PUSH	DX						;AN000;
  6080                                  topen:
  6081 000009D4 1E                      	push	ds			; set up ds to DOSDATA
  6082                                  	;getdseg <ds>
  6083 000009D5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6084                                  
  6085 000009DA F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6086                                  					; fastopen installed ?	;AN000;
  6087 000009DF 1F                      	pop	ds
  6088 000009E0 740B                    	JZ	short nofast		; no			;AN000;
  6089 000009E2 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6090                                  dofast:
  6091 000009E4 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6092                                  	;;mov	dl,[es:bp+0]
  6093                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6094                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6095                                  	; 15/12/2022
  6096 000009E6 268A5600                	mov	dl,[es:bp]
  6097                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6098 000009EA E8AB1D                  	call	Fast_Dispatch
  6099                                  nofast:
  6100 000009ED 5A                      	POP	DX						;AN000;
  6101 000009EE 5E                      	POP	SI			; restore regs		;AN000;
  6102 000009EF 58                      	POP	AX			 			;AN000;
  6103 000009F0 C3                      	retn				; exit
  6104                                  
  6105                                  ;============================================================================
  6106                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6107                                  ;============================================================================
  6108                                  ; 29/04/2019 - Retro DOS v4.0
  6109                                  
  6110                                  ;include dossym.inc
  6111                                  ;include dosmac.inc
  6112                                  ;include doscntry.inc
  6113                                  
  6114                                  ; DOSCODE Segment
  6115                                  
  6116                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6117                                  ; ---------------------------------------------------------------------------
  6118                                  ;include divmes.inc
  6119                                  
  6120                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6121                                  ; -------------------------------------
  6122                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6123                                  
  6124                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6125                                  	;PUBLIC	DIVMES
  6126                                  
  6127 000009F1 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6127 000009FA 6F766572666C6F770D-
  6127 00000A03 0A                 
  6128                                  
  6129                                  	;PUBLIC	DivMesLen
  6130                                  DivMesLen:
  6131 00000A04 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6132                                  
  6133                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6134                                  ; -------------------------------------
  6135                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6136                                  
  6137                                  ; (MSDOS 6.0)
  6138                                  ; VxD not found error message
  6139                                  
  6140                                  NoVxDErrMsg:
  6141 00000A06 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6141 00000A0F 686176652074686520-
  6141 00000A18 66696C652057494E41-
  6141 00000A21 32302E33383620696E-
  6141 00000A2A 2074686520726F6F74-
  6141 00000A33 206F6620796F757220-
  6141 00000A3C 626F6F742064726976-
  6141 00000A45 65                 
  6142 00000A46 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6142 00000A4F 57696E646F77732069-
  6142 00000A58 6E20456E68616E6365-
  6142 00000A61 64204D6F64650D0A   
  6143                                  
  6144                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6145                                  
  6146                                  ; 13/05/2019 - Retro DOS v4.0
  6147                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6148                                  
  6149                                  ;include yesno.asm  (MNSDOS 6.0)
  6150                                  ; -------------------------------------
  6151                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6152                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6153                                  
  6154                                  ; This is for country Yes and No
  6155                                  
  6156 00000A69 59                      NLS_YES:	db 'Y'
  6157 00000A6A 4E                      NLS_NO:		db 'N'
  6158 00000A6B 79                      NLS_yes2:	db 'y'
  6159 00000A6C 6E                      NLS_no2:	db 'n'
  6160                                  
  6161                                  ; ---------------------------------------------------------------------------
  6162                                  
  6163                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6164                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6165                                  
  6166                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6167                                  
  6168                                  ; The following two tables implement the current buffered input editing
  6169                                  ; routines. The tables are pairwise associated in reverse order for ease
  6170                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6171                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6172                                  
  6173                                  	;PUBLIC	CANCHAR
  6174                                  CANCHAR:
  6175 00000A6D 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6176                                  	
  6177                                  	;PUBLIC	ESCCHAR
  6178                                  ESCCHAR:
  6179 00000A6E 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6180                                  	
  6181                                  	;IF	NOT Rainbow
  6182                                  
  6183                                  ESCTAB:	; LABEL BYTE
  6184                                  
  6185                                  	;IF	IBM
  6186 00000A6F 40                      	DB	64		; Ctrl-Z - F6
  6187 00000A70 4D                      	DB	77		; Copy one char - -->
  6188 00000A71 3B                      	DB	59		; Copy one char - F1
  6189 00000A72 53                      	DB	83		; Skip one char - DEL
  6190 00000A73 3C                      	DB	60		; Copy to char - F2
  6191 00000A74 3E                      	DB	62		; Skip to char - F4
  6192 00000A75 3D                      	DB	61		; Copy line - F3
  6193 00000A76 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6194 00000A77 3F                      	DB	63		; Reedit line (new template) - F5
  6195 00000A78 4B                      	DB	75		; Backspace - <--
  6196 00000A79 52                      	DB	82		; Enter insert mode - INS (toggle)
  6197 00000A7A 52                      	DB	82		; Exit insert mode - INS (toggle)
  6198 00000A7B 41                      	DB	65		; Escape character - F7
  6199 00000A7C 41                      	DB	65		; End of table
  6200                                  	;ENDIF
  6201                                  
  6202                                  ESCEND: ; LABEL BYTE
  6203                                  
  6204                                  ESCTABLEN EQU ESCEND-ESCTAB
  6205                                  
  6206                                  ESCFUNC: ; LABEL WORD
  6207                                  	
  6208 00000A7D [9014]                  	short_addr  GETCH	; Ignore the escape sequence
  6209 00000A7F [8015]                  	short_addr  TWOESC
  6210 00000A81 [0816]                  	short_addr  EXITINS
  6211 00000A83 [0816]                  	short_addr  ENTERINS
  6212 00000A85 [0A15]                  	short_addr  BACKSP
  6213 00000A87 [F415]                  	short_addr  REEDIT
  6214 00000A89 [F714]                  	short_addr  KILNEW
  6215 00000A8B [8715]                  	short_addr  COPYLIN
  6216 00000A8D [BA15]                  	short_addr  SKIPSTR
  6217 00000A8F [8D15]                  	short_addr  COPYSTR
  6218 00000A91 [B015]                  	short_addr  SKIPONE
  6219 00000A93 [9215]                  	short_addr  COPYONE
  6220 00000A95 [9215]                  	short_addr  COPYONE
  6221 00000A97 [1016]                  	short_addr  CTRLZ
  6222                                  
  6223                                  	;ENDIF
  6224                                  
  6225                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6226                                  ; ---------------------------------------------------------------------------
  6227                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6228                                  
  6229                                  ; OEMFunction key is expected to process a single function
  6230                                  ;   key input from a device and dispatch to the proper
  6231                                  ;   routines leaving all registers UNTOUCHED.
  6232                                  ;
  6233                                  ; Inputs:   CS, SS are DOSGROUP
  6234                                  ; Outputs:  None. This function is expected to JMP to onw of
  6235                                  ;           the following labels:
  6236                                  ;
  6237                                  ;           GetCh       - ignore the sequence
  6238                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6239                                  ;           ExitIns     - toggle insert mode
  6240                                  ;           EnterIns    - toggle insert mode
  6241                                  ;           BackSp      - move backwards one space
  6242                                  ;           ReEdit      - reedit the line with a new template
  6243                                  ;           KilNew      - discard the current line and start from scratch
  6244                                  ;           CopyLin     - copy the rest of the template into the line
  6245                                  ;           SkipStr     - read the next character and skip to it in the template
  6246                                  ;           CopyStr     - read next char and copy from template to line until char
  6247                                  ;           SkipOne     - advance position in template one character
  6248                                  ;           CopyOne     - copy next character in template into line
  6249                                  ;           CtrlZ       - place a ^Z into the template
  6250                                  ; Registers that are allowed to be modified by this function are:
  6251                                  ;           AX, CX, BP
  6252                                  
  6253                                  ; 13/05/2019 - Retro DOS v4.0
  6254                                  ; -------------------------------------
  6255                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6256                                  
  6257                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6258                                  ; -------------------------------------
  6259                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6260                                  
  6261                                  OEMFunctionKey:
  6262 00000A99 E85309                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6263 00000A9C B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6264 00000A9E 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6265 00000A9F BF[6F0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6266 00000AA2 06                      	push	es
  6267 00000AA3 0E                      	push	cs
  6268 00000AA4 07                      	pop	es
  6269 00000AA5 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6270 00000AA7 07                      	pop	es
  6271 00000AA8 5F                      	POP     DI                      ; restore DI
  6272 00000AA9 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6273 00000AAB 89CD                    	MOV     BP,CX                   ; move to indexable register
  6274                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6275 00000AAD 2EFFA6[7D0A]            	JMP	word [CS:BP+ESCFUNC]
  6276                                  
  6277                                  ;DOSCODE ENDS
  6278                                  	
  6279                                  ;============================================================================
  6280                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6281                                  ;============================================================================
  6282                                  ; Retro DOS v3.0 - 18/07/2018
  6283                                  
  6284                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6285                                  ;----------------------------------------------------------------------------
  6286                                  ; Retro DOS v2.0 - 13/03/2018
  6287                                  
  6288                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6289                                  
  6290                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6291                                  
  6292                                  ;**	$GET_DATE - Get Current Date
  6293                                  ;----------------------------------------
  6294                                  ;	ENTRY	none
  6295                                  ;	EXIT	(cx:dx) = current date
  6296                                  ;	USES	all
  6297                                  
  6298                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6299                                  
  6300                                  _$GET_DATE:	;System call 42
  6301                                  
  6302 00000AB2 16                      	PUSH	SS
  6303 00000AB3 1F                      	POP	DS
  6304 00000AB4 E8B900                  	CALL	READTIME	;Check for rollover to next day
  6305 00000AB7 A1[5203]                	MOV	AX,[YEAR]
  6306                                  
  6307                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6308                                  
  6309 00000ABA 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6310 00000ABE E809FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6311                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6312 00000AC1 895C06                  	MOV	[SI+user_env.user_DX],BX
  6313 00000AC4 05BC07                  	ADD	AX,1980		;Put bias back
  6314                                  	;MOV	[SI+4],AX	;CX=year
  6315 00000AC7 894404                  	MOV	[SI+user_env.user_CX],AX
  6316 00000ACA 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6317                                  RET20:	; 05/11/2022
  6318                                  RET24:	; 18/12/2022
  6319 00000ACE C3                      	RETN
  6320                                  
  6321                                  ;**	$SET_DATE - Set Current Date
  6322                                  ;----------------------------------------
  6323                                  ;	ENTRY	(cx:dx) = current date
  6324                                  ;	EXIT	(al) = -1 iff bad date
  6325                                  ;		(al) = 0 if ok
  6326                                  ;	USES	all
  6327                                  
  6328                                  _$SET_DATE:	;System call 43
  6329                                  
  6330 00000ACF B0FF                    	MOV	AL,-1		;Be ready to flag error
  6331 00000AD1 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6332                                  	;JC	SHORT RET24	;Error if not big enough
  6333                                  	; 05/11/2022
  6334 00000AD5 72F7                    	jc	short RET20
  6335 00000AD7 83F977                  	CMP	CX,119		;Year must be less than 2100
  6336 00000ADA 77F2                    	JA	SHORT RET24
  6337 00000ADC 08F6                    	OR	DH,DH
  6338                                  	;JZ	SHORT RET24
  6339                                   	; 05/11/2022
  6340 00000ADE 74EE                    	jz	short RET20
  6341 00000AE0 08D2                    	OR	DL,DL
  6342                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6343                                  	; 05/11/2022
  6344 00000AE2 74EA                    	jz	short RET20
  6345 00000AE4 80FE0C                  	CMP	DH,12		;Check against max. month
  6346 00000AE7 77E5                    	JA	SHORT RET24
  6347 00000AE9 16                      	PUSH	SS
  6348 00000AEA 1F                      	POP	DS
  6349                                  	;CALL	DODATE
  6350                                  	; 18/12/2022
  6351 00000AEB E91801                  	jmp	DODATE
  6352                                  ;RET24:  
  6353                                  	;RETN
  6354                                  
  6355                                  ;**	$GET_TIME - Get Current Time
  6356                                  ;----------------------------------------
  6357                                  ;	ENTRY	none
  6358                                  ;	EXIT	(cx:dx) = current time
  6359                                  ;	USES	all
  6360                                  
  6361                                  _$GET_TIME:			;System call 44
  6362                                  
  6363 00000AEE 16                      	PUSH	SS
  6364 00000AEF 1F                      	POP	DS
  6365 00000AF0 E87D00                  	CALL	READTIME
  6366 00000AF3 E8D4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6367                                  	;MOV	[SI+6],DX
  6368 00000AF6 895406                  	MOV	[SI+user_env.user_DX],DX
  6369                                  	;MOV	[SI+4],CX
  6370 00000AF9 894C04                  	MOV	[SI+user_env.user_CX],CX
  6371 00000AFC 30C0                    	XOR	AL,AL
  6372                                  RET26:  
  6373 00000AFE C3                      	RETN
  6374                                  
  6375                                  ;**	$SET_TIME - Set Current Time
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	(cx:dx) = time
  6378                                  ;	EXIT	(al) = 0 if 0k
  6379                                  ;		(al) = -1 if invalid
  6380                                  ;	USES	ALL
  6381                                  
  6382                                  _$SET_TIME:			;System call 45
  6383                                  
  6384 00000AFF B0FF                    	MOV	AL,-1		;Flag in case of error
  6385 00000B01 80FD18                  	CMP	CH,24		;Check hours
  6386 00000B04 73F8                    	JAE	SHORT RET26
  6387 00000B06 80F93C                  	CMP	CL,60		;Check minutes
  6388 00000B09 73F3                    	JAE	SHORT RET26
  6389 00000B0B 80FE3C                  	CMP	DH,60		;Check seconds
  6390 00000B0E 73EE                    	JAE	SHORT RET26
  6391 00000B10 80FA64                  	CMP	DL,100		;Check 1/100's
  6392 00000B13 73E9                    	JAE	SHORT RET26
  6393 00000B15 51                      	PUSH	CX
  6394 00000B16 52                      	PUSH	DX
  6395 00000B17 16                      	PUSH	SS
  6396 00000B18 1F                      	POP	DS
  6397 00000B19 BB[B603]                	MOV	BX,TIMEBUF
  6398 00000B1C B90600                  	MOV	CX,6
  6399 00000B1F 31D2                    	XOR	DX,DX
  6400 00000B21 89D0                    	MOV	AX,DX
  6401 00000B23 53                      	PUSH	BX
  6402 00000B24 E8A93C                  	CALL	SETREAD
  6403 00000B27 1E                      	PUSH	DS
  6404 00000B28 C536[2E00]              	LDS	SI,[BCLOCK]
  6405 00000B2C E82B3C                  	CALL	DEVIOCALL2	;Get correct day count
  6406 00000B2F 1F                      	POP	DS
  6407 00000B30 5B                      	POP	BX
  6408 00000B31 E8CF3C                  	CALL	SETWRITE
  6409 00000B34 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6410 00000B38 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6411 00000B3C C536[2E00]              	LDS	SI,[BCLOCK]
  6412 00000B40 E8173C                  	CALL	DEVIOCALL2	;Set the time
  6413 00000B43 30C0                    	XOR	AL,AL
  6414 00000B45 C3                      	RETN
  6415                                  
  6416                                  ; 11/07/2018 - Retro DOS v3.0
  6417                                  ; Retro DOS v2.0 - 14/03/2018
  6418                                  
  6419                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6420                                  
  6421                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6422                                  ;----------------------------------------------------------
  6423                                  ; Date16 returns the current date in AX, current time in DX
  6424                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6425                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6426                                  
  6427                                  DATE16:
  6428                                  	
  6429                                  ;M048	Context DS
  6430                                  ;
  6431                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6432                                  ; is DOSDATA
  6433                                  
  6434                                  	;push	ss
  6435                                  	;pop	ds
  6436                                  
  6437                                  	;getdseg <ds>		; M048
  6438                                  
  6439                                  	; 13/05/2019 - Retro DOS v4.0
  6440 00000B46 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6441                                  
  6442 00000B4B 51                      	PUSH	CX
  6443 00000B4C 06                      	PUSH	ES
  6444 00000B4D E82000                  	CALL	READTIME
  6445 00000B50 07                      	POP	ES
  6446 00000B51 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6447 00000B53 D0E1                    	SHL	CL,1
  6448 00000B55 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6449 00000B57 D1E1                    	SHL	CX,1
  6450 00000B59 D1E1                    	SHL	CX,1
  6451 00000B5B D0EE                    	SHR	DH,1		;Count every two seconds
  6452 00000B5D 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6453 00000B5F 89CA                    	MOV	DX,CX
  6454                                  
  6455                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6456                                  
  6457 00000B61 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6458 00000B64 B104                    	MOV	CL,4
  6459 00000B66 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6460 00000B68 D1E0                    	SHL	AX,1
  6461 00000B6A 59                      	POP	CX
  6462 00000B6B 0A06[5003]              	OR	AL,[DAY]
  6463                                  RET21:
  6464 00000B6F C3                      	RETN
  6465                                  
  6466                                  ;----------------------------------------------------------
  6467                                  
  6468                                  READTIME:
  6469                                  
  6470                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6471                                  ;Uses AX, CX, DX.
  6472                                  
  6473 00000B70 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6474 00000B76 56                      	PUSH	SI
  6475 00000B77 53                      	PUSH	BX
  6476                                  
  6477 00000B78 BB[B603]                	MOV	BX,TIMEBUF
  6478                                  
  6479 00000B7B B90600                  	MOV	CX,6
  6480 00000B7E 31D2                    	XOR	DX,DX
  6481 00000B80 89D0                    	MOV	AX,DX
  6482 00000B82 E84B3C                  	CALL	SETREAD
  6483 00000B85 1E                      	PUSH	DS
  6484 00000B86 C536[2E00]              	LDS	SI,[BCLOCK]
  6485 00000B8A E8CD3B                  	CALL	DEVIOCALL2	;Get correct date and time
  6486 00000B8D 1F                      	POP	DS
  6487 00000B8E 5B                      	POP	BX
  6488 00000B8F 5E                      	POP	SI
  6489 00000B90 A1[B603]                	MOV	AX,[TIMEBUF]
  6490 00000B93 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6491 00000B97 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6492 00000B9B 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6493                                  	;JZ	SHORT RET22
  6494 00000B9F 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6495                                  	;cmp	ax,43830
  6496 00000BA1 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6497 00000BA4 733D                    	JAE	SHORT RET22	;Ignore if too large
  6498 00000BA6 A3[5403]                	MOV	[DAYCNT],AX
  6499 00000BA9 56                      	PUSH	SI
  6500 00000BAA 51                      	PUSH	CX
  6501 00000BAB 52                      	PUSH	DX		;Save time
  6502 00000BAC 31D2                    	XOR	DX,DX
  6503                                  	;mov	cx,1461
  6504 00000BAE B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6505 00000BB1 F7F1                    	DIV	CX		;Compute number of 4-year units
  6506 00000BB3 D1E0                    	SHL	AX,1
  6507 00000BB5 D1E0                    	SHL	AX,1
  6508 00000BB7 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6509 00000BB9 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6510                                  
  6511 00000BBB BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6512                                  
  6513 00000BBE E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6514 00000BC1 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6515 00000BC3 7304                    	JNC	SHORT SK	;Extra half-year?
  6516 00000BC5 81C2C800                	ADD	DX,200
  6517                                  SK:
  6518 00000BC9 E82400                  	CALL	SETYEAR
  6519 00000BCC B101                    	MOV	CL,1		;At least at first month in year
  6520                                  
  6521 00000BCE BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6522                                  	
  6523 00000BD1 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6524 00000BD4 880E[5103]              	MOV	[MONTH],CL
  6525 00000BD8 42                      	INC	DX		;Remainder is day of month (start with one)
  6526 00000BD9 8816[5003]              	MOV	[DAY],DL
  6527 00000BDD E89700                  	CALL	WKDAY		;Set day of week
  6528 00000BE0 5A                      	POP	DX
  6529 00000BE1 59                      	POP	CX
  6530 00000BE2 5E                      	POP	SI
  6531                                  RET22:  
  6532 00000BE3 C3                      	RETN
  6533                                  
  6534                                  ;----------------------------------------------------------
  6535                                  
  6536                                  DSLIDE:
  6537 00000BE4 B400                    	MOV	AH,0
  6538                                  DSLIDE1:
  6539 00000BE6 AC                      	LODSB			;Get count of days
  6540 00000BE7 39C2                    	CMP	DX,AX		;See if it will fit
  6541                                  	;JB	SHORT RET23	;If not, done
  6542 00000BE9 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6543 00000BEB 29C2                    	SUB	DX,AX
  6544 00000BED 41                      	INC	CX		;Count one more month/year
  6545 00000BEE EBF6                    	JMP	SHORT DSLIDE1
  6546                                  
  6547                                  ;----------------------------------------------------------
  6548                                  
  6549                                  SETYEAR:
  6550                                  
  6551                                  ;Set year with value in CX. Adjust length of February for this year.
  6552                                  
  6553                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6554                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6555                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6556                                  ;	preserve DS as CHKYR is also called as a routine.
  6557                                  
  6558                                  	; MSDOS 6.0 (18/07/2018) ; *
  6559                                  
  6560                                  	;GETDSEG DS
  6561                                  
  6562                                  	;PUSH	CS  ; *
  6563                                  	;POP	DS  ; *
  6564                                  
  6565                                  	; 13/05/2019 - Retro DOS v4.0
  6566 00000BF0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6567                                  
  6568                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6569                                  	; 05/11/2022 
  6570                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6571                                  
  6572 00000BF5 880E[5203]              	MOV	[YEAR],CL
  6573                                  CHKYR:
  6574 00000BF9 F6C103                  	TEST	CL,3		;Check for leap year
  6575 00000BFC B01C                    	MOV	AL,28
  6576 00000BFE 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6577 00000C00 FEC0                    	INC	AL		;Add leap day
  6578                                  SAVFEB:
  6579 00000C02 A2[1D0D]                	mov	[february],al
  6580                                  	;MOV	[MONTAB+1],AL	;Store for February
  6581                                  RET23:  
  6582 00000C05 C3                      	RETN
  6583                                  
  6584                                  ;----------------------------------------------------------
  6585                                  
  6586                                  DODATE:
  6587 00000C06 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6588 00000C09 88F0                    	MOV	AL,DH
  6589                                  
  6590 00000C0B BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6591                                  
  6592 00000C0E D7                      	XLAT			;Look up days in month
  6593 00000C0F 38D0                    	CMP	AL,DL
  6594 00000C11 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6595                                  	;JB	SHORT RET25	;Error if too many days
  6596 00000C13 72F0                    	jb	short RET23 ; 18/07/2018
  6597 00000C15 E8D8FF                  	CALL	SETYEAR
  6598                                  ;
  6599                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6600                                  ;
  6601 00000C18 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6602 00000C1C D1E9                    	SHR	CX,1
  6603 00000C1E D1E9                    	SHR	CX,1
  6604                                  	;mov	ax,1461
  6605 00000C20 B8B505                  	MOV	AX,FOURYEARS
  6606 00000C23 89D3                    	MOV	BX,DX
  6607 00000C25 F7E1                    	MUL	CX
  6608 00000C27 8A0E[5203]              	MOV	CL,[YEAR]
  6609 00000C2B 80E103                  	AND	CL,3
  6610                                  
  6611 00000C2E BE[140D]                	MOV	SI,YRTAB
  6612                                  
  6613 00000C31 89C2                    	MOV	DX,AX
  6614 00000C33 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6615 00000C35 E85200                  	CALL	DSUM		;Add up the days in each year
  6616 00000C38 88F9                    	MOV	CL,BH		;Month of year
  6617                                  
  6618 00000C3A BE[1C0D]                	MOV	SI,MONTAB
  6619                                  
  6620 00000C3D 49                      	DEC	CX		;Account for months starting with one
  6621 00000C3E E84900                  	CALL	DSUM		;Add up days in each month
  6622 00000C41 88D9                    	MOV	CL,BL		;Day of month
  6623 00000C43 49                      	DEC	CX		;Account for days starting with one
  6624 00000C44 01CA                    	ADD	DX,CX		;Add in to day total
  6625 00000C46 92                      	XCHG	AX,DX		;Get day count in AX
  6626 00000C47 A3[5403]                	MOV	[DAYCNT],AX
  6627 00000C4A 56                      	PUSH	SI
  6628 00000C4B 53                      	PUSH	BX
  6629 00000C4C 50                      	PUSH	AX
  6630                                  
  6631 00000C4D BB[B603]                	MOV	BX,TIMEBUF
  6632                                  
  6633 00000C50 B90600                  	MOV	CX,6
  6634 00000C53 31D2                    	XOR	DX,DX
  6635 00000C55 89D0                    	MOV	AX,DX
  6636 00000C57 53                      	PUSH	BX
  6637 00000C58 E8753B                  	CALL	SETREAD
  6638                                  
  6639 00000C5B 1E                      	PUSH	DS
  6640 00000C5C C536[2E00]              	LDS	SI,[BCLOCK]
  6641 00000C60 E8F73A                  	CALL	DEVIOCALL2	;Get correct date and time
  6642 00000C63 1F                      	POP	DS
  6643 00000C64 5B                      	POP	BX
  6644 00000C65 E89B3B                  	CALL	SETWRITE
  6645 00000C68 8F06[B603]              	POP	WORD [TIMEBUF]
  6646 00000C6C 1E                      	PUSH	DS
  6647 00000C6D C536[2E00]              	LDS	SI,[BCLOCK]
  6648 00000C71 E8E63A                  	CALL	DEVIOCALL2	;Set the date
  6649 00000C74 1F                      	POP	DS
  6650 00000C75 5B                      	POP	BX
  6651 00000C76 5E                      	POP	SI
  6652                                  WKDAY:
  6653 00000C77 A1[5403]                	MOV	AX,[DAYCNT]
  6654 00000C7A 31D2                    	XOR	DX,DX
  6655 00000C7C B90700                  	MOV	CX,7
  6656 00000C7F 40                      	INC	AX
  6657 00000C80 40                      	INC	AX		;First day was Tuesday
  6658 00000C81 F7F1                    	DIV	CX		;Compute day of week
  6659 00000C83 8816[5603]              	MOV	[WEEKDAY],DL
  6660 00000C87 30C0                    	XOR	AL,AL		;Flag OK
  6661                                  RET25:
  6662 00000C89 C3                      	RETN
  6663                                  
  6664                                  ;----------------------------------------------------------
  6665                                  
  6666                                  ;**	DSUM - Compute the sum of a string of bytes
  6667                                  ;
  6668                                  ;	ENTRY	(cx) = byte count
  6669                                  ;		(ds:si) = byte address
  6670                                  ;		(dx) = sum register, initialized by caller
  6671                                  ;	EXIT	(dx) updated
  6672                                  ;	USES	ax, cx, dx, si, flags
  6673                                  
  6674                                  DSUM:
  6675 00000C8A B400                    	MOV	AH,0
  6676 00000C8C E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6677                                  	;JCXZ	RET25 ; 18/07/2018
  6678                                  DSUM1:
  6679 00000C8E AC                      	LODSB
  6680 00000C8F 01C2                    	ADD	DX,AX
  6681 00000C91 E2FB                    	LOOP	DSUM1
  6682                                  DSUM9:
  6683 00000C93 C3                      	RETN
  6684                                  
  6685                                  ;============================================================================
  6686                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6687                                  ;============================================================================
  6688                                  ; 29/04/2019 - Retro DOS v4.0
  6689                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6690                                  
  6691                                  ; 12/03/2018 - Retro DOS v2.0 
  6692                                  
  6693                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6694                                  ;NAME	GETSET
  6695                                  
  6696                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6697                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6698                                  
  6699                                  ;USERNUM:
  6700                                  ;	DW	0			; 24 bit user number
  6701                                  ;       DB      0
  6702                                  ;;	IF      IBM
  6703                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6704                                  ;;	ELSE
  6705                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6706                                  ;;	ENDIF
  6707                                  
  6708                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6709                                  ;; 08/07/2018 - Retro DOS v3.0
  6710                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6711                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6712                                  
  6713                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6714                                  ;----------------------------------------------------------------------------
  6715                                  
  6716                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6717                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6718                                  
  6719                                  _$GET_VERSION:
  6720                                  
  6721                                  ; Inputs:
  6722                                  ;       None
  6723                                  ; Function:
  6724                                  ;       Return MS-DOS version number
  6725                                  ; Outputs:
  6726                                  ;       OEM number in BH
  6727                                  ;       User number in BL:CX (24 bits)
  6728                                  ;       Version number as AL.AH in binary
  6729                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6730                                  
  6731                                  ; MSDOS 6.0
  6732                                  ;
  6733                                  ;	Fake_Count is used to lie about the version numbers to support
  6734                                  ;	old binarys. See ms_table.asm for more info.
  6735                                  ;
  6736                                  ;		if input al = 00
  6737                                  ;		  (bh) = OEM number			
  6738                                  ;		else if input al = 01
  6739                                  ;		  (bh) = version flags
  6740                                  ;		 
  6741                                  ;		       	 bits 0-2 = DOS internal revision
  6742                                  ;		       	 bits 3-7 = DOS type flags
  6743                                  ;		              bit 3    = DOS is in ROM
  6744                                  ;		              bit 4    = DOS in in HMA
  6745                                  ;		              bits 5-7 = reserved
  6746                                  ;               M007 change - only bit 3 is now valid. Other bits
  6747                                  ;               are 0 when AL = 1
  6748                                  
  6749                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6750                                  	;--------------------------------------
  6751                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6752                                  
  6753 00000C94 16                              PUSH    SS
  6754 00000C95 1F                              POP     DS
  6755 00000C96 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6756 00000C9A 8B0E[B203]                      MOV     CX,[USERNUM]
  6757                                  
  6758                                  	; 13/05/2019 - Retro DOS v4.0
  6759                                  
  6760                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6761                                  	;DOS flags
  6762                                  
  6763 00000C9E 3C01                    	cmp	AL,1
  6764 00000CA0 7502                    	jne	short Norm_Vers
  6765                                  
  6766                                  ;ifdef ROMDOS
  6767                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6768                                  ;				(DOSINROM = 8)
  6769                                  ;else
  6770 00000CA2 30FF                            xor     bh,bh		; Otherwise return 0
  6771                                  ;endif				;M007 end
  6772                                  
  6773                                  Norm_Vers:
  6774                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6775                                  
  6776                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6777                                  	; 13/05/2019 - Retro DOS v4.0
  6778 00000CA4 1E                      	push	ds		; Get the version number from the
  6779 00000CA5 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6780                                  	;mov	ax,[40h]
  6781 00000CA9 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6782                                  	; 07/12/2022
  6783 00000CAC 1F                      	pop	ds
  6784 00000CAD E81AF8                  	call	Get_User_Stack
  6785                                  				; Put values for return registers
  6786                                  				; in the proper place on the user's	 
  6787                                  				; stack addressed by DS:SI
  6788                                          ;MOV	[SI+user_env.user_AX],AX
  6789 00000CB0 8904                            MOV	[SI],AX			 
  6790                                  	;MOV	[SI+2],BX		 
  6791 00000CB2 895C02                  	mov	[SI+user_env.user_BX],BX 
  6792                                          ;MOV	[SI+4],CX
  6793 00000CB5 894C04                  	mov	[SI+user_env.user_CX],CX
  6794                                  
  6795 00000CB8 C3                      	RETN
  6796                                  
  6797                                  ; 18/07/2018 - Retro DOS v3.0
  6798                                  
  6799                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6800                                  ;----------------------------------------------------------------------------
  6801                                  
  6802                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6803                                  ;
  6804                                  ;	ENTRY	none
  6805                                  ;	EXIT	(al) = value of VERIFY flag
  6806                                  ;	USES	all
  6807                                  
  6808                                  
  6809                                  _$GET_VERIFY_ON_WRITE:
  6810                                  
  6811                                  ;hkn; SS override
  6812 00000CB9 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6813 00000CBD C3                      	retn
  6814                                  
  6815                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6816                                  ;
  6817                                  ;	ENTRY	(al) = value of VERIFY flag
  6818                                  ;	EXIT	none
  6819                                  ;	USES	all
  6820                                  
  6821                                  _$SET_VERIFY_ON_WRITE:
  6822                                  
  6823 00000CBE 2401                    	AND	AL,1
  6824                                  ;hkn; SS override
  6825 00000CC0 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6826                                  RET27:	; 18/07/2018
  6827 00000CC4 C3                      	retn
  6828                                  
  6829                                  ; 19/07/2018 - Retro DOS v3.0
  6830                                  
  6831                                  ;BREAK <$International - return country-dependent information>
  6832                                  ;----------------------------------------------------------------------------
  6833                                  ;
  6834                                  ; Procedure Name : $INTERNATIONAL
  6835                                  ;
  6836                                  ; Inputs:
  6837                                  ;	MOV	AH,International
  6838                                  ;	MOV	AL,country	(al = 0 => current country)
  6839                                  ;      [MOV	BX,country]
  6840                                  ;	LDS	DX,block
  6841                                  ;	INT	21
  6842                                  ; Function:
  6843                                  ;	give users an idea of what country the application is running
  6844                                  ; Outputs:
  6845                                  ;	IF DX != -1 on input (get country)
  6846                                  ;	  AL = 0 means return current country table.
  6847                                  ;	  0<AL<0FFH means return country table for country AL
  6848                                  ;	  AL = 0FF means return country table for country BX
  6849                                  ;	  No Carry:
  6850                                  ;	     Register BX will contain the 16-bit country code.
  6851                                  ;	     Register AL will contain the low 8 bits of the country code.
  6852                                  ;	     The block pointed to by DS:DX is filled in with the information
  6853                                  ;	     for the particular country.
  6854                                  ;		BYTE  Size of this table excluding this byte and the next
  6855                                  ;		BYTE  Country code represented by this table
  6856                                  ;			A sequence of n bytes, where n is the number specified
  6857                                  ;			by the first byte above and is not > internat_block_max,
  6858                                  ;			in the correct order for being returned by the
  6859                                  ;			INTERNATIONAL call as follows:
  6860                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6861                                  ;		5 BYTE	Currency symbol null terminated
  6862                                  ;		2 BYTE	thousands separator null terminated
  6863                                  ;		2 BYTE	Decimal point null terminated
  6864                                  ;		2 BYTE	Date separator null terminated
  6865                                  ;		2 BYTE	Time separator null terminated
  6866                                  ;		1 BYTE	Bit field.  Currency format.
  6867                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6868                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6869                                  ;		1 BYTE	No. of significant decimal digits in currency
  6870                                  ;		1 BYTE	Bit field.  Time format.
  6871                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6872                                  ;		DWORD	Call address of case conversion routine
  6873                                  ;		2 BYTE	Data list separator null terminated.
  6874                                  ;	  Carry:
  6875                                  ;	     Register AX has the error code.
  6876                                  ;	IF DX = -1 on input (set current country)
  6877                                  ;	  AL = 0 is an error
  6878                                  ;	  0<AL<0FFH means set current country to country AL
  6879                                  ;	  AL = 0FF means set current country to country BX
  6880                                  ;	  No Carry:
  6881                                  ;	    Current country SET
  6882                                  ;	    Register AL will contain the low 8 bits of the country code.
  6883                                  ;	  Carry:
  6884                                  ;	     Register AX has the error code.
  6885                                  ;-----------------------------------------------------------------------------
  6886                                  
  6887                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6888                                  
  6889                                  ; 13/05/2019 - Retro DOS v4.0
  6890                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6891                                  
  6892                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6893                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6894                                  
  6895                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6896                                  	 
  6897 00000CC5 3CFF                    	CMP	AL,0FFH
  6898 00000CC7 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6899 00000CC9 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6900 00000CCB 30FF                    	XOR	BH,BH
  6901                                  BX_HAS_CODE:
  6902 00000CCD 1E                      	PUSH	DS
  6903 00000CCE 07                      	POP	ES
  6904 00000CCF 52                      	PUSH	DX
  6905 00000CD0 5F                      	POP	DI			; User buffer to ES:DI
  6906                                  
  6907                                  ;hkn; SS is DOSDATA
  6908                                  ;	context DS
  6909                                  
  6910 00000CD1 16                      	push	ss
  6911 00000CD2 1F                      	pop	ds
  6912                                  
  6913 00000CD3 83FFFF                  	CMP	DI,-1
  6914 00000CD6 7465                    	JZ	short international_set
  6915 00000CD8 09DB                    	OR	BX,BX
  6916 00000CDA 7505                    	JNZ	short international_find
  6917                                  
  6918                                  ;hkn; country_cdpg is in DOSDATA segment.
  6919 00000CDC BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6920                                  
  6921 00000CDF EB41                    	JMP	SHORT international_copy
  6922                                  
  6923                                  international_find:
  6924 00000CE1 BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6925 00000CE4 E80B00                  	CALL	international_get
  6926 00000CE7 725C                    	JC	short errtn
  6927 00000CE9 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6928 00000CEC 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6929 00000CEE 89D3                    	MOV	BX,DX			 ; put country back
  6930 00000CF0 EB40                    	JMP	SHORT international_ok3
  6931                                  
  6932                                  international_get:
  6933 00000CF2 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  6934                                  
  6935                                  ;hkn; country_cdpg is in DOSDATA segment.
  6936                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6937                                  
  6938                                  	; MSDOS 3.3
  6939                                  	;;cmp	bx,[SI+63h]
  6940                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6941                                  	;jz	short RET27
  6942                                  
  6943                                  	; 13/05/2019 - Retro DOS v4.0
  6944                                  
  6945                                  	; MSDOS 6.0
  6946                                  	;cmp	bx,[ss:si+68h]
  6947 00000CF5 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6948 00000CF9 74C9                    	jz	short RET27			; return if equal
  6949                                  
  6950 00000CFB 89DA                    	MOV	DX,BX
  6951 00000CFD 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6952                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6953 00000CFF B80014                  	mov	ax,1400h
  6954 00000D02 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6955                                  			; Return: AL = 00h not installed, OK to install
  6956                                  			; 01h not installed, not OK
  6957                                  			; FFh installed
  6958 00000D04 3CFF                    	CMP	AL,0FFH
  6959 00000D06 7516                    	JNZ	short interr		; not in memory
  6960                                  	;cmp	bp,0
  6961 00000D08 09ED                    	or	bp,bp			; GetCntry ?
  6962 00000D0A 7507                    	JNZ	short stcdpg
  6963                                  	
  6964                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6965 00000D0C B80414                  	mov     ax,1404h
  6966 00000D0F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6967                                  			; BX = code page, DX = country code,
  6968                                  			; DS:SI -> internal code page structure
  6969                                  			; ES:DI -> user buffer
  6970                                  			; Return: AL = status
  6971                                  
  6972 00000D11 EB05                    	JMP	short chkok
  6973                                  	
  6974                                  	;nop
  6975                                  
  6976                                  stcdpg:
  6977                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6978 00000D13 B80314                  	mov     ax,1403h
  6979 00000D16 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6980                                  			; DS:SI -> internal code page structure
  6981                                  			; BX = code page, DX = country code
  6982                                  			; Return: AL = status
  6983                                  chkok:
  6984 00000D18 08C0                    	or	al,al			; success ?
  6985                                  	;retz				; yes
  6986 00000D1A 74A8                    	jz	short RET27
  6987                                  
  6988                                  setcarry:
  6989 00000D1C F9                      	STC				; set carry
  6990 00000D1D C3                      	retn
  6991                                  interr:
  6992 00000D1E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6993 00000D20 EBFA                    	JMP	short setcarry
  6994                                  
  6995                                  international_copy:
  6996                                  
  6997                                  ;hkn; country_cdpg is in DOSDATA segment.
  6998                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6999                                  
  7000                                  	; MSDOS 3.3
  7001                                  	;;mov	bx,[SI+63h]
  7002                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7003                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7004                                  
  7005                                  	; 13/05/2019 - Retro DOS v4.0
  7006                                  
  7007                                  	; MSDOS 6.0
  7008                                  	;mov	bx,[ss:si+68h]
  7009 00000D22 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7010 00000D26 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7011                                  
  7012                                  	;mov	cx,24
  7013 00000D29 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7014                                  
  7015                                  	; MSDOS 6.0
  7016                                  
  7017                                  ;hkn;	must set up DS to SS so that international info can be copied
  7018                                  	
  7019 00000D2C 1E                      	push	ds
  7020                                  
  7021 00000D2D 16                      	push	ss			; cs -> ss
  7022 00000D2E 1F                      	pop	ds
  7023                                  
  7024 00000D2F F3A4                    	REP	MOVSB			; copy country info
  7025                                  
  7026                                  	; MSDOS 6.0
  7027                                  
  7028 00000D31 1F                      	pop	ds	;hkn;	restore ds
  7029                                  
  7030                                  international_ok3:
  7031 00000D32 E895F7                  	call	Get_User_Stack
  7032                                  ;ASSUME	DS:NOTHING
  7033                                  	;MOV	[SI+2],BX
  7034 00000D35 895C02                  	MOV	[SI+user_env.user_BX],BX
  7035                                  international_ok:
  7036 00000D38 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7037                                  ;SYS_RET_OK_jmp:
  7038                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7039                                  nono:	; 15/12/2022
  7040                                  SYS_RET_OK_jmp:
  7041 00000D3A E947F9                  	jmp	SYS_RET_OK
  7042                                  
  7043                                  international_set:
  7044                                  
  7045                                  ;hkn; ASSUME	DS:DOSGROUP
  7046                                  ;ASSUME	DS:DOSDATA
  7047                                  
  7048 00000D3D BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7049 00000D40 E8AFFF                  	CALL	international_get
  7050 00000D43 73F3                    	JNC	short international_ok
  7051                                  errtn:
  7052 00000D45 3CFF                    	CMP	AL,0FFH
  7053 00000D47 7403                    	JZ	short errtn2
  7054                                  errtn1:
  7055 00000D49 E941F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7056                                  errtn2:
  7057                                  	;error	error_invalid_function	; NLSFUNC not existent
  7058                                  
  7059                                  	;mov	al,1
  7060 00000D4C B001                    	mov	al,error_invalid_function 
  7061 00000D4E EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7062                                  ;errtn3:
  7063                                  ;	jmp	SYS_RET_ERR
  7064                                  
  7065                                  ;EndProc $INTERNATIONAL
  7066                                  
  7067                                  ; 19/07/2018
  7068                                  
  7069                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7070                                  
  7071                                  ;----------------------------------------------------------------------------
  7072                                  ;
  7073                                  ; Procedure Name : $GetExtCntry
  7074                                  ;
  7075                                  ; Inputs:
  7076                                  ;	if AL >= 20H
  7077                                  ;	  AL= 20H    capitalize single char, DL= char
  7078                                  ;	      21H    capitalize string, CX= string length
  7079                                  ;	      22H    capitalize ASCIIZ string
  7080                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7081                                  ;	      80H bit 0 = use normal upper case table
  7082                                  ;		      1 = use file upper case table
  7083                                  ;	   DS:DX points to string
  7084                                  ;
  7085                                  ;	else
  7086                                  ;
  7087                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7088                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7089                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7090                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7091                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7092                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7093                                  ;	INT	21
  7094                                  ; Function:
  7095                                  ;	give users extended country dependent information
  7096                                  ;	or capitalize chars
  7097                                  ; Outputs:
  7098                                  ;	  No Carry:
  7099                                  ;	     extended country info is succesfully returned
  7100                                  ;	  Carry:
  7101                                  ;	     Register AX has the error code.
  7102                                  ;	     AX=0, NO	 for YES/NO CHECK
  7103                                  ;		1, YES
  7104                                  ;----------------------------------------------------------------------------
  7105                                  
  7106                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7107                                  
  7108                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7109                                  
  7110                                  	; MSDOS 6.0
  7111                                  _$GetExtCntry:
  7112 00000D50 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7113 00000D52 7269                    	JB	short notcap
  7114                                  capcap: 				;
  7115 00000D54 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7116 00000D56 7505                    	JNZ	short fileupper		; file upper case
  7117                                  
  7118                                  ;hkn; UCASE_TAB in DOSDATA
  7119 00000D58 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7120 00000D5B EB03                    	JMP	SHORT capit
  7121                                  
  7122                                  fileupper:
  7123                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7124 00000D5D BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7125                                  capit:					;
  7126 00000D60 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7127 00000D62 750D                    	JNZ	short chkyes		; no
  7128 00000D64 88D0                    	MOV	AL,DL			; set up AL
  7129 00000D66 E81544                  	call	GETLET3 		; upper case it
  7130 00000D69 E85EF7                  	call	Get_User_Stack		; get user stack
  7131                                  	;mov	[si+6],al
  7132 00000D6C 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7133 00000D6F EBC9                    	JMP	SHORT nono		; done
  7134                                  chkyes: 				;
  7135 00000D71 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7136 00000D73 7522                    	JNZ	short capstring		; no
  7137                                  
  7138 00000D75 31C0                    	XOR	AX,AX			; presume NO
  7139                                  		      
  7140                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7141                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7142                                  
  7143                                  	; 06/08/2018 - Retro DOS v3.0
  7144                                  	; 13/05/2019 - Retro DOS v4.0
  7145                                  	;cmp	dl,'Y'
  7146 00000D77 2E3A16[690A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7147 00000D7C 7416                    	JZ	short yesyes		; yes
  7148                                  	;cmp	dl,'y'
  7149 00000D7E 2E3A16[6B0A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7150 00000D83 740F                    	JZ	short yesyes		; yes
  7151                                  	;cmp	dl,'N'
  7152 00000D85 2E3A16[6A0A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7153 00000D8A 74AE                    	JZ	short nono		; no
  7154                                  	;cmp	dl,'n'
  7155 00000D8C 2E3A16[6C0A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7156 00000D91 74A7                    	JZ	short nono		; no
  7157                                  ;dbcs_char:				;
  7158 00000D93 40                      	INC	AX			; not YES or NO
  7159                                  yesyes: 				;
  7160 00000D94 40                      	INC	AX			; return 1
  7161                                  	; 15/12/2022
  7162                                  ;nono:	
  7163 00000D95 EBA3                    	jmp	short SYS_RET_OK_jmp	;
  7164                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7165                                  	;jmp	SYS_RET_OK		; done
  7166                                  
  7167                                  capstring:				;
  7168 00000D97 89D6                    	MOV	SI,DX			; si=dx
  7169 00000D99 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7170 00000D9B 750F                    	JNZ	short capascii		; no
  7171 00000D9D 09C9                    	OR	CX,CX			; check count 0
  7172 00000D9F 7499                    	JZ	short nono		; yes finished
  7173                                  concap: 				;
  7174 00000DA1 AC                      	LODSB				; get char
  7175 00000DA2 E8D943                  	call	GETLET3 		; upper case it
  7176 00000DA5 8844FF                  	MOV	byte [SI-1],AL		; store back
  7177                                  ;next99: 				;
  7178 00000DA8 E2F7                    	LOOP	concap			; continue
  7179 00000DAA EB8E                    	JMP	short nono		; done
  7180                                  capascii:				;
  7181 00000DAC 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7182 00000DAE 7545                    	JNZ	short capinval		; no
  7183                                  concap2:				;
  7184 00000DB0 AC                      	LODSB				; get char
  7185 00000DB1 08C0                    	or	al,al			; end of string ?
  7186 00000DB3 7485                    	JZ	short nono		; yes
  7187 00000DB5 E8C643                  	call	GETLET3 		; upper case it
  7188 00000DB8 8844FF                  	MOV	[SI-1],AL		; store back
  7189 00000DBB EBF3                    	JMP	short concap2 		; continue
  7190                                  
  7191                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7192                                  
  7193                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7194                                  ; _$GetExtCntry:
  7195                                  
  7196                                  notcap:
  7197 00000DBD 83F905                  	CMP	CX,5			; minimum size is 5
  7198 00000DC0 7279                    	jb	short sizeerror
  7199                                  
  7200                                  GEC_CONT:
  7201                                  ;hkn; SS is DOSDATA
  7202                                  	;context DS
  7203                                  
  7204 00000DC2 16                      	push	ss
  7205                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7206 00000DC3 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7207                                  	
  7208                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7209 00000DC4 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7210                                  
  7211 00000DC7 83FAFF                  	CMP	DX,-1			; active country ?
  7212 00000DCA 7503                    	JNZ	short GETCDPG 		; no
  7213                                  
  7214                                  ;hkn; use DS override to accesss country_cdpg fields
  7215                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7216                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7217 00000DCC 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7218                                  					; get active country id;smr;use DS
  7219                                  GETCDPG:
  7220 00000DCF 83FBFF                  	CMP	BX,-1			; active code page?
  7221 00000DD2 7503                    	JNZ	short CHKAGAIN		; no, check again
  7222                                  
  7223                                  ;hkn; use DS override to accesss country_cdpg fields
  7224                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7225                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7226 00000DD4 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7227                                  					; get active code page id;smr;Use DS
  7228                                  CHKAGAIN:
  7229                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7230 00000DD7 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7231                                  					; same as active country id?;smr;use DS
  7232 00000DDA 7552                    	JNZ	short CHKNLS		; no
  7233                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7234 00000DDC 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7235                                  					; same as active code pg id?;smr;use DS
  7236 00000DDF 754D                    	JNZ	short CHKNLS		; no
  7237                                  CHKTYPE:
  7238                                  	;mov	bx,[si+48h]
  7239 00000DE1 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7240                                  					; bx = sys code page id;smr;use DS
  7241 00000DE4 51                      	PUSH	CX			; save cx
  7242                                  	;mov	cx,[si+4Ah]
  7243 00000DE5 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7244                                  	;mov	si,COUNTRY_CDPG+76
  7245 00000DE8 BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7246                                  NXTENTRY:
  7247 00000DEB 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7248 00000DED 740B                    	JZ	short FOUNDIT
  7249 00000DEF 83C605                  	ADD	SI,5			; next entry
  7250 00000DF2 E2F7                    	LOOP	NXTENTRY
  7251 00000DF4 59                      	POP	CX
  7252                                  capinval:
  7253                                  	;error	error_invalid_function	; info type not found
  7254                                  	;mov	al,1
  7255 00000DF5 B001                    	mov	al,error_invalid_function
  7256                                  ;SYS_RET_ERR_jmp:
  7257                                  	;jmp	SYS_RET_ERR
  7258                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7259                                  SYS_RET_ERR_jmp:
  7260 00000DF7 E993F8                  	jmp	SYS_RET_ERR	
  7261                                  
  7262                                  FOUNDIT:
  7263 00000DFA A4                      	MOVSB				; move info id byte
  7264 00000DFB 59                      	POP	CX			; restore char count
  7265                                  	;cmp	al,1
  7266 00000DFC 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7267 00000DFE 7415                    	JZ	short setsize
  7268 00000E00 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7269 00000E03 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7270                                  OK_RETN:
  7271 00000E06 F3A4                    	REP	MOVSB			; copy info
  7272 00000E08 89C1                    	MOV	CX,AX			; CX = actual length returned
  7273 00000E0A 89D8                    	MOV	AX,BX			; return sys code page in ax
  7274                                  GETDONE:
  7275 00000E0C E8BBF6                  	call	Get_User_Stack		; return actual length to user's CX
  7276                                  	;mov	[si+4],cx 
  7277 00000E0F 894C04                  	MOV	[SI+user_env.user_CX],CX
  7278                                  	;jmp	SYS_RET_OK
  7279                                  	; 15/12/2022
  7280                                  	; 25/06/2019
  7281 00000E12 E972F8                  	jmp	SYS_RET_OK_clc
  7282                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7283                                  	; 15/12/2022
  7284                                  ;nono_jmp:
  7285                                  	;jmp	short nono
  7286                                  setsize:
  7287 00000E15 83E903                  	SUB	CX,3			; size after length field
  7288 00000E18 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7289 00000E1A 7302                    	JAE	short setsize2		; no
  7290 00000E1C 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7291                                  setsize2:
  7292 00000E1E 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7293 00000E21 83C702                  	ADD	DI,2			; update index
  7294 00000E24 83C602                  	ADD	SI,2
  7295 00000E27 89C8                    	MOV	AX,CX
  7296 00000E29 83C003                  	ADD	AX,3			; AX has the actual length
  7297 00000E2C EBD8                    	JMP	short OK_RETN 		; go move it
  7298                                  CHKNLS:
  7299 00000E2E 30E4                    	XOR	AH,AH
  7300 00000E30 50                      	PUSH	AX			; save info type
  7301 00000E31 5D                      	POP	BP			; bp = info type
  7302                                  	
  7303                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7304 00000E32 B80014                  	mov     ax,1400h
  7305 00000E35 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7306                                  			; Return: AL = 00h not installed, OK to install
  7307                                  			; 01h not installed, not OK
  7308                                  			; FFh installed
  7309 00000E37 3CFF                    	CMP	AL,0FFH
  7310 00000E39 7404                    	JZ	short NLSNXT		; in memory
  7311                                  
  7312                                  sizeerror:
  7313                                  	;error	error_invalid_function
  7314                                  	;mov	al,1
  7315 00000E3B B001                    	mov	al,error_invalid_function
  7316                                  	;jmp	SYS_RET_ERR
  7317                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7318                                  sys_ret_err_jmp2:
  7319 00000E3D EBB8                    	jmp	short SYS_RET_ERR_jmp
  7320                                  
  7321                                  NLSNXT: 
  7322                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7323 00000E3F B80214                  	mov     ax,1402h
  7324 00000E42 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7325                                  			; BP = subfunction, BX = code page
  7326                                  			; DX = country code, DS:SI -> internal code page structure
  7327                                  			; ES:DI -> user buffer, CX = size of user buffer
  7328                                  			; Return: AL = status
  7329                                  			; 00h successful
  7330                                  			; else DOS error code
  7331                                  
  7332 00000E44 3C00                    	CMP	AL,0			; success ?
  7333 00000E46 7505                    	JNZ	short NLSERROR
  7334                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7335 00000E48 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7336                                  			; ax = sys code page id;smr;use ds;
  7337                                  			;BUGBUG;check whether DS is OK after the above calls
  7338 00000E4B EBBF                    	JMP	short GETDONE
  7339                                  seterr:
  7340                                  	; 15/12/2022
  7341                                  NLSERROR:
  7342                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7343                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7344                                  	;jmp	short sys_ret_err_jmp2
  7345                                  	; 15/12/2022
  7346 00000E4D EBA8                    	jmp	short SYS_RET_ERR_jmp
  7347                                  
  7348                                  ;EndProc $GetExtCntry
  7349                                  
  7350                                  ; 13/05/2019 - Retro DOS v4.0
  7351                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7352                                  
  7353                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7354                                  ;----------------------------------------------------------------------------
  7355                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7356                                  ;
  7357                                  ;   System call format:
  7358                                  ;
  7359                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7360                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7361                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7362                                  ;	INT	21
  7363                                  ;
  7364                                  ;	ENTRY	(al) = n
  7365                                  ;		(bx) = code page
  7366                                  ;	EXIT	'C' clear
  7367                                  ;		  global code page is set	(set global code page)
  7368                                  ;		  (BX) = active code page id	(get global code page)
  7369                                  ;		  (DX) = system code page id	(get global code page)
  7370                                  ;		'C' set
  7371                                  ;		  (AX) = error code
  7372                                  
  7373                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7374                                  
  7375                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7376                                  	; DOSCODE:4BC9h
  7377                                  
  7378                                  _$GetSetCdPg:
  7379                                  
  7380                                  ;hkn; SS is DOSDATA
  7381                                  	;context DS
  7382                                  
  7383 00000E4F 16                      	push	ss
  7384 00000E50 1F                      	pop	ds
  7385                                  
  7386                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7387 00000E51 BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7388                                  
  7389 00000E54 3C01                    	CMP	AL,1		       ; get global code page
  7390 00000E56 7512                    	JNZ	short setglpg 	       ; set global code page
  7391                                  	
  7392                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7393                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7394 00000E58 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7395                                  					; get active code page id;smr;use ds
  7396                                  	;mov	dx,[si+48h]
  7397 00000E5B 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7398                                  				  	; get sys code page id;smr;use ds
  7399 00000E5E E869F6                  	call	Get_User_Stack
  7400                                  ;ASSUME DS:NOTHING
  7401                                  	;mov	[si+2],bx
  7402 00000E61 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7403                                  	;mov	[si+6],dx
  7404 00000E64 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7405                                  OK_RETURN:
  7406                                  	; 15/12/2022
  7407                                  	;transfer SYS_RET_OK
  7408 00000E67 E91AF8                  	jmp	SYS_RET_OK
  7409                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7410                                  	;jmp	short nono_jmp
  7411                                  
  7412                                  ;hkn; ASSUME DS:DOSGROUP
  7413                                  ;ASSUME	DS:DOSDATA
  7414                                  
  7415                                  setglpg:
  7416 00000E6A 3C02                    	CMP	AL,2
  7417 00000E6C 7531                    	JNZ	short nomem
  7418                                  	
  7419                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7420                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7421 00000E6E 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7422                                  	
  7423                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7424 00000E71 B80014                  	mov     ax,1400h
  7425 00000E74 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7426                                  			; Return: AL = 00h not installed, OK to install
  7427                                  			; 01h not installed, not OK
  7428                                  			; FFh installed
  7429 00000E76 3CFF                    	CMP	AL,0FFH
  7430 00000E78 7525                    	JNZ	short nomem		; not in memory
  7431                                  
  7432                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7433 00000E7A B80114                  	mov     ax,1401h
  7434 00000E7D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7435                                  			; DS:SI -> internal code page structure
  7436                                  			; BX = new code page, DX = country code???
  7437                                  			; Return: AL = status
  7438                                  			; 00h successful
  7439                                  			; else DOS error code
  7440                                  	;cmp	al,0
  7441 00000E7F 08C0                    	or	al,al			; success ?
  7442 00000E81 74E4                    	JZ	short OK_RETURN		; yes
  7443                                  
  7444 00000E83 3C41                    	CMP	AL,65			; set device code page failed
  7445 00000E85 75C6                    	JNZ	short seterr
  7446 00000E87 B84100                  	MOV	AX,65
  7447 00000E8A A3[2403]                	MOV	[EXTERR],AX
  7448                                  	;mov	byte [EXTERR_ACTION],6
  7449                                  	;mov	byte [EXTERR_CLASS],5
  7450                                  	;mov	byte [EXTERR_LOCUS],4
  7451 00000E8D C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7452 00000E92 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7453 00000E97 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7454                                  	;transfer From_GetSet
  7455 00000E9C E9F6F7                  	jmp	From_GetSet
  7456                                  
  7457                                  	; 15/12/2022
  7458                                  ;seterr:
  7459                                  	;;;transfer SYS_RET_ERR
  7460                                  	;;jmp	SYS_RET_ERR
  7461                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7462                                  	;jmp	short NLSERROR
  7463                                  
  7464                                  nomem:
  7465                                  	;error	error_invalid_function ; function not defined
  7466                                  	;mov	al,1
  7467 00000E9F B001                    	mov	al,error_invalid_function
  7468 00000EA1 EBAA                    	jmp	short seterr
  7469                                  
  7470                                  ;EndProc $GetSetCdPg
  7471                                  
  7472                                  ; 13/05/2019 - Retro DOS v4.0
  7473                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7474                                  
  7475                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7476                                  ;----------------------------------------------------------------------------
  7477                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7478                                  ;
  7479                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7480                                  ;		drive.
  7481                                  ;
  7482                                  ;	This call returns the same info in the same registers (except for the
  7483                                  ;	FAT pointer) as the old FAT pointer calls
  7484                                  ;
  7485                                  ;	ENTRY	DL = Drive number
  7486                                  ;	EXIT	AX = Sectors per allocation unit
  7487                                  ;		   = -1 if bad drive specified
  7488                                  ;		On User Stack
  7489                                  ;		    BX = Number of free allocation units
  7490                                  ;		    DX = Total Number of allocation units on disk
  7491                                  ;		    CX = Sector size
  7492                                  
  7493                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7494                                  
  7495                                  _$GET_DRIVE_FREESPACE:
  7496                                  
  7497                                  ;hkn; SS is DOSDATA
  7498                                  	;context DS
  7499 00000EA3 16                      	push	ss
  7500 00000EA4 1F                      	pop	ds
  7501                                  
  7502 00000EA5 88D0                    	MOV	AL,DL
  7503                                  	;invoke	GetThisDrv		; Get drive
  7504 00000EA7 E8165D                  	call	GETTHISDRV
  7505                                  SET_AX_RET:
  7506 00000EAA 7218                    	JC	short BADFDRV
  7507                                  	;invoke	DISK_INFO
  7508 00000EAC E8CF1E                  	call	DISK_INFO
  7509 00000EAF 87D3                    	XCHG	DX,BX
  7510                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7511                                  	; 06/01/2024
  7512 00000EB1 7211                    	jc	short BADFDRV
  7513 00000EB3 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7514                                  DoSt:
  7515 00000EB5 E812F6                  	call	Get_User_Stack
  7516                                  ;ASSUME	DS:NOTHING
  7517                                  	;mov	[si+6],dx
  7518                                  	;mov	[si+4],cx
  7519                                  	;mov	[si+2],bx
  7520 00000EB8 895406                  	MOV	[SI+user_env.user_DX],DX
  7521 00000EBB 894C04                  	MOV	[SI+user_env.user_CX],CX
  7522 00000EBE 895C02                  	MOV	[SI+user_env.user_BX],BX
  7523                                  	;MOV	[SI+user_env.user_AX],AX
  7524 00000EC1 8904                    	mov     [si],ax
  7525                                  	;return
  7526 00000EC3 C3                      	retn
  7527                                  
  7528                                  BADFDRV:
  7529                                  	; MSDOS 3.3
  7530                                  	;;mov	al,0Fh
  7531                                  	;mov	al,error_invalid_drive	; Assume error
  7532                                  
  7533                                  	; 13/05/2019 - Retro DOS v4.0
  7534                                  
  7535                                  	; MSDOS 6.0 & MSDOS 3.3
  7536                                  	;invoke	FCB_RET_ERR
  7537 00000EC4 E8DCF7                  	call	FCB_RET_ERR
  7538                                  	
  7539 00000EC7 B8FFFF                  	MOV	AX,-1
  7540 00000ECA EBE9                    	JMP	short DoSt
  7541                                  
  7542                                  ;EndProc $GET_DRIVE_FREESPACE
  7543                                  
  7544                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7545                                  ;----------------------------------------------------------------------------
  7546                                  ;**	$Get_DMA - Get Disk Transfer Address
  7547                                  ;
  7548                                  ;	ENTRY	none
  7549                                  ;	EXIT	ES:BX is current transfer address
  7550                                  ;	USES	all
  7551                                  
  7552                                  _$GET_DMA:
  7553 00000ECC 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7554 00000ED1 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7555 00000ED6 E8F1F5                  	call	Get_User_Stack
  7556                                  	;mov	[si+2],bx
  7557                                  	;mov	[si+10h],cx
  7558 00000ED9 895C02                  	MOV	[SI+user_env.user_BX],BX
  7559 00000EDC 894C10                  	MOV	[SI+user_env.user_ES],CX
  7560 00000EDF C3                      	retn
  7561                                  
  7562                                  ;**	$Set_DMA - Set Disk Transfer Address
  7563                                  ;----------------------------------------------------------------------------
  7564                                  ;	ENTRY	DS:DX is current transfer address
  7565                                  ;	EXIT	none
  7566                                  ;	USES	all
  7567                                  
  7568                                  _$SET_DMA:
  7569 00000EE0 368916[2C03]            	MOV	[SS:DMAADD],DX
  7570 00000EE5 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7571 00000EEA C3                      	retn
  7572                                  
  7573                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7574                                  ;------------------------------------------------------------------------------
  7575                                  
  7576                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7577                                  ;-----------------------------------------------------
  7578                                  ;	ENTRY	none
  7579                                  ;	EXIT	(AL) = drive number
  7580                                  ;	USES	all
  7581                                  
  7582                                  _$GET_DEFAULT_DRIVE:
  7583 00000EEB 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7584 00000EEF C3                      	retn
  7585                                  
  7586                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7587                                  ;-----------------------------------------------------
  7588                                  ;	ENTRY	(DL) = Drive number for new default drive
  7589                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7590                                  
  7591                                  _$SET_DEFAULT_DRIVE:
  7592 00000EF0 88D0                    	MOV	AL,DL
  7593 00000EF2 FEC0                    	INC	AL			; A=1, B=2...
  7594 00000EF4 E8AD5C                  	call	GetVisDrv		; see if visible drive
  7595 00000EF7 7204                    	JC	short SETRET		; errors do not set
  7596 00000EF9 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7597                                  
  7598                                  SETRET:
  7599 00000EFD 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7600 00000F01 C3                      	retn
  7601                                  
  7602                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7603                                  ;----------------------------------------------------------------------------
  7604                                  
  7605                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7606                                  ;---------------------------------------------------
  7607                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7608                                  ;	contents of an interrupt vector.
  7609                                  ;
  7610                                  ;	ENTRY	(AL) = interrupt number
  7611                                  ;	EXIT	(ES:BX) = current interrupt vector
  7612                                  
  7613                                  _$GET_INTERRUPT_VECTOR:
  7614 00000F02 E83000                  	CALL	RECSET
  7615 00000F05 26C41F                  	LES	BX,[ES:BX]
  7616 00000F08 E8BFF5                  	call	Get_User_Stack
  7617                                  	;mov	[si+2],bx
  7618                                  	;mov	[si+10h],es
  7619 00000F0B 895C02                  	MOV	[SI+user_env.user_BX],BX
  7620 00000F0E 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7621 00000F11 C3                      	retn
  7622                                  
  7623                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7624                                  ;---------------------------------------------------
  7625                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7626                                  ;	contents of an interrupt vector.
  7627                                  ;
  7628                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7629                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7630                                  ;	for explanation.
  7631                                  ;
  7632                                  ;	ENTRY	(AL) = interrupt number
  7633                                  ;		(ds:dx) = desired new vector value
  7634                                  ;	EXIT	none
  7635                                  ;	USES	all
  7636                                  
  7637                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7638                                  ; 13/05/2019 - Retro DOS v4.0
  7639                                  
  7640                                  _$SET_INTERRUPT_VECTOR:
  7641 00000F12 E82000                  	CALL	RECSET
  7642 00000F15 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7643 00000F16 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7644 00000F19 268C5F02                	MOV	[ES:BX+2],DS
  7645 00000F1D FB                      	STI
  7646                                  					; M004, M068 - Start
  7647                                  	; MSDOS 6.0
  7648 00000F1E 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7649                                  					; Q: was the previous call an int 21
  7650                                  					;    exec call
  7651                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7652                                  	;jnz	short siv_1		; Y: go set count
  7653                                  	;retn				; N: return
  7654                                  	; 15/12/2022
  7655 00000F24 740E                    	jz	short siv_2
  7656                                  siv_1:	
  7657 00000F26 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7658 00000F2C 7506                    	jne	short siv_2		 ; N: done 
  7659 00000F2E 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7660                                  					 ; dispatcher to turn A20 Off before 
  7661                                  					 ; returning to user.
  7662                                  siv_2:
  7663                                  	; 07/12/2022
  7664 00000F34 C3                      	retn				; M004, M068 - End
  7665                                  	
  7666                                  RECSET:
  7667 00000F35 31DB                    	XOR	BX,BX
  7668 00000F37 8EC3                    	MOV	ES,BX
  7669 00000F39 88C3                    	MOV	BL,AL
  7670 00000F3B D1E3                    	SHL	BX,1
  7671 00000F3D D1E3                    	SHL	BX,1
  7672 00000F3F C3                      	retn
  7673                                  
  7674                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7675                                  ;-------------------------------------------------------------------------------------
  7676                                  
  7677                                  ;**	$Char_Oper - Manipulate Switch Character
  7678                                  ;
  7679                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7680                                  ;
  7681                                  ;	ENTRY	AL = function:
  7682                                  ;		    0 - read switch char
  7683                                  ;		    1 - set switch char (char in DL)
  7684                                  ;		    2 - read device availability
  7685                                  ;			Always returns available
  7686                                  ;		    3 - set device availability
  7687                                  ;			No longer supported (NOP)
  7688                                  ;	EXIT	(al) = 0xff iff error
  7689                                  ;		(al) != 0xff if ok
  7690                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7691                                  ;	USES	AL, DL
  7692                                  ;
  7693                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7694                                  ;		The character / is always returned for subfunction 0,
  7695                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7696                                  
  7697                                  ; 13/05/2019 - Retro DOS v4.0
  7698                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7699                                  
  7700                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7701                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7702                                  
  7703                                  _$CHAR_OPER:
  7704                                  	; MSDOS 6.0
  7705 00000F40 08C0                    	or	al,al				; get switch?
  7706 00000F42 B22F                    	mov	dl,'/'				; assume yes
  7707 00000F44 7407                    	jz	short chop_1			; jump if yes
  7708 00000F46 3C02                    	cmp	al,2				; check device availability?
  7709 00000F48 B2FF                    	mov	dl,-1				; assume yes
  7710 00000F4A 7401                    	jz	short chop_1			; jump if yes
  7711 00000F4C C3                      	retn					; otherwise just quit
  7712                                  
  7713                                  ; subfunctions requiring return of value to user come here. DL holds
  7714                                  ; value to return
  7715                                  
  7716                                  chop_1:
  7717 00000F4D E87AF5                  	call	Get_User_Stack
  7718 00000F50 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7719 00000F53 C3                      	retn
  7720                                  
  7721                                  	; MSDOS 3.3
  7722                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7723                                  	;push	ss
  7724                                  	;pop	ds
  7725                                  	;cmp	al,1
  7726                                  	;jb	short chop_1
  7727                                  	;jz	short chop_2
  7728                                  	;cmp	al,3
  7729                                  	;jb	short chop_3
  7730                                  	;jz	short chop_5
  7731                                  	;mov	al,0FFh
  7732                                  	;retn
  7733                                  ;chop_1:
  7734                                  	;mov	dl,[chSwitch]
  7735                                  	;jmp	short chop_4
  7736                                  ;chop_2:
  7737                                  	;mov	[chSwitch],dl
  7738                                  	;retn
  7739                                  ;chop_3:
  7740                                  	;mov	dl, FFh
  7741                                  ;chop_4:
  7742                                  	;call	Get_User_Stack
  7743                                  	;mov	[si+6],dx
  7744                                  ;chop_5:
  7745                                  	;retn
  7746                                  
  7747                                  ;**	$GetExtendedError - Return Extended error code
  7748                                  ;----------------------------------------------------------------------------
  7749                                  ;	This function reads up the extended error info from the static
  7750                                  ;	variables where it was stored.
  7751                                  ;
  7752                                  ;	ENTRY	none
  7753                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7754                                  ;		BL = recommended action
  7755                                  ;		BH = class of error
  7756                                  ;		CH = locus of error
  7757                                  ;		ES:DI = may be pointer
  7758                                  ;	USES	ALL
  7759                                  
  7760                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7761                                  
  7762                                  _$GetExtendedError:
  7763 00000F54 16                      	push	ss
  7764 00000F55 1F                      	pop	ds
  7765 00000F56 A1[2403]                	MOV	AX,[EXTERR]
  7766 00000F59 C43E[2803]              	LES	DI,[EXTERRPT]
  7767 00000F5D 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7768 00000F61 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7769 00000F65 E862F5                  	call	Get_User_Stack
  7770                                  	;mov	[si+0Ah],di
  7771 00000F68 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7772                                  	;mov	[si+10h],es
  7773 00000F6B 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7774                                  	;mov	[si+2],bx
  7775 00000F6E 895C02                  	MOV	[SI+user_env.user_BX],BX
  7776                                  	;mov	[si+4],cx
  7777 00000F71 894C04                  	MOV	[SI+user_env.user_CX],CX
  7778                                  jmp_SYS_RET_OK:
  7779                                  	; 15/12/2022
  7780                                  	;jmp	SYS_RET_OK
  7781                                  	; 25/06/2019
  7782 00000F74 E910F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7783                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7784                                  ;jmp_SYS_RET_OK:
  7785                                  	;jmp	SYS_RET_OK
  7786                                  
  7787                                  ; --------------------------------------------------------------------------
  7788                                  ; 09/01/2024
  7789                                  %if 0
  7790                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7791                                  	; DOSCODE:4CF3h
  7792                                  ;patch_or_unknown:
  7793                                  ;get_code_page:
  7794                                  	push    si
  7795                                  	mov     si, COUNTRY_CDPG
  7796                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7797                                  	mov     ax, [ss:si+6Ah]
  7798                                  	pop     si
  7799                                  	retn
  7800                                  %endif
  7801                                  ; --------------------------------------------------------------------------
  7802                                  
  7803                                  ; 29/04/2019 - Retro DOS v4.0
  7804                                  
  7805                                  ;BREAK	<ECS_call - Extended Code System support function>
  7806                                  ;---------------------------------------------------------------------------
  7807                                  ; Inputs:
  7808                                  ;	AL = 0	get lead byte table
  7809                                  ;		on return DS:SI has the table location
  7810                                  ;
  7811                                  ;	AL = 1	set / reset interim console flag
  7812                                  ;		DL = flag (00H or 01H)
  7813                                  ;		no return
  7814                                  ;
  7815                                  ;	AL = 2	get interim console flag
  7816                                  ;		on return DL = current flag value
  7817                                  ;
  7818                                  ;	AL = OTHER then error, and returns with:
  7819                                  ;		AX = error_invalid_function
  7820                                  ;
  7821                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7822                                  ;	 SS:SP WILL BE PRESERVED!
  7823                                  ;---------------------------------------------------------------------------
  7824                                  
  7825                                  _$ECS_Call:
  7826 00000F77 08C0                    	or	al,al			; AL = 0 (get table)?
  7827                                  	;jnz	short _okok
  7828                                  	; 15/12/2022
  7829 00000F79 7403                    	jz	short get_lbt
  7830                                  ;_okok:
  7831 00000F7B E906F7                  	jmp	SYS_RET_OK
  7832                                  get_lbt:
  7833 00000F7E E849F5                  	call	Get_User_Stack		; *
  7834                                  
  7835                                  ;hkn; dbcs_table moved low to dosdata
  7836                                  	;mov	word [si+8],DBCS_TAB+2
  7837 00000F81 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7838                                  
  7839 00000F86 06                      	push	es
  7840                                  	;getdseg <es>			; es = DOSDATA
  7841 00000F87 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7842                                  	;mov	[si+14],es
  7843 00000F8C 8C440E                  	mov	[SI+user_env.user_DS],es
  7844 00000F8F 07                      	pop	es
  7845                                  
  7846                                  	; 15/12/2022
  7847 00000F90 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7848                                  ;_okok:
  7849                                  	; 15/12/2022	
  7850                                  	;;transfer SYS_RET_OK
  7851                                  	;jmp	short jmp_SYS_RET_OK
  7852                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7853                                  	;;jmp	SYS_RET_OK
  7854                                  	;jmp	short jmp_SYS_RET_OK
  7855                                  
  7856                                  ;============================================================================
  7857                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7858                                  ;============================================================================
  7859                                  ; 19/07/2018 - Retro DOS v3.0
  7860                                  ; 15/05/2019 - Retro DOS v4.0
  7861                                  
  7862                                  ; System calls for parsing command lines
  7863                                  ;
  7864                                  ;   $PARSE_FILE_DESCRIPTOR
  7865                                  ;
  7866                                  ;   Modification history:
  7867                                  ;
  7868                                  ;       Created: ARR 30 March 1983
  7869                                  ;               EE PathParse 10 Sept 1983
  7870                                  ;
  7871                                  
  7872                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7873                                  ;---------------------------------------------------------------------------
  7874                                  ; Inputs:
  7875                                  ;       DS:SI Points to a command line
  7876                                  ;       ES:DI Points to an empty FCB
  7877                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7878                                  ;                   = 0 Parse stops if separator encountered
  7879                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7880                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7881                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7882                                  ;                   = 0  "       "      "       - put blanks in FCB
  7883                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7884                                  ;                   = 0  "       "      "        - put blanks in FCB
  7885                                  ; Function:
  7886                                  ;       Parse command line into FCB
  7887                                  ; Returns:
  7888                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7889                                  ;       DS:SI points to first character after filename
  7890                                  ;---------------------------------------------------------------------------
  7891                                  
  7892                                  _$PARSE_FILE_DESCRIPTOR:
  7893 00000F92 E88640                  	call	MAKEFCB
  7894 00000F95 56                      	PUSH    SI
  7895 00000F96 E831F5                  	call	Get_User_Stack
  7896                                  	;pop	word [si+8]
  7897 00000F99 8F4408                  	POP     word [SI+user_env.user_SI]
  7898 00000F9C C3                      	retn
  7899                                  
  7900                                  ;============================================================================
  7901                                  ; MISC.ASM, MSDOS 6.0, 1991
  7902                                  ;============================================================================
  7903                                  ; 19/07/2018 - Retro DOS v3.0
  7904                                  
  7905                                  ; 29/04/2019 - Retro DOS v4.0
  7906                                  
  7907                                  ;ENTRYPOINTSEG	EQU	0CH
  7908                                  ;MAXDIF		EQU	0FFFH
  7909                                  ;SAVEXIT 	EQU	10
  7910                                  ;WRAPOFFSET	EQU	0FEF0h
  7911                                  
  7912                                  ;
  7913                                  ;----------------------------------------------------------------------------
  7914                                  ;
  7915                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7916                                  ;
  7917                                  ;	Return Stuff sort of like old get fat call
  7918                                  ;
  7919                                  ;	ENTRY	none
  7920                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7921                                  ;			GOD help anyone who tries to do ANYTHING except
  7922                                  ;			READ this ONE byte.
  7923                                  ;		DX = Total Number of allocation units on disk
  7924                                  ;		CX = Sector size
  7925                                  ;		AL = Sectors per allocation unit
  7926                                  ;		   = -1 if bad drive specified
  7927                                  ;	USES	all
  7928                                  ;
  7929                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7930                                  ;
  7931                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7932                                  ;
  7933                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7934                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7935                                  ;			GOD help anyone who tries to do ANYTHING except
  7936                                  ;			READ this ONE byte.
  7937                                  ;		DX = Total Number of allocation units on disk
  7938                                  ;		CX = Sector size
  7939                                  ;		AL = Sectors per allocation unit
  7940                                  ;		   = -1 if bad drive specified
  7941                                  ;	USES	all
  7942                                  ;
  7943                                  ;----------------------------------------------------------------------------
  7944                                  ;
  7945                                  
  7946                                  _$SLEAZEFUNC:
  7947                                  	; 15/05/2019 - Retro DOS v4.0
  7948 00000F9D B200                    	MOV	DL,0
  7949                                  _$SLEAZEFUNCDL:
  7950 00000F9F 16                      	push	ss
  7951 00000FA0 1F                      	pop	ds
  7952                                  	
  7953 00000FA1 88D0                    	MOV	AL,DL
  7954 00000FA3 E81A5C                  	call	GETTHISDRV		; Get CDS structure
  7955                                  SET_AL_RET:
  7956                                  	; MSDOS 3.3
  7957                                  	;;mov	al, 0Fh
  7958                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7959                                  	
  7960                                  	; MSDOS 6.0 & MSDOS 3.3
  7961 00000FA6 721E                    	JC	short BADSLDRIVE
  7962                                  
  7963 00000FA8 E8D31D                  	call	DISK_INFO
  7964                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7965 00000FAB 7219                    	jc	short BADSLDRIVE
  7966 00000FAD 8826[9805]              	MOV	[FATBYTE],AH
  7967                                  
  7968                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7969                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7970                                  ; CALL AGAIN
  7971                                  
  7972 00000FB1 BF[9805]                	MOV	DI,FATBYTE
  7973 00000FB4 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7974 00000FB6 E811F5                  	call	Get_User_Stack
  7975                                  	;mov	[si+4],cx
  7976                                  	;mov	[si+6],bx
  7977                                  	;mov	[si+2],di
  7978 00000FB9 894C04                  	MOV	[SI+user_env.user_CX],CX
  7979 00000FBC 895C06                  	MOV	[SI+user_env.user_DX],BX
  7980 00000FBF 897C02                  	MOV	[SI+user_env.user_BX],DI
  7981                                  	
  7982                                  	;mov	[si+0Eh],ss
  7983 00000FC2 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7984                                  
  7985 00000FC5 C3                      	retn
  7986                                  
  7987                                  BADSLDRIVE:
  7988 00000FC6 E9DAF6                  	jmp	FCB_RET_ERR
  7989                                  
  7990                                  ;
  7991                                  ;----------------------------------------------------------------------------
  7992                                  ;
  7993                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7994                                  ;
  7995                                  ;	Returns location of DOS status for interrupt routines
  7996                                  ;									   ;
  7997                                  ;	ENTRY	none
  7998                                  ;	EXIT	(es:bx) = flag location
  7999                                  ;	USES	all
  8000                                  ;
  8001                                  ;----------------------------------------------------------------------------
  8002                                  ;
  8003                                  
  8004                                  _$GET_INDOS_FLAG:
  8005 00000FC9 E8FEF4                          CALL	Get_User_Stack
  8006                                          ;MOV	WORD [SI+2],INDOS
  8007 00000FCC C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8008                                          ;MOV	[SI+10H],SS
  8009 00000FD1 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8010 00000FD4 C3                      	RETN 
  8011                                  
  8012                                  ;
  8013                                  ;----------------------------------------------------------------------------
  8014                                  ;
  8015                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8016                                  ;
  8017                                  ;	Return a pointer to interesting DOS variables This call is version
  8018                                  ;	dependent and is subject to change without notice in future versions.
  8019                                  ;	Use at risk.
  8020                                  ;
  8021                                  ;	ENTRY	none
  8022                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8023                                  ;	uses	ALL
  8024                                  ;
  8025                                  ;----------------------------------------------------------------------------
  8026                                  ;
  8027                                  
  8028                                  _$GET_IN_VARS:
  8029 00000FD5 E8F2F4                          CALL	Get_User_Stack
  8030                                          ;MOV	WORD [SI+2],SYSINITVAR
  8031                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8032 00000FD8 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8033                                          ;MOV	[SI+10H],SS
  8034 00000FDD 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8035 00000FE0 C3                      	RETN
  8036                                  
  8037                                  ;
  8038                                  ;----------------------------------------------------------------------------
  8039                                  ;
  8040                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8041                                  ;
  8042                                  ;	Return pointer to drive parameter table for default drive
  8043                                  ;
  8044                                  ;	ENTRY	none
  8045                                  ;	EXIT	(ds:bx) = DPB address
  8046                                  ;	USES	all
  8047                                  ;
  8048                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8049                                  ;
  8050                                  ;	Return pointer to a specified drive parameter table
  8051                                  ;
  8052                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8053                                  ;	EXIT	(al) = 0 iff ok
  8054                                  ;		  (ds:bx) = DPB address
  8055                                  ;		(al) = -1 if bad drive
  8056                                  ;	USES	all
  8057                                  ;
  8058                                  ;----------------------------------------------------------------------------
  8059                                  ;
  8060                                  
  8061                                  ; 15/05/2019 - Retro DOS v4.0
  8062                                  
  8063                                  _$GET_DEFAULT_DPB:
  8064 00000FE1 B200                    	MOV	DL,0
  8065                                  _$GET_DPB:
  8066 00000FE3 16                      	push	ss
  8067 00000FE4 1F                      	pop	ds
  8068                                  
  8069 00000FE5 88D0                    	MOV	AL,DL
  8070 00000FE7 E8D65B                  	call	GETTHISDRV		; Get CDS structure
  8071 00000FEA 7222                    	JC	short ISNODRV 		; no valid drive
  8072 00000FEC C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8073                                  	;;test	word [es:di+43h],8000h
  8074                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8075                                  	;test	byte [es:di+44h],80h
  8076 00000FF0 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8077 00000FF5 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8078 00000FF7 E88B03                  	call	ECritDisk
  8079 00000FFA E80748                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8080 00000FFD E8A003                  	call	LCritDisk
  8081 00001000 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8082                                  					;   have.
  8083 00001002 E8C5F4                  	call	Get_User_Stack
  8084                                  	;mov	[si+2],bp
  8085 00001005 896C02                  	MOV	[SI+user_env.user_BX],BP
  8086                                  	;mov	[si+0Eh],es
  8087 00001008 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8088 0000100B 30C0                    	XOR	AL,AL
  8089 0000100D C3                      	retn
  8090                                  ISNODRV:
  8091 0000100E B0FF                    	MOV	AL,-1
  8092 00001010 C3                      	retn
  8093                                  
  8094                                  ;
  8095                                  ;----------------------------------------------------------------------------
  8096                                  ;
  8097                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8098                                  ;
  8099                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8100                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8101                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8102                                  ;
  8103                                  ;	ENTRY	none
  8104                                  ;	EXIT	none
  8105                                  ;	USES	all
  8106                                  ;
  8107                                  ;----------------------------------------------------------------------------
  8108                                  ;
  8109                                  
  8110                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8111                                  	; DOSCODE:4D94h
  8112                                  _$DISK_RESET:
  8113                                  	; 15/05/2019 - Retro DOS v4.0
  8114 00001011 B0FF                    	mov	al,0FFh	; -1
  8115 00001013 16                      	push	ss
  8116 00001014 1F                      	pop	ds
  8117                                  	; 06/11/2022
  8118                                  	;MOV	AL,-1
  8119 00001015 E86D03                  	call	ECritDisk
  8120                                  	; MSDOS 6.0
  8121                                  	;;or	word [DOS34_FLAG],4
  8122                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8123 00001018 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8124 0000101D E8524B                  	call	FLUSHBUF
  8125                                  	; MSDOS 6.0
  8126                                  	;and	word [DOS34_FLAG],0FFFBh
  8127                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8128                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8129                                  	; 15/12/2022
  8130 00001020 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8131 00001025 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8132                                  ;
  8133                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8134                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8135                                  ; let's do it.
  8136                                  ;
  8137                                  ; Invalidate 'last-buffer' used
  8138                                  ;
  8139 0000102B BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8140 0000102E 891E[2000]              	MOV	[LastBuffer+2],BX
  8141 00001032 891E[1E00]              	MOV	[LastBuffer],BX
  8142                                  
  8143                                  	; MSDOS 3.3 
  8144                                  	; IBMDOS.COM, Offset 1C66h
  8145                                  	;;;;
  8146                                  	;lds	si,[BUFFHEAD]
  8147                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8148                                  				; .buf_flags, AH = 0, reset/clear
  8149                                  ;DRST_1:
  8150                                  	;;mov	[si+4],ax
  8151                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8152                                  	;lds	si,[SI]
  8153                                  	;cmp	si,bx ; -1
  8154                                  	;je	short DRST_2
  8155                                  	;;mov	[si+4],ax
  8156                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8157                                  	;lds	si,[SI]
  8158                                  	;cmp	si,bx
  8159                                  	;jne	short DRST_1
  8160                                  	;;;;
  8161                                  ;DRST_2:
  8162 00001036 E86703                  	call	LCritDisk
  8163 00001039 B8FFFF                  	MOV	AX,-1
  8164                                  	; 07/12/2022
  8165                                  	;mov	ax,0FFFFh
  8166                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8167 0000103C 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8168 0000103D B82011                  	mov     ax,1120h
  8169 00001040 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8170                                  			; DS = DOS CS
  8171                                  			; Return: CF clear (successful)
  8172 00001042 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8173                                  	
  8174 00001043 C3                      	retn
  8175                                  
  8176                                  	; 19/07/2018 - Retro DOS v3.0
  8177                                  
  8178                                  ;
  8179                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8180                                  ;
  8181                                  ;----------------------------------------------------------------------------
  8182                                  ;
  8183                                  ;**	$SetDPB - Create a DPB
  8184                                  ;
  8185                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8186                                  ;
  8187                                  ;	ENTRY	ES:BP Points to DPB
  8188                                  ;		DS:SI Points to BPB
  8189                                  ;	EXIT	DPB setup
  8190                                  ;	USES	ALL but BP, DS, ES
  8191                                  ;
  8192                                  ;----------------------------------------------------------------------------
  8193                                  ;
  8194                                  
  8195                                  ; 10/05/2019 - Retro DOS v4.0
  8196                                  
  8197                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8198                                  
  8199                                  ; MSDOS 6.0
  8200 00001044 0300                    word3:	dw	3			; M008 -- word value for divides
  8201                                  
  8202                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8203                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8204                                  
  8205                                  ;procedure   $SETDPB,NEAR
  8206                                  
  8207                                  _$SETDPB:
  8208 00001046 89EF                    	MOV	DI,BP
  8209 00001048 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8210 0000104B AD                      	LODSW
  8211 0000104C AB                      	STOSW				; dpb_sector_size
  8212                                  	; MSDOS 6.0
  8213                                  	;cmp	byte [si+3],0
  8214 0000104D 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8215 00001051 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8216                                  	;mov	byte [es:di+4],0
  8217 00001053 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8218 00001058 EB70                    	JMP	short setend			     ; NO		;AN000;
  8219                                  
  8220                                  yesfat: ; 10/08/2018
  8221 0000105A 89C2                    	MOV	DX,AX
  8222 0000105C AC                      	LODSB
  8223                                  	;DEC	AL
  8224                                  	; 17/12/2022
  8225 0000105D 48                      	dec	ax
  8226 0000105E AA                      	STOSB				; dpb_cluster_mask
  8227                                  	;INC	AL
  8228 0000105F 40                      	inc	ax
  8229 00001060 30E4                    	XOR	AH,AH
  8230                                  LOG2LOOP:
  8231 00001062 A801                    	test	AL,1
  8232 00001064 7506                    	JNZ	short SAVLOG
  8233 00001066 FEC4                    	INC	AH
  8234 00001068 D0E8                    	SHR	AL,1
  8235 0000106A EBF6                    	JMP	SHORT LOG2LOOP
  8236                                  SAVLOG:
  8237 0000106C 88E0                    	MOV	AL,AH
  8238 0000106E AA                      	STOSB				; dpb_cluster_shift
  8239 0000106F 88C3                    	MOV	BL,AL
  8240 00001071 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8241 00001072 AC                      	LODSB
  8242 00001073 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8243                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8244                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8245 00001074 88C7                    	MOV	BH,AL
  8246 00001076 AD                      	LODSW
  8247 00001077 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8248 00001078 B105                    	MOV	CL,5
  8249 0000107A D3EA                    	SHR	DX,CL			; Directory entries per sector
  8250 0000107C 48                      	DEC	AX
  8251 0000107D 01D0                    	ADD	AX,DX			; Cause Round Up
  8252 0000107F 89D1                    	MOV	CX,DX
  8253 00001081 31D2                    	XOR	DX,DX
  8254 00001083 F7F1                    	DIV	CX
  8255 00001085 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8256 00001087 47                      	INC	DI
  8257 00001088 47                      	INC	DI			; Skip dpb_first_sector
  8258 00001089 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8259 0000108A AC                      	LODSB
  8260                                  	;mov	[es:bp+17h],al
  8261 0000108B 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8262 0000108F AD                      	LODSW				; Number of sectors in a FAT
  8263                                  	
  8264                                  	;;;
  8265                                  	;MSDOS 3.3
  8266                                  	;
  8267                                  	;STOSB		; DPB.FAT_SIZE
  8268                                  	;MUL	BH
  8269                                  	
  8270                                  	;MSDOS 6.0
  8271                                  	;
  8272 00001090 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8273 00001091 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8274 00001093 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8275 00001095 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8276                                  	;;;
  8277                                  	
  8278                                  	;add	ax,[es:bp+6]
  8279 00001097 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8280 0000109B AB                      	STOSW				; dpb_dir_sector
  8281 0000109C 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8282                                  	;mov	[es:bp+0Bh],ax
  8283 0000109E 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8284                                  	
  8285                                  	; MSDOS 6.0
  8286 000010A2 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8287                                  	;;cmp	word [es:bp+0Dh],0
  8288                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8289                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8290                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8291                                  	; 15/12/2022
  8292                                  	; 28/07/2019
  8293 000010A4 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8294 000010A8 09DB                    	or	bx,bx
  8295 000010AA 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8296                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8297                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8298                                  	
  8299                                  
  8300 000010AC 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8301                                  	;mov	bx,[si+8]
  8302 000010AE 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8303                                  	;mov	dx,[si+10]
  8304 000010B1 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8305 000010B4 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8306 000010B6 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8307 000010B9 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8308 000010BB 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8309                                  rott:					;AN000;;F.C. >32mb
  8310 000010BD F8                      	CLC				;AN000;;F.C. >32mb
  8311 000010BE D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8312 000010C0 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8313 000010C2 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8314                                  norot:					;AN000;
  8315                                  	; 15/12/2022
  8316                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8317 000010C4 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8318                                  normal_dpb:
  8319                                  	;;sub	ax,[es:bp+0Dh]
  8320                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8321                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8322                                  	; 15/12/2022
  8323                                  	; bx = [es:bp+DSKSIZ]
  8324                                  	;sub	ax,bx ; 28/07/2019
  8325                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8326                                  	; 15/12/2022
  8327 000010C6 29C3                    	sub	bx,ax
  8328                                  	;NEG	AX			; Sectors in data area
  8329                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8330                                  	; 15/12/2022
  8331                                  	; CL = cluster shift
  8332                                  	; BX = number of data sectors 
  8333                                  	;SHR	AX,CL			; Div by sectors/cluster
  8334 000010C8 D3EB                    	shr	bx,cl 
  8335                                  setend:
  8336                                  ;	M008 - CAS
  8337                                  ;
  8338                                  	; 15/12/2022
  8339 000010CA 43                      	inc	bx
  8340                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8341                                  ;
  8342                                  ;	There has been a bug in our fatsize calculation for so long
  8343                                  ;	  that we can't correct it now without causing some user to
  8344                                  ;	  experience data loss. There are even cases where allowing
  8345                                  ;	  the number of clusters to exceed the fats is the optimal
  8346                                  ;	  case -- where adding 2 more fat sectors would make the
  8347                                  ;	  data field smaller so that there's nothing to use the extra
  8348                                  ;	  fat sectors for.
  8349                                  ;
  8350                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8351                                  ;	  still report that there was a cluster left when the disk was
  8352                                  ;	  actually full. Very graceful failure for a corrupt system
  8353                                  ;	  configuration. There may be worse cases that were never
  8354                                  ;	  properly traced back to this bug. The problem cases only
  8355                                  ;	  occurred when partition sizes were very near FAT sector
  8356                                  ;	  rounding boundaries, which were rare cases.
  8357                                  ;
  8358                                  ;	Also, it's possible that some third-party partition program might
  8359                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8360                                  ;	  scheme. In this hypothetical case, the number of allocation
  8361                                  ;	  clusters which don't actually have FAT entries to represent
  8362                                  ;	  them might be larger and might create a more catastrophic
  8363                                  ;	  failure. So we'll provide the safeguard of limiting the
  8364                                  ;	  max_cluster to the amount that will fit in the FATs.
  8365                                  ;
  8366                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8367                                  
  8368                                  ;	make sure the number of fat sectors is actually enough to
  8369                                  ;	  hold that many clusters. otherwise, back the number of
  8370                                  ;	  clusters down
  8371                                  
  8372                                  	; 15/12/2022
  8373                                  	; bx = number of clusters
  8374                                  
  8375                                  	; 19/07/2018 - Retro DOS v3.0
  8376                                  	; MSDOS 6.0
  8377                                  	; 15/12/2022
  8378                                  	;mov	bx,ax			; remember calculated # clusters
  8379                                  
  8380                                  	; 01/08/2018 (MSDOS 3.3)
  8381                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8382                                  	;xor	ah,ah 
  8383                                  
  8384                                  	; 10/05/2019 - Retro DOS v4.0
  8385                                  	;mov	ax,[ES:BP+0Fh]
  8386 000010CB 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8387                                  
  8388                                  	;mul	word [es:bp+2]	
  8389 000010CF 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8390 000010D3 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8391 000010D7 720D                    	jb	short setend_fat12
  8392 000010D9 D1EA                    	shr	dx,1
  8393                                  
  8394                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8395                                  	; 15/12/2022
  8396                                  ;cs3 7/2/92
  8397 000010DB 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8398                                  					; than enough for the maximum FAT,
  8399                                  					; so go ahead and use the calculated
  8400                                  					; number of clusters.
  8401                                  ;cs3 7/2/92
  8402                                  
  8403 000010DD D1D8                    	rcr	ax,1			; find number of entries
  8404 000010DF 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8405                                  ;					;  into 12-bit fatland?
  8406 000010E2 7215                    	jb	short setend_faterr	; then go ahead and let the
  8407                                  ;					;  inconsistency pass through
  8408                                  ;					;  rather than lose data by
  8409                                  ;					;  correcting the fat type
  8410 000010E4 EB0E                    	jmp	short setend_fat16
  8411                                  
  8412                                  setend_fat12:
  8413 000010E6 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8414 000010E8 11D2                    	adc	dx,dx
  8415                                  
  8416                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8417                                  ;cs3 7/2/92
  8418                                  	; 15/12/2022
  8419 000010EA 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8420 000010ED 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8421                                  					; here. Check for it and use
  8422                                  					; the calculated size in this case.
  8423                                  ;cs3 7/2/92
  8424                                  
  8425 000010EF 2EF736[4410]            	div	word [cs:word3]
  8426                                  
  8427                                  setend_fat16:
  8428 000010F4 48                      	dec	ax			; limit at 1
  8429 000010F5 39D8                    	cmp	ax,bx			; is fat big enough?
  8430 000010F7 7602                    	jbe	short setend_fat	; use max value that'll fit
  8431                                  
  8432                                  setend_faterr:
  8433 000010F9 89D8                    	mov	ax,bx			; use calculated value
  8434                                  
  8435                                  setend_fat:
  8436                                  
  8437                                  ;	now ax = maximum legal cluster
  8438                                  
  8439                                  ;	end M008
  8440                                  
  8441                                  	;mov	[es:bp+0Dh], ax
  8442 000010FB 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8443                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8444                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8445 000010FF 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8446                                  					; Init so first ALLOC starts at
  8447                                  					; begining of FAT
  8448                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8449                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8450 00001105 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8451                                  
  8452 0000110B C3                      	retn
  8453                                  
  8454                                  ;EndProc $SETDPB
  8455                                  
  8456                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8457                                  
  8458                                  ;
  8459                                  ;----------------------------------------------------------------------------
  8460                                  ;
  8461                                  ;**	$Dup_PDB
  8462                                  ;
  8463                                  ; Inputs:   DX is new segment address of process
  8464                                  ;	    SI is end of new allocation block
  8465                                  ;
  8466                                  ;----------------------------------------------------------------------------
  8467                                  ;
  8468                                  
  8469                                  _$DUP_PDB:
  8470                                  
  8471                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8472                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8473                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8474                                  
  8475                                  	; MSDOS 3.3
  8476                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8477                                  	;MOV	DS,[CS:CurrentPDB]
  8478                                  
  8479                                  	; 15/05/2019 - Retro DOS v4.0
  8480                                  	; MSDOS 6.0
  8481 0000110C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8482 00001111 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8483 00001116 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8484                                  
  8485 0000111A 56                      	PUSH	SI
  8486 0000111B EB0A                    	JMP	SHORT CreateCopy
  8487                                  
  8488                                  ;
  8489                                  ;----------------------------------------------------------------------------
  8490                                  ;
  8491                                  ; Inputs:
  8492                                  ;	DX = Segment number of new base
  8493                                  ; Function:
  8494                                  ;	Set up program base and copy term and ^C from int area
  8495                                  ; Returns:
  8496                                  ;	None
  8497                                  ; Called at DOS init
  8498                                  ;
  8499                                  ;----------------------------------------------------------------------------
  8500                                  ;
  8501                                  
  8502                                  ; 15/05/2019 - Retro DOS v4.0
  8503                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8504                                  
  8505                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8506                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8507                                  
  8508                                  _$CREATE_PROCESS_DATA_BLOCK:
  8509                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8510 0000111D E8AAF3                  	CALL	Get_User_Stack
  8511                                  	;mov	ds,[si+14h]
  8512 00001120 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8513                                  	;push	word [2]
  8514 00001123 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8515                                  CreateCopy:
  8516 00001127 8EC2                    	MOV	ES,DX
  8517                                  
  8518 00001129 31F6                    	XOR	SI,SI			; copy entire PDB
  8519 0000112B 89F7                    	MOV	DI,SI
  8520 0000112D B98000                  	MOV	CX,128
  8521 00001130 F3A5                    	REP	MOVSW
  8522                                  
  8523                                  ; DOS 3.3 7/9/86
  8524                                  	;mov	cx,20
  8525                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8526                                  	; 15/12/2022
  8527 00001132 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8528                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8529                                  	;mov	cx,FILPERPROC
  8530                                  
  8531                                  	;mov	di,18h
  8532 00001134 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8533                                  	;;PUSH	DS ; * 15/05/2019
  8534                                  	;;lds	si,[34h]
  8535                                  	;LDS	SI,[PDB.JFN_Pointer]
  8536                                  	;REP	MOVSB
  8537                                  	;;POP	DS ; * 15/05/2019
  8538                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8539                                  	; 05/12/2022
  8540                                  	; (push ds then pop ds is not needed here!)
  8541                                  	;push	ds
  8542                                  	;lds	si,[34h]
  8543 00001137 C5363400                	lds	si,[PDB.JFN_Pointer]
  8544 0000113B F3A4                    	rep	movsb
  8545                                  	;pop	ds
  8546                                  
  8547                                  ; DOS 3.3 7/9/86
  8548                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8549                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8550                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8551                                  
  8552 0000113D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8553                                  
  8554                                  	;;test	byte [cs:CreatePDB],0FFh
  8555                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8556                                  	; 17/12/2022
  8557 00001142 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8558                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8559 00001146 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8560                                  
  8561                                  ; Here we set up for a new process...
  8562                                  
  8563                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8564                                  	;POP	DS
  8565                                  
  8566                                  	; MSDOS 6.0
  8567                                  	;;getdseg <ds>			; ds -> dosdata
  8568                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8569                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8570                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8571                                  	; 15/12/2022
  8572                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8573                                  
  8574 00001148 31DB                    	XOR	BX,BX			; dup all jfns
  8575                                  	;mov	cx,20
  8576                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8577                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8578                                  	; 15/12/2022
  8579 0000114A B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8580                                  
  8581                                  Create_dup_jfn:
  8582 0000114C 06                      	PUSH	ES ;**			; save new PDB
  8583 0000114D E84C56                  	call	SFFromHandle		; get sf pointer
  8584 00001150 B0FF                    	MOV	AL,-1			; unassigned JFN
  8585 00001152 7224                    	JC	short CreateStash	; file was not really open
  8586                                  	;;test	word [es:di+5],1000h
  8587                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8588                                  	; 15/05/2019
  8589                                  	;test	byte [es:di+6],10h
  8590 00001154 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8591 00001159 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8592                                  
  8593                                  ; We do not inherit network file handles.
  8594                                  
  8595                                  	;mov	ah,[es:di+2]
  8596 0000115B 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8597                                  	;and	ah,0F0h
  8598 0000115F 80E4F0                  	AND	AH,SHARING_MASK
  8599                                  	;cmp	ah,70h
  8600 00001162 80FC70                  	CMP	AH,SHARING_NET_FCB
  8601 00001165 7411                    	jz	short CreateStash
  8602                                  
  8603                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8604                                  ; duplication operation.
  8605                                  
  8606 00001167 893E[9E05]              	MOV	[THISSFT],DI
  8607 0000116B 8C06[A005]              	MOV	[THISSFT+2],ES
  8608 0000116F E86119                  	call	DOS_DUP 		; signal duplication
  8609                                  
  8610                                  ; get the old sfn for copy
  8611                                  
  8612 00001172 E80A56                  	call	pJFNFromHandle		; ES:DI is jfn
  8613 00001175 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8614                                  
  8615                                  ; Take AL (old sfn or -1) and stash it into the new position
  8616                                  
  8617                                  CreateStash:
  8618 00001178 07                      	POP	ES ;**
  8619                                  	;mov	[es:bx+18h],al
  8620 00001179 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8621 0000117D 43                      	INC	BX			; next jfn...
  8622 0000117E E2CC                    	LOOP	Create_dup_jfn
  8623                                  
  8624 00001180 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8625                                  	; 06/11/2022
  8626                                  	;mov	[es:16h],bx
  8627 00001184 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8628 00001189 8C06[3003]              	MOV	[CurrentPDB],ES
  8629                                  	;MOV	DS,BX ; 28/07/2019
  8630                                  	; 07/12/2022
  8631                                  	;mov	ds,[cs:DosDSeg]
  8632                                  	; 15/12/2022
  8633                                  	; ds = [cs:DosDSeg]
  8634 0000118D C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8635                                  	;mov	ds,bx
  8636                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8637                                  	; 15/12/2022
  8638                                  	;mov	ds,bx
  8639                                  
  8640                                  ; end of new process create
  8641                                  
  8642                                  Create_PDB_cont:
  8643                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8644                                  
  8645                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8646                                  
  8647                                  	;; 28/07/2019
  8648                                  	;;push	ds
  8649                                  	;;mov	ds,[cs:DosDSeg]
  8650                                  	;mov	byte [CreatePDB],0
  8651                                  	;;pop	ds
  8652                                  
  8653                                  ; 05/12/2022
  8654                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8655                                  ;	; (push-pop ds is nonsense here! 
  8656                                  ;	;  but i am using same code with original MSDOS.SYS
  8657                                  ;	;  for address compatibility.)
  8658                                  ;	push	ds
  8659                                  ;	; ds = [cs:DosDSeg] !
  8660                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8661                                  ;	mov	byte [CreatePDB],0
  8662                                  ;	pop	ds
  8663                                  
  8664 00001192 58                      	POP	AX ;*
  8665                                  
  8666                                  	;entry	SETMEM
  8667                                  
  8668                                  	; 17/12/2022
  8669                                  	; cx = 0
  8670                                  
  8671                                  ;---------------------------------------------------------------------------
  8672                                  ; Inputs:
  8673                                  ;	AX = Size of memory in paragraphs
  8674                                  ;	DX = Segment
  8675                                  ; Function:
  8676                                  ;	Completely prepares a program base at the
  8677                                  ;	specified segment.
  8678                                  ; Called at DOS init
  8679                                  ; Outputs:
  8680                                  ;	DS = DX
  8681                                  ;	ES = DX
  8682                                  ;	[0] has INT int_abort
  8683                                  ;	[2] = First unavailable segment
  8684                                  ;	[5] to [9] form a long call to the entry point
  8685                                  ;	[10] to [13] have exit address (from int_terminate)
  8686                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8687                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8688                                  ; DX,BP unchanged. All other registers destroyed.
  8689                                  ;---------------------------------------------------------------------------
  8690                                  
  8691                                  SETMEM:
  8692                                  	;XOR	CX,CX
  8693                                  	; 17/12/2022
  8694                                  	; cx = 0
  8695 00001193 8ED9                    	MOV	DS,CX
  8696 00001195 8EC2                    	MOV	ES,DX
  8697                                  	;mov	si,88h
  8698 00001197 BE8800                  	MOV	SI,addr_int_terminate
  8699                                  	;mov	di,10 ; 0Ah
  8700 0000119A BF0A00                  	MOV	DI,SAVEXIT
  8701                                  	;MOV	CX,6
  8702                                  	; 15/12/2022
  8703 0000119D B106                    	mov	cl,6
  8704 0000119F F3A5                    	REP	MOVSW
  8705 000011A1 26A30200                	MOV	[ES:2],AX
  8706 000011A5 29D0                    	SUB	AX,DX
  8707 000011A7 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8708 000011AA 7603                    	JBE	short HAVDIF
  8709 000011AC B8FF0F                  	MOV	AX,MAXDIF
  8710                                  HAVDIF:
  8711 000011AF 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8712 000011B2 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8713 000011B5 29C3                    	SUB	BX,AX
  8714 000011B7 B104                    	MOV	CL,4
  8715 000011B9 D3E0                    	SHL	AX,CL
  8716 000011BB 8EDA                    	MOV	DS,DX
  8717                                  
  8718                                  	; (MSDOS 6.0 note)
  8719                                  	;
  8720                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8721                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8722                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8723                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8724                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8725                                  	; making this equvalence valid for this particular case. If however
  8726                                  	; there is less than 64K remaining the address in BX:AX will not 
  8727                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8728                                  	; into the PSP.
  8729                                  	;
  8730                                  	; Therefore for the case where there is less than 64K remaining in 
  8731                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8732                                  	; requirements will not work. Call 5, however will continue to work
  8733                                  	; for all cases.
  8734                                  	;
  8735                                  
  8736                                  	;mov	[6],ax
  8737                                  	;mov	[8],bx
  8738                                  
  8739 000011BD A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8740 000011C0 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8741                                  
  8742                                  	; 06/05/2019 - Retro DOS v4.0
  8743 000011C4 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8744                                  					;    memory left
  8745 000011C7 740C                    	je	short addr_ok		; Y: the above calculated address is
  8746                                  					;    OK
  8747                                  					; N: 
  8748                                  
  8749 000011C9 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8750 000011CF C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8751                                  addr_ok:
  8752                                  	;mov	word [0],20CDh
  8753 000011D5 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8754                                  	;mov	byte [5],9Ah
  8755 000011DB C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8756                                  	;mov	word [50h],21CDh
  8757 000011E0 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8758                                  	;mov	byte [52h],0CBh
  8759 000011E6 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8760                                  	;mov	word [34h],18h
  8761 000011EB C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8762                                  	;mov	word [36h],ds
  8763 000011F1 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8764                                  	;mov	word [32h],20
  8765 000011F5 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8766                                  ;
  8767                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8768                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8769                                  ; particular SFT.  We perform this by requiring that the server link together
  8770                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8771                                  ; initialize this pointer.
  8772                                  ;
  8773                                   	;mov	word [38h],-1
  8774 000011FB C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8775                                  	;mov	word [3Ah],-1
  8776 00001201 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8777                                  
  8778                                  	; 06/05/2019
  8779                                  	; Set the real version number in the PSP - 5.00
  8780                                  
  8781                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8782                                  	; 07/12/2022
  8783 00001207 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8784                                  
  8785 0000120E C3                      	retn
  8786                                  
  8787                                  ; 29/04/2019 - Retro DOS v4.0
  8788                                  
  8789                                  ;BREAK <$GSetMediaID -- get set media ID>
  8790                                  
  8791                                  ;---------------------------------------------------------------------------
  8792                                  ; Inputs:
  8793                                  ;	BL= drive number as defined in IOCTL
  8794                                  ;	AL= 0 get media ID
  8795                                  ;	    1 set media ID
  8796                                  ;	DS:DX= buffer containing information
  8797                                  ;		DW  0  info level (set on input)
  8798                                  ;		DD  ?  serial #
  8799                                  ;		DB  11 dup(?)  volume id
  8800                                  ;		DB   8 dup(?)  file system type
  8801                                  ; Function:
  8802                                  ;	Get or set media ID
  8803                                  ; Returns:
  8804                                  ;	carry clear, DS:DX is filled
  8805                                  ;	carry set, error
  8806                                  ;---------------------------------------------------------------------------
  8807                                  
  8808                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8809                                  _$GSetMediaID:
  8810                                  	; RAWIO - GET_MEDIA_ID
  8811 0000120F B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8812 00001212 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8813 00001214 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8814                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8815                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8816                                  	; 15/12/2022
  8817 00001216 FEC8                    	dec	al
  8818 00001218 7507                    	jnz	short errorfunc ; al > 1
  8819                                  	; RAWIO - SET_MEDIA_ID
  8820                                  	;mov	cx,0846h	      ;AN001;MS.;
  8821                                  	; 15/12/2022
  8822 0000121A B146                    	mov	cl,46h	; cx = 0846h 
  8823                                  doioctl:			      ;AN000;
  8824 0000121C B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8825                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8826                                  	;call	_$IOCTL
  8827                                  	;retn			      ;AN000;MS.;
  8828                                  	; 15/12/2022
  8829 0000121E E9EC10                  	jmp	_$IOCTL
  8830                                  errorfunc:			      ;AN000;
  8831                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8832                                  	;mov	al,1
  8833 00001221 B001                    	mov	al,error_invalid_function
  8834 00001223 E967F4                  	jmp	SYS_RET_ERR
  8835                                  
  8836                                  ; 16/05/2019 - Retro DOS v4.0
  8837                                  
  8838                                  ;============================================================================
  8839                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8840                                  ;============================================================================
  8841                                  ; 20/07/2018 - Retro DOS v3.0
  8842                                  ; 29/04/2019 - Retro DOS v4.0
  8843                                  
  8844                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8845                                  ;----------------------------------------------------------------------------
  8846                                  ;
  8847                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8848                                  ;	     Strings of different lengths don't match.
  8849                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8850                                  ;   Outputs: Z if strings same, NZ if different
  8851                                  ;   Registers modified: NONE
  8852                                  ;----------------------------------------------------------------------------
  8853                                  
  8854                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8855                                  StrCmp:
  8856 00001226 56                      	push	si
  8857 00001227 57                      	push	di
  8858 00001228 50                      	push	ax
  8859                                  
  8860                                  Cmplp:
  8861 00001229 AC                      	LODSB
  8862 0000122A E82C3F                  	call	UCase			; convert to upper case
  8863 0000122D E87E3F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8864 00001230 88C4                    	MOV	AH,AL
  8865 00001232 268A05                  	MOV	AL,[ES:DI]
  8866 00001235 47                      	INC	DI
  8867 00001236 E8203F                  	call	UCase			; convert to upper case
  8868 00001239 E8723F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8869 0000123C 38C4                    	CMP	AH,AL
  8870 0000123E 7504                    	JNZ	short PopRet		; Strings dif
  8871                                  
  8872 00001240 08C0                    	OR	AL,AL
  8873 00001242 75E5                    	JNZ	short Cmplp		; More string
  8874                                  PopRet:
  8875 00001244 58                      	pop	ax
  8876 00001245 5F                      	pop	di
  8877 00001246 5E                      	pop	si
  8878 00001247 C3                      	retn
  8879                                  
  8880                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8881                                  ;----------------------------------------------------------------------------
  8882                                  ;
  8883                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8884                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8885                                  ;	characters.
  8886                                  ;
  8887                                  ;   Inputs:	DS:SI - pointer to source string
  8888                                  ;		ES:DI - pointer to destination string
  8889                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8890                                  ;		DS:SI point byte after nul byte at end of source string
  8891                                  ;   Registers modified: SI,DI
  8892                                  ;----------------------------------------------------------------------------
  8893                                  
  8894                                  StrCpy:
  8895 00001248 50                      	push	ax
  8896                                  CPYLoop:
  8897 00001249 AC                      	LODSB
  8898 0000124A E80C3F                  	call	UCase			; convert to upper case
  8899 0000124D E85E3F                  	call	PATHCHRCMP		; convert / to \ ;
  8900 00001250 AA                      	STOSB
  8901                                  
  8902 00001251 08C0                    	OR	AL,AL
  8903 00001253 75F4                    	JNZ	short CPYLoop
  8904 00001255 58                      	pop	ax
  8905 00001256 C3                      	retn
  8906                                  
  8907                                  ;----------------------------------------------------------------------------
  8908                                  ; Procedure Name : FStrCpy
  8909                                  ;----------------------------------------------------------------------------
  8910                                  
  8911                                  FStrCpy:
  8912 00001257 50                      	push	ax
  8913                                  FCPYLoop:
  8914 00001258 AC                      	LODSB
  8915 00001259 AA                      	STOSB
  8916 0000125A 08C0                    	OR	AL,AL
  8917 0000125C 75FA                    	JNZ	short FCPYLoop
  8918 0000125E 58                      	pop	ax
  8919 0000125F C3                      	retn
  8920                                  
  8921                                  ; 20/07/2018 - Retro DOS v3.0
  8922                                  ;----------------------------------------------------------------------------
  8923                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8924                                  ;----------------------------------------------------------------------------
  8925                                  ;
  8926                                  ;UCase:	
  8927                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8928                                  ;	retn
  8929                                  
  8930                                  ;Break <StrLen - compute length of string ES:DI>
  8931                                  ;----------------------------------------------------------------------------
  8932                                  ;**	StrLen - Compute Length of String
  8933                                  ;
  8934                                  ;	StrLen computes the length of a string, including the trailing 00
  8935                                  ;
  8936                                  ;	ENTRY	(es:di) = address of string
  8937                                  ;	EXIT	(cx) = size of string
  8938                                  ;	USES	cx, flags
  8939                                  ;----------------------------------------------------------------------------
  8940                                  
  8941                                  StrLen:
  8942 00001260 57                      	push	di
  8943 00001261 50                      	push	ax
  8944                                  	;MOV	CX,-1
  8945 00001262 B9FFFF                  	mov	cx,65535
  8946 00001265 30C0                    	XOR	AL,AL
  8947 00001267 F2AE                    	REPNE	SCASB
  8948 00001269 F7D1                    	NOT	CX
  8949 0000126B 58                      	pop	ax
  8950 0000126C 5F                      	pop	di
  8951 0000126D C3                      	retn
  8952                                  
  8953                                  ;----------------------------------------------------------------------------
  8954                                  ;**	DStrLen - Compute Length of String
  8955                                  ;
  8956                                  ;	ENTRY	(ds:si) = address of string
  8957                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8958                                  ;	USES	cx, flags
  8959                                  ;----------------------------------------------------------------------------
  8960                                  
  8961                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8962 0000126E E80300                  	CALL	XCHGP
  8963 00001271 E8ECFF                  	CALL	StrLen
  8964                                  	;CALL	XCHGP
  8965                                  	;retn
  8966                                  	; 18/12/2022
  8967                                  	;jmp	short XCHGP
  8968                                  
  8969                                  ;----------------------------------------------------------------------------
  8970                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8971                                  ;
  8972                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8973                                  ;
  8974                                  ;	ENTRY	none
  8975                                  ;	EXIT	pairs exchanged
  8976                                  ;	USES	SI, DI, DS, ES
  8977                                  ;----------------------------------------------------------------------------
  8978                                  
  8979                                  XCHGP:
  8980 00001274 1E                      	push	ds
  8981 00001275 06                      	push	es
  8982 00001276 1F                      	pop	ds
  8983 00001277 07                      	pop	es
  8984 00001278 87F7                    	XCHG	SI,DI
  8985                                  xchgp_retn:
  8986 0000127A C3                      	retn
  8987                                  
  8988                                  ;Break	<Idle - wait for a specified amount of time>
  8989                                  ;----------------------------------------------------------------------------
  8990                                  ;
  8991                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8992                                  ;   	   we spin until RetryLoop is exhausted.
  8993                                  ;
  8994                                  ;   Inputs:	RetryLoop is the number of times we spin
  8995                                  ;   Outputs:	Wait
  8996                                  ;   Registers modified: none
  8997                                  ;----------------------------------------------------------------------------
  8998                                  
  8999                                  Idle:
  9000                                  	;test	byte [SS:FSHARING],0FFh
  9001 0000127B 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9002                                  	;retnz
  9003 00001281 75F7                    	jnz	short xchgp_retn
  9004                                  	;SAVE	<CX>
  9005 00001283 51                      	push	cx
  9006 00001284 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9007 00001289 E308                    	JCXZ	Idle3
  9008                                  Idle1:	
  9009 0000128B 51                      	PUSH	CX
  9010 0000128C 31C9                    	XOR	CX,CX
  9011                                  Idle2:	
  9012 0000128E E2FE                    	LOOP	Idle2
  9013 00001290 59                      	POP	CX
  9014 00001291 E2F8                    	LOOP	Idle1
  9015                                  Idle3:	
  9016                                  	;RESTORE <CX>
  9017 00001293 59                      	pop	cx
  9018 00001294 C3                      	retn
  9019                                  
  9020                                  ;Break	<TableDispatch - dispatch to a table>
  9021                                  ;----------------------------------------------------------------------------
  9022                                  ;
  9023                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9024                                  ;   routine. Preserve all input registers to the routine.
  9025                                  ;
  9026                                  ;   Inputs:	Push	return address
  9027                                  ;		Push	Table address
  9028                                  ;		Push	index (byte)
  9029                                  ;   Outputs:	appropriate routine gets jumped to.
  9030                                  ;		return indicates invalid index
  9031                                  ;   Registers modified: none.
  9032                                  ;----------------------------------------------------------------------------
  9033                                  
  9034                                  struc TFrame	 ; TableFrame
  9035 00000000 ????                    .OldBP:	 resw 1  ; 0
  9036 00000002 ????                    .OldRet: resw 1  ; 2
  9037 00000004 ??                      .Index:	 resb 1  ; 4
  9038 00000005 ??                      .Pad:	 resb 1  ; 5  
  9039 00000006 ????                    .Tab:	 resw 1  ; 6
  9040 00000008 ????                    .NewRet: resw 1  ; 8
  9041                                  endstruc
  9042                                  
  9043                                  TableDispatch:
  9044 00001295 55                      	PUSH	BP
  9045 00001296 89E5                    	MOV	BP,SP
  9046 00001298 53                      	PUSH	BX			; save BX
  9047                                  	;mov	bx,[bp+6]
  9048 00001299 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9049 0000129C 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9050                                  	;cmp	[bp+4],bl
  9051 0000129F 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9052 000012A2 7317                    	JAE	short TableError	; yes
  9053                                  	;mov	bl,[bp+4]
  9054 000012A4 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9055 000012A7 30FF                    	XOR	BH,BH			; convert to word
  9056 000012A9 D1E3                    	SHL	BX,1			; convert to word pointer
  9057 000012AB 43                      	INC	BX			; point past first length byte
  9058                                  	; 17/08/2018
  9059                                  	;add	bx,[bp+6]
  9060 000012AC 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9061 000012AF 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9062                                  	;mov	[bp+6],bx
  9063 000012B2 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9064 000012B5 5B                      	POP	BX			; restore BX
  9065 000012B6 5D                      	POP	BP			; restore BP
  9066 000012B7 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9067 000012BA C3                      	retn				; do operation
  9068                                  TableError:
  9069 000012BB 5B                      	POP	BX			; restore BX
  9070 000012BC 5D                      	POP	BP			; restore BP
  9071 000012BD C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9072                                  
  9073                                  
  9074                                  ;Break	<TestNet - determine if a CDS is for the network>
  9075                                  ;----------------------------------------------------------------------------
  9076                                  ;
  9077                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9078                                  ;	network CDS. This will handle NULL cds also.
  9079                                  ;
  9080                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9081                                  ;   Outputs:	ES:DI = ThisCDS
  9082                                  ;		carry Set => network
  9083                                  ;		carry Clear => local
  9084                                  ;   Registers modified: none.
  9085                                  ;----------------------------------------------------------------------------
  9086                                  
  9087                                  TestNet:
  9088                                  	;LES	DI,[CS:THISCDS]
  9089                                  
  9090                                  	; 16/05/2019 - Retro DOS v4.0
  9091 000012C0 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9092 000012C5 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9093 000012CA 83FFFF                  	CMP	DI,-1
  9094 000012CD 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9095                                  	;;test	word [es:di+43h],8000h
  9096                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9097                                  	;test	byte [es:di+44h],80h
  9098 000012CF 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9099 000012D4 7501                    	JNZ	short CMCRet		; jump has carry clear
  9100 000012D6 C3                      	retn				; carry is clear
  9101                                  CMCRet: 
  9102 000012D7 F5                      	CMC
  9103 000012D8 C3                      	retn
  9104                                  
  9105                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9106                                  ;----------------------------------------------------------------------------
  9107                                  ;
  9108                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9109                                  ;	network file.
  9110                                  ;
  9111                                  ;   Inputs:	ES:DI point to SFT
  9112                                  ;   Outputs:	Zero set if not network sft
  9113                                  ;		zero reset otherwise
  9114                                  ;		Carry CLEAR!!!
  9115                                  ;   Registers modified: none.
  9116                                  ;----------------------------------------------------------------------------
  9117                                  
  9118                                  IsSFTNet:
  9119                                  	;;test	word [es:di+5],8000h
  9120                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9121                                  	; 16/05/2019 
  9122                                  	;test	byte [es:di+6],80h
  9123 000012D9 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9124 000012DE C3                      	retn
  9125                                  
  9126                                  ;Break	<FastInit - Initialize FastTable entries >
  9127                                  ;----------------------------------------------------------------------------
  9128                                  ;   DOS 4.00   2/9/87
  9129                                  ;   FastInit  - initialize the FASTXXX routine entry
  9130                                  ;		  in the FastTable
  9131                                  ;
  9132                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9133                                  ;		DS:SI = address of FASTXXX routine entry
  9134                                  ;		   SI = -1 for query only
  9135                                  ;   Outputs:	Carry flag clear, if success
  9136                                  ;		Carry flag set,   if failure
  9137                                  ;
  9138                                  ;
  9139                                  ;----------------------------------------------------------------------------
  9140                                  
  9141                                  ;Procedure FastInit,NEAR
  9142                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9143                                  
  9144                                  ;	; MSDOS 3.3
  9145                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9146                                  ;FastInit:
  9147                                  ;	mov	di,FastTable ; FastOpenTable
  9148                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9149                                  ;	mov	bx,cs			; get DOS segment
  9150                                  ;	cmp	ax,bx			; first time installed ?	
  9151                                  ;	je	short ok_install	; yes
  9152                                  ;	stc				; set carry
  9153                                  ;	retn				; (cf=1 means) already installed !
  9154                                  ;
  9155                                  ;ok_install:
  9156                                  ;	mov	bx,FastTable ; FastOpenTable
  9157                                  ;	mov	cx,ds
  9158                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9159                                  ;	mov	[cs:bx+4],cx
  9160                                  ;	mov	[cs:bx+2],si
  9161                                  ;	retn
  9162                                  
  9163                                  ; 16/05/2019 - Retro DOS v4.0
  9164                                  
  9165                                  FastInit:
  9166                                  	; MSDOS 6.0
  9167                                  	;hkn; set up es to dosdataseg.
  9168 000012DF 06                      	push	es
  9169                                  	;getdseg <es>			; es -> dosdata
  9170 000012E0 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9171                                  
  9172                                  	;hkn; FastTable is in DOSDATA
  9173 000012E5 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9174 000012E8 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9175 000012E9 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9176 000012EB D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9177 000012ED D1E3                    	SHL	BX,1			;AN000;FO.
  9178 000012EF 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9179 000012F1 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9180                                  fcheck: 				;AN000;
  9181 000012F5 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9182 000012F7 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9183 000012F9 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9184 000012FB 09C0                    	OR	AX,AX			;AN000;FO.;
  9185 000012FD 7403                    	JZ	short ok_install	;AN000;FO.;
  9186 000012FF F9                      	STC				;AN000;FO.;; already installed !
  9187 00001300 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9188                                  ok_install:				;AN000;
  9189 00001302 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9190 00001305 7412                    	JZ	short FSret		;AN000;FO.; yes
  9191 00001307 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9192 00001309 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9193 0000130D 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9194                                  
  9195                                  ;hkn; FastFlg moved to DOSDATA
  9196 00001310 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9197 00001313 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9198                                  	;or	byte [es:di],80h
  9199 00001315 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9200                                  FSret:					;AN000;
  9201 00001319 07                      	pop	es
  9202 0000131A C3                      	retn				;AN000;FO.
  9203                                  
  9204                                  ;EndProc FastInit
  9205                                  
  9206                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9207                                  ;----------------------------------------------------------------------------
  9208                                  ;   DOS 3.3   6/10/86
  9209                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9210                                  ;
  9211                                  ;   Inputs:	None
  9212                                  ;   Outputs:	AX = -1 and carry flag set
  9213                                  ;
  9214                                  ;   Registers modified: none.
  9215                                  ;----------------------------------------------------------------------------
  9216                                  
  9217                                  FastRet:
  9218                                  	;mov	ax,-1
  9219                                  	;stc
  9220                                  	;retf
  9221 0000131B F9                      	STC
  9222 0000131C 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9223 0000131E CB                      	RETF
  9224                                  
  9225                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9226                                  ;----------------------------------------------------------------------------
  9227                                  ;   DOS 3.3   6/10/86
  9228                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9229                                  ;
  9230                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9231                                  ;   Outputs:	same output as $OPEN
  9232                                  ;
  9233                                  ;----------------------------------------------------------------------------
  9234                                  
  9235                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9236                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9237                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9238                                  
  9239                                  NLS_OPEN:
  9240                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9241                                  ;	MOV	BYTE [CPSWFLAG],0
  9242                                  ;	PUSH	BX		 ; save current state
  9243                                  
  9244 0000131F 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9245 00001321 E8E75C                  	call	_$OPEN
  9246                                  
  9247                                  ;	POP	BX		 ; restore current state
  9248                                  ;	MOV	[CPSWFLAG],BL
  9249 00001324 C3                      	RETN
  9250                                  
  9251                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9252                                  ;----------------------------------------------------------------------------
  9253                                  ;   DOS 3.3   6/10/86
  9254                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9255                                  ;
  9256                                  ;   Inputs:	BP = open mode
  9257                                  ;   Outputs:	same output as $LSEEK
  9258                                  ;
  9259                                  ;----------------------------------------------------------------------------
  9260                                  
  9261                                  ; 16/05/2019 - Retro DOS v4.0
  9262                                  
  9263                                  NLS_LSEEK:
  9264 00001325 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9265 0000132A 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9266 0000132F E81000                  	CALL	Fake_User_Stack
  9267 00001332 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9268 00001334 E87C56                  	call	_$LSEEK
  9269 00001337 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9270 0000133C 368F06[8405]            	POP	word [SS:USER_SP]
  9271 00001341 C3                      	RETN
  9272                                  
  9273                                  ;Break	<Fake_User_Stack - save user stack>
  9274                                  ;----------------------------------------------------------------------------
  9275                                  ;   DOS 3.3   6/10/86
  9276                                  ;   Fake_User_Stack - save user stack pointer
  9277                                  ;
  9278                                  ;----------------------------------------------------------------------------
  9279                                  
  9280                                  Fake_User_Stack:
  9281 00001342 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9282 00001346 36A3[8405]              	MOV	[SS:USER_SP],AX
  9283 0000134A 8CD0                    	MOV	AX,SS
  9284 0000134C 36A3[8605]              	MOV	[SS:USER_SS],AX
  9285 00001350 C3                      	RETN
  9286                                  
  9287                                  ;Break	<GetDevList - get device header list pointer>
  9288                                  ;----------------------------------------------------------------------------
  9289                                  ;   DOS 3.3   7/25/86
  9290                                  ;   GetDevList - get device header list pointer
  9291                                  ;
  9292                                  ;   Output: AX:BX points to the device header list
  9293                                  ;----------------------------------------------------------------------------
  9294                                  
  9295                                  GetDevList:
  9296                                  	; 16/05/2019 - Retro DOS v4.0
  9297 00001351 BE[280D]                	MOV	SI,SysInitTable
  9298 00001354 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9299 00001359 C534                    	LDS	SI,[SI]
  9300                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9301 0000135B 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9302                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9303 0000135E 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9304 00001361 C3                      	RETN
  9305                                  
  9306                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9307                                  ;----------------------------------------------------------------------------
  9308                                  ;   DOS 3.3   7/25/86
  9309                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9310                                  ;
  9311                                  ;   Inputs:	BP = function code 0CH
  9312                                  ;   Outputs:	same output as generic $IOCTL
  9313                                  ;
  9314                                  ;----------------------------------------------------------------------------
  9315                                  
  9316                                  NLS_IOCTL:
  9317                                  	; 16/05/2019 - Retro DOS v4.0
  9318 00001362 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9319 00001367 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9320 0000136C E8D3FF                  	CALL	Fake_User_Stack
  9321 0000136F 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9322 00001371 E8990F                  	call	_$IOCTL
  9323 00001374 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9324 00001379 368F06[8405]            	POP	word [SS:USER_SP]
  9325 0000137E C3                      	RETN
  9326                                  
  9327                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9328                                  ;----------------------------------------------------------------------------
  9329                                  ;   DOS 3.3   7/25/86
  9330                                  ;   NLS_GETEXT	-
  9331                                  ;
  9332                                  ;   Inputs:	none
  9333                                  ;   Outputs:	AX = extended error
  9334                                  ;
  9335                                  ;----------------------------------------------------------------------------
  9336                                  
  9337                                  NLS_GETEXT:
  9338                                  	; 16/05/2019 - Retro DOS v4.0
  9339 0000137F 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9340 00001383 C3                      	RETN
  9341                                  
  9342                                  ; 29/04/2019 - Retro DOS v4.0
  9343                                  
  9344                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9345                                  
  9346                                  ;----------------------------------------------------------------------------
  9347                                  ;   DOS 4.00
  9348                                  ;
  9349                                  ;   Inputs:	DL=0 get extended error message addr
  9350                                  ;		  =1 set extended error message addr
  9351                                  ;		  =2 get parser error message addr
  9352                                  ;		  =3 set parser error message addr
  9353                                  ;		  =4 get critical error message addr
  9354                                  ;		  =5 set critical error message addr
  9355                                  ;		  =6 get file system error message addr
  9356                                  ;		  =7 set file system error message addr
  9357                                  ;		  =8 get address for code reduction
  9358                                  ;		  =9 set address for code reduction
  9359                                  ;   Function:	get/set message address
  9360                                  ;   Outputs:	ES:DI points to addr when get
  9361                                  ;----------------------------------------------------------------------------
  9362                                  
  9363                                  ;Procedure MSG_RETRIEVAL,NEAR
  9364                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9365                                  
  9366                                  MSG_RETRIEVAL:
  9367                                  
  9368                                  ;;	NOTE:  This function lives in command.com resident code now.
  9369                                  ;;	If the int 2F ever gets this far, we'll return registers
  9370                                  ;;	unchanged, which produces the same result as before, if
  9371                                  ;;	command.com wasn't present (and therefore no messages available).
  9372                                  ;;
  9373                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9374                                  ;;	No_Op zeroes AL.
  9375                                  ;;
  9376                                  ;;;hkn; set up ds to point to DOSDATA
  9377                                  ;;	push	ds
  9378                                  ;;	getdseg	<ds>			; ds -> dosdata
  9379                                  ;;
  9380                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9381                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9382                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9383                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9384                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9385                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9386                                  ;;	DEC	AL		    ;AN000;;MS.
  9387                                  ;;toget:				    ;AN000;
  9388                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9389                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9390                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9391                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9392                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9393                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9394                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9395                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9396                                  ;;getget: 				     ;AN000;
  9397                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9398                                  ;;MSGret: 				     ;AN000;
  9399                                  ;;	POP	SI			     ;AN000;;MS.
  9400                                  ;;	POP	AX			     ;AN000;;MS.
  9401                                  ;;
  9402                                  ;;	pop	ds
  9403                                  
  9404                                  ;	return				     ;AN000;;MS. exit
  9405 00001384 C3                      	retn	; 29/04/2019
  9406                                  
  9407                                  ;============================================================================
  9408                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9409                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9410                                  ;============================================================================
  9411                                  ; 20/07/2018 - Retro DOS v3.0
  9412                                  
  9413                                  ;	; MSDOS 3.3
  9414                                  ;	; 08/08/2018 - Retro DOS v3.0
  9415                                  ;ECritMEM:
  9416                                  ;ECritSFT:
  9417                                  ;	;
  9418                                  ;ECritDisk:
  9419                                  ;	retn
  9420                                  ;	;push	ax
  9421                                  ;	
  9422                                  ;	mov	ax,8001h
  9423                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9424                                  ;			; AL = critical section number (00h-0Fh)
  9425                                  ;	pop	ax
  9426                                  ;	retn
  9427                                  ;
  9428                                  ;	; MSDOS 3.3
  9429                                  ;	; 08/08/2018 - Retro DOS v3.0
  9430                                  ;LCritMEM:
  9431                                  ;LCritSFT:
  9432                                  ;	;
  9433                                  ;LCritDisk:
  9434                                  ;	retn
  9435                                  ;	;push	ax
  9436                                  ;	
  9437                                  ;	mov	ax,8101h
  9438                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9439                                  ;			; AL = critical section number (00h-0Fh)
  9440                                  ;	pop	ax
  9441                                  ;	retn
  9442                                  ;
  9443                                  ;ECritDevice:
  9444                                  ;	retn
  9445                                  ;	;push	ax
  9446                                  ;	
  9447                                  ;	mov	ax,8002h
  9448                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9449                                  ;			; AL = critical section number (00h-0Fh)
  9450                                  ;	pop	ax
  9451                                  ;	retn
  9452                                  ;
  9453                                  ;LCritDevice:
  9454                                  ;	retn
  9455                                  ;	;push	ax
  9456                                  ;	
  9457                                  ;	mov	ax,8102h
  9458                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9459                                  ;			; AL = critical section number (00h-0Fh)
  9460                                  ;	pop	ax
  9461                                  ;	retn
  9462                                  
  9463                                  ;============================================================================
  9464                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9465                                  ;============================================================================
  9466                                  ; 12/05/2019 - Retro DOS v4.0
  9467                                  
  9468                                  ; Critical Section Routines
  9469                                  
  9470                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9471                                  
  9472                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9473                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9474                                  
  9475                                  ; ---------------------------------------------------------------------------
  9476                                  ; Each handler must leave everything untouched; including flags!
  9477                                  ;
  9478                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9479                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9480                                  ; ---------------------------------------------------------------------------
  9481                                  
  9482                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9483                                  ; ---------------------------------------------------------------------------
  9484                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9485                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9486                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9487                                  ; ---------------------------------------------------------------------------
  9488                                  
  9489                                  ;%macro POPFF 0
  9490                                  ;	jmp	$+3
  9491                                  ;	iret
  9492                                  ;	push	cs
  9493                                  ;	call	$-2
  9494                                  ;%endmacro
  9495                                  
  9496                                  ; ---------------------------
  9497                                  
  9498                                  ;Procedure  ECritDisk,NEAR
  9499                                  	;public  ECritMEM
  9500                                  	;public  ECritSFT
  9501                                  ECritMEM:
  9502                                  ECritSFT:
  9503                                  ;
  9504                                  ECritDisk:
  9505                                  
  9506                                  ;SR; Check if critical section is to be entered
  9507                                  
  9508 00001385 9C                      	pushf
  9509 00001386 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9510 0000138C 740D                    	jz	short ECritDisk_2
  9511                                  
  9512                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9513                                  ;	;popff  ; * (macro)
  9514                                  ;	jmp	short ECritDisk_1 ; *
  9515                                  ;
  9516                                  ;ECritDisk_iret: ; *
  9517                                  ;	iret ; *
  9518                                  
  9519                                  	; 16/12/2022
  9520                                  	; 13/11/2022
  9521                                  	;jmp	short ECritDisk_1
  9522                                  	; 06/11/2022
  9523                                  ;ECritDisk_iret:
  9524                                  ;	iret	
  9525                                  
  9526                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9527                                  ECritDisk_1:
  9528 0000138E 0E                      	push	cs ; *
  9529 0000138F E80800                  	call	ECritDisk_iret ; *		
  9530                                  	
  9531                                  ECritDisk_0:
  9532 00001392 50                      	PUSH    AX
  9533                                  	;MOV	AX,8000h+critDisk
  9534                                  	;INT	int_IBM
  9535 00001393 B80180                  	mov	ax,8001h
  9536 00001396 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9537                                  			; AL = critical section number (00h-0Fh)
  9538 00001398 58                      	POP     AX
  9539 00001399 C3                      	retn
  9540                                  
  9541                                  	; 16/12/2022
  9542                                  	; 13/11/2022
  9543                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9544                                  LCritDisk_iret: 
  9545 0000139A CF                      	iret
  9546                                  
  9547                                  ECritDisk_2:
  9548                                  	;;popff ; *
  9549                                  	;;retn
  9550                                  ;	jmp	short ECritDisk_3 ; *
  9551                                  ;ECritDisk_iret2: ; *
  9552                                  ;	iret
  9553                                  	
  9554                                  	; 16/12/2022
  9555                                  	; 13/11/2022
  9556                                  	;jmp	short ECritDisk_3
  9557                                  ;ECritDisk_iret2:
  9558                                  	;iret
  9559                                  
  9560                                  ECritDisk_3:
  9561 0000139B 0E                      	push    cs ; *
  9562                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9563                                  	;call	ECritDisk_iret2 ; *
  9564                                  	;retn
  9565                                  	; 16/12/2022
  9566 0000139C E8FBFF                  	call	ECritDisk_iret
  9567 0000139F C3                      	retn
  9568                                  
  9569                                  ;EndProc ECritDisk
  9570                                  
  9571                                  ; ---------------------------
  9572                                  
  9573                                  ;Procedure   LCritDisk,NEAR
  9574                                  	;public  LCritMEM
  9575                                  	;public  LCritSFT
  9576                                  LCritMEM:
  9577                                  LCritSFT:
  9578                                  ;
  9579                                  LCritDisk:
  9580                                  
  9581                                  ;SR; Check if critical section is to be entered
  9582                                  
  9583 000013A0 9C                      	pushf
  9584 000013A1 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9585 000013A7 740C                    	jz	short LCritDisk_2
  9586                                  	;popff  ; * (macro)
  9587                                  ;	jmp	short LCritDisk_1 ; *
  9588                                  ;
  9589                                  ;LCritDisk_iret: ; *
  9590                                  ;	iret ; *
  9591                                  
  9592                                  	; 16/12/2022
  9593                                  	; 13/11/2022
  9594                                  	;jmp	short LCritDisk_1
  9595                                  ;LCritDisk_iret:
  9596                                  	;iret
  9597                                  
  9598                                  LCritDisk_1:
  9599 000013A9 0E                      	push	cs ; *
  9600 000013AA E8EDFF                  	call	LCritDisk_iret ; *		
  9601                                  	
  9602                                  LCritDisk_0:
  9603 000013AD 50                      	PUSH	AX
  9604                                  	;MOV	AX,8100h+critDisk
  9605                                  	;INT	int_IBM
  9606 000013AE B80181                  	mov	ax,8101h
  9607 000013B1 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9608                                  			; AL = critical section number (00h-0Fh)
  9609 000013B3 58                      	POP	AX
  9610 000013B4 C3                      	retn
  9611                                  
  9612                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9613                                  ;	iret
  9614                                  
  9615                                  LCritDisk_2:
  9616                                  	;;popff ; *
  9617                                  	;;retn
  9618                                  ;	jmp	short LCritDisk_3 ; *
  9619                                  ;LCritDisk_iret2: ; *
  9620                                  ;	iret
  9621                                  
  9622                                  	; 16/12/2022
  9623                                  	; 13/11/2022
  9624                                  	;jmp	short LCritDisk_3
  9625                                  ;LCritDisk_iret2:
  9626                                  	;iret
  9627                                  
  9628                                  LCritDisk_3:
  9629 000013B5 0E                      	push    cs ; *
  9630                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9631                                  	;call	LCritDisk_iret2 ; *
  9632                                  	;retn
  9633                                  	; 16/12/2022
  9634 000013B6 E8E1FF                  	call	LCritDisk_iret
  9635 000013B9 C3                      	retn
  9636                                  
  9637                                  ;EndProc LCritDisk
  9638                                  
  9639                                  ; ---------------------------
  9640                                  
  9641                                  ;Procedure   ECritDevice,NEAR
  9642                                  
  9643                                  ECritDevice:
  9644                                  
  9645                                  ;SR; Check if critical section is to be entered
  9646                                  
  9647 000013BA 9C                      	pushf
  9648 000013BB 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9649 000013C1 740D                    	jz	short ECritDevice_2
  9650                                  	;popff  ; * (macro)
  9651                                  ;	jmp	short ECritDevice_1 ; *
  9652                                  ;
  9653                                  ;ECritDevice_iret: ; *
  9654                                  ;	iret ; *
  9655                                  
  9656                                  	; 16/12/2022	
  9657                                  	; 13/11/2022
  9658                                  	;jmp	short ECritDevice_1
  9659                                  ;ECritDevice_iret:
  9660                                  	;iret
  9661                                  
  9662                                  ECritDevice_1:
  9663 000013C3 0E                      	push	cs ; *
  9664 000013C4 E80800                  	call	ECritDevice_iret ; *		
  9665                                  	
  9666                                  ECritDevice_0:
  9667 000013C7 50                      	PUSH	AX
  9668                                  	;MOV	AX,8000h+critDevice
  9669                                  	;INT	int_IBM
  9670 000013C8 B80280                  	mov	ax,8002h
  9671 000013CB CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9672                                  			; AL = critical section number (00h-0Fh)
  9673 000013CD 58                      	POP     AX
  9674 000013CE C3                      	retn
  9675                                  
  9676                                  	; 16/12/2022
  9677                                  	; 06/12/2022
  9678                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9679                                  LCritDevice_iret: 
  9680 000013CF CF                      	iret
  9681                                  
  9682                                  ECritDevice_2:
  9683                                  	;;popff ; *
  9684                                  	;;retn
  9685                                  ;	jmp	short ECritDevice_3 ; *
  9686                                  ;ECritDevice_iret2: ; *
  9687                                  ;	iret
  9688                                  
  9689                                  	; 16/12/2022
  9690                                  	; 13/11/2022
  9691                                  	;jmp	short ECritDevice_3
  9692                                  ;ECritDevice_iret2:
  9693                                  	;iret
  9694                                  
  9695                                  ECritDevice_3:
  9696 000013D0 0E                      	push    cs ; *
  9697                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9698                                  	;call	ECritDevice_iret2 ; *
  9699                                  	;retn
  9700                                  	; 16/12/2022
  9701 000013D1 E8FBFF                  	call	ECritDevice_iret
  9702 000013D4 C3                      	retn
  9703                                  
  9704                                  ;EndProc ECritDevice
  9705                                  
  9706                                  ; ---------------------------
  9707                                  
  9708                                  ;Procedure   LCritDevice,NEAR
  9709                                  
  9710                                  LCritDevice:
  9711                                  
  9712                                  ;SR; Check if critical section is to be entered
  9713                                  
  9714 000013D5 9C                      	pushf
  9715 000013D6 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9716 000013DC 740C                    	jz	short LCritDevice_2
  9717                                  	;popff  ; * (macro)
  9718                                  ;	jmp	short LCritDevice_1 ; *
  9719                                  ;
  9720                                  ;LCritDevice_iret: ; *
  9721                                  ;	iret ; *
  9722                                  
  9723                                  	; 16/12/2022
  9724                                  	; 13/11/2022
  9725                                  	;jmp	short LCritDevice_1
  9726                                  ;LCritDevice_iret:
  9727                                  	;iret
  9728                                  
  9729                                  LCritDevice_1:
  9730 000013DE 0E                      	push	cs ; *
  9731 000013DF E8EDFF                  	call	LCritDevice_iret ; *		
  9732                                  	
  9733                                  LCritDevice_0:
  9734 000013E2 50                      	PUSH	AX
  9735                                  	;MOV	AX,8100h+critDevice
  9736                                  	;INT	int_IBM
  9737 000013E3 B80281                  	mov	ax,8102h
  9738 000013E6 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9739                                  			; AL = critical section number (00h-0Fh)
  9740 000013E8 58                      	POP     AX
  9741 000013E9 C3                      	retn
  9742                                  
  9743                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9744                                  ;	iret
  9745                                  
  9746                                  LCritDevice_2:
  9747                                  	;;popff ; *
  9748                                  	;;retn
  9749                                  ;	jmp	short LCritDevice_3 ; *
  9750                                  ;LCritDevice_iret2: ; *
  9751                                  ;	iret
  9752                                  
  9753                                  	; 16/12/2022
  9754                                  	; 13/11/2022
  9755                                  	;jmp	short LCritDevice_3
  9756                                  ;LCritDevice_iret2:
  9757                                  	;iret
  9758                                  
  9759                                  LCritDevice_3:
  9760 000013EA 0E                      	push    cs ; *
  9761                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9762                                  	;call	LCritDevice_iret2 ; *
  9763                                  	;retn
  9764                                  	; 16/12/2022
  9765 000013EB E8E1FF                  	call	LCritDevice_iret
  9766 000013EE C3                      	retn
  9767                                  
  9768                                  ;EndProc LCritDevice
  9769                                  
  9770                                  ;============================================================================
  9771                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9772                                  ;============================================================================
  9773                                  ; 20/07/2018 - Retro DOS v3.0
  9774                                  
  9775                                  ;============================================================================
  9776                                  ; STDIO.ASM - (MSDOS 2.0)
  9777                                  ;============================================================================
  9778                                  
  9779                                  ;
  9780                                  ; Standard device IO for MSDOS (first 12 function calls)
  9781                                  ;
  9782                                  
  9783                                  ;.xlist
  9784                                  ;.xcref
  9785                                  ;INCLUDE STDSW.ASM
  9786                                  ;INCLUDE DOSSEG.ASM
  9787                                  ;.cref
  9788                                  ;.list
  9789                                  
  9790                                  ;TITLE   STDIO - device IO for MSDOS
  9791                                  ;NAME    STDIO
  9792                                  
  9793                                  ;INCLUDE IO.ASM
  9794                                  
  9795                                  ; ---------------------------------------------------------------------------
  9796                                  ;
  9797                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9798                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9799                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9800                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9801                                  ;			    to restore MSDOS 2.0 device IO source code 
  9802                                  ;
  9803                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9804                                  	
  9805                                  ;============================================================================
  9806                                  ; STDIO.ASM - (MSDOS 2.0)
  9807                                  ;============================================================================
  9808                                  
  9809                                  ;
  9810                                  ; Standard device IO for MSDOS (first 12 function calls)
  9811                                  ;
  9812                                  
  9813                                  ;.xlist
  9814                                  ;.xcref
  9815                                  ;INCLUDE STDSW.ASM
  9816                                  ;INCLUDE DOSSEG.ASM
  9817                                  ;.cref
  9818                                  ;.list
  9819                                  
  9820                                  ;TITLE   STDIO - device IO for MSDOS
  9821                                  ;NAME    STDIO
  9822                                  
  9823                                  ;INCLUDE IO.ASM
  9824                                  
  9825                                  ; ---------------------------------------------------------------------------
  9826                                  ;
  9827                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9828                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9829                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9830                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9831                                  ;			    to restore MSDOS 2.0 device IO source code 
  9832                                  ;
  9833                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9834                                  ;
  9835                                  ;============================================================================
  9836                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9837                                  ;============================================================================
  9838                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9839                                  
  9840                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9841                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9842                                  
  9843                                  ;============================================================================
  9844                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9845                                  ;============================================================================
  9846                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9847                                  
  9848                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9849                                  
  9850                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9851                                  ;
  9852                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9853                                  ;	NAME	IBMCPMIO
  9854                                  
  9855                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9856                                  ;
  9857                                  ;	$Std_Con_Input_No_Echo
  9858                                  ;	$Std_Con_String_Output
  9859                                  ;	$Std_Con_String_Input
  9860                                  ;	$RawConIO
  9861                                  ;	$RawConInput
  9862                                  ;	RAWOUT
  9863                                  ;	RAWOUT2
  9864                                  ;
  9865                                  
  9866                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9867                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9868                                  ; references to be SS or CS relative which is desired.
  9869                                  
  9870                                  ; ---------------------------------------------------------------------------
  9871                                  
  9872                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9873                                  ;	NAME	CPMIO2
  9874                                  
  9875                                  ;
  9876                                  ;	Microsoft Confidential
  9877                                  ;	Copyright (C) Microsoft Corporation 1991
  9878                                  ;	All Rights Reserved.
  9879                                  ;
  9880                                  
  9881                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9882                                  ;
  9883                                  ;	$Std_Con_Input
  9884                                  ;	$Std_Con_Output
  9885                                  ;	OUTT
  9886                                  ;	TAB
  9887                                  ;	BUFOUT
  9888                                  ;	$Std_Aux_Input
  9889                                  ;	$Std_Aux_Output
  9890                                  ;	$Std_Printer_Output
  9891                                  ;	$Std_Con_Input_Status
  9892                                  ;	$Std_Con_Input_Flush
  9893                                  ;
  9894                                  ;	Revision History:
  9895                                  ;
  9896                                  ;	  AN000	 version 4.00 - Jan. 1988
  9897                                  
  9898                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9899                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9900                                  ; references to be SS or CS relative which is desired.
  9901                                  
  9902                                  ;DOSCODE SEGMENT
  9903                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9904                                  
  9905                                  
  9906                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9907                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9908                                  ;hkn;	not valid. 
  9909                                  
  9910                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9911                                  ; 08/11/2022
  9912                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9913                                  
  9914                                  ;
  9915                                  ;----------------------------------------------------------------------------
  9916                                  ;
  9917                                  ; Procedure : $Std_Con_Input_No_Echo
  9918                                  ;
  9919                                  ;----------------------------------------------------------------------------
  9920                                  ;
  9921                                  
  9922                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9923                                  
  9924                                  ; Inputs:
  9925                                  ;	None
  9926                                  ; Function:
  9927                                  ;	Input character from console, no echo
  9928                                  ; Returns:
  9929                                  ;	AL = character
  9930                                  
  9931 000013EF 1E                      	push	ds
  9932 000013F0 56                      	push	si
  9933                                  INTEST:
  9934 000013F1 E8853E                  	call	STATCHK
  9935 000013F4 753B                    	jnz	short GET ; 08/09/2018
  9936                                  ;*************************************************************************
  9937                                  ;hkn; SS override
  9938 000013F6 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9939 000013FC 7505                    	jnz	short no_sys_wait
  9940 000013FE B405                    	mov	ah,5			; get input status with system wait
  9941 00001400 E88031                  	call	IOFUNC
  9942                                  no_sys_wait:
  9943                                  ;**************************************************************************
  9944 00001403 B484                    	MOV	AH,84h
  9945 00001405 CD2A                    	INT	int_IBM	 ; int 2Ah
  9946                                  
  9947                                  ;;; 7/15/86  update the date in the idle loop
  9948                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9949                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9950                                  
  9951                                  ;hkn; SS override
  9952 00001407 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9953 0000140D 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9954                                  
  9955 0000140F 50                      	PUSH	AX
  9956 00001410 53                      	PUSH	BX			; following is tricky,
  9957 00001411 51                      	PUSH	CX			; it may be called by critical handler
  9958 00001412 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9959                                  					; other's READ or WRITE
  9960 00001413 1E                      	PUSH	DS			; save DS = SFT's segment
  9961                                  
  9962                                  ;hkn; READTIME must use ds = DOSDATA
  9963                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9964                                  
  9965 00001414 16                      	PUSH	SS ; 04/05/2019
  9966 00001415 1F                      	POP	DS
  9967                                  
  9968 00001416 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9969 00001419 E89B02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9970                                  	;invoke	READTIME		; readtime
  9971 0000141C E851F7                  	call	READTIME
  9972 0000141F B80100                  	MOV	AX,1
  9973 00001422 E89202                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9974                                  
  9975                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9976                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9977                                  ;	push	bx
  9978                                  ;	mov	bx,DATE_FLAG
  9979                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9980                                  ;	cmp	word [cs:bx],5872h
  9981                                  ;	jz	short FETCHI_TAG_chk_ok
  9982                                  ;	call	DOSINIT
  9983                                  ;FETCHI_TAG_chk_ok:
  9984                                  ;	pop	bx
  9985                                  
  9986 00001425 1F                      	POP	DS			; restore DS
  9987 00001426 5A                      	POP	DX
  9988 00001427 59                      	POP	CX
  9989 00001428 5B                      	POP	BX
  9990 00001429 58                      	POP	AX
  9991                                  NoUpdate:
  9992                                  
  9993                                  ;hkn; SS override
  9994 0000142A 36FF06[910D]            	INC	word [SS:DATE_FLAG]
  9995                                  
  9996                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9997 0000142F EBC0                    	JMP	short INTEST
  9998                                  GET:
  9999 00001431 30E4                    	XOR	AH,AH
 10000 00001433 E84D31                  	call	IOFUNC
 10001 00001436 5E                      	POP	SI
 10002 00001437 1F                      	POP	DS
 10003                                  ;;; 7/15/86
 10004                                  
 10005                                  ;hkn; SS override
 10006                                  	; MSDOS 6.0
 10007 00001438 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10008                                  	;
 10009 0000143E 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10010 00001440 7506                    	JNZ	short noscan
 10011                                  
 10012                                  ;hkn; SS override
 10013 00001442 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10014                                  noscan:
 10015 00001448 C3                      	retn
 10016                                  ;
 10017                                  ;----------------------------------------------------------------------------
 10018                                  ;
 10019                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10020                                  ;
 10021                                  ;
 10022                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10023                                  ;	EXIT	none
 10024                                  ;	USES	ALL
 10025                                  ;
 10026                                  ;----------------------------------------------------------------------------
 10027                                  ;
 10028                                  
 10029                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10030                                  
 10031 00001449 89D6                    	mov	si,dx
 10032                                  STRING_OUT1:	
 10033 0000144B AC                      	lodsb
 10034 0000144C 3C24                    	cmp	al,'$'
 10035 0000144E 74F8                    	je	short noscan
 10036                                  NEXT_STR1:
 10037 00001450 E89002                  	call	OUTT
 10038                                  
 10039 00001453 EBF6                    	jmp	short STRING_OUT1
 10040                                  
 10041                                  ;----------------------------------------------------------------------------
 10042                                  ;
 10043                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10044                                  ;
 10045                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10046                                  ;
 10047                                  ;	ENTRY	(ds:dx) = input buffer
 10048                                  ;	EXIT	none
 10049                                  ;	USES	ALL
 10050                                  ;
 10051                                  ;----------------------------------------------------------------------------
 10052                                  
 10053                                  _$STD_CON_STRING_INPUT:		;System call 10
 10054                                  
 10055 00001455 8CD0                    	mov	ax,ss
 10056 00001457 8EC0                    	mov	es,ax
 10057 00001459 89D6                    	mov	si,dx
 10058 0000145B 30ED                    	xor	ch,ch
 10059 0000145D AD                      	lodsw
 10060                                  
 10061                                  ;	(AL) = the buffer length
 10062                                  ;	(AH) = the template length
 10063                                  
 10064 0000145E 08C0                            or	al,al
 10065 00001460 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10066 00001462 88E3                    	mov	bl,ah		;Init template counter
 10067 00001464 88EF                            mov	bh,ch		;Init template counter
 10068                                  
 10069                                  ;	(BL) = the number of bytes in the template
 10070                                  
 10071 00001466 38D8                            cmp	al,bl
 10072 00001468 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10073 0000146A 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10074 0000146D 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10075                                  
 10076                                  ; The number of chars in the template is >= the number of chars in buffer or
 10077                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10078                                  ; of affairs.  Pretend that the template was empty:
 10079                                  ;
 10080                                  
 10081                                  NOEDIT:	
 10082 0000146F 88EB                    	mov	bl,ch		;Reset buffer
 10083                                  EDITON: 
 10084 00001471 88C2                    	mov	dl,al
 10085 00001473 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10086                                  
 10087                                  ;	Top level. We begin to read a line in.
 10088                                  
 10089                                  NEWLIN: 
 10090 00001474 36A0[F901]              	mov	al,[SS:CARPOS]
 10091 00001478 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10092                                  
 10093 0000147C 56                      	push	si
 10094 0000147D BF[FB01]                	mov	di,INBUF ;Build the new line here
 10095 00001480 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10096 00001485 88EF                    	mov	bh,ch		;No chars from template yet
 10097 00001487 88EE                    	mov	dh,ch		;No chars to new line yet
 10098 00001489 E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10099 0000148C 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10100 0000148E 7503                    	jnz	short GOTCH
 10101                                  
 10102                                  ;	This is the main loop of reading in a character and processing it.
 10103                                  ;
 10104                                  ;	(BH) = the index of the next byte in the template
 10105                                  ;	(BL) = the length of the template
 10106                                  ;	(DH) = the number of bytes in the buffer
 10107                                  ;	(DL) = the length of the buffer
 10108                                  
 10109                                  GETCH:
 10110 00001490 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10111                                  GOTCH:
 10112                                  ;
 10113                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10114                                  ; input queue.
 10115                                  ;
 10116 00001493 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10117 00001495 74F9                    	jz	short GETCH
 10118                                  
 10119                                  ;	If the leading char is the function-key lead byte
 10120                                  
 10121                                  	;cmp	al,[SS:ESCCHAR]
 10122                                  
 10123                                  	; 04/05/2019 - Retro DOS v4.0
 10124                                  
 10125                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10126                                  
 10127 00001497 2E3A06[6E0A]            	CMP	AL,[cs:ESCCHAR]
 10128 0000149C 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10129                                  
 10130                                  ;	Rubout and ^H are both destructive backspaces.
 10131                                  
 10132 0000149E 3C7F                            cmp	al,c_DEL ; 7FH
 10133 000014A0 742E                            jz	short BACKSPJ
 10134 000014A2 3C08                            cmp	al,c_BS  ; 8
 10135 000014A4 742A                            jz	short BACKSPJ
 10136                                  
 10137                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10138                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10139                                  	;	   	after CMP and a CMP again!
 10140                                  	;		
 10141                                  	;		-It would be better if they use a 'JMP short' to 
 10142                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10143                                  	;		between them. Then, they would be able use a patch
 10144                                  	;		between 5271h and 5279h when if it will be required.
 10145                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10146                                  	;	
 10147                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10148                                  
 10149                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10150                                  	;
 10151                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10152                                  
 10153                                  ;DOSCODE:526D	cmp     al, 8
 10154                                  ;DOSCODE:526F	jz      short BACKSPJ
 10155                                  ;DOSCODE:5271	cmp     al, 17h
 10156                                  ;DOSCODE:5273	nop
 10157                                  ;DOSCODE:5274	nop
 10158                                  ;DOSCODE:5275	cmp     al, 15h
 10159                                  ;DOSCODE:5277	nop
 10160                                  ;DOSCODE:5278	nop
 10161                                  ;DOSCODE:5279	cmp     al, 0Dh
 10162                                  ;DOSCODE:527B	jz      short ENDLIN
 10163                                  ;DOSCODE:527D	cmp     al, 0Ah
 10164                                  ;DOSCODE:527F	jz      short PHYCRLF
 10165                                  	
 10166                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10167                                  	; DOSCODE:525Dh
 10168                                  
 10169                                  ; 16/12/2022
 10170                                  %if 0
 10171                                  	; MSDOS 6.0
 10172                                  ;	^W deletes backward once and then backs up until a letter is before the
 10173                                  ;	cursor
 10174                                  
 10175                                  	CMP     AL,"W"-"@" ; 17h
 10176                                  
 10177                                  ;	The removal of the comment characters before the jump statement will
 10178                                  ;	cause ^W to backup a word.
 10179                                  
 10180                                  ;***	JZ	short WordDel
 10181                                  	NOP
 10182                                  	NOP
 10183                                  
 10184                                  	CMP     AL,"U"-"@" ; 15h
 10185                                  
 10186                                  ;	The removal of the comment characters before the jump statement will
 10187                                  ;	cause ^U to clear a line.
 10188                                  
 10189                                  ;***	JZ	short LineDel
 10190                                  	NOP
 10191                                  	NOP
 10192                                  
 10193                                  %endif
 10194                                  
 10195                                  ;	CR terminates the line.
 10196                                  
 10197 000014A6 3C0D                            cmp	al,c_CR ; 0Dh
 10198 000014A8 7432                            jz	short ENDLIN
 10199                                  
 10200                                  ;	LF goes to a new line and keeps on reading.
 10201                                  
 10202 000014AA 3C0A                            cmp	al,c_LF ; 0Ah
 10203 000014AC 7444                    	jz	short PHYCRLF
 10204                                  
 10205                                  ;	^X (or ESC) deletes the line and starts over
 10206                                  
 10207                                  	; MSDOS 3.3
 10208                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10209                                  	;jz	short KILNEW
 10210                                  
 10211                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10212                                  
 10213                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10214                                  
 10215 000014AE 2E3A06[6D0A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10216 000014B3 7442                    	jz	short KILNEW
 10217                                  	
 10218                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10219                                  	;jz	short KILNEW
 10220                                  
 10221                                  ; Otherwise, we save the input character.
 10222                                  
 10223                                  SAVCH:	
 10224 000014B5 38D6                    	cmp	dh,dl
 10225 000014B7 7319                    	jnb	short BUFFUL		; buffer is full.
 10226 000014B9 AA                              stosb
 10227 000014BA FEC6                    	inc	dh                      ; increment count in buffer.
 10228 000014BC E8B802                  	call	BUFOUT			; Print control chars nicely
 10229                                  
 10230 000014BF 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10231 000014C5 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10232 000014C7 38DF                            cmp	bh,bl
 10233 000014C9 73C5                            jnb	short GETCH		; no more characters in template
 10234 000014CB 46                              inc	si                      ; Skip to next char in template
 10235 000014CC FEC7                            inc	bh                      ; remember position in template
 10236 000014CE EBC0                            jmp	short GETCH
 10237                                  
 10238                                  BACKSPJ: 
 10239 000014D0 EB38                    	jmp	short BACKSP
 10240                                  
 10241                                  BUFFUL: 
 10242 000014D2 B007                    	mov	al, 7			; Bell to signal full buffer
 10243 000014D4 E80C02                  	call	OUTT
 10244 000014D7 EBB7                    	jmp	short GETCH
 10245                                  
 10246                                  ESCAPE: 
 10247                                  	;transfer OEMFunctionKey
 10248 000014D9 E9BDF5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10249                                  
 10250                                  ENDLIN:
 10251 000014DC AA                              stosb				; Put the CR in the buffer
 10252 000014DD E80302                  	call	OUTT                    ; Echo it
 10253 000014E0 5F                              pop	di                      ; Get start of user buffer
 10254 000014E1 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10255 000014E4 FEC6                            inc	dh			; DH is length including CR
 10256                                  
 10257                                  COPYNEW:
 10258                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10259                                  	;mov	bp, es
 10260                                  	;mov	bx, ds
 10261                                  	;mov	es, bx
 10262                                  	;mov	ds, bp
 10263                                  	;mov	si, INBUF
 10264                                  	;mov	cl, dh
 10265                                  	;rep	movsb
 10266                                  	;retn
 10267                                  
 10268                                  	; CPMIO.ASM (MSDOS 6.0)
 10269                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10270                                  	;SAVE	<DS,ES>
 10271 000014E6 1E                      	PUSH	DS
 10272 000014E7 06                      	PUSH	ES
 10273                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10274 000014E8 1F                      	POP	DS
 10275 000014E9 07                      	POP	ES
 10276                                  
 10277                                  ;;hkn; INBUF is in DOSDATA
 10278 000014EA BE[FB01]                        MOV     SI,INBUF
 10279 000014ED 88F1                            MOV     CL,DH                   ; set up count
 10280 000014EF F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10281                                  OLDBAK_RETN:
 10282 000014F1 C3                              RETN
 10283                                  
 10284                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10285                                  
 10286                                  PHYCRLF:
 10287 000014F2 E82001                  	CALL	CRLF
 10288 000014F5 EB99                            JMP	short GETCH
 10289                                  
 10290                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10291                                  
 10292                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10293                                  
 10294                                  	; Note: Following routines were not used in IBMDOS.COM
 10295                                  	;	-CRTL+W, CRTL+U is not activated-
 10296                                  	;	but they were in the kernel code!?)
 10297                                  
 10298                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10299                                  	; DOSCODE:52B6h
 10300                                  
 10301                                  ;;;;;;;;
 10302                                  
 10303                                  ; 16/12/2022
 10304                                  %if 0
 10305                                  ;
 10306                                  ; Delete the previous line
 10307                                  ;
 10308                                  LineDel:
 10309                                  	OR      DH,DH
 10310                                  	JZ	short GETCH	 ; 06/12/2022
 10311                                  	Call    BackSpace
 10312                                  	JMP	short LineDel
 10313                                  
 10314                                  %endif
 10315                                  
 10316                                  ;
 10317                                  ; delete the previous word.
 10318                                  ;
 10319                                  WordDel:
 10320                                  WordLoop:
 10321                                  ;	Call    BackSpace               ; backspace the one spot
 10322                                  ;	OR      DH,DH
 10323                                  ;	JZ	short GetChj
 10324                                  ;	MOV     AL,[ES:DI-1]
 10325                                  ;	cmp     al,'0'
 10326                                  ;	jb	short GetChj
 10327                                  ;	cmp     al,'9'
 10328                                  ;	jbe	short WordLoop
 10329                                  ;	OR      AL,20h
 10330                                  ;	CMP     AL,'a'
 10331                                  ;	JB	short GetChj
 10332                                  ;	CMP     AL,'z'
 10333                                  ;	JBE	short WordLoop
 10334                                  ;GetChj: 
 10335                                  ;	JMP	GETCH
 10336                                  
 10337                                  ; 16/12/2022
 10338                                  %if 0
 10339                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10340                                  	; (Worddel is not called or jumped from anywhere!)
 10341                                  WordDel:
 10342                                  WordLoop:
 10343                                  	Call    BackSpace               ; backspace the one spot
 10344                                  	OR      DH,DH
 10345                                  	JZ	short GetChj
 10346                                  	MOV     AL,[ES:DI-1]
 10347                                  	cmp     al,'0'
 10348                                  	jb	short GetChj
 10349                                  	cmp     al,'9'
 10350                                  	jbe	short WordLoop
 10351                                  	OR      AL,20h
 10352                                  	CMP     AL,'a'
 10353                                  	JB	short GetChj
 10354                                  	CMP     AL,'z'
 10355                                  	JBE	short WordLoop
 10356                                  GetChj: 
 10357                                  	JMP	GETCH
 10358                                  
 10359                                  %endif
 10360                                  
 10361                                  ;;;;;;;;
 10362                                  
 10363                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10364                                  
 10365                                  ; The user wants to throw away what he's typed in and wants to start over.
 10366                                  ; We print the backslash and then go to the next line and tab to the correct
 10367                                  ; spot to begin the buffered input.
 10368                                  
 10369                                  KILNEW:
 10370 000014F7 B05C                            mov	al,'\'
 10371 000014F9 E8E701                          call	OUTT            ;Print the CANCEL indicator
 10372 000014FC 5E                              pop	si		;Remember start of edit buffer
 10373                                  PUTNEW:
 10374 000014FD E81501                  	call	CRLF            ;Go to next line on screen
 10375 00001500 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10376 00001504 E85002                  	call	TAB             ;Tab over
 10377 00001507 E96AFF                          JMP     NEWLIN		;Start over again
 10378                                  
 10379                                  ;	Destructively back up one character position
 10380                                  
 10381                                  BACKSP:
 10382                                  	; 09/09/2018
 10383 0000150A E80200                  	Call    BackSpace
 10384 0000150D EB81                    	JMP     GETCH
 10385                                  
 10386                                  BackSpace:
 10387 0000150F 08F6                    	or	dh,dh
 10388 00001511 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10389 00001513 E85800                  	call	BACKUP          ;Do the backup
 10390 00001516 268A05                  	mov	al,[es:di]	;Get the deleted char
 10391 00001519 3C20                            cmp	al,20h	; ' '
 10392 0000151B 730F                    	jnb	short OLDBAK	;Was a normal char
 10393 0000151D 3C09                            cmp	al,c_HT ; 9
 10394 0000151F 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10395                                  ;; 9/27/86 fix for ctrl-U backspace
 10396 00001521 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10397 00001523 7407                    	JZ	short OLDBAK
 10398 00001525 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10399 00001527 7403                    	JZ	short OLDBAK
 10400                                  ;; 9/27/86 fix for ctrl-U backspace
 10401 00001529 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10402                                  OLDBAK:
 10403 0000152C 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10404 00001532 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10405 00001534 08FF                    	or	bh,bh
 10406 00001536 74B9                            jz	short OLDBAK_RETN 
 10407                                  				;Not advanced in template, stay where we are
 10408 00001538 FECF                    	dec	bh		;Go back in template
 10409 0000153A 4E                              dec	si
 10410 0000153B C3                      	retn
 10411                                  BAKTAB:
 10412 0000153C 57                              push	di
 10413 0000153D 4F                              dec	di		;Back up one char
 10414 0000153E FD                              std			;Go backward
 10415 0000153F 88F1                            mov	cl,dh		;Number of chars currently in line
 10416 00001541 B020                            mov	al,20h	; ' '
 10417 00001543 53                              push	bx
 10418 00001544 B307                            mov	bl,7		;Max
 10419 00001546 E30E                            jcxz	FIGTAB		;At start, do nothing
 10420                                  FNDPOS:
 10421 00001548 AE                              scasb			;Look back
 10422 00001549 7609                    	jbe	short CHKCNT
 10423 0000154B 26807D0109              	cmp	byte [es:di+1],9
 10424 00001550 7409                    	jz	short HAVTAB	;Found a tab
 10425 00001552 FECB                    	dec	bl		;Back one char if non tab control char
 10426                                  CHKCNT:
 10427 00001554 E2F2                            loop	FNDPOS
 10428                                  FIGTAB:		
 10429 00001556 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10430                                  HAVTAB:
 10431 0000155B 28F3                    	sub	bl,dh
 10432 0000155D 00D9                    	add	cl,bl
 10433 0000155F 80E107                  	and	cl,7		;CX has correct number to erase
 10434 00001562 FC                      	cld			;Back to normal
 10435 00001563 5B                      	pop	bx
 10436 00001564 5F                      	pop	di
 10437 00001565 74C5                    	jz	short OLDBAK	;Nothing to erase
 10438                                  TABBAK:
 10439 00001567 E80700                  	call	BACKMES
 10440 0000156A E2FB                    	loop	TABBAK		;Erase correct number of chars
 10441 0000156C EBBE                    	jmp	short OLDBAK
 10442                                  
 10443                                  BACKUP:
 10444 0000156E FECE                            dec	dh		;Back up in line
 10445 00001570 4F                              dec	di
 10446                                  BACKMES:
 10447 00001571 B008                            mov	al,c_BS ; 8	;Backspace
 10448 00001573 E86D01                          call	OUTT
 10449 00001576 B020                            mov	al,20h ; ' '	;Erase
 10450 00001578 E86801                          call	OUTT
 10451 0000157B B008                            mov	al,c_BS ; 8	;Backspace
 10452 0000157D E96301                  	jmp	OUTT		;Done
 10453                                  
 10454                                  ;User really wants an ESC character in his line
 10455                                  TWOESC:	
 10456 00001580 2EA0[6E0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10457 00001584 E92EFF                  	jmp	SAVCH
 10458                                  
 10459                                  ;Copy the rest of the template
 10460                                  COPYLIN:
 10461 00001587 88D9                            mov	cl,bl		;Total size of template
 10462 00001589 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10463 0000158B EB07                            jmp	short COPYEACH
 10464                                  
 10465                                  COPYSTR:
 10466 0000158D E83400                  	call	FINDOLD         ;Find the char
 10467 00001590 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10468                                  
 10469                                  ;Copy one char from template to line
 10470                                  COPYONE:
 10471 00001592 B101                            mov	cl,1
 10472                                  ;Copy CX chars from template to line
 10473                                  COPYEACH:
 10474 00001594 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10475 0000159A 38D6                    	cmp	dh,dl
 10476 0000159C 740F                            jz	short GETCH2		;At end of line, can't do anything
 10477 0000159E 38DF                            cmp	bh,bl
 10478 000015A0 740B                            jz	short GETCH2		;At end of template, can't do anything
 10479 000015A2 AC                              lodsb
 10480 000015A3 AA                              stosb
 10481 000015A4 E8D001                  	call	BUFOUT
 10482 000015A7 FEC7                            inc	bh			;Ahead in template
 10483 000015A9 FEC6                            inc	dh			;Ahead in line
 10484 000015AB E2E7                            loop	COPYEACH
 10485                                  GETCH2:
 10486 000015AD E9E0FE                          jmp	GETCH
 10487                                  
 10488                                  ;Skip one char in template
 10489                                  SKIPONE:
 10490 000015B0 38DF                    	cmp	bh,bl
 10491 000015B2 74F9                    	jz	short GETCH2		;At end of template
 10492 000015B4 FEC7                    	inc	bh			;Ahead in templat
 10493 000015B6 46                      	inc	si
 10494 000015B7 E9D6FE                  	jmp	GETCH
 10495                                  
 10496                                  SKIPSTR:
 10497 000015BA E80700                  	call	FINDOLD                 ;Find out how far to go
 10498 000015BD 01CE                            add	si,cx			;Go there
 10499 000015BF 00CF                            add	bh,cl
 10500 000015C1 E9CCFE                          jmp	GETCH
 10501                                  
 10502                                  ;Get the next user char, and look ahead in template for a match
 10503                                  ;CX indicates how many chars to skip to get there on output
 10504                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10505                                  ;       address is popped off and a jump to GETCH is taken.
 10506                                  ;       Make sure nothing extra on stack when this routine
 10507                                  ;       is called!!! (no PUSHes before calling it).
 10508                                  
 10509                                  FINDOLD:
 10510 000015C4 E828FE                          call	_$STD_CON_INPUT_NO_ECHO
 10511                                  
 10512                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10513                                  
 10514                                  	;CMP     AL,[SS:ESCCHAR]	
 10515                                  	;JNZ     SHORT FINDSETUP
 10516                                  
 10517                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10518                                  
 10519                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10520                                  
 10521 000015C7 2E3A06[6E0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10522 000015CC 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10523                                  
 10524 000015CE E81EFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10525 000015D1 EB1D                            JMP     SHORT NOTFND		; go try again
 10526                                  FINDSETUP:
 10527 000015D3 88D9                    	mov	cl,bl
 10528 000015D5 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10529 000015D7 7417                    	jz	short NOTFND	;At end of template
 10530 000015D9 49                              dec	cx		;Cannot point past end, limit search
 10531 000015DA 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10532 000015DC 06                      	push	es
 10533 000015DD 1E                      	push	ds
 10534 000015DE 07                      	pop	es
 10535 000015DF 57                      	push	di
 10536 000015E0 89F7                    	mov	di,si		;Template to ES:DI
 10537 000015E2 47                      	inc	di
 10538 000015E3 F2AE                    	repne	scasb		;Look
 10539 000015E5 5F                      	pop	di
 10540 000015E6 07                      	pop	es
 10541 000015E7 7507                    	jnz	short NOTFND	;Didn't find the char
 10542 000015E9 F6D1                            not	cl		;Turn how far to go into how far we went
 10543 000015EB 00D9                            add	cl,bl		;Add size of template
 10544 000015ED 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10545                                  FINDOLD_RETN:
 10546 000015EF C3                      	retn
 10547                                  
 10548                                  NOTFND:
 10549 000015F0 5D                              pop	bp              ;Chuck return address
 10550 000015F1 E99CFE                          jmp	GETCH
 10551                                  
 10552                                  REEDIT:
 10553 000015F4 B040                    	mov	al,'@'		;Output re-edit character
 10554 000015F6 E8EA00                  	call	OUTT
 10555 000015F9 5F                      	pop	di
 10556 000015FA 57                      	push	di
 10557 000015FB 06                      	push	es
 10558 000015FC 1E                      	push	ds
 10559 000015FD E8E6FE                  	call	COPYNEW		;Copy current line into template
 10560 00001600 1F                      	pop	ds
 10561 00001601 07                      	pop	es
 10562 00001602 5E                      	pop	si
 10563 00001603 88F3                    	mov	bl,dh		;Size of line is new size template
 10564 00001605 E9F5FE                  	jmp	PUTNEW		;Start over again
 10565                                  
 10566                                  EXITINS:
 10567                                  ENTERINS:
 10568 00001608 36F616[7905]            	not	byte [SS:INSMODE]
 10569 0000160D E980FE                  	jmp	GETCH
 10570                                  
 10571                                  ;Put a real live ^Z in the buffer (embedded)
 10572                                  CTRLZ:
 10573 00001610 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10574 00001612 E9A0FE                          jmp	SAVCH
 10575                                  
 10576                                  ;Output a CRLF
 10577                                  CRLF:
 10578 00001615 B00D                    	mov	al,c_CR ; 0Dh 
 10579 00001617 E8C900                  	call	OUTT
 10580 0000161A B00A                    	mov	al,c_LF ; 0Ah
 10581 0000161C E9C400                  	jmp	OUTT
 10582                                  
 10583                                  ;
 10584                                  ;----------------------------------------------------------------------------
 10585                                  ;
 10586                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10587                                  ;
 10588                                  ;	Input or output raw character from console, no echo
 10589                                  ;
 10590                                  ;	ENTRY	DL = -1 if input
 10591                                  ;		   =  output character if output
 10592                                  ;	EXIT	(AL) = input character if input
 10593                                  ;	USES	all
 10594                                  ;
 10595                                  ;----------------------------------------------------------------------------
 10596                                  ; 20/07/2018 - Retro DOS v3.0
 10597                                  
 10598                                  ; 04/05/2019 - Retro DOS v4.0
 10599                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10600                                  
 10601                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10602                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10603                                  
 10604                                  _$RAW_CON_IO:			; System call 6
 10605                                  
 10606 0000161F 88D0                            MOV     AL,DL
 10607 00001621 3CFF                            CMP     AL,-1
 10608 00001623 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10609                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10610                                  	;jz	short rci1
 10611                                  	;jmp	short RAWOUT
 10612                                  	; 16/12/202
 10613                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10614                                  	;nop
 10615                                  rci1:	        
 10616                                  			; Get pointer to register save area
 10617 00001625 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10618 0000162A 31DB                    	XOR     BX,BX
 10619                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10620 0000162C E8DF20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10621                                          ;JC	SHORT RET17
 10622 0000162F 72BE                            jc	short FINDOLD_RETN
 10623 00001631 B401                    	MOV     AH,1
 10624 00001633 E84D2F                          CALL	IOFUNC
 10625 00001636 750B                            JNZ     SHORT RESFLG
 10626 00001638 E8103C                          CALL	SPOOLINT
 10627                                          ;OR	BYTE [ES:DI+16H],40H
 10628 0000163B 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10629 00001640 30C0                            XOR     AL,AL
 10630                                  RET17:
 10631 00001642 C3                              RETN
 10632                                  
 10633                                  RESFLG:
 10634                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10635 00001643 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10636                                  				; Reset user's zero flag
 10637                                  ;RILP:
 10638                                  rci0:
 10639 00001648 E8003C                       	CALL	SPOOLINT
 10640                                  ;
 10641                                  ;----------------------------------------------------------------------------
 10642                                  ;
 10643                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10644                                  ;
 10645                                  ;	Input raw character from console, no echo
 10646                                  ;
 10647                                  ;	ENTRY	none
 10648                                  ;	EXIT	(al) = character
 10649                                  ;	USES	all
 10650                                  ;
 10651                                  ;----------------------------------------------------------------------------
 10652                                  ;
 10653                                  
 10654                                  ;rci0:	invoke	SPOOLINT
 10655                                  
 10656                                  	;entry	$RAW_CON_INPUT
 10657                                  
 10658                                  	; 04/05/2019 - Retro DOS v4.0
 10659                                  
 10660                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10661                                  
 10662                                  _$RAW_CON_INPUT:		; System call 7
 10663 0000164B 53                      	push	bx
 10664 0000164C 31DB                            XOR     BX,BX
 10665                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10666 0000164E E8BD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10667 00001651 5B                              pop	bx
 10668 00001652 72EE                    	JC	SHORT RET17
 10669 00001654 B401                            MOV     AH,1
 10670 00001656 E82A2F                          CALL	IOFUNC
 10671                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10672                                  	;XOR	AH,AH
 10673                                          ;CALL	IOFUNC
 10674                                          ;RETN
 10675 00001659 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10676 0000165B B484                    	MOV	AH,84h
 10677 0000165D CD2A                    	INT	int_IBM  ; int 2Ah
 10678 0000165F EBE7                    	JMP	short rci0
 10679                                  rci5:	
 10680 00001661 30E4                            XOR     AH,AH
 10681                                          ;CALL	IOFUNC
 10682                                          ;RETN
 10683                                  	; 18/12/2022
 10684 00001663 E91D2F                  	jmp	IOFUNC
 10685                                  
 10686                                  ;       Output the character in AL to stdout
 10687                                  ;
 10688                                  	;entry   RAWOUT
 10689                                  RAWOUT:
 10690 00001666 53                              PUSH    BX
 10691 00001667 BB0100                          MOV     BX,1
 10692                                  
 10693                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10694 0000166A E8A120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10695 0000166D 721B                            JC      SHORT RAWRET1
 10696                                  
 10697                                  	;
 10698                                  	; MSDOS 2.11
 10699                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10700                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10701                                          ;PUSH	DS
 10702                                          ;PUSH	SI
 10703                                          ;LDS	SI,[SI+19H]		; output to special?
 10704                                  	;TEST	BYTE [SI+4],ISSPEC
 10705                                  	;POP	SI
 10706                                  	;
 10707                                          
 10708                                  	; MSDOS 3.3 & MSDOS 6.0
 10709                                  	;mov	bx,[si+5]
 10710 0000166F 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10711                                   ;
 10712                                   ; If we are a network handle OR if we are not a local device then go do the
 10713                                   ; output the hard way.
 10714                                   ;	
 10715                                  	;and	bx,8080h
 10716 00001672 81E38080                	AND	BX,sf_isnet+devid_device
 10717                                  	;cmp	bx,80h
 10718 00001676 81FB8000                	CMP	BX,devid_device
 10719 0000167A 7510                    	jnz     short RAWNORM
 10720 0000167C 1E                      	push    ds
 10721                                  	;lds	bx,[si+7]
 10722 0000167D C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10723                                  	;test	byte [bx+4],10h
 10724 00001680 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10725                                  	;
 10726                                  
 10727 00001684 1F                              POP     DS
 10728 00001685 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10729                                  
 10730 00001687 CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10731                                  
 10732                                          ;JMP	SHORT RAWRET
 10733                                  ;RAWNORM:
 10734                                  ;	CALL    RAWOUT3
 10735                                  RAWRET: 
 10736 00001689 F8                      	CLC
 10737                                  RAWRET1:
 10738 0000168A 5B                              POP     BX
 10739                                  RAWRET2:
 10740 0000168B C3                      	RETN
 10741                                  RAWNORM:
 10742 0000168C E80700                  	CALL    RAWOUT3
 10743 0000168F EBF8                    	jmp	short RAWRET
 10744                                  
 10745                                  ;       Output the character in AL to handle in BX
 10746                                  ;
 10747                                  ;	entry   RAWOUT2
 10748                                  
 10749                                  RAWOUT2:
 10750                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10751                                  	;JC	SHORT RET18
 10752 00001691 E87A20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10753 00001694 72F5                    	JC	SHORT RAWRET2
 10754                                  RAWOUT3:
 10755 00001696 50                              PUSH    AX
 10756 00001697 EB0C                            JMP     SHORT RAWOSTRT
 10757                                  ROLP:
 10758 00001699 E8AF3B                          CALL	SPOOLINT
 10759                                  
 10760                                  	; 01/05/2019 - Retro DOS v4.0
 10761                                  
 10762                                  	; MSDOS 6.0
 10763                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10764                                  	; 17/12/2022
 10765 0000169C 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10766                                  	;or	word [ss:DOS34_FLAG],200h
 10767                                  				;AN002; set control break
 10768                                  	;invoke DSKSTATCHK
 10769 000016A2 E8223B                  	call	DSKSTATCHK	;AN002; check control break
 10770                                  RAWOSTRT:
 10771 000016A5 B403                            MOV     AH,3
 10772 000016A7 E8D92E                          CALL    IOFUNC
 10773 000016AA 74ED                            JZ      SHORT ROLP
 10774                                  
 10775                                  	; MSDOS 6.0
 10776                                  ;SR;
 10777                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10778                                  ;the user failed. We do not send a char if this happens. We however return 
 10779                                  ;to the caller with carry clear because this DOS call does not return any
 10780                                  ;status. 
 10781                                  ;
 10782 000016AC 40                      	inc	ax		;fail on I24 if ax = -1
 10783 000016AD 58                      	POP	AX
 10784 000016AE 7405                    	jz	short nosend	;yes, do not send char
 10785 000016B0 B402                    	MOV	AH,2
 10786 000016B2 E8CE2E                  	call	IOFUNC
 10787                                  nosend:
 10788 000016B5 F8                      	CLC			; Clear carry indicating successful
 10789 000016B6 C3                      	retn
 10790                                  
 10791                                  	; MSDOS 3.3 & MSDOS 2.11
 10792                                  	;POP	AX
 10793                                  	;MOV	AH,2
 10794                                          ;CALL	IOFUNC
 10795                                  	;CLC			; Clear carry indicating successful
 10796                                  ;RET18:    
 10797                                  	;RETN
 10798                                  
 10799                                  ;;10/08/2018
 10800                                  ; 20/07/2018 - Retro DOS v3.0
 10801                                  ; ---------------------------------------------------------------------------
 10802                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10803                                  ; ---------------------------------------------------------------------------
 10804                                  
 10805                                  ; This routine is called at DOS init
 10806                                  
 10807                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10808                                  ;;OUTMES:
 10809                                  ;;	;LODS	CS:BYTE PTR [SI]
 10810                                  ;;	CS	LODSB
 10811                                  ;;	CMP     AL,"$" ; 24h
 10812                                  ;;	JZ	SHORT RET18
 10813                                  ;;	CALL	OUTT
 10814                                  ;;	JMP     SHORT OUTMES
 10815                                  
 10816                                  ; ---------------------------------------------------------------------------
 10817                                  
 10818                                  ; 20/07/2018 - Retro DOS v3.0
 10819                                  
 10820                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10821                                  
 10822                                  ;
 10823                                  ;----------------------------------------------------------------------------
 10824                                  ;
 10825                                  ; Inputs:
 10826                                  ;	AX=0 save the DEVCALL request packet
 10827                                  ;	  =1 restore the DEVCALL request packet
 10828                                  ; Function:
 10829                                  ;	save or restore the DEVCALL packet
 10830                                  ; Returns:
 10831                                  ;	none
 10832                                  ;
 10833                                  ;----------------------------------------------------------------------------
 10834                                  ;
 10835                                  
 10836                                  ; 04/05/2019 - Retro DOS v4.0
 10837                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10838                                  
 10839                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10840                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10841                                  
 10842                                  ; 12/05/2019
 10843                                  
 10844                                  Save_Restore_Packet:
 10845 000016B7 1E                      	PUSH	DS
 10846 000016B8 06                      	PUSH	ES
 10847 000016B9 56                      	PUSH	SI
 10848 000016BA 57                      	PUSH	DI
 10849                                  
 10850                                  	; 16/12/2022
 10851                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10852                                  	; 09/09/2018
 10853 000016BB BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10854 000016BE BE[5A03]                	mov	si,DEVCALL
 10855                                  	;
 10856 000016C1 83F800                  	CMP	AX,0		; save packet
 10857 000016C4 7402                    	JZ	short save_packet ; 16/12/2022
 10858                                  	;je	short set_seg
 10859                                  
 10860                                  	; MSDOS 6.0
 10861                                  restore_packet:
 10862                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10863                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10864                                  	; MSDOS 3.3
 10865                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10866                                  	;mov	di,DEVCALL  ; 09/09/2018
 10867                                  	;
 10868                                  	;JMP	short set_seg
 10869                                  
 10870                                  	; 16/12/2022	
 10871                                  	; 09/09/2018
 10872 000016C6 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10873                                  
 10874                                  ; 16/12/2022
 10875                                  %if 0
 10876                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10877                                  	cmp	ax,0		; save packet
 10878                                  	jz	short save_packet
 10879                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10880                                  	mov	di,DEVCALL 
 10881                                  	jmp	short set_seg
 10882                                  
 10883                                  	; MSDOS 6.0
 10884                                  save_packet:
 10885                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10886                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10887                                  	; 09/09/2018
 10888                                  	; MSDOS 3.3
 10889                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10890                                  	;mov	si,DEVCALL ; 09/09/2018
 10891                                  
 10892                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10893                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10894                                  	mov	si,DEVCALL
 10895                                  %endif
 10896                                  
 10897                                  ; 16/12/2022
 10898                                  save_packet:
 10899                                  ;set_seg:
 10900                                  	; MSDOS 3.3
 10901                                  	;mov	ax,cs
 10902                                  
 10903                                  	; MSDOS 6.0
 10904 000016C8 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10905                                  
 10906 000016CA 8ED8                    	MOV	DS,AX
 10907 000016CC 8EC0                    	MOV	ES,AX
 10908 000016CE B90B00                  	MOV	CX,11		; 11 words to move
 10909 000016D1 F3A5                    	REP	MOVSW
 10910                                  
 10911 000016D3 5F                      	POP	DI
 10912 000016D4 5E                      	POP	SI
 10913 000016D5 07                      	POP	ES
 10914 000016D6 1F                      	POP	DS
 10915 000016D7 C3                      	retn
 10916                                  
 10917                                  ;============================================================================
 10918                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10919                                  ;============================================================================
 10920                                  ; 20/07/2018 - Retro DOS v3.0
 10921                                  ; 01/05/2019 - Retro DOS v4.0
 10922                                  
 10923                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10924                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10925                                  ;hkn;	not valid. 
 10926                                  
 10927                                  ;
 10928                                  ;----------------------------------------------------------------------------
 10929                                  ;
 10930                                  ;**	$STD_CON_INPUT - System Call 1
 10931                                  ;
 10932                                  ;	Input character from console, echo
 10933                                  ;
 10934                                  ;	ENTRY	none
 10935                                  ;	EXIT	(al) = character
 10936                                  ;	USES	ALL
 10937                                  ;
 10938                                  ;----------------------------------------------------------------------------
 10939                                  ;
 10940                                  
 10941                                  _$STD_CON_INPUT:	;System call 1
 10942                                  	
 10943 000016D8 E814FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10944 000016DB 50                      	PUSH	AX
 10945 000016DC E80400                  	CALL	OUTT
 10946 000016DF 58                      	POP	AX
 10947                                  CON_INPUT_RETN:	
 10948 000016E0 C3                      	RETN
 10949                                  
 10950                                  ;
 10951                                  ;----------------------------------------------------------------------------
 10952                                  ;
 10953                                  ;**	$STD_CON_OUTPUT - System Call 2
 10954                                  ;
 10955                                  ;	Output character to console
 10956                                  ;
 10957                                  ;	ENTRY	(dl) = character
 10958                                  ;	EXIT	none
 10959                                  ;	USES	all
 10960                                  ;
 10961                                  ;----------------------------------------------------------------------------
 10962                                  ;
 10963                                  
 10964                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10965                                  
 10966                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10967                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10968                                  
 10969                                  _$STD_CON_OUTPUT:	;System call 2
 10970                                  
 10971 000016E1 88D0                    	MOV	AL,DL
 10972                                  OUTT:
 10973 000016E3 3C20                    	CMP	AL,20H ; " "
 10974 000016E5 725C                    	JB	SHORT CTRLOUT
 10975 000016E7 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10976 000016E9 7405                    	JZ	SHORT OUTCH
 10977                                  OUTCHA:	
 10978                                  	;INC	BYTE PTR [CARPOS]
 10979 000016EB 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 10980                                  OUTCH:
 10981 000016F0 1E                      	PUSH	DS
 10982 000016F1 56                      	PUSH	SI
 10983                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10984                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10985 000016F2 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 10986                                  	;AND	BYTE [SS:CHARCO],00111111B
 10987                                  	; 01/05/2019 - Retro DOS v4.0
 10988 000016F7 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 10989 000016FD 7505                    	JNZ	SHORT OUTSKIP
 10990                                  
 10991 000016FF 50                      	PUSH	AX
 10992 00001700 E8763B                  	CALL	STATCHK
 10993 00001703 58                      	POP	AX
 10994                                  OUTSKIP:
 10995 00001704 E85FFF                  	CALL	RAWOUT				;output the character
 10996                                  
 10997 00001707 5E                      	POP	SI
 10998 00001708 1F                      	POP	DS
 10999                                  
 11000                                  	;TEST	BYTE PTR [PFLAG],-1
 11001                                  	;retz
 11002 00001709 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11003 0000170F 74CF                    	JZ	SHORT CON_INPUT_RETN
 11004                                  
 11005 00001711 53                      	PUSH	BX
 11006 00001712 1E                      	PUSH	DS
 11007 00001713 56                      	PUSH	SI
 11008 00001714 BB0100                  	MOV	BX,1
 11009                                  	; 20/07/2018 - Retro DOS v3.0
 11010                                  	; MSDOS 3.3
 11011                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11012 00001717 E8F41F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11013                                  					;hkn; to sft entry
 11014 0000171A 7224                    	JC	SHORT TRIPOPJ
 11015                                  
 11016                                  	; 01/05/2019 - Retro DOS v4.0
 11017                                  
 11018                                  	;mov	bx,[si+5]
 11019 0000171C 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11020                                  	;test	bx,8000h
 11021                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11022 0000171F F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11023 00001722 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11024                                  	;;test	bx,80h
 11025                                  	;TEST	BX,devid_device 		; output to file?
 11026 00001724 F6C380                  	test	bl,devid_device ; 80h
 11027 00001727 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11028                                  	; 14/03/2018
 11029                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11030                                  	;jc	short TRIPOPJ
 11031                                  	; MSDOS 2.11
 11032                                  	;test	byte [SI+18H], 80h
 11033                                  	;jz	short TRIPOPJ
 11034 00001729 BB0400                  	MOV	BX,4
 11035 0000172C E8DF1F                  	CALL	GET_IO_SFT
 11036 0000172F 720F                    	JC	SHORT TRIPOPJ
 11037                                  	;;test	word [si+5], 800h
 11038                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11039                                  	;test	byte [si+6],8 ; 08/11/2022
 11040 00001731 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11041                                  						; StdPrn redirected?
 11042                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11043                                  	;jz	LISSTRT2 ; 10/08/2018 
 11044                                  	; 16/12/2022
 11045 00001735 7503                    	jnz	short outch1
 11046 00001737 E98700                  	jmp	LISSTRT2
 11047                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11048                                  	;jz	short LISSTRT2J
 11049                                  outch1:
 11050                                  	;MOV	BYTE [PFLAG],0			
 11051 0000173A 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11052                                  	; MSDOS 2.11
 11053                                  	;mov	bx,4
 11054                                  	;jmp	short LISSTRT2
 11055                                  	
 11056                                  TRIPOPJ:
 11057                                  	; 20/07/2018
 11058 00001740 E98100                  	JMP	TRIPOP
 11059                                  
 11060                                  	; 16/12/2022
 11061                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11062                                  ;LISSTRT2J:
 11063                                  ;	JMP	LISSTRT2
 11064                                  
 11065                                  CTRLOUT:
 11066 00001743 3C0D                    	CMP	AL,c_CR ; 0Dh
 11067 00001745 7420                    	JZ	SHORT ZERPOS
 11068 00001747 3C08                    	CMP	AL,c_BS ; 8
 11069 00001749 7424                    	JZ	SHORT BACKPOS
 11070 0000174B 3C09                    	CMP	AL,c_HT ; 9
 11071 0000174D 75A1                    	JNZ	SHORT OUTCH
 11072                                  	;MOV	AL,[CARPOS]
 11073 0000174F 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11074 00001753 0CF8                    	OR	AL,0F8H
 11075 00001755 F6D8                    	NEG	AL
 11076                                  TAB:
 11077 00001757 51                      	PUSH	CX
 11078 00001758 88C1                    	MOV	CL,AL
 11079 0000175A B500                    	MOV	CH,0
 11080 0000175C E307                    	JCXZ	POPTAB
 11081                                  TABLP:
 11082 0000175E B020                    	MOV	AL," "
 11083 00001760 E880FF                  	CALL	OUTT
 11084 00001763 E2F9                    	LOOP	TABLP
 11085                                  POPTAB:
 11086 00001765 59                      	POP	CX
 11087                                  
 11088 00001766 C3                      	RETN
 11089                                  
 11090                                  ZERPOS:
 11091                                  	;MOV	BYTE PTR [CARPOS],0
 11092 00001767 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11093                                  	; 10/08/2018
 11094 0000176D EB81                    	JMP	short OUTCH ; 04/05/2019
 11095                                  	
 11096                                  	; 18/12/2022
 11097                                  ;OUTJ:	
 11098                                  	;JMP	OUTT
 11099                                  
 11100                                  BACKPOS:
 11101                                  	;DEC	BYTE PTR [CARPOS]
 11102 0000176F 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11103 00001774 E979FF                  	JMP	OUTCH
 11104                                  
 11105                                  BUFOUT:
 11106 00001777 3C20                    	CMP	AL," "
 11107 00001779 7315                    	JAE	SHORT OUTJ		;Normal char
 11108 0000177B 3C09                    	CMP	AL,9
 11109 0000177D 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11110                                  	;DOS 3.3  7/14/86
 11111 0000177F 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11112 00001781 740D                    	JZ	short CTRLU
 11113 00001783 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11114 00001785 7409                    	JZ	short CTRLU
 11115                                  NOT_CTRLU:
 11116                                  	;DOS 3.3  7/14/86
 11117 00001787 50                      	PUSH	AX
 11118 00001788 B05E                    	MOV	AL,"^"
 11119 0000178A E856FF                  	CALL	OUTT		;Print '^' before control chars
 11120 0000178D 58                      	POP	AX
 11121 0000178E 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11122                                  CTRLU:
 11123                                  	;CALL	OUTT
 11124                                  	; 18/12/2022
 11125                                  OUTJ:
 11126 00001790 E950FF                  	jmp	OUTT
 11127                                  ;BUFOUT_RETN:
 11128                                  	;RETN
 11129                                  
 11130                                  ;
 11131                                  ;----------------------------------------------------------------------------
 11132                                  ;
 11133                                  ;**	$STD_AUX_INPUT - System Call 3
 11134                                  ;
 11135                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11136                                  ;
 11137                                  ;	ENTRY	none
 11138                                  ;	EXIT	(al) = character
 11139                                  ;	USES	all
 11140                                  ;
 11141                                  ;----------------------------------------------------------------------------
 11142                                  ;
 11143                                  
 11144                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11145                                  
 11146                                  _$STD_AUX_INPUT:	;System call 3
 11147                                  
 11148 00001793 E8E33A                  	CALL	STATCHK
 11149 00001796 BB0300                  	MOV	BX,3
 11150 00001799 E8721F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11151                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11152                                  	;retc
 11153                                  	; 16/12/2022
 11154                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11155                                  	;JC	SHORT BUFOUT_RETN
 11156                                  	;JMP	SHORT TAISTRT
 11157                                  	; 07/12/2022
 11158 0000179C 7304                    	jnc	SHORT TAISTRT
 11159 0000179E C3                      	retn	
 11160                                  
 11161                                  AUXILP:
 11162 0000179F E8A93A                  	CALL	SPOOLINT
 11163                                  TAISTRT:
 11164 000017A2 B401                    	MOV	AH,1
 11165 000017A4 E8DC2D                  	CALL	IOFUNC
 11166 000017A7 74F6                    	JZ	SHORT AUXILP
 11167 000017A9 30E4                    	XOR	AH,AH
 11168                                  	; 16/12/2022
 11169                                  	;CALL	IOFUNC
 11170                                  	;RETN
 11171                                  	; 07/12/2022
 11172 000017AB E9D52D                  	jmp	IOFUNC
 11173                                  
 11174                                  ;
 11175                                  ;----------------------------------------------------------------------------
 11176                                  ;
 11177                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11178                                  ;
 11179                                  ;	ENTRY	(dl) = character
 11180                                  ;	EXIT	none
 11181                                  ;	USES	all
 11182                                  ;
 11183                                  ;----------------------------------------------------------------------------
 11184                                  ;
 11185                                  
 11186                                  _$STD_AUX_OUTPUT:	;System call 4
 11187                                  
 11188 000017AE 53                      	PUSH	BX
 11189 000017AF BB0300                  	MOV	BX,3
 11190 000017B2 EB04                    	JMP	SHORT SENDOUT
 11191                                  
 11192                                  ;
 11193                                  ;----------------------------------------------------------------------------
 11194                                  ;
 11195                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11196                                  ;
 11197                                  ;	ENTRY	(dl) = character
 11198                                  ;	EXIT	none
 11199                                  ;	USES	all
 11200                                  ;
 11201                                  ;----------------------------------------------------------------------------
 11202                                  ;
 11203                                  
 11204                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11205                                  
 11206 000017B4 53                      	PUSH	BX
 11207 000017B5 BB0400                  	MOV	BX,4
 11208                                  
 11209                                  SENDOUT:
 11210 000017B8 88D0                    	MOV	AL,DL
 11211 000017BA 50                      	PUSH	AX
 11212 000017BB E8BB3A                  	CALL	STATCHK
 11213 000017BE 58                      	POP	AX
 11214 000017BF 1E                      	PUSH	DS
 11215 000017C0 56                      	PUSH	SI
 11216                                  LISSTRT2:
 11217 000017C1 E8CDFE                  	CALL	RAWOUT2
 11218                                  TRIPOP:
 11219 000017C4 5E                      	POP	SI
 11220 000017C5 1F                      	POP	DS
 11221 000017C6 5B                      	POP	BX
 11222                                  SCIS_RETN:	; 20/07/2018
 11223 000017C7 C3                      	RETN
 11224                                  ;
 11225                                  ;----------------------------------------------------------------------------
 11226                                  ;
 11227                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11228                                  ;
 11229                                  ;	Check console input status
 11230                                  ;
 11231                                  ;	ENTRY	none
 11232                                  ;	EXIT	AL = -1 character available, = 0 no character
 11233                                  ;	USES	all
 11234                                  ;
 11235                                  ;----------------------------------------------------------------------------
 11236                                  ;
 11237                                  
 11238                                  _$STD_CON_INPUT_STATUS:		 ;System call 11
 11239                                  
 11240 000017C8 E8AE3A                  	CALL	STATCHK
 11241 000017CB B000                    	MOV	AL,0			; no xor!!
 11242                                  	;retz
 11243 000017CD 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11244 000017CF 0CFF                    	OR	AL,-1
 11245                                  ;SCIS_RETN:
 11246 000017D1 C3                      	RETN
 11247                                  
 11248                                  ;
 11249                                  ;----------------------------------------------------------------------------
 11250                                  ;
 11251                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11252                                  ;
 11253                                  ;	Flush console input buffer and perform call in AL
 11254                                  ;
 11255                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11256                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11257                                  ;		return arguments for the fcn supplied in (AL)
 11258                                  ;	USES	all
 11259                                  ;
 11260                                  ;----------------------------------------------------------------------------
 11261                                  ;
 11262                                  
 11263                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11264                                  
 11265 000017D2 50                      	PUSH	AX
 11266 000017D3 52                      	PUSH	DX
 11267 000017D4 31DB                    	XOR	BX,BX
 11268 000017D6 E8351F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11269                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11270 000017D9 7205                    	JC	SHORT BADJFNCON
 11271 000017DB B404                    	MOV	AH,4
 11272 000017DD E8A32D                  	CALL	IOFUNC
 11273                                  
 11274                                  BADJFNCON:
 11275 000017E0 5A                      	POP	DX
 11276 000017E1 58                      	POP	AX
 11277 000017E2 88C4                    	MOV	AH,AL
 11278 000017E4 3C01                    	CMP	AL,1
 11279 000017E6 7413                    	JZ	SHORT REDISPJ
 11280 000017E8 3C06                    	CMP	AL,6
 11281 000017EA 740F                    	JZ	SHORT REDISPJ
 11282 000017EC 3C07                    	CMP	AL,7
 11283 000017EE 740B                    	JZ	SHORT REDISPJ
 11284 000017F0 3C08                    	CMP	AL,8
 11285 000017F2 7407                    	JZ	SHORT REDISPJ
 11286 000017F4 3C0A                    	CMP	AL,10
 11287 000017F6 7403                    	JZ	SHORT REDISPJ
 11288 000017F8 B000                    	MOV	AL,0
 11289 000017FA C3                      	RETN
 11290                                  
 11291                                  REDISPJ:
 11292 000017FB FA                      	CLI
 11293                                  	;transfer REDISP
 11294 000017FC E9C8EB                  	JMP	REDISP
 11295                                  
 11296                                  ;============================================================================
 11297                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11298                                  ;============================================================================
 11299                                  ; 20/07/2018 - Retro DOS v3.0
 11300                                  ; 17/05/2019 - Retro DOS v4.0
 11301                                  
 11302                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11303                                  ;
 11304                                  ;	$GET_FCB_POSITION
 11305                                  ;	$FCB_DELETE
 11306                                  ;	$GET_FCB_FILE_LENGTH
 11307                                  ;	$FCB_CLOSE
 11308                                  ;	$FCB_RENAME
 11309                                  ;	SaveFCBInfo
 11310                                  ;	ResetLRU
 11311                                  ;	SetOpenAge
 11312                                  ;	LRUFCB
 11313                                  ;	FCBRegen
 11314                                  ;	BlastSFT
 11315                                  ;	CheckFCB
 11316                                  ;	SFTFromFCB
 11317                                  ;	FCBHardErr
 11318                                  ;
 11319                                  ;	Revision history:
 11320                                  ;
 11321                                  ;		Created: ARR 4 April 1983"
 11322                                  ;			 MZ  6 June  1983 completion of functions
 11323                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11324                                  ;					  times.  Change so successive closes work by
 11325                                  ;					  always returning OK.	Also, detect I/O to
 11326                                  ;					  already closed FCB and return EOF.
 11327                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11328                                  ;					  out of sft into FCB for reconnection
 11329                                  ;
 11330                                  ;		A000	 version 4.00  Jan. 1988
 11331                                  
 11332                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11333                                  ;----------------------------------------------------------------------------
 11334                                  ;
 11335                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11336                                  ;	extent and next record field and set the random record field to point
 11337                                  ;	to that record
 11338                                  ;
 11339                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11340                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11341                                  ;   Registers modified: all
 11342                                  ;
 11343                                  ;----------------------------------------------------------------------------
 11344                                  ;
 11345                                  
 11346                                  _$GET_FCB_POSITION:
 11347 000017FF E8F204                  	call	GetExtended		; point to FCB
 11348 00001802 E8C204                  	call	GetExtent		; DX:AX is current record
 11349                                  	;mov	[si+21h],ax
 11350 00001805 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11351                                  	;mov	[si+23h],dl
 11352 00001808 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11353                                  	;cmp	word [si+0Eh],64
 11354 0000180B 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11355 0000180F 7303                    	JAE	short GetFCBBye
 11356                                  	;mov	[si+24h],dh
 11357 00001811 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11358                                  GoodPath:	; 16/12/2022
 11359                                  GetFCBBye:
 11360 00001814 E989EE                  	jmp	FCB_RET_OK
 11361                                  
 11362                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11363                                  ;----------------------------------------------------------------------------
 11364                                  ;
 11365                                  ;**	$FCB_Delete - Delete from FCB Template
 11366                                  ;
 11367                                  ;	given an FCB, remove all directory entries in the current
 11368                                  ;	directory that have names that match the FCB's ?  marks.
 11369                                  ;
 11370                                  ;	ENTRY	(DS:DX) = address of FCB
 11371                                  ;	EXIT	entries matching the FCB are deleted
 11372                                  ;		(al) = ff iff no entries were deleted
 11373                                  ;	USES	all
 11374                                  ;
 11375                                  ;----------------------------------------------------------------------------
 11376                                  ;
 11377                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11378                                  
 11379                                  _$FCB_DELETE:		; System call 19
 11380                                  					; OpenBuf is in DOSDATA
 11381 00001817 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11382                                  
 11383 0000181A E81C54                  	call	TransFCB		; convert FCB to path
 11384 0000181D 7207                    	JC	short BadPath 		; signal no deletions
 11385                                  
 11386 0000181F 16                      	push	SS
 11387 00001820 1F                      	pop	DS			; SS is DOSDATA
 11388                                  
 11389 00001821 E89D0D                  	call	DOS_DELETE		; wham
 11390                                  	;JC	short BadPath
 11391                                  	; 16/12/2022
 11392 00001824 73EE                    	jnc 	short GoodPath
 11393                                  ;GoodPath:
 11394                                  ;	;jmp	FCB_RET_OK		; do a good return
 11395                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11396                                  ;	jmp	short GetFCBBye
 11397                                  
 11398                                  BadPath:
 11399                                  	; Error code is in AX
 11400                                  
 11401 00001826 E97AEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11402                                  
 11403                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11404                                  ;----------------------------------------------------------------------------
 11405                                  ;
 11406                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11407                                  ;	file in records (rounded up if partial).
 11408                                  ;
 11409                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11410                                  ;   Outputs:	Random record field updated to reflect the number of records
 11411                                  ;   Registers modified: all
 11412                                  ;
 11413                                  ;----------------------------------------------------------------------------
 11414                                  ;
 11415                                  
 11416                                  _$GET_FCB_FILE_LENGTH:
 11417                                  
 11418 00001829 E8C804                  	call	GetExtended		; get real FCB pointer
 11419                                  					; DX points to Input FCB
 11420                                  
 11421                                  					; OpenBuf is in DOSDATA
 11422 0000182C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11423                                  
 11424 0000182F 1E                      	push	ds			; save pointer to true FCB
 11425 00001830 56                      	push	si
 11426 00001831 E80554                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11427 00001834 5E                      	pop	si
 11428 00001835 1F                      	pop	ds
 11429 00001836 72EE                    	JC	short BadPath
 11430 00001838 1E                      	push	ds			; save pointer
 11431 00001839 56                      	push	si
 11432 0000183A 16                      	push	ss		
 11433 0000183B 1F                      	pop	ds
 11434 0000183C E89411                  	call	GET_FILE_INFO		; grab the info
 11435 0000183F 5E                      	pop	si			; get pointer back
 11436 00001840 1F                      	pop	ds
 11437 00001841 72E3                    	JC	short BadPath 		; invalid something
 11438 00001843 89DA                    	MOV	DX,BX			; get high order size
 11439 00001845 89F8                    	MOV	AX,DI			; get low order size
 11440                                  	;mov	bx,[si+0Eh]
 11441 00001847 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11442 0000184A 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11443 0000184C 7503                    	JNZ	short GetSize 		; not empty
 11444 0000184E BB8000                  	MOV	BX,128
 11445                                  GetSize:
 11446 00001851 89C7                    	MOV	DI,AX			; save low order word
 11447 00001853 89D0                    	MOV	AX,DX			; move high order for divide
 11448 00001855 31D2                    	XOR	DX,DX			; clear out high
 11449 00001857 F7F3                    	DIV	BX			; wham
 11450 00001859 50                      	PUSH	AX			; save dividend
 11451 0000185A 89F8                    	MOV	AX,DI			; get low order piece
 11452 0000185C F7F3                    	DIV	BX			; wham
 11453 0000185E 89D1                    	MOV	CX,DX			; save remainder
 11454 00001860 5A                      	POP	DX			; get high order dividend
 11455 00001861 E306                    	JCXZ	LengthStore		; no roundup
 11456 00001863 83C001                  	ADD	AX,1
 11457 00001866 83D200                  	ADC	DX,0			; 32-bit increment
 11458                                  LengthStore:
 11459                                  	;mov	[si+21h],ax
 11460 00001869 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11461                                  	;mov	[si+23h],dl
 11462 0000186C 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11463 0000186F 08F6                    	OR	DH,DH
 11464 00001871 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11465                                  	;mov	[si+24h],dh
 11466 00001873 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11467                                  	; 16/12/2022
 11468                                  GoodRet:
 11469                                  	;jmp	FCB_RET_OK
 11470 00001876 EB9C                    	jmp	short GoodPath
 11471                                  
 11472                                  ;Break <$FCB_Close - close a file>
 11473                                  ;----------------------------------------------------------------------------
 11474                                  ;
 11475                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11476                                  ;	as the FCB may be used for further I/O
 11477                                  ;
 11478                                  ;   Inputs:	DS:DX point to FCB
 11479                                  ;   Outputs:	AL = FF if file was not found on disk
 11480                                  ;   Registers modified: all
 11481                                  ;
 11482                                  ;----------------------------------------------------------------------------
 11483                                  ;
 11484                                  
 11485                                  _$FCB_CLOSE:		; System call 16
 11486                                  
 11487 00001878 30C0                    	XOR	AL,AL			; default search attributes
 11488 0000187A E87704                  	call	GetExtended		; DS:SI point to real FCB
 11489 0000187D 7403                    	JZ	short NoAttr		; not extended
 11490 0000187F 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11491                                  NoAttr:
 11492                                  					; SS override
 11493 00001882 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11494 00001886 E8D903                  	call	SFTFromFCB
 11495 00001889 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11496                                  
 11497                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11498                                  	; there is no need to set the SFT's attribute.
 11499                                  
 11500                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11501                                  	;;; done
 11502                                  
 11503                                  	;mov	al,[es:di+4]
 11504 0000188B 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11505 0000188F 30E4                    	XOR	AH,AH
 11506 00001891 50                      	PUSH	AX
 11507                                  
 11508                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11509                                  	;;; done
 11510                                  
 11511 00001892 E8D15B                  	call	CheckShare
 11512 00001895 7508                    	JNZ	short NoStash
 11513 00001897 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11514                                  	;mov	[es:di+4],al
 11515 0000189B 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11516                                  NoStash:
 11517                                  	;mov	ax,[si+14h]
 11518 0000189F 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11519                                  	;mov	[es:di+0Fh],ax
 11520 000018A2 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11521                                  	;mov	ax,[si+16h]
 11522 000018A6 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11523                                  	;mov	[es:di+0Dh],ax
 11524 000018A9 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11525                                  	;mov	ax,[si+10h]
 11526 000018AD 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11527                                  	;mov	[es:di+11h],ax
 11528 000018B0 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11529                                  	;mov	ax,[si+12h]
 11530 000018B4 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11531                                  	;mov	[es:di+13h],ax
 11532 000018B7 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11533                                  	;or	word [es:di+5],4000h
 11534                                  	; 17/12/2022
 11535 000018BB 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11536                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11537 000018C0 16                      	push	ss
 11538 000018C1 1F                      	pop	ds
 11539 000018C2 E80A17                  	call	DOS_CLOSE	; wham
 11540 000018C5 C43E[9E05]              	LES	DI,[THISSFT]
 11541                                  
 11542                                  	;;; 9/8/86 F.C. restore SFT attribute
 11543 000018C9 59                      	POP	CX
 11544                                  	;mov	[es:di+4],cl
 11545 000018CA 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11546                                  	;;; 9/8/86 F.C. restore SFT attribute
 11547                                  
 11548 000018CE 9C                      	PUSHF
 11549                                  	;test	word [es:di],0FFFFh
 11550                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11551                                  				; zero ref count gets blasted
 11552 000018CF 26833D00                	cmp	word [ES:DI],0
 11553 000018D3 7507                    	jnz     short CloseOK
 11554 000018D5 50                      	PUSH	AX
 11555 000018D6 B04D                    	MOV	AL,'M'
 11556 000018D8 E8FC02                  	call	BlastSFT
 11557 000018DB 58                      	POP	AX
 11558                                  CloseOK:
 11559 000018DC 9D                      	POPF
 11560 000018DD 7397                    	JNC	short GoodRet
 11561                                  	;cmp	al,6
 11562 000018DF 3C06                    	CMP	AL,error_invalid_handle
 11563 000018E1 7493                    	JZ	short GoodRet
 11564                                  	;mov	al,2
 11565 000018E3 B002                    	MOV	AL,error_file_not_found
 11566                                  fren90:
 11567                                  	; 16/12/2022
 11568                                  fcb_close_err:
 11569 000018E5 E9BBED                  	jmp	FCB_RET_ERR
 11570                                  
 11571                                  ;
 11572                                  ;----------------------------------------------------------------------------
 11573                                  ;
 11574                                  ;**	$FCB_Rename - Rename a File
 11575                                  ;
 11576                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11577                                  ;	multiple files copying from the meta characters.
 11578                                  ;
 11579                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11580                                  ;		    name of the files to be renamed. Starting at offset 11h
 11581                                  ;		    in the FCB is the destination name.
 11582                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11583                                  ;		AL = FF -> some files may have been renamed but:
 11584                                  ;			rename to existing file or source file not found
 11585                                  ;	USES	ALL
 11586                                  ;
 11587                                  ;----------------------------------------------------------------------------
 11588                                  ;
 11589                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11590                                  
 11591                                  _$FCB_RENAME:		; System call 23
 11592                                  
 11593 000018E8 E80904                  	call	GetExtended		; get pointer to real FCB
 11594 000018EB 52                      	push	dx
 11595 000018EC 8A04                    	MOV	AL,[SI] 		; get drive byte
 11596 000018EE 83C610                  	ADD	SI,10h			; point to destination
 11597                                  
 11598                                  					; RenBuf is in DOSDATA
 11599 000018F1 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11600 000018F4 FF34                    	push	word [SI]
 11601 000018F6 1E                      	push	ds
 11602 000018F7 57                      	push	di			; save source pointer for TransFCB
 11603 000018F8 8804                    	MOV	[SI],AL			; drop in real drive
 11604 000018FA 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11605 000018FC E83A53                  	call	TransFCB		; munch this pathname
 11606 000018FF 5E                      	pop	si
 11607 00001900 1F                      	pop	ds	
 11608 00001901 8F04                    	pop	WORD [SI]		; get path back
 11609 00001903 5A                      	pop	dx			; Original FCB pointer
 11610 00001904 72DF                    	JC	short fren90		; bad path -> error
 11611                                  
 11612                                  					; SS override for WFP_Start & Ren_WFP
 11613 00001906 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11614 0000190B 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11615                                  
 11616                                  					; OpenBuf is in DOSDATA
 11617 00001910 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11618 00001913 E82353                  	call	TransFCB		; wham
 11619                                  					; NOTE that this call is pointing
 11620                                  					;  back to the ORIGINAL FCB so
 11621                                  					;  SATTRIB gets set correctly
 11622 00001916 72CD                    	JC	short fren90		; error
 11623 00001918 E8840E                  	call	DOS_RENAME
 11624 0000191B 72C8                    	JC	short fren90
 11625                                  	; 16/12/2022
 11626 0000191D E980ED                  	jmp	FCB_RET_OK
 11627                                  	
 11628                                  ;	Error -
 11629                                  ;
 11630                                  ;	(al) = error code
 11631                                  
 11632                                  	; 16/12/2022
 11633                                  ;fren90:	
 11634                                  ;	;jmp	FCB_RET_ERR
 11635                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11636                                  ;	jmp	short fcb_close_err
 11637                                  
 11638                                  ;Break <Misbehavior fixers>
 11639                                  ;
 11640                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11641                                  ;   user's space so he may move them at will. Second, they have a small
 11642                                  ;   reserved area that may be used for system information. Third, there was
 11643                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11644                                  ;   usage.
 11645                                  ;
 11646                                  ;   This results in the following misbehavior:
 11647                                  ;
 11648                                  ;	infinite opens of the same file:
 11649                                  ;
 11650                                  ;	While (TRUE) {			While (TRUE) {
 11651                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11652                                  ;	    Read (FCB); 		    Write (FCB);
 11653                                  ;	    }				    }
 11654                                  ;
 11655                                  ;	infinite opens of different files:
 11656                                  ;
 11657                                  ;	While (TRUE) {			While (TRUE) {
 11658                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11659                                  ;	    Read (FCB); 		    Write (FCB);
 11660                                  ;	    }				    }
 11661                                  ;
 11662                                  ;	multiple closes of the same file:
 11663                                  ;
 11664                                  ;	FCBOpen (FCB);
 11665                                  ;	while (TRUE)
 11666                                  ;	    FCBClose (FCB);
 11667                                  ;
 11668                                  ;	I/O after closing file:
 11669                                  ;
 11670                                  ;	FCBOpen (FCB);
 11671                                  ;	while (TRUE) {
 11672                                  ;	    FCBWrite (FCB);
 11673                                  ;	    FCBClose (FCB);
 11674                                  ;	    }
 11675                                  ;
 11676                                  ;   The following is am implementation of a methodology for emulating the
 11677                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11678                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11679                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11680                                  ;   the local machine.
 11681                                  ;
 11682                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11683                                  ;   structures depending on the file itself and the state of operations of the
 11684                                  ;   OS. The information contained in this reserved field is enough to
 11685                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11686                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11687                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11688                                  ;
 11689                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11690                                  ;
 11691                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11692                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11693                                  ;   regenerated.
 11694                                  ;
 11695                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11696                                  ;   longer available. We can make up for this by using the following
 11697                                  ;   information:
 11698                                  ;
 11699                                  ;	The Drive number (from the DPB).
 11700                                  ;	The physical sector of the directory that contains the entry.
 11701                                  ;	The relative position of the entry in the sector.
 11702                                  ;	The first cluster field.
 11703                                  ;	The last used SFT.
 11704                                  ;      OR In the case of a device FCB
 11705                                  ;	The low 6 bits of sf_flags (indicating device type)
 11706                                  ;	The pointer to the device header
 11707                                  ;
 11708                                  ;   We read in the particular directory sector and examine the indicated
 11709                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11710                                  ;
 11711                                  ;   Some key items need to be remembered:
 11712                                  ;
 11713                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11714                                  ;	information. We enforce good behavior on the FCBs.
 11715                                  ;
 11716                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11717                                  ;	open VCs. The VCs may be closed only at process termination.
 11718                                  ;
 11719                                  ;	If this is not an installed version of the DOS, file sharing will
 11720                                  ;	always be present.
 11721                                  ;
 11722                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11723                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11724                                  ;
 11725                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11726                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11727                                  ;	proper OI record.
 11728                                  ;
 11729                                  ;   The test bits are:
 11730                                  ;
 11731                                  ;	00 -> local file
 11732                                  ;	40 -> sharing local
 11733                                  ;	80 -> network
 11734                                  ;	C0 -> local device
 11735                                  
 11736                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11737                                  ;----------------------------------------------------------------------------
 11738                                  ;
 11739                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11740                                  ;	pieces of information into the FCB to allow for subsequent
 11741                                  ;	regeneration. Poke LRU also.
 11742                                  ;
 11743                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11744                                  ;		DS:SI point to the FCB (not an extended one)
 11745                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11746                                  ;		DS:SI preserved
 11747                                  ;		ES:DI point to sft
 11748                                  ;   Registers modified: All
 11749                                  ;
 11750                                  ;
 11751                                  ;----------------------------------------------------------------------------
 11752                                  ;
 11753                                  
 11754                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11755                                  
 11756                                  SaveFCBInfo:
 11757                                  
 11758 00001920 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11759 00001925 E8B1F9                  	call	IsSFTNet
 11760 00001928 740B                    	JZ	short SaveLocal		; if not network then save local info
 11761                                  ;
 11762                                  ;----- In net support -----
 11763                                  ;
 11764                                  	; 17/05/2019 - Retro DOS v4.0
 11765                                  
 11766                                  	; MSDOS 3.3
 11767                                  	;;mov	ax,[es:di+1Dh]
 11768                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11769                                  	;;mov	[si+1Ah],ax
 11770                                  	;mov	[si+fcb_net_handle],ax
 11771                                  	;push	es
 11772                                  	;push	di
 11773                                  	;;les	di,[es:di+19h]
 11774                                  	;LES	DI,[ES:DI+sf_netid]
 11775                                  	;;mov	[si+1Ch],di
 11776                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11777                                  	;;mov 	[si+1Eh],es
 11778                                  	;MOV	[SI+fcb_netID+2],ES
 11779                                  	;pop	di
 11780                                  	;pop	es
 11781                                  
 11782                                  	; MSDOS 6.0
 11783                                  	;mov	ax,[es:di+0Bh]
 11784 0000192A 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11785                                  	;mov	[si+1Ch],ax
 11786 0000192E 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11787                                  	
 11788                                  	;mov	bl,80h
 11789 00001931 B380                    	MOV	BL,FCBNETWORK
 11790                                  ;
 11791                                  ;----- END In net support -----
 11792                                  ;
 11793 00001933 EB65                    	jmp	SHORT SaveSFN
 11794                                  
 11795                                  SaveLocal:
 11796                                  	;IF	Installed
 11797 00001935 E82E5B                  	call	CheckShare
 11798                                  	;JZ	short SaveNoShare	; no sharer
 11799                                  	;JMP	short SaveShare		; sharer present
 11800                                  	; 16/12/2022
 11801                                  	; 28/07/2019
 11802 00001938 755B                    	jnz	short SaveShare
 11803                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11804                                  	;JZ	short SaveNoShare	; no sharer
 11805                                  	;JMP	short SaveShare		; sharer present
 11806                                  
 11807                                  SaveNoShare:
 11808                                  	;;test 	word [es:di+5],80h
 11809                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11810 0000193A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11811 0000193F 7542                    	JNZ	short SaveNoShareDev	; Device
 11812                                  
 11813                                  	; Save no sharing local file information
 11814                                  
 11815                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11816                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11817 00001941 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11818                                  	;mov	[si+1Dh],ax
 11819 00001945 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11820                                  
 11821                                  	; MSDOS 6.0
 11822                                  
 11823                                  	;SR; Store high byte of directory sector
 11824                                  	;mov	ax,[es:di+1Dh]
 11825 00001948 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11826                                  	
 11827                                  	; SR;
 11828                                  	; We have to store the read-only and archive attributes of the file.
 11829                                  	; We extract it from the SFT and store it in the top two bits of the 
 11830                                  	; sector number ( sector number == 22 bits only )
 11831                                  
 11832                                  	;mov	bl,[es:di+4]
 11833 0000194C 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11834 00001950 88DF                    	mov	bh,bl
 11835 00001952 D0CB                    	ror	bl,1
 11836 00001954 D0E7                    	shl	bh,1
 11837 00001956 08FB                    	or	bl,bh
 11838 00001958 80E3C0                  	and	bl,0C0h
 11839 0000195B 08D8                    	or	al,bl
 11840                                  	;mov	[si+18h],al ; 08/11/2022
 11841 0000195D 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11842                                  
 11843                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11844                                  	;mov	al,[es:di+1Fh]
 11845 00001960 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11846                                  	;mov	[si+1Fh],al
 11847 00001964 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11848                                  	;mov	ax,[es:di+0Bh]
 11849 00001967 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11850                                  	;mov	[si+1Bh],ax
 11851 0000196B 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11852 0000196E B300                    	MOV	BL,0
 11853                                  
 11854                                  	; Create the bits field from the dirty/device bits of the flags word 
 11855                                  	; and the mode byte
 11856                                  
 11857                                  SetFCBBits:
 11858                                  	;mov	ax,[es:di+5]
 11859 00001970 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11860 00001974 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11861                                  	;or	al,[es:di+2]
 11862 00001976 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11863                                  	;mov	[si+1Ah], al
 11864 0000197A 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11865                                  
 11866                                  	; MSDOS 6.0
 11867                                  	
 11868                                  	; SR;
 11869                                  	; Check if we came here for local file or device. If for local file, 
 11870                                  	; skip setting of SFT index
 11871                                  	
 11872 0000197D 08DB                    	or	bl,bl
 11873 0000197F 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11874                                  
 11875 00001981 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11876                                  
 11877                                  	; Save no sharing local device information
 11878                                  
 11879                                  SaveNoShareDev:
 11880                                  	;mov	ax,[es:di+7]
 11881 00001983 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11882                                  	;mov	[si+1Ah],ax
 11883 00001987 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11884                                  	;mov	ax,[es:di+9]
 11885 0000198A 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11886 0000198E 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11887                                  	;mov	bl,40h
 11888 00001991 B340                    	MOV	BL,FCBDEVICE
 11889 00001993 EBDB                    	JMP	SetFCBBits		; go and save SFN
 11890                                  
 11891                                  SaveShare:
 11892                                  	;ENDIF
 11893                                  
 11894                                  ;----- In share support -----
 11895                                  
 11896                                  	;call	far [ss:ShSave]
 11897 00001995 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11898                                  
 11899                                  ;----- end in share support -----
 11900                                  
 11901                                  	; 17/05/2019
 11902                                  
 11903                                  SaveSFN:
 11904                                  	;lea	ax,[di-6]
 11905 0000199A 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11906                                  	
 11907                                  	; Adjust for offset to table.
 11908                                  	
 11909 0000199D 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11910                                  
 11911 000019A2 53                      	push	bx			;bx = FCB type (net/Share or local)
 11912                                  	;;mov	bl,53 ; MSDOS 3.3
 11913                                  	;mov	bl,59 ; MSDOS 6.0
 11914 000019A3 B33B                    	MOV	BL,SF_ENTRY.size
 11915 000019A5 F6F3                    	DIV	BL
 11916                                  	;mov	[si+18h],al
 11917 000019A7 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11918 000019AA 5B                      	pop	bx			;restore bx
 11919                                  
 11920                                  SaveNoSFN:
 11921                                  	;mov	ax,[es:di+5]
 11922 000019AB 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11923 000019AF 243F                    	AND	AL,3Fh			; get real drive
 11924 000019B1 08D8                    	OR	AL,BL
 11925                                  	;mov	[si+19h],al
 11926 000019B3 884419                  	MOV	[SI+fcb_l_drive],AL
 11927                                  
 11928 000019B6 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11929 000019BA 40                      	INC	AX
 11930                                  	;mov	[es:di+15h],ax
 11931 000019BB 26894515                	MOV	[ES:DI+sf_LRU],AX
 11932 000019BF 7506                    	JNZ	short SimpleStuff
 11933                                  	
 11934                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11935                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11936                                  	
 11937                                  	;mov	bx,15h
 11938 000019C1 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11939 000019C4 E80500                  	call	ResetLRU
 11940                                  
 11941                                  	; Set new LRU to AX
 11942                                  SimpleStuff:
 11943 000019C7 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11944 000019CB C3                      	retn
 11945                                  
 11946                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11947                                  ;----------------------------------------------------------------------------
 11948                                  ;
 11949                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11950                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11951                                  ;   at 0.
 11952                                  ;
 11953                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11954                                  ;		ES:DI point to SFT currently being updated
 11955                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11956                                  ;		AX has 8000h
 11957                                  ;   Registers modified: none
 11958                                  ;
 11959                                  ;----------------------------------------------------------------------------
 11960                                  ;
 11961                                  
 11962                                  	; 17/05/2019 - Retro DOS v4.0
 11963                                  ResetLRU:
 11964                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11965                                  	; DOSDATA
 11966                                  
 11967 000019CC B80080                  	MOV	AX,8000h
 11968 000019CF 06                      	push	es
 11969 000019D0 57                      	push	di
 11970                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 11971 000019D1 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11972                                  	;mov	cx,[es:di+4]
 11973 000019D6 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11974                                  	;lea	di,[di+6]
 11975 000019DA 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11976                                  ovScan:
 11977 000019DD 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11978 000019E0 7703                    	JA	short ovLoop
 11979 000019E2 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11980                                  ovLoop:
 11981                                  	;;add	di,53	; MSDOS 3.3
 11982                                  	;add	di,59	; MSDOS 6.0	
 11983 000019E5 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11984 000019E8 E2F3                    	LOOP	ovScan
 11985 000019EA 5F                      	pop	di
 11986 000019EB 07                      	pop	es
 11987 000019EC 268901                  	MOV	[ES:DI+BX],AX
 11988 000019EF C3                      	retn
 11989                                  
 11990                                  ;IF  0  ; We dont need this routine any more.
 11991                                  ;
 11992                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11993                                  ;----------------------------------------------------------------------------
 11994                                  ;
 11995                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11996                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 11997                                  ;   count here and fill in the appropriate field.
 11998                                  ;
 11999                                  ;   Inputs:	ES:DI point to SFT
 12000                                  ;   Outputs:	ES:DI has the open age field filled in.
 12001                                  ;		If open age has wraparound, we will have subtracted 8000h
 12002                                  ;		    from all open ages.
 12003                                  ;   Registers modified: AX
 12004                                  ;
 12005                                  ;----------------------------------------------------------------------------
 12006                                  ;
 12007                                  ;SetOpenAge:
 12008                                  ;	; 20/07/2018 - Retro DOS v3.0
 12009                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12010                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12011                                  ;
 12012                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12013                                  ;
 12014                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12015                                  ;	INC	AX
 12016                                  ;	;mov	[es:di+17h],ax
 12017                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12018                                  ;	JNZ	short SetDone
 12019                                  ;	;mov	bx,17h
 12020                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12021                                  ;	call	ResetLRU
 12022                                  ;SetDone:
 12023                                  ;	MOV	[CS:OpenLRU],AX
 12024                                  ;	retn
 12025                                  ;
 12026                                  ;ENDIF	; SetOpenAge no longer needed
 12027                                  
 12028                                  ; 21/07/2018 - Retro DOS v3.0
 12029                                  ; LRUFCB for MSDOS 6.0 !
 12030                                  
 12031                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12032                                  ;----------------------------------------------------------------------------
 12033                                  ;
 12034                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12035                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12036                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12037                                  ;
 12038                                  ;   Inputs:	none
 12039                                  ;   Outputs:	ES:DI point to SFT
 12040                                  ;		ThisSFT points to SFT
 12041                                  ;		SFT is zeroed
 12042                                  ;		Carry set of closes failed
 12043                                  ;   Registers modified: none
 12044                                  ;
 12045                                  ;----------------------------------------------------------------------------
 12046                                  ;
 12047                                  ; MSDOS 6.0
 12048                                  ;IF 0	; rewritten this routine
 12049                                  ;
 12050                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12051                                  ;	call	save_world
 12052                                  ;	
 12053                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12054                                  ; to find the lease recently used one that is younger than the open age.  We
 12055                                  ; operate be scanning the list n times finding the least age that is greater
 12056                                  ; or equal to the previous minimum age.
 12057                                  ;
 12058                                  ;   BP is the count of times we need to go through this loop.
 12059                                  ;   AX is the current acceptable minimum age to consider
 12060                                  ;
 12061                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12062                                  ;	XOR	AX,AX			; low = 0;
 12063                                  ;
 12064                                  ; If we've scanned the table n times, then we are done.
 12065                                  ;
 12066                                  ;lru1:
 12067                                  ;	CMP	bp,0			; while (k--) {
 12068                                  ;	JZ	short lru75
 12069                                  ;	DEC	bp
 12070                                  ;
 12071                                  ; Set up for scan.
 12072                                  ;
 12073                                  ;   AX is the minimum age for consideration
 12074                                  ;   BX is the minimum age found during the scan
 12075                                  ;   SI is the position of the entry that corresponds to BX
 12076                                  ;
 12077                                  ;	MOV	BX,-1			;     min = 0xffff;
 12078                                  ;	MOV	si,BX			;     pos = 0xffff;
 12079                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12080                                  ;	;mov	cx,[es:di+4]
 12081                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12082                                  ;	;lea	di,[di+6]
 12083                                  ;	LEA	DI,[DI+SFT.SFTable]
 12084                                  ;
 12085                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12086                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12087                                  ; are done.  In both cases, we use the found entry.
 12088                                  ;
 12089                                  ;lru2:
 12090                                  ;	cmp	word [es:di],0
 12091                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12092                                  ;	jz	short lru25
 12093                                  ;	;cmp	word [es:di],-1
 12094                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12095                                  ;	cmp	word [es:di],sf_busy
 12096                                  ;	jnz	short lru3
 12097                                  ;
 12098                                  ; The entry is usable without further scan.  Go and use it.
 12099                                  ;
 12100                                  ;lru25:
 12101                                  ;	MOV	si,DI			;	      pos = i;
 12102                                  ;	JMP	short lru11		;	      goto got;
 12103                                  ;
 12104                                  ; See if the entry is for the network or for the sharer.
 12105                                  ;
 12106                                  ;  If for the sharer or network then
 12107                                  ;	if the age < current minimum AND >= allowed minimum then
 12108                                  ;	    this entry becomes current minimum
 12109                                  ;
 12110                                  ;lru3:
 12111                                  ;	;test	word [es:di+5],8000h
 12112                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12113                                  ;					;	  if (!net[i]
 12114                                  ;	JNZ	short lru35
 12115                                  ;if installed
 12116                                  ;	call	CheckShare		;		&& !sharing)
 12117                                  ;	JZ	short lru5		;	  else
 12118                                  ;ENDIF
 12119                                  ;
 12120                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12121                                  ; current minimum.
 12122                                  ;
 12123                                  ;lru35:
 12124                                  ;	;mov	dx,[es:di+17h]
 12125                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12126                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12127                                  ;	JB	short lru5
 12128                                  ;	CMP	DX,BX
 12129                                  ;	JAE	short lru5		;	      age[i] < min) {
 12130                                  ;
 12131                                  ; entry is new minimum.  Remember his age.
 12132                                  ;
 12133                                  ;	mov	bx,DX			;	      min = age[i];
 12134                                  ;	mov	si,di			;	      pos = i;
 12135                                  ;
 12136                                  ; End of loop.	gp back for more
 12137                                  ;
 12138                                  ;lru5:
 12139                                  ;	;add	di,53
 12140                                  ;	add	di,SF_ENTRY.size
 12141                                  ;	loop	lru2			;	      }
 12142                                  ;
 12143                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12144                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12145                                  ; complete.  Go find LRU.
 12146                                  ;
 12147                                  ;lru6:	
 12148                                  ;	cmp	si,-1			; position not -1?
 12149                                  ;	jz	short lru75		; no, done with everything
 12150                                  ;	lea	ax,[bx+1]		; set new threshold age
 12151                                  ;	jmp	short lru1		; go and loop for more
 12152                                  ;lru65:	
 12153                                  ;	stc
 12154                                  ;	jmp	short LRUDead		;	  return -1;
 12155                                  ;
 12156                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12157                                  ; network entry. We now make a second pass through to find the LRU entry
 12158                                  ; that is local-no-share or has age >= AX
 12159                                  ;
 12160                                  ;lru75:
 12161                                  ;	mov	bx,-1			; min = 0xffff;
 12162                                  ;	mov	si,bx			; pos = 0xffff;
 12163                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12164                                  ;	;mov	cx,[es:di+4]
 12165                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12166                                  ;	;lea	di,[di+6]
 12167                                  ;	LEA	DI,[DI+SFT.SFTable]
 12168                                  ;
 12169                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12170                                  ; then check for lru.
 12171                                  ;
 12172                                  ;lru8:
 12173                                  ;	;test	word [es:di+5],8000h
 12174                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12175                                  ;	jnz	short lru85		; is for network, go check age
 12176                                  ;	call	CheckShare		; sharer here?
 12177                                  ;	jz	short lru86		; no, go check lru
 12178                                  ;
 12179                                  ; Network or sharer.  Check age
 12180                                  ;
 12181                                  ;lru85:
 12182                                  ;	;cmp	[es:di+17h],ax
 12183                                  ;	cmp	[es:di+sf_OpenAge],ax
 12184                                  ;	jb	short lru9		; age is before threshold, skip it
 12185                                  ;
 12186                                  ; Check LRU
 12187                                  ;
 12188                                  ;lru86:
 12189                                  ;	;cmp	[es:di+15h],bx
 12190                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12191                                  ;	jae	short lru9		; no, skip this
 12192                                  ;	mov	si,di			; remember position
 12193                                  ;	;mov	bx,[es:di+15h]
 12194                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12195                                  ;
 12196                                  ; Done with this entry, go back for more.
 12197                                  ;
 12198                                  ;lru9:
 12199                                  ;	;add	di, 53
 12200                                  ;	add	di,SF_ENTRY.size
 12201                                  ;	loop	lru8
 12202                                  ;
 12203                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12204                                  ; out. The conditions here are:
 12205                                  ;
 12206                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12207                                  ;
 12208                                  ;lru10:
 12209                                  ;	cmp	si,-1			; if no one f
 12210                                  ;	jz	short lru65		;     return -1;
 12211                                  ;lru11:
 12212                                  ;	mov	di,si
 12213                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12214                                  ;	MOV	[CS:THISSFT+2],ES
 12215                                  ;
 12216                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12217                                  ; is 0.
 12218                                  ;
 12219                                  ;	;test	word [es:di+5],8000h
 12220                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12221                                  ;	JNZ	short LRUClose
 12222                                  ;IF INSTALLED
 12223                                  ;	call	CheckShare
 12224                                  ;	JZ	short LRUDone
 12225                                  ;ENDIF
 12226                                  ;
 12227                                  ; Repeat close until ref count is 0
 12228                                  ;
 12229                                  ;LRUClose:
 12230                                  ;	push	ss
 12231                                  ;	pop	ds
 12232                                  ;	LES	DI,[THISSFT]
 12233                                  ;	cmp     word [es:di],0
 12234                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12235                                  ;	JZ	short LRUDone 		; nope, all done
 12236                                  ;	call	DOS_CLOSE
 12237                                  ;	jnc	short LRUClose		; no error => clean up
 12238                                  ;	;cmp	al,6
 12239                                  ;	cmp	al,error_invalid_handle
 12240                                  ;	jz	short LRUClose
 12241                                  ;	stc
 12242                                  ;	JMP	short LRUDead
 12243                                  ;LRUDone:
 12244                                  ;	XOR	AL,AL
 12245                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12246                                  ;
 12247                                  ;LRUDead:
 12248                                  ;	call	restore_world
 12249                                  ;	LES     DI,[CS:THISSFT]
 12250                                  ;	jnc	short LRUFCB_retn
 12251                                  ;LRUFCB_err:
 12252                                  ;	; mov	al, 23h	
 12253                                  ;	MOV	AL,error_FCB_unavailable
 12254                                  ;LRUFCB_retn:	
 12255                                  ;	retn:
 12256                                  ;
 12257                                  ;ENDIF	; LRUFCB has been rewritten below.
 12258                                  
 12259                                  ; 17/05/2019 - Retro DOS v4.0
 12260                                  ; LRUFCB for MSDOS 6.0 !
 12261                                  ;----------------------------------------------------------------------------
 12262                                  ;
 12263                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12264                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12265                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12266                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12267                                  ; optimize regeneration operations by keeping track of the current local
 12268                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12269                                  ; local SFT in the SFT Block.
 12270                                  ;
 12271                                  ; Inputs: al = 0 => Regenerate SFT operation
 12272                                  ;	    = 1 => Allocate new SFT for Open/Create
 12273                                  ;
 12274                                  ; Outputs: Carry clear
 12275                                  ;	 	es:di = Address of allocated SFT
 12276                                  ;	  	ThisSFT = Address of allocated SFT
 12277                                  ;
 12278                                  ;	  carry set if closes of net/Share files failed 
 12279                                  ;		al = error_FCB_unavailable
 12280                                  ;
 12281                                  ; Registers affected: None
 12282                                  ;
 12283                                  ;----------------------------------------------------------------------------
 12284                                  
 12285                                  ;LruFCB	PROC	NEAR
 12286                                  LRUFCB:
 12287                                  	; 17/05/2019 - Retro DOS v4.0
 12288                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12289                                  
 12290                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12291                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12292                                  
 12293 000019F0 06                      	push	es	; * (MSDOS 6.21)
 12294                                  	
 12295 000019F1 E8B7EA                  	call	save_world
 12296                                  	
 12297                                  	;getdseg <ds>		;ds = DOSDATA
 12298 000019F4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12299                                  
 12300 000019F9 08C0                    	or	al,al		;Check if regenerate allocation
 12301 000019FB 751A                    	jnz	short lru1	;Try to find SFT to use
 12302                                  
 12303                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12304                                  	; local SFT, just return that SFT to reuse
 12305                                  
 12306 000019FD 8B3E[5D10]              	mov	di,[LocalSFT]
 12307 00001A01 0B3E[5F10]              	or	di,[LocalSFT+2]	;is address == 0?
 12308 00001A05 7410                    	jz	short lru1	;invalid local SFT, find one
 12309                                  
 12310                                  	; We have found a valid local SFT. Recycle this SFT
 12311                                  
 12312 00001A07 C43E[5D10]              	les	di,[LocalSFT]
 12313                                  
 12314                                  gotlocalSFT:
 12315 00001A0B 893E[9E05]              	mov	[THISSFT],di
 12316 00001A0F 8C06[A005]              	mov	[THISSFT+2],es
 12317 00001A13 F8                      	clc
 12318 00001A14 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12319                                  
 12320                                  lru1:
 12321 00001A17 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12322                                  	;mov	cx,[es:di+4]
 12323 00001A1B 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12324                                  	;lea	di,[di+6]
 12325 00001A1F 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12326                                  
 12327                                  	; We scan through all the SFTs scanning for a free one. It also 
 12328                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12329                                  	; bx = min. LRU for local SFTs
 12330                                  	; si = pos. of local SFT with min. LRU
 12331                                  	; dx = min. LRU for net/Share SFTs
 12332                                  	; bp = pos. of net/Share SFT with min. LRU
 12333                                  
 12334 00001A22 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12335 00001A25 89DE                    	mov	si,bx
 12336 00001A27 89DA                    	mov	dx,bx
 12337 00001A29 89DD                    	mov	bp,bx
 12338                                  
 12339                                  findSFT:
 12340                                  	;See if this SFT is a free one. If so, return it
 12341 00001A2B 26830D00                	or	word [es:di],0
 12342                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12343 00001A2F 744D                    	jz	short gotSFT	;yes, SFT is free
 12344                                  	;;cmp	word [es:di],-1
 12345                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12346 00001A31 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12347 00001A35 7447                    	jz	short gotSFT	;no, can use it
 12348                                  
 12349                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12350                                  	; used for a later regen.
 12351                                  
 12352                                  	; 16/12/2022
 12353                                  	; 08/11/2022
 12354                                  	;test	byte [es:di+6],80h
 12355 00001A37 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12356                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12357                                  	;;test	word [es:di+5],8000h
 12358                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12359 00001A3C 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12360                                  
 12361                                  ;IF installed
 12362 00001A3E E8255A                  	call	CheckShare	;Share present?
 12363                                  ;ENDIF
 12364 00001A41 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12365                                  
 12366                                  	;Local SFT, register its address
 12367                                  
 12368                                  	; !!HACK!!!
 12369                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12370                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12371                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12372                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12373                                  	; out the code that previously existed at label 'gotSFT'
 12374                                  
 12375                                  hackpoint:
 12376 00001A43 893E[5D10]              	mov	[LocalSFT],di
 12377 00001A47 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12378                                  
 12379 00001A4B 08C0                    	or	al,al		;Is operation = REGEN?
 12380 00001A4D 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12381                                  
 12382                                  	;Get LRU for local files
 12383                                  	
 12384                                  	;cmp	[es:di+15h],bx
 12385 00001A4F 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12386 00001A53 7306                    	jae	short lru4	;no, skip 
 12387                                  
 12388                                  	;mov	bx,[es:di+15h]
 12389 00001A55 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12390 00001A59 89FE                    	mov	si,di		;store SFT position
 12391                                  
 12392                                  lru4:
 12393                                  	;add	di,59
 12394 00001A5B 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12395 00001A5E E2CB                    	loop	findSFT
 12396                                  
 12397                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12398                                  	; available, we will reuse it instead of net/Share LRU
 12399                                  
 12400 00001A60 89F7                    	mov	di,si
 12401 00001A62 83FEFF                  	cmp	si,-1		;local SFT available?
 12402 00001A65 7517                    	jnz	short gotSFT	;yes, return it
 12403                                  
 12404                                  	;No local SFT, see if we got a net/Share SFT
 12405                                  
 12406 00001A67 89EF                    	mov	di,bp
 12407 00001A69 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12408 00001A6C 7530                    	jnz	short gotnetSFT	;yes, return it
 12409                                  noSFT:
 12410                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12411                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12412                                  	; count is not maintained properly.
 12413                                  
 12414 00001A6E EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12415                                  
 12416                                  	; Handle the LRU for net/Share SFTs
 12417                                  lru5:
 12418                                  	;cmp	[es:di+15h],dx
 12419 00001A70 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12420 00001A74 73E5                    	jae	short lru4	;no, skip 
 12421                                  
 12422                                  	;mov	dx,[es:di+15h]
 12423 00001A76 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12424                                  
 12425 00001A7A 89FD                    	mov	bp,di		;store SFT position
 12426 00001A7C EBDD                    	jmp	short lru4	;continue with next SFT
 12427                                  
 12428                                  gotSFT:
 12429 00001A7E 08C0                    	or	al,al
 12430 00001A80 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12431                                  
 12432                                  	; HACK!!!
 12433                                  	; The code here differs from the code at 'hackpoint' only in the 
 12434                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12435                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12436                                  	; has been commented out below and replaced by the code just above.
 12437                                  
 12438                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12439                                  ;
 12440                                  ;	or	al,al		  ;Regen?
 12441                                  ;	jnz	short notlocaluse ;yes, register it and return
 12442                                  ;
 12443                                  ;Register this SFT as a local one
 12444                                  ;
 12445                                  ;	mov	[LocalSFT],di
 12446                                  ;	mov	[LocalSFT+2],es
 12447                                  ;	jmp	gotlocalSFT	;return to caller
 12448                                  ;
 12449                                  ;notlocaluse:
 12450                                  
 12451                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12452                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12453                                  	; does not really know whether it is a local file or not. We 
 12454                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12455                                  	; registered as a local SFT that can be recycled.
 12456                                  
 12457 00001A82 8CC0                    	mov	ax,es
 12458 00001A84 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12459 00001A88 7506                    	jne	short notinvalid
 12460 00001A8A 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12461 00001A8E 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12462                                  notinvalid:
 12463 00001A90 E978FF                  	jmp	gotlocalSFT
 12464                                  
 12465                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12466                                  	; Invalidate this variable i.e LocalSFT = NULL
 12467                                  
 12468                                  zerolocalSFT:
 12469 00001A93 31C0                    	xor	ax,ax ; 0
 12470 00001A95 A3[5D10]                	mov	[LocalSFT],ax
 12471 00001A98 A3[5F10]                	mov	[LocalSFT+2],ax
 12472                                  
 12473 00001A9B E96DFF                  	jmp	gotlocalSFT
 12474                                  
 12475                                  gotnetSFT:
 12476                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12477                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12478                                  	; LocalSFT variable
 12479                                  
 12480 00001A9E 08C0                    	or	al,al
 12481 00001AA0 7508                    	jnz	short closenet
 12482                                  
 12483 00001AA2 893E[5D10]              	mov	[LocalSFT],di
 12484 00001AA6 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12485                                  closenet:
 12486 00001AAA 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12487 00001AAE 8C06[A005]              	mov	[THISSFT+2],es	
 12488                                  
 12489                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12490                                  	; count is 0.
 12491                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12492                                  	; recycled -- no need to check for this.
 12493                                  
 12494                                  LRUClose:
 12495 00001AB2 26833D00                	cmp	word [es:di],0
 12496                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12497 00001AB6 740C                    	jz	short LRUDone	; nope, all done
 12498                                  
 12499 00001AB8 E81415                  	call	DOS_CLOSE
 12500 00001ABB 73F5                    	jnc	short LRUClose	; no error => clean up
 12501                                  
 12502                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12503                                  	; error closing. Seems like we could have a potential infinite loop  
 12504                                  	; here. This has to be verified.
 12505                                  
 12506 00001ABD 3C06                    	cmp	al,error_invalid_handle ; 6
 12507 00001ABF 74F1                    	je	short LRUClose
 12508                                  errorbadSFT:
 12509 00001AC1 F9                      	stc
 12510 00001AC2 EB05                    	JMP	short LRUDead
 12511                                  LRUDone:
 12512 00001AC4 30C0                    	XOR	AL,AL
 12513 00001AC6 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12514                                  
 12515                                  LRUDead:
 12516 00001AC9 E8C8E9                  	call	restore_world		; use macro
 12517                                  	
 12518 00001ACC 07                      	pop	es ; * (MSDOS 6.21)
 12519                                  
 12520                                  	;getdseg <es>
 12521 00001ACD 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12522                                  
 12523 00001AD2 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12524                                  
 12525                                  	;;retnc
 12526                                  	;jc	short LruFCB_err
 12527                                  	;retn
 12528                                  
 12529                                  	; 16/12/2022
 12530                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12531 00001AD7 7302                    	jnc	short LruFCB_retn
 12532                                  	;jc	short LruFCB_err
 12533                                  	;retn
 12534                                  		
 12535                                  LruFCB_err:
 12536 00001AD9 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12537                                  LruFCB_retn:
 12538 00001ADB C3                      	retn
 12539                                  	
 12540                                  ;LruFCB	ENDP
 12541                                  
 12542                                  ; 17/05/2019 - Retro DOS v4.0
 12543                                  
 12544                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12545                                  
 12546                                  ; --------------------------------------------------------------------------
 12547                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12548                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12549                                  ; to copy the name to different destinations
 12550                                  ;
 12551                                  ; Inputs: ds:si = source string
 12552                                  ;	 es:di = destination string
 12553                                  ;	 cx = length of string
 12554                                  ;
 12555                                  ; Outputs: String copied to destination
 12556                                  ;
 12557                                  ; Registers affected: cx,di,si
 12558                                  ; --------------------------------------------------------------------------
 12559                                  
 12560                                  RegenCopyName:
 12561                                  CopyName:
 12562 00001ADC AC                      	lodsb			;load character
 12563 00001ADD E87936                  	call	UCase		; convert char to upper case
 12564                                  StuffChar2:
 12565 00001AE0 AA                      	STOSB			;store converted character
 12566 00001AE1 E2F9                    	LOOP	CopyName	;
 12567                                  DoneName:
 12568 00001AE3 C3                      	retn
 12569                                  
 12570                                  ; --------------------------------------------------------------------------
 12571                                  
 12572                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12573                                  FCBRegen:
 12574                                  	; called from SFTFromFCB. SS already DOSDATA
 12575                                  
 12576                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12577                                  	; we do not fill, size we do no fill, position we do not fill,
 12578                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12579                                  
 12580                                  	;mov	al,[si+19h]
 12581 00001AE4 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12582                                  
 12583                                  	; We discriminate based on the first two bits in the reserved field.
 12584                                  	
 12585                                  	;test	al,80h
 12586 00001AE7 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12587 00001AE9 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12588                                  
 12589                                  	; The FCB is for a network or a sharing based system. At this point 
 12590                                  	; we have already closed the SFT for this guy and reconnection is 
 12591                                  	; impossible.
 12592                                  	;
 12593                                  	; Remember that he may have given us a FCB with bogus information in
 12594                                  	; it. Check to see if sharing is present or if the redir is present.
 12595                                  	; If either is around, presume that we have cycled out the FCB and 
 12596                                  	; give the hard error. Otherwise, just return with carry set.
 12597                                  
 12598 00001AEB E87859                  	call	CheckShare		; test for sharer
 12599 00001AEE 7509                    	JNZ	short RegenFail		; yep, fail this.
 12600                                  	
 12601                                  	;mov	ax,1100h
 12602 00001AF0 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12603 00001AF3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12604                                  			; Return: AL = 00h  not installed, OK to install
 12605                                  			; 01h  not installed, not OK to install
 12606                                  			; FFh  installed
 12607 00001AF5 08C0                    	OR	AL,AL			; is it there?
 12608 00001AF7 740C                    	JZ	short RegenDead		; no, just fail the operation
 12609                                  RegenFail:
 12610                                  	; 17/05/2019 - Retro DOS v4.0
 12611                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12612 00001AF9 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12613                                  
 12614                                  	;cmp	ah,10h
 12615 00001AFD 80FC10                  	cmp	AH,FCB_CLOSE
 12616 00001B00 7403                    	jz	short RegenDead
 12617 00001B02 E89301                  	call	FCBHardErr		; massive hard error.
 12618                                  RegenDead:
 12619 00001B05 F9                      	STC				; carry set
 12620                                  FCBRegen_retn:
 12621 00001B06 C3                      	retn
 12622                                  
 12623                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12624                                  	; so fail the operation.
 12625                                  
 12626                                  RegenNoSharing:
 12627 00001B07 E85C59                  	call	CheckShare		; Sharing around?
 12628 00001B0A 75ED                    	JNZ	short RegenFail
 12629                                  	
 12630                                  	; Find an SFT for this guy.
 12631                                  	
 12632                                  	; 17/05/2019 - Retro DOS v4.0
 12633                                  
 12634                                  	; MSDOS 3.3
 12635                                  	;call	LRUFCB
 12636                                  	;jc	short FCBRegen_retn
 12637                                  	
 12638                                  	; MSDOS 6.0
 12639 00001B0C 50                      	push	ax
 12640 00001B0D B000                    	mov	al,0			;indicate it is a regen operation
 12641 00001B0F E8DEFE                  	call	LRUFCB
 12642 00001B12 58                      	pop	ax
 12643 00001B13 72F1                    	jc	short FCBRegen_retn
 12644                                  
 12645                                  	;mov	word [es:di+2],8002h
 12646 00001B15 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12647 00001B1B 243F                    	AND	AL,3Fh			; get drive number for flags
 12648 00001B1D 98                      	CBW
 12649                                  	;or	ax,4000h
 12650 00001B1E 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12651                                  
 12652                                  	; The bits field consists of the upper two bits (dirty and device) 
 12653                                  	; from the SFT and the low 4 bits from the open mode.
 12654                                  
 12655                                  	;mov	cl,[si+1Ah]
 12656 00001B21 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12657 00001B24 88CD                    	MOV	CH,CL
 12658 00001B26 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12659 00001B29 08E8                    	OR	AL,CH
 12660                                  	;and	cl,0Fh
 12661 00001B2B 80E10F                  	AND	CL,access_mask		; get the mode bits
 12662                                  	;mov	[es:di+2],cl
 12663 00001B2E 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12664                                  	;mov	[es:di+5],ax
 12665 00001B32 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12666                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12667 00001B36 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12668                                  	;mov	[es:di+31h],ax
 12669 00001B3A 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12670 00001B3E 1E                      	push	ds
 12671 00001B3F 56                      	push	si
 12672 00001B40 06                      	push	es
 12673 00001B41 57                      	push	di
 12674 00001B42 16                      	push	ss
 12675 00001B43 07                      	pop	es
 12676 00001B44 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12677                                  
 12678 00001B47 B90800                  	MOV	CX,8
 12679 00001B4A 46                      	INC	SI			; Skip past drive byte to name in FCB
 12680                                  
 12681                                  	; MSDOS 3.3
 12682                                  ;RegenCopyName:
 12683                                  	;lodsb
 12684                                  	;call	UCase
 12685                                  	;stosb
 12686                                  	;loop	RegenCopyName
 12687                                  
 12688                                  	; MSDOS 6.0
 12689 00001B4B E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12690                                  
 12691 00001B4E 16                      	push	ss	; SS is DOSDATA
 12692 00001B4F 1F                      	pop	ds
 12693                                  
 12694                                  	;mov	byte [ATTRIB],16h
 12695 00001B50 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12696                                  					; Must set this to something interesting
 12697                                  					; to call DEVNAME.
 12698 00001B55 E86327                  	call	DEVNAME 		; check for device
 12699 00001B58 5E                      	pop	si
 12700 00001B59 07                      	pop	es
 12701 00001B5A 5E                      	pop	si
 12702 00001B5B 1F                      	pop	ds
 12703 00001B5C 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12704                                  
 12705                                  	; Device found. We can ignore disk-specific info
 12706                                  
 12707                                  	;mov	[es:di+5],bh
 12708 00001B5E 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12709                                  	;mov	byte [es:di+4],0
 12710 00001B62 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12711                                  					; SS override
 12712                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12713 00001B67 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12714                                  	;mov	[es:di+7],si
 12715 00001B6C 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12716                                  	;mov	[es:di+9],ds
 12717 00001B70 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12718 00001B74 C3                      	retn				; carry is clear
 12719                                  
 12720                                  RegenDeadJ:
 12721 00001B75 EB8E                    	JMP	short RegenDead
 12722                                  
 12723                                  	; File found. Just copy in the remaining pieces.
 12724                                  
 12725                                  RegenFileNoSharing:
 12726                                  	;mov	ax,[es:di+5]
 12727 00001B77 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12728 00001B7B 83E03F                  	AND	AX,03Fh
 12729 00001B7E 1E                      	push	ds
 12730 00001B7F 56                      	push	si
 12731 00001B80 E86B4F                  	call	FIND_DPB
 12732                                  	;mov	[es:di+7],si
 12733 00001B83 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12734                                  	;mov	[es:di+9],ds
 12735 00001B87 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12736 00001B8B 5E                      	pop	si
 12737 00001B8C 1F                      	pop	ds
 12738 00001B8D 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12739                                  					; indicator was bogus
 12740                                  	;mov	ax,[si+1Dh]
 12741 00001B8F 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12742                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12743                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12744 00001B92 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12745                                  
 12746                                  	; MSDOS 6.0
 12747                                  
 12748                                  	; SR;
 12749                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12750                                  	; number
 12751                                  
 12752                                  	;mov	al,[si+18h]
 12753 00001B96 8A4418                  	mov	al,[si+fcb_sfn]
 12754 00001B99 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12755 00001B9B 88C4                    	mov	ah,al
 12756 00001B9D D0C4                    	rol	ah,1
 12757 00001B9F D0E8                    	shr	al,1
 12758 00001BA1 08E0                    	or	al,ah
 12759 00001BA3 243F                    	and	al,03Fh		;mask off unused bits
 12760                                  	;mov	[es:di+4],al
 12761 00001BA5 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12762                                  
 12763                                  	; SR;
 12764                                  	; Update the higher word of the directory sector from the FCB
 12765                                  
 12766                                  	;;mov	al,[si+18h]
 12767 00001BA9 8A4418                  	mov	al,[si+fcb_sfn]
 12768 00001BAC 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12769 00001BAE 28E4                    	sub	ah,ah
 12770                                  	;mov	[es:di+1Dh],ax
 12771 00001BB0 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12772                                  
 12773                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12774                                  	;mov	ax,[si+1Bh]
 12775 00001BB4 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12776                                  	;mov	[es:di+0Bh],ax
 12777 00001BB7 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12778                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12779                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12780 00001BBB 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12781                                  	;mov	al,[si+1Fh]
 12782 00001BBF 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12783                                  	;mov  	[es:di+1Fh],al
 12784 00001BC2 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12785                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12786 00001BC6 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12787                                  					; Existing FCB entries would be
 12788                                  					; flushed unnecessarily because of
 12789                                  					; check in CheckFCB of the ref_count.
 12790                                  					; July 22/85 - BAS
 12791                                  	;lea	si,[si+1]
 12792 00001BC9 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12793                                  	;lea	di,[di+20h]
 12794 00001BCC 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12795                                  	;mov	cx,11
 12796 00001BCF B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12797                                  	
 12798                                  	; MSDOS 6.0
 12799 00001BD2 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12800                                  	
 12801                                  	; MSDOS 3.3
 12802                                  ;RegenCopyName2:
 12803                                  	;lodsb
 12804                                  	;call    UCase
 12805                                  	;stosb
 12806                                  	;loop    RegenCopyName2
 12807                                  
 12808 00001BD5 F8                      	clc
 12809 00001BD6 C3                      	retn
 12810                                  
 12811                                  ; 17/05/2019 - Retro DOS v4.0
 12812                                  
 12813                                  ;**	BlastSFT - FIll SFT with Garbage
 12814                                  ; --------------------------------------------------------------------------
 12815                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12816                                  ;	various garbage values to put into the SFT.  I don't know why,
 12817                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12818                                  ;	necessary to show that the SFT is free after filling it.
 12819                                  ;
 12820                                  ;	ENTRY	(es:di) = address of SFT
 12821                                  ;		(al) = fill character
 12822                                  ;	EXIT	(ax) = -1
 12823                                  ;		'C' clear
 12824                                  ;	USES	AX, CX, Flags
 12825                                  
 12826                                  BlastSFT:
 12827 00001BD7 57                      	push	di
 12828                                  	;mov	cx,53 ; MSDOS 3.3
 12829                                  	;mov	cx,59 ; MSDOS 6.0
 12830 00001BD8 B93B00                  	mov	cx,SF_ENTRY.size
 12831 00001BDB F3AA                    	rep	stosb
 12832 00001BDD 5F                      	pop	di
 12833 00001BDE 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12834 00001BE0 268905                  	mov	[es:di],ax
 12835                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12836                                  	;mov	[es:di+15h],ax
 12837 00001BE3 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12838 00001BE7 48                      	dec	ax	; -1					    ;
 12839                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12840 00001BE8 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12841                                  BlastSFT_retn:
 12842 00001BEC C3                      	retn				; return with 'C' clear     ;
 12843                                  
 12844                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12845                                  ; --------------------------------------------------------------------------
 12846                                  ;
 12847                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12848                                  ;   regenerated.
 12849                                  ;
 12850                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12851                                  ;		AL is SFT index
 12852                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12853                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12854                                  ;   Registers modified: AX and BX
 12855                                  ;
 12856                                  ; --------------------------------------------------------------------------
 12857                                  
 12858                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12859                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12860                                  CheckFCB:
 12861                                  		
 12862                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12863                                  
 12864                                  	; MSDOS 3.3
 12865                                  
 12866                                  	; LES	DI,[CS:SFTFCB]
 12867                                  
 12868                                  	; MSDOS 6.0
 12869                                  	
 12870                                  	; SR;
 12871                                  	; We check if the given FCB is for a local file. If so, we return a 
 12872                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12873                                  
 12874                                  	;test	byte [si+19h],0C0h
 12875 00001BED F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12876 00001BF1 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12877 00001BF3 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12878                                  
 12879                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12880                                  	;cmp	[es:di+4],al
 12881 00001BF8 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12882 00001BFC 7244                    	JC	short BadSFT
 12883                                  	;;mov	bl,53 ; MSDOS 3.3
 12884                                  	;mov	bl,59 ; MSDOS 6.0
 12885 00001BFE B33B                    	MOV	BL,SF_ENTRY.size
 12886 00001C00 F6E3                    	MUL	BL
 12887                                  	;lea	di,[di+6]
 12888 00001C02 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12889 00001C05 01C7                    	ADD	DI,AX
 12890                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12891 00001C07 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12892                                  	;cmp	[es:di+31h],ax
 12893 00001C0B 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12894 00001C0F 7531                    	JNZ	short BadSFT		; must match process
 12895 00001C11 26833D00                	cmp	word [es:di],0
 12896                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12897 00001C15 742B                    	JZ	short BadSFT		; must also be in use
 12898                                  	;mov	al,[si+19h]
 12899 00001C17 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12900                                  	;test	al,80h
 12901 00001C1A A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12902 00001C1C 7430                    	JZ	short CheckNoShare	; No. try local or device
 12903                                  
 12904                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12905                                  	; FCBSHARE is a superset of FCBNETWORK.
 12906                                  
 12907 00001C1E 50                      	PUSH	AX
 12908                                  	;and	al,0C0h
 12909 00001C1F 24C0                    	AND	AL,FCBMASK
 12910                                  	;cmp	al,0C0h
 12911 00001C21 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12912 00001C23 58                      	POP	AX
 12913 00001C24 751E                    	JNZ	short CheckNet		; yes
 12914                                  ;
 12915                                  ;----- In share support -----
 12916                                  ;
 12917                                  	;call	far [cs:JShare+(11*4)]
 12918 00001C26 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12919 00001C2B 7215                    	JC	short BadSFT
 12920 00001C2D EB06                    	JMP	SHORT CheckD
 12921                                  ;
 12922                                  ;----- End in share support -----
 12923                                  ;
 12924                                  	; 09/11/2022
 12925                                  	; (There is not any procedure/sub
 12926                                  	;  which calls or jumps to CheckFirClus here)
 12927                                  	;;;
 12928                                  CheckFirClus:
 12929                                  	;cmp     bx,[es:di+0Bh]
 12930                                  	; 07/12/2022
 12931 00001C2F 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12932 00001C33 750D                    	JNZ	short BadSFT
 12933                                  	;;;
 12934                                  CheckD: 
 12935 00001C35 243F                    	AND	AL,3Fh
 12936                                  	;mov	ah,[es:di+5]
 12937 00001C37 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12938 00001C3B 80E43F                  	AND	AH,3Fh
 12939 00001C3E 38C4                    	CMP	AH,AL
 12940                                  	; 16/12/2022
 12941 00001C40 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12942                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12943                                  	;jnz	short BadSFT
 12944                                  ;CheckD_retn:
 12945                                  	;retn
 12946                                  BadSFT: 
 12947 00001C42 F9                      	STC
 12948 00001C43 C3                      	retn
 12949                                  				
 12950                                  CheckNet:
 12951                                  	; 17/05/2019 - Retro DOS v4.0
 12952                                  	
 12953                                  ;----- In net support -----
 12954                                  
 12955                                  	; MSDOS 3.3
 12956                                  	;;mov	ax,[si+1Ah]
 12957                                  	;mov	ax,[si+fcb_net_handle]
 12958                                  	;;cmp	ax,[es:di+1Dh]
 12959                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12960                                  	;jnz	short BadSFT
 12961                                  	;;cmp	ax,[es:di+19h]
 12962                                  	;cmp	ax,[ES:DI+sf_netid]
 12963                                  	;jnz     short BadSFT
 12964                                  	;;mov	ax,[si+1Eh]
 12965                                  	;mov	ax,[si+fcb_l_attr]
 12966                                  	;;cmp	ax,[es:di+1Bh]
 12967                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12968                                  	;jnz     short BadSFT
 12969                                  
 12970                                  	; MSDOS 6.0
 12971                                  	;mov	ax,[si+1Ch]
 12972 00001C44 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12973                                  	; 09/11/2022
 12974                                  	;cmp	ax,[es:di+0Bh] 
 12975 00001C47 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12976 00001C4B 75F5                    	JNZ	short BadSFT
 12977                                  
 12978                                  ;----- END In net support -----
 12979                                  
 12980                                  CheckNet_retn:
 12981 00001C4D C3                      	retn
 12982                                  
 12983                                  CheckNoShare:
 12984                                  
 12985                                  ; 16/12/2022
 12986                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 12987                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 12988                                  ;	;test	al,40h
 12989                                  ;	test	AL,FCBDEVICE		; Device?
 12990                                  ;	;jnz	short $+2 ; 09/11/2022
 12991                                  ;	JNZ	short CheckNoShareDev 	; Yes
 12992                                  
 12993                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 12994                                  	;;mov	bx,[si+1Dh]
 12995                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 12996                                  	;;cmp	bx,[es:di+1Dh]
 12997                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 12998                                  	;jnz	short BadSFT
 12999                                  	;;mov	bl,[si+1Fh]
 13000                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13001                                  	;;cmp	bl,[es:di+1Fh]
 13002                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13003                                  	;jnz	short BadSFT
 13004                                  	;;mov	bl,[si+1Ah]
 13005                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13006                                  	;;mov	bh,[es:di+5]
 13007                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13008                                  	;xor	bh,bl
 13009                                  	;and	bh,0C0h
 13010                                  	;jnz	short BadSFT
 13011                                  	;;xor	bl,[es:di+2]
 13012                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13013                                  	;and	bl,0Fh
 13014                                  	;jnz	short BadSFT
 13015                                  	;push	di
 13016                                  	;push	si
 13017                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13018                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13019                                  	;;lea	si,[si+1]
 13020                                  	;LEA	SI,[SI+SYS_FCB.name]
 13021                                  	;;mov	cx,11
 13022                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13023                                  	;repe	cmpsb
 13024                                  	;pop	si
 13025                                  	;pop	di
 13026                                  	;jnz	short BadSFT
 13027                                  	;;mov	bx,[si+1Bh]
 13028                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13029                                  	;jmp	short CheckFirClus
 13030                                  
 13031                                  	; MSDOS 6.0
 13032                                  
 13033                                  	; SR;
 13034                                  	; The code below to match a local FCB with its SFT can no longer be
 13035                                  	; used. We just return a no-match status. This check is done right
 13036                                  	; at the top.
 13037                                  
 13038                                  CheckNoShareDev:
 13039                                  	;mov	bx,[si+1Ah]
 13040 00001C4E 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13041                                  	;cmp	bx,[es:di+7]
 13042 00001C51 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13043 00001C55 75EB                    	JNZ	short BadSFT
 13044                                  	;mov	bx,[si+1Ch]
 13045 00001C57 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13046                                  	;cmp	bx,[es:di+9]
 13047 00001C5A 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13048 00001C5E 75E2                    	JNZ	short BadSFT
 13049 00001C60 EBD3                    	JMP	short CheckD
 13050                                  
 13051                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13052                                  ;----------------------------------------------------------------------------
 13053                                  ;
 13054                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13055                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13056                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13057                                  ;	with PID
 13058                                  ;
 13059                                  ;   Inputs:	DS:SI point to FCB
 13060                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13061                                  ;		Carry clear -> OK ES:DI -> SFT
 13062                                  ;		Carry set -> error in ax
 13063                                  ;   Registers modified: ES,DI, AX
 13064                                  ;
 13065                                  ;----------------------------------------------------------------------------
 13066                                  
 13067                                  SFTFromFCB:
 13068                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13069                                  
 13070                                  	; 17/05/2019 - Retro DOS v4.0
 13071                                  
 13072 00001C62 50                      	push	ax
 13073 00001C63 53                      	push	bx
 13074                                  	;mov	al,[si+18h]
 13075 00001C64 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13076 00001C67 E883FF                  	call	CheckFCB
 13077 00001C6A 5B                      	pop	bx
 13078 00001C6B 58                      	pop	ax
 13079                                  	;MOV	[CS:THISSFT],DI		; SS override
 13080                                  	;MOV	[CS:THISSFT+2],ES
 13081 00001C6C 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13082 00001C71 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13083 00001C76 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13084                                  	
 13085                                  	; 09/11/2022 (MSDOS 5.0)
 13086                                  	; 31/05/2019
 13087 00001C78 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13088 00001C79 E82FE8                  	call	save_world
 13089 00001C7C E865FE                  	call	FCBRegen
 13090 00001C7F E812E8                  	call	restore_world		; use macro restore world
 13091 00001C82 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13092                                  
 13093                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13094 00001C83 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13095 00001C87 72C4                    	jc	short CheckNet_retn
 13096                                  
 13097                                  Set_SFT: 
 13098                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13099 00001C89 36C43E[9E05]            	les	di,[ss:THISSFT]
 13100                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13101 00001C8E 36FF36[3C03]            	push	word [ss:PROC_ID]
 13102                                  	;pop	word [es:di+31h]
 13103 00001C93 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13104 00001C97 C3                      	retn				; carry is clear
 13105                                  
 13106                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13107                                  ;----------------------------------------------------------------------------
 13108                                  ;
 13109                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13110                                  ;	unavailable FCB.
 13111                                  ;
 13112                                  ;   Inputs:	none.
 13113                                  ;   Outputs:	none.
 13114                                  ;   Registers modified: all
 13115                                  ;
 13116                                  ;----------------------------------------------------------------------------
 13117                                  
 13118                                  FCBHardErr:
 13119                                  	; 17/05/2019 - Retro DOS v4.0
 13120 00001C98 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13121                                  	;
 13122                                  	;mov	ax,23h
 13123 00001C9D B82300                  	MOV	AX,error_FCB_unavailable
 13124                                  	;;mov	byte [cs:ALLOWED],8
 13125                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13126 00001CA0 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13127                                  	
 13128                                  	;LES	BP,[CS:THISDPB]
 13129 00001CA6 26C42E[8A05]            	les	bp,[es:THISDPB]
 13130                                  	
 13131 00001CAB BF0100                  	MOV	DI,1			; Fake some registers
 13132 00001CAE 89F9                    	MOV	CX,DI
 13133                                  	;mov	dx,[es:bp+0Bh]
 13134 00001CB0 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13135 00001CB4 E86137                  	call	HARDERR
 13136 00001CB7 F9                      	STC
 13137 00001CB8 C3                      	retn
 13138                                  
 13139                                  ;============================================================================
 13140                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13141                                  ;============================================================================
 13142                                  ; 21/07/2018 - Retro DOS v3.0
 13143                                  ; 17/05/2019 - Retro DOS v4.0
 13144                                  
 13145                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13146                                  ;
 13147                                  ;	GetRR
 13148                                  ;	GetExtent
 13149                                  ;	SetExtent
 13150                                  ;	GetExtended
 13151                                  ;	GetRecSize
 13152                                  ;	FCBIO
 13153                                  ;	$FCB_OPEN
 13154                                  ;	$FCB_CREATE
 13155                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13156                                  ;	$FCB_RANDOM_READ_BLOCK
 13157                                  ;	$FCB_SEQ_READ
 13158                                  ;	$FCB_SEQ_WRITE
 13159                                  ;	$FCB_RANDOM_READ
 13160                                  ;	$FCB_RANDOM_WRITE
 13161                                  ;
 13162                                  ;	Revision history:
 13163                                  ;
 13164                                  ;		Created: ARR 4 April 1983
 13165                                  ;			 MZ  6 June  1983 completion of functions
 13166                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13167                                  ;				  times.  Change so successive closes work by
 13168                                  ;				  always returning OK.	Also, detect I/O to
 13169                                  ;				  already closed FCB and return EOF.
 13170                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13171                                  ;				  out of sft into FCB for reconnection
 13172                                  ;
 13173                                  ;	    A000   version 4.00	Jan. 1988
 13174                                  
 13175                                  ; Defintions for FCBOp flags
 13176                                  
 13177                                  RANDOM	equ 2				; random operation
 13178                                  FCBREAD equ 4				; doing a read
 13179                                  BLOCK	equ 8				; doing a block I/O
 13180                                  
 13181                                  ;Break <GetRR - return the random record field in DX:AX>
 13182                                  ;---------------------------------------------------------------------------
 13183                                  ;
 13184                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13185                                  ;	from the FCB pointed to by DS:SI
 13186                                  ;
 13187                                  ;   Inputs:	DS:SI point to an FCB
 13188                                  ;		BX has record size
 13189                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13190                                  ;   Registers modified: none
 13191                                  ;---------------------------------------------------------------------------
 13192                                  
 13193                                  GetRR:
 13194                                  	;mov	ax,[si+21h]
 13195 00001CB9 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13196                                  	;mov	dx,[si+23h]
 13197 00001CBC 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13198 00001CBF 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13199 00001CC2 7202                    	JB	short GetRRBye
 13200 00001CC4 30F6                    	XOR	DH,DH
 13201                                  GetRRBye:
 13202 00001CC6 C3                      	retn
 13203                                  
 13204                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13205                                  ;---------------------------------------------------------------------------
 13206                                  ;
 13207                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13208                                  ;	NR fields in the FCB.
 13209                                  ;
 13210                                  ;   Inputs:	DS:SI - point to FCB
 13211                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13212                                  ;   Registers modified: none
 13213                                  ;---------------------------------------------------------------------------
 13214                                  
 13215                                  GetExtent:
 13216                                  	;mov	al,[si+20h]
 13217 00001CC7 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13218                                  	;mov	dx,[si+0Ch]
 13219 00001CCA 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13220 00001CCD D0E0                    	SHL	AL,1
 13221 00001CCF D1EA                    	SHR	DX,1
 13222 00001CD1 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13223 00001CD3 88D4                    	MOV	AH,DL
 13224 00001CD5 88F2                    	MOV	DL,DH
 13225 00001CD7 30F6                    	XOR	DH,DH
 13226 00001CD9 C3                      	retn
 13227                                  
 13228                                  ;Break <SetExtent - update the extent/NR field>
 13229                                  ;---------------------------------------------------------------------------
 13230                                  ;
 13231                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13232                                  ;	fields
 13233                                  ;
 13234                                  ;   Inputs:	DS:SI point to FCB
 13235                                  ;		DX:AX is a record location in file
 13236                                  ;   Outputs:	Extent/NR fields are filled in
 13237                                  ;   Registers modified: CX
 13238                                  ;---------------------------------------------------------------------------
 13239                                  
 13240                                  SetExtent:
 13241 00001CDA 50                      	push	ax
 13242 00001CDB 52                      	push	dx
 13243 00001CDC 89C1                    	MOV	CX,AX
 13244 00001CDE 247F                    	AND	AL,7FH			; next rec field
 13245                                  	;mov	[si+20h],al
 13246 00001CE0 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13247 00001CE3 80E180                  	AND	CL,80H			; save upper bit
 13248 00001CE6 D1E1                    	SHL	CX,1
 13249 00001CE8 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13250 00001CEA 88E8                    	MOV	AL,CH
 13251 00001CEC 88D4                    	MOV	AH,DL
 13252                                  	;mov	[si+0Ch], ax
 13253 00001CEE 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13254 00001CF1 5A                      	pop	dx
 13255 00001CF2 58                      	pop	ax
 13256 00001CF3 C3                      	retn
 13257                                  
 13258                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13259                                  ;---------------------------------------------------------------------------
 13260                                  ;
 13261                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13262                                  ;
 13263                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13264                                  ;   Outputs:	DS:SI point to the FCB part
 13265                                  ;		zeroflag set if not extended fcb
 13266                                  ;   Registers modified: SI
 13267                                  ;---------------------------------------------------------------------------
 13268                                  
 13269                                  GetExtended:
 13270 00001CF4 89D6                    	MOV	SI,DX			; point to Something
 13271 00001CF6 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13272 00001CF9 7503                    	JNZ	short GetBye		; not there
 13273 00001CFB 83C607                  	ADD	SI,7			; point to FCB
 13274                                  GetBye:
 13275 00001CFE 39D6                    	CMP	SI,DX			; set condition codes
 13276                                  getextd_retn:
 13277 00001D00 C3                      	retn
 13278                                  
 13279                                  ;Break <GetRecSize - return in BX the FCB record size>
 13280                                  ;---------------------------------------------------------------------------
 13281                                  ;
 13282                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13283                                  ;
 13284                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13285                                  ;   Outputs:	BX contains the record size
 13286                                  ;   Registers modified: None
 13287                                  ;---------------------------------------------------------------------------
 13288                                  
 13289                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13290                                  GetRecSize:
 13291                                  	;mov	bx,[si+0Eh]
 13292 00001D01 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13293 00001D04 09DB                    	OR	BX,BX			; is it nul?
 13294 00001D06 74F8                    	jz	short getextd_retn
 13295 00001D08 BB8000                  	MOV	BX,128			; use default size
 13296                                  	;mov	[si+0Eh],bx
 13297 00001D0B 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13298 00001D0E C3                      	retn
 13299                                  
 13300                                  ;BREAK <FCBIO - do internal FCB I/O>
 13301                                  ;---------------------------------------------------------------------------
 13302                                  ;
 13303                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13304                                  ;
 13305                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13306                                  ;		DS:DX point to FCB
 13307                                  ;		CX may have count of number of records to xfer
 13308                                  ;   Outputs:	AL has error code
 13309                                  ;   Registers modified: all
 13310                                  ;---------------------------------------------------------------------------
 13311                                  
 13312                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13313                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13314                                  FCBIO:
 13315                                  
 13316                                  FEOF	EQU	1
 13317                                  FTRIM	EQU	2
 13318                                  
 13319                                  %define	FCBErr	byte [bp-1]  ; byte	
 13320                                  %define	cRec	word [bp-3]  ; word	
 13321                                  ;%define RecPos	word [bp-7]  ; dword
 13322                                  %define RecPosL	word [bp-7]  ; word
 13323                                  %define RecPosH	word [bp-5]  ; word
 13324                                  %define	RecSize	word [bp-9]  ; word
 13325                                  ;%define bPos	word [bp-13] ; dword
 13326                                  %define bPosL	word [bp-13] ; word
 13327                                  %define bPosH	word [bp-11] ; word
 13328                                  %define cByte	word [bp-15] ; word	
 13329                                  %define cResult word [bp-17] ; word	
 13330                                  %define	cRecRes	word [bp-19] ; word
 13331                                  %define	FCBOp	byte [bp-20] ; byte
 13332                                  
 13333                                  	;Enter
 13334                                  
 13335 00001D0F 55                      	push	bp
 13336 00001D10 89E5                    	mov	bp,sp
 13337 00001D12 83EC14                  	sub	sp,20
 13338                                  	;mov	[bp-20],al
 13339 00001D15 8846EC                  	MOV	FCBOp,AL
 13340                                  	;mov	byte [bp-1],0
 13341 00001D18 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13342 00001D1C E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13343                                  	;test	byte [bp-20],8
 13344 00001D1F F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13345 00001D23 7503                    	JNZ	short GetPos
 13346 00001D25 B90100                  	MOV	CX,1			;	cRec = 1;
 13347                                  GetPos:
 13348                                  	;mov	[bp-3],cx
 13349 00001D28 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13350 00001D2B E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13351 00001D2E E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13352                                  	;mov	[bp-9],bx
 13353 00001D31 895EF7                  	MOV	RecSize,BX
 13354                                  	;test	byte [bp-20],2
 13355 00001D34 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13356 00001D38 7403                    	JZ	short GetRec
 13357 00001D3A E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13358                                  GetRec:
 13359                                  	;mov	[bp-7],ax
 13360 00001D3D 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13361                                  	;mov	[bp-5],dx
 13362 00001D40 8956FB                  	MOV	RecPosH,DX
 13363 00001D43 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13364                                  	;mov	ax,[bp-5]
 13365 00001D46 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13366 00001D49 F7E3                    	MUL	BX
 13367 00001D4B 89C7                    	MOV	DI,AX
 13368                                  	;mov	ax,[bp-7]
 13369 00001D4D 8B46F9                  	MOV	AX,RecPosL
 13370 00001D50 F7E3                    	MUL	BX
 13371 00001D52 01FA                    	ADD	DX,DI
 13372                                  	;mov	[bp-13],ax
 13373 00001D54 8946F3                  	MOV	bPosL,AX
 13374                                  	;mov	[bp-11],dx
 13375 00001D57 8956F5                  	MOV	bPosH,DX
 13376                                  	;mov	ax,[bp-3]
 13377 00001D5A 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13378 00001D5D F7E3                    	MUL	BX
 13379                                  	;mov	[bp-15],ax
 13380 00001D5F 8946F1                  	MOV	cByte,AX
 13381                                  
 13382                                  ;hkn; 	SS override
 13383 00001D62 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13384 00001D67 83D200                  	ADC	DX,0
 13385 00001D6A 7419                    	JZ	short DoOper
 13386                                  	;mov	byte [bp-1],2
 13387 00001D6C C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13388                                  
 13389                                  ;hkn; 	SS override
 13390 00001D70 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13391 00001D74 F7D8                    	NEG	AX
 13392 00001D76 7501                    	JNZ	short DoDiv
 13393 00001D78 48                      	DEC	AX
 13394                                  DoDiv:
 13395 00001D79 31D2                    	XOR	DX,DX
 13396 00001D7B F7F3                    	DIV	BX
 13397                                  	;mov	[bp-3],ax
 13398 00001D7D 8946FD                  	MOV	cRec,AX
 13399 00001D80 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13400                                  	;mov	[bp-15],ax
 13401 00001D82 8946F1                  	MOV	cByte,AX		;	}
 13402                                  DoOper:
 13403 00001D85 31DB                    	XOR	BX,BX
 13404                                  	;mov	[bp-17],bx
 13405 00001D87 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13406                                  	;cmp	[bp-15],bx
 13407 00001D8A 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13408 00001D8D 7506                    	JNZ	short DoGetExt
 13409                                  	;test	byte [bp-1],2
 13410 00001D8F F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13411                                  	;JZ	short DoGetExt
 13412                                  	;JMP	short SkipOp
 13413                                  	; 16/12/2022
 13414 00001D93 7576                    	jnz	short SkipOp
 13415                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13416                                  	;JZ	short DoGetExt
 13417                                  	;JMP	short SkipOp
 13418                                  DoGetExt:
 13419 00001D95 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13420 00001D98 730F                    	JNC	short ContinueOp
 13421                                  FCBDeath:
 13422 00001D9A E806E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13423                                  	;mov	word [bp-19],0
 13424 00001D9D C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13425                                  	;mov	byte [bp-1],1
 13426 00001DA2 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13427 00001DA6 E9EF00                  	JMP	FCBSave 		; bam!
 13428                                  ContinueOp:
 13429                                  	;mov	ax,[si+10h]
 13430 00001DA9 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13431                                  	;mov	[es:di+11h],ax
 13432 00001DAC 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13433                                  	;mov	ax,[si+12h]
 13434 00001DB0 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13435                                  	;mov	[es:di+13h],ax
 13436 00001DB3 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13437                                  	;mov	ax,[bp-13]
 13438 00001DB7 8B46F3                  	MOV	AX,bPosL
 13439                                  	;mov	dx,[bp-11]
 13440 00001DBA 8B56F5                  	MOV	DX,bPosH
 13441                                  	;mov	[es:di+15h],ax
 13442 00001DBD 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13443                                  	;xchg	dx,[es:di+17h]
 13444 00001DC1 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13445 00001DC5 52                      	PUSH	DX			; save away Open age.
 13446                                  	;mov	cx,[bp-15]
 13447 00001DC6 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13448                                  
 13449                                  ;hkn; DOS_Read is in DOSCODE
 13450 00001DC9 BF[9233]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13451                                  	;test	byte [bp-20],4
 13452 00001DCC F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13453 00001DD0 7503                    	JNZ	short DoContext
 13454                                  
 13455                                  ;hkn; DOS_Write is in DOSCODE
 13456 00001DD2 BF[BB35]                	MOV	DI,DOS_WRITE
 13457                                  DoContext:
 13458 00001DD5 55                      	push	bp
 13459 00001DD6 1E                      	push	ds
 13460 00001DD7 56                      	push	si
 13461                                  
 13462                                  ;hkn; SS is DOSDATA
 13463 00001DD8 16                      	push	ss
 13464 00001DD9 1F                      	pop	ds
 13465                                  
 13466                                  ;; Fix for disk full
 13467 00001DDA FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13468                                  	
 13469 00001DDC 5E                      	pop	si
 13470 00001DDD 1F                      	pop	ds
 13471 00001DDE 5D                      	pop	bp
 13472 00001DDF 72B9                    	JC	short FCBDeath
 13473                                  	
 13474 00001DE1 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13475 00001DE7 740A                    	JZ	short NODSKFULL
 13476 00001DE9 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13477                                  	;mov	byte [bp-1],1 
 13478 00001DEF C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13479                                  NODSKFULL:
 13480                                  ;; Fix for disk full
 13481                                  	;mov	[bp-17],cx
 13482 00001DF3 894EEF                  	MOV	cResult,CX
 13483 00001DF6 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13484                                  	;pop	word [es:di+17h]	
 13485 00001DF9 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13486                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13487                                  	;mov	ax,[es:di+11h]
 13488 00001DFD 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13489                                  	;mov	[si+10h],ax
 13490 00001E01 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13491                                  	;mov	ax,[es:di+13h]
 13492 00001E04 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13493                                  	;mov	[si+12h],ax
 13494 00001E08 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13495                                  					;	}
 13496                                  SkipOp:
 13497                                  	;mov	ax,[bp-17]
 13498 00001E0B 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13499 00001E0E 31D2                    	XOR	DX,DX
 13500                                  	;div	word [bp-9]
 13501 00001E10 F776F7                  	DIV	RecSize
 13502                                  	;mov	[bp-19],ax
 13503 00001E13 8946ED                  	MOV	cRecRes,AX
 13504                                  	;add	[bp-7],ax
 13505 00001E16 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13506                                  	;adc	word [bp-5],0
 13507 00001E19 8356FB00                	ADC	RecPosH,0
 13508                                  
 13509                                  ; If we have not gotten the expected number of records, we signal an EOF
 13510                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13511                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13512                                  ; do we.
 13513                                  
 13514                                  	;cmp	ax,[bp-3]
 13515 00001E1D 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13516 00001E20 7411                    	JZ	short TryBlank
 13517                                  	;test	byte [bp-20],4
 13518 00001E22 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13519 00001E26 7507                    	JNZ	short SetEOF
 13520                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13521                                  	; MSDOS 3.3
 13522                                  	;;test	word [es:di+5],80h
 13523                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13524                                  	;JNZ	short TryBlank
 13525                                  	; MSDOS 5.0 & MSDOS 6.0
 13526                                  	;test	byte [es:di+5],80h
 13527 00001E28 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13528 00001E2D 7504                    	jnz	short TryBlank
 13529                                  
 13530                                  SetEOF:
 13531                                  	;mov	byte [bp-1],1
 13532 00001E2F C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13533                                  TryBlank:				;
 13534 00001E33 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13535 00001E35 7426                    	JZ	short SetExt
 13536                                  	;add	word [bp-7],1
 13537 00001E37 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13538                                  	;adc	word [bp-5],0
 13539 00001E3B 8356FB00                	ADC	RecPosH,0
 13540                                  	;test	byte [bp-20],4
 13541 00001E3F F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13542 00001E43 7418                    	JZ	short SetExt
 13543                                  	;inc	word [bp-19]
 13544 00001E45 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13545                                  	;mov	byte [bp-1],3
 13546 00001E48 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13547                                  	;mov	cx,[bp-9]
 13548 00001E4C 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13549 00001E4F 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13550 00001E51 30C0                    	XOR	AL,AL
 13551                                  ;hkn; 	SS override
 13552 00001E53 36C43E[2C03]            	les     di,[ss:DMAADD]
 13553                                  	;add	di,[bp-17]
 13554 00001E58 037EEF                  	ADD	DI,cResult
 13555 00001E5B F3AA                    	REP	STOSB			;   }	}
 13556                                  SetExt:
 13557                                  	;mov	dx,[bp-5]
 13558 00001E5D 8B56FB                  	MOV	DX,RecPosH
 13559                                  	;mov	ax,[bp-7]
 13560 00001E60 8B46F9                  	MOV	AX,RecPosL
 13561                                  	;test	byte [bp-20],2
 13562 00001E63 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13563 00001E67 7406                    	JZ	short DoSetExt
 13564                                  	;test	byte [bp-20],8
 13565 00001E69 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13566 00001E6D 7403                    	JZ	short TrySetRR
 13567                                  DoSetExt:
 13568 00001E6F E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13569                                  TrySetRR:
 13570                                  	;test	byte [bp-20],8
 13571 00001E72 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13572 00001E76 740F                    	JZ	short TryReturn
 13573                                  	;mov	[si+21h],ax
 13574 00001E78 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13575                                  	;mov	[si+23h],dl
 13576 00001E7B 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13577                                  	;cmp	word [si+0Eh],64
 13578 00001E7E 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13579 00001E82 7303                    	JAE	short TryReturn
 13580                                  	;mov	[si+24h],dh
 13581 00001E84 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13582                                  TryReturn: 
 13583                                  	;test	byte [bp-20],4
 13584 00001E87 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13585 00001E8B 750B                    	JNZ	short FCBSave
 13586 00001E8D 1E                      	push	ds			;	FCB->FDate = date;
 13587 00001E8E E8B5EC                  	call	DATE16			;	FCB->FTime = time;
 13588 00001E91 1F                      	pop	ds
 13589                                  	;mov	[si+14h],ax
 13590 00001E92 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13591                                  	;mov	[si+16h],dx
 13592 00001E95 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13593                                  FCBSave: 
 13594                                  	;test	byte [bp-20],8
 13595 00001E98 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13596 00001E9C 7409                    	jz	short DoReturn
 13597                                  	;mov	cx,[bp-19]
 13598 00001E9E 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13599 00001EA1 E826E6                  	call    Get_User_Stack
 13600                                  	;mov	[si+4],cx
 13601 00001EA4 894C04                  	MOV	[SI+user_env.user_CX],CX
 13602                                  DoReturn:
 13603                                  	;mov	al,[bp-1]
 13604 00001EA7 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13605                                  	;Leave	
 13606 00001EAA 89EC                    	mov     sp,bp
 13607 00001EAC 5D                      	pop     bp
 13608 00001EAD C3                      	retn
 13609                                  
 13610                                  ; 22/07/2018 - Retro DOS v3.0
 13611                                  
 13612                                  ;Break <$FCB_Open - open an old-style FCB>
 13613                                  ;---------------------------------------------------------------------------
 13614                                  ;
 13615                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13616                                  ;	for us and asked to have the rest filled in.
 13617                                  ;
 13618                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13619                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13620                                  ;		FCB has the following fields filled in:
 13621                                  ;		    Time/Date Extent/NR Size
 13622                                  ;---------------------------------------------------------------------------
 13623                                  
 13624                                  _$FCB_OPEN:			; System call 15
 13625                                  
 13626 00001EAE B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13627                                  
 13628                                  ;hkn; DOS_Open is in DOSCODE
 13629 00001EB1 B9[132C]                	MOV	CX,DOS_OPEN
 13630                                  
 13631                                  ; The following is common code for Creation and openning of FCBs. AX is
 13632                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13633                                  ; the FCB
 13634                                  
 13635                                  DoAccess:
 13636 00001EB4 1E                      	push	ds
 13637 00001EB5 52                      	push	dx
 13638 00001EB6 51                      	push	cx
 13639 00001EB7 50                      	push	ax			; save FCB pointer away
 13640                                  
 13641                                  ;hkn; 	OpenBuf is in DOSDATA
 13642 00001EB8 BF[BE03]                	MOV	DI,OPENBUF
 13643 00001EBB E87B4D                  	call	TransFCB		; crunch the fcb
 13644 00001EBE 58                      	pop	ax
 13645 00001EBF 59                      	pop	cx
 13646 00001EC0 5A                      	pop	dx
 13647 00001EC1 1F                      	pop	ds			; get fcb
 13648 00001EC2 7303                    	JNC	short FindFCB		; everything seems ok
 13649                                  FCBOpenErr:
 13650                                  	; AL has error code
 13651 00001EC4 E9DCE7                  	jmp	FCB_RET_ERR
 13652                                  FindFCB:
 13653 00001EC7 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13654                                  
 13655                                  	; 17/05/2019 - Retro DOS v4.0
 13656                                  
 13657                                  	; MSDOS 3.3
 13658                                  	;call	LRUFCB
 13659                                  	;jc	short HardMessage
 13660                                  
 13661                                  	; MSDOS 6.0
 13662 00001ECA 50                      	push	ax
 13663 00001ECB B001                    	mov	al,1			;indicate Open/Create operation
 13664 00001ECD E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13665 00001ED0 58                      	pop	ax
 13666 00001ED1 722A                    	jc	short HardMessage
 13667                                  	
 13668                                  	;mov	word [es:di+2],8000h
 13669 00001ED3 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13670 00001ED9 1E                      	push	ds
 13671 00001EDA 56                      	push	si	
 13672 00001EDB 53                      	push	bx			; save fcb pointer
 13673 00001EDC 89CE                    	MOV	SI,CX
 13674                                  
 13675                                  ;hkn; SS is DOSDATA
 13676 00001EDE 16                      	push	ss
 13677 00001EDF 1F                      	pop	ds			    ; let DOS_Open see variables
 13678 00001EE0 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13679 00001EE2 5B                      	pop	bx
 13680 00001EE3 5E                      	pop	si
 13681 00001EE4 1F                      	pop	ds			; get fcb
 13682                                  
 13683                                  ;hkn; SS override
 13684 00001EE5 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13685 00001EEA 7318                    	JNC	short FCBOK		; operation succeeded
 13686                                  failopen:
 13687 00001EEC 50                      	PUSH	AX
 13688 00001EED B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13689 00001EEF E8E5FC                  	call	BlastSFT
 13690 00001EF2 58                      	POP	AX
 13691                                  	;cmp	ax,4
 13692 00001EF3 83F804                  	CMP	AX,error_too_many_open_files
 13693 00001EF6 7405                    	JZ	short HardMessage
 13694                                  	;cmp	ax,24h
 13695 00001EF8 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13696 00001EFB 7505                    	jnz	short DeadFCB
 13697                                  HardMessage:
 13698 00001EFD 50                      	PUSH	AX
 13699 00001EFE E897FD                  	call	FCBHardErr
 13700 00001F01 58                      	POP	AX
 13701                                  DeadFCB:
 13702                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13703                                  	;jmp	FCB_RET_ERR
 13704 00001F02 EBC0                    	jmp	short FCBOpenErr
 13705                                  FCBOK:
 13706                                  	; MSDOS 6.0
 13707 00001F04 E8D2F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13708 00001F07 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13709 00001F09 E85A55                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13710 00001F0C 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13711                                  ;SR;
 13712                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13713                                  ; LocalSFT variable to reflect this.
 13714                                  
 13715 00001F0E 36893E[5D10]            	mov	[ss:LocalSFT],di
 13716 00001F13 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13717                                  ;;SR;
 13718                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13719                                  ;;
 13720                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13721                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13722                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13723                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13724                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13725                                  
 13726                                  FCBOK2:
 13727                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13728 00001F18 26FF05                  	inc	word [es:di]
 13729                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13730 00001F1B E802FA                  	call	SaveFCBInfo
 13731                                  	; MSDOS 3.3
 13732                                  	;call	SetOpenAge
 13733                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13734                                  	;test	word [es:di+5],80h
 13735                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13736 00001F1E 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13737 00001F23 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13738 00001F25 8A04                    	MOV	AL,[SI]			; get drive byte
 13739 00001F27 E8964C                  	call	GETTHISDRV		; convert
 13740                                  	;INC	AL
 13741                                  	; 17/12/2022
 13742 00001F2A 40                      	inc	ax
 13743 00001F2B 8804                    	MOV	[SI],AL			; stash in good drive letter
 13744                                  FCBNoDrive:
 13745                                  	;mov	word [si+0Eh],128
 13746 00001F2D C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13747                                  
 13748                                  	;mov	ax,[es:di+0Dh]
 13749 00001F32 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13750                                  	;mov	[si+16h],ax
 13751 00001F36 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13752                                  	;mov	ax,[es:di+0Fh]
 13753 00001F39 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13754                                  	;mov	[si+14h],ax
 13755 00001F3D 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13756                                  	;mov	ax,[es:di+11h]
 13757 00001F40 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13758                                  	;mov	[si+10h],ax
 13759 00001F44 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13760                                  	;mov	ax,[es:di+13h]
 13761 00001F47 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13762                                  	;mov	[si+12h],ax
 13763 00001F4B 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13764 00001F4E 31C0                    	XOR	AX,AX			; convenient zero
 13765                                  	;mov	[si+0Ch],ax
 13766 00001F50 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13767                                  
 13768                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13769                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13770                                  
 13771                                  ;hkn; 	SS override
 13772 00001F53 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13773                                  	;mov	ah,[es:di+4]
 13774 00001F58 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13775                                  OpenScan:
 13776                                  	;cmp	al,[si+18h]
 13777 00001F5C 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13778 00001F5F 7407                    	JZ	short SkipCheck
 13779 00001F61 50                      	push	ax			; preserve count
 13780 00001F62 E888FC                  	call	CheckFCB		; do they match
 13781 00001F65 58                      	pop	ax			; get count back
 13782 00001F66 7309                    	JNC	short OpenFound		; found a match!
 13783                                  SkipCheck:
 13784 00001F68 FEC0                    	INC	AL			; advance to next FCB
 13785 00001F6A 38E0                    	CMP	AL,AH			; table full?
 13786 00001F6C 75EE                    	JNZ	short OpenScan		; no, go for more
 13787                                  OpenDone:
 13788 00001F6E 30C0                    	xor	al,al			; return success
 13789 00001F70 C3                      	retn
 13790                                  
 13791                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13792                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13793                                  ; Consider:
 13794                                  ;
 13795                                  ;   open (foo)	delete (foo) open (bar)
 13796                                  ;
 13797                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13798                                  ; foo even though foo is no longer needed; this is due to the server closing
 13799                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13800                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13801                                  ; bar and subsequent I/O would be lost to the redirector.
 13802                                  ;
 13803                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13804                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13805                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13806                                  ; around. This will allow us to access the same file through multiple network
 13807                                  ; connections and NOT prematurely terminate when the ref count on one
 13808                                  ; connection goes to zero.
 13809                                  
 13810                                  OpenFound:
 13811                                  	;mov	[si+18h],al
 13812 00001F71 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13813 00001F74 26FF05                  	inc	word [es:di]
 13814                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13815                                  					; remember this new invocation
 13816 00001F77 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13817                                  	;mov	[es:di+15h],ax
 13818 00001F7B 26894515                	MOV	[ES:DI+sf_LRU],AX
 13819                                  ;
 13820                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13821                                  ; blast it to prevent other reuse.
 13822                                  ;
 13823 00001F7F 16                      	push	ss
 13824 00001F80 1F                      	pop	ds
 13825 00001F81 C43E[9E05]              	LES	DI,[THISSFT]
 13826 00001F85 26FF0D                  	dec	word [es:di]
 13827                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13828                                  					; free the newly allocated SFT
 13829 00001F88 E81355                  	call	ShareEnd
 13830 00001F8B B043                    	MOV	AL,'C'	 ; 43h
 13831 00001F8D E847FC                  	call	BlastSFT
 13832 00001F90 EBDC                    	JMP	short OpenDone
 13833                                  
 13834                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13835                                  ;----------------------------------------------------------------------------
 13836                                  ;
 13837                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13838                                  ;	FCB for us and asked to have the rest filled in.
 13839                                  ;
 13840                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13841                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13842                                  ;		FCB has the following fields filled in:
 13843                                  ;		    Time/Date Extent/NR Size
 13844                                  ;----------------------------------------------------------------------------
 13845                                  
 13846                                  _$FCB_CREATE:		; System call 22
 13847                                  
 13848                                  ;hkn; DOS_Create is in DOSCODE
 13849 00001F92 B9[E92A]                	MOV	CX,DOS_CREATE		; routine to call
 13850 00001F95 31C0                    	XOR	AX,AX			; attributes to create
 13851 00001F97 E85AFD                  	call	GetExtended		; get extended FCB
 13852 00001F9A 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13853 00001F9C 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13854                                  DoAccessJ:
 13855 00001F9F E912FF                  	JMP	DoAccess		; do dirty work
 13856                                  
 13857                                  ; 22/07/2018 - Retro DOS v3.0
 13858                                  
 13859                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13860                                  ;----------------------------------------------------------------------------
 13861                                  ;
 13862                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13863                                  ;	and write a number of blocks from it.
 13864                                  ;
 13865                                  ;   Inputs:	DS:DX point to an FCB
 13866                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13867                                  ;		AL <> 0 Not enough room on disk for the output
 13868                                  ;
 13869                                  ;----------------------------------------------------------------------------
 13870                                  
 13871                                  _$FCB_RANDOM_WRITE_BLOCK:
 13872                                  	;mov	AL,0Ah	
 13873 00001FA2 B00A                    	MOV	AL,RANDOM+BLOCK
 13874 00001FA4 E968FD                  	JMP	FCBIO
 13875                                  
 13876                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13877                                  ;----------------------------------------------------------------------------
 13878                                  ;
 13879                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13880                                  ;	and read a number of blocks from it.
 13881                                  ;
 13882                                  ;   Inputs:	DS:DX point to an FCB
 13883                                  ;   Outputs:	AL = error codes defined above
 13884                                  ;
 13885                                  ;----------------------------------------------------------------------------
 13886                                  
 13887                                  _$FCB_RANDOM_READ_BLOCK:
 13888                                  	;mov	AL,0Eh	
 13889 00001FA7 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13890 00001FA9 E963FD                  	JMP	FCBIO
 13891                                  
 13892                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13893                                  ;----------------------------------------------------------------------------
 13894                                  ;
 13895                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13896                                  ;	memory
 13897                                  ;
 13898                                  ;   Inputs:	DS:DX point to an FCB
 13899                                  ;   Outputs:	AL = error codes defined above
 13900                                  ;
 13901                                  ;----------------------------------------------------------------------------
 13902                                  
 13903                                  _$FCB_SEQ_READ:
 13904                                  	;mov	AL,4	
 13905 00001FAC B004                    	MOV	AL,FCBREAD
 13906 00001FAE E95EFD                  	JMP	FCBIO
 13907                                  
 13908                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13909                                  ;----------------------------------------------------------------------------
 13910                                  ;
 13911                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13912                                  ;	file
 13913                                  ;
 13914                                  ;   Inputs:	DS:DX point to an FCB
 13915                                  ;   Outputs:	AL = error codes defined above
 13916                                  ;
 13917                                  ;----------------------------------------------------------------------------
 13918                                  
 13919                                  _$FCB_SEQ_WRITE:
 13920 00001FB1 B000                    	MOV	AL,0
 13921 00001FB3 E959FD                  	jmp	FCBIO
 13922                                  
 13923                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13924                                  ;----------------------------------------------------------------------------
 13925                                  ;
 13926                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13927                                  ;	record from it.
 13928                                  ;
 13929                                  ;   Inputs:	DS:DX point to an FCB
 13930                                  ;   Outputs:	AL = error codes defined above
 13931                                  ;
 13932                                  ;----------------------------------------------------------------------------
 13933                                  
 13934                                  _$FCB_RANDOM_READ:
 13935                                  	;mov	AL,6	
 13936 00001FB6 B006                    	MOV	AL,RANDOM+FCBREAD
 13937 00001FB8 E954FD                  	jmp	FCBIO			; single block
 13938                                  
 13939                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13940                                  ;----------------------------------------------------------------------------
 13941                                  ;
 13942                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13943                                  ;	a record to it.
 13944                                  ;
 13945                                  ;   Inputs:	DS:DX point to an FCB
 13946                                  ;   Outputs:	AL = error codes defined above
 13947                                  ;
 13948                                  ;----------------------------------------------------------------------------
 13949                                  
 13950                                  _$FCB_RANDOM_WRITE:
 13951                                  	;mov	AL,2	
 13952 00001FBB B002                    	MOV	AL,RANDOM
 13953 00001FBD E94FFD                  	jmp	FCBIO
 13954                                  
 13955                                  ;============================================================================
 13956                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13957                                  ;============================================================================
 13958                                  ; 22/07/2018 - Retro DOS v3.0
 13959                                  ; 17/05/2019 - Retro DOS v4.0
 13960                                  
 13961                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13962                                  
 13963                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13964                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13965                                  
 13966                                  ;**	Search.asm
 13967                                  ;----------------------------------------------------------------------------
 13968                                  ;	Directory search system calls.
 13969                                  ;	These will be passed direct text of the pathname from the user. 
 13970                                  ;	They will need to be passed through the macro expander prior to
 13971                                  ;	being sent through the low-level stuff. 
 13972                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13973                                  ;
 13974                                  ;	$Dir_Search_First	  written
 13975                                  ;	$Dir_Search_Next	  written
 13976                                  ;	$Find_First	  written
 13977                                  ;	$Find_Next		  written
 13978                                  ;	PackName		  written
 13979                                  ;
 13980                                  ;	Modification history:
 13981                                  ;
 13982                                  ;	  Created: ARR 4 April 1983
 13983                                  
 13984                                  ;----------------------------------------------------------------------------
 13985                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13986                                  ;
 13987                                  ; Inputs:
 13988                                  ;	DS:DX Points to unopenned FCB
 13989                                  ; Function:
 13990                                  ;	Directory is searched for first matching entry and the directory
 13991                                  ;	entry is loaded at the disk transfer address
 13992                                  ; Returns:
 13993                                  ;	AL = -1 if no entries matched, otherwise 0
 13994                                  ;----------------------------------------------------------------------------
 13995                                  
 13996                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 13997                                  
 13998                                  _$DIR_SEARCH_FIRST:
 13999 00001FC0 368916[A605]            	MOV	[SS:THISFCB],DX
 14000 00001FC5 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14001 00001FCA 89D6                    	MOV	SI,DX
 14002 00001FCC 803CFF                  	CMP	BYTE [SI],0FFH
 14003 00001FCF 7503                    	JNZ	short NORMFCB4
 14004 00001FD1 83C607                  	ADD	SI,7			; Point to drive select byte
 14005                                  NORMFCB4:
 14006 00001FD4 FF34                    	push	word [SI]		; Save original drive byte for later
 14007                                  
 14008 00001FD6 16                      	push	ss
 14009 00001FD7 07                      	pop	es			; get es to address DOSGroup
 14010                                  
 14011 00001FD8 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14012 00001FDB E85B4C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14013 00001FDE 7304                    	JNC	short SearchIt		; no error, go and look
 14014 00001FE0 5B                      	pop	bx			; Clean stack
 14015                                  
 14016                                  ; Error code is in AX
 14017                                  
 14018                                  	; 09/11/2022
 14019                                  dcf_errj:
 14020 00001FE1 E9BFE6                  	jmp	FCB_RET_ERR		; error
 14021                                  
 14022                                  SearchIt:
 14023 00001FE4 16                      	push	ss
 14024 00001FE5 1F                      	pop	ds			; get ready for search
 14025 00001FE6 FF36[2C03]              	push	word [DMAADD]
 14026 00001FEA FF36[2E03]              	push	word [DMAADD+2]
 14027 00001FEE C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14028 00001FF4 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14029                                  	; MSDOS 3.3
 14030                                  	;call	DOS_SEARCH_FIRST
 14031                                  	; MSDOS 6.0
 14032 00001FF8 E88501                  	call	GET_FAST_SEARCH		; search
 14033 00001FFB 8F06[2E03]              	pop	word [DMAADD+2]
 14034 00001FFF 8F06[2C03]              	pop	word [DMAADD]
 14035 00002003 7303                    	JNC	short SearchSet		; no error, transfer info
 14036 00002005 5B                      	pop	bx			; Clean stack
 14037                                  
 14038                                  ; Error code is in AX
 14039                                  
 14040                                  	; 09/11/2022
 14041                                  	;jmp	FCB_RET_ERR
 14042 00002006 EBD9                    	jmp	short dcf_errj
 14043                                  
 14044                                  ; The search was successful (or the search-next). We store the information
 14045                                  ; into the user's FCB for continuation.
 14046                                  
 14047                                  SearchSet:
 14048 00002008 BE[BE04]                	MOV	SI,SEARCHBUF
 14049 0000200B C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14050 0000200F F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14051 00002014 7403                    	JZ	short NORMFCB1
 14052 00002016 83C707                  	ADD	DI,7			; Point past the extension
 14053                                  NORMFCB1:
 14054 00002019 5B                      	pop	bx			; Get original drive byte
 14055 0000201A 08DB                    	OR	BL,BL
 14056 0000201C 7506                    	JNZ	short SearchDrv
 14057 0000201E 8A1E[3603]              	MOV	BL,[CURDRV]
 14058 00002022 FEC3                    	INC	BL
 14059                                  SearchDrv:
 14060 00002024 AC                      	LODSB				; Get correct search contin drive byte
 14061 00002025 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14062 00002027 47                      	INC	DI
 14063                                  	;STOSB				; Store the correct "user" drive byte
 14064                                  					;  at the start of the search info
 14065 00002028 B90A00                  	MOV	CX,20/2
 14066 0000202B F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14067 0000202D 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14068                                  					;   byte to AL
 14069 0000202F AA                      	STOSB				; Search contin drive byte at end of
 14070                                  					;   contin info
 14071 00002030 C43E[2C03]              	LES	DI,[DMAADD]
 14072 00002034 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14073 00002039 740D                    	JZ	short NORMFCB2
 14074 0000203B B0FF                    	MOV	AL,0FFh
 14075 0000203D AA                      	STOSB
 14076 0000203E FEC0                    	INC	AL
 14077                                  	;MOV	CX,5
 14078                                  	; 17/12/2022
 14079 00002040 B105                    	mov	cl,5
 14080 00002042 F3AA                    	REP	STOSB
 14081 00002044 A0[6D05]                	MOV	AL,[SATTRIB]
 14082 00002047 AA                      	STOSB
 14083                                  NORMFCB2:
 14084 00002048 88D8                    	MOV	AL,BL			; User Drive byte
 14085 0000204A AA                      	STOSB
 14086                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14087                                  	; 17/12/2022
 14088 0000204B B110                    	mov	cl,16
 14089 0000204D F3A5                    	REP	MOVSW
 14090 0000204F E94EE6                  	jmp	FCB_RET_OK
 14091                                  
 14092                                  ;----------------------------------------------------------------------------
 14093                                  ;
 14094                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14095                                  ;
 14096                                  ; Inputs:
 14097                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14098                                  ; Function:
 14099                                  ;	Directory is searched for the next matching entry and the directory
 14100                                  ;	entry is loaded at the disk transfer address
 14101                                  ; Returns:
 14102                                  ;	AL = -1 if no entries matched, otherwise 0
 14103                                  ;----------------------------------------------------------------------------
 14104                                  
 14105                                  _$DIR_SEARCH_NEXT:
 14106 00002052 368916[A605]            	MOV	[SS:THISFCB],DX
 14107 00002057 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14108 0000205C 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14109 00002062 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14110                                  
 14111 00002068 16                      	push	ss
 14112 00002069 07                      	pop	es
 14113                                  
 14114 0000206A BF[BE04]                	MOV	DI,SEARCHBUF
 14115                                  
 14116 0000206D 89D6                    	MOV	SI,DX
 14117 0000206F 803CFF                  	CMP	BYTE [SI],0FFh
 14118 00002072 750D                    	JNZ	short NORMFCB6
 14119 00002074 83C606                  	ADD	SI,6
 14120 00002077 AC                      	LODSB
 14121                                  
 14122 00002078 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14123 0000207C 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14124                                  NORMFCB6:
 14125 00002081 AC                      	LODSB				; Get original user drive byte
 14126 00002082 50                      	push	ax			; Put it on stack
 14127 00002083 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14128 00002086 AA                      	STOSB				; Put in correct place
 14129 00002087 B90A00                  	MOV	CX,20/2
 14130 0000208A F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14131                                  
 14132 0000208C 16                      	push	ss
 14133 0000208D 1F                      	pop	ds
 14134                                  
 14135 0000208E FF36[2C03]              	push	word [DMAADD]
 14136 00002092 FF36[2E03]              	push	word [DMAADD+2]
 14137 00002096 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14138 0000209C 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14139 000020A0 E8270E                  	call	DOS_SEARCH_NEXT 	; Find it
 14140 000020A3 8F06[2E03]              	pop	word [DMAADD+2]
 14141 000020A7 8F06[2C03]              	pop	word [DMAADD]
 14142 000020AB 7203                    	JC	short SearchNoMore
 14143 000020AD E958FF                  	JMP	SearchSet		; Ok set return
 14144                                  
 14145                                  SearchNoMore:
 14146 000020B0 C43E[A605]              	LES	DI,[THISFCB]
 14147 000020B4 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14148 000020B9 7403                    	JZ	short NORMFCB8
 14149 000020BB 83C707                  	ADD	DI,7			; Point past the extension
 14150                                  NORMFCB8:
 14151 000020BE 5B                      	pop	bx			; Get original drive byte
 14152 000020BF 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14153                                  					;  at the right spot
 14154                                  ; error code is in AX
 14155                                  
 14156 000020C2 E9DEE5                  	jmp	FCB_RET_ERR
 14157                                  
 14158                                  ; 17/05/2019 - Retro DOS v4.0
 14159                                  
 14160                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14161                                  
 14162                                  ;---------------------------------------------------------------------------
 14163                                  ;
 14164                                  ;   Procedure Name : $FIND_FIRST
 14165                                  ; 
 14166                                  ;   Assembler usage:
 14167                                  ;	    MOV AH, FindFirst
 14168                                  ;	    LDS DX, name
 14169                                  ;	    MOV CX, attr
 14170                                  ;	    INT 21h
 14171                                  ;	; DMA address has datablock
 14172                                  ;
 14173                                  ;   Error Returns:
 14174                                  ;	    AX = error_path_not_found
 14175                                  ;	       = error_no_more_files
 14176                                  ;---------------------------------------------------------------------------
 14177                                  
 14178                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14179                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14180                                  
 14181                                  _$FIND_FIRST:
 14182 000020C5 89D6                    	MOV	SI,DX			; get name in appropriate place
 14183 000020C7 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14184                                  
 14185 000020CC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14186                                  
 14187 000020CF E8CD4B                  	call	TransPathSet		; convert the path
 14188 000020D2 7305                    	JNC	short Find_it 		; no error, go and look
 14189                                  FindError:
 14190                                  	;mov	al,3
 14191 000020D4 B003                    	mov	al, error_path_not_found ; error and map into one.
 14192                                  	; 09/11/2022
 14193                                  FF_errj:
 14194 000020D6 E9B4E5                  	jmp	SYS_RET_ERR
 14195                                  Find_it:
 14196 000020D9 16                      	push	ss
 14197 000020DA 1F                      	pop	ds
 14198                                  
 14199 000020DB FF36[2C03]              	push	word [DMAADD]
 14200 000020DF FF36[2E03]              	push	word [DMAADD+2]
 14201 000020E3 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14202 000020E9 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14203                                  	; MSDOS 3.3
 14204                                  	;call	DOS_SEARCH_FIRST
 14205                                  	; MSDOS 6.0
 14206 000020ED E89000                  	call	GET_FAST_SEARCH 	; search
 14207 000020F0 8F06[2E03]              	pop	word [DMAADD+2]
 14208 000020F4 8F06[2C03]              	pop	word [DMAADD]
 14209                                  	
 14210                                  	; 16/12/2022
 14211                                  	;JNC	short FindSet 		; no error, transfer info
 14212 000020F8 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14213                                  	;
 14214                                  	;jmp	SYS_RET_ERR
 14215                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14216                                  ;FFF_errj:
 14217                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14218                                  
 14219                                  FindSet:
 14220 000020FA BE[BE04]                	MOV	SI,SEARCHBUF
 14221 000020FD C43E[2C03]              	LES	DI,[DMAADD]
 14222 00002101 B91500                  	MOV	CX,21
 14223 00002104 F3A4                    	REP	MOVSB
 14224 00002106 56                      	PUSH	SI			; Save pointer to start of entry
 14225                                  	;mov	al,[si+0Bh]
 14226 00002107 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14227 0000210A AA                      	STOSB
 14228                                  	;add	si,16h ; 22
 14229 0000210B 83C616                  	ADD	SI,dir_entry.dir_time
 14230 0000210E A5                      	MOVSW				; dir_time
 14231 0000210F A5                      	MOVSW				; dir_date
 14232 00002110 46                      	INC	SI
 14233 00002111 46                      	INC	SI			; Skip dir_first
 14234 00002112 A5                      	MOVSW				; dir_size (2 words)
 14235 00002113 A5                      	MOVSW
 14236 00002114 5E                      	POP	SI			; Point back to dir_name
 14237 00002115 E83500                   	CALL	PackName
 14238 00002118 E969E5                  	jmp	SYS_RET_OK		; bye with no errors
 14239                                  
 14240                                  ;---------------------------------------------------------------------------
 14241                                  ;
 14242                                  ;   Procedure Name : $FIND_NEXT
 14243                                  ;
 14244                                  ;   Assembler usage:
 14245                                  ;	; dma points at area returned by find_first
 14246                                  ;	    MOV AH, findnext
 14247                                  ;	    INT 21h
 14248                                  ;	; next entry is at dma
 14249                                  ;
 14250                                  ;   Error Returns:
 14251                                  ;	    AX = error_no_more_files
 14252                                  ;---------------------------------------------------------------------------
 14253                                  
 14254                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14255                                  _$FIND_NEXT:
 14256 0000211B 16                      	push	ss
 14257 0000211C 07                      	pop	es
 14258                                  
 14259 0000211D BF[BE04]                	MOV	DI,SEARCHBUF
 14260                                  
 14261 00002120 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14262                                  
 14263 00002125 B91500                  	MOV	CX,21
 14264 00002128 F3A4                    	REP	MOVSB			; Put the search continuation info
 14265                                  					;  in the right place
 14266 0000212A 16                      	push	ss
 14267 0000212B 1F                      	pop	ds			; get ready for search
 14268                                  	
 14269 0000212C FF36[2C03]              	push	word [DMAADD]
 14270 00002130 FF36[2E03]              	push	word [DMAADD+2]
 14271 00002134 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14272 0000213A 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14273 0000213E E8890D                  	call	DOS_SEARCH_NEXT 	; Find it
 14274 00002141 8F06[2E03]              	pop	word [DMAADD+2]
 14275 00002145 8F06[2C03]              	pop	word [DMAADD]
 14276 00002149 73AF                    	JNC	short FindSet 		; No error, set info
 14277                                  	;jmp	SYS_RET_ERR
 14278                                  	; 16/12/2022
 14279 0000214B EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14280                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14281                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14282                                  
 14283                                  ;---------------------------------------------------------------------------
 14284                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14285                                  ;
 14286                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14287                                  ;	the ASCIZ format.
 14288                                  ;
 14289                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14290                                  ;		(ES:DI) = destination area (13 bytes)
 14291                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14292                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14293                                  ;---------------------------------------------------------------------------
 14294                                  
 14295                                  PackName:
 14296                                  ;	Move over 8 characters to cover the name component, then trim it's
 14297                                  ;	trailing blanks.
 14298                                  
 14299 0000214D B90800                  	MOV	CX,8			; Pack the name
 14300 00002150 F3A4                    	REP	MOVSB			; Move all of it
 14301                                  main_kill_tail:
 14302 00002152 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14303 00002157 7507                    	JNZ	short find_check_dot
 14304 00002159 4F                      	DEC	DI			; Back up over trailing space
 14305 0000215A 41                      	INC	CX
 14306 0000215B 83F908                  	CMP	CX,8
 14307 0000215E 72F2                    	JB	short main_kill_tail
 14308                                  find_check_dot:
 14309                                  	;CMP	WORD [SI],(" " << 8) | " "
 14310 00002160 813C2020                	cmp     word [si],2020h 
 14311 00002164 7506                    	JNZ	short got_ext 		; Some chars in extension
 14312 00002166 807C0220                	CMP	BYTE [SI+2]," "
 14313 0000216A 7410                    	JZ	short find_done		; No extension
 14314                                  got_ext:
 14315 0000216C B02E                    	MOV	AL,"."	; 2Eh
 14316 0000216E AA                      	STOSB
 14317                                  	;MOV	CX,3
 14318                                  	; 18/12/2022
 14319                                  	;mov	cl,3
 14320                                  	;REP	MOVSB
 14321 0000216F A4                      	movsb
 14322 00002170 A4                      	movsb
 14323 00002171 A4                      	movsb
 14324                                  ext_kill_tail:
 14325 00002172 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14326 00002177 7503                    	JNZ	short find_done
 14327 00002179 4F                      	DEC	DI			; Back up over trailing space
 14328 0000217A EBF6                    	JMP	short ext_kill_tail
 14329                                  find_done:
 14330 0000217C 31C0                    	XOR	AX,AX
 14331 0000217E AA                      	STOSB				; NUL terminate
 14332 0000217F C3                      	retn
 14333                                  
 14334                                  ;---------------------------------------------------------------------------
 14335                                  
 14336                                  	; 17/05/2019 - Retro DOS v4.0
 14337                                  GET_FAST_SEARCH:
 14338                                  	; 22/07/2018
 14339                                  	; MSDOS 6.0
 14340                                  	; 17/12/2022
 14341 00002180 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14342                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14343                                  					;FO.trigger fastopen ;AN000;
 14344                                  	;call	DOS_SEARCH_FIRST
 14345                                  	;retn
 14346                                  	; 17/12/2022
 14347 00002186 E9550C                  	jmp	DOS_SEARCH_FIRST
 14348                                  
 14349                                  ;============================================================================
 14350                                  ; PATH.ASM, MSDOS 6.0, 1991
 14351                                  ;============================================================================
 14352                                  ; 06/08/2018 - Retro DOS v3.0
 14353                                  ; 17/05/2019 - Retro DOS v4.0
 14354                                  
 14355                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14356                                  
 14357                                  ;**	Directory related system calls. These will be passed direct text of the
 14358                                  ;	pathname from the user. They will need to be passed through the macro
 14359                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14360                                  ;	defined in DISPATCH. The system calls are:
 14361                                  ;
 14362                                  ;	$CURRENT_DIR  Written
 14363                                  ;	$RMDIR	  Written
 14364                                  ;	$CHDIR	  Written
 14365                                  ;	$MKDIR	  Written
 14366                                  ;
 14367                                  ;
 14368                                  ;	Modification history:
 14369                                  ;
 14370                                  ;	    Created: ARR 4 April 1983
 14371                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14372                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14373                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14374                                  ;				    current directory.
 14375                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14376                                  
 14377                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14378                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14379                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14380                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14381                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14382                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14383                                  ;	I_Need	cMeta,BYTE
 14384                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14385                                  
 14386                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14387                                  ;----------------------------------------------------------------------------
 14388                                  ;
 14389                                  ;   Procedure Name : $CURRENT_DIR
 14390                                  ;
 14391                                  ;   Assembler usage:
 14392                                  ;		LDS	SI,area
 14393                                  ;		MOV	DL,drive
 14394                                  ;		INT	21h
 14395                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14396                                  ;	    ; current directory.
 14397                                  ;   Error returns:
 14398                                  ;	    AX = error_invalid_drive
 14399                                  ;
 14400                                  ;----------------------------------------------------------------------------
 14401                                  
 14402                                  _$CURRENT_DIR:
 14403                                  	;06/08/2018 - Retro DOS v3.0
 14404                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14405 00002189 E8F9F1                  	call	ECritDisk
 14406 0000218C 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14407 0000218E E8134A                  	call	GetVisDrv		; grab it
 14408 00002191 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14409                                  CurdirErr:
 14410 00002193 E80AF2                  	call	LCritDisk
 14411                                  
 14412                                  	; MSDOS 3.3
 14413                                  	;mov	al,0Fh
 14414                                  	
 14415                                  	; MSDOS 6.0
 14416 00002196 1E                      	push	ds
 14417 00002197 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14418 0000219C A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14419 0000219F 1F                      	pop	ds
 14420                                  
 14421                                  curdir_errj:
 14422 000021A0 E9EAE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14423                                  
 14424                                  CurrentValidate:
 14425 000021A3 1E                      	push	ds			; save destination
 14426 000021A4 56                      	push	si
 14427                                  	
 14428                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14429                                  	
 14430                                  	; MSDOS 6.0
 14431 000021A5 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14432 000021AA C536[A205]              	lds     si,[THISCDS]
 14433                                  
 14434                                  ; 16/12/2022
 14435                                  %if 0
 14436                                  	; 09/11/2022 (following test instruction is nonsense!)
 14437                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14438                                  
 14439                                  	;test	word [si+43h],8000h
 14440                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14441                                  	;jnz	short $+2  ; 09/11/2022	
 14442                                  	jnz	short DoCheck
 14443                                  %endif
 14444                                  
 14445                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14446                                  ; media check.
 14447                                  ;	CMP	word [SI+curdir.ID],0
 14448                                  ;	JZ	short GetDst
 14449                                  DoCheck:
 14450                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14451                                  
 14452                                  	; MSDOS 6.0
 14453 000021AE 1E                      	push	ds
 14454 000021AF 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14455 000021B4 C606[4C03]00            	mov	byte [NoSetDir],0
 14456 000021B9 1F                      	pop	ds
 14457                                  
 14458 000021BA BF[BE03]                	MOV	DI,OPENBUF
 14459 000021BD E88821                  	call	ValidateCDS		; output is ES:DI -> CDS
 14460                                  
 14461 000021C0 06                      	push	es	 		; swap source and destination
 14462 000021C1 57                      	push	di
 14463 000021C2 5E                      	pop	si
 14464 000021C3 1F                      	pop	ds
 14465                                  GetDst:
 14466 000021C4 5F                      	pop	di
 14467 000021C5 07                      	pop	es			; get real destination
 14468 000021C6 72CB                    	JC	short CurdirErr
 14469                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14470                                  	;
 14471                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14472                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14473                                  	; 16/12/2022
 14474                                  	;add	si,0  ; add si,curdir.text
 14475                                  	;
 14476                                  	;add	si,[si+4Fh] ; 17/05/2019
 14477 000021C8 03744F                  	ADD	SI,[SI+curdir.end]
 14478 000021CB 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14479 000021CE 7501                    	JNZ	short CurrentCopy
 14480 000021D0 46                      	INC	SI
 14481                                  CurrentCopy:
 14482                                  ;	call	FStrCpy
 14483                                  ;; 10/29/86 E5 char
 14484 000021D1 50                      	PUSH	AX
 14485 000021D2 AC                      	LODSB				; get char
 14486 000021D3 08C0                    	OR	AL,AL
 14487 000021D5 7413                    	JZ	short FOK
 14488 000021D7 3C05                    	CMP	AL,05H
 14489 000021D9 740D                    	JZ	short FCHANGE
 14490 000021DB EB01                    	JMP	short FFF
 14491                                  FCPYNEXT:
 14492 000021DD AC                      	LODSB				; get char
 14493                                  FFF:
 14494 000021DE 3C5C                    	CMP	AL,'\'			; beginning of directory
 14495 000021E0 7508                    	JNZ	short FOK		; no
 14496 000021E2 AA                      	STOSB				; put into user's buffer
 14497 000021E3 AC                      	LODSB				; 1st char of dir is 05?
 14498 000021E4 3C05                    	CMP	AL,05H
 14499 000021E6 7502                    	JNZ	short FOK		; no
 14500                                  FCHANGE:
 14501 000021E8 B0E5                    	MOV	AL,0E5H			; make it E5
 14502                                  FOK:
 14503 000021EA AA                      	STOSB				; put into user's buffer
 14504 000021EB 08C0                    	OR	AL,AL			; final char
 14505 000021ED 75EE                    	JNZ	short FCPYNEXT		; no
 14506 000021EF 58                      	POP	AX
 14507                                  
 14508                                  ;; 10/29/86 E5 char
 14509 000021F0 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14510 000021F2 E8ABF1                  	call	LCritDisk
 14511 000021F5 E98CE4                  	jmp	SYS_RET_OK		; no more, bye!
 14512                                  
 14513                                  ; 17/05/2019 - Retro DOS v4.0
 14514                                  
 14515                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14516                                  
 14517                                  ;BREAK <$RmDir -- Remove a directory>
 14518                                  ;----------------------------------------------------------------------------
 14519                                  ;
 14520                                  ; Procedure Name : $RmDir
 14521                                  ;
 14522                                  ; Inputs:
 14523                                  ;	DS:DX Points to asciz name
 14524                                  ; Function:
 14525                                  ;	Delete directory if empty
 14526                                  ; Returns:
 14527                                  ;	STD XENIX Return
 14528                                  ;	AX = error_path_not_found If path bad
 14529                                  ;	AX = error_access_denied If
 14530                                  ;		Directory not empty
 14531                                  ;		Path not directory
 14532                                  ;		Root directory specified
 14533                                  ;		Directory malformed (. and .. not first two entries)
 14534                                  ;		User tries to delete a current directory
 14535                                  ;	AX = error_current_directory
 14536                                  ;
 14537                                  ;----------------------------------------------------------------------------
 14538                                  
 14539                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14540                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14541                                  
 14542                                  _$RMDIR:
 14543 000021F8 52                      	push	dx			; Save ptr to name
 14544 000021F9 1E                      	push	ds
 14545 000021FA 89D6                    	mov	si,dx			; Load ptr into si
 14546 000021FC BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14547 000021FF 57                      	push	di
 14548 00002200 E8A44A                  	call	TransPathNoSet		; Translate the name
 14549 00002203 5F                      	pop	di			; di = ptr to buf for trans name
 14550 00002204 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14551 00002206 1F                      	pop	ds
 14552 00002207 5A                      	pop	dx			; Restore the name
 14553                                  	;mov	al,3
 14554 00002208 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14555                                  	; 16/12/2022
 14556                                  rmdir_errj: ; 10/08/2018
 14557                                  chdir_errj:
 14558 0000220A EB94                    	jmp	short curdir_errj
 14559                                  	;jmp	SYS_RET_ERR
 14560                                  rmlset:
 14561 0000220C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14562 00002212 7512                    	Jnz	short rmerr		;	return (-1);
 14563 00002214 16                      	push	ss
 14564 00002215 07                      	pop	es
 14565 00002216 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14566                                  rmloop: 
 14567 00002218 E8FA49                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14568 0000221B 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14569 0000221D E806F0                  	call	StrCmp			; Are the 2 paths the same?
 14570 00002220 7404                    	jz	short rmerr		; Yes, report error.
 14571 00002222 FEC0                    	inc	al			; No, inc al to next drive number
 14572 00002224 EBF2                    	jmp	short rmloop		; Go check next drive.
 14573                                  rmerr:
 14574 00002226 1F                      	pop	ds
 14575 00002227 5A                      	pop	dx			; Restore the name
 14576                                  	;mov	al,10h
 14577 00002228 B010                    	mov	al,error_current_directory ; error
 14578                                  	; 16/12/2022
 14579                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14580                                  ;chdir_errj:
 14581 0000222A EBDE                    	jmp	short rmdir_errj
 14582                                  rmcont:
 14583 0000222C 1F                      	pop	ds
 14584 0000222D 5A                      	pop	dx			; Restore the name
 14585 0000222E BE[B432]                	MOV	SI,DOS_RMDIR
 14586 00002231 EB7C                    	JMP	DoDirCall
 14587                                  
 14588                                  ; 17/05/2019 - Retro DOS v4.0
 14589                                  
 14590                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14591                                  
 14592                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14593                                  ;----------------------------------------------------------------------------
 14594                                  ;
 14595                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14596                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14597                                  ; several cases to consider:
 14598                                  ;
 14599                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14600                                  ;	it into a WFP.	We verify the existance of this directory and then
 14601                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14602                                  ;	directory cluster.
 14603                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14604                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14605                                  ;	WFP back into the CDS.
 14606                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14607                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14608                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14609                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14610                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14611                                  ;	to process the path but to return the logical CDS and the logical
 14612                                  ;	path.  We then copy the logical path into the logical CDS.
 14613                                  ;
 14614                                  ; Inputs:
 14615                                  ;	DS:DX Points to asciz name
 14616                                  ; Returns:
 14617                                  ;	STD XENIX Return
 14618                                  ;	AX = chdir_path_not_found if error
 14619                                  ;
 14620                                  ;----------------------------------------------------------------------------
 14621                                  
 14622                                  _$CHDIR:
 14623 00002233 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14624 00002236 89D6                    	MOV	SI,DX			; get source
 14625 00002238 E8604A                  	call	TransPath		; go munge the path and get real CDS
 14626 0000223B 7304                    	JNC	short ChDirCrack	; no errors, try path
 14627                                  ChDirErrP:
 14628                                  	;mov	al,3
 14629 0000223D B003                    	MOV	AL,error_path_not_found
 14630                                  ChDirErr:
 14631                                  	;jmp	SYS_RET_ERR 	; oops!
 14632                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14633 0000223F EBC9                    	jmp	short chdir_errj
 14634                                  
 14635                                  ChDirCrack:
 14636 00002241 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14637 00002246 75F5                    	JNZ	short ChDirErrP
 14638                                  
 14639                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14640                                  ; found.
 14641                                  
 14642 00002248 C43E[A205]              	LES	DI,[THISCDS]
 14643 0000224C 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14644 0000224F 74EC                    	JZ	short ChDirErrP		;	error ();
 14645                                  
 14646                                  ; Find out if the directory exists.
 14647                                  
 14648 00002251 E81D10                  	call	DOS_CHDIR
 14649                                  	;Jc	short ChDirErr
 14650                                  	; 16/12/2022
 14651 00002254 72B4                    	jc	short chdir_errj
 14652                                  ;
 14653                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14654                                  ; not network). If one was seen, all we need to do is copy in the text
 14655                                  ;
 14656 00002256 C43E[A205]              	LES	DI,[THISCDS]
 14657                                  	;test	word [es:di+43h],2000h
 14658                                  	; 17/12/2022
 14659 0000225A 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14660                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14661 0000225F 7425                    	JZ	short GotCDS
 14662                                  
 14663                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14664                                  
 14665 00002261 06                      	push	es	
 14666 00002262 57                      	push	di
 14667 00002263 51                      	push	cx			; save CDS and cluster...
 14668 00002264 E863E2                  	call	Get_User_Stack		; get original text
 14669                                  	
 14670                                  	;mov	di,[si+6]
 14671 00002267 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14672                                  	;mov	ds,[si+0Eh]
 14673 0000226A 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14674                                  	
 14675 0000226D BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14676 00002270 87F7                    	XCHG	SI,DI
 14677 00002272 30C0                    	XOR	AL,AL			; do no splicing
 14678 00002274 57                      	push	di
 14679 00002275 E82F4A                  	call	TransPathNoSet		; Munge path
 14680 00002278 5E                      	pop	si
 14681                                  
 14682                                  ; There should NEVER be an error here.
 14683                                  
 14684                                  ;IF FALSE
 14685                                  ;	JNC SKipErr
 14686                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14687                                  ;SkipErr:
 14688                                  ;ENDIF
 14689 00002279 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14690                                  	;mov	word [es:di+49h],-1
 14691 0000227D 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14692                                  					; no valid cluster here...
 14693 00002283 59                      	pop	cx
 14694 00002284 5F                      	pop	di
 14695 00002285 07                      	pop	es
 14696                                  
 14697                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14698                                  
 14699                                  GotCDS:
 14700                                  
 14701                                  ; wfp_start points to the text. See if it is long enough
 14702                                  
 14703                                  	; MSDOS 3.3
 14704                                  	;push	ss
 14705                                  	;pop	ds
 14706                                  	;mov	si,[WFP_START]
 14707                                  	;push	cx
 14708                                  	;call	DStrLen
 14709                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14710                                  	;pop	cx
 14711                                  	;ja	short ChDirErrP
 14712                                  
 14713                                  	; MSDOS 6.0
 14714 00002286 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14715 00002289 77B2                    	JA	short ChDirErrP
 14716                                  	; MSDOS 3.3 & MSDOS 6.0
 14717                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14718                                  	; 17/12/2022
 14719 0000228B 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14720 00002290 7512                    	JNZ	short SkipRecency
 14721                                  	; MSDOS 6.0
 14722                                  	;test	word [es:di+43h],2000h
 14723                                  	; 17/12/2022
 14724 00002292 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14725                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14726                                  					;PTM. for Join and Subst ;AN000;
 14727 00002297 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14728 00002299 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14729                                  setdirclus:
 14730                                  	;mov	[es:di+49h],cx
 14731 0000229C 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14732 000022A0 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14733                                  SkipRecency:
 14734 000022A4 E8B0EF                  	call	FStrCpy
 14735 000022A7 30C0                    	XOR	AL,AL
 14736                                  mkdir_ok:
 14737 000022A9 E9D8E3                  	jmp	SYS_RET_OK
 14738                                  
 14739                                  ; 17/05/2019 - Retro DOS v4.0
 14740                                  
 14741                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14742                                  
 14743                                  ;BREAK <$MkDir - Make a directory entry>
 14744                                  ;---------------------------------------------------------------------------
 14745                                  ;
 14746                                  ; Procedure Name : $MkDir
 14747                                  ; Inputs:
 14748                                  ;	DS:DX Points to asciz name
 14749                                  ; Function:
 14750                                  ;	Make a new directory
 14751                                  ; Returns:
 14752                                  ;	STD XENIX Return
 14753                                  ;	AX = mkdir_path_not_found if path bad
 14754                                  ;	AX = mkdir_access_denied  If
 14755                                  ;		Directory cannot be created
 14756                                  ;		Node already exists
 14757                                  ;		Device name given
 14758                                  ;		Disk or directory(root) full
 14759                                  ;---------------------------------------------------------------------------
 14760                                  
 14761                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14762                                  
 14763                                  _$MKDIR:
 14764 000022AC BE[7331]                	MOV	SI,DOS_MKDIR
 14765                                  DoDirCall:
 14766 000022AF BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14767                                  
 14768 000022B2 56                      	push	si
 14769 000022B3 89D6                    	MOV	SI,DX			; get source
 14770 000022B5 E8E349                  	call	TransPath		; go munge the path
 14771 000022B8 5E                      	pop	si
 14772 000022B9 7305                    	JNC	short MkDirCrack	; no errors, try path
 14773                                  MkErrP:
 14774 000022BB B003                    	MOV	AL,error_path_not_found	; oops!
 14775                                  MkErr:
 14776 000022BD E9CDE3                  	jmp	SYS_RET_ERR
 14777                                  MkDirCrack:
 14778 000022C0 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14779 000022C6 75F3                    	JNZ	short MkErrP
 14780                                  
 14781                                  	; MSDOS 3.3
 14782                                  	;push	ss
 14783                                  	;pop	ds
 14784                                  	;call	si
 14785                                  	;jb	short MkErr
 14786                                  	;;jmp	short mkdir_ok
 14787                                  	;jmp	SYS_RET_OK
 14788                                  
 14789                                  	; MSDOS 6.0
 14790 000022C8 56                      	PUSH	SI			;PTM.			;AN000;
 14791 000022C9 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14792 000022CC 5E                      	POP	SI			;PTM.			;AN000;
 14793 000022CD 7604                    	JBE	short pathok		;PTM.			;AN000;
 14794                                  	;mov	al,5
 14795 000022CF B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14796                                  	;jmp	SYS_RET_ERR		;PTM.
 14797 000022D1 EBEA                    	jmp	short MkErr
 14798                                  pathok:
 14799 000022D3 FFD6                    	CALL	SI			; go get file
 14800 000022D5 72E6                    	JC	short MkErr		; no errors
 14801                                  	; 16/12/2022
 14802                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14803 000022D7 EBD0                    	jmp	short mkdir_ok
 14804                                  	;jmp	SYS_RET_OK
 14805                                  
 14806                                  ;----------------------------------------------------------------------------
 14807                                  ;
 14808                                  ; Procedure Name : Check_PathLen
 14809                                  ;
 14810                                  ; Inputs:
 14811                                  ;	nothing
 14812                                  ; Function:
 14813                                  ;	check if final path length greater than 67
 14814                                  ; Returns:
 14815                                  ;	Above flag set if > 67
 14816                                  ;
 14817                                  ;---------------------------------------------------------------------------
 14818                                  
 14819                                  Check_PathLen:
 14820                                  	; 09/09/2018
 14821                                  	;mov	SI,[WFP_START]
 14822 000022D9 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14823                                  Check_PathLen2:
 14824 000022DE 16                      	push	ss
 14825 000022DF 1F                      	pop	ds
 14826                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14827 000022E0 51                      	push	CX	
 14828 000022E1 E88AEF                  	CALL	DStrLen
 14829 000022E4 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14830 000022E7 59                      	POP	CX
 14831 000022E8 C3                      	retn
 14832                                  
 14833                                  ;============================================================================
 14834                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14835                                  ;============================================================================
 14836                                  ; 07/08/2018 - Retro DOS v3.0
 14837                                  ; 17/05/2019 - Retro DOS v4.0
 14838                                  
 14839                                  ;**	IOCTL system call.
 14840                                  ;----------------------------------------------------------------------------
 14841                                  ;	$IOCTL
 14842                                  ;
 14843                                  ;	  Revision history:
 14844                                  ;
 14845                                  ;		Created: ARR 4 April 1983
 14846                                  ;
 14847                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14848                                  ;
 14849                                  ;		A000	version 4.00	Jan. 1988
 14850                                  ;
 14851                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14852                                  ;
 14853                                  
 14854                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14855                                  ;---------------------------------------------------------------------------
 14856                                  ;
 14857                                  ;   Assembler usage:
 14858                                  ;	    MOV     BX, Handle
 14859                                  ;	    MOV     DX, Data
 14860                                  ;
 14861                                  ;	(or LDS     DX,BUF
 14862                                  ;	    MOV     CX,COUNT)
 14863                                  ;
 14864                                  ;	    MOV     AH, Ioctl
 14865                                  ;	    MOV     AL, Request
 14866                                  ;	    INT     21h
 14867                                  ;
 14868                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14869                                  ;	    attribute word in DX, handle in BX:
 14870                                  ;	    DH = high word of device driver attributes
 14871                                  ;	    DL = low byte of sf_flags
 14872                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14873                                  ;	    in BX.
 14874                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14875                                  ;	    into DS:DX.  Return number read in AX.
 14876                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14877                                  ;	    DS:DX.  Return bytes written in AX.
 14878                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14879                                  ;	    into DS:DX.  Return number read in AX.
 14880                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14881                                  ;	    DS:DX.  Return bytes written in AX.
 14882                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14883                                  ;	    device, AL = 0FFh, otherwise 0.
 14884                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14885                                  ;	    device, AL = 0FFh, otherwise 0.
 14886                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14887                                  ;	    removable media, 0 otherwise.
 14888                                  ;	 9  Return the contents of the device attribute word in DX for the
 14889                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14890                                  ;	    network. 8000h is the bit for local use.
 14891                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14892                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14893                                  ;	    the count and CX is the delay.
 14894                                  ;
 14895                                  ;   Error returns:
 14896                                  ;	    AX = error_invalid_handle
 14897                                  ;	       = error_invalid_function
 14898                                  ;	       = error_invalid_data
 14899                                  ;
 14900                                  ;-------------------------------------------------------------------------------
 14901                                  ;
 14902                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14903                                  ;   than the above
 14904                                  ;
 14905                                  ;	There are several basic forms of IOCTL calls:
 14906                                  ;
 14907                                  ;
 14908                                  ;	** Get/Set device information:	**
 14909                                  ;
 14910                                  ;	ENTRY	(AL) = function code
 14911                                  ;		  0 - Get device information
 14912                                  ;		  1 - Set device information
 14913                                  ;		(BX) = file handle
 14914                                  ;		(DX) = info for "Set Device Information"
 14915                                  ;	EXIT	'C' set if error
 14916                                  ;		  (AX) = error code
 14917                                  ;		'C' clear if OK
 14918                                  ;		  (DX) = info for "Get Device Information"
 14919                                  ;	USES	ALL
 14920                                  ;
 14921                                  ;
 14922                                  ;	**  Read/Write Control Data From/To Handle  **
 14923                                  ;
 14924                                  ;	ENTRY	(AL) = function code
 14925                                  ;		  2 - Read device control info
 14926                                  ;		  3 - Write device control info
 14927                                  ;		(BX) = file handle
 14928                                  ;		(CX) = transfer count
 14929                                  ;		(DS:DX) = address for data
 14930                                  ;	EXIT	'C' set if error
 14931                                  ;		  (AX) = error code
 14932                                  ;		'C' clear if OK
 14933                                  ;		  (AX) = count of bytes transfered
 14934                                  ;	USES	ALL
 14935                                  ;
 14936                                  ;
 14937                                  ;	**  Read/Write Control Data From/To Block Device  **
 14938                                  ;
 14939                                  ;	ENTRY	(AL) = function code
 14940                                  ;		  4 - Read device control info
 14941                                  ;		  5 - Write device control info
 14942                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14943                                  ;		(CX) = transfer count
 14944                                  ;		(DS:DX) = address for data
 14945                                  ;	EXIT	'C' set if error
 14946                                  ;		  (AX) = error code
 14947                                  ;		'C' clear if OK
 14948                                  ;		  (AX) = count of bytes transfered
 14949                                  ;	USES	ALL
 14950                                  ;
 14951                                  ;
 14952                                  ;	**  Get Input/Output Status  **
 14953                                  ;
 14954                                  ;	ENTRY	(AL) = function code
 14955                                  ;		  6 - Get Input status
 14956                                  ;		  7 - Get Output Status
 14957                                  ;		(BX) = file handle
 14958                                  ;	EXIT	'C' set if error
 14959                                  ;		  (AX) = error code
 14960                                  ;		'C' clear if OK
 14961                                  ;		  (AL) = 00 if not ready
 14962                                  ;		  (AL) = FF if ready
 14963                                  ;	USES	ALL
 14964                                  ;
 14965                                  ;
 14966                                  ;	**  Get Drive Information  **
 14967                                  ;
 14968                                  ;	ENTRY	(AL) = function code
 14969                                  ;		  8 - Check for removable media
 14970                                  ;		  9 - Get device attributes
 14971                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14972                                  ;	EXIT	'C' set if error
 14973                                  ;		  (AX) = error code
 14974                                  ;		'C' clear if OK
 14975                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14976                                  ;		  (DX) = device attribute word (func. 9)
 14977                                  ;	USES	ALL
 14978                                  ;
 14979                                  ;
 14980                                  ;	**  Get Redirected bit	**
 14981                                  ;
 14982                                  ;	ENTRY	(AL) = function code
 14983                                  ;		  0Ah - Network stuff
 14984                                  ;		(BX) = file handle
 14985                                  ;	EXIT	'C' set if error
 14986                                  ;		  (AX) = error code
 14987                                  ;		'C' clear if OK
 14988                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14989                                  ;	USES	ALL
 14990                                  ;
 14991                                  ;
 14992                                  ;	**  Change sharer retry parameters  **
 14993                                  ;
 14994                                  ;	ENTRY	(AL) = function code
 14995                                  ;		  0Bh - Set retry parameters
 14996                                  ;		(CX) = retry loop count
 14997                                  ;		(DX) = number of retries
 14998                                  ;	EXIT	'C' set if error
 14999                                  ;		  (AX) = error code
 15000                                  ;		'C' clear if OK
 15001                                  ;	USES	ALL
 15002                                  ;
 15003                                  ;
 15004                                  ;   =================================================================
 15005                                  ;
 15006                                  ;	**  New Standard Control  **
 15007                                  ;
 15008                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15009                                  ;	FORMS ARE OBSOLETE.
 15010                                  ;
 15011                                  ;   =================================================================
 15012                                  ;
 15013                                  ;	ENTRY	(AL) = function code
 15014                                  ;		  0Ch - Control Function subcode
 15015                                  ;		(BX) = File Handle
 15016                                  ;		(CH) = Category Indicator
 15017                                  ;		(CL) = Function within category
 15018                                  ;		(DS:DX) = address for data, if any
 15019                                  ;		(SI) = Passed to device as argument, use depends upon function
 15020                                  ;		(DI) = Passed to device as argument, use depends upon function
 15021                                  ;	EXIT	'C' set if error
 15022                                  ;		  (AX) = error code
 15023                                  ;		'C' clear if OK
 15024                                  ;		  (SI) = Return value, meaning is function dependent
 15025                                  ;		  (DI) = Return value, meaning is function dependent
 15026                                  ;		  (DS:DX) = Return address, use is function dependent
 15027                                  ;	USES	ALL
 15028                                  ;
 15029                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15030                                  ;     (See inc\ioctl.inc for more info)
 15031                                  ;
 15032                                  ;	ENTRY	(AL) = function code
 15033                                  ;		  0Dh - Control Function subcode
 15034                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15035                                  ;		(CH) = Category Indicator
 15036                                  ;		(CL) = Function within category
 15037                                  ;		(DS:DX) = address for data, if any
 15038                                  ;		(SI) = Passed to device as argument, use depends upon function
 15039                                  ;		(DI) = Passed to device as argument, use depends upon function
 15040                                  ;
 15041                                  ;	EXIT	'C' set if error
 15042                                  ;		  (AX) = error code
 15043                                  ;		'C' clear if OK
 15044                                  ;		  (DS:DX) = Return address, use is function dependent
 15045                                  ;	USES	ALL
 15046                                  ;
 15047                                  ;---------------------------------------------------------------------------
 15048                                  	
 15049                                  	; 17/05/2019 - Retro DOS v4.0
 15050                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15051                                  
 15052                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15053                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15054                                  
 15055                                  IOCTLJMPTABLE:	;label	word
 15056                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15057 000022E9 [2723]                  	dw	ioctl_getset_data	; 0
 15058 000022EB [2723]                  	dw	ioctl_getset_data   	; 1
 15059 000022ED [7723]                  	dw	ioctl_control_string	; 2
 15060 000022EF [7723]                  	dw	ioctl_control_string	; 3
 15061 000022F1 [CB24]                  	dw	ioctl_get_dev		; 4
 15062 000022F3 [CB24]                  	dw	ioctl_get_dev		; 5
 15063 000022F5 [9123]                  	dw	ioctl_status		; 6
 15064 000022F7 [9123]                  	dw	ioctl_status		; 7
 15065 000022F9 [3224]                  	dw	ioctl_rem_media		; 8
 15066 000022FB [7024]                  	dw	ioctl_drive_attr	; 9
 15067 000022FD [BD24]                  	dw	ioctl_handle_redir	; A
 15068 000022FF [AD23]                  	dw	Set_Retry_Parameters	; B
 15069 00002301 [BB23]                  	dw	GENERICIOCTLHANDLE	; C
 15070 00002303 [D223]                  	dw	GENERICIOCTL		; D
 15071                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15072 00002305 [7C25]                  	dw	ioctl_drive_owner	; E
 15073 00002307 [7C25]                  	dw	ioctl_drive_owner	; F
 15074                                  	; MSDOS 6.0
 15075 00002309 [BB23]                  	dw	query_handle_support	; 10h
 15076 0000230B [D223]                  	dw	query_device_support	; 11h
 15077                                  
 15078                                  	; 11/11/2022
 15079                                  _$IOCTL:
 15080 0000230D 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15081 0000230F 16                      	push	ss
 15082 00002310 1F                      	pop	ds			;hkn; SS is DOSDATA
 15083                                  
 15084                                  	; MSDOS 3.3
 15085                                  	;cmp	al,0Fh 
 15086                                  	; MSDOS 6.0
 15087 00002311 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15088 00002313 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15089                                  
 15090                                  	; 28/05/2019
 15091 00002315 50                      	push	AX			; Need to save AL for generic IOCTL
 15092 00002316 89C7                    	mov	di,ax			; di NOT a PARM
 15093 00002318 81E7FF00                	and	di,0FFh			; di = al
 15094 0000231C D1E7                    	shl	di,1			; di = index into jmp table
 15095 0000231E 58                      	pop	AX			; Restore AL for generic IOCTL
 15096                                  
 15097 0000231F 2EFFA5[E922]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15098                                  
 15099                                  ioctl_bad_funj2:
 15100 00002324 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15101                                  
 15102                                  ;--------------------------------------------------------------------------
 15103                                  ;
 15104                                  ; IOCTL: AL = 0,1
 15105                                  ;
 15106                                  ; ENTRY: DS = DOSDATA
 15107                                  ;
 15108                                  ;--------------------------------------------------------------------------
 15109                                  
 15110                                  ioctl_getset_data:
 15111                                  	; MSDOS 6.0
 15112 00002327 E87244                  	call	SFFromHandle		; ES:DI -> SFT
 15113 0000232A 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15114                                  ioctl_bad_handle:
 15115                                  	;mov	al,6
 15116 0000232C B006                    	mov	al,error_invalid_handle
 15117                                  ioctl_error:
 15118 0000232E E95CE3                  	jmp	SYS_RET_ERR
 15119                                  
 15120                                  ioctl_check_permissions:
 15121 00002331 3C00                    	CMP	AL,0
 15122                                  	;mov	al,[es:di+5]
 15123 00002333 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15124 00002337 741B                    	JZ	short ioctl_read	; read the byte
 15125                                  
 15126 00002339 08F6                    	or	dh,dh
 15127 0000233B 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15128                                  	;mov	al,0Dh
 15129 0000233D B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15130                                  	;jmp	SYS_RET_ERR
 15131 0000233F EBED                    	jmp	short ioctl_error
 15132                                  
 15133                                  ioctl_check_device:
 15134 00002341 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15135 00002343 74DF                    	jz	short ioctl_bad_funj2
 15136 00002345 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15137                                  					;   device bit!! He can muck with the
 15138                                  					;   others at will.
 15139 00002348 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15140 0000234D 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15141                                  ioctl_ok:
 15142 00002351 E930E3                  	jmp	SYS_RET_OK
 15143                                  
 15144                                  ioctl_read:
 15145 00002354 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15146 00002359 30E4                    	XOR	AH,AH
 15147 0000235B A880                    	test	AL,devid_device 	; Should I set high byte
 15148 0000235D 740D                    	JZ	short ioctl_no_high	; no
 15149 0000235F C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15150                                  	;les	di,[es:di+7]
 15151 00002364 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15152                                  	;mov	ah,[es:di+5]
 15153 00002368 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15154                                  ioctl_no_high:
 15155 0000236C 89C2                    	MOV	DX,AX
 15156                                  ioctl_set_dx:	; 16/12/2022
 15157 0000236E E859E1                  	call	Get_User_Stack
 15158                                  	;mov	[si+6],dx
 15159 00002371 895406                  	MOV	[SI+user_env.user_DX],DX
 15160                                  	;;jmp	SYS_RET_OK
 15161                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15162                                  ioctl_ok_j:
 15163                                  	; 16/12/2022
 15164 00002374 E910E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15165                                  	;jmp	short ioctl_ok
 15166                                  	; 26/07/2019
 15167                                  	;jmp	SYS_RET_OK_clc
 15168                                  
 15169                                  ;--------------------------------------------------------------------------
 15170                                  ;
 15171                                  ; IOCTL: AL = 2,3
 15172                                  ;
 15173                                  ; ENTRY: DS = DOSDATA
 15174                                  ;	 SI = user's DS
 15175                                  ;
 15176                                  ;--------------------------------------------------------------------------
 15177                                  
 15178                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15179                                  ioctl_control_string:
 15180 00002377 E82244                  	call	SFFromHandle		; ES:DI -> SFT
 15181 0000237A 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15182                                  	; 07/12/2022
 15183                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15184                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15185                                  	; MSDOS 5.0 & MSDOS 6.0
 15186 0000237C 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15187 00002381 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15188 00002383 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15189 00002388 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15190 0000238C 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15191 0000238E E94201                  	JMP	ioctl_do_string
 15192                                  
 15193                                  ;--------------------------------------------------------------------------
 15194                                  ;
 15195                                  ; IOCTL: AL = 6,7
 15196                                  ;
 15197                                  ; ENTRY: DS = DOSDATA
 15198                                  ;
 15199                                  ;--------------------------------------------------------------------------
 15200                                  
 15201                                  ioctl_status:
 15202 00002391 B401                    	MOV	AH,1
 15203 00002393 2C06                    	SUB	AL,6			; 6=0,7=1
 15204 00002395 7402                    	JZ	short ioctl_get_status
 15205 00002397 B403                    	MOV	AH,3
 15206                                  ioctl_get_status:
 15207 00002399 50                      	PUSH	AX
 15208 0000239A E87113                  	call	GET_IO_SFT
 15209 0000239D 58                      	POP	AX
 15210                                  	;JNC	short DO_IOFUNC
 15211                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15212                                  	; 16/12/2022
 15213 0000239E 728C                    	jc	short ioctl_bad_handle
 15214                                  DO_IOFUNC:
 15215 000023A0 E8E021                  	call	IOFUNC
 15216 000023A3 88C4                    	MOV	AH,AL
 15217 000023A5 B0FF                    	MOV	AL,0FFH
 15218 000023A7 7502                    	JNZ	short ioctl_status_ret
 15219 000023A9 FEC0                    	INC	AL
 15220                                  ioctl_status_ret:
 15221                                  	;jmp	SYS_RET_OK
 15222                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15223                                  	;jmp	short ioctl_ok_j
 15224                                  	; 16/12/2022
 15225 000023AB EBA4                    	jmp	short ioctl_ok
 15226                                  
 15227                                  ;--------------------------------------------------------------------------
 15228                                  ;
 15229                                  ; IOCTL: AL = B
 15230                                  ;
 15231                                  ; ENTRY: DS = DOSDATA
 15232                                  ;
 15233                                  ;--------------------------------------------------------------------------
 15234                                  
 15235                                  Set_Retry_Parameters:
 15236                                  	; 09/09/2018
 15237 000023AD 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15238 000023B1 09D2                    	OR	DX,DX			; zero retries not allowed
 15239 000023B3 7475                    	JZ	short ioctl_bad_fun
 15240 000023B5 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15241                                  doneok:
 15242                                  	;jmp	SYS_RET_OK		; Done
 15243                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15244                                  	;jmp	short ioctl_status_ret
 15245                                  	; 16/12/2022
 15246 000023B9 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15247                                  
 15248                                  ;--------------------------------------------------------------------------
 15249                                  ;
 15250                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15251                                  ;
 15252                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15253                                  ;	SI:DX -> Users Device Parameter Table
 15254                                  ;	IOCALL -> IOCTL_Req structure
 15255                                  ;
 15256                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15257                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15258                                  ;	call.
 15259                                  ;
 15260                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15261                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15262                                  ;         return address off the stack if the drive is invalid.
 15263                                  ;
 15264                                  ;--------------------------------------------------------------------------
 15265                                  
 15266                                  query_handle_support:	; Entry point for handles
 15267                                  GENERICIOCTLHANDLE:
 15268 000023BB E8DE43                  	call	SFFromHandle		; Get SFT for device.
 15269 000023BE 726F                    	jc	short ioctl_bad_handlej
 15270                                  
 15271                                  	;test	word [es:di+5],8000h
 15272                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15273                                  	;test	byte [es:di+6],80h
 15274 000023C0 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15275 000023C5 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15276                                  
 15277 000023C7 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15278                                  	;les	di,[es:di+7]
 15279 000023CC 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15280 000023D0 EB0F                    	jmp	short Do_GenIOCTL
 15281                                  
 15282                                  query_device_support:	; Entry point for devices:
 15283                                  GENERICIOCTL:
 15284 000023D2 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15285 000023D7 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15286 000023DA 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15287                                  
 15288 000023DC E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15289 000023DF 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15290                                  
 15291                                  Do_GenIOCTL:
 15292                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15293                                  					; Can device handle Generic IOCTL funcs
 15294                                  	; 09/09/2018
 15295                                  	;test	byte [es:di+4],40h
 15296 000023E1 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15297 000023E6 7442                    	jz	short ioctl_bad_fun
 15298                                  
 15299                                  	; 17/05/2019 - Retro DOS v4.0
 15300                                  
 15301                                  	; MSDOS 6.0
 15302                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15303 000023E8 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15304                                  	;cmp	al,10h
 15305 000023ED 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15306 000023EF 7C0C                    	jl	short SetIOCtlBlock
 15307                                  	
 15308                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15309                                  	;test	byte [es:di+4],80h 
 15310 000023F1 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15311 000023F6 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15312                                  	;
 15313                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15314 000023F8 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15315                                  
 15316                                  SetIOCtlBlock:
 15317 000023FD 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15318 000023FE 57                      	PUSH	DI			; in DS:SI
 15319                                  					; Setup Generic IOCTL Request Block
 15320                                  	;mov	byte [IOCALL_REQLEN],23
 15321 000023FF C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15322                                  	; 07/09/2018 (MSDOS 3.3)
 15323                                  	;;mov	byte [IOCALL_REQFUNC],19
 15324                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15325                                  	;
 15326 00002404 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15327 00002408 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15328 0000240C 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15329 00002410 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15330 00002414 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15331 00002418 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15332 0000241C 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15333                                  
 15334                                  ;hkn; IOCALL is in DOSDATA
 15335 00002420 BB[7C03]                	MOV	BX,IOCALL
 15336                                  
 15337 00002423 16                      	PUSH	SS
 15338 00002424 07                      	POP	ES
 15339                                  					; DS:SI -> Device header.
 15340 00002425 5E                      	POP	SI
 15341 00002426 1F                      	POP	DS
 15342                                  	; 10/08/2018
 15343 00002427 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15344                                  
 15345                                  ioctl_bad_fun:
 15346 0000242A B001                    	mov	al, error_invalid_function  ; 1
 15347 0000242C E95EE2                  	jmp	SYS_RET_ERR	
 15348                                  
 15349                                  ioctl_bad_handlej:
 15350 0000242F E9FAFE                  	jmp	ioctl_bad_handle
 15351                                  
 15352                                  ;---------------------------------------------------------------------------
 15353                                  ;
 15354                                  ; IOCTL: AL = 8
 15355                                  ;
 15356                                  ; ENTRY: DS = DOSDATA
 15357                                  ;
 15358                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15359                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15360                                  ;         return address off the stack if the drive is invalid.
 15361                                  ;
 15362                                  ;-------------------------------------------------------------------------
 15363                                  
 15364                                  ioctl_rem_media:
 15365                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15366 00002432 E82B01                  	CALL	Check_If_Net
 15367 00002435 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15368                                  					;   certainly don't know how to do this
 15369                                  					;   call.
 15370                                  	;test	word [es:di+4],800h
 15371                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15372                                  	;test	byte [es:di+5],8
 15373 00002437 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15374 0000243C 74EC                    	JZ	short ioctl_bad_fun		; NO
 15375                                  
 15376                                  ;hkn; SS override for IOCALL
 15377 0000243E 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15378 00002444 B00D                    	MOV	AL,REMHL  ; 13
 15379 00002446 88DC                    	MOV	AH,BL			; Unit number
 15380 00002448 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15381 0000244C 31C0                    	XOR	AX,AX
 15382 0000244E 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15383 00002452 06                      	PUSH	ES
 15384 00002453 1F                      	POP	DS
 15385 00002454 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15386 00002456 16                      	PUSH	SS
 15387 00002457 07                      	POP	ES
 15388                                  
 15389                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15390 00002458 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15391 0000245B 1E                      	push	ds
 15392 0000245C 56                      	push	si
 15393 0000245D E8FA22                  	call	DEVIOCALL2
 15394 00002460 5E                      	pop	si
 15395 00002461 1F                      	pop	ds
 15396                                  
 15397                                  ;hkn; SS override
 15398 00002462 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15399 00002466 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15400 00002469 B109                    	MOV	CL,9
 15401 0000246B D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15402                                  ioctl_da_ok_j:	; 11/11/2022
 15403 0000246D E914E2                  	jmp	SYS_RET_OK
 15404                                  
 15405                                  ;-------------------------------------------------------------------------
 15406                                  ;
 15407                                  ; IOCTL: AL = 9
 15408                                  ;
 15409                                  ; ENTRY: DS = DOSDATA
 15410                                  ;
 15411                                  ;-------------------------------------------------------------------------
 15412                                  
 15413                                  ioctl_drive_attr:
 15414                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15415 00002470 88D8                    	mov	al,bl
 15416 00002472 E84B47                  	call	GETTHISDRV
 15417 00002475 7241                    	jc	short ioctl_drv_err
 15418 00002477 E8B800                  	call	Get_Driver_BL
 15419                                  	; MSDOS 6.0
 15420 0000247A 723C                    	JC	short ioctl_drv_err	; drive not valid
 15421                                  
 15422                                  	;mov	dx,[es:di+4]
 15423 0000247C 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15424                                  					; get device attribute word
 15425 00002480 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15426                                  
 15427                                  ;hkn; SS override
 15428 00002482 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15429                                  	;test	word [es:di+43h],8000h
 15430                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15431                                  	;test	byte [es:di+44h],80h
 15432 00002487 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15433 0000248C 7403                    	JZ	short IOCTLShare
 15434                                  
 15435                                  	;or	dx,1000h ; (MSDOS 3.3)
 15436                                  
 15437                                  ;	Net devices don't return a device attribute word.
 15438                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15439                                  
 15440 0000248E BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15441                                  IOCTLShare:
 15442 00002491 16                      	push	ss
 15443 00002492 1F                      	pop	ds
 15444 00002493 BE[BE03]                	MOV	SI,OPENBUF
 15445 00002496 80C341                  	ADD	BL,"A"	; 41h
 15446 00002499 881C                    	MOV	[SI],BL
 15447 0000249B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15448 000024A0 B80003                  	MOV	AX,0300h
 15449 000024A3 F8                      	CLC
 15450                                  	;INT	int_IBM
 15451 000024A4 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15452                                  			; DS:SI -> ASCIZ disk device name 
 15453                                  			; (may be full path or only drive
 15454                                  			; specifier--must include the colon)
 15455                                  			; Return: CF clear if absolute disk access allowed
 15456 000024A6 7303                    	JNC	short IOCTLLocal	; Not shared
 15457                                  	;OR	DX,0200H		; Shared, bit 9
 15458                                  	; 17/12/2022
 15459 000024A8 80CE02                  	or	dh,02h
 15460                                  IOCTLLocal:
 15461                                  	;test	word [es:di+43h],1000h
 15462                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15463                                  	;test	byte [es:di+44h],10h
 15464 000024AB 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15465                                  	;JZ	short ioctl_set_DX
 15466                                  	; 16/12/2022
 15467 000024B0 7403                    	jz	short _ioctl_set_DX
 15468                                  	;OR	DX,8000h
 15469                                  	; 17/12/2022
 15470 000024B2 80CE80                  	or	dh,80h
 15471                                  ;ioctl_set_DX:
 15472                                  _ioctl_set_DX:
 15473                                  	; 16/12/2022
 15474 000024B5 E9B6FE                  	jmp	ioctl_set_dx
 15475                                  ; 16/12/2022
 15476                                  %if 0	
 15477                                  	call	Get_User_Stack
 15478                                  	MOV	[SI+user_env.user_DX],DX
 15479                                  	;;jmp	SYS_RET_OK
 15480                                  	;; 25/06/2019
 15481                                  	;jmp	SYS_RET_OK_clc
 15482                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15483                                  ioctl_gd_ok_j:
 15484                                  	jmp	short ioctl_da_ok_j
 15485                                  %endif
 15486                                  
 15487                                  ioctl_drv_err:
 15488 000024B8 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15489                                  ioctl_gd_err_j:	; 11/11/2022
 15490 000024BA E9D0E1                  	jmp	SYS_RET_ERR
 15491                                  
 15492                                  ;--------------------------------------------------------------------------
 15493                                  ;
 15494                                  ; IOCTL: AL = A
 15495                                  ;
 15496                                  ; ENTRY: DS = DOSDATA
 15497                                  ;
 15498                                  ;--------------------------------------------------------------------------
 15499                                  
 15500                                  ioctl_handle_redir:
 15501 000024BD E8DC42                  	call	SFFromHandle		; ES:DI -> SFT
 15502 000024C0 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15503 000024C2 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15504                                  
 15505                                  ioctl_got_sft:
 15506                                  	;mov	dx,[es:di+5]
 15507 000024C5 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15508                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15509                                  	; 16/12/2022
 15510 000024C9 EBEA                    	jmp	short _ioctl_set_DX
 15511                                  
 15512                                  	; 16/12/2022
 15513                                  ;ioctl_bad_funj:
 15514                                  	;JMP	ioctl_bad_fun
 15515                                  
 15516                                  ;--------------------------------------------------------------------------
 15517                                  ;
 15518                                  ; IOCTL: AL= 4,5
 15519                                  ;
 15520                                  ; ENTRY: DS = DOSDATA
 15521                                  ;	 SI = user's DS
 15522                                  ;
 15523                                  ;
 15524                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15525                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15526                                  ;         return address off the stack if the drive is invalid.
 15527                                  ;
 15528                                  ;-------------------------------------------------------------------------
 15529                                  
 15530                                  ioctl_get_dev:
 15531 000024CB E89200                  	CALL	Check_If_Net
 15532                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15533                                  					; certainly don't know how to do this
 15534                                  					; call.
 15535                                  	; 16/12/2022
 15536 000024CE 7403                    	jz	short ioctl_do_string
 15537                                  ioctl_bad_funj:
 15538 000024D0 E957FF                  	JMP	ioctl_bad_fun
 15539                                  
 15540                                  ioctl_do_string:
 15541                                  	;test	word [es:di+4],4000h
 15542                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15543                                  	;test	byte [es:di+5],40h
 15544 000024D3 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15545 000024D8 74F6                    	JZ	short ioctl_bad_funj		; NO
 15546                                  					; assume IOCTL read
 15547 000024DA C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15548                                  
 15549 000024DF A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15550 000024E1 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15551                                  
 15552                                  					; it is an IOCTL write
 15553 000024E3 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15554                                  
 15555                                  ioctl_control_call:
 15556 000024E8 B016                    	MOV	AL,DRDWRHL ; 22
 15557                                  ioctl_setup_pkt:
 15558 000024EA 88DC                    	MOV	AH,BL			; Unit number
 15559 000024EC A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15560 000024EF 31C0                    	XOR	AX,AX
 15561 000024F1 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15562 000024F4 A2[8903]                	MOV	[IOMED],AL
 15563 000024F7 890E[8E03]              	MOV	[IOSCNT],CX
 15564 000024FB 8916[8A03]              	MOV	[IOXAD],DX
 15565 000024FF 8936[8C03]              	MOV	[IOXAD+2],SI
 15566 00002503 06                      	PUSH	ES
 15567 00002504 1F                      	POP	DS
 15568 00002505 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15569 00002507 16                      	PUSH	SS
 15570 00002508 07                      	POP	ES
 15571                                  
 15572 00002509 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15573                                  ioctl_do_IO:
 15574 0000250C E84B22                  	call	DEVIOCALL2
 15575                                  
 15576                                  ;hkn; SS override for IOCALL
 15577                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15578                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15579                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15580 0000250F 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15581 00002515 7507                    	JNZ	short ioctl_string_err
 15582                                  
 15583                                  ;hkn; SS override
 15584 00002517 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15585                                  	; 16/12/2022
 15586 0000251B E966E1                  	jmp	SYS_RET_OK
 15587                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15588                                  	;jmp	short ioctl_gd_ok_j
 15589                                  
 15590                                  ioctl_string_err:
 15591 0000251E 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15592                                  device_err:
 15593 00002523 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15594 00002527 89F8                    	MOV	AX,DI
 15595 00002529 E8E830                  	call	SET_I24_EXTENDED_ERROR
 15596                                  
 15597                                  ;hkn; use SS override
 15598                                  ;hkn;	mov	ax,[CS:EXTERR]
 15599 0000252C 36A1[2403]              	mov	ax,[SS:EXTERR]
 15600                                  	;jmp	SYS_RET_ERR
 15601                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15602 00002530 EB88                    	jmp	short ioctl_gd_err_j
 15603                                  
 15604                                  ; 17/05/2019 - Retro DOS v4.0
 15605                                  
 15606                                  ;--------------------------------------------------------------------------
 15607                                  ; Proc name : Get_Driver_BL
 15608                                  ;
 15609                                  ;	DS is DOSDATA
 15610                                  ;	BL is drive number (0=default)
 15611                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15612                                  ;	No regs modified
 15613                                  ;
 15614                                  ;---------------------------------------------------------------------------
 15615                                  
 15616                                  Get_Driver_BL:
 15617 00002532 50                      	PUSH	AX
 15618 00002533 88D8                    	MOV	AL,BL			; Drive
 15619 00002535 E88846                  	call	GETTHISDRV
 15620 00002538 7224                    	jc	short ioctl_bad_drv
 15621 0000253A 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15622 0000253C C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15623 00002541 C43E[A205]              	LES	DI,[THISCDS]
 15624                                  	;test	word [es:di+43h],8000h
 15625                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15626                                  	;test	byte [es:di+44h],80h
 15627 00002545 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15628                                  	;les	di,[es:di+45h]
 15629 0000254A 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15630 0000254E 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15631 00002550 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15632                                  	;mov	bl,[es:di+1]
 15633 00002555 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15634                                  	;les	di,[es:di+13h]
 15635 00002559 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15636                                  got_dev_ptr:
 15637 0000255D F8                      	CLC
 15638                                  ioctl_bad_drv:
 15639 0000255E 58                      	POP	AX
 15640 0000255F C3                      	retn
 15641                                  
 15642                                  ;-------------------------------------------------------------------------
 15643                                  ; Proc Name : Check_If_Net:
 15644                                  ;
 15645                                  ;
 15646                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15647                                  ; If no device is found, the return address is popped off the stack, and a
 15648                                  ; jump is made to ioctl_drv_err.
 15649                                  ;
 15650                                  ; On Entry:
 15651                                  ; Registers same as those for Get_Driver_BL
 15652                                  ;
 15653                                  ; On Exit:
 15654                                  ; ZERO flag	- set if not a net device
 15655                                  ;		- reset if net device
 15656                                  ; ES:DI -> the device
 15657                                  ;
 15658                                  ;
 15659                                  ; BUGBUG: This function assumes the following stack setup on entry
 15660                                  ;
 15661                                  ;	  SP+2 -> Error return address
 15662                                  ;	  SP   -> Normal return address
 15663                                  ;
 15664                                  ;-------------------------------------------------------------------------
 15665                                  
 15666                                  Check_If_Net:
 15667                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15668 00002560 E8CFFF                  	CALL	Get_Driver_BL
 15669 00002563 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15670 00002565 06                      	PUSH	ES
 15671 00002566 57                      	PUSH	DI
 15672 00002567 C43E[A205]              	LES	DI,[THISCDS]
 15673                                  	;test	word [es:di+43h],8000h
 15674                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15675                                  	;test	byte [es:di+44h],80h
 15676 0000256B 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15677 00002570 5F                      	POP	DI
 15678 00002571 07                      	POP	ES
 15679 00002572 C3                      	retn
 15680                                  
 15681                                  ioctl_drv_err_pop:
 15682 00002573 58                      	pop	ax			; pop off return address
 15683 00002574 E941FF                  	jmp	ioctl_drv_err
 15684                                  
 15685                                  ioctl_bad_funj3:
 15686 00002577 E9B0FE                  	jmp	ioctl_bad_fun
 15687                                  
 15688                                  ioctl_string_errj:
 15689 0000257A EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15690                                  
 15691                                  ;--------------------------------------------------------------------------
 15692                                  ;
 15693                                  ; IOCTL: AL = E, F
 15694                                  ;
 15695                                  ; ENTRY: DS = DOSDATA
 15696                                  ;
 15697                                  ;
 15698                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15699                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15700                                  ;         return address off the stack if the drive is invalid.
 15701                                  ;
 15702                                  ;--------------------------------------------------------------------------
 15703                                  
 15704                                  ioctl_drive_owner:
 15705                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15706 0000257C E8E1FF                  	Call	Check_If_Net
 15707 0000257F 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15708                                  					;   certainly don't know how to do this
 15709                                  					;   call.
 15710                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15711                                  	; 09/09/2018
 15712                                  	;test	byte [es:di+4],40h
 15713 00002581 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15714 00002586 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15715                                  	;mov	byte [IOCALL_REQFUNC],23
 15716 00002588 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15717 0000258D 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15718 0000258F 7405                    	jz	short GetOwner
 15719                                  SetOwner:
 15720 00002591 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15721                                  GetOwner:
 15722 00002596 B00D                    	MOV	AL,OWNHL ; 13
 15723 00002598 88DC                    	MOV	AH,BL			; Unit number
 15724 0000259A A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15725 0000259D 31C0                    	XOR	AX,AX
 15726 0000259F A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15727 000025A2 06                      	PUSH	ES
 15728 000025A3 1F                      	POP	DS
 15729 000025A4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15730 000025A6 16                      	PUSH	SS
 15731 000025A7 07                      	POP	ES
 15732 000025A8 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15733 000025AB 1E                      	push	ds
 15734 000025AC 56                      	push	si
 15735 000025AD E8AA21                  	call	DEVIOCALL2
 15736 000025B0 5E                      	pop	si
 15737 000025B1 1F                      	pop	ds
 15738                                  ;hkn; SS override
 15739                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15740                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15741 000025B2 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15742 000025B8 75C0                    	jnz	short ioctl_string_errj
 15743 000025BA 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15744                                  					; owner returned is 1-based.
 15745 000025BE E9C3E0                  	jmp	SYS_RET_OK
 15746                                  
 15747                                  ;============================================================================
 15748                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15749                                  ;============================================================================
 15750                                  ; 07/08/2018 - Retro DOS v3.0
 15751                                  ; 17/05/2019 - Retro DOS v4.0
 15752                                  
 15753                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15754                                  ;	NAME	DOS_DELETE
 15755                                  
 15756                                  ;
 15757                                  ;	Microsoft Confidential
 15758                                  ;	Copyright (C) Microsoft Corporation 1991
 15759                                  ;	All Rights Reserved.
 15760                                  ;
 15761                                  
 15762                                  ;**	DELETE.ASM - Low level routine for deleting files
 15763                                  ;----------------------------------------------------------------------------
 15764                                  ;		DOS_DELETE
 15765                                  ;		REN_DEL_Check
 15766                                  ;		FastOpen_Delete	       ; DOS 3.3
 15767                                  ;		FastOpen_Update	       ; DOS 3.3
 15768                                  
 15769                                  ;   Revision history:
 15770                                  ;
 15771                                  ;   A000  version 4.00	Jan. 1988
 15772                                  ;   A001  Fastopen Rename fix	April 1989
 15773                                  
 15774                                  ;Installed = TRUE
 15775                                  
 15776                                  ;	i_need	NoSetDir,BYTE
 15777                                  ;	i_need	Creating,BYTE
 15778                                  ;	i_need	DELALL,BYTE
 15779                                  ;	i_need	THISDPB,DWORD
 15780                                  ;	i_need	THISSFT,DWORD
 15781                                  ;	i_need	THISCDS,DWORD
 15782                                  ;	i_need	CURBUF,DWORD
 15783                                  ;	i_need	ATTRIB,BYTE
 15784                                  ;	i_need	SATTRIB,BYTE
 15785                                  ;	i_need	WFP_START,WORD
 15786                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15787                                  ;	i_need	NAME1,BYTE			 ;BN001
 15788                                  ;	i_need	FoundDel,BYTE
 15789                                  ;	i_need	AUXSTACK,BYTE
 15790                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15791                                  ;	i_need	JShare,DWORD
 15792                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15793                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15794                                  ;
 15795                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15796                                  ;
 15797                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15798                                  ;	i_need	DMAADD,DWORD
 15799                                  ;	i_need	RENAMEDMA,BYTE
 15800                                  
 15801                                  ;----------------------------------------------------------------------------
 15802                                  ;
 15803                                  ; Procedure Name : DOS_DELETE
 15804                                  ;
 15805                                  ; Inputs:
 15806                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15807                                  ;		terminated)
 15808                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15809                                  ;		( = -1 if current dir not involved, else
 15810                                  ;		 Points to first char after last "/" of current dir part)
 15811                                  ;	[THISCDS] Points to CDS being used
 15812                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15813                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15814                                  ; Function:
 15815                                  ;	Delete the specified file(s)
 15816                                  ; Outputs:
 15817                                  ;	CARRY CLEAR
 15818                                  ;		OK
 15819                                  ;	CARRY SET
 15820                                  ;	    AX is error code
 15821                                  ;		error_file_not_found
 15822                                  ;			Last element of path not found
 15823                                  ;		error_path_not_found
 15824                                  ;			Bad path (not in curr dir part if present)
 15825                                  ;		error_bad_curr_dir
 15826                                  ;			Bad path in current directory part of path
 15827                                  ;		error_access_denied
 15828                                  ;			Attempt to delete device or directory
 15829                                  ;		***error_sharing_violation***
 15830                                  ;			Deny both access required, generates an INT 24.
 15831                                  ;			This error is NOT returned. The INT 24H is generated,
 15832                                  ;			  and the file is ignored (not deleted). Delete will
 15833                                  ;			  simply continue on looking for more files.
 15834                                  ;			  Carry will NOT be set in this case.
 15835                                  ; DS preserved, others destroyed
 15836                                  ;
 15837                                  ;----------------------------------------------------------------------------
 15838                                  
 15839                                  FILEFOUND   equ 01h
 15840                                  FILEDELETED equ 10h
 15841                                  
 15842                                  
 15843                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15844                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15845                                  
 15846                                  DOS_DELETE:
 15847                                  
 15848                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15849                                  ;hkn; appropriately at this point.
 15850                                  
 15851 000025C1 E8FCEC                  	call	TestNet
 15852 000025C4 7306                    	JNC	short LOCAL_DELETE
 15853                                  
 15854                                  ;IF NOT Installed
 15855                                  ;	transfer NET_DELETE
 15856                                  ;ELSE
 15857                                  	;MOV	AX,(MultNET SHL 8) | 19
 15858                                  	;INT	2FH
 15859                                  	;return
 15860                                  
 15861 000025C6 B81311                  	mov	ax,1113h
 15862 000025C9 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15863                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15864                                  			;		fully-qualified filename in DOS CS
 15865                                  			; SDA CDS pointer -> current directory structure for drive with file
 15866                                  			; Return: CF set on error
 15867 000025CB C3                      	retn
 15868                                  ;ENDIF
 15869                                  
 15870                                  LOCAL_DELETE:
 15871 000025CC C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15872 000025D1 E8B1ED                  	call	ECritDisk
 15873                                  	;mov	word [CREATING],0E500h
 15874 000025D4 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15875 000025DA 8B36[B205]              	MOV	SI,[WFP_START]
 15876                                  SKPNUL:
 15877 000025DE AC                      	LODSB
 15878 000025DF 08C0                    	OR	AL,AL
 15879 000025E1 75FB                    	JNZ	short SKPNUL		; go to end
 15880 000025E3 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15881 000025E6 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15882 000025EA 7506                    	JNZ	short TEST_QUEST
 15883 000025EC 807C022A                	CMP	BYTE [SI+2],"*"
 15884 000025F0 741F                    	JZ	short CHECK_ATTS
 15885                                  TEST_QUEST:
 15886 000025F2 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15887 000025F5 87FE                    	XCHG	DI,SI
 15888                                  
 15889 000025F7 16                      	push	ss
 15890                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15891 000025F8 07                      	pop	es ; 17/05/2019
 15892                                  
 15893 000025F9 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15894 000025FC B90400                  	MOV	CX,4		; four sets of "??"
 15895 000025FF F3AF                    	REPE	SCASW
 15896 00002601 751C                    	JNZ	short NOT_ALL
 15897 00002603 87FE                    	XCHG	DI,SI
 15898 00002605 AD                      	LODSW
 15899 00002606 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15900 00002609 7514                    	JNZ	short NOT_ALL
 15901 0000260B AD                      	LODSW
 15902 0000260C 3D3F3F                  	CMP	AX,"??"
 15903 0000260F 750E                    	JNZ	short NOT_ALL
 15904                                  CHECK_ATTS:
 15905 00002611 A0[6D05]                	MOV	AL,[SATTRIB]
 15906                                  	;and	al,1Fh
 15907 00002614 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15908                                  					; Look only at hidden bits
 15909                                  	;cmp	al,1Fh
 15910 00002616 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15911                                  					; All must be set
 15912 00002618 7505                    	JNZ	short NOT_ALL
 15913                                  
 15914                                  ; NOTE WARNING DANGER-----
 15915                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15916                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15917                                  
 15918 0000261A C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15919                                  NOT_ALL:
 15920 0000261F C606[4C03]01            	MOV	byte [NoSetDir],1
 15921 00002624 E8D719                  	call	GetPathNoSet
 15922 00002627 7312                    	JNC	short Del_found
 15923 00002629 750B                    	JNZ	short _bad_path
 15924 0000262B 08C9                    	OR	CL,CL
 15925 0000262D 7407                    	JZ	short _bad_path
 15926                                  No_file:
 15927 0000262F B80200                  	MOV	AX,error_file_not_found
 15928                                  ErrorReturn:
 15929 00002632 F9                      	STC
 15930                                  	;call	LCritDisk
 15931                                  	;retn
 15932                                  	; 18/12/2022
 15933 00002633 E96AED                  	jmp	LCritDisk
 15934                                  
 15935                                  _bad_path:
 15936 00002636 B80300                  	MOV	AX,error_path_not_found
 15937 00002639 EBF7                    	JMP	short ErrorReturn
 15938                                  
 15939                                  Del_found:
 15940 0000263B 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15941 0000263D 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15942 00002642 7405                    	JZ	short NOT_DIR
 15943                                  Del_access_err:
 15944 00002644 B80500                  	MOV	AX,error_access_denied
 15945 00002647 EBE9                    	JMP	short ErrorReturn
 15946                                  
 15947                                  NOT_DIR:
 15948 00002649 08E4                    	OR	AH,AH			; Check if device name
 15949 0000264B 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15950                                  
 15951                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15952                                  
 15953                                  DELFILE:
 15954 0000264D 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15955                                  
 15956                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15957                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15958                                  
 15959 00002652 1E                      	PUSH	DS
 15960 00002653 8A26[7F05]              	MOV	AH,[DELALL]
 15961 00002657 C53E[E205]              	LDS	DI,[CURBUF]
 15962                                  	
 15963                                  ;hkn; SS override
 15964 0000265B 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15965 00002661 7509                    	JNZ	short DoDelete		; yes
 15966                                  
 15967 00002663 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15968 00002667 7403                    	JZ	short DoDelete		; not read only
 15969                                  
 15970 00002669 1F                      	POP	DS
 15971 0000266A EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15972                                  
 15973                                  DoDelete:
 15974 0000266C E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15975 0000266F 7303                    	JNC	short DEL_SHARE_OK
 15976 00002671 1F                      	POP	DS
 15977 00002672 EB2A                    	JMP	SHORT DELNXT		; Skip it
 15978                                  
 15979                                  DEL_SHARE_OK:
 15980                                  	; 17/05/2019 - Retro DOS v4.0
 15981                                  	; MSDOS 6.0
 15982                                  	;test	byte [di+5],40h
 15983 00002674 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15984                                  					;LB. if already dirty		  ;AN000;
 15985 00002678 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15986 0000267A E8FD35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15987                                  	;or	byte [di+5],40h
 15988 0000267D 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15989                                  yesdirty:
 15990 00002681 8827                    	mov	[bx],ah 
 15991                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 15992 00002683 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 15993 00002685 1F                      	POP	DS
 15994 00002686 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 15995                                  
 15996 0000268B 83FB02                  	CMP	BX,2
 15997 0000268E 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 15998                                  	;cmp	bx,[es:bp+0Dh]
 15999 00002690 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16000 00002694 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16001                                  
 16002 00002696 E83529                  	call	RELEASE 		; Free file data
 16003 00002699 7252                    	JC	short No_fileJ
 16004                                  
 16005                                  ; DOS 3.3  FastOpen
 16006                                  
 16007 0000269B E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16008                                  
 16009                                  ; DOS 3.3  FastOpen
 16010                                  
 16011                                  DELNXT:
 16012 0000269E C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16013 000026A2 E8C218                  	call	GETENTRY		; Registers need to be reset
 16014 000026A5 7246                    	JC	short No_fileJ
 16015 000026A7 E8F617                  	call	NEXTENT
 16016 000026AA 73A1                    	JNC	short DELFILE
 16017 000026AC C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16018                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16019                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16020                                  	;;mov	al,[es:bp+0]
 16021                                  	; 15/12/2022
 16022 000026B0 268A4600                	MOV	AL,[ES:BP]
 16023 000026B4 E8BB34                  	call	FLUSHBUF
 16024 000026B7 7234                    	JC	short No_fileJ
 16025                                  ;
 16026                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16027                                  ;
 16028                                  ;   not found not deleted		file not found
 16029                                  ;   not found	  deleted		*** impossible ***
 16030                                  ;	found not deleted		access denied (read-only)
 16031                                  ;	found	  deleted		no error
 16032                                  ;
 16033 000026B9 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16034 000026BE 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16035                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16036                                  ; and to force the DOS to issue a media check.
 16037 000026C0 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16038 000026C5 741C                    	jz	short No_Set_Flag
 16039 000026C7 50                      	PUSH	AX
 16040 000026C8 06                      	PUSH	ES
 16041 000026C9 57                      	PUSH	DI
 16042 000026CA C43E[A205]              	LES	DI,[THISCDS]
 16043 000026CE 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16044 000026D1 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16045 000026D4 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16046                                  	
 16047                                  	; MSDOS 6.0
 16048 000026D8 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16049 000026DA E8DE04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16050                                  	 
 16051 000026DD E82431                  	call	FATREAD_CDS		; force media check
 16052 000026E0 5F                      	POP	DI
 16053 000026E1 07                      	POP	ES
 16054 000026E2 58                      	POP	AX
 16055                                  No_Set_Flag:
 16056                                  	;call	LCritDisk		; carry is clear
 16057                                  	;retn
 16058                                  	; 18/12/2022
 16059 000026E3 E9BAEC                  	jmp	LCritDisk
 16060                                  DelError:
 16061 000026E6 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16062 000026EB 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16063                                  No_fileJ:
 16064 000026ED E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16065                                  Del_access_errJ:
 16066 000026F0 E951FF                  	JMP	Del_access_err ; 10/08/2018
 16067                                  
 16068                                  ; 08/08/2018 - Retro DOS v3.0
 16069                                  
 16070                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16071                                  ;---------------------------------------------------------------------------
 16072                                  ; Procedure Name : REN_DEL_Check
 16073                                  ;
 16074                                  ; Inputs:
 16075                                  ;	[THISDPB] set
 16076                                  ;	[CURBUF+2]:BX points to entry
 16077                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16078                                  ;	[WFP_Start] points to name
 16079                                  ; Function:
 16080                                  ;	Check for Exclusive access on given file.
 16081                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16082                                  ; Outputs:
 16083                                  ;	ES:BP = [THISDPB]
 16084                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16085                                  ;		last element will be loaded from the directory entry.  This is
 16086                                  ;		so the name given to the sharer doesn't have any meta chars in
 16087                                  ;		it.
 16088                                  ;	Carry set if sharing violation, INT 24H generated
 16089                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16090                                  ;		This is because input AX is preserved.
 16091                                  ;		Caller must set the error if needed.
 16092                                  ;	Carry clear
 16093                                  ;		OK
 16094                                  ; AX,DS,BX,SI,DI preserved
 16095                                  ;---------------------------------------------------------------------------
 16096                                  
 16097                                  REN_DEL_Check:
 16098                                  
 16099 000026F3 1E                      	PUSH	DS
 16100 000026F4 57                      	PUSH	DI
 16101 000026F5 50                      	PUSH	AX
 16102 000026F6 53                      	PUSH	BX
 16103 000026F7 56                      	PUSH	SI		; Save CURBUF pointers
 16104                                  	
 16105 000026F8 16                      	push	ss
 16106 000026F9 07                      	pop	es
 16107                                  
 16108                                  ;hkn; context ES will assume ES to DOSDATA
 16109                                  ;hkn; ASSUME	ES:DOSGROUP
 16110                                  
 16111                                  ;hkn; SS override
 16112 000026FA 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16113 000026FF 89DE                    	MOV	SI,BX
 16114                                  
 16115                                  ;hkn; SS override
 16116 00002701 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16117 00002706 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16118 00002708 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16119 0000270B E852EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16120 0000270E 49                      	DEC	CX		; Don't include nul in count
 16121 0000270F 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16122 00002711 E86A47                  	call	SkipBack	; Back up one element
 16123 00002714 47                      	INC	DI		; Point to start of last element
 16124                                  
 16125                                  	; 17/05/2019 - Retro DOS v4.0
 16126                                  ;hkn; SS override
 16127                                  	; MSDOS 6.0
 16128 00002715 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16129                                  	;
 16130 0000271A E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16131 0000271D 5E                      	POP	SI		; Get back entry pointers
 16132 0000271E 5B                      	POP	BX
 16133 0000271F 53                      	PUSH	BX
 16134 00002720 56                      	PUSH	SI		; Back on stack
 16135                                  	
 16136 00002721 16                      	push	ss
 16137 00002722 1F                      	pop	ds
 16138                                  
 16139                                  ;hkn; context DS will assume ES to DOSDATA
 16140                                  ;hkn; ASSUME	DS:DOSGROUP
 16141                                  
 16142                                  ; Close the file if possible by us.
 16143                                  ;
 16144                                  ;if installed
 16145 00002723 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16146                                  ;else
 16147                                  ;	Call	ShCloseFile
 16148                                  ;endif
 16149 00002727 8C1E[A005]              	MOV	[THISSFT+2],DS
 16150                                  
 16151                                  ;hkn; AUXSTACK is in DOSDATA
 16152 0000272B C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16153                                  				; Scratch space
 16154 00002731 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16155 00002733 E81425                  	call	DOOPEN		; Fill in SFT for share check
 16156 00002736 C43E[9E05]              	LES	DI,[THISSFT]
 16157                                  	;mov	word [es:di+2],10h
 16158 0000273A 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16159                                  				; requires exclusive access
 16160                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16161 00002740 26C7050100              	mov	word [ES:DI],1
 16162 00002745 E85B4D                  	call	ShareEnter
 16163 00002748 720D                    	jc	short CheckDone
 16164 0000274A C43E[9E05]              	LES	DI,[THISSFT]
 16165                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16166 0000274E 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16167                                  	
 16168 00002753 E8484D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16169 00002756 F8                      	CLC
 16170                                  CheckDone:
 16171 00002757 C42E[8A05]              	LES	BP,[THISDPB]
 16172 0000275B 5E                      	POP	SI
 16173 0000275C 5B                      	POP	BX
 16174 0000275D 58                      	POP	AX
 16175 0000275E 5F                      	POP	DI
 16176 0000275F 1F                      	POP	DS
 16177 00002760 C3                      	retn
 16178                                  
 16179                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16180                                  ;---------------------------------------------------------------------------
 16181                                  ; Procedure Name : FastOpen_Delete
 16182                                  ; Inputs:
 16183                                  ;	None
 16184                                  ; Function:
 16185                                  ;	Call FastOpen to delete the dir info.
 16186                                  ; Outputs:
 16187                                  ;	None
 16188                                  ;---------------------------------------------------------------------------
 16189                                  
 16190                                  FastOpen_Delete:
 16191 00002761 9C                      	PUSHF			; save flag
 16192 00002762 56                      	PUSH	SI		; save registers
 16193 00002763 53                      	PUSH	BX
 16194 00002764 50                      	PUSH	AX
 16195                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16196                                  ;hkn; SS override
 16197                                  	; 17/05/2019 - Retro DOS v4.0
 16198                                  	; MSDOS 6.0
 16199 00002765 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16200                                  	
 16201 0000276A B003                    	MOV	AL,FONC_delete	; al = 3
 16202                                  fastinvoke:
 16203                                  ;hkn; FastTable is in DOSDATA
 16204 0000276C BB[320D]                	MOV	BX,FastTable+2
 16205 0000276F FF1F                    	CALL	far [BX]	; call fastopen
 16206 00002771 58                      	POP	AX		; restore registers
 16207 00002772 5B                      	POP	BX
 16208 00002773 5E                      	POP	SI
 16209 00002774 9D                      	POPF			; restore flag
 16210 00002775 C3                      	retn
 16211                                  
 16212                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16213                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16214                                  
 16215                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16216                                  ;---------------------------------------------------------------------------
 16217                                  ; PROCEDURE Name : FastOpen_Rename
 16218                                  ;
 16219                                  ; Inputs:
 16220                                  ;	 REN_WFP   = Path Name
 16221                                  ;	 NAME1	   = New Name
 16222                                  ; Function:
 16223                                  ;	Call FastOpen to rename the dir entry in the cache
 16224                                  ; Outputs:
 16225                                  ;	None
 16226                                  ;---------------------------------------------------------------------------
 16227                                  
 16228                                  FastOpen_Rename:
 16229                                  	; 17/05/2019 - Retro DOS v4.0
 16230                                  	; 08/08/2018 - Retro DOS v3.0
 16231                                  	; MSDOS 6.0
 16232 00002776 9C                      	PUSHF			;AN001 save flag
 16233 00002777 56                      	PUSH	SI		;AN001 save registers
 16234 00002778 57                      	PUSH	DI		;AN001
 16235 00002779 53                      	PUSH	BX		;AN001
 16236 0000277A 50                      	PUSH	AX		;AN001
 16237                                  	;
 16238                                  ;hkn; SS override
 16239 0000277B 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16240                                  
 16241                                  ;hkn; NAME1 is in DOSDATA
 16242 00002780 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16243                                  	;mov	al,6
 16244 00002783 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16245                                  	
 16246                                  ;hkn; FastTable is in DOSDATA
 16247 00002785 BB[320D]                	MOV	BX,FastTable+2
 16248 00002788 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16249                                  	
 16250 0000278A 58                      	POP	AX		; restore registers  ;AN001
 16251 0000278B 5B                      	POP	BX				     ;AN001
 16252 0000278C 5F                      	POP	DI				     ;AN001
 16253 0000278D 5E                      	POP	SI				     ;AN001
 16254 0000278E 9D                      	POPF			; restore flag	     ;AN001
 16255 0000278F C3                      	retn					     ;AN001
 16256                                  
 16257                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16258                                  ;---------------------------------------------------------------------------
 16259                                  ; Procedure Name : FastOpen_Update
 16260                                  ;
 16261                                  ; Inputs:
 16262                                  ;	DL     drive number (A=0,B=1,,,)
 16263                                  ;	CX     first cluster #
 16264                                  ;	AH     0 updates dir entry
 16265                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16266                                  ;	ES:DI  directory entry
 16267                                  ; Function:
 16268                                  ;	Call FastOpen to update the dir info.
 16269                                  ; Outputs:
 16270                                  ;	None
 16271                                  ;---------------------------------------------------------------------------
 16272                                  
 16273                                  FastOpen_Update:
 16274 00002790 9C                      	PUSHF			; save flag
 16275 00002791 56                      	PUSH	SI
 16276 00002792 53                      	PUSH	BX		; save regs
 16277 00002793 50                      	PUSH	AX
 16278 00002794 B004                    	MOV	AL,FONC_update	; al = 4
 16279 00002796 EBD4                    	JMP	short fastinvoke
 16280                                  
 16281                                  	; 17/05/2019
 16282                                  
 16283                                  	; MSDOS 6.0
 16284                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16285                                  ;---------------------------------------------------------------------------
 16286                                  Fast_Dispatch:
 16287                                  ;hkn; FastTable is in DOSDATA
 16288 00002798 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16289                                  ;hkn; use SS override
 16290 0000279B 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16291 0000279E C3                      	retn
 16292                                  
 16293                                  ;============================================================================
 16294                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16295                                  ;============================================================================
 16296                                  ; 08/08/2018 - Retro DOS v3.0
 16297                                  ; 17/05/2019 - Retro DOS v4.0
 16298                                  
 16299                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16300                                  ;	NAME	DOS_RENAME
 16301                                  
 16302                                  ;**	Low level routine for renaming files
 16303                                  ;----------------------------------------------------------------------------
 16304                                  ;	DOS_RENAME
 16305                                  ;
 16306                                  ;	Modification history:
 16307                                  ;
 16308                                  ;	    Created: ARR 30 March 1983
 16309                                  
 16310                                  ;----------------------------------------------------------------------------
 16311                                  ;
 16312                                  ; Procedure Name : DOS_RENAME
 16313                                  ;
 16314                                  ; Inputs:
 16315                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16316                                  ;		chars, NUL terminated)
 16317                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16318                                  ;		( = -1 if current dir not involved, else
 16319                                  ;		 Points to first char after last "/" of current dir part)
 16320                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16321                                  ;		chars, NUL terminated)
 16322                                  ;	[THISCDS] Points to CDS being used
 16323                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16324                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16325                                  ; Function:
 16326                                  ;	Rename the specified file(s)
 16327                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16328                                  ; Outputs:
 16329                                  ;	CARRY CLEAR
 16330                                  ;	    OK
 16331                                  ;	CARRY SET
 16332                                  ;	    AX is error code
 16333                                  ;		error_file_not_found
 16334                                  ;			No match for source, or dest path invalid
 16335                                  ;		error_not_same_device
 16336                                  ;			Source and dest are on different devices
 16337                                  ;		error_access_denied
 16338                                  ;			Directory specified (not simple rename),
 16339                                  ;			Device name given, Destination exists.
 16340                                  ;			NOTE: In third case some renames may have
 16341                                  ;			 been done if metas.
 16342                                  ;		error_path_not_found
 16343                                  ;			Bad path (not in curr dir part if present)
 16344                                  ;			SOURCE ONLY
 16345                                  ;		error_bad_curr_dir
 16346                                  ;			Bad path in current directory part of path
 16347                                  ;			SOURCE ONLY
 16348                                  ;		error_sharing_violation
 16349                                  ;			Deny both access required, generates an INT 24.
 16350                                  ; DS preserved, others destroyed
 16351                                  ;
 16352                                  ;----------------------------------------------------------------------------
 16353                                  
 16354                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16355                                  
 16356                                  DOS_RENAME:
 16357                                  
 16358                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16359                                  ;hkn; at this point to DOSDATA.
 16360                                  
 16361 0000279F E81EEB                  	call	TestNet
 16362 000027A2 7306                    	JNC	short LOCAL_RENAME
 16363                                  
 16364                                  ;IF NOT Installed
 16365                                  ;	transfer NET_RENAME
 16366                                  ;ELSE
 16367                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16368                                  	;INT	2FH
 16369                                  	;return
 16370                                  
 16371 000027A4 B81111                  	mov     ax, 1111h
 16372 000027A7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16373                                  			; SS = DS = DOS CS, 
 16374                                  			; SDA first filename pointer = offset of fully-qualified old name
 16375                                  			; SDA CDS pointer -> current directory
 16376                                  			; Return: CF set on error
 16377 000027A9 C3                      	retn
 16378                                  ;ENDIF
 16379                                  
 16380                                  LOCAL_RENAME:
 16381 000027AA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16382 000027AF 8B36[B205]              	MOV	SI,[WFP_START]
 16383 000027B3 8B3E[B405]              	MOV	DI,[REN_WFP]
 16384 000027B7 8A04                    	MOV	AL,[SI]
 16385 000027B9 8A25                    	MOV	AH,[DI]
 16386 000027BB 0D2020                  	OR	AX,2020H		; Lower case
 16387 000027BE 38E0                    	CMP	AL,AH
 16388 000027C0 7405                    	JZ	short SAMEDRV
 16389 000027C2 B81100                  	MOV	AX,error_not_same_device ; 11h
 16390 000027C5 F9                      	STC
 16391 000027C6 C3                      	retn
 16392                                  
 16393                                  SAMEDRV:
 16394 000027C7 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16395 000027CB FF36[2C03]              	PUSH	WORD [DMAADD]
 16396 000027CF 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16397                                  
 16398                                  ;hkn; RENAMEDMA is in DOSDATA
 16399 000027D3 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16400 000027D9 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16401 000027DE E8A4EB                  	call	ECritDisk
 16402 000027E1 E8FA05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16403                                  					;    points to entry
 16404 000027E4 7314                    	JNC	short Check_Dev
 16405 000027E6 83F812                  	CMP	AX,error_no_more_files ; 12h
 16406 000027E9 7503                    	JNZ	short GOTERR
 16407 000027EB B80200                  	MOV	AX,error_file_not_found ; 2
 16408                                  GOTERR:
 16409 000027EE F9                      	STC
 16410                                  RENAME_POP:
 16411 000027EF 8F06[2C03]              	POP	WORD [DMAADD]
 16412 000027F3 8F06[2E03]              	POP	WORD [DMAADD+2]
 16413                                  	;call	LCritDisk
 16414                                  	;retn
 16415                                  	; 16/12/2022
 16416 000027F7 E9A6EB                  	jmp	LCritDisk
 16417                                  
 16418                                  Check_Dev:
 16419                                  	; 17/05/2019 - Retro DOS v4.0
 16420                                  	;mov	ax,5
 16421 000027FA B80500                  	MOV	AX,error_access_denied	; Assume error
 16422                                  	
 16423                                  	; MSDOS 6.0
 16424 000027FD 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16425 000027FE C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16426                                  	;add	si,21
 16427 00002802 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16428                                  	;test	byte [si+11],10h
 16429 00002805 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16430 00002809 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16431 0000280B 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16432 0000280F E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16433                                  notdir:
 16434 00002812 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16435 00002813 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16436                                  
 16437                                  	; MSDOS 3.3 & MSDOS 6.0
 16438 00002815 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16439 0000281A 75D2                    	JNZ	short GOTERR
 16440                                  
 16441                                  ; At this point a source has been found. There is search continuation info (a
 16442                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16443                                  ; directory entry found.
 16444                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16445                                  ; throughout the RENAME since it is known at this point that the source and
 16446                                  ; destination are both on the same device.
 16447                                  ; [SATTRIB] is also set.
 16448                                  
 16449 0000281C 89DE                    	MOV	SI,BX
 16450                                  	;add	si,26
 16451 0000281E 83C61A                  	ADD	SI,dir_entry.dir_first
 16452 00002821 E8CFFE                  	call	REN_DEL_Check
 16453 00002824 7305                    	JNC	short REN_OK1
 16454 00002826 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16455 00002829 EBC4                    	JMP	short RENAME_POP
 16456                                  
 16457                                  ;------------------------------------------------------------------------------
 16458                                  ; Check if the source is a file or directory. If file, delete the entry
 16459                                  ; from the Fastopen cache. If directory, rename it later
 16460                                  ;------------------------------------------------------------------------------
 16461                                  
 16462                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16463                                  	; MSDOS 6.0
 16464 0000282B 56                      	PUSH	SI
 16465 0000282C C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16466                                  	;add	si,21
 16467 00002830 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16468                                  	;test	byte [si+11],10h
 16469 00002833 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16470 00002837 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16471 00002839 5E                      	POP	SI			;BN00X
 16472 0000283A EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16473                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16474 0000283C 5E                      	POP	SI
 16475                                  
 16476                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16477 0000283D E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16478                                  SWAP_SOURCE:
 16479                                  	; MSDOS 3.3
 16480                                  	;MOV	SI,[REN_WFP]
 16481                                  	;MOV	[WFP_START],SI
 16482                                  	; MSDOS 6.0
 16483 00002840 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16484 00002843 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16485 00002847 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16486 0000284B A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16487                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16488 0000284E C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16489                                  	;mov	word [CREATING],0E5FFh
 16490 00002854 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16491                                  					; A rename is like a CREATE_NEW as far
 16492                                  					; as the destination is concerned.
 16493 0000285A E8A117                  	call	GetPathNoSet
 16494                                  
 16495                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16496                                  ;   since no files match the destination name. If it fails for any other
 16497                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16498                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16499                                  ;   if the rename should fail because we haven't built an explicit name by
 16500                                  ;   substituting for the meta chars in it. In this case the destination file
 16501                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16502                                  ;   in the directory entry part.
 16503                                  	
 16504 0000285D 7223                    	JC	short NODEST
 16505                                  	
 16506                                  	; MSDOS 6.0
 16507                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16508                                  	; !! MSDOS 3.3 !!
 16509                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16510                                  
 16511 0000285F 08E4                    	OR	AH,AH			; Device?
 16512 00002861 792C                    	JNS	short SAVEDEST		; No, continue
 16513                                  BAD_ACC:
 16514 00002863 B80500                  	MOV	AX,error_access_denied
 16515 00002866 F9                      	STC
 16516                                  RENAME_CLEAN:
 16517 00002867 9C                      	PUSHF				; Save carry state
 16518 00002868 50                      	PUSH	AX			; and error code (if carry set)
 16519 00002869 A0[7605]                	MOV	AL,[THISDRV]
 16520 0000286C E80333                  	call	FLUSHBUF
 16521 0000286F 58                      	POP	AX
 16522 00002870 803E[4A03]00            	CMP	byte [FAILERR],0
 16523 00002875 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16524 00002877 9D                      	POPF
 16525 00002878 E974FF                  	JMP	RENAME_POP
 16526                                  
 16527                                  BAD_ERR:
 16528 0000287B 58                      	POP	AX			; Saved flags
 16529                                  	; 16/12/202
 16530                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16531                                  BAD_PATH: ; *
 16532 0000287C B80300                  	MOV	AX,error_path_not_found
 16533 0000287F E96CFF                  	JMP	GOTERR
 16534                                  
 16535                                  NODEST:
 16536 00002882 75F8                    	JNZ	short BAD_PATH
 16537 00002884 803E[4A03]00            	CMP	byte [FAILERR],0
 16538 00002889 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16539                                  					; because user FAILed on I 24
 16540                                  	; 14/11/2022
 16541 0000288B 08C9                    	OR	CL,CL
 16542                                  	;JNZ	short SAVEDEST
 16543                                  	; 17/05/2019
 16544 0000288D 74ED                    	jz	short BAD_PATH ; *
 16545                                  ;BAD_PATH: ; *
 16546                                  ;	MOV	AX,error_path_not_found
 16547                                  ;	;STC
 16548                                  ;	;JMP	RENAME_POP
 16549                                  ;	; 17/05/2019
 16550                                  ;	jmp	GOTERR 
 16551                                  
 16552                                  ; 16/12/2022
 16553                                  %if 0
 16554                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16555                                  	or	cl,cl
 16556                                  	jnz	short SAVEDEST
 16557                                  	;jz	short BAD_PATH ; *
 16558                                  BAD_PATH: ; *
 16559                                  	;mov	ax,3
 16560                                  	mov	ax,error_path_not_found
 16561                                  	stc
 16562                                  	jmp	RENAME_POP
 16563                                  %endif
 16564                                  
 16565                                  SAVEDEST:
 16566 0000288F 16                      	push	ss
 16567 00002890 07                      	pop	es
 16568                                  
 16569                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16570 00002891 BF[5705]                	MOV	DI,NAME2
 16571 00002894 BE[4B05]                	MOV	SI,NAME1
 16572                                  
 16573 00002897 B90B00                  	MOV	CX,11
 16574 0000289A F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16575 0000289C A1[C205]                	MOV	AX,[DIRSTART]
 16576 0000289F A3[6405]                	MOV	[DESTSTART],AX
 16577                                  BUILDDEST:
 16578 000028A2 16                      	push	ss
 16579 000028A3 07                      	pop	es			; needed due to JMP BUILDDEST below
 16580                                  
 16581                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16582 000028A4 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16583 000028A7 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16584 000028AA BE[5705]                	MOV	SI,NAME2		; Raw dest
 16585                                  
 16586 000028AD B90B00                  	MOV	CX,11
 16587                                  
 16588                                  	; 17/05/2019 - Retro DOS v4.0
 16589                                  	
 16590                                  	; MSDOS 6.0
 16591 000028B0 E81401                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16592                                  
 16593                                  	; MSDOS 3.3
 16594                                  
 16595                                  ; 08/08/2018 - Retro DOS v3.0
 16596                                  ; MSDOS 6.0 
 16597                                  ;---------------------------------------------------------------------------
 16598                                  ;Procedure: NEW_RENAME
 16599                                  ;
 16600                                  ;Input: DS:SI -> raw string with ?
 16601                                  ;	ES:DI -> destination string
 16602                                  ;	DS:BX -> source string
 16603                                  ;Function: replace ? chars of raw string with chars in source string and
 16604                                  ;	   put in destination string
 16605                                  ;Output: ES:DI-> new string
 16606                                  ;---------------------------------------------------------------------------
 16607                                  ;
 16608                                  ;NEW_RENAME:
 16609                                  ;NEWNAM:
 16610                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16611                                  ;	LODSB
 16612                                  ;	CMP	AL,"?"
 16613                                  ;	JNZ	short NOCHG
 16614                                  ;	MOV	AL,[BX] 		; Get replace char
 16615                                  ;NOCHG:
 16616                                  ;	STOSB
 16617                                  ;	INC	BX			; Next replace char
 16618                                  ;	LOOP	NEWNAM
 16619                                  ;	; MSDOS 6.0
 16620                                  ;	;retn
 16621                                  
 16622                                  	; MSDOS 3.3 & MSDOS 6.0
 16623                                  	;mov	byte [ATTRIB],16h
 16624 000028B3 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16625 000028B8 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16626 000028BD E8FB19                  	call	DEVNAME 		; Check if we built a device name
 16627 000028C0 73A1                    	JNC	short BAD_ACC
 16628 000028C2 8B1E[6405]              	MOV	BX,[DESTSTART]
 16629 000028C6 C42E[8A05]              	LES	BP,[THISDPB]
 16630 000028CA E8CB16                  	call	SETDIRSRCH		; Reset search to start of dir
 16631 000028CD 7294                    	JC	short BAD_ACC 		; Screw up
 16632 000028CF E87D15                  	call	FINDENTRY		; See if new name already exists
 16633 000028D2 738F                    	JNC	short BAD_ACC 		; Error if found
 16634 000028D4 803E[4A03]00            	CMP	byte [FAILERR],0
 16635 000028D9 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16636 000028DB A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16637 000028DE 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16638 000028E2 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16639                                  
 16640                                  	;mov	al,[RENAMEDMA+32]
 16641 000028E4 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16642 000028E7 A810                    	TEST	AL,attr_directory ; 10h
 16643 000028E9 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16644                                  					; otherwise the . and .. entries get
 16645                                  					; wiped.
 16646 000028EB A2[6B05]                	MOV	[ATTRIB],AL
 16647 000028EE 8C1E[A005]              	MOV	[THISSFT+2],DS
 16648                                  
 16649                                  ;hkn; AUXSTACK is in DOSDATA
 16650                                  	;mov	si,[RENAMEDMA+145h]
 16651 000028F2 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16652 000028F5 8936[9E05]              	MOV	[THISSFT],SI
 16653                                  	;mov	word [SI+2],2
 16654 000028F9 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16655 000028FE 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16656 00002900 E8AE21                  	call	RENAME_MAKE		; This is in mknode
 16657 00002903 7303                    	JNC	short GOT_DEST
 16658                                  BAD_ACCJ:
 16659 00002905 E95BFF                  	JMP	BAD_ACC
 16660                                  
 16661                                  GOT_DEST:
 16662 00002908 53                      	push	bx
 16663 00002909 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16664 0000290D E88E4B                  	call	ShareEnd		; we need to remove it.
 16665 00002910 5B                      	pop	bx
 16666                                  
 16667                                  ; A zero length entry with the correct new name has now been made at
 16668                                  ;   [CURBUF+2]:BX.
 16669                                  
 16670 00002911 C43E[E205]              	LES	DI,[CURBUF]
 16671                                  
 16672                                  	; MSDOS 6.0
 16673                                  	;test	byte [es:di+5],40h
 16674 00002915 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16675                                  					;LB. if already dirty		  ;AN000;
 16676 0000291A 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16677 0000291C E85B33                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16678                                  	;or	byte [es:di+5],40h
 16679 0000291F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16680                                  yesdirty1:
 16681 00002924 89DF                    	MOV	DI,BX
 16682                                  	;add	di,11
 16683 00002926 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16684                                  
 16685                                  ;hkn; RENAMEDMA is in DOSDATA
 16686                                  	;mov	si,[RENAMEDMA+32]
 16687 00002929 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16688                                  	;mov	cx,21
 16689 0000292C B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16690 0000292F F3A4                    	REP	MOVSB
 16691 00002931 E87D00                  	CALL	GET_SOURCE
 16692 00002934 7277                    	JC	short RENAME_OVER
 16693 00002936 89DF                    	MOV	DI,BX
 16694 00002938 8E06[E405]              	MOV	ES,[CURBUF+2]
 16695 0000293C B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16696 0000293E AA                      	STOSB				; "free" the source
 16697 0000293F EB13                    	JMP	SHORT DIRTY_IT
 16698                                  
 16699                                  SIMPLE_RENAME:
 16700 00002941 E86D00                  	CALL	GET_SOURCE		; Get the source back
 16701 00002944 7267                    	JC	short RENAME_OVER
 16702 00002946 89DF                    	MOV	DI,BX
 16703 00002948 8E06[E405]              	MOV	ES,[CURBUF+2]
 16704                                  
 16705                                  ;hkn; NAME1 is in DOSDATA
 16706 0000294C BE[4B05]                	MOV	SI,NAME1		; New Name
 16707 0000294F B90B00                  	MOV	CX,11
 16708 00002952 F3A4                    	REP	MOVSB
 16709                                  DIRTY_IT:
 16710 00002954 8B3E[E205]              	MOV	DI,[CURBUF]
 16711                                  
 16712                                  	; MSDOS 6.0
 16713 00002958 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16714                                  					;LB. if already dirty		  ;AN000;
 16715 0000295D 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16716 0000295F E81833                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16717                                  	
 16718 00002962 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16719                                  
 16720                                  ;------------------------------------------------------------------------------
 16721                                  ; Check if the source is a directory of file. If directory rename it to the
 16722                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16723                                  ; previously deleted.
 16724                                  ;------------------------------------------------------------------------------
 16725                                  
 16726                                  yesdirty2:
 16727                                  	; MSDOS 6.0
 16728 00002967 56                      	PUSH	SI
 16729 00002968 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16730 0000296C 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16731 0000296F F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16732 00002973 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16733 00002975 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16734 00002978 5E                      	POP	SI
 16735 00002979 EB01                    	JMP	SHORT NOT_DIRTY1
 16736                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16737 0000297B 5E                      	POP	SI
 16738                                  NOT_DIRTY1:				;;BN00X
 16739                                  NEXT_SOURCE:
 16740                                  ;hkn; RENAMEDMA is in DOSDATA
 16741 0000297C BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16742                                  
 16743                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16744                                  ; to enter it before going to RENAME_Next.
 16745                                  
 16746 0000297F E803EA                  	call	ECritDisk
 16747 00002982 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16748                                  				  ;  to FF when we made the prev new file).
 16749 00002987 E88C05                  	call	RENAME_NEXT
 16750                                  
 16751                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16752                                  ; we were before.
 16753                                  
 16754 0000298A 7221                    	JC	short RENAME_OVER
 16755                                  
 16756                                  	;lea	si,[bx+26]
 16757 0000298C 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16758 0000298F E861FD                  	call	REN_DEL_Check
 16759 00002992 7306                    	JNC	short REN_OK2
 16760 00002994 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16761 00002997 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16762                                  
 16763                                  ;------------------------------------------------------------------------------
 16764                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16765                                  ; if directory, rename directory name in the Fastopen cache.
 16766                                  ;-----------------------------------------------------------------------------
 16767                                  
 16768                                  REN_OK2:
 16769                                  	; MSDOS 6.0
 16770                                  	;mov	al,[RERNAMEDMA+32]
 16771 0000299A A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16772                                  	;test	al,10h
 16773 0000299D A810                    	TEST	AL,attr_directory	;;BN00X directory
 16774 0000299F 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16775                                  	
 16776                                  	; MSDOS 3.3 & MSDOS 6.0
 16777 000029A1 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16778 000029A4 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16779                                  
 16780                                  	; MSDOS 6.0
 16781                                  Ren_Directory:
 16782 000029A7 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16783 000029AA E9F5FE                  	JMP	BUILDDEST
 16784                                  
 16785                                  RENAME_OVER:
 16786 000029AD F8                      	CLC
 16787 000029AE E9B6FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16788                                  
 16789                                  ;----------------------------------------------------------------------------
 16790                                  ; Procedure: GET_SOURCE
 16791                                  ;
 16792                                  ; Inputs:
 16793                                  ;	RENAMEDMA has source info
 16794                                  ; Function:
 16795                                  ;	Re-find the source
 16796                                  ; Output:
 16797                                  ;	[CURBUF] set
 16798                                  ;	[CURBUF+2]:BX points to entry
 16799                                  ;	Carry set if error (currently user FAILed to I 24)
 16800                                  ; DS preserved, others destroyed
 16801                                  ;----------------------------------------------------------------------------
 16802                                  
 16803                                  GET_SOURCE:
 16804 000029B1 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16805 000029B5 C42E[8A05]              	LES	BP,[THISDPB]
 16806 000029B9 E8DC15                  	call	SETDIRSRCH
 16807 000029BC 7214                    	JC	short gs_ret_label	; retc
 16808 000029BE E8D918                  	call	STARTSRCH
 16809 000029C1 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16810                                  	;call	GETENT
 16811                                  	; 18/12/2022
 16812 000029C4 E9A315                  	jmp	GETENT
 16813                                  ;gs_ret_label:
 16814                                  	;retn
 16815                                  
 16816                                  ; MSDOS 6.0 
 16817                                  ;---------------------------------------------------------------------------
 16818                                  ;Procedure: NEW_RENAME
 16819                                  ;
 16820                                  ;Input: DS:SI -> raw string with ?
 16821                                  ;	ES:DI -> destination string
 16822                                  ;	DS:BX -> source string
 16823                                  ;Function: replace ? chars of raw string with chars in source string and
 16824                                  ;	   put in destination string
 16825                                  ;Output: ES:DI-> new string
 16826                                  ;---------------------------------------------------------------------------
 16827                                  
 16828                                  NEW_RENAME:
 16829                                  	; 17/05/2019 - Retro DOS v4.0
 16830                                  NEWNAM:
 16831                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16832 000029C7 AC                      	LODSB
 16833 000029C8 3C3F                    	CMP	AL,"?" ; 3Fh
 16834 000029CA 7502                    	JNZ	short NOCHG
 16835 000029CC 8A07                    	MOV	AL,[BX] 		; Get replace char
 16836                                  NOCHG:
 16837 000029CE AA                      	STOSB
 16838 000029CF 43                      	INC	BX			; Next replace char
 16839 000029D0 E2F5                    	LOOP	NEWNAM
 16840                                  	; MSDOS 6.0
 16841                                  gs_ret_label:	; 18/12/2022
 16842 000029D2 C3                      	retn
 16843                                  
 16844                                  ;============================================================================
 16845                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16846                                  ;============================================================================
 16847                                  ; 08/08/2018 - Retro DOS v3.0
 16848                                  ; 17/05/2019 - Retro DOS v4.0
 16849                                  
 16850                                  ;**	Low level routines for returning file information and setting file
 16851                                  ;	attributes
 16852                                  ;
 16853                                  ;	GET_FILE_INFO
 16854                                  ;	SET_FILE_ATTRIBUTE
 16855                                  ;
 16856                                  ;	Modification history:
 16857                                  ;
 16858                                  ;	    Created: ARR 30 March 1983
 16859                                  ;
 16860                                  ;	M025: Return access_denied if attempting to set
 16861                                  ;	      attribute of root directory.
 16862                                  ;
 16863                                  
 16864                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16865                                  
 16866                                  ;---------------------------------------------------------------------------
 16867                                  ; Procedure Name : GET_FILE_INFO
 16868                                  ;
 16869                                  ; Inputs:
 16870                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16871                                  ;		terminated)
 16872                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16873                                  ;		( = -1 if current dir not involved, else
 16874                                  ;		 Points to first char after last "/" of current dir part)
 16875                                  ;	[THISCDS] Points to CDS being used
 16876                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16877                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16878                                  ; Function:
 16879                                  ;	Get Information about a file
 16880                                  ; Returns:
 16881                                  ;	CARRY CLEAR
 16882                                  ;	    AX = Attribute of file
 16883                                  ;	    CX = Time stamp of file
 16884                                  ;	    DX = Date stamp of file
 16885                                  ;	    BX:DI = Size of file (32 bit)
 16886                                  ;	CARRY SET
 16887                                  ;	    AX is error code
 16888                                  ;		error_file_not_found
 16889                                  ;			Last element of path not found
 16890                                  ;		error_path_not_found
 16891                                  ;			Bad path (not in curr dir part if present)
 16892                                  ;		error_bad_curr_dir
 16893                                  ;			Bad path in current directory part of path
 16894                                  ; DS preserved, others destroyed
 16895                                  ;---------------------------------------------------------------------------
 16896                                  
 16897                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16898                                  
 16899                                  GET_FILE_INFO:
 16900                                  
 16901                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16902                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16903                                  
 16904 000029D3 E8EAE8                  	call	TestNet
 16905 000029D6 7306                    	JNC	short LOCAL_INFO
 16906                                  
 16907                                  ;IF NOT Installed
 16908                                  ;	transfer NET_GET_FILE_INFO
 16909                                  ;ELSE
 16910                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16911                                  ;	INT	2FH
 16912                                  ;	return
 16913                                  
 16914 000029D8 B80F11                  	mov     ax, 110Fh
 16915 000029DB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16916                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16917                                  			; SDA CDS pointer -> current directory
 16918                                  			; Return: CF set on error, AX = file attributes
 16919 000029DD C3                      	retn
 16920                                  ;ENDIF
 16921                                  
 16922                                  LOCAL_INFO:
 16923 000029DE E8A4E9                  	call	ECritDisk
 16924 000029E1 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16925                                  	; MSDOS 3.3
 16926                                  	;call	GETPATH
 16927                                  	; MSDOS 6.0
 16928 000029E6 E8D800                  	call	GET_FAST_PATH
 16929                                  	; MSDOS 3.3 & MSDOS 6.0
 16930 000029E9 7312                    	JNC	short info_check_dev
 16931                                  NO_PATH:
 16932 000029EB 750B                    	JNZ	short bad_path1
 16933 000029ED 08C9                    	OR	CL,CL
 16934 000029EF 7407                    	JZ	short bad_path1
 16935                                  info_no_file:
 16936 000029F1 B80200                  	MOV	AX,error_file_not_found
 16937                                  BadRet:
 16938 000029F4 F9                      	STC
 16939                                  JustRet:
 16940                                  	;call	LCritDisk
 16941                                  	;retn
 16942                                  	; 18/12/2022
 16943 000029F5 E9A8E9                  	jmp	LCritDisk
 16944                                  
 16945                                  bad_path1:
 16946 000029F8 B80300                  	MOV	AX,error_path_not_found
 16947 000029FB EBF7                    	jmp	short BadRet
 16948                                  
 16949                                  info_check_dev:
 16950 000029FD 08E4                    	OR	AH,AH
 16951 000029FF 78F0                    	JS	short info_no_file	; device
 16952                                  
 16953                                  	; MSDOS 6.0
 16954                                  ;SR;
 16955                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16956                                  ;for a root dir
 16957                                  
 16958 00002A01 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16959 00002A06 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16960                                  
 16961 00002A08 30E4                    	xor	ah,ah
 16962 00002A0A B010                    	mov	al,attr_directory ; 10h
 16963                                  	;clc
 16964                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16965                                  	; (DOSCODE:683Eh)
 16966                                  	; 16/12/2022
 16967                                  	;clc
 16968 00002A0C EBE7                    	jmp	short JustRet
 16969                                  
 16970                                  not_root:
 16971                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16972 00002A0E 1E                      	PUSH	DS
 16973 00002A0F 8E1E[E405]              	MOV	DS,[CURBUF+2]
 16974 00002A13 89DE                    	MOV	SI,BX
 16975 00002A15 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16976 00002A17 89DF                    	MOV	DI,BX
 16977                                  	;mov	cx,[si+16h]
 16978 00002A19 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16979                                  	;mov	dx,[si+18h]
 16980 00002A1C 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16981 00002A1F 30E4                    	XOR	AH,AH
 16982                                  	;mov	al,[si+0Bh]
 16983 00002A21 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16984                                  	;test	al,10h
 16985 00002A24 A810                    	TEST	AL,attr_directory
 16986 00002A26 7506                    	JNZ	short NO_SIZE
 16987                                  	;mov	di,[si+1Ch]
 16988 00002A28 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 16989                                  	;mov	bx,[si+1Eh]
 16990 00002A2B 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 16991                                  NO_SIZE:
 16992 00002A2E 1F                      	POP	DS
 16993                                  	;CLC
 16994                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16995                                  	; (DOSCODE:6864h)
 16996                                  	; 16/12/2022
 16997                                  	;clc
 16998 00002A2F EBC4                    	jmp	short JustRet
 16999                                  
 17000                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17001                                  ;-------------------------------------------------------------------------------
 17002                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17003                                  ; Inputs:
 17004                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17005                                  ;		terminated)
 17006                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17007                                  ;		( = -1 if current dir not involved, else
 17008                                  ;		 Points to first char after last "/" of current dir part)
 17009                                  ;	[THISCDS] Points to CDS being used
 17010                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17011                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17012                                  ;	AX is new attributes to give to file
 17013                                  ; Function:
 17014                                  ;	Set File Attributes
 17015                                  ; Returns:
 17016                                  ;	CARRY CLEAR
 17017                                  ;	    No error
 17018                                  ;	CARRY SET
 17019                                  ;	    AX is error code
 17020                                  ;		error_file_not_found
 17021                                  ;			Last element of path not found
 17022                                  ;		error_path_not_found
 17023                                  ;			Bad path (not in curr dir part if present)
 17024                                  ;		error_bad_curr_dir
 17025                                  ;			Bad path in current directory part of path
 17026                                  ;		error_access_denied
 17027                                  ;			Attempt to set an attribute which cannot be set
 17028                                  ;			(attr_directory, attr_volume_ID)
 17029                                  ;		error_sharing_violation
 17030                                  ;			Sharing mode of file did not allow the change
 17031                                  ;			(this request requires exclusive write/read access)
 17032                                  ;			(INT 24H generated)
 17033                                  ; DS preserved, others destroyed
 17034                                  ;----------------------------------------------------------------------------
 17035                                  
 17036                                  SET_FILE_ATTRIBUTE:
 17037                                  
 17038                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17039                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17040                                  
 17041 00002A31 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17042 00002A34 7414                    	JZ	short set_look
 17043                                  _BAD_ACC:
 17044 00002A36 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17045 00002A3B C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17046 00002A40 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17047 00002A45 B80500                  	MOV	AX,error_access_denied ; 5
 17048 00002A48 F9                      	STC
 17049 00002A49 C3                      	retn
 17050                                  
 17051                                  set_look:
 17052 00002A4A E873E8                  	call	TestNet
 17053 00002A4D 7308                    	JNC	short LOCAL_SET
 17054                                  
 17055                                  ;IF NOT Installed
 17056                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17057                                  ;ELSE
 17058 00002A4F 50                      	PUSH	AX
 17059                                  	
 17060                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17061                                  	;INT	2FH
 17062                                  
 17063 00002A50 B80E11                  	mov     ax, 110Eh
 17064 00002A53 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17065                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17066                                  			; SDA CDS pointer -> current directory
 17067                                  			; STACK: WORD new file attributes
 17068                                  			; Return: CF set on error
 17069                                  
 17070 00002A55 5B                      	POP	BX			; clean stack
 17071 00002A56 C3                      	retn
 17072                                  ;ENDIF
 17073                                  
 17074                                  LOCAL_SET:
 17075 00002A57 E82BE9                  	call	ECritDisk
 17076 00002A5A 50                      	PUSH	AX			; Save new attributes
 17077 00002A5B C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17078 00002A60 E89515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17079 00002A63 7303                    	JNC	short set_check_device
 17080 00002A65 5B                      	POP	BX			; Clean stack (don't zap AX)
 17081 00002A66 EB83                    	JMP	short NO_PATH
 17082                                  
 17083                                  set_check_device:
 17084 00002A68 08E4                    	OR	AH,AH
 17085 00002A6A 7906                    	JNS	short set_check_share
 17086 00002A6C 58                      	POP	AX
 17087 00002A6D E830E9                  	call	LCritDisk
 17088 00002A70 EBC4                    	JMP	short _BAD_ACC 		; device
 17089                                  
 17090                                  set_check_share:
 17091 00002A72 58                      	POP	AX			; Get new attributes
 17092                                  
 17093                                  	; MSDOS 6.0
 17094 00002A73 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17095 00002A78 740A                    	je	short cannot_set_root	; M025: Y: return error
 17096                                  
 17097                                  	; MSDOS 3.3 & MSDOS 6.0
 17098 00002A7A E876FC                  	call	REN_DEL_Check
 17099 00002A7D 730B                    	JNC	short set_do
 17100 00002A7F B82000                  	MOV	AX,error_sharing_violation ; 32
 17101 00002A82 EB3A                    	jmp	short OK_BYE
 17102                                  
 17103                                  	; MSDOS 6.0
 17104                                  cannot_set_root:			; M025:
 17105 00002A84 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17106 00002A87 F9                      	stc				; M025: to set attr. of root
 17107 00002A88 EB34                    	jmp	short OK_BYE		; M025:
 17108                                  
 17109                                  set_do:
 17110                                  	; MSDOS 3.3 & MSDOS 6.0
 17111 00002A8A C43E[E205]              	LES	DI,[CURBUF]
 17112 00002A8E 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17113 00002A93 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17114                                  
 17115                                  	; MSDOS 6.0
 17116 00002A97 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17117                                  					;LB. if already dirty		  ;AN000;
 17118 00002A9C 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17119 00002A9E E8D931                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17120                                  	
 17121 00002AA1 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17122                                  yesdirty3:
 17123 00002AA6 A0[7605]                	MOV	AL,[THISDRV]
 17124                                  ;;;; 10/1/86 F.C update fastopen cache
 17125 00002AA9 52                      	PUSH	DX
 17126 00002AAA 57                      	PUSH	DI
 17127 00002AAB B400                    	MOV	AH,0		  ; dir entry update
 17128 00002AAD 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17129 00002AAF 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17130 00002AB1 E8DCFC                  	call	FastOpen_Update
 17131 00002AB4 5F                      	POP	DI
 17132 00002AB5 5A                      	POP	DX
 17133                                  ;;;; 9/11/86 F.C update fastopen cache
 17134 00002AB6 E8B930                  	call	FLUSHBUF
 17135 00002AB9 7303                    	JNC	short OK_BYE
 17136 00002ABB B80200                  	MOV	AX,error_file_not_found
 17137                                  OK_BYE:
 17138                                  	;call	LCritDisk
 17139                                  	;retn
 17140                                  	; 16/12/2022
 17141 00002ABE E9DFE8                  	jmp	LCritDisk
 17142                                  
 17143                                  	; 17/05/2019 - Retro DOS v4.0
 17144                                  
 17145                                  	; MSDOS 6.0
 17146                                  GET_FAST_PATH:
 17147                                  ;hkn; use SS override for FastOpenFlg
 17148 00002AC1 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17149                                  					;FO. trigger fastopen	;AN000;
 17150 00002AC7 E82E15                  	call	GETPATH
 17151 00002ACA 9C                      	PUSHF			 	;FO.			;AN000;
 17152 00002ACB 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17153                                  					;FO. clear all fastopen flags ;AN000;
 17154 00002AD1 9D                      	POPF				;FO.			;AN000;
 17155 00002AD2 C3                      	retn
 17156                                  
 17157                                  ;============================================================================
 17158                                  ; DUP.ASM, MSDOS 6.0, 1991
 17159                                  ;============================================================================
 17160                                  ; 08/08/2018 - Retro DOS v3.0
 17161                                  ; 17/05/2019 - Retro DOS v4.0
 17162                                  
 17163                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17164                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17165                                  ;
 17166                                  ;	DOS_DUP
 17167                                  ;
 17168                                  ;	Modification history:
 17169                                  ;
 17170                                  ;	  Created: ARR 30 March 1983
 17171                                  
 17172                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17173                                  ;---------------------------------------------------------------------------
 17174                                  ; Procedure Name : DOS_DUP
 17175                                  ;
 17176                                  ; Inputs:
 17177                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17178                                  ;		(a non net SFT is OK, in this case the ref
 17179                                  ;		 count is simply incremented)
 17180                                  ; Function:
 17181                                  ;	Signal to the devices that a logical open is occurring
 17182                                  ; Returns:
 17183                                  ;	ES:DI point to SFT
 17184                                  ;    Carry clear
 17185                                  ;	SFT ref_count is incremented
 17186                                  ; Registers modified: None.
 17187                                  ; NOTE:
 17188                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17189                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17190                                  ;	that time.
 17191                                  ;---------------------------------------------------------------------------
 17192                                  
 17193                                  DOS_DUP:
 17194                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17195                                  
 17196                                  	; MSDOS 6.0
 17197 00002AD3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17198 00002AD8 26C43E[9E05]            	les	di,[es:THISSFT]
 17199                                  
 17200                                  	;Entry	Dos_Dup_Direct
 17201                                  DOS_Dup_Direct:
 17202 00002ADD E8F9E7                  	call	IsSFTNet
 17203 00002AE0 7503                    	JNZ	short DO_INC
 17204 00002AE2 E8F11B                  	call	DEV_OPEN_SFT
 17205                                  DO_INC:
 17206                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17207 00002AE5 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17208                                  					;   we're in big trouble anyway)
 17209 00002AE8 C3                      	retn
 17210                                  
 17211                                  ;============================================================================
 17212                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17213                                  ;============================================================================
 17214                                  ; 08/08/2018 - Retro DOS v3.0
 17215                                  ; 18/05/2019 - Retro DOS v4.0
 17216                                  
 17217                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17218                                  ;NAME	DOS_CREATE
 17219                                  ;----------------------------------------------------------------------------
 17220                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17221                                  ;
 17222                                  ;	DOS_CREATE
 17223                                  ;	DOS_CREATE_NEW
 17224                                  ;	SET_MKND_ERR
 17225                                  ;	SET_Media_ID
 17226                                  ;	SET_EXT_Mode
 17227                                  ;
 17228                                  ;	Revision history:
 17229                                  ;
 17230                                  ;	    A000 version 4.00	  Jan. 1988
 17231                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17232                                  
 17233                                  ;Installed = TRUE
 17234                                  
 17235                                  ;	i_need	THISSFT,DWORD
 17236                                  ;	i_need	THISCDS,DWORD
 17237                                  ;	I_need	EXTERR,WORD
 17238                                  ;	I_Need	ExtErr_locus,BYTE
 17239                                  ;	I_need	JShare,DWORD
 17240                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17241                                  ;	I_need	SATTRIB,BYTE
 17242                                  ;	I_need	CALLVIDM,DWORD
 17243                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17244                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17245                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17246                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17247                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17248                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17249                                  
 17250                                  ;***	DOS_CREATE - Create a File
 17251                                  ;----------------------------------------------------------------------------
 17252                                  ;	DOS_Create is called to create the specified file, truncating
 17253                                  ;	the old one if it exists.
 17254                                  ;
 17255                                  ;	ENTRY	AX is Attribute to create
 17256                                  ;		(ds) = DOSDATA
 17257                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17258                                  ;			terminated)
 17259                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17260                                  ;			( = -1 if current dir not involved, else
 17261                                  ;			 Points to first char after last "/" of current dir part)
 17262                                  ;		[THISCDS] Points to CDS being used
 17263                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17264                                  ;		[THISSFT] Points to SFT to fill in if file created
 17265                                  ;			(sf_mode field set so that FCB may be detected)
 17266                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17267                                  ;
 17268                                  ;	EXIT	sf_ref_count is NOT altered
 17269                                  ;		CARRY CLEAR
 17270                                  ;		    THISSFT filled in.
 17271                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17272                                  ;		CARRY SET
 17273                                  ;		    AX is error code
 17274                                  ;			error_path_not_found
 17275                                  ;				Bad path (not in curr dir part if present)
 17276                                  ;			error_bad_curr_dir
 17277                                  ;				Bad path in current directory part of path
 17278                                  ;			error_access_denied
 17279                                  ;				Attempt to re-create read only file , or
 17280                                  ;				create a second volume id or create a dir
 17281                                  ;			error_sharing_violation
 17282                                  ;				The sharing mode was correct but not allowed
 17283                                  ;				generates an INT 24
 17284                                  ;	USES	all but DS
 17285                                  ;----------------------------------------------------------------------------
 17286                                  
 17287                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17288                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17289                                  
 17290                                  DOS_CREATE:
 17291                                  	; 18/05/2019 - Retro DOS v4.0
 17292                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17293                                  
 17294                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17295                                  ;hkn; this point.
 17296                                  
 17297 00002AE9 30E4                    	XOR	AH,AH		; Truncate is OK
 17298                                  
 17299                                  ;	Enter here from Dos_Create_New
 17300                                  ;
 17301                                  ;	(ah) = 0 iff truncate OK
 17302                                  
 17303                                  Create_inter:
 17304 00002AEB A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17305                                  				; Mask out any meaningless bits
 17306 00002AED 7511                    	JNZ	short AttErr
 17307 00002AEF A808                    	TEST	AL,attr_volume_id
 17308 00002AF1 7407                    	JZ	short NoReset
 17309                                  	
 17310                                  	; MSDOS 6.0
 17311                                  	; 16/12/2022
 17312 00002AF3 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17313                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17314                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17315                                  	
 17316 00002AF8 B008                    	MOV	AL,attr_volume_id ; 8
 17317                                  NoReset:
 17318 00002AFA 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17319 00002AFC A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17320 00002AFE 740A                    	JZ	short ATT_OK
 17321                                  AttErr:
 17322 00002B00 B80500                  	MOV	AX,5		; Attribute problem
 17323 00002B03 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17324 00002B08 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17325                                  				   ;	attr_device to be set.
 17326                                  ATT_OK:
 17327 00002B0A C43E[9E05]              	LES	DI,[THISSFT]
 17328 00002B0E 06                      	PUSH	ES
 17329 00002B0F C436[A205]              	LES	SI,[THISCDS]
 17330 00002B13 83FEFF                  	CMP	SI,-1
 17331 00002B16 751D                    	JNE	short TEST_RE_NET
 17332                                  
 17333                                  ;	No CDS, it must be redirected.
 17334                                  
 17335 00002B18 07                      	POP	ES
 17336                                  
 17337                                  	; MSDOS 6.0
 17338                                  ;Extended open hooks
 17339                                  	;test	byte [EXTOPEN_ON],1
 17340 00002B19 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17341 00002B1E 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17342                                  IFS_extopen:				    ;AN000;EO.
 17343 00002B20 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17344                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17345 00002B21 B82E11                  	mov	ax,112Eh
 17346 00002B24 CD2F                    	INT	2FH			    ;AN000;EO.
 17347 00002B26 5B                      	POP	BX			    ;AN000;EO. trash bx
 17348 00002B27 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17349 00002B2C C3                      	retn				    ;AN000;EO.
 17350                                  NOEXTOP:				    ;AN000;
 17351                                  ;Extended open hooks
 17352                                  
 17353                                  ;IF NOT Installed
 17354                                  ;	transfer NET_SEQ_CREATE
 17355                                  ;ELSE
 17356 00002B2D 50                      	PUSH	AX
 17357                                  
 17358                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17359                                  	;INT	2FH
 17360                                  
 17361 00002B2E B81811                  	mov     ax,1118h
 17362 00002B31 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17363                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17364                                  			; SDA first filename pointer -> fully-qualified name of file
 17365                                  			; STACK: WORD file creation mode???
 17366                                  
 17367 00002B33 5B                      	POP	BX			; BX is trashed anyway
 17368 00002B34 C3                      	retn
 17369                                  ;ENDIF
 17370                                  
 17371                                  ;	We have a CDS. See if it's network
 17372                                  
 17373                                  TEST_RE_NET:
 17374                                  	;;test	word [es:si+43h],8000h
 17375                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17376                                  	; 07/12/2022
 17377                                  	;test	byte [es:si+44h],80h
 17378                                  	; 17/12/2022
 17379 00002B35 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17380 00002B3A 07                      	POP	ES
 17381 00002B3B 7419                    	JZ	short LOCAL_CREATE
 17382                                  
 17383                                  	; MSDOS 6.0
 17384 00002B3D E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17385 00002B40 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17386                                  	;;or	word [es:di+2],2
 17387                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17388                                  	; 17/12/2022
 17389 00002B42 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17390                                  
 17391                                  ;Extended open hooks
 17392                                  dochk:
 17393 00002B47 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17394 00002B4C 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17395                                  ;Extended open hooks
 17396                                  
 17397                                  ;IF NOT Installed
 17398                                  ;	transfer NET_CREATE
 17399                                  ;ELSE
 17400 00002B4E 50                      	PUSH	AX
 17401                                  	
 17402                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17403                                  	;INT	2FH
 17404                                  	
 17405 00002B4F B81711                  	mov     ax,1117h
 17406 00002B52 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17407                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17408                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17409                                  			; SDA CDS pointer -> current directory
 17410                                  			; Return: CF set on error
 17411                                  
 17412 00002B54 5B                      	POP	BX			; BX is trashed anyway
 17413                                  ;nomore:
 17414 00002B55 C3                      	retn
 17415                                  ;ENDIF
 17416                                  
 17417                                  ;**	It's a local create. We have a local CDS for it.
 17418                                  
 17419                                  LOCAL_CREATE:
 17420                                  	; MSDOS 6.0
 17421 00002B56 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17422 00002B59 7205                    	JC	short setdone	;AN000;EO.
 17423                                  	
 17424                                  	; MSDOS 3.3 & MSDOS 6.0
 17425                                  	; 17/12/2022
 17426                                  	;;or	word [es:di+2],2
 17427                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17428                                  	;or	byte [es:di+2],2
 17429 00002B5B 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17430                                  setdone:
 17431 00002B60 E822E8                  	call	ECritDisk
 17432 00002B63 E8251F                  	call	MakeNode
 17433 00002B66 7317                    	JNC	short Create_ok
 17434 00002B68 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17435 00002B6D E830E8                  	call	LCritDisk
 17436                                  
 17437                                  	;entry	SET_MKND_ERR
 17438                                  SET_MKND_ERR:
 17439                                  
 17440                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17441                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17442                                  
 17443                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17444 00002B70 BB[772B]                	MOV     BX,CRTERRTAB
 17445                                  	;XLAT  ; MSDOS 3.3
 17446                                  	; 18/05/2019 - Retro DOS v4.0
 17447 00002B73 2E                      	CS
 17448 00002B74 D7                      	XLAT
 17449                                  CreatBadRet:
 17450 00002B75 F9                      	STC
 17451 00002B76 C3                      	retn
 17452                                  
 17453                                  ; 13/05/2019 - Retro DOS v4.0
 17454                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17455                                  ; ---------------------------------------------------------------------------
 17456                                  
 17457                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17458                                  
 17459                                  ; 17/07/2018 - Retro DOS v3.0
 17460                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17461                                  
 17462                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17463                                  ;	db	0,5,52h,50h,3,5,20h
 17464                                  
 17465                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17466                                  ;	db	0,5,52h,50h,3,5,20h,2
 17467                                  
 17468                                  ; 08/08/2018
 17469                                  
 17470                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17471 00002B77 00                      	DB	0			; none
 17472 00002B78 05                      	DB	error_access_denied	; MakeNode error 1
 17473 00002B79 52                      	DB	error_cannot_make	; MakeNode error 2
 17474 00002B7A 50                      	DB	error_file_exists	; MakeNode error 3
 17475 00002B7B 03                      	DB	error_path_not_found	; MakeNode error 4
 17476 00002B7C 05                      	DB	error_access_denied	; MakeNode error 5
 17477 00002B7D 20                      	DB	error_sharing_violation ; MakeNode error 6
 17478                                  	; MSDOS 6.0
 17479 00002B7E 02                      	DB	error_file_not_found	; MakeNode error 7
 17480                                  
 17481                                  ; ---------------------------------------------------------------------------
 17482                                  
 17483                                  ; We have just created a new file. This results in the truncation of old
 17484                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17485                                  ; file to the current size.
 17486                                  
 17487                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17488                                  ; drive number to force a Build BPB after Media Check.
 17489                                  
 17490                                  ;;; FASTOPEN 8/29/86
 17491                                  Create_ok:
 17492 00002B7F E8DFFB                  	call	FastOpen_Delete
 17493                                  ;;; FASTOPEN 8/29/86
 17494 00002B82 A0[6D05]                	mov	al,[SATTRIB]
 17495 00002B85 A808                    	test	al,attr_volume_id
 17496 00002B87 741C                    	jz	short NoVolLabel
 17497 00002B89 C43E[A205]              	LES	DI,[THISCDS]
 17498                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17499 00002B8D 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17500 00002B90 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17501 00002B93 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17502                                  	
 17503                                  	; 18/05/2019 - Retro DOS v4.0
 17504                                  
 17505                                  	; MSDOS 6.0
 17506 00002B97 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17507 00002B99 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17508                                  	
 17509 00002B9C E8E6E7                  	call	ECritDisk
 17510 00002B9F E8622C                  	call	FATREAD_CDS		; force a media check
 17511 00002BA2 E8FBE7                  	call	LCritDisk
 17512                                  
 17513                                  NoVolLabel:
 17514 00002BA5 B80200                  	MOV	ax,2
 17515 00002BA8 C43E[9E05]              	LES	DI,[THISSFT]
 17516                                  ;if installed
 17517                                  	;call	JShare + 14 * 4
 17518 00002BAC FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17519                                  ;else
 17520                                  ;	Call	ShSU
 17521                                  ;endif
 17522 00002BB0 E8EDE7                  	call	LCritDisk
 17523 00002BB3 E94901                  	jmp	SET_SFT_MODE
 17524                                  
 17525                                  ;---------------------------------------------------------------------------
 17526                                  ; Procedure Name : Dos_Create_New
 17527                                  ;
 17528                                  ; Inputs:
 17529                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17530                                  ;		terminated)
 17531                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17532                                  ;		( = -1 if current dir not involved, else
 17533                                  ;		 Points to first char after last "/" of current dir part)
 17534                                  ;	[THISCDS] Points to CDS being used
 17535                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17536                                  ;	[THISSFT] Points to SFT to fill in if file created
 17537                                  ;		(sf_mode field set so that FCB may be detected)
 17538                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17539                                  ;	AX is Attribute to create
 17540                                  ; Function:
 17541                                  ;	Try to create the specified file truncating an old one that exists
 17542                                  ; Outputs:
 17543                                  ;	sf_ref_count is NOT altered
 17544                                  ;	CARRY CLEAR
 17545                                  ;	    THISSFT filled in.
 17546                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17547                                  ;	CARRY SET
 17548                                  ;	    AX is error code
 17549                                  ;		error_path_not_found
 17550                                  ;			Bad path (not in curr dir part if present)
 17551                                  ;		error_bad_curr_dir
 17552                                  ;			Bad path in current directory part of path
 17553                                  ;		error_access_denied
 17554                                  ;			Create a second volume id or create a dir
 17555                                  ;		error_file_exists
 17556                                  ;			Already a file by this name
 17557                                  ; DS preserved, others destroyed
 17558                                  ;---------------------------------------------------------------------------
 17559                                  
 17560                                  DOS_Create_New:
 17561 00002BB6 B401                    	MOV	AH,1		; Truncate is NOT OK
 17562 00002BB8 E930FF                  	JMP	Create_inter
 17563                                  
 17564                                  ; MSDOS 6.0
 17565                                  ;---------------------------------------------------------------------------
 17566                                  ; Procedure Name : Set_Media_ID
 17567                                  ;
 17568                                  ; Inputs:
 17569                                  ;	NAME1= Volume ID
 17570                                  ;	BH= 0, delete volume id
 17571                                  ;	    1, set new volume id
 17572                                  ;	DS= DOSGROUP
 17573                                  ; Function:
 17574                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17575                                  ; Outputs:
 17576                                  ;	CARRY CLEAR
 17577                                  ;	    volume id set
 17578                                  ;	CARRY SET
 17579                                  ;	    AX is error code
 17580                                  ;---------------------------------------------------------------------------
 17581                                  
 17582                                  	; 18/05/2019 - Retro DOS v4.0
 17583                                  Set_Media_ID:
 17584 00002BBB 50                      	PUSH	AX		;AN000;;>32mb
 17585 00002BBC 06                      	PUSH	ES		;AN000;;>32mb
 17586 00002BBD 57                      	PUSH	DI		;AN000;;>32mb
 17587                                  
 17588 00002BBE FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17589 00002BC0 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17590 00002BC2 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17591 00002BC4 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17592                                  
 17593                                  ;hkn; PACKET_TEMP is in DOSDATA
 17594 00002BC7 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17595                                  
 17596 00002BCA 53                      	PUSH	BX		;AN000;;>32mb
 17597 00002BCB 52                      	PUSH	DX		;AN000;;>32mb
 17598 00002BCC 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17599                                  
 17600                                  	;invoke	$IOCTL		;AN000;;>32mb
 17601 00002BCE E83CF7                  	call	_$IOCTL	
 17602                                  
 17603 00002BD1 5A                      	POP	DX		;AN000;;>32mb
 17604 00002BD2 5B                      	POP	BX		;AN000;;>32mb
 17605 00002BD3 7224                    	JC	short geterr	;AN000;;>32mb
 17606                                  
 17607 00002BD5 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17608 00002BD7 7405                    	JZ	short NoName	;AN000;>32mb yes
 17609                                  
 17610                                  ;hkn; NAME1 is in DOSDATA
 17611 00002BD9 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17612                                  
 17613 00002BDC EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17614                                  NoName: 			;AN000;
 17615                                  
 17616                                  ;hkn; NO_NAME_ID is in DOSDATA
 17617 00002BDE BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17618                                  
 17619                                  doset:				;AN000;
 17620 00002BE1 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17621                                  	;add	di,6
 17622 00002BE3 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17623                                  
 17624                                  ;hkn; ES & DS must point to SS
 17625                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17626 00002BE6 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17627                                  
 17628 00002BE7 1F                      	POP	DS		;AN000;;>32mb
 17629                                  
 17630                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17631 00002BE8 16                      	PUSH	SS		;AN000;;>32mb
 17632                                  
 17633 00002BE9 07                      	POP	ES		;AN000;;>32mb
 17634 00002BEA B90B00                  	MOV	CX,11		;AN000;;>32mb
 17635 00002BED F3A4                    	REP	MOVSB		;AN000;;>32mb
 17636 00002BEF B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17637 00002BF2 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17638 00002BF4 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17639                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17640 00002BF6 E814F7                  	call	_$IOCTL	
 17641                                  geterr: 			;AN000;
 17642                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17643 00002BF9 16                      	PUSH	SS		;AN000;>32mb
 17644                                  
 17645 00002BFA 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17646                                  
 17647 00002BFB 5F                      	POP	DI		;AN000;;>32mb
 17648 00002BFC 07                      	POP	ES		;AN000;;>32mb
 17649 00002BFD 58                      	POP	AX		;AN000;;>32mb
 17650 00002BFE C3                      	retn			;AN000;>32mb
 17651                                  
 17652                                  ; MSDOS 6.0
 17653                                  ;---------------------------------------------------------------------------
 17654                                  ; Procedure Name : Set_EXT_mode
 17655                                  ;
 17656                                  ; Inputs:
 17657                                  ;	[EXTOPEN_ON]= flag for extended open
 17658                                  ;	SAVE_BX= mode specified in Extended Open
 17659                                  ; Function:
 17660                                  ;	Set mode in ThisSFT
 17661                                  ; Outputs:
 17662                                  ;	carry set,mode is set if from Extended Open
 17663                                  ;	carry clear, mode not set yet
 17664                                  ;---------------------------------------------------------------------------
 17665                                  
 17666                                  ; 13/05/2019 - Retro DOS v4.0
 17667                                  
 17668                                  Set_EXT_mode:
 17669                                  
 17670                                  ;hkn; SS override
 17671 00002BFF 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17672 00002C05 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17673 00002C07 50                      	PUSH	AX			    ;AN000;EO.
 17674                                  
 17675                                  ;hkn; SS override
 17676 00002C08 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17677                                  	;or	[es:di+2],ax
 17678 00002C0C 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17679 00002C10 58                      	POP	AX			    ;AN000;EO.
 17680 00002C11 F9                      	STC				    ;AN000;EO.
 17681                                  NOTEX:					    ;AN000;
 17682 00002C12 C3                      	retn				    ;AN000;EO.
 17683                                  
 17684                                  ;============================================================================
 17685                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17686                                  ;============================================================================
 17687                                  ; 08/08/2018 - Retro DOS v3.0
 17688                                  ; 18/05/2019 - Retro DOS v4.0
 17689                                  
 17690                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17691                                  ;	NAME	DOS_OPEN
 17692                                  
 17693                                  ;**	OPEN.ASM - File Open
 17694                                  ;----------------------------------------------------------------------------
 17695                                  ;	Low level routines for openning a file from a file spec.
 17696                                  ;	Also misc routines for sharing errors
 17697                                  ;
 17698                                  ;	DOS_Open
 17699                                  ;	Check_Access_AX
 17700                                  ;	SHARE_ERROR
 17701                                  ;	SET_SFT_MODE
 17702                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17703                                  ;
 17704                                  ;	Revision history:
 17705                                  ;
 17706                                  ;	    Created: ARR 30 March 1983
 17707                                  ;	    A000	version 4.00   Jan. 1988
 17708                                  ;
 17709                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17710                                  ; 	       remote extended opens and not save_cx.
 17711                                  ;
 17712                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17713                                  ;	       on the stack before calling off to the redir.
 17714                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17715                                  ;	       to handle open from exec. In this case set the appropriate bit
 17716                                  ;	       else do not.
 17717                                  ;----------------------------------------------------------------------------	
 17718                                  
 17719                                  ;Installed = TRUE
 17720                                  
 17721                                  ;	i_need	NoSetDir,BYTE
 17722                                  ;	i_need	THISSFT,DWORD
 17723                                  ;	i_need	THISCDS,DWORD
 17724                                  ;	i_need	CURBUF,DWORD
 17725                                  ;	i_need	CurrentPDB,WORD
 17726                                  ;	i_need	CURR_DIR_END,WORD
 17727                                  ;	I_need	RetryCount,WORD
 17728                                  ;	I_need	Open_Access,BYTE
 17729                                  ;	I_need	fSharing,BYTE
 17730                                  ;	i_need	JShare,DWORD
 17731                                  ;	I_need	FastOpenFlg,byte
 17732                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17733                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17734                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17735                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17736                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17737                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17738                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17739                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17740                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17741                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17742                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17743                                  ;
 17744                                  ;	I_need	DOS_FLAG,BYTE
 17745                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17746                                  
 17747                                  ;Break	<DOS_Open - internal file access>
 17748                                  ;---------------------------------------------------------------------------
 17749                                  ; Procedure Name : DOS_Open
 17750                                  ;
 17751                                  ; Inputs:
 17752                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17753                                  ;		terminated)
 17754                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17755                                  ;		( = -1 if current dir not involved, else
 17756                                  ;		 Points to first char after last "/" of current dir part)
 17757                                  ;	[THISCDS] Points to CDS being used
 17758                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17759                                  ;	[THISSFT] Points to SFT to fill in if file found
 17760                                  ;		(sf_mode field set so that FCB may be detected)
 17761                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17762                                  ;	AX is Access and Sharing mode
 17763                                  ;	  High NIBBLE of AL (Sharing Mode)
 17764                                  ;		sharing_compat	   file is opened in compatibility mode
 17765                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17766                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17767                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17768                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17769                                  ;	  Low NIBBLE of AL (Access Mode)
 17770                                  ;		open_for_read	file is opened for reading
 17771                                  ;		open_for_write	file is opened for writing
 17772                                  ;		open_for_both	file is opened for both reading and writing.
 17773                                  ;
 17774                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17775                                  ;		(not checked)
 17776                                  ; Function:
 17777                                  ;	Try to open the specified file
 17778                                  ; Outputs:
 17779                                  ;	sf_ref_count is NOT altered
 17780                                  ;	CARRY CLEAR
 17781                                  ;	    THISSFT filled in.
 17782                                  ;	CARRY SET
 17783                                  ;	    AX is error code
 17784                                  ;		error_file_not_found
 17785                                  ;			Last element of path not found
 17786                                  ;		error_path_not_found
 17787                                  ;			Bad path (not in curr dir part if present)
 17788                                  ;		error_bad_curr_dir
 17789                                  ;			Bad path in current directory part of path
 17790                                  ;		error_invalid_access
 17791                                  ;			Bad sharing mode or bad access mode or bad combination
 17792                                  ;		error_access_denied
 17793                                  ;			Attempt to open read only file for writting, or
 17794                                  ;			open a directory
 17795                                  ;		error_sharing_violation
 17796                                  ;			The sharing mode was correct but not allowed
 17797                                  ;			generates an INT 24 on compatibility mode SFTs
 17798                                  ; DS preserved, others destroyed
 17799                                  ;----------------------------------------------------------------------------
 17800                                  
 17801                                  ; 18/05/2019 - Retro DOS v4.0
 17802                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17803                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17804                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17805                                  
 17806                                  DOS_OPEN:
 17807                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17808                                  
 17809 00002C13 C606[4C03]00            	MOV	byte [NoSetDir],0
 17810 00002C18 E83601                  	CALL	Check_Access_AX
 17811 00002C1B 722B                    	JC	short do_ret_label	    ; retc
 17812                                  
 17813 00002C1D C43E[9E05]              	LES	DI,[THISSFT]
 17814 00002C21 30E4                    	XOR	AH,AH
 17815                                  
 17816                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17817                                  
 17818 00002C23 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17819 00002C27 06                      	PUSH	ES
 17820 00002C28 C436[A205]              	LES	SI,[THISCDS]
 17821                                  	; 18/08/2018
 17822 00002C2C 83FEFF                  	CMP	SI,-1
 17823 00002C2F 7530                    	JNZ	short TEST_RE_NET1
 17824 00002C31 07                      	POP	ES
 17825                                  
 17826                                  	; MSDOS 6.0
 17827                                  ;Extended open hooks
 17828 00002C32 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17829 00002C37 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17830                                  _IFS_extopen:									;AN000;
 17831 00002C39 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17832                                  					    ; with which call was made. This
 17833                                  					    ; has the open access bits. 
 17834                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17835                                  	
 17836 00002C3C 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17837                                  	;mov	ax,112Eh
 17838                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17839 00002C3D B82E11                  	mov	ax,(MultNET*256)+46 
 17840 00002C40 CD2F                    	INT	2FH			    ;FT.				;AN000;
 17841 00002C42 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17842 00002C43 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17843                                  
 17844                                  do_ret_label:
 17845 00002C48 C3                      	retn				    ;FT.				;AN000;
 17846                                  _NOEXTOP:
 17847                                  ;Extended open hooks
 17848                                  	;
 17849                                  ;IF NOT Installed
 17850                                  	;transfer NET_SEQ_OPEN
 17851                                  ;ELSE
 17852                                  	
 17853                                  do_net_int2f:
 17854 00002C49 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17855 00002C4E 7409                    	jz	short not_exec_open	; N: just do net open
 17856                                  					; Y: check to see if redir is aware
 17857                                  					;    of this 
 17858                                  	
 17859                                  					; M042 - start
 17860                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17861 00002C50 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17862                                  					; Q: does this redir know how to 
 17863                                  					;    this
 17864 00002C55 7402                    	jz	short not_exec_open	; N: just do net open
 17865                                  					; Y: set bit 3 of access byte and 
 17866                                  					;    set sharing mode to DENY_WRITE
 17867                                  					; M042 - end
 17868                                  	
 17869                                  	; NOTE: This specific mode has not been set for the code assembled
 17870                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17871                                  	; always one.
 17872                                  					; M035 - set the bits on the stack
 17873                                  	;mov	al,23h
 17874 00002C57 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17875                                  	
 17876                                  not_exec_open:
 17877                                  	; MSDOS 3.3 & MSDOS 6.0
 17878 00002C59 50                      	PUSH	AX
 17879                                  
 17880                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17881                                  	;INT	2FH
 17882                                  
 17883 00002C5A B81611                  	mov     ax,1116h
 17884 00002C5D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17885                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17886                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17887                                  			; STACK: WORD file open mode
 17888                                  			; Return: CF set on error
 17889                                  
 17890 00002C5F 5B                      	POP	BX			; clean stack
 17891                                  ;do_ret_label: ; 09/08/2018
 17892 00002C60 C3                      	retn
 17893                                  ;ENDIF
 17894                                  
 17895                                  TEST_RE_NET1:
 17896                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17897                                  	; 17/12/2022
 17898 00002C61 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17899 00002C66 07                      	POP	ES
 17900                                  	; 18/05/2019
 17901 00002C67 7409                    	JZ	short LOCAL_OPEN
 17902                                  
 17903                                  ;Extended open hooks
 17904                                  	; MSDOS 6.0
 17905 00002C69 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17906 00002C6E 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17907                                  ;Extended open hooks
 17908                                  
 17909                                  ;IF NOT Installed
 17910                                  ;	transfer NET_OPEN
 17911                                  ;ELSE
 17912 00002C70 EBD7                    	jmp	short do_net_int2f
 17913                                  ;ENDIF
 17914                                  
 17915                                  LOCAL_OPEN:
 17916                                  	; MSDOS 3.3 & MSDOS 6.0
 17917 00002C72 E810E7                  	call	ECritDisk
 17918                                  
 17919                                  ; DOS 3.3 FastOPen 6/16/86
 17920                                  
 17921                                  	;or	byte [FastOpenFlg],5
 17922 00002C75 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17923                                  
 17924 00002C7A E87B13                  	call	GETPATH
 17925                                  
 17926                                  ; DOS 3.3 FastOPen 6/16/86
 17927                                  
 17928 00002C7D 731D                    	JNC	short Open_found
 17929 00002C7F 7511                    	JNZ	short bad_path2
 17930 00002C81 08C9                    	OR	CL,CL
 17931 00002C83 740D                    	JZ	short bad_path2
 17932                                  OpenFNF:
 17933 00002C85 B80200                  	MOV	AX,error_file_not_found	; 2
 17934                                  OpenBadRet:
 17935                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17936                                  	; 12/08/2018
 17937                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17938                                  	; MSDOS 6.0
 17939 00002C88 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17940 00002C8E F9                      	STC
 17941                                  	;call	LCritDisk
 17942                                  	; 16/12/2022
 17943 00002C8F E90EE7                  	jmp	LCritDisk
 17944                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17945                                  	;retn 	; 08/09/2018
 17946                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17947                                  	;jmp	Clear_FastOpen
 17948                                  
 17949                                  bad_path2:
 17950 00002C92 B80300                  	MOV	AX,error_path_not_found	; 3
 17951 00002C95 EBF1                    	JMP	short OpenBadRet
 17952                                  
 17953                                  Open_Bad_Access:
 17954 00002C97 B80500                  	MOV	AX,error_access_denied	; 5
 17955 00002C9A EBEC                    	JMP	short OpenBadRet
 17956                                  
 17957                                  Open_found:
 17958 00002C9C 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17959 00002C9E 08E4                    	OR	AH,AH
 17960 00002CA0 783E                    	JS	short open_ok		; Devices don't have attributes
 17961 00002CA2 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17962                                  	;mov	al,[es:bx+0Bh]
 17963 00002CA6 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17964 00002CAA A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 17965 00002CAC 75E9                    	JNZ	short Open_Bad_Access
 17966 00002CAE A801                    	TEST	AL,attr_read_only	; check write on read only
 17967 00002CB0 742E                    	JZ	short open_ok
 17968                                  
 17969                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 17970                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 17971                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 17972                                  ; processing until the actual write operation:
 17973                                  ;
 17974                                  ; If FCB, then we change the mode to be read_only.
 17975                                  ; If net_FCB, then we change the mode to be read_only.
 17976                                  ; If not open for read then error.
 17977                                  
 17978 00002CB2 1E                      	push	ds
 17979 00002CB3 56                      	push	si
 17980 00002CB4 C536[9E05]              	LDS	SI,[THISSFT]
 17981                                  	;mov	cx,[si+2]
 17982 00002CB8 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 17983                                  	; 17/12/2022
 17984                                  	;test	ch,80h
 17985 00002CBB F6C580                  	test	ch,sf_isFCB>>8
 17986                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 17987 00002CBE 750A                    	JNZ	short ResetAccess	; yes, reset the access
 17988 00002CC0 88CA                    	MOV	DL,CL
 17989 00002CC2 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 17990 00002CC5 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 17991 00002CC8 7508                    	JNZ	short NormalOpen	; no
 17992                                  ResetAccess:
 17993                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 17994                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 17995                                  	; 16/12/2022
 17996 00002CCA 80E1F0                  	and	cl,0F0h ; 18/05/2019
 17997                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 17998 00002CCD 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 17999 00002CD0 EB0C                    	JMP	SHORT FillSFT
 18000                                  
 18001                                  ; The SFT is normal. See if the requested access is open_for_read
 18002                                  
 18003                                  NormalOpen:
 18004 00002CD2 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18005 00002CD5 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18006 00002CD8 7404                    	JZ	short FillSFT
 18007 00002CDA 5E                      	pop	si
 18008 00002CDB 1F                      	pop	ds
 18009 00002CDC EBB9                    	JMP	short Open_Bad_Access
 18010                                  ;
 18011                                  ; All done, restore registers and fill the SFT.
 18012                                  ;
 18013                                  FillSFT:
 18014 00002CDE 5E                      	pop	si
 18015 00002CDF 1F                      	pop	ds
 18016                                  open_ok:
 18017 00002CE0 E8671F                  	call	DOOPEN			; Fill in SFT
 18018                                  
 18019                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18020                                  	; 18/05/2019
 18021                                  	;and	byte [ss:FastOpenFlag],80h
 18022 00002CE3 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18023                                  	; 12/08/2018
 18024                                  	;and	byte [FastOpenFlg],Fast_yes	
 18025                                  
 18026                                  	; MSDOS 6.0
 18027 00002CE9 E84600                  	CALL	DO_SHARE_CHECK
 18028 00002CEC 7303                    	JNC	short SHARE_OK
 18029                                  	;call	LCritDisk
 18030                                  	; 16/12/2022
 18031 00002CEE E9AFE6                  	jmp	LCritDisk
 18032                                  	;;JMP	short Clear_FastOpen
 18033                                  	;retn	; 18/05/2019
 18034                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18035                                  	;jmp	short Clear_FastOpen	
 18036                                  
 18037                                  	; MSDOS 3.3
 18038                                  ;DO_SHARE_CHECK:
 18039                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18040                                  ;OpenShareRetry:
 18041                                  ;	push	cx			; Save number left to do
 18042                                  ;	call	SHARE_CHECK		; Final Check
 18043                                  ;	pop	cx			; CX = # left
 18044                                  ;	JNC	short SHARE_OK		; No problem with access
 18045                                  ;	call	Idle
 18046                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18047                                  ;OpenShareFail:
 18048                                  ;	LES	DI,[THISSFT]
 18049                                  ;	call	SHARE_ERROR
 18050                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18051                                  	
 18052                                  	;12/08/2018
 18053                                  	;mov	byte [ss:FastOpenFlg],0
 18054                                  	;08/09/2018
 18055                                  	;mov	byte [FastOpenFlg],0
 18056                                  	;call	LCritDisk
 18057                                  	;JMP	short Clear_FastOpen
 18058                                  	;retn
 18059                                  
 18060                                  SHARE_OK:
 18061                                  	; MSDOS 3.3 & MSDOS 6.0
 18062 00002CF1 B80300                  	MOV	AX,3
 18063 00002CF4 C43E[9E05]              	LES	DI,[THISSFT]
 18064                                  ;if installed
 18065                                  	;call	JShare + 14 * 4
 18066 00002CF8 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18067                                  ;else
 18068                                  ;	Call	ShSU
 18069                                  ;endif
 18070 00002CFC E8A1E6                  	call	LCritDisk
 18071                                  	
 18072                                  	;FallThru Set_SFT_Mode
 18073                                  
 18074                                  ;----------------------------------------------------------------------------
 18075                                  ; Procedure Name : SET_SFT_MODE
 18076                                  ;
 18077                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18078                                  ;
 18079                                  ;   Inputs:
 18080                                  ;	ThisSFT points to SFT
 18081                                  ;
 18082                                  ;   Outputs:
 18083                                  ;	Carry clear
 18084                                  ;   Registers modified: AX.
 18085                                  ;---------------------------------------------------------------------------
 18086                                  
 18087                                  ;hkn; called from create. DS already set up to DOSDATA.
 18088                                  
 18089                                  SET_SFT_MODE:
 18090 00002CFF C43E[9E05]              	LES	DI,[THISSFT]
 18091 00002D03 E8D019                  	call	DEV_OPEN_SFT
 18092                                  	;test	word [es:di+2],8000h
 18093                                  	; 17/12/2022
 18094                                  	;test	byte [es:di+3],80h
 18095 00002D06 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18096                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18097 00002D0B 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18098 00002D0D A1[3003]                	MOV	AX,[CurrentPDB]
 18099                                  	;mov	[es:di+31h],ax
 18100 00002D10 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18101                                  
 18102                                  Clear_FastOpen:
 18103 00002D14 C3                      	retn			       ;;;;; DOS 3.3
 18104                                  
 18105                                  ;----------------------------------------------------------------------------
 18106                                  ; Procedure Name : SHARE_ERROR
 18107                                  ;
 18108                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18109                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18110                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18111                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18112                                  ;---------------------------------------------------------------------------
 18113                                  
 18114                                  SHARE_ERROR:
 18115                                  	; 17/12/2022
 18116                                  	;test	byte [es:di+3],80h
 18117 00002D15 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18118                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18119 00002D1A 750C                    	JNZ	short _HARD_ERR
 18120 00002D1C 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18121 00002D20 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18122 00002D23 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18123 00002D26 7505                    	JNE	short _NO_HARD_ERR
 18124                                  _HARD_ERR:
 18125 00002D28 E84D47                  	call	SHARE_VIOLATION
 18126                                  	;retnc				; User wants retry
 18127 00002D2B 73E7                    	jnc	short Clear_FastOpen
 18128                                  _NO_HARD_ERR:
 18129 00002D2D B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18130 00002D30 F9                      	STC
 18131 00002D31 C3                      	retn
 18132                                  
 18133                                  ; MSDOS 6.0
 18134                                  ;----------------------------------------------------------------------------
 18135                                  ; Procedure Name : DO_SHARE_CHECK
 18136                                  ;
 18137                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18138                                  ; Functions: check file sharing mode is valid
 18139                                  ; Output: carry set, error
 18140                                  ;	  carry clear, share ok
 18141                                  ;----------------------------------------------------------------------------
 18142                                  
 18143                                  	; 18/05/2019 - Retro DOS v4.0
 18144                                  DO_SHARE_CHECK:
 18145 00002D32 E850E6                  	call	ECritDisk		; enter critical section
 18146                                  OPN_RETRY:
 18147 00002D35 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18148                                  OpenShareRetry:
 18149 00002D39 51                      	push	cx			; Save number left to do
 18150 00002D3A E83647                  	call	SHARE_CHECK		; Final Check
 18151 00002D3D 59                      	pop	cx			; CX = # left
 18152 00002D3E 730E                    	JNC	short Share_Ok2		; No problem with access
 18153 00002D40 E838E5                  	call	Idle
 18154 00002D43 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18155                                  OpenShareFail:
 18156 00002D45 C43E[9E05]              	LES	DI,[THISSFT]
 18157 00002D49 E8C9FF                  	call	SHARE_ERROR
 18158 00002D4C 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18159                                  Share_Ok2:
 18160                                  	;call	LCritDisk		; leave critical section
 18161                                  	;retn
 18162                                  	; 18/12/2022
 18163 00002D4E E94FE6                  	jmp	LCritDisk
 18164                                  
 18165                                  ;-----------------------------------------------------------------------------
 18166                                  ; Procedure Name : Check_Access
 18167                                  ;
 18168                                  ; Inputs:
 18169                                  ;	AX is mode
 18170                                  ;	  High NIBBLE of AL (Sharing Mode)
 18171                                  ;		sharing_compat	   file is opened in compatibility mode
 18172                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18173                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18174                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18175                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18176                                  ;	  Low NIBBLE of AL (Access Mode)
 18177                                  ;		open_for_read	file is opened for reading
 18178                                  ;		open_for_write	file is opened for writing
 18179                                  ;		open_for_both	file is opened for both reading and writing.
 18180                                  ; Function:
 18181                                  ;	Check this access mode for correctness
 18182                                  ; Outputs:
 18183                                  ;	[open_access] = AL input
 18184                                  ;	Carry Clear
 18185                                  ;		Mode is correct
 18186                                  ;		AX unchanged
 18187                                  ;	Carry Set
 18188                                  ;		Mode is bad
 18189                                  ;		AX = error_invalid_access
 18190                                  ; No other registers effected
 18191                                  ;----------------------------------------------------------------------------
 18192                                  
 18193                                  Check_Access_AX:
 18194 00002D51 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18195 00002D54 53                      	PUSH	BX
 18196                                  
 18197                                  ;	If sharing, then test for special sharing mode for FCBs
 18198                                  
 18199 00002D55 88C3                    	MOV	BL,AL
 18200 00002D57 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18201 00002D5A 803E[7205]FF            	CMP	byte [FSHARING],-1
 18202 00002D5F 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18203 00002D61 80FB70                  	CMP	BL,SHARING_NET_FCB
 18204 00002D64 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18205                                  CheckShareMode:
 18206 00002D66 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18207 00002D69 770D                    	JA	short Make_Bad_Access
 18208                                  CheckAccessMode:
 18209 00002D6B 88C3                    	MOV	BL,AL
 18210 00002D6D 80E30F                  	AND	BL,access_mask
 18211 00002D70 80FB02                  	CMP	BL,2
 18212 00002D73 7703                    	JA	short Make_Bad_Access
 18213 00002D75 5B                      	POP	BX
 18214 00002D76 F8                      	CLC
 18215 00002D77 C3                      	retn
 18216                                  
 18217                                  Make_Bad_Access:
 18218 00002D78 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18219 00002D7B 5B                      	POP	BX
 18220 00002D7C F9                      	STC
 18221 00002D7D C3                      	retn
 18222                                  
 18223                                  ;============================================================================
 18224                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18225                                  ;============================================================================
 18226                                  ; 08/08/2018 - Retro DOS v3.0
 18227                                  ; 18/05/2019 - Retro DOS v4.0
 18228                                  
 18229                                  ;**	Low level routine for returning disk drive information from a local
 18230                                  ;	  or NET device
 18231                                  ;
 18232                                  ;	DISK_INFO
 18233                                  ;
 18234                                  ;	  Modification history:
 18235                                  ;
 18236                                  ;		Created: ARR 30 March 1983
 18237                                  
 18238                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18239                                  ;---------------------------------------------------------------------------
 18240                                  ; Procedure Name : DISK_INFO
 18241                                  ;
 18242                                  ; Inputs:
 18243                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18244                                  ;		(It MAY NOT be NUL, error not detected)
 18245                                  ; Function:
 18246                                  ;	Get Interesting Drive Information
 18247                                  ; Returns:
 18248                                  ;	DX = Number of free allocation units
 18249                                  ;	BX = Total Number of allocation units on disk
 18250                                  ;	CX = Sector size
 18251                                  ;	AL = Sectors per allocation unit
 18252                                  ;	AH = FAT ID BYTE
 18253                                  ;	Carry set if error (currently user FAILed to I 24)
 18254                                  ; Segs except ES preserved, others destroyed
 18255                                  ;----------------------------------------------------------------------------
 18256                                  
 18257                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18258                                  ;hkn; DOSDATA. 
 18259                                  
 18260                                  DISK_INFO:
 18261                                  	; 08/08/2018 - Retro DOS v3.0
 18262                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18263                                  
 18264 00002D7E E83FE5                  	call	TestNet
 18265 00002D81 7306                    	JNC	short LOCAL_DSK_INFO
 18266                                  
 18267                                  ;IF NOT Installed
 18268                                  ;	transfer NET_DISK_INFO
 18269                                  ;ELSE
 18270                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18271                                  	;INT	2FH
 18272                                  	;return
 18273                                  
 18274 00002D83 B80C11                  	mov     ax,110Ch
 18275 00002D86 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18276                                  			; ES:DI -> current directory
 18277                                  			; Return: AL = sectors per cluster, BX = total clusters
 18278                                  			; CX = bytes per sector, DX = number of available clusters
 18279 00002D88 C3                      	retn
 18280                                  ;ENDIF
 18281                                  
 18282                                  LOCAL_DSK_INFO:
 18283 00002D89 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18284 00002D8E E8F4E5                  	call	ECritDisk
 18285 00002D91 E8702A                  	call	FATREAD_CDS		; perform media check.
 18286 00002D94 7241                    	JC	short CRIT_LEAVE
 18287 00002D96 BB0200                  	MOV	BX,2
 18288 00002D99 E8B628                  	call	UNPACK			; Get first FAT sector into CURBUF
 18289 00002D9C 7239                    	JC	short CRIT_LEAVE
 18290 00002D9E C536[E205]              	LDS	SI,[CURBUF]
 18291                                  	;mov	ah,[si+20]
 18292 00002DA2 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18293                                  
 18294                                  ;hkn; SS is DOSDATA
 18295 00002DA5 16                      	push	ss
 18296 00002DA6 1F                      	pop	ds
 18297                                  	;mov	cx,[es:bp+0Dh]
 18298 00002DA7 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18299                                  
 18300                                  ; Examine the current free count. If it indicates that we have an invalid
 18301                                  ; count, do the expensive calculation.
 18302                                  
 18303                                  	;mov	dx,[es:bp+1Fh]
 18304 00002DAB 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18305 00002DAF 83FAFF                  	CMP	DX,-1			; is it valid?
 18306 00002DB2 7404                    	JZ	short DoScan
 18307                                  
 18308                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18309                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18310                                  ; the count.
 18311                                  
 18312 00002DB4 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18313 00002DB6 7222                    	JB	short GotVal		; yes, trust it.
 18314                                  DoScan:
 18315 00002DB8 31D2                    	XOR	DX,DX
 18316 00002DBA 49                      	DEC	CX
 18317                                  SCANFREE:
 18318 00002DBB E89428                  	call	UNPACK
 18319 00002DBE 7217                    	JC	short CRIT_LEAVE
 18320 00002DC0 7501                    	JNZ	short NOTFREECLUS
 18321 00002DC2 42                      	INC	DX			; A free one
 18322                                  NOTFREECLUS:
 18323 00002DC3 43                      	INC	BX			; Next cluster
 18324 00002DC4 E2F5                    	LOOP	SCANFREE
 18325 00002DC6 4B                      	DEC	BX			; BX was next cluster. Convert to
 18326                                  ReturnVals:
 18327 00002DC7 4B                      	DEC	BX			; count
 18328                                  	;mov	al,[es:bp+4]
 18329 00002DC8 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18330 00002DCC FEC0                    	INC	AL			; Sectors/cluster
 18331                                  	;mov	cx,[es:bp+2]
 18332 00002DCE 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18333                                  	;mov	[es:bp+1Fh],dx
 18334 00002DD2 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18335 00002DD6 F8                      	CLC
 18336                                  CRIT_LEAVE:
 18337                                  	;call	LCritDisk
 18338                                  	;retn
 18339                                  	; 17/12/2022
 18340 00002DD7 E9C6E5                  	jmp	LCritDisk
 18341                                  
 18342                                  ; We have correctly computed everything previously. Load up registers for
 18343                                  ; return.
 18344                                  
 18345                                  GotVal: 
 18346 00002DDA 89CB                    	MOV	BX,CX			; get cluster count
 18347 00002DDC EBE9                    	JMP	short ReturnVals
 18348                                  
 18349                                  ;============================================================================
 18350                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18351                                  ;============================================================================
 18352                                  ; 22/07/2018 - Retro DOS v3.0
 18353                                  
 18354                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18355                                  ;	NAME	DOS_SEARCH
 18356                                  
 18357                                  ;**	Low level routines for doing local and NET directory searches
 18358                                  ;
 18359                                  ;	DOS_SEARCH_FIRST
 18360                                  ;	DOS_SEARCH_NEXT
 18361                                  ;	RENAME_NEXT
 18362                                  ;
 18363                                  ;	Revision history:
 18364                                  ;
 18365                                  ;	    Created: ARR 30 March 1983
 18366                                  ;	    A000	version 4.00  Jan. 1988
 18367                                  ;	    A001	PTM 3564 -- search for fastopen
 18368                                  
 18369                                  ;Installed = TRUE
 18370                                  
 18371                                  ;--------------------------------------------------------------------------
 18372                                  ;
 18373                                  ; Procedure Name : DOS_SEARCH_FIRST
 18374                                  ;
 18375                                  ; Inputs:
 18376                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18377                                  ;		terminated)
 18378                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18379                                  ;		( = -1 if current dir not involved, else
 18380                                  ;		 Points to first char after last "/" of current dir part)
 18381                                  ;	[THISCDS] Points to CDS being used
 18382                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18383                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18384                                  ;	[DMAADD] Points to 53 byte buffer
 18385                                  ; Function:
 18386                                  ;	Initiate a search for the given file spec
 18387                                  ; Outputs:
 18388                                  ;	CARRY CLEAR
 18389                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18390                                  ;
 18391                                  ;	LOCAL
 18392                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18393                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18394                                  ;	    11 byte search name with Meta chars in it
 18395                                  ;	    Search Attribute Byte, attribute of search
 18396                                  ;	    WORD LastEnt value
 18397                                  ;	    WORD DirStart
 18398                                  ;	    4 byte pad
 18399                                  ;	    32 bytes of the directory entry found
 18400                                  ;	NET
 18401                                  ;	    21 bytes First byte has high bit set
 18402                                  ;	    32 bytes of the directory entry found
 18403                                  ;
 18404                                  ;	CARRY SET
 18405                                  ;	    AX = error code
 18406                                  ;		error_no_more_files
 18407                                  ;			No match for this file
 18408                                  ;		error_path_not_found
 18409                                  ;			Bad path (not in curr dir part if present)
 18410                                  ;		error_bad_curr_dir
 18411                                  ;			Bad path in current directory part of path
 18412                                  ; DS preserved, others destroyed
 18413                                  ;---------------------------------------------------------------------------
 18414                                  
 18415                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18416                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18417                                  
 18418                                  DOS_SEARCH_FIRST:
 18419                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18420                                  
 18421 00002DDE C43E[A205]              	LES	DI,[THISCDS]
 18422 00002DE2 83FFFF                  	CMP	DI,-1
 18423 00002DE5 7506                    	JNZ	short TEST_RE_NET2
 18424                                  
 18425                                  ;IF NOT Installed
 18426                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18427                                  ;ELSE
 18428                                  	;mov	ax,1119h
 18429 00002DE7 B81911                  	MOV	AX,(MultNET<<8)|25
 18430 00002DEA CD2F                    	INT	2Fh
 18431 00002DEC C3                      	retn
 18432                                  ;ENDIF
 18433                                  
 18434                                  TEST_RE_NET2:
 18435                                  	;test	word [es:di+43h],8000h
 18436                                  	; 17/12/2022
 18437                                  	;test	byte [es:di+44h],80h
 18438                                  	; 28/12/2022 (BugFix)
 18439 00002DED 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18440                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18441 00002DF2 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18442                                  
 18443                                  ;IF NOT Installed
 18444                                  ;	transfer NET_SEARCH_FIRST
 18445                                  ;ELSE
 18446                                  	;mov	ax,111Bh
 18447 00002DF4 B81B11                  	MOV	AX,(MultNET<<8)|27
 18448 00002DF7 CD2F                    	INT	2FH
 18449 00002DF9 C3                      	retn
 18450                                  ;ENDIF
 18451                                  	; 18/05/2019 - Retro DOS v4.0
 18452                                  LOCAL_SEARCH_FIRST:
 18453 00002DFA E888E5                  	call	ECritDisk
 18454                                  	; MSDOS 6.0
 18455                                  	;;test	word [DOS34_FLAG],400h
 18456                                  	; 17/12/2022
 18457                                  	;test	byte [DOS34_FLAG+1],04h
 18458 00002DFD F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18459                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18460 00002E02 7405                    	JZ	short NOFN			;AN000;
 18461                                  	;or	byte [FastOpenFlg],1
 18462 00002E04 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18463                                  NOFN:						;AN000;
 18464 00002E09 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18465                                  	; MSDOS 6.0
 18466 00002E0E E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18467 00002E11 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18468                                  	;and	byte [FastOpenFlg],80h
 18469 00002E13 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18470                                  norm_GETPATH:
 18471 00002E18 E8DD11                  	call	GETPATH
 18472                                  	; BX = offset NAME1
 18473                                  ;_getdone:
 18474 00002E1B 7318                    	JNC	short find_check_dev
 18475 00002E1D 7511                    	JNZ	short bad_path3
 18476 00002E1F 08C9                    	OR	CL,CL
 18477 00002E21 740D                    	JZ	short bad_path3
 18478                                  find_no_more:
 18479                                  	;mov	ax,12h
 18480 00002E23 B81200                  	MOV	AX,error_no_more_files
 18481                                  BadBye:
 18482                                  	; MSDOS 6.0
 18483 00002E26 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18484                                  
 18485 00002E2C F9                      	STC
 18486                                  	;call	LCritDisk
 18487                                  	;retn
 18488                                  	; 18/12/2022
 18489 00002E2D E970E5                  	jmp	LCritDisk
 18490                                  
 18491                                  bad_path3:
 18492                                  	;mov	ax,3
 18493 00002E30 B80300                  	MOV	AX,error_path_not_found
 18494 00002E33 EBF1                    	JMP	short BadBye
 18495                                  
 18496                                  find_check_dev:
 18497 00002E35 08E4                    	OR	AH,AH
 18498 00002E37 790A                    	JNS	short found_entry
 18499 00002E39 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18500 00002E3F FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18501                                  found_entry:
 18502                                  
 18503                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18504                                  ; a search-next may not have wfp_start set correctly
 18505                                  
 18506 00002E43 C43E[2C03]              	LES	DI,[DMAADD]
 18507 00002E47 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18508 00002E4B AC                      	LODSB
 18509 00002E4C 2C40                    	SUB	AL,'A'-1                ; logical drive
 18510 00002E4E AA                      	STOSB				; High bit not set (local)
 18511                                  found_it:
 18512 00002E4F C43E[2C03]              	LES	DI,[DMAADD]
 18513 00002E53 47                      	INC	DI
 18514                                  
 18515                                  	; MSDOS 6.0
 18516 00002E54 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18517                                  	;test	byte [FastOpenFlg],10h
 18518 00002E55 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18519 00002E5A 7408                    	JZ	short notfast			  ;FO.;AN001;
 18520 00002E5C 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18521 00002E5E 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18522 00002E62 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18523                                  
 18524                                  notfast:
 18525 00002E64 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18526                                  movmov:
 18527                                  ; Special E5 code
 18528 00002E67 A4                      	MOVSB
 18529 00002E68 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18530 00002E6D 7505                    	JNZ	short NOTKANJB
 18531 00002E6F 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18532                                  NOTKANJB:
 18533 00002E74 B90A00                  	MOV	CX,10
 18534 00002E77 F3A4                    	REP	MOVSB
 18535                                  
 18536                                  	; 08/09/2018
 18537 00002E79 1F                      	POP	DS			;FO.;AN001; restore ds
 18538                                  
 18539 00002E7A A0[6B05]                	MOV	AL,[ATTRIB]
 18540 00002E7D AA                      	STOSB
 18541 00002E7E 50                      	PUSH	AX			; Save AH device info
 18542 00002E7F A1[4803]                	MOV	AX,[LASTENT]
 18543 00002E82 AB                      	STOSW
 18544 00002E83 A1[C205]                	MOV	AX,[DIRSTART]
 18545 00002E86 AB                      	STOSW
 18546                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18547 00002E87 83C704                  	ADD	DI,4
 18548 00002E8A 58                      	POP	AX			; Recover AH device info
 18549 00002E8B 08E4                    	OR	AH,AH
 18550 00002E8D 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18551 00002E8F 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18552 00002E94 7510                    	JNZ	short OKSTORE
 18553                                  
 18554                                  	; MSDOS 6.0
 18555 00002E96 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18556                                  					;AN000;;FO. from fastopen and is good
 18557 00002E9B 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18558                                  
 18559                                  	; The user has specified the root directory itself, rather than some
 18560                                  	; contents of it. We can't "find" that.
 18561                                  
 18562 00002E9D 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18563                                  					;   stuffing a -1 at Lastent
 18564 00002EA3 E97DFF                  	JMP	find_no_more
 18565                                  
 18566                                  OKSTORE:
 18567 00002EA6 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18568                                  DOSREL:
 18569                                  	; BX = offset NAME1 (from GETPATH)
 18570 00002EAA 89DE                    	MOV	SI,BX			; SI-> start of entry
 18571                                  
 18572                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18573                                  
 18574                                  	;mov	cx,32
 18575 00002EAC B92000                  	MOV	CX,dir_entry.size
 18576                                  ;;;;; 7/29/86
 18577 00002EAF 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18578 00002EB1 F3A4                    	REP	MOVSB
 18579 00002EB3 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18580 00002EB5 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18581 00002EB9 7504                    	JNZ	short NO05
 18582 00002EBB 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18583                                  NO05:
 18584                                  
 18585                                  ;;;;; 7/29/86
 18586                                  
 18587                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18588                                  	; 16/12/2022
 18589                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18590                                  	; MSDOS 6.0
 18591                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18592                                  	; 18/05/2019 - Retro DOS v4.0
 18593 00002EBF 16                      	push	ss
 18594 00002EC0 1F                      	pop	ds
 18595                                  	; 16/12/2022
 18596 00002EC1 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18597                                  
 18598                                  ;hkn; SS is DOSDATA
 18599                                  	;push	ss
 18600                                  	;pop	ds
 18601 00002EC6 F8                      	CLC
 18602                                  	;call	LCritDisk
 18603                                  	;retn
 18604                                  	; 16/12/2022
 18605 00002EC7 E9D6E4                  	jmp	LCritDisk
 18606                                  
 18607                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18608                                  ;----------------------------------------------------------------------------
 18609                                  ;
 18610                                  ; Procedure Name : DOS_SEARCH_NEXT
 18611                                  ;
 18612                                  ; Inputs:
 18613                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18614                                  ;	    (only first 21 bytes must have valid information)
 18615                                  ; Function:
 18616                                  ;	Look for subsequent matches
 18617                                  ; Outputs:
 18618                                  ;	CARRY CLEAR
 18619                                  ;	    The 53 bytes at DMAADD are updated for next call
 18620                                  ;		(see DOS_SEARCH_FIRST)
 18621                                  ;	CARRY SET
 18622                                  ;	    AX = error code
 18623                                  ;		error_no_more_files
 18624                                  ;			No more files to find
 18625                                  ; DS preserved, others destroyed
 18626                                  ;---------------------------------------------------------------------------
 18627                                  
 18628                                  ;hkn; called from search.asm. DS already set up at this point.
 18629                                  
 18630                                  DOS_SEARCH_NEXT:
 18631 00002ECA C43E[2C03]              	LES	DI,[DMAADD]
 18632 00002ECE 268A05                  	MOV	AL,[ES:DI]
 18633 00002ED1 A880                    	TEST	AL,80H			; Test for NET
 18634 00002ED3 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18635                                  ;IF NOT Installed
 18636                                  ;	transfer NET_SEARCH_NEXT
 18637                                  ;ELSE
 18638                                  	;mov	ax,111Ch
 18639 00002ED5 B81C11                  	MOV	AX,(MultNET<<8)|28
 18640 00002ED8 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18641                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18642                                  		     ; Return: CF set on error, AX = DOS error code
 18643                                  		     ; CF clear if successful
 18644 00002EDA C3                      	retn
 18645                                  ;ENDIF
 18646                                  
 18647                                  LOCAL_SEARCH_NEXT:
 18648                                  	;AL is drive A=1
 18649                                  	;mov	byte [EXTERR_LOCUS],2
 18650 00002EDB C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18651 00002EE0 E8A2E4                  	call	ECritDisk
 18652                                  
 18653                                  ;hkn; DummyCDS is in DOSDATA
 18654 00002EE3 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18655                                  ;hkn; Segment address is DOSDATA - use ds
 18656                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18657 00002EE9 8C1E[A405]              	mov	[THISCDS+2],DS
 18658                                  
 18659 00002EED 0440                    	ADD	AL,'A'-1
 18660 00002EEF E8113C                  	call	InitCDS
 18661                                  
 18662                                  ;	call	GETTHISDRV		; Set CDS pointer
 18663                                  
 18664 00002EF2 7236                    	JC	short No_files		; Bogus drive letter
 18665 00002EF4 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18666                                  	;les	bp,[es:di+45h]
 18667 00002EF8 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18668 00002EFC E87CD7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18669                                  
 18670                                  	 ;16/12/2022
 18671 00002EFF 268A4600                	mov	al,[ES:BP]
 18672                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18673                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18674 00002F03 A2[7605]                	mov	[THISDRV],AL
 18675                                  	;mov	word [CREATING],0E500h
 18676 00002F06 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18677 00002F0C C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18678 00002F11 C536[2C03]              	LDS	SI,[DMAADD]
 18679 00002F15 AC                      	LODSB				; Drive Byte
 18680                                  
 18681                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18682                                  RENAME_NEXT:
 18683                                  	;context ES
 18684 00002F16 16                      	push	ss
 18685 00002F17 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18686                                  
 18687                                  ;hkn; NAME1 is in DOSDATA
 18688 00002F18 BF[4B05]                	MOV	DI,NAME1
 18689                                  
 18690 00002F1B B90B00                  	MOV	CX,11
 18691 00002F1E F3A4                    	REP	MOVSB			; Search name
 18692 00002F20 AC                      	LODSB				; Attribute
 18693                                  
 18694                                  ;hkn; SS override
 18695 00002F21 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18696 00002F25 AD                      	LODSW				; LastEnt
 18697 00002F26 09C0                    	OR	AX,AX
 18698 00002F28 7903                    	JNS	short cont_load
 18699                                  No_files:
 18700 00002F2A E9F6FE                  	JMP	find_no_more
 18701                                  
 18702                                  cont_load:
 18703 00002F2D 50                      	PUSH	AX			; Save LastEnt
 18704 00002F2E AD                      	LODSW				; DirStart
 18705 00002F2F 89C3                    	MOV	BX,AX
 18706                                  
 18707                                  ;hkn; SS is DOSDATA
 18708                                  	;context DS
 18709 00002F31 16                      	push	ss
 18710 00002F32 1F                      	pop	ds
 18711 00002F33 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18712                                  	;invoke	SetDirSrch
 18713 00002F37 E85E10                  	call	SETDIRSRCH
 18714 00002F3A 7303                    	JNC	short SEARCH_GOON
 18715 00002F3C 58                      	POP	AX			; Clean stack
 18716 00002F3D EBEB                    	JMP	short No_files
 18717                                  
 18718                                  SEARCH_GOON:
 18719 00002F3F E85813                  	call	STARTSRCH
 18720 00002F42 58                      	POP	AX
 18721 00002F43 E82410                  	call	GETENT
 18722 00002F46 72E2                    	JC	short No_files
 18723 00002F48 E8550F                  	call	NEXTENT
 18724 00002F4B 72DD                    	JC	short No_files
 18725 00002F4D 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18726 00002F4F E9FDFE                  	JMP	found_it ; 10/08/2018
 18727                                  
 18728                                  ; MSDOS 6.0
 18729                                  ;---------------------------------------------------------------------------
 18730                                  ;
 18731                                  ; Procedure Name : CHECK_QUESTION
 18732                                  ;
 18733                                  ; Input: [WFP_START]= pointer to final path
 18734                                  ; Function: check '?' char
 18735                                  ; Output: carry clear, if no '?'
 18736                                  ;	 carry set, if '?' exists
 18737                                  ;---------------------------------------------------------------------------
 18738                                  
 18739                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18740                                  CHECK_QUESTION:
 18741                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18742                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18743 00002F52 16                      	push	ss
 18744 00002F53 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18745                                  	; 16/12/2022
 18746                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18747 00002F54 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18748                                  	;mov	si,[ss:WFP_START]
 18749                                  getnext:				;AN000;
 18750 00002F58 AC                      	LODSB				;AN000;;FO. get char
 18751 00002F59 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18752 00002F5B 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18753 00002F5D 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18754 00002F5F 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18755 00002F61 F9                      	STC				;AN000;;FO.
 18756                                  NO_Question:				;AN000;
 18757 00002F62 C3                      	retn				;AN000;;FO.
 18758                                  
 18759                                  ;============================================================================
 18760                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18761                                  ;============================================================================
 18762                                  ; 23/07/2018 - Retro DOS v3.0
 18763                                  ; 18/05/2019 - Retro DOS v4.0
 18764                                  
 18765                                  ;**
 18766                                  ;
 18767                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18768                                  ;  If process has NET resources a close all is sent out over the net.
 18769                                  ;
 18770                                  ;   DOS_ABORT
 18771                                  ;
 18772                                  ;   Modification history:
 18773                                  ;
 18774                                  ;       Created: ARR 30 March 1983
 18775                                  ;
 18776                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18777                                  ;				being terminated only if it is busy.
 18778                                  ;
 18779                                  
 18780                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18781                                  ;--------------------------------------------------------------------------
 18782                                  ;
 18783                                  ; Procedure Name : DOS_ABORT
 18784                                  ;
 18785                                  ; Inputs:
 18786                                  ;       [CurrentPDB] set to PID of process aborting
 18787                                  ; Function:
 18788                                  ;       Close all files and free all SFTs for this PID
 18789                                  ; Returns:
 18790                                  ;       None
 18791                                  ; All destroyed except stack
 18792                                  ;---------------------------------------------------------------------------
 18793                                  
 18794                                  DOS_ABORT:
 18795 00002F63 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18796 00002F68 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18797                                  reset_free_jfn:
 18798 00002F6D 89CB                    	MOV     BX,CX
 18799 00002F6F 51                      	PUSH    CX
 18800 00002F70 4B                      	DEC     BX                      ; get jfn (start with last one)
 18801                                  
 18802 00002F71 E8C338                  	CALL	_$CLOSE
 18803 00002F74 59                      	POP     CX
 18804 00002F75 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18805                                  
 18806                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18807                                  ; are running in the no-sharing no-network environment, we are simulating the
 18808                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18809                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18810                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18811                                  ;
 18812                                  ; If sharing is loaded, then the following call to close process will
 18813                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18814                                  ;
 18815                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18816                                  ; known network resources. These resources are then responsible for cleaning
 18817                                  ; up after this process.
 18818                                  ;
 18819                                  ; Sleazy, eh?
 18820                                  
 18821                                  	;context DS			; SS is DOSDATA
 18822 00002F77 16                      	push	ss
 18823 00002F78 1F                      	pop	ds  ; 09/09/2018
 18824                                  
 18825                                  	;CallInstall Net_Abort, MultNET, 29
 18826 00002F79 B81D11                  	mov	ax, 111Dh
 18827 00002F7C CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18828                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18829                                  			; DS???, SS = DOS CS
 18830                                  ;if installed
 18831 00002F7E FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18832                                  ;else
 18833                                  ;	call 	MFTCloseP
 18834                                  ;endif
 18835                                  
 18836                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18837                                  ; counts.
 18838                                  					; SS override
 18839 00002F82 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18840                                  	;mov	cx,[es:di+4]
 18841 00002F87 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18842 00002F8B E317                    	jcxz    FCBScanDone
 18843                                  	;lea	di,[di+6]
 18844 00002F8D 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18845 00002F90 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18846                                  FCBTest:
 18847                                  	;cmp	[es:di+31h],ax
 18848 00002F94 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18849 00002F98 7505                    	jnz	short FCBNext		; no, skip it
 18850 00002F9A 26C7050000              	mov	word [es:di],0
 18851                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18852                                  FCBNext:
 18853 00002F9F 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18854 00002FA2 E2F0                    	loop    FCBTest
 18855                                  FCBScanDone:
 18856                                  
 18857                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18858                                  
 18859 00002FA4 31DB                    	XOR     BX,BX
 18860                                  Scan:
 18861 00002FA6 53                      	push    bx
 18862 00002FA7 E80838                  	call	SFFromSFN
 18863 00002FAA 5B                      	pop     bx
 18864                                  	;jnc	short Scan1
 18865                                  	;retn
 18866                                  	; 18/12/2022
 18867 00002FAB 72B5                    	jc	short NO_Question ; retn
 18868                                  
 18869                                  ;M038
 18870                                  ; Do what the comment above says, check for busy state
 18871                                  
 18872                                  Scan1:
 18873                                  	;cmp	word [es:di],0
 18874                                  	;jz	short scan_next  ; MSDOS 3.3
 18875                                  	; MSDOS 6.0
 18876 00002FAD 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18877                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18878                                  				; Is Sft busy? ;M038
 18879 00002FB1 7519                    	jnz	short scan_next
 18880                                  ;
 18881                                  ; we have a SFT that is busy. See if it is for the current process
 18882                                  ;
 18883 00002FB3 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18884                                  	;cmp	[es:di+31h],ax
 18885 00002FB7 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18886 00002FBB 750F                    	jnz	short scan_next
 18887 00002FBD 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18888                                  	;cmp	[es:di+2Fh],ax
 18889 00002FC1 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18890 00002FC5 7505                    	jnz	short scan_next
 18891                                  
 18892                                  ; This SFT is labelled as ours.
 18893                                  
 18894 00002FC7 26C7050000              	mov	word [es:di],0
 18895                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18896                                  scan_next:
 18897 00002FCC 43                      	inc     bx
 18898 00002FCD EBD7                    	jmp     short Scan
 18899                                  
 18900                                  ;============================================================================
 18901                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18902                                  ;============================================================================
 18903                                  ; 23/07/2018 - Retro DOS v3.0
 18904                                  ; 18/05/2019 - Retro DOS v4.0
 18905                                  
 18906                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18907                                  ;
 18908                                  ;	DOS_CLOSE
 18909                                  ;	DOS_COMMIT
 18910                                  ;	FREE_SFT
 18911                                  ;	SetSFTTimes
 18912                                  ;
 18913                                  ;	Revision history:
 18914                                  ;
 18915                                  ;	   AN000  version 4.00	Jan. 1988
 18916                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18917                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18918                                  
 18919                                  ;Installed = TRUE
 18920                                  
 18921                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18922                                  ;---------------------------------------------------------------------------
 18923                                  ;
 18924                                  ; Procedure Name : DOS_CLOSE
 18925                                  ;
 18926                                  ; Inputs:
 18927                                  ;	[THISSFT] set to the SFT for the file being used
 18928                                  ; Function:
 18929                                  ;	Close the indicated file via the SFT
 18930                                  ; Returns:
 18931                                  ;	sf_ref_count decremented otherwise
 18932                                  ;	ES:DI point to SFT
 18933                                  ;	Carry set if error
 18934                                  ;	    AX has error code
 18935                                  ; DS preserved, others destroyed
 18936                                  ;---------------------------------------------------------------------------
 18937                                  
 18938                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18939                                  
 18940                                  ; 18/05/2019 - Retro DOS v4.0
 18941                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18942                                  
 18943                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18944                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18945                                  
 18946                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18947                                  
 18948                                  DOS_CLOSE:
 18949 00002FCF C43E[9E05]              	LES	DI,[THISSFT]
 18950                                  	;mov	bx,[ES:DI+5]
 18951 00002FD3 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18952                                  
 18953                                  ; Network closes are handled entirely by the net code.
 18954                                  
 18955                                  	;;test	bx,8000h
 18956                                  	;TEST	BX,sf_isnet
 18957                                  	; 17/12/2022
 18958                                  	;test	bh,80h
 18959 00002FD7 F6C780                  	test	bh,(sf_isnet>>8)
 18960 00002FDA 7406                    	JZ	short LocalClose
 18961                                  
 18962                                  	;CallInstall Net_Close,MultNET,6
 18963 00002FDC B80611                  	mov     ax,1106h
 18964 00002FDF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 18965                                  			; ES:DI -> SFT
 18966                                  			; SFT DPB field -> DPB of drive containing file
 18967                                  			; Return: CF set on error, AX = DOS error code
 18968                                  			; CF clear if successful
 18969 00002FE1 C3                      	retn
 18970                                  
 18971                                  ; All closes release the sharing information.
 18972                                  ; No commit releases sharing information
 18973                                  ;
 18974                                  ; All closes decrement the ref count.
 18975                                  ; No commit decrements the ref count.
 18976                                  
 18977                                  LocalClose:
 18978 00002FE2 E8A0E3                  	call	ECritDisk
 18979 00002FE5 E86B01                  	CALL	SetSFTTimes
 18980 00002FE8 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 18981                                  
 18982                                  ;hkn; SS is DOSDATA
 18983                                  	;Context DS
 18984 00002FEB 16                      	push	ss
 18985 00002FEC 1F                      	pop	ds
 18986                                  
 18987 00002FED 50                      	push	ax
 18988 00002FEE 53                      	push	bx
 18989 00002FEF E8AC44                  	call	ShareEnd
 18990 00002FF2 5B                      	pop	bx
 18991 00002FF3 58                      	pop	ax
 18992                                  
 18993                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 18994                                  
 18995                                  CloseEntry:
 18996 00002FF4 50                      	PUSH	AX
 18997                                  
 18998                                  ; File clean or device does not get stamped nor disk looked at.
 18999                                  
 19000                                  	;test	bx,0C0h
 19001                                  	; 17/12/2022
 19002 00002FF5 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19003                                  	;TEST	BX,devid_file_clean+devid_device
 19004 00002FF8 7403                    	JZ	short rdir
 19005                                  	; 14/11/2022
 19006 00002FFA E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19007                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19008                                  
 19009                                  ; Retrieve the directory entry for the file
 19010                                  
 19011                                  rdir:
 19012 00002FFD E8DA00                  	CALL	DirFromSFT
 19013                                  	;mov	al,5
 19014 00003000 B005                    	MOV	AL,error_access_denied
 19015 00003002 7303                    	JNC	short clook
 19016                                  	; 14/11/2022
 19017 00003004 E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19018                                  	;jc	short CloseFinish ; 24/07/2019
 19019                                  clook:
 19020                                  
 19021                                  ; ES:DI points to entry
 19022                                  ; DS:SI points to SFT
 19023                                  ; ES:BX points to buffer header
 19024                                  
 19025 00003007 57                      	push	di
 19026 00003008 56                      	push	si
 19027                                  	;lea	si,[si+20h]
 19028 00003009 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19029                                  
 19030                                  ; ES:DI point to directory entry
 19031                                  ; DS:SI point to unpacked name
 19032                                  
 19033 0000300C E865E2                  	call	XCHGP
 19034                                  
 19035                                  ; ES:DI point to unpacked name
 19036                                  ; DS:SI point to directory entry
 19037                                  
 19038 0000300F E8EC0E                  	call	MetaCompare
 19039 00003012 E85FE2                  	call	XCHGP
 19040 00003015 5E                      	pop	si
 19041 00003016 5F                      	pop	di
 19042 00003017 740C                    	JZ	short CLOSE_GO		; Name OK
 19043                                  Bye:	
 19044 00003019 89F7                    	MOV	DI,SI
 19045 0000301B 1E                      	PUSH	DS
 19046 0000301C 07                      	POP	ES			; ES:DI points to SFT
 19047 0000301D 16                      	PUSH	SS
 19048 0000301E 1F                      	POP	DS
 19049 0000301F F9                      	STC
 19050                                  	;mov	al,2
 19051 00003020 B002                    	MOV	AL,error_file_not_found
 19052 00003022 E99600                  	JMP	CloseFinish ; 24/07/2019
 19053                                  
 19054                                  	; 18/05/2019 - Retro DOS v4.0
 19055                                  CLOSE_GO:
 19056                                  	; MSDOS 6.0
 19057                                  	;test	word [si+2],8000h
 19058                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19059                                  	; 17/12/2022
 19060                                  	;test	byte [si+3],80h
 19061 00003025 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19062 00003029 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19063                                  	; MSDOS 3.3 & MSDOS 6.0
 19064                                  	;mov	ch,[es:di+0Bh]
 19065 0000302B 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19066                                  	;mov	al,[si+4]
 19067 0000302F 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19068                                  
 19069                                  ;hkn; SS override
 19070 00003032 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19071                                  	; MSDOS 3.3
 19072                                  	;;call	MatchAttributes
 19073                                  	;;JNZ	short Bye		; attributes do not match
 19074                                  	; 18/05/2019
 19075 00003036 EB07                    	JMP	SHORT setattr		;FT.
 19076                                  nofcb:
 19077                                  	; MSDOS 6.0
 19078                                  	;mov	al,[si+4]
 19079 00003038 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19080 0000303B 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19081                                  setattr:
 19082                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19083                                  	;or	byte [es:di+0Bh],20h
 19084 0000303F 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19085                                  	; MSDOS 6.0
 19086                                  	;mov	ax,[es:di+1Ah]
 19087 00003044 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19088                                  					;F.O. save old first cluster
 19089                                  ;hkn; SS override
 19090 00003048 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19091                                  
 19092                                  	;mov	ax,[si+0Bh]
 19093 0000304C 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19094                                  	;mov	[es:di+1Ah],ax
 19095 0000304F 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19096                                  	;mov	ax,[si+11h]
 19097 00003053 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19098                                  	;mov	[es:di+1Ch],ax
 19099 00003056 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19100                                  	;mov	ax,[si+13h]
 19101 0000305A 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19102                                  	;mov	[es:di+1Eh],ax
 19103 0000305D 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19104                                  	;mov	ax,[si+0Fh]
 19105 00003061 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19106                                  	;mov	[es:di+18h],ax
 19107 00003064 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19108                                  	;mov	ax,[si+0Dh]
 19109 00003068 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19110                                  	;mov	[es:di+16h],ax
 19111 0000306B 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19112                                  
 19113                                  	; MSDOS 6.0
 19114                                  ;; File Tagging
 19115 0000306F 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19116                                  				  ;LB. if already dirty		    ;AN000;
 19117 00003074 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19118                                  	; 02/06/2019
 19119 00003076 E8012C                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19121                                  	;or	byte [es:bx+5],40h
 19122 00003079 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19123                                  yesdirty4:
 19124 0000307E 1E                      	push	ds
 19125 0000307F 56                      	push	si
 19126                                  	; MSDOS 6.0
 19127                                  	;mov	cx,[si+0Bh]
 19128                                  	; 07/12/2022
 19129 00003080 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19130                                  ;hkn; SS override
 19131 00003083 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19132                                  	; MSDOS 3.3 
 19133                                  	;push	ss
 19134                                  	;pop	ds
 19135                                  	;MOV	AL,[THISDRV]
 19136                                  ;;; 10/1/86  update fastopen cache
 19137                                  	; MSDOS 3.3 & MSDOS 6.0
 19138 00003087 52                      	PUSH	DX
 19139 00003088 B400                    	MOV	AH,0			; dir entry update
 19140 0000308A 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19141                                  	; MSDOS 6.0
 19142 0000308C 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19143 0000308E 750D                    	JNZ	short do_update2	;AN005; no, do update
 19144 00003090 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19145                                  	;mov	di,[si+1Bh]
 19146 00003092 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19147                                  	;mov	cx,[si+1Dh]
 19148 00003095 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19149                                  	;mov	dh,[si+1Fh]
 19150 00003098 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19151 0000309B EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19152                                  do_update2:				;AN011;F.O.
 19153                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19154                                  	; 
 19155 0000309D 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19156 000030A2 7407                    	JZ	short do_update		;AN011;F.O. yes
 19157 000030A4 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19158 000030A6 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19159                                  do_update:				;AN005;
 19160                                  ;hkn; SS is DOSDATA
 19161                                  	;Context DS
 19162 000030AB 16                      	push	ss
 19163 000030AC 1F                      	pop	ds	
 19164                                  	; MSDOS 3.3 & MSDOS 6.0
 19165 000030AD E8E0F6                  	call	FastOpen_Update 	; invoke fastopen
 19166 000030B0 5A                      	POP	DX
 19167                                  
 19168                                  ;;; 10/1/86  update fastopen cache
 19169 000030B1 E8BE2A                  	call	FLUSHBUF		; flush all relevant buffers
 19170 000030B4 5F                      	pop	di
 19171 000030B5 07                      	pop	es
 19172                                  	;mov	al,5
 19173 000030B6 B005                    	MOV	AL,error_access_denied
 19174 000030B8 7201                    	JC	short CloseFinish
 19175                                  FREE_SFT_OK:
 19176 000030BA F8                      	CLC				; signal no error.
 19177                                  CloseFinish:
 19178                                  
 19179                                  ; Indicate to the device that the SFT is being closed.
 19180                                  
 19181                                  ;;;; 7/21/86
 19182 000030BB 9C                      	PUSHF				; save flag from DirFromSFT
 19183 000030BC E81F16                  	call	DEV_CLOSE_SFT
 19184 000030BF 9D                      	POPF
 19185                                  ;;;; 7/21/86
 19186                                  ;
 19187                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19188                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19189                                  ; going to be moving from busy to free.
 19190                                  ;
 19191 000030C0 59                      	POP	CX			; get old ref count
 19192 000030C1 9C                      	PUSHF
 19193 000030C2 49                      	DEC	CX			; if cx != 1
 19194 000030C3 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19195 000030C5 26890D                  	mov	[es:di],cx
 19196                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19197                                  NoFree:
 19198 000030C8 E8D5E2                  	call	LCritDisk
 19199 000030CB 9D                      	POPF
 19200 000030CC C3                      	retn
 19201                                  
 19202                                  ;---------------------------------------------------------------------------
 19203                                  ;
 19204                                  ; Procedure Name : FREE_SFT
 19205                                  ;
 19206                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19207                                  ; Flags preserved. Return old ref count in AX
 19208                                  ;
 19209                                  ; Note that busy is indicated by the SFT ref count being -1.
 19210                                  ;
 19211                                  ;---------------------------------------------------------------------------
 19212                                  
 19213                                  FREE_SFT:
 19214 000030CD 9C                      	PUSHF		; Save carry state
 19215 000030CE 268B05                  	mov	ax,[es:di]
 19216                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19217 000030D1 48                      	DEC	AX
 19218 000030D2 7501                    	JNZ	short SetCount
 19219 000030D4 48                      	DEC	AX
 19220                                  SetCount:
 19221 000030D5 268705                  	xchg	ax,[es:di]
 19222                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19223 000030D8 9D                      	POPF
 19224 000030D9 C3                      	retn
 19225                                  
 19226                                  	; 18/05/2019 - Retro DOS v4.0
 19227                                  
 19228                                  ;----------------------------------------------------------------------------
 19229                                  ;
 19230                                  ; Procedure Name : DirFromSFT
 19231                                  ;
 19232                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19233                                  ;
 19234                                  ;   Inputs:	ES:DI point to SFT
 19235                                  ;		DS = DOSDATA
 19236                                  ;   Outputs:
 19237                                  ;		EXTERR_LOCUS = errLOC_Disk
 19238                                  ;		CurBuf points to buffer
 19239                                  ;		Carry Clear -> operation OK
 19240                                  ;		    ES:DI point to entry
 19241                                  ;		    ES:BX point to buffer
 19242                                  ;		    DS:SI point to SFT
 19243                                  ;		Carry SET   -> operation failed
 19244                                  ;		    registers trashified
 19245                                  ;   Registers modified: ALL
 19246                                  ;----------------------------------------------------------------------------
 19247                                  
 19248                                  DirFromSFT:
 19249                                  	;mov	byte [EXTERR_LOCUS],2
 19250 000030DA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19251 000030DF 06                      	push	es
 19252 000030E0 57                      	push	di
 19253                                  	; MSDOS 3.3
 19254                                  	;;mov	dx,[es:di+1Dh]
 19255                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19256                                  	; MSDOS 6.0
 19257                                  	;mov	dx,[es:[di+1Dh]
 19258 000030E1 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19259 000030E5 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19260                                  	;mov	dx,[es:di+1Bh]
 19261 000030E9 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19262                                  	; 19/05/2019
 19263 000030ED FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19264                                  	; MSDOS 3.3 & MSDOS 6.0
 19265 000030F1 52                      	PUSH	DX
 19266 000030F2 E8FF26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19267                                  					; [THISDPB] set
 19268 000030F5 5A                      	POP	DX
 19269 000030F6 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19270 000030FA 7225                    	JC	short PopDone
 19271 000030FC 30C0                    	XOR	AL,AL			; Pre read
 19272                                  	;mov	byte [ALLOWED],18h
 19273 000030FE C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19274 00003103 E86E29                  	call	GETBUFFR
 19275 00003106 7219                    	JC	short PopDone
 19276 00003108 5E                      	pop	si
 19277 00003109 1F                      	pop	ds			; Get back SFT pointer
 19278                                  
 19279                                  ;hkn; SS override
 19280 0000310A 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19281                                  	;or	byte [es:di+5],4
 19282 0000310F 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19283 00003114 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19284                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19285                                  	;lea	di,[di+20] ; MSDOS 6.0
 19286 00003116 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19287                                  	;mov	al,32
 19288 00003119 B020                    	MOV	AL,dir_entry.size
 19289                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19290 0000311B F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19291 0000311E 01C7                    	ADD	DI,AX			; Point at the entry
 19292 00003120 C3                      	retn				; carry is clear
 19293                                  PopDone:
 19294 00003121 5F                      	pop	di
 19295 00003122 07                      	pop	es
 19296                                  PopDone_retn:
 19297 00003123 C3                      	retn
 19298                                  
 19299                                  ;----------------------------------------------------------------------------
 19300                                  ;
 19301                                  ;**	DOS_Commit - UPdate Directory Entries
 19302                                  ;
 19303                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19304                                  ;		(DS) = DOSGROUP
 19305                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19306                                  ;	USES	all but DS
 19307                                  ;
 19308                                  ;----------------------------------------------------------------------------
 19309                                  
 19310                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19311                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19312                                  
 19313                                  DOS_COMMIT:
 19314                                  	;hkn; called from srvcall. DS already set up.
 19315 00003124 C43E[9E05]              	LES	DI,[THISSFT]
 19316                                  	;mov	bx,[es:di+5]
 19317 00003128 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19318                                  	;test	bx,0C0h
 19319                                  	; 17/12/2022
 19320 0000312C F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19321                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19322 0000312F 75F2                    	jnz	short PopDone_retn
 19323                                  	;test	bx,8000h
 19324                                  	; 17/12/2022
 19325                                  	;test	bh,80h
 19326 00003131 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19327                                  	;TEST	BX,sf_isnet ; 8000h
 19328 00003134 7406                    	JZ	short LOCAL_COMMIT
 19329                                  
 19330                                  ;IF NOT Installed
 19331                                  ;	transfer NET_COMMIT
 19332                                  ;ELSE
 19333                                  	;mov	ax,1107h
 19334 00003136 B80711                  	MOV	AX,(MultNET<<8)|7
 19335 00003139 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19336                                  			; ES:DI -> SFT
 19337                                  			; SFT DPB field -> DPB of drive containing file
 19338                                  			; Return: CF set on error, AX = DOS error code
 19339                                  			; CF clear if successful
 19340                                  localcommit_retn: ; 18/12/2022	
 19341 0000313B C3                      	retn
 19342                                  ;ENDIF
 19343                                  
 19344                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19345                                  ; There are three ways we can do this. One is to enter a critical section to
 19346                                  ; protect a potential free. The second is to increment the ref count to mask
 19347                                  ; the close decrementing.
 19348                                  ;
 19349                                  ; The proper way is to let the caller's of close decide if a decrement should
 19350                                  ; be done. We do this by providing another entry into close after the
 19351                                  ; decrement and after the share information release.
 19352                                  
 19353                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19354                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19355                                  
 19356                                  LOCAL_COMMIT:
 19357 0000313C E846E2                  	call	ECritDisk
 19358                                  	; MSDOS 6.0
 19359 0000313F E843E2                  	call	ECritDisk	;PTM.
 19360 00003142 E80E00                  	call	SetSFTTimes
 19361 00003145 B8FFFF                  	MOV	AX,-1
 19362 00003148 E8A9FE                  	call	CloseEntry
 19363                                  	; MSDOS 6.0
 19364 0000314B 9C                      	PUSHF			;PTM.				;AN000;
 19365 0000314C E88715                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19366 0000314F 9D                      	POPF			;PTM.				;AN000;
 19367                                  	;call	LCritDisk	;PTM.				;AN000;
 19368                                  	; 18/12/2022
 19369 00003150 E94DE2                  	jmp	LCritDisk
 19370                                  ;localcommit_retn:
 19371                                  ;	retn
 19372                                  
 19373                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19374                                  ;----------------------------------------------------------------------------
 19375                                  ;
 19376                                  ; Procedure Name : SetSFTTimes
 19377                                  ;
 19378                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19379                                  ;   Reflect these times in other SFT's for the same file.
 19380                                  ;
 19381                                  ;   Inputs:	ES:DI point to SFT
 19382                                  ;		BX = sf_flags set apprpriately
 19383                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19384                                  ;   Registers modified: All except ES:DI, BX, AX
 19385                                  ;
 19386                                  ;----------------------------------------------------------------------------
 19387                                  
 19388                                  SetSFTTimes:
 19389                                  ;	File clean or device does not get stamped nor disk looked at.
 19390                                  	
 19391                                  	;test	bx,0C0h
 19392                                  	; 17/12/2022
 19393 00003153 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19394                                  	;TEST	BX,devid_file_clean+devid_device
 19395                                  	;retnz				; clean or device => no timestamp
 19396 00003156 75E3                    	jnz	short localcommit_retn
 19397                                  
 19398                                  ;	file and dirty. See if date is good
 19399                                  
 19400                                  	;test	bx,4000h
 19401                                  	; 17/12/2022
 19402                                  	;test	bh,40h
 19403 00003158 F6C740                  	test	bh,(sf_close_nodate>>8)
 19404                                  	;TEST	BX,sf_close_nodate
 19405                                  	;retnz				; nodate => no timestamp
 19406 0000315B 75DE                    	jnz	short localcommit_retn
 19407                                  
 19408 0000315D 50                      	push	ax
 19409 0000315E 53                      	push	bx
 19410 0000315F E8E4D9                  	call	DATE16			; Date/Time to AX/DX
 19411                                  	;mov	[es:di+0Fh],ax
 19412 00003162 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19413                                  	;mov	[es:di+0Dh],dx
 19414 00003166 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19415 0000316A 31C0                    	XOR	AX,AX
 19416                                  ;if installed
 19417                                  	;call	JShare + 14 * 4
 19418 0000316C FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19419                                  ;else
 19420                                  ;	call	ShSU
 19421                                  ;endif
 19422 00003170 5B                      	pop	bx
 19423 00003171 58                      	pop	ax
 19424 00003172 C3                      	retn
 19425                                  
 19426                                  ;============================================================================
 19427                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19428                                  ;============================================================================
 19429                                  ; 23/07/2018 - Retro DOS v3.0
 19430                                  ; 18/05/2019 - Retro DOS v4.0
 19431                                  
 19432                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19433                                  
 19434                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19435                                  ;NAME  DIRCALL
 19436                                  
 19437                                  ;**	Low level directory manipulation routines for making removing and
 19438                                  ;	  verifying local or NET directories
 19439                                  ;
 19440                                  ;	DOS_MKDIR
 19441                                  ;	DOS_CHDIR
 19442                                  ;	DOS_RMDIR
 19443                                  ;
 19444                                  ;	Modification history:
 19445                                  ;
 19446                                  ;		Created: ARR 30 March 1983
 19447                                  
 19448                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19449                                  ;---------------------------------------------------------------------------
 19450                                  ;
 19451                                  ; Procedure Name : DOS_MkDir
 19452                                  ;
 19453                                  ; Inputs:
 19454                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19455                                  ;		terminated)
 19456                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19457                                  ;		( = -1 if current dir not involved, else
 19458                                  ;		 Points to first char after last "/" of current dir part)
 19459                                  ;	[THISCDS] Points to CDS being used
 19460                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19461                                  ; Function:
 19462                                  ;	Make a new directory
 19463                                  ; Returns:
 19464                                  ;	Carry Clear
 19465                                  ;		No error
 19466                                  ;	Carry Set
 19467                                  ;	    AX is error code
 19468                                  ;		error_path_not_found
 19469                                  ;			Bad path (not in curr dir part if present)
 19470                                  ;		error_bad_curr_dir
 19471                                  ;			Bad path in current directory part of path
 19472                                  ;		error_access_denied
 19473                                  ;			Already exists, device name
 19474                                  ; DS preserved, Others destroyed
 19475                                  ;---------------------------------------------------------------------------
 19476                                  
 19477                                  ;hkn; called from path.asm. DS already set up.
 19478                                  
 19479                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19480                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19481                                  
 19482                                  DOS_MKDIR:
 19483 00003173 E84AE1                  	call	TestNet
 19484 00003176 7313                    	JNC	short LOCAL_MKDIR
 19485                                  
 19486                                  ;IF NOT Installed
 19487                                  ;	transfer NET_MKDIR
 19488                                  ;ELSE
 19489                                  	;mov	ax,1103h
 19490 00003178 B80311                  	MOV	AX,(MultNET<<8)|3
 19491 0000317B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19492                                  			; SS = DOS CS
 19493                                  			; SDA first filename pointer -> fully-qualified directory name
 19494                                  			; SDA CDS pointer -> current directory
 19495                                  			; Return: CF set on error, AX = DOS error code
 19496                                  			; CF clear if successful
 19497 0000317D C3                      	retn
 19498                                  ;ENDIF
 19499                                  
 19500                                  NODEACCERRJ:
 19501                                  	;mov	ax,5
 19502 0000317E B80500                  	MOV	AX,error_access_denied
 19503                                  _BadRet:
 19504 00003181 F9                      	STC
 19505                                  	;call	LCritDisk
 19506                                  	;retn
 19507                                  	; 18/12/2022
 19508 00003182 E91BE2                  	jmp	LCritDisk
 19509                                  
 19510                                  PATHNFJ:
 19511 00003185 E818E2                  	call	LCritDisk
 19512 00003188 E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19513                                  
 19514                                  LOCAL_MKDIR:
 19515 0000318B E8F7E1                  	call	ECritDisk
 19516                                  
 19517                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19518                                  
 19519 0000318E 8C16[A005]              	MOV	[THISSFT+2],SS
 19520                                  
 19521                                  ;hkn; DOSDATA
 19522 00003192 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19523                                  
 19524                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19525                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19526                                  
 19527                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19528 00003198 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19529                                  				; make sure SHARER won't complain.
 19530                                  	;mov	al,10h
 19531 0000319E B010                    	MOV	AL,attr_directory
 19532 000031A0 E8E818                  	call	MakeNode
 19533 000031A3 72E0                    	JC	short PATHNFJ
 19534 000031A5 83F803                  	CMP	AX,3
 19535 000031A8 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19536 000031AA C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19537 000031AE C53E[E205]              	LDS	DI,[CURBUF]
 19538 000031B2 29FE                    	SUB	SI,DI
 19539 000031B4 56                      	PUSH	SI		; Pointer to dir_first
 19540                                  	; MSDOS 6.0
 19541                                  	;push	word [DI+8]
 19542 000031B5 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19543                                  	; MSDOS 3.3 & MSDOS 6.0
 19544                                  	;push	word [di+6]
 19545 000031B8 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19546 000031BB 16                      	push	ss
 19547 000031BC 1F                      	pop	ds
 19548 000031BD FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19549 000031C1 31C0                    	XOR	AX,AX
 19550 000031C3 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19551 000031C6 E8F517                  	call	NEWDIR
 19552 000031C9 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19553 000031CB E89C0D                  	call	GETENT		; First entry
 19554 000031CE 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19555 000031D0 C43E[E205]              	LES	DI,[CURBUF]
 19556                                  
 19557                                  	; MSDOS 6.0
 19558 000031D4 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19559                                  				 ;LB. if already dirty		    ;AN000;
 19560 000031D9 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19561 000031DB E89C2A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19562                                  	
 19563                                  	; MSDOS 3.3 & MSDOS 6.0
 19564                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19565 000031DE 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19566                                  yesdirty5:
 19567                                  	;;add	di,16 ; MSDOS 3.3
 19568                                  	;add	di,20 ; MSDOS 6.0
 19569 000031E3 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19570 000031E6 B82E20                  	MOV	AX,202EH	; ". "
 19571 000031E9 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19572 000031ED E87718                  	call	SETDOTENT
 19573 000031F0 B82E2E                  	MOV	AX,2E2EH	; ".."
 19574 000031F3 5A                      	POP	DX		; Parent
 19575 000031F4 E87018                  	call	SETDOTENT
 19576 000031F7 C42E[8A05]              	LES	BP,[THISDPB]
 19577                                  	;mov	byte [ALLOWED],18h
 19578 000031FB C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19579 00003200 5A                      	POP	DX		; Entry sector
 19580                                  	; MSDOS 6.0
 19581 00003201 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19582                                  
 19583 00003205 30C0                    	XOR	AL,AL		; Pre read
 19584 00003207 E86A28                  	call	GETBUFFR
 19585 0000320A 7262                    	JC	short NODEEXISTSP
 19586 0000320C 8B16[C205]              	MOV	DX,[DIRSTART]
 19587 00003210 C53E[E205]              	LDS	DI,[CURBUF]
 19588                                  	;or	byte [di+5],4
 19589 00003214 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19590 00003218 5E                      	POP	SI		; dir_first pointer
 19591 00003219 01FE                    	ADD	SI,DI
 19592 0000321B 8914                    	MOV	[SI],DX
 19593 0000321D 31D2                    	XOR	DX,DX
 19594 0000321F 895402                  	MOV	[SI+2],DX	; Zero size
 19595 00003222 895404                  	MOV	[SI+4],DX
 19596                                  DIRUP:
 19597                                  	; MSDOS 6.0
 19598 00003225 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19599                                  	;			 ;LB. if already dirty 		   ;AN000;
 19600 00003229 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19601 0000322B E84C2A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19602                                  	
 19603                                  	; MSDOS 3.3 & MSDOS 6.0
 19604                                  	;or	byte [di+5],40h
 19605 0000322E 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19606                                  yesdirty6:
 19607 00003232 16                      	push	ss
 19608 00003233 1F                      	pop	ds
 19609 00003234 268A4600                	mov	al,[es:bp]
 19610                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19611 00003238 E83729                  	call	FLUSHBUF
 19612                                  	;mov	ax,5
 19613 0000323B B80500                  	MOV	AX,error_access_denied
 19614                                  	;call	LCritDisk
 19615                                  	;retn
 19616                                  	; 18/12/2022
 19617 0000323E E95FE1                  	jmp	LCritDisk
 19618                                  
 19619                                  NODEEXISTSPOPDEL:
 19620 00003241 5A                      	POP	DX		; Parent
 19621 00003242 5A                      	POP	DX		; Entry sector
 19622                                  	; MSDOS 6.0 
 19623 00003243 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19624 00003247 C42E[8A05]              	LES	BP,[THISDPB]
 19625                                  	;mov	byte [ALLOWED],18h
 19626 0000324B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19627 00003250 30C0                    	XOR	AL,AL		; Pre read
 19628 00003252 E81F28                  	call	GETBUFFR
 19629 00003255 7217                    	JC	short NODEEXISTSP
 19630 00003257 C53E[E205]              	LDS	DI,[CURBUF]
 19631                                  	;or	byte [di+5],4
 19632 0000325B 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19633 0000325F 5E                      	POP	SI		; dir_first pointer
 19634 00003260 01FE                    	ADD	SI,DI
 19635                                  	;sub	si,1Ah ; 26
 19636 00003262 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19637 00003265 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19638 00003268 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19639                                  NODEEXISTS:
 19640 0000326B E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19641                                  
 19642                                  NODEEXISTSP:
 19643 0000326E 5E                      	POP	SI		; Clean stack
 19644 0000326F EBFA                    	JMP	short NODEEXISTS
 19645                                  
 19646                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19647                                  
 19648                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19649                                  ;----------------------------------------------------------------------------
 19650                                  ;
 19651                                  ; Procedure Name : DOS_ChDir
 19652                                  ;
 19653                                  ; Inputs:
 19654                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19655                                  ;		terminated)
 19656                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19657                                  ;		( = -1 if current dir not involved, else
 19658                                  ;		 Points to first char after last "/" of current dir part)
 19659                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19660                                  ; Function:
 19661                                  ;	Validate the path for potential new current directory
 19662                                  ; Returns:
 19663                                  ;	NOTE:
 19664                                  ;	    [SATTRIB] is modified by this call
 19665                                  ;	Carry Clear
 19666                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19667                                  ;		Caller must NOT set ID fields on a NET CDS.
 19668                                  ;	Carry Set
 19669                                  ;	    AX is error code
 19670                                  ;		error_path_not_found
 19671                                  ;			Bad path
 19672                                  ;		error_access_denied
 19673                                  ;			device or file name
 19674                                  ; DS preserved, Others destroyed
 19675                                  ;----------------------------------------------------------------------------
 19676                                  
 19677                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19678                                  
 19679                                  ; 18/05/2019 - Retro DOS v4.0
 19680                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19681                                  
 19682                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19683                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19684                                  
 19685                                  DOS_CHDIR:
 19686 00003271 E84CE0                  	call	TestNet
 19687 00003274 7306                    	JNC	short LOCAL_CHDIR
 19688                                  
 19689                                  ;IF NOT Installed
 19690                                  ;	transfer NET_CHDIR
 19691                                  ;ELSE
 19692                                  	;mov	ax,1105h
 19693 00003276 B80511                  	MOV	AX,(MultNET<<8)|5
 19694 00003279 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19695                                  			; SS = DOS CS
 19696                                  			; SDA first filename pointer -> fully-qualified directory name
 19697                                  			; SDA CDS pointer -> current directory
 19698                                  			; Return: CF set on error, AX = DOS error code
 19699                                  			; CF clear if successful
 19700 0000327B C3                      	retn
 19701                                  ;ENDIF
 19702                                  
 19703                                  LOCAL_CHDIR:
 19704 0000327C E806E1                  	call	ECritDisk
 19705                                  	; MSDOS 6.0
 19706                                  	;;test	word [es:di+43h],2000h
 19707                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19708                                  	; 17/12/2022
 19709                                  	;test	byte [es:di+44h],20h
 19710 0000327F 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19711 00003284 7406                    	JZ	short nojoin		   ;PTM.
 19712                                  	;mov	word [es:di+49h], 0FFFFh
 19713 00003286 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19714                                  nojoin:
 19715                                  	; MSDOS 3.3 & MSDOS 6.0
 19716 0000328C C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19717                                  	;mov	byte [SATTRIB],16h
 19718 00003291 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19719                                  				; Dir calls can find these
 19720                                  ; DOS 3.3  6/24/86 FastOpen
 19721 00003296 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19722 0000329B E85A0D                  	call	GETPATH
 19723 0000329E 9C                      	PUSHF						;AN000;
 19724 0000329F 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19725 000032A4 9D                      	POPF						;AN000;
 19726                                  ; DOS 3.3  6/24/86 FastOpen
 19727                                  
 19728                                  	; MSDOS 3.3
 19729                                  	;mov	byte [FastOpenFlg],0
 19730                                  	
 19731                                  	;mov	ax,3
 19732 000032A5 B80300                  	MOV	AX,error_path_not_found
 19733 000032A8 7207                    	JC	short ChDirDone
 19734 000032AA 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19735 000032AC 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19736 000032B0 F8                      	CLC
 19737                                  ChDirDone:
 19738                                  	;call	LCritDisk
 19739                                  	;retn
 19740                                  	; 18/12/2022
 19741 000032B1 E9ECE0                  	jmp	LCritDisk
 19742                                  
 19743                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19744                                  ;----------------------------------------------------------------------------
 19745                                  ;
 19746                                  ; Procedure Name : DOS_RmDir
 19747                                  ;
 19748                                  ; Inputs:
 19749                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19750                                  ;		terminated)
 19751                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19752                                  ;		( = -1 if current dir not involved, else
 19753                                  ;		 Points to first char after last "/" of current dir part)
 19754                                  ;	[THISCDS] Points to CDS being used
 19755                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19756                                  ; Function:
 19757                                  ;	Remove a directory
 19758                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19759                                  ; Returns:
 19760                                  ;	NOTE:
 19761                                  ;	    [SATTRIB] is modified by this call
 19762                                  ;	Carry Clear
 19763                                  ;		No error
 19764                                  ;	Carry Set
 19765                                  ;	    AX is error code
 19766                                  ;		error_path_not_found
 19767                                  ;			Bad path (not in curr dir part if present)
 19768                                  ;		error_bad_curr_dir
 19769                                  ;			Bad path in current directory part of path
 19770                                  ;		error_access_denied
 19771                                  ;			device or file name, root directory
 19772                                  ;			Bad directory ('.' '..' messed up)
 19773                                  ; DS preserved, Others destroyed
 19774                                  ;----------------------------------------------------------------------------
 19775                                  
 19776                                  ;hkn; called from path.asm. DS already set up.
 19777                                  
 19778                                  ; 18/05/2019 - Retro DOS v4.0
 19779                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19780                                  
 19781                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19782                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19783                                  
 19784                                  DOS_RMDIR:
 19785 000032B4 E809E0                  	call	TestNet
 19786 000032B7 7306                    	JNC	short LOCAL_RMDIR
 19787                                  
 19788                                  ;IF NOT Installed
 19789                                  ;	transfer NET_RMDIR
 19790                                  ;ELSE
 19791                                  	;mov	ax,1101h
 19792 000032B9 B80111                  	MOV	AX,(MultNET<<8)|1
 19793 000032BC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19794                                  			; SS = DOS CS
 19795                                  			; SDA first filename pointer -> fully-qualified directory name
 19796                                  			; SDA CDS pointer -> current directory
 19797                                  			; Return: CF set on error, AX = DOS error code
 19798                                  			; CF clear if successful
 19799 000032BE C3                      	retn
 19800                                  ;ENDIF
 19801                                  
 19802                                  LOCAL_RMDIR:
 19803 000032BF E8C3E0                  	call	ECritDisk
 19804 000032C2 C606[4C03]00            	MOV	byte [NoSetDir],0
 19805                                  	;mov	byte [SATTRIB],16h
 19806 000032C7 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19807                                  					; Dir calls can find these
 19808 000032CC E8290D                  	call	GETPATH
 19809 000032CF 720C                    	JC	short NOPATH		; Path not found
 19810 000032D1 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19811 000032D3 8B3E[C205]              	MOV	DI,[DIRSTART]
 19812 000032D7 09FF                    	OR	DI,DI			; Root ?
 19813 000032D9 750E                    	JNZ	short rmdir_get_buf	; No
 19814 000032DB EB09                    	JMP	SHORT NOTDIRPATH
 19815                                  
 19816                                  NOPATH:
 19817                                  	;mov	ax,3
 19818 000032DD B80300                  	MOV	AX,error_path_not_found
 19819 000032E0 E99EFE                  	JMP	_BadRet
 19820                                  
 19821                                  NOTDIRPATHPOP:
 19822 000032E3 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19823 000032E4 58                      	POP	AX
 19824                                  NOTDIRPATHPOP2:
 19825 000032E5 58                      	POP	AX
 19826                                  NOTDIRPATH:
 19827 000032E6 E995FE                  	JMP	NODEACCERRJ
 19828                                  
 19829                                  rmdir_get_buf:
 19830 000032E9 C53E[E205]              	LDS	DI,[CURBUF]
 19831 000032ED 29FB                    	SUB	BX,DI		; Compute true offset
 19832 000032EF 53                      	PUSH	BX		; Save entry pointer
 19833                                  	
 19834                                  	; MSDOS 6.0
 19835                                  	;push	word [di+8]
 19836 000032F0 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19837                                  	
 19838                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19839                                  	;push	word [di+6]
 19840 000032F3 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19841                                  
 19842                                  ;hkn; SS is DOSDATA
 19843                                  	;context DS
 19844 000032F6 16                      	push	ss
 19845 000032F7 1F                      	pop	ds
 19846                                  	;context ES
 19847 000032F8 16                      	push	ss
 19848 000032F9 07                      	pop	es
 19849                                  
 19850                                  ;hkn; NAME1 is in DOSDATA
 19851 000032FA BF[4B05]                	MOV	DI,NAME1
 19852 000032FD B03F                    	MOV	AL,'?'
 19853 000032FF B90B00                  	MOV	CX,11
 19854 00003302 F3AA                    	REP	STOSB
 19855 00003304 30C0                    	XOR	AL,AL
 19856 00003306 AA                      	STOSB				; Nul terminate it
 19857 00003307 E8900F                  	call	STARTSRCH		; Set search
 19858 0000330A E85A0C                  	call	GETENTRY		; Get start of directory
 19859 0000330D 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19860 0000330F 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19861 00003313 89DE                    	MOV	SI,BX
 19862 00003315 AD                      	LODSW
 19863                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19864 00003316 3D2E20                  	cmp	ax,202Eh ; ". "
 19865 00003319 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19866                                  	;add	si,30
 19867 0000331B 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19868 0000331E AD                      	LODSW
 19869                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19870                                  	;cmp	ax, '..'
 19871 0000331F 3D2E2E                  	cmp	ax,2E2Eh
 19872 00003322 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19873                                  
 19874                                  ;hkn; SS is DOSDATA
 19875                                  	;context DS
 19876 00003324 16                      	push	ss
 19877 00003325 1F                      	pop	ds
 19878 00003326 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19879 0000332C E8380C                  	call	GETENTRY		; Get next entry
 19880 0000332F 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19881                                  	;mov	byte [ATTRIB],16h
 19882 00003331 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19883 00003336 E82D0B                  	call	SRCH			; Do a search
 19884 00003339 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19885 0000333B 803E[4A03]00            	CMP	byte [FAILERR],0
 19886 00003340 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19887 00003342 C42E[8A05]              	LES	BP,[THISDPB]
 19888 00003346 8B1E[C205]              	MOV	BX,[DIRSTART]
 19889 0000334A E8811C                  	call	RELEASE 		; Release data in sub dir
 19890 0000334D 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19891 0000334F 5A                      	POP	DX			; Sector # of entry
 19892 00003350 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19893                                  	;mov	byte [ALLOWED],18h
 19894 00003354 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19895 00003359 30C0                    	XOR	AL,AL			; Pre read
 19896 0000335B E81627                  	call	GETBUFFR		; Get sector back
 19897 0000335E 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19898 00003360 C53E[E205]              	LDS	DI,[CURBUF]
 19899                                  	;or	byte [di+5],4
 19900 00003364 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19901 00003368 5B                      	POP	BX			; Pointer to start of entry
 19902 00003369 01FB                    	ADD	BX,DI			; Corrected
 19903 0000336B C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19904                                  
 19905                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19906 0000336E 1E                      	PUSH	DS
 19907                                  
 19908                                  ;hkn; SS is DOSDATA
 19909                                  	;context DS
 19910 0000336F 16                      	push	ss
 19911 00003370 1F                      	pop	ds
 19912                                  
 19913                                  	; MSDOS 6.0
 19914 00003371 E8EDF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19915                                  
 19916                                  ;	; MSDOS 3.3
 19917                                  ;_FastOpen_Delete:
 19918                                  ;	push	ax
 19919                                  ;	mov	si,[WFP_START]
 19920                                  ;	mov	bx,FastTable
 19921                                  ;	;mov	al,3  ; FONC_delete
 19922                                  ;	mov	al,FONC_delete
 19923                                  ;	call	far [BX+2]  ; FastTable+2
 19924                                  ;	pop	ax
 19925                                  
 19926 00003374 1F                      	POP	DS
 19927                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19928                                  
 19929 00003375 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19930                                  
 19931                                  ;============================================================================
 19932                                  ; DISK.ASM, MSDOS 6.0, 1991
 19933                                  ;============================================================================
 19934                                  ; 23/07/2018 - Retro DOS v3.0 
 19935                                  ; 04/05/2019 - Retro DOS v4.0
 19936                                  
 19937                                  ;	TITLE	DISK - Disk utility routines
 19938                                  ;	NAME	Disk
 19939                                  
 19940                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19941                                  ;
 19942                                  ;	SWAPCON
 19943                                  ;	SWAPBACK
 19944                                  ;	DOS_READ
 19945                                  ;	DOS_WRITE
 19946                                  ;	get_io_sft
 19947                                  ;	DirRead
 19948                                  ;	FIRSTCLUSTER
 19949                                  ;	SET_BUF_AS_DIR
 19950                                  ;	FATSecRd
 19951                                  ;	DREAD
 19952                                  ;	CHECK_WRITE_LOCK
 19953                                  ;	CHECK_READ_LOCK
 19954                                  ;
 19955                                  ;	Revision history:
 19956                                  ;
 19957                                  ;		A000   version 4.00  Jan. 1988
 19958                                  ;
 19959                                  ;----------------------------------------------------------------------------
 19960                                  ;
 19961                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19962                                  ;		error happens, DOS retries the entire block assuming that
 19963                                  ;		zero characters were transferred. Modified the code to take
 19964                                  ;		into account the number of characters transfered before
 19965                                  ;		retrying the operation.
 19966                                  ;
 19967                                  ;----------------------------------------------------------------------------
 19968                                  ;
 19969                                  
 19970                                  ;Installed = TRUE
 19971                                  
 19972                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 19973                                  
 19974                                  ; **** Drivers for file input from devices ****
 19975                                  ;----------------------------------------------------------------------------
 19976                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 19977                                  ;   of handles 0 and 1
 19978                                  ;
 19979                                  ;   Inputs:	DS is DOSDATA
 19980                                  ;   Outputs:	CONSWAP is set to false.
 19981                                  ;   Registers modified: none
 19982                                  ;----------------------------------------------------------------------------
 19983                                  
 19984                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 19985                                  
 19986                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 19987                                  ; 04/05/2019 - Retro DOS v4.0
 19988                                  
 19989                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 19990                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19991                                  
 19992                                  SWAPBACK:
 19993 00003378 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 19994 0000337D C3                      	retn
 19995                                  
 19996                                  ;----------------------------------------------------------------------------
 19997                                  ;
 19998                                  ; Procedure Name : SWAPCON
 19999                                  ;
 20000                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20001                                  ;
 20002                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20003                                  ;		DS is DOSDATA
 20004                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20005                                  ;   Registers modified: none
 20006                                  ;--------------------------------------------------------------------------
 20007                                  
 20008                                  SWAPCON:
 20009                                  	; MSDOS 3.3
 20010                                  	;push	es
 20011                                  	;push	di
 20012                                  	;mov	byte [CONSWAP],1
 20013                                  	;les	di,[THISSFT]
 20014                                  	;mov	word [CONSFT],di
 20015                                  	;mov	word [CONSFT+2],es
 20016                                  	;pop	di
 20017                                  	;pop	es
 20018                                  	;retn
 20019                                  
 20020                                  	; MSDOS 6.0
 20021 0000337E C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20022 00003383 50                      	push	ax
 20023 00003384 A1[9E05]                	mov	ax,[THISSFT]
 20024 00003387 A3[E605]                	mov	[CONSFT],ax
 20025 0000338A A1[A005]                	mov	ax,[THISSFT+2]
 20026 0000338D A3[E805]                	mov	[CONSFT+2],ax
 20027 00003390 58                      	pop	ax
 20028 00003391 C3                      	retn
 20029                                  
 20030                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20031                                  ; 04/05/2019 - Retro DOS v4.0
 20032                                  
 20033                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20034                                  ;-----------------------------------------------------------------------------
 20035                                  ;
 20036                                  ; Inputs:
 20037                                  ;	ThisSFT set to the SFT for the file being used
 20038                                  ;	[DMAADD] contains transfer address
 20039                                  ;	CX = No. of bytes to read
 20040                                  ;	DS = DOSDATA
 20041                                  ; Function:
 20042                                  ;	Perform read operation
 20043                                  ; Outputs:
 20044                                  ;    Carry clear
 20045                                  ;	SFT Position and cluster pointers updated
 20046                                  ;	CX = No. of bytes read
 20047                                  ;	ES:DI point to SFT
 20048                                  ;    Carry set
 20049                                  ;	AX is error code
 20050                                  ;	CX = 0
 20051                                  ;	ES:DI point to SFT
 20052                                  ; DS preserved, all other registers destroyed
 20053                                  ;
 20054                                  ;-----------------------------------------------------------------------------
 20055                                  
 20056                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20057                                  
 20058                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20059                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20060                                  
 20061                                  DOS_READ:
 20062 00003392 C43E[9E05]              	LES	DI,[THISSFT]
 20063                                  
 20064                                  ; Verify that the sft has been opened in a mode that allows reading.
 20065                                  
 20066                                  	;mov	al,[es:di+2]
 20067 00003396 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20068                                  	;and	al,0Fh
 20069 0000339A 240F                    	AND	AL,access_mask
 20070                                  	;cmp	al,1
 20071 0000339C 3C01                    	CMP	AL,open_for_write
 20072 0000339E 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20073 000033A0 E91506                  	jmp	SET_ACC_ERR
 20074                                  
 20075                                  READ_NO_MODE:
 20076 000033A3 E8ED04                  	call	SETUP
 20077 000033A6 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20078 000033A8 E82EDF                  	call	IsSFTNet
 20079 000033AB 7408                    	JZ	short LOCAL_READ
 20080                                  
 20081                                  ;IF NOT Installed
 20082                                  ;	transfer NET_READ
 20083                                  ;ELSE
 20084                                  	;mov	ax,1108h
 20085 000033AD B80811                  	MOV	AX,(MultNET<<8)|8
 20086 000033B0 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20087                                  			; ES:DI -> SFT
 20088                                  			; SFT DPB field -> DPB of drive containing file
 20089                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20090                                  			; Return: CF set on error, CX = bytes read
 20091 000033B2 C3                      	retn
 20092                                  ;ENDIF
 20093                                  
 20094                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20095                                  ; except return immediately.
 20096                                  
 20097                                  NoIORet:
 20098 000033B3 F8                      	CLC
 20099 000033B4 C3                      	retn
 20100                                  
 20101                                  LOCAL_READ:
 20102                                  	;test	word [es:di+5],80h
 20103                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20104 000033B5 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20105 000033BA 750E                    	JNZ	short READDEV
 20106                                  
 20107                                  	;mov	byte [EXTERR_LOCUS],2
 20108 000033BC C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20109 000033C1 E8C1DF                  	call	ECritDisk
 20110 000033C4 E8AD05                  	call	DISKREAD
 20111                                  
 20112                                  critexit:
 20113                                  	;call	LCritDisk
 20114                                  	;retn
 20115                                  	; 16/12/2022
 20116 000033C7 E9D6DF                  	jmp	LCritDisk
 20117                                  
 20118                                  ; We are reading from a device. Examine the status of the device to see if we
 20119                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20120                                  ; null device, we can safely indicate no transfer.
 20121                                  
 20122                                  READDEV:
 20123                                  	;mov	byte [EXTERR_LOCUS],4
 20124 000033CA C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20125                                  	;mov	bl,[es:di+5]
 20126 000033CF 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20127 000033D3 C43E[2C03]              	LES	DI,[DMAADD]
 20128                                  	;test	bl,40h
 20129 000033D7 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20130 000033DA 7407                    	JZ	short ENDRDDEVJ3
 20131                                  	;test	bl,4
 20132 000033DC F6C304                  	test	BL,devid_device_null	; NUL device?
 20133 000033DF 7405                    	JZ	short TESTRAW 		; NO
 20134 000033E1 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20135                                  ENDRDDEVJ3:
 20136                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20137                                  	;JMP	short ENDRDDEVJ2
 20138                                  	; 16/12/2022
 20139 000033E3 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20140                                  
 20141                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20142                                  ; bizarre std_con_string_input.
 20143                                  
 20144                                  TESTRAW:
 20145                                  	;test	bl,20h
 20146 000033E6 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20147 000033E9 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20148                                  	;test	bl,1
 20149 000033EB F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20150 000033EE 7461                    	JZ	short NOTRDCON
 20151 000033F0 E98F01                  	JMP	READCON
 20152                                  
 20153                                  DVRDRAW:
 20154 000033F3 06                      	PUSH	ES
 20155 000033F4 1F                      	POP	DS			; Xaddr to DS:DI
 20156                                  
 20157                                  	; 04/05/2019 - Retro DOS v4.0
 20158                                  
 20159                                  	; MSDOS 6.0
 20160                                  ;SR;
 20161                                  ;Check for win386 presence -- if present, do polled read of characters
 20162                                  
 20163 000033F5 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20164 000033FB 7408                    	jz	short ReadRawRetry	;not present
 20165 000033FD F6C301                  	test	bl,devid_device_con_in	;is it console device
 20166 00003400 7403                    	jz	short ReadRawRetry	;no, do normal read
 20167 00003402 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20168                                  
 20169                                  ReadRawRetry:
 20170 00003405 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20171 00003407 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20172 00003409 89C2                    	MOV	DX,AX			; Start at 0
 20173 0000340B E8C213                  	call	SETREAD
 20174 0000340E 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20175                                  
 20176                                  ;hkn; SS override
 20177 0000340F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20178 00003414 E84013                  	call	DEVIOCALL
 20179 00003417 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20180 00003419 B486                    	MOV	AH,86H			; Read error
 20181                                  
 20182                                  ;hkn; SS override
 20183 0000341B 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20184                                  	; MSDOS 3.3
 20185                                  	;test	di,8000h
 20186                                  	;jz	short CRDROK
 20187                                  	; MSDOS 6.0
 20188 00003420 09FF                    	or	di,di
 20189 00003422 7923                    	jns	short CRDROK		; no errors
 20190                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20191 00003424 E8C01F                  	call	CHARHARD
 20192 00003427 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20193                                  
 20194                                  	; 04/05/2019
 20195                                  
 20196                                  	; MSDOS 6.0
 20197 00003429 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20198 0000342E 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20199                                  
 20200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20201 00003433 08C0                    	OR	AL,AL
 20202 00003435 7410                    	JZ	short CRDROK		; Ignore
 20203 00003437 3C03                    	CMP	AL,3
 20204 00003439 7403                    	JZ	short CRDFERR 		; fail.
 20205 0000343B 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20206 0000343C EBC7                    	JMP	short ReadRawRetry	; Retry
 20207                                  
 20208                                  ; We have encountered a device-driver error. We have informed the user of it
 20209                                  ; and he has said for us to fail the system call.
 20210                                  
 20211                                  CRDFERR:
 20212 0000343E 5F                      	POP	DI			; Clean stack
 20213                                  DEVIOFERR:
 20214                                  
 20215                                  ;hkn; SS override
 20216 0000343F 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20217 00003444 E96F05                  	jmp	SET_ACC_ERR_DS
 20218                                  
 20219                                  CRDROK:
 20220 00003447 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20221 00003448 89D7                    	MOV	DI,DX
 20222                                  
 20223                                  ;hkn; SS override
 20224 0000344A 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20225                                  	;JMP	SHORT ENDRDDEVJ3
 20226                                  	; 16/12/2022
 20227 0000344F EB6B                    	jmp	short ENDRDDEVJ2
 20228                                  
 20229                                  ; We are going to do a cooked read on some character device. There is a
 20230                                  ; problem here, what does the data look like? Is it a terminal device, line
 20231                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20232                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20233                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20234                                  ; included in data). this "simulates" the way con works in cooked mode
 20235                                  ; reading one line at a time. With file data, however, the lines will look
 20236                                  ; like, LF line CR. This is a little weird.
 20237                                  
 20238                                  NOTRDCON:
 20239 00003451 8CC0                    	MOV	AX,ES
 20240 00003453 8ED8                    	MOV	DS,AX
 20241 00003455 89FB                    	MOV	BX,DI
 20242 00003457 31D2                    	XOR	DX,DX
 20243 00003459 89D0                    	MOV	AX,DX
 20244 0000345B 51                      	PUSH	CX
 20245 0000345C B90100                  	MOV	CX,1
 20246 0000345F E86E13                  	call	SETREAD
 20247 00003462 59                      	POP	CX
 20248                                  
 20249                                  ;hkn; SS override
 20250 00003463 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20251                                  	;lds	si,[si+7]
 20252 00003468 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20253                                  DVRDLP:
 20254 0000346B E8591D                  	call	DSKSTATCHK
 20255 0000346E E8E912                  	call	DEVIOCALL2
 20256 00003471 57                      	PUSH	DI		; Save "count" done
 20257 00003472 B486                    	MOV	AH,86H
 20258                                  
 20259                                  ;hkn; SS override
 20260 00003474 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20261                                  	
 20262                                  	; MSDOS 3.3
 20263                                  	;test	di,8000h
 20264                                  	;jz	short CRDOK
 20265                                  	; MSDOS 6.0
 20266 00003479 09FF                    	or	di,di
 20267 0000347B 7917                    	jns	short CRDOK
 20268                                  	
 20269 0000347D E8671F                  	call	CHARHARD
 20270 00003480 5F                      	POP	DI
 20271                                  
 20272                                  ;hkn; SS override
 20273 00003481 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20274 00003488 3C01                    	CMP	AL,1
 20275 0000348A 74DF                    	JZ	short DVRDLP		;Retry
 20276 0000348C 3C03                    	CMP	AL,3
 20277 0000348E 74AF                    	JZ	short DEVIOFERR		; FAIL
 20278 00003490 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20279 00003492 EB12                    	JMP	SHORT DVRDIGN
 20280                                  
 20281                                  CRDOK:
 20282 00003494 5F                      	POP	DI
 20283                                  
 20284                                  ;hkn; SS override
 20285 00003495 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20286                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20287 0000349B 751F                    	JNZ	short ENDRDDEVJ2
 20288                                  	; 16/12/2022
 20289                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20290                                  
 20291 0000349D 1E                      	PUSH	DS
 20292                                  
 20293                                  ;hkn; SS override
 20294 0000349E 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20295 000034A3 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20296 000034A5 1F                      	POP	DS
 20297                                  DVRDIGN:
 20298                                  
 20299                                  ;hkn; SS override
 20300 000034A6 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20301 000034AB 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20302 000034B2 47                      	INC	DI			; Next character
 20303 000034B3 3C1A                    	CMP	AL,1Ah			; ^Z?
 20304                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20305 000034B5 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20306                                  	; 16/12/2022
 20307                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20308 000034B7 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20309 000034B9 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20310 000034BB 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20311                                  					;  AX=FFFF which is not likely
 20312                                  ENDRDDEVJ2:
 20313                                  	; 16/12/2022
 20314                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20315                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20316 000034BC E98E00                  	jmp	ENDRDDEV
 20317                                  
 20318                                  	; 04/05/2019
 20319                                  
 20320                                  	; MSDOS 6.0
 20321                                  ;SR;
 20322                                  ;Polling code for raw read on CON when WIN386 is present
 20323                                  ;
 20324                                  ;At this point -- ds:di is transfer address
 20325                                  ;		  cx is count
 20326                                  
 20327                                  do_polling:
 20328 000034BF 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20329 000034C1 31C0                    	xor	ax,ax
 20330 000034C3 89C2                    	mov	dx,ax
 20331 000034C5 E80813                  	call	SETREAD			;prepare device packet
 20332                                  
 20333                                  do_io:
 20334                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20335                                  
 20336 000034C8 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20337 000034CD 1E                      	push	ds
 20338 000034CE 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20339 000034D3 E88112                  	call	DEVIOCALL		;call device driver
 20340 000034D6 1F                      	pop	ds
 20341                                  	
 20342                                  	;test	word [es:bx+3],8000h
 20343                                  	; 16/12/2022
 20344                                  	;test	byte [es:bx+4],80h
 20345 000034D7 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20346                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20347 000034DC 7413                    	jz	short check_busy	;no
 20348                                  
 20349 000034DE 1E                      	push	ds
 20350 000034DF 89FA                    	mov	dx,di
 20351                                  	;invoke charhard		;invoke int 24h handler
 20352 000034E1 E8031F                  	call	CHARHARD
 20353 000034E4 89D7                    	mov	di,dx
 20354 000034E6 08C0                    	or	al,al
 20355 000034E8 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20356 000034EA 3C03                    	cmp	al,3
 20357 000034EC 7448                    	jz	short devrderr		;user asked to fail
 20358 000034EE 1F                      	pop	ds
 20359 000034EF EBD7                    	jmp	short do_io		;user asked to retry
 20360                                  
 20361                                  check_busy:
 20362                                  	;test	word [es:bx+3],200h
 20363                                  	; 16/12/2022
 20364 000034F1 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20365                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20366 000034F6 7547                    	jnz	short no_char		;yes, no character available
 20367                                  
 20368                                  ;Character is available. Read in 1 character at a time until all characters
 20369                                  ;are read in or no character is available
 20370                                  
 20371 000034F8 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20372 000034FD 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20373 00003503 1E                      	push	ds
 20374 00003504 36C536[9E05]            	lds	si,[ss:THISSFT]
 20375 00003509 E84B12                  	call	DEVIOCALL
 20376                                  
 20377 0000350C 89FA                    	mov	dx,di
 20378 0000350E B486                    	mov	ah,86h
 20379                                  	;mov	di,[es:bx+3]
 20380 00003510 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20381 00003514 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20382 00003518 7410                    	jz	short next_char		;no,read next character
 20383                                  
 20384                                  	;invoke	charhard		;invoke int 24h handler
 20385 0000351A E8CA1E                  	call	CHARHARD
 20386 0000351D 89D7                    	mov	di,dx			;restore di
 20387 0000351F 08C0                    	or	al,al			;
 20388 00003521 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20389 00003523 3C03                    	cmp	al,3
 20390 00003525 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20391 00003527 1F                      	pop	ds
 20392 00003528 EB9E                    	jmp	short do_io		;user issued a retry
 20393                                  
 20394                                  next_char:
 20395 0000352A 1F                      	pop	ds
 20396 0000352B 89D7                    	mov	di,dx
 20397 0000352D 49                      	dec	cx			;decrement count
 20398 0000352E E318                    	jcxz	done_read		;all characters read in
 20399 00003530 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20400 00003534 EB92                    	jmp	short do_io			;read next character in
 20401                                  
 20402                                  devrderr:
 20403 00003536 5F                      	pop	di			;discard segment address
 20404 00003537 36C43E[9E05]            	les	di,[ss:THISSFT]
 20405                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20406 0000353C E97704                  	jmp     SET_ACC_ERR_DS
 20407                                  
 20408                                  no_char:
 20409                                  ;Since no character is available, we let win386 switch the VM out
 20410                                  
 20411 0000353F 50                      	push	ax
 20412 00003540 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20413 00003542 CD2A                    	int	2Ah			;indicate idle to WIN386
 20414                                  
 20415                                  ;When control returns from WIN386, we continue the raw read
 20416                                  
 20417 00003544 58                      	pop	ax
 20418 00003545 EB81                    	jmp	do_io
 20419                                  
 20420                                  pop_done_read:
 20421 00003547 1F                      	pop	ds
 20422                                  done_read:
 20423 00003548 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20424                                  
 20425                                  	; 16/12/2022
 20426                                  
 20427                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20428                                  	;jmp	ENDRDDEV ; 04/05/2019
 20429                                  
 20430                                  	; 04/05/2019 - Retro DOS v4.0
 20431                                  ENDRDDEV:
 20432 0000354D 16                      	push	ss
 20433 0000354E 1F                      	pop	ds
 20434 0000354F EB1F                    	jmp	short endrddev1
 20435                                  
 20436                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20437                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20438                                  
 20439                                  TRANBUF:
 20440 00003551 AC                      	LODSB
 20441 00003552 AA                      	STOSB
 20442 00003553 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20443 00003555 7503                    	JNZ	short NORMCH
 20444 00003557 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20445                                  NORMCH:
 20446 0000355A 3C0A                    	CMP	AL,c_LF ; 0Ah
 20447 0000355C E0F3                    	LOOPNZ	TRANBUF
 20448 0000355E 7507                    	JNZ	short ENDRDCON
 20449 00003560 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20450 00003562 E87EE1                  	call	OUTT		; Transmit linefeed
 20451 00003565 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20452                                  ENDRDCON:
 20453                                  ;hkn; SS is DOSDATA
 20454 00003567 16                      	push	ss
 20455 00003568 1F                      	pop	ds
 20456 00003569 E80CFE                  	CALL	SWAPBACK
 20457 0000356C 8936[2200]              	MOV	[CONTPOS],SI
 20458                                  
 20459                                  	; 16/12/2022
 20460                                  ;ENDRDDEV:
 20461                                  ;;hkn; SS is DOSDATA
 20462                                  ;	push	ss
 20463                                  ;	pop	ds
 20464                                  endrddev1:	; 04/05/2019
 20465 00003570 893E[B805]              	MOV	[NEXTADD],DI
 20466 00003574 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20467 00003576 C43E[9E05]              	LES	DI,[THISSFT]
 20468                                  	;and	byte [es:di+5],0BFh
 20469 0000357A 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20470                                  				; Mark as no more data available
 20471                                  SETSFTC:
 20472                                  	; 31/07/2019
 20473                                  	;call	SETSFT
 20474                                  	;retn
 20475 0000357F E9C804                  	jmp	SETSFT
 20476                                  
 20477                                  ; 16/12/2022
 20478                                  %if 0
 20479                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20480                                  ENDRDDEV:
 20481                                  ;hkn; SS is DOSDATA
 20482                                  	push	ss
 20483                                  	pop	ds
 20484                                  	MOV	[NEXTADD],DI
 20485                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20486                                  	LES	DI,[THISSFT]
 20487                                  	;and	byte [es:di+5],0BFh
 20488                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20489                                  				; Mark as no more data available
 20490                                  SETSFTC:
 20491                                  	;call	SETSFT
 20492                                  	;retn
 20493                                  	jmp	SETSFT	
 20494                                  %endif
 20495                                  
 20496                                  READCON:
 20497 00003582 E8F9FD                  	CALL	SWAPCON
 20498 00003585 8B36[2200]              	MOV	SI,[CONTPOS]
 20499 00003589 09F6                    	OR	SI,SI
 20500 0000358B 75C4                    	JNZ	short TRANBUF
 20501 0000358D 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20502 00003592 7406                    	JZ	short GETBUF
 20503 00003594 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20504                                  GETBUF:
 20505 0000359A 51                      	PUSH	CX
 20506 0000359B 06                      	PUSH	ES
 20507 0000359C 57                      	PUSH	DI
 20508                                  
 20509                                  ;hkn; CONBUF is in DOSDATA
 20510 0000359D BA[7B02]                	MOV	DX,CONBUF
 20511                                  
 20512 000035A0 E8B2DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20513 000035A3 5F                      	POP	DI
 20514 000035A4 07                      	POP	ES
 20515 000035A5 59                      	POP	CX
 20516                                  
 20517                                  ;hkn; CONBUF is in DOSDATA
 20518 000035A6 BE[7D02]                	MOV	SI,CONBUF+2
 20519                                  
 20520 000035A9 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20521 000035AC 75A3                    	JNZ	short TRANBUF
 20522 000035AE B01A                    	MOV	AL,1AH
 20523 000035B0 AA                      	STOSB
 20524 000035B1 4F                      	DEC	DI
 20525 000035B2 B00A                    	MOV	AL,c_LF
 20526 000035B4 E82CE1                  	call	OUTT		; Send linefeed
 20527 000035B7 31F6                    	XOR	SI,SI
 20528 000035B9 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20529                                  
 20530                                  ; 24/07/2018 - Retro DOS v3.0
 20531                                  
 20532                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20533                                  ;---------------------------------------------------------------------------
 20534                                  ;
 20535                                  ; Procedure Name : DOS_WRITE
 20536                                  ;
 20537                                  ; Inputs:
 20538                                  ;	ThisSFT set to the SFT for the file being used
 20539                                  ;	[DMAADD] contains transfer address
 20540                                  ;	CX = No. of bytes to write
 20541                                  ; Function:
 20542                                  ;	Perform write operation
 20543                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20544                                  ;		to current sf_position
 20545                                  ; Outputs:
 20546                                  ;    Carry clear
 20547                                  ;	SFT Position and cluster pointers updated
 20548                                  ;	CX = No. of bytes written
 20549                                  ;	ES:DI point to SFT
 20550                                  ;    Carry set
 20551                                  ;	AX is error code
 20552                                  ;	CX = 0
 20553                                  ;	ES:DI point to SFT
 20554                                  ; DS preserved, all other registers destroyed
 20555                                  ;---------------------------------------------------------------------------
 20556                                  
 20557                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20558                                  ;hkn; point to DOSDATA.
 20559                                  
 20560                                  ; 04/05/2019 - Retro DOS v4.0
 20561                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20562                                  
 20563                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20564                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20565                                  
 20566                                  DOS_WRITE:
 20567 000035BB C43E[9E05]              	LES	DI,[THISSFT]
 20568                                  	;mov	al,[ES:DI+2]
 20569 000035BF 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20570                                  	;and	al,0Fh
 20571 000035C3 240F                    	AND	AL,access_mask
 20572                                  	;cmp	al,0
 20573 000035C5 3C00                    	CMP	AL,open_for_read
 20574 000035C7 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20575                                  BadMode:
 20576 000035C9 E9EC03                  	jmp	SET_ACC_ERR
 20577                                  
 20578                                  ; NOTE: The following check for writting to a Read Only File is performed
 20579                                  ;	    ONLY on FCBs!!!!
 20580                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20581                                  ;	    of a read only file which can then be written to.
 20582                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20583                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20584                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20585                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20586                                  ;	    to a read-only file.
 20587                                  
 20588                                  Check_FCB_RO:
 20589                                  	;;test	word [es:di+2],8000h
 20590                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20591                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20592                                  	
 20593                                  	;test	byte [es:di+3],80h
 20594 000035CC 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20595 000035D1 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20596                                  
 20597                                  	;test	byte [es:di+4],1
 20598 000035D3 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20599 000035D8 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20600                                  WRITE_NO_MODE:
 20601 000035DA E8B602                  	call	SETUP
 20602 000035DD E8F9DC                  	call	IsSFTNet
 20603 000035E0 7406                    	JZ	short LOCAL_WRITE
 20604                                  
 20605                                  ;IF NOT Installed
 20606                                  ;	transfer NET_WRITE
 20607                                  ;ELSE
 20608                                  	;mov	ax,1109h
 20609 000035E2 B80911                  	MOV	AX,(MultNET<<8)|9
 20610 000035E5 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20611                                  			; ES:DI -> SFT
 20612                                  			; SFT DPB field -> DPB of drive containing file
 20613                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20614                                  			; Return: CF set on error, CX = bytes written
 20615 000035E7 C3                      	retn
 20616                                  ;ENDIF
 20617                                  
 20618                                  LOCAL_WRITE:
 20619                                  	;;test	word [es:di+5],80h
 20620                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20621                                  	;jnz	short WRTDEV
 20622                                  
 20623                                  	;test	byte [es:di+5],80h
 20624 000035E8 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20625 000035ED 756E                    	jnz	short WRTDEV
 20626                                  
 20627                                  	;mov	byte [EXTERR_LOCUS],2
 20628 000035EF C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20629 000035F4 E88EDD                  	call	ECritDisk
 20630                                  
 20631 000035F7 E80805                  	call	DISKWRITE
 20632                                  
 20633                                  	; 04/05/2019 - Retro DOS v4.0
 20634                                  
 20635                                  	; MSDOS 6.0
 20636                                  ; Extended Open
 20637 000035FA 7210                    	JC	short nocommit
 20638                                  	
 20639 000035FC C43E[9E05]              	LES	DI,[THISSFT]
 20640                                  	
 20641                                  	;;test	word [ES:DI+2],4000h
 20642                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20643                                  	;JZ	short nocommit
 20644                                  	
 20645                                  	;test	byte [ES:DI+3],40h
 20646 00003600 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20647 00003605 7405                    	JZ	short nocommit
 20648                                  	
 20649 00003607 51                      	PUSH	CX
 20650 00003608 E819FB                  	call	DOS_COMMIT
 20651 0000360B 59                      	POP	CX
 20652                                  nocommit:
 20653                                  ; Extended Open
 20654                                  	;call	LCritDisk
 20655                                  	;retn
 20656                                  	; 18/12/2022
 20657 0000360C E991DD                  	jmp	LCritDisk
 20658                                  
 20659                                  DVWRTRAW:
 20660 0000360F 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20661 00003611 E8EF11                  	call	SETWRITE
 20662 00003614 1E                      	PUSH	DS			; Save seg of transfer
 20663                                  
 20664                                  ;hkn; SS override
 20665 00003615 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20666 0000361A E83A11                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20667                                  
 20668 0000361D 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20669 0000361F B487                    	MOV	AH,87H
 20670                                  
 20671                                  ;hkn; SS override
 20672 00003621 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20673                                  
 20674                                  	; MSDOS 3.3
 20675                                  	;test	di,8000h
 20676                                  	;jz	short CWRTROK
 20677                                  
 20678                                  	; MSDOS 6.0
 20679 00003626 09FF                    	or	di,di
 20680 00003628 7920                    	jns	short CWRTROK
 20681                                  	
 20682                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20683 0000362A E8BA1D                  	call	CHARHARD
 20684                                  
 20685                                  	; 04/05/2019  - Retro DOS v4.0
 20686                                  
 20687                                  	; MSDOS 6.0
 20688 0000362D 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20689 00003632 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20690 00003634 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20691 00003639 89DF                    	mov	di,bx			;				M065
 20692                                  	
 20693                                  	; MSDOS 3.3
 20694                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20695                                  
 20696                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20697 0000363B 08C0                    	OR	AL,AL
 20698 0000363D 740B                    	JZ	short CWRTROK 		; Ignore
 20699 0000363F 3C03                    	CMP	AL,3
 20700 00003641 7403                    	JZ	short CWRFERR
 20701 00003643 1F                      	POP	DS			; Recover saved seg of transfer
 20702 00003644 EBC9                    	JMP	short DVWRTRAW		; Try again
 20703                                  CWRFERR:
 20704 00003646 58                      	POP	AX			; Chuck saved seg of transfer
 20705 00003647 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20706                                  CWRTROK:
 20707 0000364A 58                      	POP	AX			; Chuck saved seg of transfer
 20708 0000364B 1F                      	POP	DS
 20709 0000364C A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20710                                  ENDWRDEV:
 20711 0000364F C43E[9E05]              	LES	DI,[THISSFT]
 20712 00003653 89C1                    	MOV	CX,AX
 20713                                  	;call	ADDREC
 20714                                  	;retn
 20715                                  	; 16/12/2022
 20716                                  	; 10/06/2019
 20717 00003655 E91304                  	jmp	ADDREC
 20718                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20719                                  	;call	ADDREC
 20720                                  	;retn
 20721                                  	
 20722                                  WRTNUL:
 20723 00003658 89CA                    	MOV	DX,CX			; Entire transfer done
 20724                                  WRTCOOKJ:
 20725 0000365A E98D00                  	JMP	WRTCOOKDONE
 20726                                  WRTDEV:
 20727                                  	;mov	byte [EXTERR_LOCUS],4
 20728 0000365D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20729                                  	;or	byte [es:di+5],40h
 20730 00003662 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20731                                  					; Reset EOF for input
 20732                                  	;mov	bl,[es:di+5]
 20733 00003667 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20734 0000366B 31C0                    	XOR	AX,AX
 20735 0000366D E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20736 0000366F 1E                      	PUSH	DS
 20737 00003670 88D8                    	MOV	AL,BL
 20738 00003672 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20739 00003676 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20740 00003678 31D2                    	XOR	DX,DX			; Set starting point
 20741                                  	;test	al,20h
 20742 0000367A A820                    	test	AL,devid_device_raw	; Raw?
 20743                                  	;JZ	short TEST_DEV_CON
 20744                                  	;JMP	DVWRTRAW
 20745                                  	; 16/12/2022
 20746 0000367C 7591                    	jnz	short DVWRTRAW
 20747                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20748                                  	;JZ	short TEST_DEV_CON
 20749                                  	;JMP	short DVWRTRAW
 20750                                  
 20751                                  TEST_DEV_CON:
 20752                                  	;test	al,2
 20753 0000367E A802                    	test	AL,devid_device_con_out ; Console output device?
 20754 00003680 756E                    	jnz	short WRITECON
 20755                                  	;test	al,4
 20756 00003682 A804                    	test	AL,devid_device_null
 20757 00003684 75D2                    	JNZ	short WRTNUL
 20758 00003686 89D0                    	MOV	AX,DX
 20759 00003688 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20760 0000368B 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20761 0000368D 51                      	PUSH	CX
 20762 0000368E B90100                  	MOV	CX,1
 20763 00003691 E86F11                  	call	SETWRITE
 20764 00003694 59                      	POP	CX
 20765                                  
 20766                                  ;hkn; SS override
 20767 00003695 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20768                                  ;
 20769                                  ;SR; Removed X25 support from here
 20770                                  ;
 20771                                  	;lds	si,[si+7]
 20772 0000369A C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20773                                  DVWRTLP:
 20774 0000369D E8271B                  	call	DSKSTATCHK
 20775 000036A0 E8B710                  	call	DEVIOCALL2
 20776 000036A3 57                      	PUSH	DI
 20777 000036A4 B487                    	MOV	AH,87H
 20778                                  
 20779                                  ;hkn; SS override
 20780 000036A6 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20781                                  	
 20782                                  	; MSDOS 3.3
 20783                                  	;test	di,8000h
 20784                                  	;jz	short CWROK
 20785                                  
 20786                                  	; MSDOS 6.0
 20787 000036AB 09FF                    	or	di,di
 20788 000036AD 7916                    	jns	short CWROK
 20789                                  	
 20790                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20791 000036AF E8351D                  	call	CHARHARD
 20792 000036B2 5F                      	POP	DI
 20793                                  
 20794                                  ;hkn; SS override
 20795 000036B3 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20796 000036BA 3C01                    	CMP	AL,1
 20797 000036BC 74DF                    	JZ	short DVWRTLP 	; Retry
 20798 000036BE 08C0                    	OR	AL,AL
 20799 000036C0 740C                    	JZ	short DVWRTIGN	; Ignore
 20800                                  	; 10/08/2018
 20801 000036C2 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20802                                  CWROK:
 20803 000036C5 5F                      	POP	DI
 20804                                  
 20805                                  ;hkn; SS override
 20806 000036C6 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20807 000036CC 741C                    	JZ	short WRTCOOKDONE
 20808                                  DVWRTIGN:
 20809 000036CE 42                      	INC	DX
 20810                                  
 20811                                  ;hkn; SS override for CALLXAD
 20812 000036CF 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20813 000036D4 47                      	INC	DI
 20814 000036D5 1E                      	PUSH	DS
 20815 000036D6 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20816 000036DB 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20817 000036DE 1F                      	POP	DS
 20818 000036DF 7409                    	JZ	short WRTCOOKDONE
 20819                                  
 20820                                  ;hkn; SS override
 20821 000036E1 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20822 000036E8 E2B3                    	LOOP	DVWRTLP
 20823                                  WRTCOOKDONE:
 20824 000036EA 89D0                    	MOV	AX,DX
 20825 000036EC 1F                      	POP	DS
 20826 000036ED E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20827                                  
 20828                                  WRITECON:
 20829 000036F0 1E                      	PUSH	DS
 20830                                  
 20831                                  ;hkn; SS is DOSDATA
 20832 000036F1 16                      	push	ss
 20833 000036F2 1F                      	pop	ds
 20834 000036F3 E888FC                  	CALL	SWAPCON
 20835 000036F6 1F                      	POP	DS
 20836 000036F7 89DE                    	MOV	SI,BX
 20837 000036F9 51                      	PUSH	CX
 20838                                  WRCONLP:
 20839 000036FA AC                      	LODSB
 20840 000036FB 3C1A                    	CMP	AL,1Ah		; ^Z?
 20841 000036FD 7405                    	JZ	short CONEOF
 20842 000036FF E8E1DF                  	call	OUTT
 20843 00003702 E2F6                    	LOOP	WRCONLP
 20844                                  CONEOF:
 20845 00003704 58                      	POP	AX			; Count
 20846 00003705 29C8                    	SUB	AX,CX			; Amount actually written
 20847 00003707 1F                      	POP	DS
 20848 00003708 E86DFC                  	CALL	SWAPBACK
 20849 0000370B E941FF                  	JMP	ENDWRDEV
 20850                                  
 20851                                  ;---------------------------------------------------------------------------
 20852                                  ;
 20853                                  ; Procedure Name : get_io_sft
 20854                                  ;
 20855                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20856                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20857                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20858                                  ;
 20859                                  ;---------------------------------------------------------------------------
 20860                                  
 20861                                  ; 04/05/2019 - Retro DOS v4.0
 20862                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20863                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20864                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20865                                  
 20866                                  GET_IO_SFT:
 20867                                  	;test	byte [SS:CONSWAP],0FFh
 20868 0000370E 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20869 00003714 7512                    	JNZ	short GetRedir
 20870                                  GetNormal:
 20871 00003716 16                      	push	ss
 20872 00003717 1F                      	pop	ds
 20873 00003718 06                      	PUSH	ES
 20874 00003719 57                      	PUSH	DI
 20875 0000371A E87F30                  	call	SFFromHandle
 20876 0000371D 7206                    	JC	short RET44P
 20877 0000371F 8CC6                    	MOV	SI,ES
 20878 00003721 8EDE                    	MOV	DS,SI
 20879 00003723 89FE                    	MOV	SI,DI
 20880                                  RET44P:
 20881 00003725 5F                      	POP	DI
 20882 00003726 07                      	POP	ES
 20883 00003727 C3                      	retn
 20884                                  GetRedir:
 20885 00003728 83FB01                  	CMP	BX,1
 20886 0000372B 77E9                    	JA	short GetNormal
 20887 0000372D 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20888 00003732 F8                      	CLC
 20889                                  get_io_sft_retn:
 20890 00003733 C3                      	retn
 20891                                  
 20892                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20893                                  ;---------------------------------------------------------------------------
 20894                                  ;
 20895                                  ; Procedure Name : DIRREAD
 20896                                  ;
 20897                                  ; Inputs:
 20898                                  ;	AX = Directory block number (relative to first block of directory)
 20899                                  ;	ES:BP = Base of drive parameters
 20900                                  ;	[DIRSEC] = First sector of first cluster of directory
 20901                                  ;	[CLUSNUM] = Next cluster
 20902                                  ;	[CLUSFAC] = Sectors/Cluster
 20903                                  ; Function:
 20904                                  ;	Read the directory block into [CURBUF].
 20905                                  ; Outputs:
 20906                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20907                                  ;	[SECCLUSPOS] Set
 20908                                  ;	ES:BP unchanged
 20909                                  ;	[CURBUF] Points to Buffer with dir sector
 20910                                  ;	Carry set if error (user said FAIL to I 24)
 20911                                  ; DS preserved, all other registers destroyed.
 20912                                  ;---------------------------------------------------------------------------
 20913                                  
 20914                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20915                                  
 20916                                  DIRREAD:
 20917                                  
 20918                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20919                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20920                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20921                                  ; by DIRStart = 0.
 20922                                  
 20923 00003734 31D2                    	XOR	DX,DX
 20924 00003736 833E[C205]00            	CMP	word [DIRSTART],0
 20925 0000373B 7503                    	jnz	short SubDir
 20926 0000373D 92                      	XCHG	AX,DX
 20927 0000373E EB0C                    	JMP	short DoRead
 20928                                  
 20929                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20930                                  
 20931                                  SubDir:
 20932 00003740 88C2                    	MOV	DL,AL
 20933                                  	;and	dl,[es:bp+4]
 20934 00003742 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20935                                  
 20936                                  ;	(DX) = sector-in-cluster
 20937                                  
 20938                                  	;mov	cl,[es:bp+5]
 20939 00003746 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20940 0000374A D3E8                    	SHR	AX,CL
 20941                                  
 20942                                  ;	(DX) = position in cluster
 20943                                  ;	(AX) = number of clusters to skip
 20944                                  
 20945                                  DoRead:
 20946 0000374C 8816[7305]              	MOV	[SECCLUSPOS],DL
 20947 00003750 89C1                    	MOV	CX,AX
 20948 00003752 88D4                    	MOV	AH,DL
 20949                                  
 20950                                  ;	(CX) = number of clusters to skip.
 20951                                  ;	(AH) = remainder
 20952                                  
 20953                                  	; 04/05/2019 - Retro DOS v4.0
 20954                                  
 20955                                  	; MSDOS 6.0
 20956 00003754 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20957 00003758 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 20958 0000375C 8B16[BE05]              	MOV	DX,[DIRSEC]
 20959 00003760 00E2                    	ADD	DL,AH
 20960 00003762 80D600                  	ADC	DH,0
 20961 00003765 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 20962                                  
 20963 0000376A 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 20964 0000376E 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20965 00003772 E319                    	JCXZ	FIRSTCLUSTER
 20966                                  SKPCLLP:
 20967 00003774 E8DB1E                  	call	UNPACK
 20968 00003777 72BA                    	jc	short get_io_sft_retn
 20969 00003779 87DF                    	XCHG	BX,DI
 20970 0000377B E8BD1E                  	call	IsEOF			; test for eof based on fat size
 20971 0000377E 7302                    	JAE	short HAVESKIPPED
 20972 00003780 E2F2                    	LOOP	SKPCLLP
 20973                                  HAVESKIPPED:
 20974 00003782 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20975 00003786 89FA                    	MOV	DX,DI
 20976 00003788 88E3                    	MOV	BL,AH
 20977 0000378A E86917                  	call	FIGREC
 20978                                  
 20979                                  	;entry	FIRSTCLUSTER
 20980                                  
 20981                                  FIRSTCLUSTER:
 20982                                  	;mov	byte [ALLOWED],18h
 20983 0000378D C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 20984 00003792 30C0                    	XOR	AL,AL		; Indicate pre-read
 20985 00003794 E8DD22                  	call	GETBUFFR
 20986 00003797 729A                    	jc	short get_io_sft_retn
 20987                                  
 20988                                  	;entry	SET_BUF_AS_DIR
 20989                                  
 20990                                  SET_BUF_AS_DIR:
 20991                                  
 20992                                  ;	Set the type of CURBUF to be a directory sector.
 20993                                  ;	Only flags are modified.
 20994                                  
 20995 00003799 1E                      	PUSH	DS
 20996 0000379A 56                      	PUSH	SI
 20997 0000379B C536[E205]              	LDS	SI,[CURBUF]
 20998                                  	;or	byte [si+5],4
 20999 0000379F 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21000 000037A3 5E                      	POP	SI
 21001 000037A4 1F                      	POP	DS
 21002                                  dirread_retn:
 21003 000037A5 C3                      	retn
 21004                                  
 21005                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21006                                  ;----------------------------------------------------------------------------
 21007                                  ;
 21008                                  ; Procedure Name : FATSECRD
 21009                                  ; Inputs:
 21010                                  ;	Same as DREAD
 21011                                  ;	DS:BX = Transfer address
 21012                                  ;	CX = Number of sectors
 21013                                  ;	DX = Absolute record number
 21014                                  ;	ES:BP = Base of drive parameters
 21015                                  ; Function:
 21016                                  ;	Calls BIOS to perform FAT read.
 21017                                  ; Outputs:
 21018                                  ;	Same as DREAD
 21019                                  ;---------------------------------------------------------------------------
 21020                                  
 21021                                  	; 04/05/2019 - Retro DOS v4.0
 21022                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21023                                  
 21024                                  FATSECRD:
 21025                                  ;hkn; SS override
 21026                                  	;mov	byte [ss:ALLOWED],18h
 21027 000037A6 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21028 000037AC 89CF                    	MOV	DI,CX
 21029                                  	;mov	cl,[es:bp+8]
 21030 000037AE 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21031                                  	; MSDOS 3.3
 21032                                  	;;mov	al,[es:bp+0Fh]
 21033                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21034                                  	;XOR	AH,AH
 21035                                  	; MSDOS 6.0
 21036                                  	;mov	ax,[es:bp+0Fh]
 21037 000037B2 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21038 000037B6 30ED                    	XOR	CH,CH	
 21039 000037B8 52                      	PUSH	DX
 21040                                  NXTFAT:
 21041                                  	; MSDOS 6.0
 21042                                  ;hkn; SS override
 21043 000037B9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21044 000037C0 51                      	PUSH	CX			;32mb
 21045 000037C1 50                      	PUSH	AX
 21046 000037C2 89F9                    	MOV	CX,DI
 21047 000037C4 E85B00                  	call	DSKREAD
 21048 000037C7 58                      	POP	AX
 21049 000037C8 59                      	POP	CX
 21050 000037C9 7420                    	JZ	short RET41P		; Carry clear
 21051 000037CB 01C2                    	ADD	DX,AX
 21052 000037CD E2EA                    	LOOP	NXTFAT
 21053 000037CF 5A                      	POP	DX
 21054 000037D0 89F9                    	MOV	CX,DI
 21055                                  
 21056                                  ; NOTE FALL THROUGH
 21057                                  
 21058                                  ;Break	<DREAD -- DO A DISK READ>
 21059                                  ;---------------------------------------------------------------------------
 21060                                  ;
 21061                                  ; Procedure Name : DREAD
 21062                                  ;
 21063                                  ; Inputs:
 21064                                  ;	DS:BX = Transfer address
 21065                                  ;	CX = Number of sectors
 21066                                  ;	DX = Absolute record number	      (LOW)
 21067                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21068                                  ;	ES:BP = Base of drive parameters
 21069                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21070                                  ; Function:
 21071                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21072                                  ;	errors, will call HARDERRRW for further action.
 21073                                  ; Outputs:
 21074                                  ;	Carry set if error (currently user FAILED to INT 24)
 21075                                  ; DS,ES:BP preserved. All other registers destroyed.
 21076                                  ;---------------------------------------------------------------------------
 21077                                  
 21078                                  	;entry	DREAD
 21079                                  DREAD:
 21080 000037D2 E84D00                  	call	DSKREAD
 21081 000037D5 74CE                    	jz	short dirread_retn	; Carry clear
 21082                                  ;hkn; SS override
 21083 000037D7 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21084 000037DD E89A00                  	call	HARDERRRW
 21085 000037E0 3C01                    	CMP	AL,1			; Check for retry
 21086 000037E2 74EE                    	JZ	short DREAD
 21087 000037E4 3C03                    	CMP	AL,3			; Check for FAIL
 21088 000037E6 F8                      	CLC
 21089 000037E7 7501                    	JNZ	short NO_CAR		; Ignore
 21090 000037E9 F9                      	STC
 21091                                  NO_CAR:
 21092 000037EA C3                      	retn
 21093                                  RET41P: 
 21094 000037EB 5A                      	POP	DX
 21095 000037EC C3                      	retn
 21096                                  
 21097                                  ; 24/07/2018 - Retro DOS v3.0
 21098                                  
 21099                                  ;Break	<CHECK_WRITE_LOCK>
 21100                                  ;---------------------------------------------------------------------------
 21101                                  ;
 21102                                  ; Procedure Name : CHECK_WRITE_LOCK
 21103                                  ;
 21104                                  ; Inputs:
 21105                                  ;	output of SETUP
 21106                                  ;	ES:DI -> SFT
 21107                                  ; Function:
 21108                                  ;	check write lock
 21109                                  ; Outputs:
 21110                                  ;	Carry set if error
 21111                                  ;	Carry clear if ok
 21112                                  ;
 21113                                  ;----------------------------------------------------------------------------
 21114                                  
 21115                                  	; 04/05/2019 - Retro DOS v4.0
 21116                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21117                                  
 21118                                  CHECK_WRITE_LOCK:
 21119                                  	; MSDOS 6.0
 21120                                  	;test	byte [es:di+4],8
 21121 000037ED 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21122                                  	;JZ	short write_cont			     ;no
 21123                                  	;;call	SET_ACC_ERR_DS
 21124                                  	;;retn
 21125                                  	;;jnz	SET_ACC_ERR_DS
 21126                                  	; 19/08/2018
 21127                                  	;jz	short write_cont
 21128                                  	;jmp	SET_ACC_ERR_DS
 21129                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21130 000037F2 7403                    	JZ	short write_cont
 21131                                  	;call	SET_ACC_ERR_DS
 21132                                  	;retn
 21133                                  	; 16/12/2022
 21134 000037F4 E9BF01                  	jmp	SET_ACC_ERR_DS
 21135                                  
 21136                                  write_cont:				;
 21137 000037F7 51                      	PUSH	CX			;save reg
 21138 000037F8 09C9                    	OR	CX,CX			;
 21139 000037FA 7501                    	JNZ	short Not_Truncate	;
 21140 000037FC 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21141                                  Not_Truncate:				;
 21142 000037FD B080                    	MOV	AL,80H			;check write access
 21143 000037FF E8283C                  	call	LOCK_CHECK		;check lock
 21144 00003802 59                      	POP	CX			;restore reg
 21145 00003803 7305                    	JNC	short WRITE_OK		;lock ok
 21146 00003805 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21147 00003808 73ED                    	JNC	short write_cont	;retry
 21148                                  WRITE_OK:				;
 21149 0000380A C3                      	retn				;
 21150                                  
 21151                                  ;Break	<CHECK_READ_LOCK>
 21152                                  ;---------------------------------------------------------------------------
 21153                                  ;
 21154                                  ; Procedure Name : CHECK_READ_LOC
 21155                                  ;
 21156                                  ; Inputs:
 21157                                  ;	ES:DI -> SFT
 21158                                  ;	output of SETUP
 21159                                  ; Function:
 21160                                  ;	check read lock
 21161                                  ; Outputs:
 21162                                  ;	Carry set if error
 21163                                  ;	Carry clear if ok
 21164                                  ;----------------------------------------------------------------------------
 21165                                  
 21166                                  CHECK_READ_LOCK:
 21167                                  	; MSDOS 6.0
 21168                                  	;test	byte [es:di+4],8
 21169 0000380B 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21170                                  	;JZ	short do_retry			   	     ; no
 21171                                  	;;call	SET_ACC_ERR
 21172                                  	;;retn
 21173                                  	;;jnz	SET_ACC_ERR
 21174                                  	; 16/12/2022
 21175                                  	; 28/07/2019
 21176 00003810 7403                    	jz	short do_retry
 21177 00003812 E9A301                  	jmp	SET_ACC_ERR
 21178                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21179                                  	;JZ	short do_retry
 21180                                  	;call	SET_ACC_ERR
 21181                                  	;retn
 21182                                  do_retry:				;
 21183 00003815 30C0                    	xor	al,al			;check read access
 21184 00003817 E8103C                  	call	LOCK_CHECK		;check lock
 21185 0000381A 7305                    	JNC	short READLOCK_OK 	;lock ok
 21186 0000381C E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21187 0000381F 73F4                    	JNC	short do_retry		;retry
 21188                                  READLOCK_OK:				;
 21189 00003821 C3                      	retn				;
 21190                                  
 21191                                  ;============================================================================
 21192                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21193                                  ;============================================================================
 21194                                  ; 24/07/2018 - Retro DOS v3.0
 21195                                  ; 04/05/2019 - Retro DOS v4.0
 21196                                  
 21197                                  ;	TITLE	DISK2 - Disk utility routines
 21198                                  ;	NAME	Disk2
 21199                                  
 21200                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21201                                  ;
 21202                                  ;	DskRead
 21203                                  ;	DWRITE
 21204                                  ;	DSKWRITE
 21205                                  ;	HarderrRW
 21206                                  ;	SETUP
 21207                                  ;	BREAKDOWN
 21208                                  ;	READ_LOCK_VIOLATION
 21209                                  ;	WRITE_LOCK_VIOLATION
 21210                                  ;	DISKREAD
 21211                                  ;	SET_ACC_ERR_DS
 21212                                  ;	SET_ACC_ERR
 21213                                  ;	SETSFT
 21214                                  ;	SETCLUS
 21215                                  ;	AddRec
 21216                                  ;
 21217                                  ;	Revision history:
 21218                                  ;
 21219                                  ;		AN000 version 4.00 Jan. 1988
 21220                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21221                                  
 21222                                  ; 04/05/2019 - Retro DOS v4.0
 21223                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21224                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21225                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21226                                  
 21227                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21228                                  ;---------------------------------------------------------------------------
 21229                                  ;
 21230                                  ; Procedure Name : DSKREAD
 21231                                  ;
 21232                                  ; Inputs:
 21233                                  ;	DS:BX = Transfer addr
 21234                                  ;	CX = Number of sectors
 21235                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21236                                  ;	DX = Absolute record number	       (LOW)
 21237                                  ;	ES:BP = Base of drive parameters
 21238                                  ; Function:
 21239                                  ;	Call BIOS to perform disk read
 21240                                  ; Outputs:
 21241                                  ;	DI = CX on entry
 21242                                  ;	CX = Number of sectors unsuccessfully transfered
 21243                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21244                                  ;	Zero set if OK (from BIOS) (carry clear)
 21245                                  ;	Zero clear if error (carry clear)
 21246                                  ; SI Destroyed, others preserved
 21247                                  ;---------------------------------------------------------------------------
 21248                                  
 21249                                  DSKREAD:
 21250 00003822 51                      	PUSH	CX
 21251                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21252 00003823 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21253                                  	;mov	al,[es:bp+1]
 21254 00003827 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21255 0000382B 53                      	PUSH	BX
 21256 0000382C 06                      	PUSH	ES
 21257 0000382D E8A00F                  	call	SETREAD
 21258 00003830 EB27                    	JMP	short DODSKOP
 21259                                  
 21260                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21261                                  ;--------------------------------------------------------------------------
 21262                                  ;
 21263                                  ; Procedure Name : DWRITE
 21264                                  ;
 21265                                  ; Inputs:
 21266                                  ;	DS:BX = Transfer address
 21267                                  ;	CX = Number of sectors
 21268                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21269                                  ;	DX = Absolute record number	       (LOW)
 21270                                  ;	ES:BP = Base of drive parameters
 21271                                  ;	[ALLOWED] must be set in case HARDERR called
 21272                                  ; Function:
 21273                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21274                                  ;	errors, will call HARDERRRW for further action.
 21275                                  ; Output:
 21276                                  ;	Carry set if error (currently, user FAILed to I 24)
 21277                                  ; BP preserved. All other registers destroyed.
 21278                                  ;----------------------------------------------------------------------------
 21279                                  
 21280                                  	;entry	DWRITE
 21281                                  DWRITE:
 21282 00003832 E81600                  	CALL	DSKWRITE
 21283 00003835 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21284                                  
 21285                                  ;hkn; SS override
 21286 00003837 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21287 0000383D E83A00                  	call	HARDERRRW
 21288 00003840 3C01                    	CMP	AL,1		; Check for retry
 21289 00003842 74EE                    	JZ	short DWRITE
 21290 00003844 3C03                    	CMP	AL,3		; Check for FAIL
 21291 00003846 F8                      	CLC
 21292 00003847 7501                    	JNZ	short NO_CAR2 	; Ignore
 21293 00003849 F9                      	STC
 21294                                  NO_CAR2:
 21295                                  dw_ret_label:
 21296 0000384A C3                      	retn
 21297                                  
 21298                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21299                                  ;---------------------------------------------------------------------------
 21300                                  ;
 21301                                  ; Procedure Name : DSKWRITE
 21302                                  ;
 21303                                  ; Inputs:
 21304                                  ;	DS:BX = Transfer addr
 21305                                  ;	CX = Number of sectors
 21306                                  ;	DX = Absolute record number	       (LOW)
 21307                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21308                                  ;	ES:BP = Base of drive parameters
 21309                                  ; Function:
 21310                                  ;	Call BIOS to perform disk read
 21311                                  ; Outputs:
 21312                                  ;	DI = CX on entry
 21313                                  ;	CX = Number of sectors unsuccessfully transfered
 21314                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21315                                  ;	Zero set if OK (from BIOS) (carry clear)
 21316                                  ;	Zero clear if error (carry clear)
 21317                                  ; SI Destroyed, others preserved
 21318                                  ;
 21319                                  ;----------------------------------------------------------------------------
 21320                                  
 21321                                  	;entry	DSKWRITE
 21322                                  DSKWRITE:
 21323 0000384B 51                      	PUSH	CX
 21324                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21325 0000384C 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21326                                  	;mov	al,[es:bp+1]
 21327 00003850 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21328 00003854 53                      	PUSH	BX
 21329 00003855 06                      	PUSH	ES
 21330 00003856 E8AA0F                  	call	SETWRITE
 21331                                  DODSKOP:
 21332 00003859 8CD9                    	MOV	CX,DS		; Save DS
 21333 0000385B 1F                      	POP	DS		; DS:BP points to DPB
 21334 0000385C 1E                      	PUSH	DS
 21335                                  
 21336                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21337 0000385D 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21338 00003861 E8F60E                  	call	DEVIOCALL2
 21339                                  
 21340 00003864 8ED9                    	MOV	DS,CX		; Restore DS
 21341 00003866 07                      	POP	ES		; Restore ES
 21342 00003867 5B                      	POP	BX
 21343                                  
 21344                                  ;hkn; SS override
 21345 00003868 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21346 0000386D 5F                      	POP	DI
 21347 0000386E 29F9                    	SUB	CX,DI
 21348 00003870 F7D9                    	NEG	CX		; Number of sectors not transferred
 21349                                  
 21350                                  ;hkn; SS override
 21351 00003872 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21352                                  	;test	ax,8000h
 21353                                  	; 17/12/2022
 21354                                  	;test	ah,80h
 21355 00003876 F6C480                  	test	ah,(STERR>>8)
 21356                                  	;test	AX,STERR
 21357 00003879 C3                      	retn
 21358                                  
 21359                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21360                                  ;---------------------------------------------------------------------------
 21361                                  ;
 21362                                  ; Procedure Name : HardErrRW
 21363                                  ;
 21364                                  ; Inputs:
 21365                                  ;	AX is error code from read or write
 21366                                  ;	Other registers set as per HARDERR
 21367                                  ; Function:
 21368                                  ;	Checks the error code for special extended
 21369                                  ;	errors and maps them if needed. Then invokes
 21370                                  ;	Harderr
 21371                                  ; Outputs:
 21372                                  ;	Of HARDERR
 21373                                  ; AX may be modified prior to call to HARDERR.
 21374                                  ; No other registers altered.
 21375                                  ;
 21376                                  ;---------------------------------------------------------------------------
 21377                                  
 21378                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21379                                  HARDERRRW:
 21380                                  	;cmp	al,0Fh
 21381 0000387A 3C0F                    	CMP	AL,error_I24_wrong_disk
 21382 0000387C 7512                    	JNZ	short DO_ERR				; Nothing to do
 21383                                  
 21384                                  	; MSDOS 3.3
 21385                                  	;push	ds
 21386                                  	;push	si
 21387                                  	;lds	si,[ss:CALLVIDRW]
 21388                                  	;mov	[ss:EXTERRPT+2], ds
 21389                                  	;mov	[ss:EXTERRPT], si
 21390                                  	;pop	si
 21391                                  	;pop	ds
 21392                                  
 21393                                  	; MSDOS 6.0
 21394 0000387E 50                      	push	ax
 21395 0000387F 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21396 00003883 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21397 00003887 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21398 0000388B 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21399 0000388F 58                      	pop	ax
 21400                                  DO_ERR:
 21401                                  	;;call	HARDERR
 21402                                  	;;retn
 21403                                  	; 16/12/2022
 21404                                  	; 10/06/2019
 21405 00003890 E9851B                  	jmp	HARDERR	
 21406                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21407                                  	;call	HARDERR
 21408                                  	;retn
 21409                                  
 21410                                  ; 24/07/2018 - Retro DOS v3.0
 21411                                  
 21412                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21413                                  ;----------------------------------------------------------------------------
 21414                                  ;
 21415                                  ; Procedure Name : SETUP
 21416                                  ;
 21417                                  ; Inputs:
 21418                                  ;	ES:DI point to SFT (value also in THISSFT)
 21419                                  ;	DMAAdd contains transfer address
 21420                                  ;	CX = Byte count
 21421                                  ;	DS = DOSDATA
 21422                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21423                                  ;		2nd of caller of caller.
 21424                                  ; Outputs:
 21425                                  ;	    CX = byte count
 21426                                  ;	    [THISDPB] = Base of drive parameters if file
 21427                                  ;		      = Pointer to device header if device or NET
 21428                                  ;	    ES:DI Points to SFT
 21429                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21430                                  ;	    [TRANS] = 0 (No transfers yet)
 21431                                  ;	    BytPos = Byte position in file
 21432                                  ;
 21433                                  ;	The following fields are relevant to local files (not devices) only:
 21434                                  ;
 21435                                  ;	    SecPos = Position of first sector (local files only)
 21436                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21437                                  ;	    [CLUSNUM] = First cluster (local files only)
 21438                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21439                                  ;	    [THISDRV] = Physical unit number (local files only)
 21440                                  ;
 21441                                  ;      RETURNS ONE LEVEL UP WITH:
 21442                                  ;	   CX = 0
 21443                                  ;	   CARRY = Clear
 21444                                  ;	IF AN ERROR IS DETECTED
 21445                                  ; All other registers destroyed
 21446                                  ;----------------------------------------------------------------------------
 21447                                  
 21448                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21449                                  
 21450                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21451                                  
 21452                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21453                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21454                                  
 21455                                  SETUP:
 21456                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21457                                  
 21458                                  	;lds 	si,[es:di+7]
 21459 00003893 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21460                                  
 21461                                  ;hkn; SS override
 21462 00003897 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21463                                  
 21464                                  ;hkn; SS is DOSDATA
 21465 0000389C 16                      	push	ss
 21466 0000389D 1F                      	pop	ds
 21467                                  
 21468 0000389E 8936[8A05]              	MOV	[THISDPB],SI
 21469                                  
 21470 000038A2 8B1E[2C03]              	MOV	BX,[DMAADD]
 21471 000038A6 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21472 000038AA C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21473                                  	;mov	ax,[es:di+15h]
 21474 000038AF 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21475                                  	;mov	dx,[es:di+17h]
 21476 000038B3 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21477 000038B7 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21478 000038BB A3[CE05]                	MOV	[BYTPOS],AX
 21479                                  	;test	word [es:di+5],8080h
 21480 000038BE 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21481 000038C4 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21482 000038C6 06                      	PUSH	ES
 21483 000038C7 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21484                                  
 21485                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21486                                  	;;mov	bl,[es:bp+0]
 21487                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21488                                  	; 05/12/2022
 21489 000038CB 268A5E00                	mov	bl,[es:bp]
 21490                                  	
 21491 000038CF 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21492                                  	;mov	bx,[es:bp+2]
 21493 000038D3 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21494                                  
 21495                                  	;; MSDOS 3.3
 21496                                  	;cmp	dx,bx
 21497                                  	;jnb	short EOFERR
 21498                                  	;div	bx
 21499                                  	;mov	[SECPOS],ax
 21500                                  	;mov	[BYTSECPOS],dx
 21501                                  	;mov	dx,ax
 21502                                  	;;and	al,[es:bp+4]
 21503                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21504                                  	;mov	[SECCLUSPOS],al
 21505                                  	;mov	ax,cx
 21506                                  	;;mov	cl,[es:bp+5]
 21507                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21508                                  	;shr	dx,cl
 21509                                  	;mov	[CLUSNUM],dx
 21510                                  	;pop	es
 21511                                  	;mov	cx,ax
 21512                                  
 21513                                  	; 04/05/2019 - Retro DOS v4.0
 21514                                  
 21515                                  	; MSDOS 6.0
 21516                                  ;M039: Optimized this section.
 21517 000038D7 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21518 000038D8 E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21519 000038DB 8916[CC05]              	MOV	[BYTSECPOS],DX
 21520 000038DF A3[C405]                	MOV	[SECPOS],AX
 21521 000038E2 890E[C605]              	MOV	[SECPOS+2],CX
 21522 000038E6 89CA                    	MOV	DX,CX
 21523                                  
 21524 000038E8 89C3                    	MOV	BX,AX
 21525                                  	;and	bl,[es:bp+4]
 21526 000038EA 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21527 000038EE 881E[7305]              	MOV	[SECCLUSPOS],BL
 21528                                  
 21529 000038F2 E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21530 000038F5 59                      	POP	CX			;CX = byte count.
 21531 000038F6 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21532                                  	;cmp	ax,[es:bp+0Dh]
 21533 000038F8 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21534 000038FC 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21535                                  
 21536 000038FE A3[BC05]                	MOV	[CLUSNUM],AX
 21537 00003901 07                      	POP	ES			; ES:DI point to SFT
 21538                                  ;M039
 21539                                  
 21540                                  NOSETSTUFF:
 21541 00003902 89C8                    	MOV	AX,CX		; AX = Byte count.
 21542 00003904 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21543 00003908 730C                    	JNC	short setup_OK	; Must be less than 64
 21544 0000390A A1[2C03]                	MOV	AX,[DMAADD]
 21545 0000390D F7D8                    	NEG	AX		; Amount of room left in segment (know
 21546                                  				;    less than 64K since max value of CX
 21547                                  				;    is FFFF).
 21548 0000390F 7501                    	JNZ	short NoDec
 21549 00003911 48                      	DEC	AX
 21550                                  NoDec:
 21551 00003912 89C1                    	MOV	CX,AX		; Can do this much
 21552 00003914 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21553                                  setup_OK:
 21554 00003916 C3                      	retn
 21555                                  
 21556                                  EOFERR:
 21557 00003917 07                      	POP	ES		; ES:DI point to SFT
 21558 00003918 31C9                    	XOR	CX,CX		; No bytes read
 21559                                  ;;;;;;;;;;; 7/18/86
 21560                                  	; MSDOS 3.3
 21561                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21562                                  ;;;;;;;;;;;
 21563                                  NOROOM:
 21564 0000391A 5B                      	POP	BX		; Kill return address
 21565 0000391B F8                      	CLC
 21566 0000391C C3                      	retn			; RETURN TO CALLER OF CALLER
 21567                                  
 21568                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21569                                  ;---------------------------------------------------------------------------
 21570                                  ;
 21571                                  ; Procedure Name : BREAKDOWN
 21572                                  ;
 21573                                  ; Inputs:
 21574                                  ;	CX = Length of disk transfer in bytes
 21575                                  ;	ES:BP = Base of drive parameters
 21576                                  ;	[BYTSECPOS] = Byte position within first sector
 21577                                  ;	DS = DOSDATA
 21578                                  ; Outputs:
 21579                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21580                                  ;	[SECCNT] = No. of whole sectors to transfer
 21581                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21582                                  ; AX, BX, DX destroyed. No other registers affected.
 21583                                  ;---------------------------------------------------------------------------
 21584                                  
 21585                                  BREAKDOWN:
 21586 0000391D A1[CC05]                	MOV	AX,[BYTSECPOS]
 21587 00003920 89CB                    	MOV	BX,CX
 21588 00003922 09C0                    	OR	AX,AX
 21589 00003924 740E                    	JZ	short SAVFIR	; Partial first sector?
 21590                                  	;sub	ax,[es:bp+2]
 21591 00003926 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21592 0000392A F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21593 0000392C 29C3                    	SUB	BX,AX		; Subtract from total length
 21594 0000392E 7304                    	JAE	short SAVFIR
 21595 00003930 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21596 00003932 31DB                    	XOR	BX,BX		; And no bytes are left
 21597                                  SAVFIR:
 21598 00003934 A3[D205]                	MOV	[BYTCNT1],AX
 21599 00003937 89D8                    	MOV	AX,BX
 21600 00003939 31D2                    	XOR	DX,DX
 21601                                  	;div	word [ES:BP+2]
 21602 0000393B 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21603 0000393F A3[D605]                	MOV	[SECCNT],AX
 21604 00003942 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21605                                  	; MSDOS 3.3
 21606                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21607                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21608                                  	;CMP	AX,1
 21609                                  	;retnz
 21610                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21611                                  	;MOV	[BYTCNT2],AX
 21612                                  	;MOV	[SECCNT],DX	; DX = 0
 21613                                  _RET45:
 21614 00003946 C3                      	retn
 21615                                  
 21616                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21617                                  
 21618                                  ;----------------------------------------------------------------------------
 21619                                  ;
 21620                                  ; Procedure Name : READ_LOCK_VIOLATION
 21621                                  ;
 21622                                  ; ES:DI points to SFT. This entry used by NET_READ
 21623                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21624                                  ; Else do retrys.
 21625                                  ; ES:DI,DS,CX preserved
 21626                                  ;
 21627                                  ;----------------------------------------------------------------------------
 21628                                  
 21629                                  READ_LOCK_VIOLATION:
 21630 00003947 C606[7505]00            	MOV	byte [READOP],0
 21631                                  ERR_ON_CHECK:
 21632                                  	;;test	word [es:di+2],8000h
 21633                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21634                                  	;JNZ	short HARD_ERR
 21635                                  
 21636                                  	; 04/05/2019
 21637                                  	;test	byte [es:di+3],80h
 21638 0000394C 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21639 00003951 750E                    	JNZ	short HARD_ERR
 21640                                  
 21641 00003953 51                      	PUSH	CX
 21642                                  	;mov	cl,[es:di+2]
 21643 00003954 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21644                                  	;and	cl,0F0h
 21645 00003958 80E1F0                  	AND	CL,SHARING_MASK
 21646                                  	;cmp	cl,0
 21647 0000395B 80F900                  	CMP	CL,SHARING_COMPAT
 21648 0000395E 59                      	POP	CX
 21649 0000395F 7505                    	JNE	short NO_HARD_ERR
 21650                                  HARD_ERR:
 21651 00003961 E8DC3A                  	call	LOCK_VIOLATION
 21652 00003964 73E0                    	jnc	short _RET45		; User wants Retrys
 21653                                  NO_HARD_ERR:
 21654 00003966 31C9                    	XOR	CX,CX			;No bytes transferred
 21655                                  	;mov	ax,21h
 21656 00003968 B82100                  	MOV	AX,error_lock_violation
 21657 0000396B F9                      	STC
 21658 0000396C C3                      	retn
 21659                                  
 21660                                  ;----------------------------------------------------------------------------
 21661                                  ;
 21662                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21663                                  ;
 21664                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21665                                  ; This entry used by NET_WRITE
 21666                                  ;
 21667                                  ;----------------------------------------------------------------------------
 21668                                  
 21669                                  WRITE_LOCK_VIOLATION:
 21670 0000396D C606[7505]01            	MOV	byte [READOP],1
 21671 00003972 EBD8                    	JMP	short ERR_ON_CHECK
 21672                                  
 21673                                  ; 04/05/2019 - Retro DOS v4.0
 21674                                  
 21675                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21676                                  
 21677                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21678                                  ;----------------------------------------------------------------------------
 21679                                  ;
 21680                                  ; Procedure Name : DISKREAD
 21681                                  ;
 21682                                  ; Inputs:
 21683                                  ;	Outputs of SETUP
 21684                                  ; Function:
 21685                                  ;	Perform disk read
 21686                                  ; Outputs:
 21687                                  ;    Carry clear
 21688                                  ;	CX = No. of bytes read
 21689                                  ;	ES:DI point to SFT
 21690                                  ;	SFT offset and cluster pointers updated
 21691                                  ;    Carry set
 21692                                  ;	CX = 0
 21693                                  ;	ES:DI point to SFT
 21694                                  ;	AX has error code
 21695                                  ;----------------------------------------------------------------------------
 21696                                  
 21697                                  ;hkn; called from disk.asm. DS already set up.
 21698                                  
 21699                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21700                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21701                                  
 21702                                  DISKREAD:
 21703                                  	;mov	ax,[es:di+11h]
 21704 00003974 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21705                                  	;mov	bx,[es:di+13h]
 21706 00003978 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21707 0000397C 2B06[CE05]              	SUB	AX,[BYTPOS]
 21708 00003980 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21709 00003984 7226                    	JB	short RDERR		;Read starts past EOF
 21710 00003986 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21711 00003988 09C0                    	OR	AX,AX
 21712 0000398A 7420                    	JZ	short RDERR		;Read starts at EOF
 21713 0000398C 39C8                    	CMP	AX,CX
 21714 0000398E 7302                    	JAE	short ENUF		;I/O fits
 21715 00003990 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21716                                  ENUF:
 21717                                  	; MSDOS 3.3
 21718                                  	;test	byte [es:di+4],8
 21719                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21720                                  	;jnz	short SET_ACC_ERR
 21721                                  	;call	LOCK_CHECK
 21722                                  	;jnb	short _READ_OK
 21723                                  	;call	READ_LOCK_VIOLATION
 21724                                  	;jnb	short ENUF
 21725                                  	;retn
 21726                                  
 21727                                  	; MSDOS 6.0
 21728 00003992 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21729 00003995 7301                    	JNC	short _READ_OK 		; There are no locks
 21730 00003997 C3                      	retn
 21731                                  
 21732                                  _READ_OK:
 21733 00003998 C42E[8A05]              	LES	BP,[THISDPB]
 21734 0000399C E87EFF                  	CALL	BREAKDOWN
 21735 0000399F 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21736                                  
 21737 000039A3 E8B113                  	call	FNDCLUS
 21738                                       	; MSDOS 6.0			;M022 conditional removed here
 21739 000039A6 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21740                                  					; migrated from 330a - HKN
 21741 000039A8 09C9                    	OR	CX,CX
 21742 000039AA 7413                    	JZ	short SKIPERR
 21743                                  RDERR:
 21744 000039AC B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21745 000039AE E92502                  	jmp	WRTERR22
 21746                                  
 21747                                  ;RDLASTJ: 
 21748                                  	;JMP	RDLAST                  ;M039
 21749                                  
 21750                                  SETSFTJ2: 
 21751 000039B1 E99600                  	JMP	SETSFT
 21752                                  
 21753                                  CANOT_READ:
 21754                                  	; MSDOS 3.3
 21755                                  	;POP	CX		;M039.
 21756                                  	; MSDOS 3.3 & MSDOS 6.0
 21757 000039B4 59                      	POP	CX              ;Clean stack.
 21758 000039B5 5B                      	POP	BX
 21759                                  
 21760                                  	;entry	SET_ACC_ERR_DS
 21761                                  SET_ACC_ERR_DS:
 21762                                  
 21763                                  ;hkn; SS is DOSDATA
 21764                                  	;Context DS
 21765 000039B6 16                      	push	ss
 21766 000039B7 1F                      	pop	ds
 21767                                  
 21768                                  	;entry	SET_ACC_ERR
 21769                                  SET_ACC_ERR:
 21770 000039B8 31C9                    	XOR	CX,CX
 21771                                  	;mov	ax,5
 21772 000039BA B80500                  	MOV	AX,error_access_denied
 21773 000039BD F9                      	STC
 21774 000039BE C3                      	retn
 21775                                  
 21776                                  SKIPERR:
 21777 000039BF 8916[BA05]              	MOV	[LASTPOS],DX
 21778 000039C3 891E[BC05]              	MOV	[CLUSNUM],BX
 21779 000039C7 833E[D205]00            	CMP	word [BYTCNT1],0
 21780 000039CC 7405                    	JZ	short RDMID
 21781                                  
 21782 000039CE E8FC13                  	call	BUFRD
 21783 000039D1 72E3                    	JC	short SET_ACC_ERR_DS
 21784                                  
 21785                                  RDMID:
 21786 000039D3 833E[D605]00            	CMP	word [SECCNT],0
 21787                                  	;JZ	RDLAST ; 10/08/2018
 21788 000039D8 7453                    	jz	short RDLAST
 21789                                  
 21790 000039DA E88914                  	call	NEXTSEC
 21791 000039DD 72D2                    	JC	short SETSFTJ2
 21792                                  
 21793 000039DF C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21794                                  ONSEC:
 21795 000039E4 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21796 000039E8 8B0E[D605]              	MOV	CX,[SECCNT]
 21797 000039EC 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21798                                  RDLP:
 21799 000039F0 E8A414                  	call	OPTIMIZE
 21800 000039F3 72C1                    	JC	short SET_ACC_ERR_DS
 21801                                  
 21802 000039F5 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21803 000039F6 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21804 000039F7 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21805                                  	;mov	byte [ALLOWED],38h
 21806 000039F8 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21807 000039FD 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21808                                  
 21809 00003A01 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21810 00003A02 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21811                                  
 21812                                  	; 04/05/2019 - Retro DOS v4.0
 21813                                  
 21814                                  	; MSDOS 6.0
 21815 00003A03 E86122                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21816                                  
 21817                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21818 00003A06 E8C9FD                  	call	DREAD
 21819                                  
 21820                                  	; MSDOS 3.3 
 21821                                  	;pop	bx
 21822                                  	;pop	dx
 21823                                  	;jc	short CANOT_READ
 21824                                  	;add	bx,dx	; (bx = Extent end)
 21825                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21826                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21827                                  	;call	SETVISIT
 21828                                  	; ->***
 21829                                  ;M039
 21830                                  	; MSDOS 6.0 
 21831 00003A09 59                      	pop	cx
 21832 00003A0A 5A                      	pop	dx
 21833 00003A0B 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21834 00003A10 72A2                    	jc	short CANOT_READ
 21835                                  
 21836 00003A12 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21837                                  
 21838                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21839                                  ;            sectors, also termed an "Extent".)
 21840                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21841                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21842                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21843                                  ;
 21844                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21845                                  ;	buffers must be "read" into the transfer memory block, so that the
 21846                                  ;       transfer memory reflects the most recent data.
 21847                                  
 21848 00003A17 E85E00                  	call	DskRdBufScan
 21849                                  
 21850                                  	;Context DS
 21851 00003A1A 16                      	push	ss
 21852 00003A1B 1F                      	pop	ds
 21853                                          
 21854 00003A1C 59                      	pop	cx
 21855 00003A1D 5B                              pop	bx
 21856                                  
 21857                                  ;       CX = # of sector remaining.
 21858                                  ;       BX = Next physical cluster.
 21859                                  
 21860                                  ;M039
 21861                                  
 21862                                  ;;;;;;;;
 21863                                  ;	; 25/07/2018 - Retro DOS v3.0
 21864                                  ;	; ***->
 21865                                  ;	; MSDOS 3.3
 21866                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21867                                  ;bufq:
 21868                                  ;;	DX = Extent start.
 21869                                  ;;	BX = Extent end.
 21870                                  ;;	 AL = Drive #.
 21871                                  ;;     DS:DI-> 1st buffer in queue.
 21872                                  ;
 21873                                  ;	;or	byte [di+5],20h
 21874                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21875                                  ;	;cmp	al,[di+4]	
 21876                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21877                                  ;	jnz	short bufq3
 21878                                  ;	;cmp	[di+6],dx
 21879                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21880                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21881                                  ;	;cmp	[di+6],bx
 21882                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21883                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21884                                  ;	
 21885                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21886                                  ;
 21887                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21888                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21889                                  ;;      as MRU (Most Recently Used).
 21890                                  ;
 21891                                  ;	;test	byte [di+5],40h
 21892                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21893                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21894                                  ;	pop	ax ; transfer address
 21895                                  ;	push	ax
 21896                                  ;	push	di
 21897                                  ;	push	dx
 21898                                  ;	;sub	dx,[di+6]
 21899                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21900                                  ;	neg	dx
 21901                                  ;
 21902                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21903                                  ;;           block.
 21904                                  ;
 21905                                  ;	mov	si,di
 21906                                  ;	mov	di,ax
 21907                                  ;	mov	ax,dx
 21908                                  ;	;mov	cx,[es:bp+6]	
 21909                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21910                                  ;	mul	cx
 21911                                  ;	add	di,ax
 21912                                  ;
 21913                                  ;	lea	si,[si+16]
 21914                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21915                                  ;	shr	cx,1
 21916                                  ;	push	es
 21917                                  ;	mov	es,[SS:DMAADD+2]
 21918                                  ;
 21919                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21920                                  ;;      DS:SI-> Buffer sector data.
 21921                                  ;;      ES:DI-> Destination within Transfer memory block.
 21922                                  ;
 21923                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21924                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21925                                  ;	;rep	movsb                   ;Copy last byte.
 21926                                  ;	jnc	short bufq1
 21927                                  ;	movsb
 21928                                  ;bufq1:
 21929                                  ;	pop	es
 21930                                  ;	pop	dx
 21931                                  ;	pop	di
 21932                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21933                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21934                                  ;bufq2:
 21935                                  ;	call	SCANPLACE
 21936                                  ;bufq3:
 21937                                  ;	call	SKIPVISIT
 21938                                  ;	jnz	short bufq
 21939                                  ;	
 21940                                  ;	push	ss
 21941                                  ;	pop	ds
 21942                                  ;	pop	cx
 21943                                  ;	pop	cx
 21944                                  ;	pop	bx	
 21945                                  ;bufq4:
 21946                                  ;;;;;;;
 21947 00003A1E E30D                    	JCXZ	RDLAST
 21948                                  
 21949 00003A20 E8181C                  	call	IsEOF			; test for eof on fat size
 21950 00003A23 7325                    	JAE	short SETSFT
 21951                                  
 21952 00003A25 B200                    	MOV	DL,0
 21953 00003A27 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21954 00003A2B EBC3                    	JMP	short RDLP ; 19/05/2019
 21955                                  
 21956                                  RDLAST:
 21957 00003A2D A1[D405]                	MOV	AX,[BYTCNT2]
 21958 00003A30 09C0                    	OR	AX,AX
 21959 00003A32 7416                    	JZ	short SETSFT
 21960 00003A34 A3[D205]                	MOV	[BYTCNT1],AX
 21961                                  
 21962 00003A37 E82C14                  	call	NEXTSEC
 21963 00003A3A 720E                    	JC	short SETSFT
 21964                                  
 21965 00003A3C C706[CC05]0000          	MOV	word [BYTSECPOS],0
 21966 00003A42 E88813                  	call	BUFRD
 21967                                  	; 10/08/2018
 21968                                  
 21969 00003A45 7303                    	JNC	short SETSFT
 21970 00003A47 E96CFF                  	JMP	SET_ACC_ERR_DS
 21971                                  
 21972                                  ;------------------------------------------------------------------------------
 21973                                  ;
 21974                                  ; Procedure Name : SETSFT
 21975                                  ; Inputs:
 21976                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 21977                                  ;		and set cluster fields
 21978                                  ; Function:
 21979                                  ;	Update [THISSFT] based on the transfer
 21980                                  ; Outputs:
 21981                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 21982                                  ;	ES:DI points to [THISSFT]
 21983                                  ;	CX No. of bytes transferred
 21984                                  ;	Carry clear
 21985                                  ;
 21986                                  ;----------------------------------------------------------------------------
 21987                                  
 21988                                  	;entry	SETSFT
 21989                                  
 21990                                  ; 26/07/2018 - Retro DOS v3.0
 21991                                  SETSFT:
 21992 00003A4A C43E[9E05]              	LES	DI,[THISSFT]
 21993                                  
 21994                                  ; Same as SETSFT except ES:DI already points to SFT
 21995                                  	;entry	SETCLUS
 21996                                  SETCLUS:	
 21997 00003A4E 8B0E[B805]              	MOV	CX,[NEXTADD]
 21998 00003A52 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 21999                                  	;;test	word [es:di+5],80h
 22000                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22001                                  	;JNZ	short ADDREC		; don't set clusters if device
 22002                                  
 22003                                  	; 04/05/2019 - Retro DOS v4.0
 22004                                  	;test	byte [es:di+5],80h
 22005 00003A56 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22006 00003A5B 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22007                                  
 22008 00003A5D A1[BC05]                	MOV	AX,[CLUSNUM]
 22009                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22010                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22011 00003A60 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22012 00003A64 A1[BA05]                	MOV	AX,[LASTPOS]
 22013                                  	;mov	[es:di+19h],ax
 22014 00003A67 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22015                                  
 22016                                  ;----------------------------------------------------------------------------
 22017                                  ;
 22018                                  ; Procedure : AddRec
 22019                                  ; Inputs:
 22020                                  ;	ES:DI points to SFT
 22021                                  ;	CX is No. Bytes transferred
 22022                                  ; Function:
 22023                                  ;	Update the SFT offset based on the transfer
 22024                                  ; Outputs:
 22025                                  ;	sf_position updated to point to first byte after transfer
 22026                                  ;	ES:DI points to SFT
 22027                                  ;	CX No. of bytes transferred
 22028                                  ;	Carry clear
 22029                                  ;----------------------------------------------------------------------------
 22030                                  
 22031                                  	;entry	AddRec
 22032                                  ADDREC:
 22033 00003A6B E309                    	JCXZ	RET28		; If no records read,  don't change position
 22034                                  	;add	[es:di+15h],cx
 22035 00003A6D 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22036                                  	;adc	word [es:di+17h], 0
 22037 00003A71 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22038                                  RET28:	
 22039 00003A76 F8                      	CLC
 22040 00003A77 C3                      	retn
 22041                                  
 22042                                  ; 25/07/2018
 22043                                  ; MSDOS 6.0
 22044                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22045                                  ;----------------------------------------------------------------------------
 22046                                  ;
 22047                                  ; Procedure Name : DskRdBufScan
 22048                                  ;
 22049                                  ; Inputs:
 22050                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22051                                  ;            sectors, also termed an "Extent".)
 22052                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22053                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22054                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22055                                  ;
 22056                                  ; Function:
 22057                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22058                                  ;	"read" into the transfer memory block, so that the transfer memory
 22059                                  ;	reflects the most recent data.
 22060                                  ;
 22061                                  ; Outputs:
 22062                                  ;       Transfer memory updated as required.
 22063                                  ;
 22064                                  ; Uses:
 22065                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22066                                  ;       SS override for all global variables.
 22067                                  ;
 22068                                  ; Notes:
 22069                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22070                                  ;	than the FIRST.
 22071                                  ;----------------------------------------------------------------------------
 22072                                  ;M039: Created
 22073                                  
 22074                                  ; 04/05/2019 - Retro DOS v4.0
 22075                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22076                                  
 22077                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22078                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22079                                  
 22080                                  ;procedure DskRdBufScan,NEAR
 22081                                  ;
 22082                                  ;ASSUME  DS:NOTHING
 22083                                  
 22084                                  DskRdBufScan:
 22085 00003A78 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22086 00003A7E 743C                    	je	short bufx		     ; -no, skip all work.
 22087                                  
 22088 00003A80 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22089 00003A85 89DE                    	mov     si,bx
 22090 00003A87 01D1                    	add     cx,dx
 22091 00003A89 83D600                  	adc     si,0
 22092                                  
 22093 00003A8C E8801F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22094                                  	;mov	ax,[di+2]
 22095 00003A8F 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22096 00003A92 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22097                                  		
 22098                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22099                                  	;;mov	al,[es:bp+0]
 22100                                  	;mov	al,[es:bp+DPB.DRIVE]
 22101                                  	; 15/12/2022
 22102 00003A96 268A4600                	mov	al,[es:bp]
 22103                                  
 22104                                  ;       BX:DX = Extent start.
 22105                                  ;       SI:CX = Extent end + 1.
 22106                                  ;          AL = Drive #.
 22107                                  ;       DS:DI-> 1st buffer in queue.
 22108                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22109                                  
 22110                                  bufq:	
 22111                                  	;cmp	al,[di+4]
 22112 00003A9A 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22113 00003A9D 7514                    	jne	short bufq1        	;  -no, jump.
 22114                                  
 22115                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22116                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22117                                  
 22118                                  	;cmp	bx,[di+8]
 22119 00003A9F 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22120 00003AA2 7503                    	jne	short bufq01
 22121                                  	;cmp	dx,[di+6]
 22122 00003AA4 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22123                                  bufq01:
 22124 00003AA7 770A                    	ja	short bufq1
 22125                                  
 22126                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22127                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22128                                  
 22129                                  	;cmp	si,[di+8]
 22130 00003AA9 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22131 00003AAC 7503                    	jne	short bufq02
 22132                                  	;cmp	cx,[di+6]
 22133 00003AAE 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22134                                  bufq02:
 22135 00003AB1 770A                    	ja	short bufq2
 22136                                  bufq1:	
 22137 00003AB3 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22138 00003AB8 8B3D                    	mov	di,[di]
 22139                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22140 00003ABA 75DE                    	jne	short bufq		; -no, do next buffer
 22141                                  bufx:
 22142 00003ABC C3                      	retn				;Exit.
 22143                                  
 22144                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22145                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22146                                  ;       as MRU (Most Recently Used).
 22147                                  
 22148                                  bufq2:	
 22149 00003ABD 50                      	push	ax
 22150                                  	;test	byte [di+5],40h
 22151 00003ABE F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22152 00003AC2 742F                    	jz	short bufq3                    ; -no, jump.
 22153                                  
 22154                                  ;       SaveReg <cx,dx,si,di,es>
 22155 00003AC4 51                      	push	cx
 22156 00003AC5 52                      	push	dx
 22157 00003AC6 56                      	push	si
 22158 00003AC7 57                      	push	di
 22159 00003AC8 06                      	push	es
 22160                                  
 22161 00003AC9 89D0                    	mov     ax,dx
 22162                                  	;sub	ax,[di+6]
 22163 00003ACB 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22164 00003ACE F7D8                    	neg	ax
 22165                                  
 22166                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22167                                  ;            block. (Note: the upper word of the sector # may be ignored
 22168                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22169                                  ;            is imposed by the input parameters of the disk read operation.)
 22170                                  
 22171                                  	;lea	si,[di+20]
 22172 00003AD0 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22173                                  	;mov	cx,[es:bp+2]
 22174 00003AD3 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22175 00003AD7 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22176 00003AD9 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22177 00003ADE 01C7                    	add	di,ax
 22178 00003AE0 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22179 00003AE5 D1E9                    	shr	cx,1
 22180                                  
 22181                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22182                                  ;       DS:SI-> Buffer sector data.
 22183                                  ;       ES:DI-> Destination within Transfer memory block.
 22184                                  
 22185 00003AE7 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22186                                  	;; 04/05/2019
 22187                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22188                                  	;;rep	movsb                   ;Copy last byte.
 22189                                  	;jnc	short bufq03	
 22190                                  	;movsb
 22191                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22192 00003AE9 83D100                  	adc	cx,0
 22193 00003AEC F3A4                    	rep	movsb
 22194                                  bufq03:
 22195                                  	;RestoreReg <es,di,si,dx,cx>
 22196 00003AEE 07                      	pop	es
 22197 00003AEF 5F                      	pop	di
 22198 00003AF0 5E                      	pop	si
 22199 00003AF1 5A                      	pop	dx
 22200 00003AF2 59                      	pop	cx
 22201                                  
 22202                                  ;       DS:DI -> current buffer.
 22203                                  bufq3:	
 22204 00003AF3 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22205                                          ;invoke SCANPLACE
 22206 00003AF5 E8291F                  	call	SCANPLACE
 22207 00003AF8 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22208 00003AFD 58                      	pop	ax
 22209                                  	;jne	short bufq		; -no, jump.
 22210                                  	;;jmp	short bufx		; -yes, exit.
 22211                                  	;; 12/06/2019
 22212                                  	;retn
 22213                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22214 00003AFE 759A                    	jne	short bufq
 22215 00003B00 EBBA                    	jmp	short bufx
 22216                                  
 22217                                  ;EndProc DskRdBufScan
 22218                                  
 22219                                  ;============================================================================
 22220                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22221                                  ;============================================================================
 22222                                  ; 04/05/2019 - Retro DOS v4.0
 22223                                  ; 24/07/2018 - Retro DOS v3.0
 22224                                  
 22225                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22226                                  ;----------------------------------------------------------------------------
 22227                                  ;
 22228                                  ; Procedure Name : DISKWRITE
 22229                                  ;
 22230                                  ; Inputs:
 22231                                  ;       Outputs of SETUP
 22232                                  ; Function:
 22233                                  ;       Perform disk write
 22234                                  ; Outputs:
 22235                                  ;    Carry clear
 22236                                  ;       CX = No. of bytes written
 22237                                  ;       ES:DI point to SFT
 22238                                  ;       SFT offset and cluster pointers updated
 22239                                  ;    Carry set
 22240                                  ;       CX = 0
 22241                                  ;       ES:DI point to SFT
 22242                                  ;       AX has error code
 22243                                  ;----------------------------------------------------------------------------
 22244                                  
 22245                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22246                                  
 22247                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22248                                  
 22249                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22250                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22251                                  
 22252                                  DISKWRITE:
 22253                                  	; MSDOS 3.3
 22254                                  	; IBMDOS.COM - Offset 436Dh
 22255                                  	;;test	byte [es:di+4],8
 22256                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22257                                  	;jz	short write_cont
 22258                                  	;jmp	SET_ACC_ERR_DS
 22259                                  ;write_cont:
 22260                                  	;push	cx
 22261                                  	;or	cx,cx
 22262                                  	;jnz	short Not_Truncate
 22263                                  	;;mov	cx,-1
 22264                                  	;dec	cx
 22265                                  ;Not_Truncate:
 22266                                  	;call	LOCK_CHECK
 22267                                  	;pop	cx
 22268                                  	;jnb	short _WRITE_OK
 22269                                  	;call	WRITE_LOCK_VIOLATION
 22270                                  	;jnb	short DISKWRITE
 22271                                  	;retn
 22272                                  
 22273                                  	; MSDOS 6.0
 22274 00003B02 E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22275                                  	; 19/08/2018
 22276 00003B05 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22277 00003B07 C3                      	retn
 22278                                  
 22279                                  WRTEOFJ:
 22280 00003B08 E9DE01                  	JMP     WRTEOF
 22281                                  
 22282                                  _WRITE_OK:
 22283                                   	; 27/07/2018
 22284                                  	; IBMDOS.COM - Offset 438Eh
 22285                                  	
 22286                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22287                                  	;and	word [es:di+5],0BFBFh
 22288 00003B0B 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22289                                  				; Mark file as dirty, clear no date on close
 22290                                  
 22291                                  	; 04/05/2019 - Retro DOS v4.0	
 22292                                  
 22293                                  	; MSDOS 6.0
 22294                                  	; mov 	ax,[es:di+11h]
 22295 00003B11 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22296 00003B15 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22297                                  	;mov	ax,[es:di+13h]
 22298 00003B18 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22299 00003B1C A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22300                                  
 22301                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22302                                  
 22303                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22304 00003B1F C42E[8A05]              	LES     BP,[THISDPB]
 22305                                  
 22306 00003B23 E8F7FD                  	call	BREAKDOWN
 22307                                  
 22308 00003B26 A1[CE05]                	MOV     AX,[BYTPOS]
 22309 00003B29 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22310 00003B2D E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22311 00003B2F 01C8                    	ADD     AX,CX
 22312 00003B31 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22313                                  
 22314                                  	;mov	bx,[es:bp+2]
 22315 00003B34 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22316                                  
 22317                                  	; MSDOS 3.3
 22318                                  	;cmp	dx,bx
 22319                                  	;jnb	short WRTERR33
 22320                                  	;div	bx
 22321                                  	;mov	bx,ax
 22322                                  	;OR	DX,DX
 22323                                  	;JNZ	short CALCLUS
 22324                                  	;dec	ax
 22325                                  ;CALCLUS:
 22326                                  	; MSDOS 3.3
 22327                                  	;mov	cl,[es:bp+5]
 22328                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22329                                  	;shr	ax,cl
 22330                                  	;push	ax
 22331                                  	;push	dx
 22332                                  	;push	es
 22333                                  	;les	di,[THISSFT]
 22334                                  	;;mov	ax,[es:di+11h]
 22335                                  	;;mov	dx,[es:di+13h]
 22336                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22337                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22338                                  	;pop	es
 22339                                  	;;DX:AX = current file size (in bytes).
 22340                                  	;;div	word [es:bp+2]
 22341                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22342                                  	;mov	cx,ax
 22343                                  	;or	dx,dx
 22344                                  	;jz	short NORND
 22345                                  	;inc	ax
 22346                                  ;NORND:
 22347                                  	; MSDOS 6.0
 22348 00003B38 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22349 00003B3B 89C6                    	MOV	SI,AX
 22350 00003B3D 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22351                                  
 22352                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22353                                  
 22354 00003B41 09D2                    	OR	DX,DX
 22355 00003B43 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22356 00003B44 89CA                    	MOV	DX,CX			;M039
 22357 00003B46 7506                    	JNZ	short CALCLUS
 22358 00003B48 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22359 00003B4B 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22360                                  
 22361                                  CALCLUS:
 22362                                  	; MSDOS 6.0
 22363 00003B4E E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22364 00003B51 5A                      	POP	DX
 22365                                  
 22366                                  ;       AX = Last cluster to write.
 22367                                  ;       DX = # of bytes in last sector to write (the "tail").
 22368                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22369                                  
 22370 00003B52 50                      	PUSH	AX
 22371 00003B53 52                      	PUSH	DX
 22372                                  ;M039
 22373 00003B54 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22374 00003B58 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22375 00003B5B E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22376 00003B5E 890E[0E06]              	mov	[TEMP_VAR2],cx
 22377 00003B62 890E[CA05]              	mov	[VALSEC+2],cx
 22378 00003B66 89C1                    	mov	cx,ax
 22379 00003B68 89F3                    	mov	bx,si
 22380                                  
 22381                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22382                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22383                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22384                                  ;                     DX = # of bytes in last sector of current file.
 22385                                  ;M039
 22386 00003B6A 09D2                    	OR	DX,DX
 22387 00003B6C 7408                    	JZ	short NORND
 22388 00003B6E 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22389 00003B71 8316[CA05]00            	ADC	word [VALSEC+2],0
 22390                                  NORND:	
 22391                                  	; MSDOS 3.3 & MSDOS 6.0
 22392 00003B76 A3[C805]                	MOV     [VALSEC],AX
 22393                                  
 22394                                  ;       [VALSEC] = Last sector of current file.
 22395                                  
 22396 00003B79 31C0                    	XOR     AX,AX
 22397 00003B7B A3[DE05]                	MOV     [GROWCNT],AX
 22398 00003B7E A3[E005]                	MOV     [GROWCNT+2],AX
 22399 00003B81 58                      	POP     AX
 22400                                  
 22401                                  	; MSDOS 6.0
 22402 00003B82 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22403 00003B86 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22404 00003B8A 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22405 00003B8C 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22406 00003B8E 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22407 00003B90 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22408 00003B94 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22409                                  lowsec:
 22410 00003B96 BF0000                  	MOV	DI,0			;F.C. >32mb
 22411                                  	; MSDOS 3.3 & MSDOS 6.0
 22412 00003B99 29CB                    	SUB	BX,CX			; Number of full sectors
 22413 00003B9B 7253                    	JB	short NOGROW
 22414 00003B9D 7444                    	JZ	short TESTTAIL
 22415                                  yesgrow:
 22416                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22417 00003B9F 89D1                    	MOV     CX,DX
 22418 00003BA1 93                      	XCHG    AX,BX
 22419                                  	;mul	word [es:bp+2]
 22420 00003BA2 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22421                                  	
 22422                                  	; MSDOS 6.0
 22423 00003BA6 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22424 00003BAA A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22425 00003BAD 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22426                                  	;mul	word [es:bp+2]
 22427 00003BAF 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22428                                  	
 22429 00003BB3 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22430 00003BB7 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22431 00003BB9 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22432                                  
 22433                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22434 00003BBC 29C8                    	SUB     AX,CX			; Take off current "tail"
 22435 00003BBE 83DA00                  	SBB     DX,0			; 32-bit extension
 22436 00003BC1 01D8                    	ADD     AX,BX			; Add on new "tail"
 22437 00003BC3 83D200                  	ADC     DX,0			; ripple tim's head off
 22438 00003BC6 EB21                    	JMP     SHORT SETGRW
 22439                                  
 22440                                  HAVSTART:
 22441                                  	;int 3
 22442 00003BC8 89C1                    	MOV     CX,AX
 22443 00003BCA E8AA11                  	call	SKPCLP
 22444                                  	;JCXZ	DOWRTJ
 22445                                  	; 16/12/2022
 22446 00003BCD E357                    	jcxz	DOWRT
 22447                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22448                                  	;jcxz	DOWRTJ
 22449                                  
 22450 00003BCF E85013                  	call	ALLOCATE
 22451                                  	;JNC	short DOWRTJ
 22452                                  	; 16/12/2022
 22453 00003BD2 7352                    	jnc	short DOWRT
 22454                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22455                                  	;jnc	short DOWRTJ
 22456                                  
 22457                                  	;entry   WRTERR
 22458                                  WRTERR:
 22459 00003BD4 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22460                                  
 22461                                  	;entry WRTERR22
 22462                                  WRTERR22:
 22463 00003BD6 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22464                                  
 22465                                  	; 27/07/2018
 22466                                  WRTERR33:
 22467                                  	;MOV	CX,0			;No bytes transferred
 22468 00003BD9 31C9                    	XOR     CX,CX
 22469                                  					
 22470 00003BDB C43E[9E05]              	LES     DI,[THISSFT]
 22471                                  	;CLC ; 19/05/2019
 22472                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22473                                  	; 16/12/2022
 22474                                  	;clc
 22475 00003BDF C3                      	retn
 22476                                  
 22477                                  	; 16/12/2022
 22478                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22479                                  ;DOWRTJ:
 22480                                  	;JMP	short DOWRT
 22481                                  
 22482                                  ACC_ERRWJ:
 22483                                  	; 10/08/2018
 22484                                  	;JMP	SET_ACC_ERRW
 22485                                  	; 16/12/2022
 22486 00003BE0 E9D3FD                  	jmp	SET_ACC_ERR_DS
 22487                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22488                                  	;jmp	SET_ACC_ERRW	
 22489                                  
 22490                                  TESTTAIL:
 22491 00003BE3 29D0                    	SUB     AX,DX
 22492 00003BE5 7609                    	JBE	short NOGROW
 22493 00003BE7 31D2                    	XOR     DX,DX
 22494                                  SETGRW:
 22495 00003BE9 A3[DE05]                	MOV	[GROWCNT],AX
 22496 00003BEC 8916[E005]              	MOV	[GROWCNT+2],DX
 22497                                  NOGROW:
 22498 00003BF0 58                      	POP     AX
 22499 00003BF1 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22500 00003BF5 E85F11                  	call	FNDCLUS
 22501 00003BF8 72E6                    	JC	short ACC_ERRWJ
 22502 00003BFA 891E[BC05]              	MOV     [CLUSNUM],BX
 22503 00003BFE 8916[BA05]              	MOV     [LASTPOS],DX
 22504                                  
 22505 00003C02 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22506 00003C04 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22507 00003C06 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22508 00003C08 51                      	PUSH    CX              ; No. of clusters short of first
 22509 00003C09 89C1                    	MOV     CX,AX
 22510 00003C0B E81413                  	call	ALLOCATE
 22511 00003C0E 59                      	POP     CX
 22512 00003C0F 72C3                    	JC	short WRTERR
 22513 00003C11 8B16[BA05]              	MOV     DX,[LASTPOS]
 22514 00003C15 42                      	INC     DX
 22515 00003C16 49                      	DEC     CX
 22516 00003C17 7405                    	JZ	short NOSKIP
 22517 00003C19 E85B11                  	call	SKPCLP
 22518 00003C1C 72C2                    	JC	short ACC_ERRWJ
 22519                                  NOSKIP:
 22520 00003C1E 891E[BC05]              	MOV     [CLUSNUM],BX
 22521 00003C22 8916[BA05]              	MOV     [LASTPOS],DX
 22522                                  DOWRT:
 22523 00003C26 833E[D205]00            	CMP     word [BYTCNT1],0
 22524 00003C2B 7409                    	JZ	short WRTMID
 22525 00003C2D 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22526 00003C31 E8D211                  	call	BUFWRT
 22527 00003C34 72AA                    	JC	short ACC_ERRWJ
 22528                                  WRTMID:
 22529 00003C36 A1[D605]                	MOV     AX,[SECCNT]
 22530 00003C39 09C0                    	OR      AX,AX
 22531                                  	; 20/11/2022
 22532 00003C3B 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22533 00003C3D 0106[C405]              	ADD     [SECPOS],AX
 22534                                  	; 19/05/2019
 22535                                  	; MSDOS 6.0
 22536 00003C41 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22537 00003C46 E81D12                  	call	NEXTSEC
 22538                                  	; 16/12/2022
 22539 00003C49 7295                    	JC	short ACC_ERRWJ
 22540                                  	;JC	short SET_ACC_ERRW	;M039
 22541 00003C4B C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22542 00003C50 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22543 00003C54 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22544 00003C58 8B0E[D605]              	MOV     CX,[SECCNT]
 22545                                  WRTLP:
 22546 00003C5C E83812                  	call	OPTIMIZE
 22547 00003C5F 7248                    	JC	short SET_ACC_ERRW
 22548                                  	; 16/12/2022
 22549                                  	;JC	short ACC_ERRWJ
 22550                                  
 22551                                  ;M039
 22552                                  ;       DI = Next physical cluster.
 22553                                  ;       AX = # sectors remaining.
 22554                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22555                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22556                                  ;	     sectors, also termed an "Extent".)
 22557                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22558                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22559                                  ;
 22560                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22561                                  ;	are in Extent; they are being over-written.
 22562                                  
 22563 00003C61 57                      	push    di
 22564 00003C62 50                      	push    ax
 22565                                  
 22566                                  	; MSDOS 3.3
 22567                                  	; IBMDOS.COM (1987) - Offset 4497h
 22568                                  	;push	dx
 22569                                  	;push	bx
 22570                                  	;mov	al,[es:bp]
 22571                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22572                                  	;mov	bx,cx
 22573                                  	;add	bx,dx	; (bx = Extent end)
 22574                                  
 22575                                  ;	DX = Extent start.
 22576                                  ;	BX = Extent end.
 22577                                  ;	AL = Drive #.
 22578                                  
 22579                                  	;call	SETVISIT
 22580                                  
 22581                                  ;wbufq1:
 22582                                  	;;or	byte [di+5],20h
 22583                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22584                                  	;;cmp	al,[di+4]	
 22585                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22586                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22587                                  	;;cmp	[di+6],dx
 22588                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22589                                  	;jb	short wbufq2
 22590                                  	;;cmp	[di+6],bx
 22591                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22592                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22593                                  
 22594                                  	;; Buffer sector is in the Extent
 22595                                  
 22596                                  	;;mov	word [di+4],20FFh
 22597                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22598                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22599                                  	;				; .buf_flags, AH = 0, reset/clear
 22600                                  	;call	SCANPLACE
 22601                                  ;wbufq2:
 22602                                  	;call	SKIPVISIT
 22603                                  	;jnz	short wbufq1
 22604                                  	;pop	bx
 22605                                  	;pop	dx
 22606                                  
 22607                                          ; MSDOS 6.0
 22608 00003C63 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22609                                  
 22610                                  ;ASSUME DS:NOTHING
 22611                                  ;M039
 22612                                  	; MSDOS 3.3 & MSDOS 6.0
 22613                                  ;hkn; SS override for DMAADD and ALLOWED
 22614 00003C66 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22615                                  	;mov	byte [ss:ALLOWED],38h
 22616 00003C6B 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22617                                  
 22618                                  ;	put logic from DWRITE in-line here so we can modify it
 22619                                  ;	for DISK FULL conditions.
 22620                                  
 22621                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22622                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22623                                  
 22624                                  	; 16/12/2022
 22625                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22626                                  	;call	DWRITE
 22627                                  
 22628                                  ;DWRITE_OKAY:
 22629                                  
 22630                                  	; 16/12/2022
 22631                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22632                                  	;pop     cx
 22633                                  	;pop     bx
 22634                                  	;push    ss
 22635                                  	;pop     ds
 22636                                  	;jc      short SET_ACC_ERRW
 22637                                  	;jcxz    WRTLAST
 22638                                  	;mov     dl, 0
 22639                                  	;inc     word [LASTPOS]
 22640                                  	;jmp     short WRTLP
 22641                                  
 22642                                  	; 16/12/2022
 22643                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22644                                  DWRITE_LUP:
 22645                                  	; 23/07/2019 - Retro DOS v3.2
 22646                                  
 22647                                  	; MSDOS 6.0
 22648 00003C71 E8D7FB                  	call	DSKWRITE
 22649 00003C74 7417                    	jz	short DWRITE_OKAY
 22650                                  
 22651                                  ;;	int	3
 22652                                  
 22653 00003C76 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22654 00003C78 7423                    	jz	short DWRITE_DISK_FULL
 22655                                  
 22656                                  	; 16/12/2022
 22657                                  
 22658                                  ;;hkn; SS override
 22659 00003C7A 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22660 00003C80 E8F7FB                  	call	HARDERRRW
 22661 00003C83 3C01                    	CMP	AL,1		; Check for retry
 22662 00003C85 74EA                    	JZ	short DWRITE_LUP
 22663                                  
 22664                                  	; 16/12/2022
 22665                                  	; 23/07/2019
 22666                                  	;POP	CX ; *4*
 22667                                  	;POP	BX ; *5*
 22668                                  	;
 22669                                  	;push	ss
 22670                                  	;pop	ds
 22671                                  	;
 22672                                  
 22673                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22674                                  
 22675                                  	; 16/12/2022
 22676 00003C87 3C03                    	CMP	AL,3		; Check for FAIL
 22677 00003C89 F8                      	CLC
 22678 00003C8A 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22679 00003C8C F9                      	STC
 22680                                  
 22681                                  DWRITE_OKAY:
 22682                                  	; 16/12/2022
 22683                                  	; 23/07/2019
 22684                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22685 00003C8D 59                      	POP	CX ; *4*
 22686 00003C8E 5B                      	POP	BX ; *5*
 22687                                  
 22688                                  ;       CX = # sectors remaining.
 22689                                  ;       BX = Next physical cluster.
 22690                                  
 22691                                  ;hkn; SS override
 22692                                          ;Context DS
 22693                                  	; 16/12/2022
 22694                                  	;push	ss
 22695                                  	;pop	ds
 22696                                  
 22697                                  	; 16/12/2022
 22698 00003C8F 7218                    	jc	short SET_ACC_ERRW
 22699                                  
 22700                                  	; 16/12/2022
 22701 00003C91 16                      	push	ss
 22702 00003C92 1F                      	pop	ds
 22703                                  
 22704 00003C93 E317                    	JCXZ    WRTLAST
 22705                                  
 22706                                  	;MOV	DL,0
 22707 00003C95 30D2                    	xor	dl,dl ; 23/07/2019
 22708 00003C97 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22709 00003C9B EBBF                    	JMP     short WRTLP
 22710                                  
 22711                                  	; 23/07/2019 - Retro DOS v3.2
 22712                                  	; 09/08/2018
 22713                                  	; MSDOS 6.0
 22714                                  DWRITE_DISK_FULL:
 22715                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22716                                  	; 16/12/2022
 22717 00003C9D 16                      	push	ss
 22718 00003C9E 1F                      	pop	ds
 22719 00003C9F 59                      	pop	cx		; unjunk stack
 22720 00003CA0 5B                      	pop	bx
 22721 00003CA1 C606[0B06]01            	mov	byte [DISK_FULL],1
 22722                                  	;stc
 22723 00003CA6 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22724                                  
 22725                                  	; 16/12/2022
 22726                                  SET_ACC_ERRW:
 22727 00003CA9 E90AFD                  	jmp	SET_ACC_ERR_DS
 22728                                  
 22729                                  WRTLAST:
 22730 00003CAC A1[D405]                	MOV     AX,[BYTCNT2]
 22731 00003CAF 09C0                    	OR      AX,AX
 22732 00003CB1 7413                    	JZ	short FINWRT
 22733 00003CB3 A3[D205]                	MOV     [BYTCNT1],AX
 22734 00003CB6 E8AD11                  	call	NEXTSEC
 22735 00003CB9 72EE                    	JC	short SET_ACC_ERRW
 22736 00003CBB C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22737 00003CC1 E84211                  	call	BUFWRT
 22738 00003CC4 72E3                    	JC	short SET_ACC_ERRW
 22739                                  FINWRT:
 22740 00003CC6 C43E[9E05]              	LES     DI,[THISSFT]
 22741 00003CCA A1[DE05]                	MOV     AX,[GROWCNT]
 22742 00003CCD 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22743 00003CD1 09C0                    	OR      AX,AX
 22744 00003CD3 7502                    	JNZ	short UPDATE_size
 22745 00003CD5 E30F                    	JCXZ    SAMSIZ
 22746                                  UPDATE_size:
 22747                                  	;add	[es:di+11h],ax
 22748 00003CD7 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22749                                  	;adc	[es:di+13h],cx
 22750 00003CDB 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22751                                  
 22752                                  ; Make sure that all other SFT's see this growth also.
 22753                                  
 22754 00003CDF B80100                  	MOV     AX,1
 22755                                  ;if installed
 22756                                  	;Call	JShare + 14 * 4
 22757 00003CE2 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22758                                  ;else
 22759                                  ;	Call    ShSU
 22760                                  ;endif
 22761                                  
 22762                                  SAMSIZ:
 22763 00003CE6 E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22764                                  
 22765                                  	; 16/12/2022
 22766                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22767                                  ;SET_ACC_ERRW:
 22768                                  	;jmp	SET_ACC_ERR_DS
 22769                                  
 22770                                  WRTEOF:
 22771 00003CE9 89C1                    	MOV     CX,AX
 22772 00003CEB 09D1                    	OR      CX,DX
 22773 00003CED 746C                    	JZ	short KILLFIL
 22774 00003CEF 83E801                  	SUB     AX,1
 22775 00003CF2 83DA00                  	SBB     DX,0
 22776                                  
 22777                                  	; MSDOS 3.3
 22778                                  	;;div	word [es:bp+2]
 22779                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22780                                  	;;mov	cl,[es:bp+5]
 22781                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22782                                  	;shr	ax,cl
 22783                                  
 22784                                  	; MSDOS 6.0
 22785 00003CF5 53                      	PUSH	BX
 22786                                  	;mov	bx,[es:bp+2]
 22787 00003CF6 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22788 00003CFA E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22789 00003CFD 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22790 00003CFE 89CA                    	MOV	DX,CX			      ;M039
 22791 00003D00 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22792 00003D04 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22793                                  
 22794 00003D07 89C1                    	MOV     CX,AX
 22795 00003D09 E84B10                  	call	FNDCLUS
 22796                                  SET_ACC_ERRWJ2:
 22797 00003D0C 729B                    	JC	short SET_ACC_ERRW
 22798                                  
 22799 00003D0E E326                    	JCXZ    RELFILE
 22800 00003D10 E80F12                  	call	ALLOCATE
 22801                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22802                                  	; 16/12/2022
 22803 00003D13 7303                    	jnc	short UPDATE
 22804 00003D15 E9BCFE                  	JMP	WRTERR
 22805                                  UPDATE:
 22806 00003D18 C43E[9E05]              	LES	DI,[THISSFT]
 22807 00003D1C A1[CE05]                	MOV	AX,[BYTPOS]
 22808                                  	;mov	[es:di+11h],ax
 22809 00003D1F 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22810 00003D23 A1[D005]                	MOV	AX,[BYTPOS+2]
 22811                                  	;mov	[es:di+13h],ax
 22812 00003D26 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22813                                  ;
 22814                                  ; Make sure that all other SFT's see this growth also.
 22815                                  ;
 22816 00003D2A B80200                  	MOV     AX,2
 22817                                  ;if installed
 22818                                  	;Call	JShare + 14 * 4
 22819 00003D2D FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22820                                  ;else
 22821                                  ;	Call    ShSU
 22822                                  ;endif
 22823 00003D31 31C9                    	XOR     CX,CX
 22824 00003D33 E935FD                  	jmp	ADDREC
 22825                                  
 22826                                  	; 16/12/2022
 22827                                  ;WRTERRJ: 
 22828                                  	;JMP	WRTERR
 22829                                  
 22830                                  ;;;;;;;;;;;;;;;; 7/18/86
 22831                                  ;;;;;;;;;;;;;;;;
 22832                                  
 22833                                  RELFILE:
 22834                                  	; MSDOS 6.0
 22835 00003D36 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22836 00003D37 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22837                                  	;cmp	dx,[es:di+19h]
 22838 00003D3B 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22839 00003D3F 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22840                                  	;mov	[es:di+19h],0
 22841 00003D41 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22842                                  	;mov	dx,[es:di+0Bh]
 22843 00003D47 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22844                                  	;mov	[es:di+35h],dx
 22845 00003D4B 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22846                                  SKIPRESET:                            		;AN002; BL
 22847 00003D4F 07                      	POP     ES                    		;AN002; BL
 22848                                  ;
 22849 00003D50 BAFFFF                  	MOV     DX,0FFFFH
 22850 00003D53 E87A12                  	call	RELBLKS
 22851                                  	; 16/12/2022
 22852                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22853 00003D56 73C0                    	jnc	short UPDATE
 22854                                  SET_ACC_ERRWJ:
 22855                                  	;JC	short SET_ACC_ERRWJ2
 22856                                  	;JMP	SHORT UPDATE
 22857                                  	; 16/12/2022
 22858 00003D58 E95BFC                  	jmp	SET_ACC_ERR_DS
 22859                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22860                                  	;JC	short SET_ACC_ERRWJ2
 22861                                  	;JMP	SHORT UPDATE
 22862                                  
 22863                                  KILLFIL:
 22864 00003D5B 31DB                    	XOR     BX,BX
 22865 00003D5D 06                      	PUSH    ES
 22866 00003D5E C43E[9E05]              	LES     DI,[THISSFT]
 22867                                  	;mov	[es:di+19h],bx
 22868 00003D62 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22869                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22870 00003D66 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22871                                  	;xchg	bx,[es:di+0Bh]
 22872 00003D6A 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22873 00003D6E 07                      	POP	ES
 22874                                  
 22875 00003D6F 09DB                    	OR	BX,BX
 22876                                  	;JZ	short UPDATEJ
 22877                                  	; 16/12/2022
 22878 00003D71 74A5                    	jz	short UPDATE
 22879                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22880                                  	;jz	short UPDATEJ
 22881                                  
 22882                                  ;; 10/23/86 FastOpen update
 22883 00003D73 06                      	PUSH	ES              ; since first cluster # is 0
 22884 00003D74 55                      	PUSH	BP              ; we must delete the old cache entry
 22885 00003D75 50                      	PUSH	AX
 22886 00003D76 51                      	PUSH	CX
 22887 00003D77 52                      	PUSH	DX
 22888 00003D78 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22889                                  	; 15/12/2022
 22890 00003D7C 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22891                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22892                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22893 00003D80 89D9                    	MOV	CX,BX                    ; first cluster #
 22894 00003D82 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22895 00003D84 E809EA                  	call	FastOpen_Update          ; call fastopen
 22896 00003D87 5A                      	POP	DX
 22897 00003D88 59                      	POP	CX
 22898 00003D89 58                      	POP	AX
 22899 00003D8A 5D                      	POP	BP
 22900 00003D8B 07                      	POP	ES
 22901                                  ;; 10/23/86 FastOpen update
 22902                                  
 22903 00003D8C E83F12                  	call	RELEASE
 22904 00003D8F 72C7                    	JC	short SET_ACC_ERRWJ
 22905                                  UPDATEJ:
 22906                                  	; 20/11/2022
 22907 00003D91 EB85                    	JMP	short UPDATE ; 10/08/2018
 22908                                  
 22909                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22910                                  ;----------------------------------------------------------------------------
 22911                                  ;
 22912                                  ; Procedure Name : DskWrtBufPurge
 22913                                  ;
 22914                                  ; Inputs:
 22915                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22916                                  ;	     sectors, also termed an "Extent".)
 22917                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22918                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22919                                  ;
 22920                                  ; Function:
 22921                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22922                                  ;	are in Extent; they are being over-written.
 22923                                  ;
 22924                                  ; Outputs:
 22925                                  ;       (Same as Input.)
 22926                                  ; Uses:
 22927                                  ;       All registers except DS,AX,SI,DI preserved.
 22928                                  ;       SS override for all global variables.
 22929                                  ;----------------------------------------------------------------------------
 22930                                  ;M039: Created
 22931                                  
 22932                                  ;procedure   DskWrtBufPurge,NEAR
 22933                                  ;
 22934                                  ;ASSUME  DS:NOTHING
 22935                                  
 22936                                  ; 04/05/2019 - Retro DOS v4.0
 22937                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22938                                  
 22939                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22940                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22941                                  
 22942                                  DskWrtBufPurge:
 22943                                  	;SaveReg <bx,cx>
 22944 00003D93 53                      	push	bx
 22945 00003D94 51                      	push	cx
 22946                                  
 22947 00003D95 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 22948 00003D9A 89DE                    	mov	si,bx
 22949 00003D9C 01D1                    	add	cx,dx
 22950 00003D9E 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 22951                                  
 22952                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22953                                  	;;mov	al,[es:bp+0]
 22954                                  	;mov	al,[es:bp+DPB.DRIVE]
 22955                                  	; 15/12/2022
 22956 00003DA1 268A4600                	mov	al,[es:bp]
 22957                                  
 22958                                  ;	BX:DX = Extent start.
 22959                                  ;	SI:CX = Extent end + 1.
 22960                                  ;	AL = Drive #
 22961                                  
 22962 00003DA5 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 22963 00003DAB 7431                    	je	short nosc		; -no, jump.
 22964                                  
 22965                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 22966                                  ;	invalidate the entire SC. (This is an optimization; we really only
 22967                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 22968                                  
 22969 00003DAD 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 22970 00003DB2 752A                    	jne	short nosc		; -no, jump.
 22971                                  
 22972 00003DB4 50                      	push    ax
 22973 00003DB5 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 22974 00003DB9 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 22975                                  
 22976                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 22977                                  	;jbe	short sc5		; -yes, jump.
 22978                                  
 22979 00003DBE 39FE                    	cmp	si,di
 22980 00003DC0 7502                    	jne	short sc01
 22981 00003DC2 39C1                    	cmp	cx,ax
 22982                                  sc01: 
 22983 00003DC4 7617                    	jbe	short sc5	
 22984                                  
 22985 00003DC6 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 22986 00003DCB 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 22987                                  	
 22988                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 22989                                  	;jae	short sc5		; -yes, jump.
 22990                                  
 22991 00003DCE 39FB                    	cmp	bx,di
 22992 00003DD0 7502                    	jne	short sc02
 22993 00003DD2 39C2                    	cmp	dx,ax
 22994                                  sc02:
 22995 00003DD4 7307                    	jnb	short sc5
 22996                                  
 22997 00003DD6 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 22998                                  sc5:	
 22999 00003DDD 58                      	pop     ax
 23000                                  
 23001                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23002                                  ;	written.
 23003                                  
 23004                                  nosc:	
 23005 00003DDE E82E1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23006                                  
 23007                                  _bufq:	
 23008                                  	;cmpo	al,[di+4]
 23009 00003DE1 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23010 00003DE4 7527                    	jne	short bufq5		; -no, jump.
 23011                                  
 23012                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23013                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23014                                  
 23015                                  	;cmp	bx,[di+8]
 23016 00003DE6 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23017 00003DE9 7503                    	jne	short bufq04
 23018                                  	;cmp	dx,[di+6]
 23019 00003DEB 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23020                                  bufq04:
 23021 00003DEE 771D                    	ja	short bufq5
 23022                                  
 23023                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23024                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23025                                  
 23026                                  	;cmp	si,[di+8]
 23027 00003DF0 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23028 00003DF3 7503                    	jne	short bufq05
 23029                                  	;cmp	cx,[di+6]
 23030 00003DF5 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23031                                  bufq05:
 23032 00003DF8 7613                    	jbe	short bufq5
 23033                                  
 23034                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23035                                  
 23036                                  	;test	byte [di+5],40h
 23037 00003DFA F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23038 00003DFE 7403                    	jz	short bufq4		; -no, jump.
 23039 00003E00 E87D1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23040                                  bufq4:
 23041                                  	;mov	word [di+4],20FFh
 23042 00003E03 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23043                                  
 23044 00003E08 E8161C                  	call	SCANPLACE
 23045 00003E0B EB02                    	jmp     short bufq6
 23046                                  bufq5: 
 23047 00003E0D 8B3D                    	mov     di,[di]
 23048                                  	;mov	di,[di+BUFFINFO.buf_next]
 23049                                  bufq6: 
 23050 00003E0F 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23051 00003E14 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23052                                  	
 23053                                  	;RestoreReg <cx,bx>
 23054 00003E16 59                      	pop	cx
 23055 00003E17 5B                      	pop	bx
 23056 00003E18 C3                      	retn
 23057                                  
 23058                                  ;EndProc DskWrtBufPurge
 23059                                  
 23060                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23061                                  ;----------------------------------------------------------------------------
 23062                                  ;
 23063                                  ; Procedure Name : DIV32
 23064                                  ;
 23065                                  ; Inputs:
 23066                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23067                                  ; Function:
 23068                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23069                                  ; Outputs:
 23070                                  ;       CX:AX = quotient , DX= remainder
 23071                                  ; Uses:
 23072                                  ;       All registers except AX,CX,DX preserved.
 23073                                  ;----------------------------------------------------------------------------
 23074                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23075                                  
 23076                                  ; 04/05/2019 - Retro DOS v4.0
 23077                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23078                                  
 23079                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23080                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23081                                  
 23082                                  DIV32:
 23083 00003E19 81FB0002                	cmp	bx,512
 23084 00003E1D 7515                    	jne	short div5
 23085                                  
 23086 00003E1F 89D1                    	mov	cx,dx
 23087 00003E21 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23088 00003E23 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23089 00003E27 88E0                    	mov	al,ah
 23090 00003E29 88CC                    	mov	ah,cl
 23091 00003E2B 88E9                    	mov	cl,ch
 23092 00003E2D 30ED                    	xor	ch,ch
 23093 00003E2F D1E9                    	shr	cx,1
 23094 00003E31 D1D8                    	rcr	ax,1
 23095 00003E33 C3                      	retn
 23096                                  div5:	
 23097 00003E34 89C1                    	mov	cx,ax
 23098 00003E36 89D0                    	mov	ax,dx
 23099 00003E38 31D2                    	xor	dx,dx
 23100 00003E3A F7F3                    	div	bx              ; 0:AX/BX
 23101 00003E3C 91                      	xchg	cx,ax
 23102 00003E3D F7F3                    	div	bx              ; DX:AX/BX
 23103 00003E3F C3                      	retn
 23104                                  
 23105                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23106                                  ;----------------------------------------------------------------------------
 23107                                  ;
 23108                                  ; Procedure Name : SHR32
 23109                                  ;
 23110                                  ; Inputs:
 23111                                  ;	DX:AX = 32 bit sector number
 23112                                  ; Function:
 23113                                  ;       Perform 32 bit shift right
 23114                                  ; Outputs:
 23115                                  ;	AX = cluster number
 23116                                  ;	ZF = 1 if no error
 23117                                  ;	   = 0 if error (cluster number > 64k)
 23118                                  ; Uses:
 23119                                  ;       DX,CX
 23120                                  ;---------------------------------------------------------------------------
 23121                                  ; M017	- SHR32 rewritten for better performance
 23122                                  ; M039	- Additional optimization
 23123                                  
 23124                                  ; 04/05/2019 - Retro DOS v4.0
 23125                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23126                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23127                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23128                                  
 23129                                  SHR32:
 23130                                  	;mov	cl,[es:bp+5]
 23131 00003E40 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23132 00003E44 30ED                    	xor	ch,ch	    ;ZF=1
 23133 00003E46 E306                    	jcxz	norota
 23134                                  
 23135                                  rotashft2:
 23136 00003E48 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23137 00003E4A D1D8                    	rcr	ax,1	    ;ZF not affected.
 23138 00003E4C E2FA                    	loop	rotashft2
 23139                                  norota:
 23140 00003E4E C3                      	retn
 23141                                  
 23142                                  ;============================================================================
 23143                                  ; DIR.ASM, MSDOS 6.0, 1991
 23144                                  ;============================================================================
 23145                                  ; 27/07/2018 - Retro DOS v3.0
 23146                                  ; 19/05/2019 - Retro DOS v4.0 
 23147                                  
 23148                                  ;	TITLE	DIR - Directory and path cracking
 23149                                  ;	NAME	Dir
 23150                                  
 23151                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23152                                  ;---------------------------------------------------------------------------
 23153                                  ;
 23154                                  ; Procedure Name : FINDENTRY,SEARCH
 23155                                  ;
 23156                                  ; Inputs:
 23157                                  ;	[THISDPB] set
 23158                                  ;	[SECCLUSPOS] = 0
 23159                                  ;	[DIRSEC] = Starting directory sector number
 23160                                  ;	[CLUSNUM] = Next cluster of directory
 23161                                  ;	[CLUSFAC] = Sectors/Cluster
 23162                                  ;	[NAME1] = Name to look for
 23163                                  ; Function:
 23164                                  ;	Find file name in disk directory.
 23165                                  ;	"?" matches any character.
 23166                                  ; Outputs:
 23167                                  ;	Carry set if name not found
 23168                                  ;	ELSE
 23169                                  ;	Zero set if attributes match (always except when creating)
 23170                                  ;	AH = Device ID (bit 7 set if not disk)
 23171                                  ;	[THISDPB] = Base of drive parameters
 23172                                  ;	DS = DOSGROUP
 23173                                  ;	ES = DOSGROUP
 23174                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23175                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23176                                  ;	[CURBUF] has directory record with match
 23177                                  ;	[NAME1] has file name
 23178                                  ;	[LASTENT] is entry number of the entry
 23179                                  ; All other registers destroyed.
 23180                                  ;----------------------------------------------------------------------------
 23181                                  
 23182                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23183                                  ;hkn; this point.
 23184                                  
 23185                                  SEARCH:
 23186                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23187                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23188                                  
 23189                                  	; 19/05/2019 - Retro DOS v4.0
 23190                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23191                                  
 23192                                  	; 27/07/2018 - Retro DOS v3.0
 23193                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23194                                  	; 15/03/2018 - Retro DOS v2.0
 23195                                  
 23196                                  	;entry	FindEntry
 23197                                  FINDENTRY:
 23198 00003E4F E84804                  	call	STARTSRCH
 23199 00003E52 A0[6B05]                	MOV	AL,[ATTRIB]
 23200                                  	;and	al,9Eh
 23201 00003E55 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23202                                  	;cmp	al,8
 23203 00003E57 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23204 00003E59 7503                    	JNZ	short NOTVOLSRCH	; No
 23205 00003E5B E87501                  	CALL	SETROOTSRCH		; Yes force search of root
 23206                                  NOTVOLSRCH:
 23207 00003E5E E80601                  	CALL	GETENTRY
 23208 00003E61 7303                    	JNC	short SRCH
 23209 00003E63 E99500                  	JMP	SETESRET
 23210                                  
 23211                                  	;entry	Srch
 23212                                  SRCH:
 23213 00003E66 1E                      	PUSH	DS
 23214 00003E67 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23215                                  
 23216                                  ;	(DS:BX) = directory entry address
 23217                                  
 23218 00003E6B 8A27                    	mov	ah,[BX]
 23219                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23220 00003E6D 08E4                    	OR	AH,AH			; End of directory?
 23221 00003E6F 743A                    	JZ	short FREE
 23222                                  
 23223                                  ;hkn; SS override
 23224 00003E71 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23225 00003E76 7433                    	JZ	short FREE
 23226                                  	;test	byte [bx+0Bh],8
 23227 00003E78 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23228                                  					; Volume ID file?
 23229 00003E7C 7405                    	JZ	short CHKFNAM 		; NO
 23230                                  
 23231                                  ;hkn; SS override
 23232 00003E7E 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23233                                  CHKFNAM:
 23234                                  ;	Context ES
 23235 00003E83 8CD6                    	MOV	SI,SS
 23236 00003E85 8EC6                    	MOV	ES,SI
 23237 00003E87 89DE                    	MOV	SI,BX
 23238                                  
 23239                                  ;hkn; NAME1 is in DOSDATA
 23240 00003E89 BF[4B05]                	MOV	DI,NAME1
 23241                                  ;;;;; 7/29/86
 23242                                  
 23243                                  ;hkn; SS override for NAME1
 23244 00003E8C 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23245 00003E92 7506                    	JNZ	short NO_E5
 23246 00003E94 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23247                                  NO_E5:
 23248                                  ;;;;; 7/29/86
 23249 00003E9A E86100                  	CALL	MetaCompare
 23250 00003E9D 7428                    	JZ	short FOUND
 23251 00003E9F 1F                      	POP	DS
 23252                                  
 23253                                  	;entry	NEXTENT
 23254                                  NEXTENT:
 23255 00003EA0 C42E[8A05]              	LES	BP,[THISDPB]
 23256 00003EA4 E86600                  	CALL	NEXTENTRY
 23257 00003EA7 73BD                    	JNC	short SRCH
 23258 00003EA9 EB50                    	JMP	SHORT SETESRET
 23259                                  
 23260                                  FREE:
 23261 00003EAB 1F                      	POP	DS
 23262 00003EAC 8B0E[4803]              	MOV	CX,[LASTENT]
 23263 00003EB0 3B0E[D805]              	CMP	CX,[ENTFREE]
 23264 00003EB4 7304                    	JAE	short TSTALL
 23265 00003EB6 890E[D805]              	MOV	[ENTFREE],CX
 23266                                  TSTALL:
 23267 00003EBA 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23268                                  NEXTENTJ:
 23269 00003EBE 74E0                    	je	short NEXTENT 		; No - continue search
 23270 00003EC0 890E[DA05]              	MOV	[ENTLAST],CX
 23271 00003EC4 F9                      	STC
 23272 00003EC5 EB34                    	JMP	SHORT SETESRET
 23273                                  
 23274                                  FOUND:
 23275                                  ; We have a file with a matching name. We must now consider the attributes:
 23276                                  ; ATTRIB	Action
 23277                                  ; ------	------
 23278                                  ; Volume_ID	Is Volume_ID in test?
 23279                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23280                                  ;		If create then Is ATTRIB equal to test?
 23281                                  
 23282 00003EC7 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23283 00003EC9 1F                      	POP	DS
 23284 00003ECA 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23285                                  	;and	ah,9Eh
 23286 00003ECE 80E4DE                  	AND	AH,~attr_ignore
 23287                                  	;lea	si,[si+15]
 23288 00003ED1 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23289                                  					; point to first cluster field
 23290                                  	;test	ch,8
 23291 00003ED4 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23292 00003ED7 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23293                                  	;test	ah,8
 23294 00003ED9 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23295                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23296                                  	; 16/12/2022
 23297 00003EDC 74C2                    	jz	short NEXTENT ; 19/05/2019
 23298                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23299                                  	;JZ	short NEXTENTJ
 23300 00003EDE 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23301 00003EE0 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23302                                  check_one_volume_id:
 23303                                  	;CMP	ah,8
 23304 00003EE2 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23305                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23306                                  	; 16/12/2022
 23307 00003EE5 74B9                    	je	short NEXTENT ; 19/05/2019
 23308                                  	;JZ	short NEXTENTJ
 23309 00003EE7 E8C403                  	CALL	MatchAttributes
 23310 00003EEA 7407                    	JZ	SHORT RETFF
 23311 00003EEC F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23312                                  	; 16/12/2022
 23313                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23314 00003EF1 74AD                    	jz	short NEXTENT ; 19/05/2019
 23315                                  RETFF:
 23316 00003EF3 C42E[8A05]              	LES	BP,[THISDPB]
 23317                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23318                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23319                                  	; 15/12/2022
 23320 00003EF7 268A6600                	MOV	AH,[ES:BP]
 23321                                  SETESRET:
 23322 00003EFB 16                      	PUSH	SS
 23323 00003EFC 07                      	POP	ES
 23324 00003EFD C3                      	retn
 23325                                  
 23326                                  ;----------------------------------------------------------------------------
 23327                                  ;
 23328                                  ; Procedure Name : MetaCompare
 23329                                  ;
 23330                                  ; Inputs:
 23331                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23332                                  ;	    Typically this is a directory entry.  It MUST be in upper case
 23333                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23334                                  ;	    Typically this is a FCB or SFT.  It MUST be in upper case
 23335                                  ; Function:
 23336                                  ;	Compare FCB style names allowing for ? match to any char
 23337                                  ; Outputs:
 23338                                  ;	Zero if match else NZ
 23339                                  ; Destroys CX,SI,DI all others preserved
 23340                                  ;----------------------------------------------------------------------------
 23341                                  
 23342                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23343                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23344                                  
 23345                                  MetaCompare:
 23346 00003EFE B90B00                  	MOV	CX,11
 23347                                  WILDCRD:
 23348 00003F01 F3A6                    	REPE	CMPSB
 23349 00003F03 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23350                                  CHECK_META:
 23351 00003F05 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23352 00003F0A 74F5                    	JZ	short WILDCRD
 23353                                  MetaRet:
 23354 00003F0C C3                       	retn				; Zero set, Match
 23355                                  
 23356                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23357                                  ;----------------------------------------------------------------------------
 23358                                  ;
 23359                                  ; Procedure Name : NEXTENTRY
 23360                                  ;
 23361                                  ; Inputs:
 23362                                  ;	Same as outputs of GETENTRY, above
 23363                                  ; Function:
 23364                                  ;	Update BX, and [LASTENT] for next directory entry.
 23365                                  ;	Carry set if no more.
 23366                                  ;----------------------------------------------------------------------------
 23367                                  
 23368                                  NEXTENTRY:
 23369                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23370                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23371                                  
 23372                                  	; 19/05/2019 - Retro DOS v4.0
 23373                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23374                                  
 23375                                  	; 27/07/2018 - Retro DOS v3.0
 23376                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23377                                  	; 15/03/2018 - Retro DOS v2.0
 23378                                  
 23379 00003F0D A1[4803]                	MOV	AX,[LASTENT]
 23380 00003F10 3B06[DA05]              	CMP	AX,[ENTLAST]
 23381 00003F14 7422                    	JZ	short NONE
 23382 00003F16 40                      	INC	AX
 23383                                  	;ADD	BX,32
 23384 00003F17 8D5F20                  	LEA	BX,[BX+32]
 23385 00003F1A 39D3                    	CMP	BX,DX
 23386                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23387                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23388                                  	; 16/12/2022
 23389 00003F1C 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23390 00003F1E 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23391 00003F22 FEC3                    	INC	BL
 23392 00003F24 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23393 00003F28 7215                    	JB	short SAMECLUS
 23394 00003F2A 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23395 00003F2E E80A17                  	call	IsEOF
 23396 00003F31 7305                    	JAE	short NONE
 23397                                  	; 23/07/2019
 23398 00003F33 83FB02                  	CMP	BX,2
 23399                                  	;JB	short NONE
 23400                                  	;JMP	short GETENT
 23401                                  	; 16/12/2022
 23402 00003F36 7332                    	jnb	short GETENT
 23403                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23404                                  	;JB	short NONE
 23405                                  	;JMP	short GETENT
 23406                                  NONE:
 23407 00003F38 F9                      	STC
 23408 00003F39 C3                      	retn
 23409                                  HAVIT:
 23410 00003F3A A3[4803]                	MOV	[LASTENT],AX
 23411 00003F3D F8                      	CLC
 23412                                  nextentry_retn:
 23413 00003F3E C3                      	retn
 23414                                  SAMECLUS:
 23415 00003F3F 881E[7305]              	MOV	[SECCLUSPOS],BL
 23416 00003F43 A3[4803]                	MOV	[LASTENT],AX
 23417 00003F46 1E                      	PUSH	DS
 23418 00003F47 C53E[E205]              	LDS	DI,[CURBUF]
 23419                                  	; 19/05/2019
 23420                                  	; MSDOS 6.0
 23421                                  	;mov	dx,[di+8]
 23422 00003F4B 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23423                                  ;hkn; SS override
 23424 00003F4E 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23425                                  	;mov	dx,[di+6]
 23426 00003F53 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23427                                  	;inc	dx ; MSDOS 3.3
 23428                                  	; MSDOS 6.0
 23429 00003F56 83C201                  	ADD	DX,1				;AN000; >32mb
 23430 00003F59 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23431                                  	; MSDOS 3.3 & MSDOS 6.0
 23432 00003F5F 1F                      	POP	DS
 23433 00003F60 E82AF8                  	call	FIRSTCLUSTER
 23434 00003F63 31DB                    	XOR	BX,BX
 23435 00003F65 EB23                    	JMP	short SETENTRY
 23436                                  
 23437                                  ;----------------------------------------------------------------------------
 23438                                  ;
 23439                                  ; Procedure Name : GETENTRY
 23440                                  ;
 23441                                  ; Inputs:
 23442                                  ;	[LASTENT] has directory entry
 23443                                  ;	ES:BP points to drive parameters
 23444                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23445                                  ; Function:
 23446                                  ;	Locates directory entry in preparation for search
 23447                                  ;	GETENT provides entry for passing desired entry in AX
 23448                                  ; Outputs:
 23449                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23450                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23451                                  ;	[LASTENT] = New directory entry number
 23452                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23453                                  ;	Carry set if error (currently user FAILed to I 24)
 23454                                  ;----------------------------------------------------------------------------
 23455                                  
 23456                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23457                                  GETENTRY:
 23458                                  	; 27/07/2018 - Retro DOS v3.0
 23459 00003F67 A1[4803]                	MOV	AX,[LASTENT]
 23460                                  
 23461                                  	;entry	GETENT
 23462                                  GETENT:
 23463 00003F6A A3[4803]                	MOV	[LASTENT],AX
 23464                                  ;
 23465                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23466                                  ; directory.
 23467                                  ;
 23468 00003F6D B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23469 00003F6F D3C0                    	rol	ax,cl			; keep hight order bits
 23470 00003F71 89C2                    	mov	dx,ax
 23471                                  	; 19/05/2019 - Retro DOS v4.0
 23472                                  	;and	ax,0FFE0h
 23473                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23474                                  	;and	ax,~(32-1)		; mask off high order bits
 23475                                  	; 16/12/2022
 23476 00003F73 24E0                    	and	al,0E0h ; ~31
 23477 00003F75 83E21F                  	and	dx,1Fh
 23478                                  	;and	dx,32-1			; mask off low order bits
 23479                                  ;
 23480                                  ; DX:AX contain the byte offset of the required directory entry from the
 23481                                  ; beginning of the directory. Convert this to a sector number. Round the
 23482                                  ; sector size down to a multiple of 32.
 23483                                  ;
 23484                                  	;mov	bx,[es:bp+2]
 23485 00003F78 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23486 00003F7C 80E3E0                  	and	bl,0E0h
 23487                                  	;AND	BL,255-31		; Must be multiple of 32
 23488 00003F7F F7F3                    	DIV	BX
 23489 00003F81 89D3                    	MOV	BX,DX			; Position within sector
 23490 00003F83 53                      	PUSH	BX
 23491 00003F84 E8ADF7                  	call	DIRREAD
 23492 00003F87 5B                      	POP	BX
 23493                                  	;retc
 23494 00003F88 72B4                    	jc	short nextentry_retn	
 23495                                  SETENTRY:
 23496 00003F8A 8B16[E205]              	MOV	DX,[CURBUF]
 23497                                  	;add	dx,16 ; MSDOS 3.3
 23498                                  	;add	dx,20 ; MSDOS 6.0 
 23499 00003F8E 83C214                  	ADD	DX,BUFINSIZ
 23500 00003F91 01D3                    	ADD	BX,DX
 23501                                  	;add	dx,[es:bp+2]
 23502 00003F93 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23503 00003F97 C3                      	retn
 23504                                  
 23505                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23506                                  ;----------------------------------------------------------------------------
 23507                                  ;
 23508                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23509                                  ;
 23510                                  ; Inputs:
 23511                                  ;	BX cluster number of start of directory
 23512                                  ;	ES:BP Points to DPB
 23513                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23514                                  ; Function:
 23515                                  ;	Set up a directory search
 23516                                  ; Outputs:
 23517                                  ;	[DIRSTART] = BX
 23518                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23519                                  ;	Carry set if error (currently user FAILed to I 24)
 23520                                  ; destroys AX,DX,BX
 23521                                  ;----------------------------------------------------------------------------
 23522                                  
 23523                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23524                                  SETDIRSRCH:
 23525 00003F98 09DB                    	OR	BX,BX
 23526 00003F9A 7437                    	JZ	short SETROOTSRCH
 23527 00003F9C 891E[C205]              	MOV	[DIRSTART],BX
 23528                                  	;mov	al,[es:bp+4]
 23529 00003FA0 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23530 00003FA4 FEC0                    	INC	AL
 23531 00003FA6 A2[7705]                	MOV	[CLUSFAC],AL
 23532                                  
 23533                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23534                                  	;SAVE	<SI>
 23535 00003FA9 56                      	push	si
 23536                                  	;test	byte [FastOpenFlg],2
 23537 00003FAA F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23538 00003FAF 7507                    	JNZ	short UNP_OK
 23539                                  
 23540                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23541                                  	;invoke	UNPACK
 23542 00003FB1 E89E16                  	call	UNPACK
 23543 00003FB4 7302                    	JNC	short UNP_OK
 23544                                  	;RESTORE <SI>
 23545 00003FB6 5E                      	pop	si
 23546                                  	;return
 23547 00003FB7 C3                      	retn
 23548                                  
 23549                                  UNP_OK:
 23550 00003FB8 893E[BC05]              	MOV	[CLUSNUM],DI
 23551 00003FBC 89DA                    	MOV	DX,BX
 23552 00003FBE 30DB                    	XOR	BL,BL
 23553 00003FC0 881E[7305]              	MOV	[SECCLUSPOS],BL
 23554                                  	;invoke	FIGREC
 23555 00003FC4 E82F0F                  	call	FIGREC
 23556                                  	;RESTORE <SI>
 23557 00003FC7 5E                      	pop	si
 23558                                  	
 23559                                  	; 19/05/2019 - Retro DOS v4.0
 23560                                  
 23561                                  	; MSDOS 6.0
 23562                                  	;PUSH	DX			   ;AN000; >32mb
 23563                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23564                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23565                                  	;POP	DX			   ;AN000; >32mb
 23566                                  
 23567                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23568                                  	;push	dx
 23569                                  	;mov	dx,[HIGH_SECTOR]
 23570                                  	;mov	[DIRSEC+2],dx
 23571                                  	;pop	dx
 23572                                  	;MOV	[DIRSEC],dx
 23573                                  	; 16/12/2022
 23574 00003FC8 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23575 00003FCB A3[C005]                	mov	[DIRSEC+2],AX
 23576 00003FCE 8916[BE05]              	MOV	[DIRSEC],DX
 23577                                  
 23578                                  	; 16/12/2022
 23579                                  	; cf=0 (at the return of FIGREC)
 23580                                  	;CLC
 23581 00003FD2 C3                      	retn
 23582                                  
 23583                                  	;entry	SETROOTSRCH
 23584                                  SETROOTSRCH:
 23585 00003FD3 31C0                    	XOR	AX,AX
 23586 00003FD5 A3[C205]                	MOV	[DIRSTART],AX
 23587 00003FD8 A2[7305]                	MOV	[SECCLUSPOS],AL
 23588 00003FDB 48                      	DEC	AX
 23589 00003FDC A3[BC05]                	MOV	[CLUSNUM],AX
 23590                                  	;mov	ax,[es:bp+0Bh]
 23591 00003FDF 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23592                                  	; 19/05/2019
 23593                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23594                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23595 00003FE3 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23596 00003FE7 29D0                    	SUB	AX,DX
 23597 00003FE9 A2[7705]                	MOV	[CLUSFAC],AL
 23598 00003FEC 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23599                                  	; MSDOS 6.0
 23600 00003FF0 C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23601 00003FF6 F8                      	CLC
 23602 00003FF7 C3                      	retn
 23603                                  
 23604                                  ;============================================================================
 23605                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23606                                  ;============================================================================
 23607                                  ; 27/07/2018 - Retro DOS v3.0
 23608                                  ; 19/05/2019 - Retro DOS v4.0 
 23609                                  
 23610                                  ;	TITLE	DIR2 - Directory and path cracking
 23611                                  ;	NAME	Dir2
 23612                                  
 23613                                  ;Break	<GETPATH -- PARSE A WFP>
 23614                                  ;----------------------------------------------------------------------------
 23615                                  ;
 23616                                  ; Procedure Name : GETPATH
 23617                                  ;
 23618                                  ; Inputs:
 23619                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23620                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23621                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23622                                  ;		( = -1 if current dir not involved, else
 23623                                  ;		 Points to first char after last "/" of current dir part)
 23624                                  ;	[THISCDS] Points to CDS being used
 23625                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23626                                  ;	[NoSetDir] set
 23627                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23628                                  ; Function:
 23629                                  ;	Crack the path
 23630                                  ; Outputs:
 23631                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23632                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23633                                  ;	ID1 field of [THISCDS] updated appropriately
 23634                                  ;	[ATTRIB] = [SATTRIB]
 23635                                  ;	ES:BP Points to DPB
 23636                                  ;	Carry set if bad path
 23637                                  ;	   SI Points to path element causing failure
 23638                                  ;	   Zero set
 23639                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23640                                  ;	      start a search on the last directory
 23641                                  ;	      CL is zero if there is a bad name in the path
 23642                                  ;	      CL is non-zero if the name was simply not found
 23643                                  ;		 [ENTFREE] may have free spot in directory
 23644                                  ;		 [NAME1] is the name.
 23645                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23646                                  ;	   Zero reset
 23647                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23648                                  ;		or path too long or malformed path
 23649                                  ;	ELSE
 23650                                  ;	   [CurBuf] = -1 if root directory
 23651                                  ;	   [CURBUF] contains directory record with match
 23652                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23653                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23654                                  ;	   AH = device ID
 23655                                  ;	      bit 7 of AH set if device SI and BX
 23656                                  ;	      will point DOSGROUP relative The firclus
 23657                                  ;	      field of the device entry contains the device pointer
 23658                                  ;	   [NAME1] Has name looked for
 23659                                  ;	   If last element is a directory zero is set and:
 23660                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23661                                  ;	      are set up to start a search on it.
 23662                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23663                                  ;	      like that for a file (except for zero flag)
 23664                                  ;	   If last element is a file zero is reset
 23665                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23666                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23667                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23668                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23669                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23670                                  ; DS preserved, Others destroyed
 23671                                  ;---------------------------------------------------------------------------
 23672                                  
 23673                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23674                                  ;hkn; DS already set up at this point.
 23675                                  
 23676                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23677                                  GETPATH:
 23678                                  	;mov	word [CREATING],0E500h
 23679 00003FF8 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23680                                  
 23681                                  ; Same as GetPath only CREATING and DELALL already set
 23682                                  
 23683                                  	;entry	GetPathNoSet
 23684                                  GetPathNoSet:
 23685                                  	;mov	byte [EXTERR_LOCUS],2	
 23686 00003FFE C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23687 00004003 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23688                                  
 23689                                  ; See if the input indicates a device that has already been detected. If so,
 23690                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23691                                  
 23692 00004009 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23693                                  	;cmp	word [DI+1],5C3Ah
 23694                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23695 0000400D 817D013A5C              	cmp	word [DI+1],':\'
 23696 00004012 7438                    	JZ	short CrackIt
 23697                                  
 23698                                  ; Let ChkDev find it in the device list
 23699                                  
 23700 00004014 83C703                  	ADD	DI,3
 23701                                  	; 18/08/2018
 23702                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23703                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23704                                  	; 16/12/2022
 23705                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23706 00004017 E8B000                  	CALL	CHKDEV
 23707 0000401A 722E                    	JC	short InternalError
 23708                                  
 23709                                  Build_devJ:
 23710 0000401C A0[6D05]                	MOV	AL,[SATTRIB]
 23711 0000401F A2[6B05]                	MOV	[ATTRIB],AL
 23712                                  	;mov	byte [EXTERR_LOCUS],1
 23713 00004022 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23714                                  					; "finding" a char device
 23715                                  					; set LOCUS to Unknown. This makes
 23716                                  					; certain idiotic problems reported
 23717                                  					; by a certain 3 letter OEM go away.
 23718                                  
 23719                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23720                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23721                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23722                                  ; wfp into the share set.
 23723                                  ;
 23724                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23725                                  ; non-space seen +1.  This position is kept in DX.
 23726                                  
 23727                                  ;hkn; SS is DOSDATA
 23728 00004027 16                      	push	ss
 23729 00004028 07                      	pop	es
 23730                                  
 23731                                  ;hkn; NAME1 is in DOSDATA
 23732 00004029 BE[4B05]                	mov	si,NAME1
 23733 0000402C 8B3E[B205]              	mov	di,[WFP_START]
 23734 00004030 89FA                    	mov	dx,di
 23735 00004032 B90800                  	mov	cx,8			; 8 chars in device name
 23736                                  MoveLoop:
 23737 00004035 AC                      	lodsb
 23738 00004036 AA                      	stosb
 23739 00004037 3C20                    	cmp	al," "
 23740 00004039 7402                    	jz	short NoSave
 23741                                  
 23742 0000403B 89FA                    	mov	dx,di
 23743                                  NoSave:
 23744 0000403D E2F6                    	loop	MoveLoop
 23745                                  
 23746                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23747                                  ; at this point.
 23748                                  
 23749 0000403F 89D7                    	mov	di,dx
 23750 00004041 C60500                  	mov	byte [di],0		; end of string
 23751 00004044 E8D302                  	call	Build_device_ent	; Clears carry sets zero
 23752 00004047 FEC0                    	INC	AL			; reset zero
 23753 00004049 C3                      	retn
 23754                                  
 23755                                  InternalError:
 23756                                  InternalError_loop:
 23757 0000404A EBFE                    	JMP	short InternalError_loop	; freeze
 23758                                  
 23759                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23760                                  
 23761                                  CrackIt:
 23762 0000404C 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23763 00004050 83FEFF                  	CMP	SI,-1			; valid?
 23764 00004053 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23765 00004055 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23766                                  LOOK_SING:
 23767                                  	;mov	byte [ATTRIB],16h
 23768 00004058 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23769                                  					; Attributes to search through Dirs
 23770 0000405D C43E[A205]              	LES	DI,[THISCDS]
 23771 00004061 B8FFFF                  	MOV	AX,-1
 23772                                  	;mov	bx,[es:di+73]
 23773 00004064 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23774 00004068 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23775                                  
 23776                                  ; AX = -1
 23777                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23778                                  ;      has been uncertainly changed.
 23779                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23780                                  ;      may be -1 if no current directory part has been used.
 23781                                  
 23782 0000406C 39C6                    	CMP	SI,AX			; if Current directory is not part
 23783 0000406E 7440                    	JZ	short NO_CURR_D		; then we must crack from root
 23784 00004070 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23785                                  
 23786                                  ; DOS 3.3  6/25/86
 23787 00004072 743C                    	JZ	short NO_CURR_D		; no, crack form the root
 23788                                  	;test	byte [FastOpenFlg],1
 23789 00004074 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23790 00004079 7442                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23791 0000407B 06                      	PUSH	ES			; save registers
 23792 0000407C 57                      	PUSH	DI
 23793 0000407D 51                      	PUSH	CX
 23794 0000407E FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23795 00004081 56                      	PUSH	SI
 23796 00004082 53                      	PUSH	BX
 23797                                  
 23798 00004083 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23799 00004087 8B36[B205]              	MOV	SI,[WFP_START]
 23800                                  
 23801                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23802 0000408B BB[300D]                	MOV	BX,FastOpenTable
 23803 0000408E BF[460D]                	MOV	DI,Dir_Info_Buff
 23804 00004091 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23805                                  	;mov	al,1
 23806 00004094 B001                    	MOV	AL,FONC_Look_up
 23807 00004096 1E                      	PUSH	DS
 23808 00004097 07                      	POP	ES
 23809                                  	;call	far [BX+2]
 23810 00004098 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23811 0000409B 7208                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23812                                  					; Go to Got_Srch_cluster
 23813 0000409D 803C00                  	CMP	BYTE [SI],0		;fastopen has current dir info?
 23814 000040A0 7404                    	JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23815 000040A2 F9                      	stc
 23816 000040A3 EB01                    	jmp	short GO_Chk_end	;Go to No_Curr_D
 23817                                  GO_Chk_end1:
 23818 000040A5 F8                      	clc
 23819                                  GO_Chk_end:				; restore registers
 23820 000040A6 5B                      	POP	BX
 23821 000040A7 5E                      	POP	SI
 23822 000040A8 8F44FF                  	POP	word [SI-1]
 23823 000040AB 59                      	POP	CX
 23824 000040AC 5F                      	POP	DI
 23825 000040AD 07                      	POP	ES
 23826 000040AE 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23827                                  
 23828                                  ; DOS 3.3  6/25/86
 23829                                  ;
 23830                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23831                                  ; of path and go crack from root.
 23832                                  
 23833                                  NO_CURR_D:
 23834 000040B0 8B36[B205]              	MOV	SI,[WFP_START]
 23835 000040B4 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23836 000040B7 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23837 000040BB EB3C                    	JMP	short ROOTPATH
 23838                                  
 23839                                  ; We are able to crack from the current directory part. Go set up for search
 23840                                  ; of specified cluster.
 23841                                  
 23842                                  GOT_SEARCH_CLUSTER:
 23843 000040BD C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23844 000040C1 E8D4FE                  	call	SETDIRSRCH
 23845                                  	;JC	short SETFERR
 23846                                  	;JMP	short FINDPATH
 23847                                  	; 16/12/2022
 23848 000040C4 7344                    	jnc	short FINDPATH ; 17/08/2018
 23849                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23850                                  	;JC	short SETFERR
 23851                                  	;JMP	short FINDPATH
 23852                                  SETFERR:
 23853 000040C6 30C9                    	XOR	CL,CL			; set zero
 23854 000040C8 F9                      	STC
 23855 000040C9 C3                      	retn
 23856                                  
 23857                                  ;---------------------------------------------------------------------------
 23858                                  ;
 23859                                  ; Procedure Name : ChkDev
 23860                                  ;
 23861                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23862                                  ;   device.
 23863                                  ; Blasts CX,SI,DI,AX,BX
 23864                                  ;---------------------------------------------------------------------------
 23865                                  
 23866                                  CHKDEV:
 23867 000040CA 89FE                    	MOV	SI,DI
 23868 000040CC 8CD7                    	MOV	DI,SS
 23869 000040CE 8EC7                    	MOV	ES,DI
 23870                                  
 23871 000040D0 BF[4B05]                	MOV	DI,NAME1
 23872 000040D3 B90900                  	MOV	CX,9
 23873                                  TESTLOOP:
 23874 000040D6 E87F10                  	call	GETLET
 23875                                  
 23876 000040D9 3C2E                    	CMP	AL,'.'
 23877 000040DB 740E                    	JZ	short TESTDEVICE
 23878 000040DD E8CE10                  	call	PATHCHRCMP
 23879 000040E0 7407                    	JZ	short NOTDEV
 23880 000040E2 08C0                    	OR	AL,AL
 23881 000040E4 7405                    	JZ	short TESTDEVICE
 23882                                  
 23883 000040E6 AA                      	STOSB
 23884 000040E7 E2ED                    	LOOP	TESTLOOP
 23885                                  NOTDEV:
 23886 000040E9 F9                      	STC
 23887 000040EA C3                      	retn
 23888                                  
 23889                                  TESTDEVICE:
 23890 000040EB 83C102                  	ADD	CX,2
 23891 000040EE B020                    	MOV	AL,' '
 23892 000040F0 F3AA                    	REP	STOSB
 23893 000040F2 8CD0                    	MOV	AX,SS
 23894 000040F4 8ED8                    	MOV	DS,AX
 23895                                  	;call	DEVNAME
 23896                                  	;retn
 23897                                  	; 18/12/2022
 23898 000040F6 E9C201                  	jmp	DEVNAME
 23899                                  
 23900                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23901                                  ;----------------------------------------------------------------------------
 23902                                  ;
 23903                                  ; Procedure Name : ROOTPATH,FINDPATH
 23904                                  ;
 23905                                  ; Inputs:
 23906                                  ;	Same as FINDPATH but,
 23907                                  ;	SI Points to asciz string of path which is assumed to start at
 23908                                  ;		the root (no leading '/').
 23909                                  ; Function:
 23910                                  ;	Search from root for path
 23911                                  ; Outputs:
 23912                                  ;	Same as FINDPATH but:
 23913                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23914                                  ;	[NoSetDir] is ignored.
 23915                                  ;----------------------------------------------------------------------------
 23916                                  
 23917                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23918                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23919                                  
 23920                                  ROOTPATH:
 23921 000040F9 E8D7FE                  	call	SETROOTSRCH
 23922 000040FC 803C00                  	CMP	BYTE [SI],0
 23923 000040FF 7509                    	JNZ	short FINDPATH
 23924                                  
 23925                                  ; Root dir specified
 23926 00004101 A0[6D05]                	MOV	AL,[SATTRIB]
 23927 00004104 A2[6B05]                	MOV	[ATTRIB],AL
 23928 00004107 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23929                                  					; (dir), clears carry.
 23930 00004109 C3                      	retn
 23931                                  
 23932                                  ; Inputs:
 23933                                  ;	[ATTRIB] Set to get through directories
 23934                                  ;	[SATTRIB] Set to find last element
 23935                                  ;	ES:BP Points to DPB
 23936                                  ;	SI Points to asciz string of path (no leading '/').
 23937                                  ;	[SECCLUSPOS] = 0
 23938                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23939                                  ;	[CLUSNUM] = Cluster # of next cluster
 23940                                  ;	[CLUSFAC] = Sectors per cluster
 23941                                  ;	[NoSetDir] set
 23942                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23943                                  ;		( = -1 if current dir not involved, else
 23944                                  ;		 Points to first char after last "/" of current dir part)
 23945                                  ;	[THISCDS] Points to CDS being used
 23946                                  ;	[CREATING] and [DELALL] set
 23947                                  ; Function:
 23948                                  ;	Parse path name
 23949                                  ; Outputs:
 23950                                  ;	ID1 field of [THISCDS] updated appropriately
 23951                                  ;	[ATTRIB] = [SATTRIB]
 23952                                  ;	ES:BP Points to DPB
 23953                                  ;	[THISDPB] = ES:BP
 23954                                  ;	Carry set if bad path
 23955                                  ;	   SI Points to path element causing failure
 23956                                  ;	   Zero set
 23957                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23958                                  ;	      start a search on the last directory
 23959                                  ;	      CL is zero if there is a bad name in the path
 23960                                  ;	      CL is non-zero if the name was simply not found
 23961                                  ;		 [ENTFREE] may have free spot in directory
 23962                                  ;		 [NAME1] is the name.
 23963                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23964                                  ;	   Zero reset
 23965                                  ;	      File in middle of path or bad name in path
 23966                                  ;		or path too long or malformed path
 23967                                  ;	ELSE
 23968                                  ;	   [CURBUF] contains directory record with match
 23969                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23970                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 23971                                  ;	   [NAME1] Has name looked for
 23972                                  ;	   AH = device ID
 23973                                  ;	      bit 7 of AH set if device SI and BX
 23974                                  ;	      will point DOSGROUP relative The firclus
 23975                                  ;	      field of the device entry contains the device pointer
 23976                                  ;	   If last element is a directory zero is set and:
 23977                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23978                                  ;	      are set up to start a search on it,
 23979                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23980                                  ;	      like that for a file (except for zero flag)
 23981                                  ;	   If last element is a file zero is reset
 23982                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23983                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23984                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23985                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23986                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23987                                  ; Destroys all other registers
 23988                                  
 23989                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23990                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 23991                                  
 23992                                      	;entry	FINDPATH
 23993                                  FINDPATH:
 23994 0000410A 06                      	PUSH	ES			; Save ES:BP
 23995 0000410B 56                      	PUSH	SI
 23996 0000410C 89F7                    	MOV	DI,SI
 23997 0000410E 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 23998 00004112 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 23999 00004117 740E                    	JZ	short NOIDS		; No current dir part
 24000 00004119 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24001 0000411D 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24002 0000411F C43E[A205]              	LES	DI,[THISCDS]
 24003                                  	;mov	[es:di+73],cx
 24004 00004123 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24005                                  NOIDS:
 24006                                  
 24007                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24008                                  ; character in the string. CX,DI may be destroyed.
 24009                                  ;
 24010                                  ;	invoke	NAMETRANS
 24011                                  ;	MOV	CL,AL
 24012                                  ;
 24013                                  ; The above is the slow method. The name has *already* been munged by
 24014                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24015                                  ; the name until ., \ or 0 is hit.
 24016                                  
 24017 00004127 8CD0                    	MOV	AX,SS
 24018 00004129 8EC0                    	MOV	ES,AX
 24019                                  
 24020                                  ;hkn; Name1 is in DOSDATA
 24021 0000412B BF[4B05]                	MOV	DI,NAME1
 24022 0000412E B82020                  	MOV	AX,'  ' ; 2020h
 24023 00004131 AA                      	STOSB
 24024 00004132 AB                      	STOSW
 24025 00004133 AB                      	STOSW
 24026 00004134 AB                      	STOSW
 24027 00004135 AB                      	STOSW
 24028 00004136 AB                      	STOSW
 24029                                  
 24030                                  ;hkn; Name1 is in DOSDATA
 24031 00004137 BF[4B05]                	MOV	DI,NAME1
 24032 0000413A 30E4                    	XOR	AH,AH			; bits for CL
 24033                                  GetNam:
 24034                                  	; 19/05/2019 - Retro DOS v4.0
 24035                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24036                                  
 24037                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24038                                  	; 16/12/2022
 24039                                  	;inc	cl ; not required !	
 24040                                  	
 24041 0000413C AC                      	LODSB
 24042 0000413D 3C2E                    	CMP	AL,'.'	; 2Eh
 24043 0000413F 7412                    	JZ	short _SetExt
 24044 00004141 08C0                    	OR	AL,AL
 24045 00004143 7424                    	JZ	short _GetDone
 24046 00004145 3C5C                    	CMP	AL,'\'	; 5Ch
 24047 00004147 7420                    	JZ	short _GetDone
 24048 00004149 3C3F                    	CMP	AL,'?'	; 3Fh
 24049 0000414B 7503                    	JNZ	short StoNam
 24050 0000414D 80CC01                  	OR	AH,1
 24051                                  StoNam: 
 24052 00004150 AA                      	STOSB
 24053 00004151 EBE9                    	JMP	short GetNam
 24054                                  _SetExt:
 24055 00004153 BF[5305]                	MOV	DI,NAME1+8
 24056                                  GetExt:
 24057 00004156 AC                      	LODSB
 24058 00004157 08C0                    	OR	AL,AL
 24059 00004159 740E                    	JZ	short _GetDone
 24060 0000415B 3C5C                    	CMP	AL,'\'
 24061 0000415D 740A                    	JZ	short _GetDone
 24062 0000415F 3C3F                    	CMP	AL,'?'
 24063 00004161 7503                    	JNZ	short StoExt
 24064 00004163 80CC01                  	OR	AH,1
 24065                                  StoExt: 
 24066 00004166 AA                      	STOSB
 24067 00004167 EBED                    	JMP	short GetExt
 24068                                  _GetDone:
 24069 00004169 4E                      	DEC	SI
 24070 0000416A 88E1                    	MOV	CL,AH  ; ?*!
 24071 0000416C 80C980                  	OR	CL,80H
 24072 0000416F 5F                      	POP	DI			; Start of this element
 24073 00004170 07                      	POP	ES			; Restore ES:BP
 24074 00004171 39FE                    	CMP	SI,DI
 24075 00004173 7503                    	JNZ	short check_device
 24076 00004175 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24077                                  check_device:
 24078 00004178 56                      	PUSH	SI			; Start of next element
 24079 00004179 8A04                    	MOV	AL,[SI]
 24080 0000417B 08C0                    	OR	AL,AL
 24081 0000417D 7508                    	JNZ	short NOT_LAST
 24082                                  
 24083                                  ; for last element of the path switch to the correct search attributes
 24084                                  
 24085 0000417F 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24086 00004183 883E[6B05]              	MOV	[ATTRIB],BH
 24087                                  
 24088                                  NOT_LAST:
 24089                                  
 24090                                  ; check name1 to see if we have a device...
 24091                                  
 24092 00004187 06                      	PUSH	ES			; Save ES:BP
 24093                                  
 24094                                  ;hkn; SS is DOSDATA
 24095                                  	;context ES
 24096 00004188 16                      	push	ss
 24097 00004189 07                      	pop	es
 24098 0000418A E82E01                  	call	DEVNAME 		; blast BX
 24099 0000418D 07                      	POP	ES			; Restore ES:BP
 24100 0000418E 720B                    	JC	short FindFile		; Not a device
 24101 00004190 08C0                    	OR	AL,AL			; Test next char again
 24102 00004192 7403                    	JZ	short GO_BDEV
 24103 00004194 E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24104                                  
 24105                                  GO_BDEV:
 24106 00004197 5E                      	POP	SI			; Points to NUL at end of path
 24107 00004198 E981FE                  	JMP	Build_devJ
 24108                                  
 24109                                  FindFile:
 24110                                  ;;;; 7/28/86
 24111 0000419B 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24112 000041A0 7505                    	JNZ	short NOE5		; no
 24113 000041A2 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24114                                  NOE5:
 24115                                  ;;;; 7/28/86
 24116 000041A7 57                      	PUSH	DI			; Start of this element
 24117 000041A8 06                      	PUSH	ES			; Save ES:BP
 24118 000041A9 51                      	PUSH	CX			; CL return from NameTrans
 24119                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24120                                  
 24121 000041AA E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24122 000041AD 7303                    	JNC	short DIR_FOUND		; found dir entry
 24123                                  
 24124                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24125 000041AF E89DFC                  	call	FINDENTRY
 24126                                  DIR_FOUND:
 24127 000041B2 59                      	POP	CX
 24128 000041B3 07                      	POP	ES
 24129 000041B4 5F                      	POP	DI
 24130 000041B5 7303                    	JNC	short LOAD_BUF
 24131 000041B7 E9D100                  	JMP	BADPATHPOP
 24132                                  
 24133                                  LOAD_BUF:
 24134 000041BA C53E[E205]              	LDS	DI,[CURBUF]
 24135                                  	;test	byte [bx+0Bh],10h
 24136 000041BE F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24137 000041C2 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24138 000041C4 E99F00                  	JMP	FILEINPATH		; Error or end of path
 24139                                  
 24140                                  ; if we are not setting the directory, then check for end of string
 24141                                  
 24142                                  GO_NEXT:
 24143                                  ;hkn; SS override
 24144 000041C7 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24145 000041CD 7423                    	JZ	short SetDir
 24146 000041CF 89FA                    	MOV	DX,DI			; Save pointer to entry
 24147 000041D1 8CD9                    	MOV	CX,DS
 24148                                  
 24149                                  ;hkn; SS is DOSDATA
 24150                                  	;context DS
 24151 000041D3 16                      	push	ss
 24152 000041D4 1F                      	pop	ds
 24153 000041D5 5F                      	POP	DI			; Start of next element
 24154                                  	; 19/05/2019 - Retro DOS v4.0
 24155                                  	; MSDOS 6.0
 24156 000041D6 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24157 000041DB 740B                    	JZ	short _nofast			; the FastOpen
 24158 000041DD F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24159 000041E2 7404                    	JZ	short _nofast			; no
 24160 000041E4 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24161                                  _nofast:
 24162 000041E8 803D00                  	CMP	BYTE [DI],0
 24163                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24164                                  	;;JMP	_SETRET  ; retn		; Got it
 24165                                  	;retn	; 05/09/2018
 24166                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24167                                  	;jmp	_SETRET
 24168                                  	; 16/12/2022
 24169 000041EB 7421                    	jz	short _SETRET
 24170                                  
 24171                                  NEXT_ONE:
 24172 000041ED 57                      	PUSH	DI			; Put start of next element back on stack
 24173 000041EE 89D7                    	MOV	DI,DX
 24174 000041F0 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24175                                  SetDir:
 24176 000041F2 8B14                    	MOV	DX,[SI] 		; Dir_first
 24177                                  
 24178                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24179 000041F4 1E                      	PUSH	DS		      ; save [curbuf+2]
 24180                                  ;hkn; SS is DOSDATA
 24181 000041F5 16                      	push	ss
 24182 000041F6 1F                      	pop	ds		      ; set DS Dosgroup
 24183                                  	;test	byte [FastOpenFlg],2
 24184 000041F7 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24185 000041FC 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24186 000041FE 89D3                    	MOV	BX,DX		      ; not found
 24187 00004200 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24188 00004204 50                      	PUSH	AX		      ; save device id (AH)
 24189 00004205 E890FD                  	call	SETDIRSRCH
 24190 00004208 58                      	POP	AX		      ; restore device id (AH)
 24191 00004209 83C402                  	ADD	SP,2		      ; pop ds in stack
 24192 0000420C EB3E                    	JMP	short FAST_OPEN_SKIP
 24193                                  
 24194                                  	; 16/12/2022
 24195                                  _SETRET:
 24196 0000420E C3                      	retn
 24197                                  
 24198                                  DO_NORMAL:
 24199 0000420F 1F                      	POP	DS			; DS = [curbuf + 2]
 24200                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24201                                  
 24202 00004210 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24203 00004212 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24204 00004214 53                      	PUSH	BX
 24205 00004215 50                      	PUSH	AX
 24206 00004216 56                      	PUSH	SI
 24207 00004217 51                      	PUSH	CX
 24208                                  	;push	word [di+6]
 24209 00004218 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24210                                  	; 19/05/2019
 24211                                  	; MSDOS 6.0
 24212                                  	;push	word [di+8]
 24213 0000421B FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24214 0000421E 89D3                    	MOV	BX,DX
 24215                                  
 24216                                  ;hkn; SS is DOSDATA
 24217                                  	;context DS
 24218 00004220 16                      	push	ss
 24219 00004221 1F                      	pop	ds
 24220                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24221 00004222 E873FD                  	call	SETDIRSRCH		; the entry sector buffer
 24222                                  	; 19/05/2019
 24223                                  	; MSDOS 6.0
 24224 00004225 8F06[0706]              	POP	word [HIGH_SECTOR]
 24225 00004229 5A                      	POP	DX
 24226 0000422A 720A                    	JC	short SKIP_GETB
 24227                                  	;mov	byte [ALLOWED],18h
 24228 0000422C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24229 00004231 30C0                    	XOR	AL,AL
 24230                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24231 00004233 E83E18                  	call	GETBUFFR
 24232                                  SKIP_GETB:
 24233 00004236 59                      	POP	CX
 24234 00004237 5E                      	POP	SI
 24235 00004238 58                      	POP	AX
 24236 00004239 5B                      	POP	BX
 24237 0000423A 7305                    	JNC	short SET_THE_BUF
 24238 0000423C 5F                      	POP	DI			; Start of next element
 24239 0000423D 89FE                    	MOV	SI,DI			; Point with SI
 24240 0000423F EB21                    	JMP	SHORT _BADPATH
 24241                                  
 24242                                  SET_THE_BUF:
 24243 00004241 E855F5                  	call	SET_BUF_AS_DIR
 24244 00004244 8B3E[E205]              	MOV	DI,[CURBUF]
 24245 00004248 01FE                    	ADD	SI,DI			; Get the offsets back
 24246 0000424A 01FB                    	ADD	BX,DI
 24247                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24248                                  FAST_OPEN_SKIP:
 24249 0000424C 5F                      	POP	DI			; Start of next element
 24250 0000424D E89D02                  	CALL	InsertPath		; insert dir entry info
 24251                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24252 00004250 8A05                    	MOV	AL,[DI]
 24253 00004252 08C0                    	OR	AL,AL
 24254 00004254 74B8                    	JZ	short _SETRET		; At end
 24255 00004256 47                      	INC	DI			; Skip over "/"
 24256 00004257 89FE                    	MOV	SI,DI			; Point with SI
 24257 00004259 E8520F                  	call	PATHCHRCMP
 24258 0000425C 7503                    	JNZ	short find_bad_name	; oops
 24259 0000425E E9A9FE                  	JMP	FINDPATH		; Next element
 24260                                  
 24261                                  find_bad_name:
 24262 00004261 4E                      	DEC	SI			; Undo above INC to get failure point
 24263                                  _BADPATH:
 24264 00004262 30C9                    	XOR	CL,CL			; Set zero
 24265 00004264 EB2C                    	JMP	SHORT BADPRET
 24266                                  
 24267                                  FILEINPATH:
 24268 00004266 5F                      	POP	DI			; Start of next element
 24269                                  
 24270                                  ;hkn; SS is DOSDATA
 24271                                  	;context DS			; Got to from one place with DS gone
 24272 00004267 16                      	push	ss
 24273 00004268 1F                      	pop	ds
 24274                                  
 24275                                  ; DOS 3.3 FastOpen
 24276                                  	;test	byte [FastOpenFlg],1
 24277 00004269 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24278 0000426E 740B                    	JZ	short NO_FAST		; device info to fastopen
 24279                                  	;test	byte [FastOpenFlg],2
 24280 00004270 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24281 00004275 7404                    	JZ	short NO_FAST
 24282 00004277 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24283                                  					 ; success
 24284                                  NO_FAST:
 24285                                  ; DOS 3.3 FastOpen
 24286 0000427B 8A05                    	MOV	AL,[DI]
 24287 0000427D 08C0                    	OR	AL,AL
 24288 0000427F 7404                    	JZ	short INCRET
 24289 00004281 89FE                    	MOV	SI,DI			; Path too long
 24290 00004283 EB0D                    	JMP	SHORT BADPRET
 24291                                  
 24292                                  INCRET:
 24293                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24294                                  
 24295 00004285 E86502                  	CALL   InsertPath		; insert dir entry info
 24296                                  
 24297                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24298 00004288 FEC0                    	INC	AL			; Reset zero
 24299                                  	; 16/12/2022	
 24300                                  ;_SETRET:
 24301 0000428A C3                      	retn
 24302                                  
 24303                                  BADPATHPOP:
 24304 0000428B 5E                      	POP	SI			; Start of next element
 24305 0000428C 8A04                    	MOV	AL,[SI]
 24306 0000428E 89FE                    	MOV	SI,DI			; Start of bad element
 24307 00004290 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24308                                  BADPRET:
 24309 00004292 A0[6D05]                	MOV	AL,[SATTRIB]
 24310 00004295 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24311 00004298 F9                      	STC
 24312 00004299 C3                      	retn
 24313                                  
 24314                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24315                                  ;---------------------------------------------------------------------------
 24316                                  ;
 24317                                  ; Procedure Name : STARTSRCH
 24318                                  ;
 24319                                  ; Inputs:
 24320                                  ;	[THISDPB] Set
 24321                                  ; Function:
 24322                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24323                                  ; Outputs:
 24324                                  ;	ES:BP = Drive parameters
 24325                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24326                                  ; Destroys ES,BP,AX
 24327                                  ;--------------------------------------------------------------------------
 24328                                  
 24329                                  STARTSRCH:
 24330 0000429A C42E[8A05]              	LES	BP,[THISDPB]
 24331 0000429E 31C0                    	XOR	AX,AX
 24332 000042A0 A3[4803]                	MOV	[LASTENT],AX
 24333 000042A3 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24334 000042A6 48                      	DEC	AX
 24335 000042A7 A3[D805]                	MOV	[ENTFREE],AX
 24336 000042AA A3[DA05]                	MOV	[ENTLAST],AX
 24337 000042AD C3                      	retn
 24338                                  
 24339                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24340                                  ;----------------------------------------------------------------------------
 24341                                  ; Procedure Name : MatchAttributes
 24342                                  ;
 24343                                  ; Input:    [Attrib] = attribute to search for
 24344                                  ;	    CH = found attribute
 24345                                  ; Output:   JZ <match>
 24346                                  ;	    JNZ <nomatch>
 24347                                  ; Registers modified: noneski
 24348                                  ;----------------------------------------------------------------------------
 24349                                  
 24350                                  MatchAttributes:
 24351 000042AE 50                      	PUSH	AX
 24352                                  
 24353                                  ;hkn; SS override
 24354 000042AF 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24355 000042B3 F6D0                    	NOT	AL			; AL <- SearchSet'
 24356 000042B5 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24357                                  	;and	al,16h
 24358 000042B7 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24359                                  ;
 24360                                  ; the result is non-zero if an attribute is not in the search set
 24361                                  ; and in the found set and in the important set. This means that we do not
 24362                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24363                                  ;
 24364 000042B9 58                      	POP	AX
 24365 000042BA C3                      	retn
 24366                                  
 24367                                  ; 19/05/2019 - Retro DOS v4.0
 24368                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24369                                  
 24370                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24371                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24372                                  
 24373                                  ;Break <DevName - Look for name of device>
 24374                                  ;---------------------------------------------------------------------------
 24375                                  ;
 24376                                  ; Procedure Name : DevName
 24377                                  ;
 24378                                  ; Inputs:
 24379                                  ;	DS,ES:DOSDATA
 24380                                  ;	Filename in NAME1
 24381                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24382                                  ; Function:
 24383                                  ;	Determine if file is in list of I/O drivers
 24384                                  ; Outputs:
 24385                                  ;	Carry set if not a device
 24386                                  ;	ELSE
 24387                                  ;	Zero flag set
 24388                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24389                                  ;	     bits 0-4 set from low byte of attribute word
 24390                                  ;	DEVPT = DWORD pointer to Device header of device
 24391                                  ; BX destroyed, others preserved
 24392                                  ;---------------------------------------------------------------------------
 24393                                  
 24394                                  DEVNAME:
 24395                                  	; 28/07/2018 - Retro DOS v3.0
 24396                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24397                                  
 24398 000042BB 56                      	PUSH	SI
 24399 000042BC 57                      	PUSH	DI
 24400 000042BD 51                      	PUSH	CX
 24401 000042BE 50                      	PUSH	AX
 24402                                  
 24403                                  ; E5 special code
 24404 000042BF FF36[4B05]              	PUSH	WORD [NAME1]
 24405 000042C3 803E[4B05]05            	CMP	byte [NAME1],5
 24406 000042C8 7505                    	JNZ	short NOKTR
 24407 000042CA C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24408                                  NOKTR:
 24409                                  	;test	byte [ATTRIB],8
 24410 000042CF F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24411                                  					; If looking for VOL id don't find devs
 24412 000042D4 7521                    	JNZ	short RET31
 24413                                  
 24414                                  ;hkn; NULDEV is in DOSDATA
 24415 000042D6 BE[4800]                	MOV	SI,NULDEV
 24416                                  LOOKIO:
 24417                                  	; 21/11/2022
 24418                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24419                                  	; 17/12/2022
 24420                                  	;test	byte [si+5],80h
 24421 000042D9 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24422                                  	;;test	word [si+4],8000h
 24423                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24424 000042DD 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24425 000042DF 89F0                    	MOV	AX,SI
 24426                                  	;add	si,10
 24427 000042E1 83C60A                  	ADD	SI,SYSDEV.NAME
 24428                                  
 24429                                  ;hkn; NAME1 is in DOSDATA
 24430 000042E4 BF[4B05]                	MOV	DI,NAME1
 24431 000042E7 B90400                  	MOV	CX,4			; All devices are 8 letters
 24432 000042EA F3A7                    	REPE	CMPSW			; Check for name in list
 24433 000042EC 89C6                    	MOV	SI,AX
 24434 000042EE 7415                    	JZ	short IOCHK		; Found it?
 24435                                  SKIPDEV:
 24436 000042F0 C534                    	LDS	SI,[SI]			; Get address of next device
 24437 000042F2 83FEFF                  	CMP	SI,-1			; At end of list?
 24438 000042F5 75E2                    	JNZ	short LOOKIO
 24439                                  RET31:	
 24440 000042F7 F9                      	STC				; Not found
 24441                                  RETNV:	
 24442 000042F8 8CD1                    	MOV	CX,SS
 24443 000042FA 8ED9                    	MOV	DS,CX
 24444                                  
 24445 000042FC 8F06[4B05]              	POP	WORD [NAME1]
 24446 00004300 58                      	POP	AX
 24447 00004301 59                      	POP	CX
 24448 00004302 5F                      	POP	DI
 24449 00004303 5E                      	POP	SI
 24450 00004304 C3                      	RETN
 24451                                  
 24452                                  IOCHK:
 24453                                  ;hkn; SS override for DEVPT
 24454 00004305 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24455                                  	;mov	bh,[si+4]
 24456 0000430A 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24457 0000430D 80CFC0                  	OR	BH,0C0h
 24458 00004310 80E7DF                  	and	bh,0DFh
 24459                                  	;AND	BH,~(020h)		; Clears Carry
 24460 00004313 368936[9A05]            	MOV	[SS:DEVPT],SI
 24461 00004318 EBDE                    	JMP	short RETNV
 24462                                  
 24463                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24464                                  ;---------------------------------------------------------------------------
 24465                                  ; Procedure Name : Build_device_ent
 24466                                  ;
 24467                                  ; Inputs:
 24468                                  ;	[NAME1] has name
 24469                                  ;	BH is attribute field (supplied by DEVNAME)
 24470                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24471                                  ; Function:
 24472                                  ;	Build a directory entry for a device at DEVFCB
 24473                                  ; Outputs:
 24474                                  ;	BX points to DEVFCB
 24475                                  ;	SI points to dir_first field
 24476                                  ;	AH = input BH
 24477                                  ;	AL = 0
 24478                                  ;	dir_first = DEVPT
 24479                                  ;	Zero Set, Carry Clear
 24480                                  ; DS,ES,BP preserved, others destroyed
 24481                                  ;--------------------------------------------------------------------------
 24482                                  
 24483                                  Build_device_ent:
 24484 0000431A B82020                  	MOV	AX,"  " ; 2020h
 24485                                  
 24486                                  ;hkn; DEVFCB is in DOSDATA
 24487 0000431D BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24488                                  
 24489                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24490                                  
 24491 00004320 AB                      	STOSW
 24492 00004321 AA                      	STOSB				; Blank out extent field
 24493                                  	;mov	al,40h
 24494 00004322 B040                    	MOV	AL,attr_device
 24495                                  
 24496                                  ;	Fill Dir_attr
 24497                                  
 24498 00004324 AA                      	STOSB				; Set attribute field
 24499 00004325 31C0                    	XOR	AX,AX
 24500 00004327 B90A00                  	MOV	CX,10
 24501                                  
 24502                                  ; Fill dir_pad
 24503                                  
 24504 0000432A F3AB                    	REP	STOSW			; Fill rest with zeros
 24505 0000432C E817C8                  	call	DATE16
 24506                                  
 24507                                  ;hkn; DEVFCB is in DOSDATA
 24508 0000432F BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24509 00004332 92                      	XCHG	AX,DX
 24510                                  
 24511                                  ; Fill dir_time
 24512                                  
 24513 00004333 AB                      	STOSW
 24514 00004334 92                      	XCHG	AX,DX
 24515                                  
 24516                                  ; Fill dir_date
 24517                                  
 24518 00004335 AB                      	STOSW
 24519 00004336 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24520 00004338 A1[9A05]                	MOV	AX,[DEVPT]
 24521                                  
 24522                                  ; Fill dir_first
 24523                                  
 24524 0000433B AB                      	STOSW				; Dir_first points to device
 24525 0000433C A1[9C05]                	MOV	AX,[DEVPT+2]
 24526                                  ;
 24527                                  ; Fill dir_size_l
 24528                                  ;
 24529 0000433F AB                      	STOSW
 24530 00004340 88FC                    	MOV	AH,BH			; Put device atts in AH
 24531                                  
 24532                                  ;hkn; DEVFCB is in DOSDATA
 24533 00004342 BB[4B05]                	MOV	BX,DEVFCB
 24534 00004345 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24535 00004347 C3                      	retn
 24536                                  
 24537                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24538                                  ;----------------------------------------------------------------------------
 24539                                  ;
 24540                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24541                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24542                                  ;   If invalid, reset original CDS to root.
 24543                                  ;
 24544                                  ;   Inputs:	ThisCDS points to CDS of interest
 24545                                  ;		SS:DI points to temp buffer
 24546                                  ;   Outputs:	The current directory string is validated on the appropriate
 24547                                  ;		    drive
 24548                                  ;		ThisDPB changed
 24549                                  ;		ES:DI point to CDS
 24550                                  ;		Carry set if error (currently user FAILed to I 24)
 24551                                  ;   Registers modified: all
 24552                                  ;----------------------------------------------------------------------------
 24553                                  
 24554                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24555                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24556                                  
 24557                                  ValidateCDS:
 24558                                  	; 19/05/2019 - Retro DOS v4.0
 24559                                  	; 28/07/2018 - Retro DOS v3.0
 24560                                  
 24561                                     %define  Temp	[bp-2]	; word
 24562                                     %define  SaveCDS	[bp-6]	; dword
 24563                                     %define  SaveCDSL	[bp-6]	; word
 24564                                     %define  SaveCDSH	[bp-4]	; word
 24565                                  
 24566                                  	;Enter
 24567 00004348 55                      	push	bp
 24568 00004349 89E5                    	mov	bp,sp
 24569 0000434B 83EC06                  	sub	sp,6
 24570                                  
 24571 0000434E 897EFE                  	MOV	Temp,DI
 24572                                  
 24573                                  ;hkn; SS override
 24574 00004351 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24575 00004356 8976FA                  	MOV	SaveCDSL,SI
 24576 00004359 8C5EFC                  	MOV	SaveCDSH,DS
 24577                                  	;EnterCrit critDisk
 24578 0000435C E826D0                  	call	ECritDisk
 24579                                  	; 21/11/2022
 24580                                  	;test	byte [SI+curdir.flags+1],80h
 24581                                  	;test	word [si+67],8000h
 24582                                  	; 17/12/2022
 24583                                  	;test	byte [SI+68],80h
 24584 0000435F F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24585                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24586 00004363 7403                    	JZ	short _DoSplice
 24587 00004365 E99200                  	JMP	FatFail
 24588                                  _DoSplice:
 24589 00004368 30D2                    	XOR	DL,DL
 24590 0000436A 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24591                                  
 24592                                  ;hkn; SS is DOSDATA
 24593                                  	;Context ES
 24594 0000436F 16                      	push	ss
 24595 00004370 07                      	pop	es
 24596                                  	;Invoke	FStrcpy
 24597 00004371 E8E3CE                  	call	FStrCpy
 24598 00004374 8B76FE                  	MOV	SI,Temp
 24599                                  
 24600                                  ;hkn; SS is DOSDATA
 24601                                  	;Context DS
 24602 00004377 16                      	push	ss
 24603 00004378 1F                      	pop	ds	
 24604                                  	;Invoke	Splice
 24605 00004379 E8A32B                  	call	Splice
 24606                                  
 24607                                   ;hkn; SS is DOSDATA
 24608                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24609 0000437C 16                      	push	ss
 24610 0000437D 1F                      	pop	ds
 24611 0000437E 8816[4C03]              	MOV	[NoSetDir],DL
 24612 00004382 C43E[A205]              	LES	DI,[THISCDS]
 24613                                  	;SAVE	<BP>
 24614 00004386 55                      	push	bp
 24615                                  	;Invoke	FATREAD_CDS
 24616 00004387 E87A14                  	call	FATREAD_CDS	
 24617                                  	;RESTORE <BP>
 24618 0000438A 5D                      	pop	bp
 24619 0000438B 726D                    	JC	short FatFail
 24620                                  
 24621 0000438D C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24622                                  	;cmp	word [si+73],-1
 24623 00004391 837C49FF                	CMP	word [SI+curdir.ID],-1
 24624 00004395 7555                    	JNZ	short RestoreCDS
 24625                                  
 24626                                  ;hkn; SS is DOSDATA
 24627                                  	;Context ES
 24628 00004397 16                      	push	ss
 24629 00004398 07                      	pop	es
 24630                                  
 24631                                  ;hkn; SS override
 24632                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24633 00004399 36FF36[B205]            	push	word [SS:WFP_START]
 24634                                  	;cmp	si,[bp-6]
 24635 0000439E 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24636 000043A1 750B                    	JNZ	short DoChdir
 24637                                  	;mov	di,[bp-2]
 24638 000043A3 8B7EFE                  	MOV	DI,Temp
 24639                                  
 24640                                  ;hkn; SS override
 24641 000043A6 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24642                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24643 000043AB E8A9CE                  	call	FStrCpy
 24644                                  DoChdir:
 24645                                  ;hkn; SS is DOSDATA
 24646                                  	;Context DS
 24647 000043AE 16                      	push	ss
 24648 000043AF 1F                      	pop	ds
 24649                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24650 000043B0 FF36[6D05]              	push	word [SATTRIB]
 24651 000043B4 55                      	push	bp
 24652                                  	;Invoke	DOS_ChDir
 24653 000043B5 E8B9EE                  	call	DOS_CHDIR
 24654                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24655 000043B8 5D                      	pop	bp
 24656 000043B9 5B                      	pop	bx
 24657 000043BA 8F06[B205]              	pop	word [WFP_START]
 24658 000043BE 881E[6D05]              	MOV	[SATTRIB],BL
 24659 000043C2 C576FA                  	LDS	SI,SaveCDS
 24660 000043C5 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24661                                  
 24662                                  ;hkn; SS override for THISCDS
 24663 000043C7 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24664 000043CC 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24665 000043D1 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24666 000043D3 884C03                  	MOV	[SI+3],CL		;	    }
 24667                                  SetCluster:
 24668                                  	;mov	word [si+73],0FFFFh
 24669 000043D6 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24670 000043DB 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24671                                  	; 21/11/2022
 24672                                  	;test	byte [si+curdir.flags+1],20h
 24673                                  	; 19/05/2019
 24674                                  	; MSDOS 6.0
 24675                                  	; 17/12/2022
 24676                                  	;test	byte [si+68],20h
 24677 000043E0 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24678                                  	;;test	word [si+67],2000h
 24679                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24680 000043E4 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24681 000043E6 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24682                                  _setdirclus:
 24683                                  	;mov	[si+73],cx
 24684 000043E9 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24685                                  RestoreCDS:
 24686 000043EC C47EFA                  	LES	DI,SaveCDS
 24687 000043EF 36893E[A205]            	MOV	[SS:THISCDS],DI
 24688 000043F4 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24689 000043F9 F8                      	CLC
 24690                                  FatFail:
 24691                                  	;LeaveCrit critDisk
 24692 000043FA E8A3CF                  	call	LCritDisk
 24693                                  
 24694                                  	;les	di,[bp-6]
 24695 000043FD C47EFA                  	LES	DI,SaveCDS
 24696                                  	;Leave
 24697 00004400 89EC                    	mov	sp,bp
 24698 00004402 5D                      	pop	bp
 24699 00004403 C3                      	retn
 24700                                  
 24701                                  ; 28/07/2018 - Retro DOS v3.0
 24702                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24703                                  
 24704                                  ;Break	<CheckThisDevice - Check for being a device>
 24705                                  ;---------------------------------------------------------------------------
 24706                                  ;
 24707                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24708                                  ;   device specified. We will return carry if there is a device present. 
 24709                                  ;   The forms of devices we will recognize are:
 24710                                  ;
 24711                                  ;	[path]device
 24712                                  ;
 24713                                  ;   Note that the drive letter has *already* been removed. All other forms
 24714                                  ;   are not considered to be devices. If such a device is found we change
 24715                                  ;   the source pointer to point to the device component.
 24716                                  ;
 24717                                  ;   Inputs:	ES is DOSDATA
 24718                                  ;		DS:SI contains name
 24719                                  ;   Outputs:	ES is DOSDATA
 24720                                  ;		DS:SI point to name or device
 24721                                  ;		Carry flag set if device was found
 24722                                  ;		Carry flag reset otherwise
 24723                                  ;   Registers Modified: all except ES:DI, DS
 24724                                  ;----------------------------------------------------------------------------
 24725                                  
 24726                                  CheckThisDevice:
 24727 00004404 57                      	push	di
 24728 00004405 56                      	push	si
 24729 00004406 89F7                    	MOV	DI,SI
 24730                                  
 24731                                  ; Check for presence of \dev\ (Dam multiplan!)
 24732                                  
 24733 00004408 8A04                    	MOV	AL,[SI]
 24734 0000440A E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24735 0000440D 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24736 0000440F 46                      	INC	SI			; simulate LODSB
 24737                                  
 24738                                  ; We have the leading path separator. Look for DEV part.
 24739                                  
 24740 00004410 AD                      	LODSW
 24741 00004411 0D2020                  	OR	AX,2020h
 24742 00004414 3D6465                  	cmp	ax,"de"
 24743                                  	;CMP	AX,"e"<< 8 + "d"
 24744 00004417 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24745 00004419 AC                      	LODSB
 24746 0000441A 0C20                    	OR	AL,20h
 24747 0000441C 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24748 0000441E 7526                    	JNZ	short NotDevice
 24749 00004420 AC                      	LODSB
 24750 00004421 E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24751 00004424 7520                    	JNZ	short NotDevice		; no. go for it.
 24752                                  
 24753                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24754                                  ; SI and DevName may destroy DS.
 24755                                  
 24756                                  ParseDev:
 24757 00004426 1E                      	push	ds
 24758 00004427 56                      	push	si			; preserve the source pointer
 24759 00004428 E8C10C                  	call	NameTrans		; advance DS:SI
 24760 0000442B 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24761 0000442E F9                      	STC				; simulate a Carry return from DevName
 24762 0000442F 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24763                                  
 24764                                  ;hkn; SS is DOSDATA
 24765 00004431 16                      	push	ss
 24766 00004432 1F                      	pop	ds
 24767                                  
 24768                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24769                                  ;
 24770                                  ; SR;
 24771                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24772                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24773                                  ; old call set the volume attribute bit.
 24774                                  
 24775 00004433 A0[6D05]                	mov	al,[SATTRIB]
 24776 00004436 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24777                                  
 24778                                  ; M026 - end
 24779                                  
 24780 00004439 E87FFE                  	call	DEVNAME
 24781                                  
 24782                                  SkipSearch:
 24783 0000443C 5E                      	pop	si
 24784 0000443D 1F                      	pop	ds
 24785                                  
 24786                                  ; SI points to the beginning of the potential device. If we have a device
 24787                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24788                                  ; original value. At this point Carry set indicates FILE.
 24789                                  
 24790                                  CheckReturn:
 24791 0000443E 5F                      	pop	di			; get original SI
 24792 0000443F 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24793 00004441 89FE                    	MOV	SI,DI
 24794                                  Check_Done:
 24795 00004443 5F                      	pop	di
 24796 00004444 F5                      	CMC				; invert carry. Carry => device
 24797 00004445 C3                      	retn
 24798                                  NotDevice:
 24799 00004446 F9                      	STC
 24800 00004447 EBF5                    	JMP	short CheckReturn
 24801                                  
 24802                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24803                                  ;-----------------------------------------------------------------------------
 24804                                  ;
 24805                                  ; Procedure Name : LookupPath
 24806                                  ;
 24807                                  ; Output  DS:SI -> path name,
 24808                                  ;	  ES:DI -> dir entry info buffer
 24809                                  ;	  ES:CX -> extended dir info buffer
 24810                                  ;
 24811                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24812                                  ;			     FastOpen, DS:SI points to char just one after
 24813                                  ;			     the last char of path name which is fully or
 24814                                  ;			     partially found in FastOPen
 24815                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24816                                  ;
 24817                                  ;----------------------------------------------------------------------------
 24818                                  
 24819                                  LookupPath:
 24820                                  ;	PUSH	AX
 24821                                  
 24822                                  ;hkn; SS override
 24823                                  	;test	byte [ss:FastOpenFlg],1
 24824 00004449 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24825 0000444F 7503                    	JNZ	short FASTINST			    ; and this routine is
 24826                                  NOLOOK:
 24827 00004451 E99700                  	JMP	NOLOOKUP			    ; executed once
 24828                                  
 24829                                  FASTINST:
 24830                                  ;hkn; SS override
 24831                                  	;test	byte [ss:FastOpenFlg],8
 24832 00004454 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24833 0000445A 75F5                    	JNZ	short NOLOOK			    ; yes
 24834                                  
 24835 0000445C BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24836                                  
 24837                                  ;hkn; SS override
 24838 0000445F 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24839 00004464 BF[460D]                	MOV	DI,Dir_Info_Buff
 24840 00004467 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24841 0000446A B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24842 0000446C 1E                      	PUSH	DS
 24843 0000446D 07                      	POP	ES
 24844                                  
 24845                                  ;hkn; SS override
 24846                                  	;call	far [bx+2]
 24847 0000446E FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24848 00004471 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24849                                  
 24850 00004473 8D5CFE                  	LEA	BX,[SI-2]
 24851                                  
 24852                                  ;hkn; SS override
 24853 00004476 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24854 0000447B 745D                    	JZ	short NOTFOUND			    ; no
 24855                                  
 24856                                  	; 19/05/2019 - Retro DOS v4.0
 24857                                  
 24858                                  	; MSDOS 6.0				    ; fully or partially found
 24859 0000447D 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24860 00004480 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24861 00004482 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24862                                  
 24863                                  ;hkn; SS override for attrib/sattrib
 24864 00004483 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24865 00004488 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24866 0000448D 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24867                                  	;mov	ch,[es:di+0Bh]
 24868 00004492 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24869 00004496 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24870                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24871 00004499 59                      	POP	CX				    ;AN000;FO.;
 24872 0000449A 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24873                                  parfnd:
 24874                                  
 24875                                  ;hkn; SS override
 24876 0000449C 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24877 000044A1 89CB                    	MOV	BX,CX
 24878                                  	; MSDOS 6.0
 24879                                  	;mov	ax,[bx+7]
 24880 000044A3 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24881                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24882 000044A6 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24883 000044AA 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24884 000044AD 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24885                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24886                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24887                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24888 000044B1 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24889 000044B4 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24890                                  
 24891 000044B8 06                      	PUSH	ES				    ; save ES
 24892                                  ;hkn; SS override
 24893 000044B9 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24894 000044BE 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24895                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24896 000044C1 07                      	POP	ES				    ; pop ES
 24897                                  ;SR;
 24898                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24899                                  ;indicate it is not a root dir
 24900                                  
 24901 000044C2 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24902 000044C9 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24903 000044CE 89FB                    	MOV	BX,DI				    ; start of entry
 24904                                  	;lea	si,[di+1Ah]
 24905 000044D0 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24906                                  						    ; dir_first field in the
 24907                                  						    ; dir entry
 24908                                  ;hkn; SS override for FastOpenFlg
 24909                                  	;or	byte [ss:FastOpenFlg],2
 24910 000044D3 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24911                                  ;	POP	AX
 24912 000044D9 C3                      	RETN
 24913                                  NOTFOUND:
 24914 000044DA 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24915 000044DD 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24916 000044DF 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24917                                  Partial_Success:
 24918                                  	;and	byte [SS:FastOpenFlg],0FBh
 24919 000044E5 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24920                                  NOLOOKUP:
 24921                                  ;	POP	AX
 24922 000044EB F9                      	STC
 24923 000044EC C3                      	RETN
 24924                                  
 24925                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24926                                  ;-----------------------------------------------------------------------------
 24927                                  ;
 24928                                  ; Procedure Name : InsertPath
 24929                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24930                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24931                                  ;	  DS = DOSDATA
 24932                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24933                                  ;
 24934                                  ;-----------------------------------------------------------------------------
 24935                                  
 24936                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24937                                  
 24938                                  InsertPath:
 24939 000044ED 9C                      	PUSHF
 24940                                  ;hkn; SS override for FastOpenFlag
 24941                                  	;test	byte [SS:FastOpenFlg], 1
 24942 000044EE 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24943 000044F4 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24944                                  	;test	byte [ss:FastOpenFlg],2
 24945 000044F6 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 24946 000044FC 740D                    	JZ	short INSERT_DIR_INFO		; no
 24947                                  	;and	byte [ss:FastOpenFlg],0FDh
 24948 000044FE 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 24949 00004504 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 24950 00004509 EB5E                    	JMP	short GET_NEXT2
 24951                                  INSERT_DIR_INFO:				; save registers
 24952 0000450B 1E                      	PUSH	DS
 24953 0000450C 06                      	PUSH	ES
 24954 0000450D 53                      	PUSH	BX
 24955 0000450E 56                      	PUSH	SI
 24956 0000450F 57                      	PUSH	DI
 24957 00004510 51                      	PUSH	CX
 24958 00004511 50                      	PUSH	AX
 24959                                  
 24960                                  ;hkn; SS override
 24961 00004512 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 24962 00004517 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 24963                                  	;mov	ax,[di+6]
 24964 0000451A 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 24965                                  	; MSDOS 6.0
 24966                                  	;mov	[ss:si+1],ax
 24967 0000451D 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 24968                                  	; 19/05/2019 - Retro DOS v4.0
 24969 00004521 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24970                                  
 24971                                  ;hkn; SS is DOSDATA
 24972 00004524 16                      	push	ss
 24973 00004525 1F                      	pop	ds
 24974                                  	; MSDOS 3.3	
 24975                                  	;;mov	[si+1],ax	
 24976                                  	;MOV	[SI+FEI.dirsec],AX
 24977                                  	; MSDOS 6.0
 24978                                  	;mov	[si+3],ax
 24979 00004526 894403                  	MOV	[SI+FEI.dirsec+2],AX  ;AN000;>32mb save high dir sector
 24980                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24981 00004529 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 24982                                  	;;mov	[si+5],ax ; MSDOS 6.0
 24983                                  	;mov	[si+3],ax ; MSDOS 3.3
 24984 0000452C 894405                  	MOV	[SI+FEI.clusnum],AX
 24985                                  	; MSDOS 6.0
 24986 0000452F A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 24987                                  	;mov	[si+7],ax
 24988 00004532 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 24989 00004535 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 24990                                  	;mov	[si+9],ax
 24991 00004538 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 24992                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24993 0000453B 89D8                    	MOV	AX,BX
 24994                                  	;;add	di,16  ; MSDOS 3.3
 24995                                  	;add	di,20  ; MSDOS 6.0
 24996 0000453D 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 24997 00004540 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 24998                                  	;mov	cl,32
 24999 00004542 B120                    	MOV	CL,dir_entry.size
 25000 00004544 F6F1                    	DIV	CL
 25001                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25002 00004546 8804                    	mov	[si],al
 25003                                  
 25004 00004548 1E                      	PUSH	DS
 25005 00004549 07                      	POP	ES
 25006                                  
 25007 0000454A 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25008 0000454E 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25009                                  	;cmp	word [di+1Ah],0
 25010 00004550 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25011                                  					; never insert info when file is empty
 25012 00004554 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25013                                  
 25014 00004556 56                      	PUSH	SI			; ES:BX -> extended info
 25015 00004557 5B                      	POP	BX
 25016                                  
 25017                                  	;mov	al,2
 25018 00004558 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25019 0000455A BE[300D]                	MOV	SI,FastOpenTable
 25020                                  	;call	far [es:si+2]
 25021                                  	; 07/12/2022
 25022 0000455D 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25023                                  
 25024 00004561 F8                      	CLC
 25025                                  SKIP_INSERT:
 25026 00004562 58                      	POP	AX
 25027 00004563 59                      	POP	CX			; restore registers
 25028 00004564 5F                      	POP	DI
 25029 00004565 5E                      	POP	SI
 25030 00004566 5B                      	POP	BX
 25031 00004567 07                      	POP	ES
 25032 00004568 1F                      	POP	DS
 25033                                  GET_NEXT2:
 25034                                  	;or	[ss:FastOpenFlg],8
 25035 00004569 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25036                                  					; we got dir info from fastopen so
 25037                                  GET_NEXT_ELEMENT:
 25038 0000456F 9D                      	POPF
 25039 00004570 C3                      	RETN
 25040                                  
 25041                                  ;============================================================================
 25042                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25043                                  ;============================================================================
 25044                                  ; 17/07/2018 - Retro DOS v3.0
 25045                                  ; 30/04/2019 - Retro DOS v4.0
 25046                                  
 25047                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25048                                  
 25049                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25050                                  
 25051                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25052                                  
 25053                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25054                                  ;DEV001s:
 25055                                  ;		length of packets
 25056 00004571 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25057                                  ;LenTab: db	22,14,22,13,15,14
 25058                                  
 25059                                  ;	Error Function
 25060                                  
 25061                                  CmdTab:
 25062 00004577 8604                    	DB	86h, DEVRD	; 0 input
 25063 00004579 8605                    	DB	86h, DEVRDND	; 1 input status
 25064 0000457B 8708                    	DB	87h, DEVWRT	; 2 output
 25065 0000457D 870A                    	DB	87h, DEVOST	; 3 output status
 25066 0000457F 8607                    	DB	86h, DEVIFL	; 4 input flush
 25067 00004581 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25068                                  
 25069                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25070                                  
 25071                                  ;CmdTab:
 25072                                  ;	db	86h, 4
 25073                                  ;	db	86h, 5
 25074                                  ;	db	87h, 8
 25075                                  ;	db	87h, 10
 25076                                  ;	db	86h, 7
 25077                                  ;	db	86h, 5
 25078                                  
 25079                                  ;DEV001E:
 25080                                  
 25081                                  ; 30/04/2019 - Retro DOS v4.0
 25082                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25083                                  
 25084                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25085                                  ;----------------------------------------------------------------------------
 25086                                  ;
 25087                                  ; Procedure Name : IOFUNC
 25088                                  ;
 25089                                  ; Inputs:
 25090                                  ;	DS:SI Points to SFT
 25091                                  ;	AH is function code
 25092                                  ;		= 0 Input
 25093                                  ;		= 1 Input Status
 25094                                  ;		= 2 Output
 25095                                  ;		= 3 Output Status
 25096                                  ;		= 4 Flush
 25097                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25098                                  ;				   present.
 25099                                  ;	AL = character if output
 25100                                  ; Function:
 25101                                  ;	Perform indicated I/O to device or file
 25102                                  ; Outputs:
 25103                                  ;	AL is character if input
 25104                                  ;	If a status call
 25105                                  ;		zero set if not ready
 25106                                  ;		zero reset if ready (character in AL for input status)
 25107                                  ; For regular files:
 25108                                  ;	Input Status
 25109                                  ;		Gets character but restores position
 25110                                  ;		Zero set on EOF
 25111                                  ;	Input
 25112                                  ;		Gets character advances position
 25113                                  ;		Returns ^Z on EOF
 25114                                  ;	Output Status
 25115                                  ;		Always ready
 25116                                  ; AX altered, all other registers preserved
 25117                                  ;----------------------------------------------------------------------------
 25118                                  
 25119                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25120                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25121                                  
 25122                                  IOFUNC:
 25123 00004583 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25124                                  					; DEVIOBUF
 25125 00004588 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25126 0000458F 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25127 00004596 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25128                                  	;test	byte [si+6],80h
 25129                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25130 0000459A F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25131 0000459E 7403                    	JZ	short IOTO22		;AN000;
 25132 000045A0 E9A500                  	JMP	IOTOFILE		;AN000;
 25133                                  IOTO22:
 25134                                  	;test	word [si+5],80h
 25135                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25136 000045A3 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25137 000045A7 7503                    	JNZ	short IOTO33		;AN000;
 25138 000045A9 E99C00                  	JMP	IOTOFILE		;AN000;
 25139                                  IOTO33:
 25140 000045AC 06                      	push	es ; * (MSDOS 6.21)
 25141 000045AD E8FBBE                  	call	save_world
 25142 000045B0 8CDA                    	MOV	DX,DS
 25143 000045B2 8CD3                    	MOV	BX,SS
 25144 000045B4 8EDB                    	MOV	DS,BX
 25145 000045B6 8EC3                    	MOV	ES,BX
 25146 000045B8 31DB                    	XOR	BX,BX
 25147 000045BA 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25148 000045BD 7503                    	jnz	short _no_sys_wait
 25149                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25150                                  	; 16/12/2022
 25151 000045BF 80CF04                  	or	bh,04h
 25152                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25153                                  				    ; It is up to device driver to carry out
 25154                                  				    ; appropriate action.
 25155                                  _no_sys_wait:
 25156 000045C2 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25157 000045C6 31DB                    	XOR	BX,BX
 25158 000045C8 881E[8903]              	MOV	[IOMED],BL
 25159                                  
 25160 000045CC 88E3                    	MOV	BL,AH		 	; get function
 25161 000045CE 2E8AA7[7145]            	MOV	AH,[cs:BX+LenTab]
 25162 000045D3 D1E3                    	SHL	BX,1
 25163 000045D5 2E8B8F[7745]            	MOV	CX,[cs:BX+CmdTab]
 25164 000045DA BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25165 000045DD 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25166 000045E1 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25167                                  
 25168 000045E5 8EDA                    	MOV	DS,DX
 25169 000045E7 E86D01                  	CALL	DEVIOCALL
 25170 000045EA 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25171 000045EF 21FF                    	and	di,di
 25172 000045F1 7834                    	js	short DevErr
 25173                                  OKDevIO:
 25174 000045F3 8CD0                    	MOV	AX,SS
 25175 000045F5 8ED8                    	MOV	DS,AX
 25176                                  
 25177                                  	;cmp	ch,5
 25178 000045F7 80FD05                  	CMP	CH,DEVRDND
 25179 000045FA 7506                    	JNZ	short DNODRD
 25180 000045FC A0[8903]                	MOV	AL,[IORCHR]
 25181 000045FF A2[BC03]                	MOV	[DEVIOBUF],AL
 25182                                  
 25183                                  DNODRD: 
 25184 00004602 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25185 00004606 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25186                                  	;and	ah,2
 25187 00004608 80E402                  	AND	AH,STBUI>>8
 25188                                  
 25189                                  QuickReturn:				;AN000; 2/13/KK
 25190 0000460B E886BE                  	call	restore_world
 25191 0000460E 07                      	pop	es ; * (MSDOS 6.21)
 25192                                  
 25193                                  	; SR;
 25194                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25195                                  	; IoStatFail = -1 (set after return from the I24)
 25196                                  
 25197                                  	; MSDOS 6.0
 25198 0000460F 9C                      	pushf
 25199 00004610 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25200 00004614 98                      	cbw				;sign extend to word
 25201 00004615 83F8FF                  	cmp	ax,-1
 25202 00004618 7507                    	jne	short not_fail_ret
 25203 0000461A 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25204 0000461F 9D                      	popf
 25205 00004620 C3                      	retn
 25206                                  
 25207                                  not_fail_ret:
 25208 00004621 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25209 00004625 9D                      	popf
 25210 00004626 C3                      	retn
 25211                                  
 25212                                  DevErr:
 25213 00004627 88CC                    	MOV	AH,CL
 25214 00004629 E8BB0D                  	call	CHARHARD
 25215 0000462C 3C01                    	CMP	AL,1
 25216 0000462E 7507                    	JNZ	short NO_RETRY
 25217 00004630 E861BE                  	call	restore_world
 25218                                  	; 12/05/2019
 25219 00004633 07                      	pop	es ; * (MSDOS 6.21)		
 25220 00004634 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25221                                  
 25222                                  NO_RETRY:
 25223                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25224                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25225                                  	; simply wants to ignore the error.
 25226                                  	;
 25227                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25228                                  	; should be checked by the caller on return
 25229                                  
 25230                                  					; SS override
 25231 00004637 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25232                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25233                                  
 25234                                  	; SR;
 25235                                  	; Check if user failed
 25236                                  
 25237                                  	; MSDOS 6.0
 25238 0000463D 3C03                    	cmp	al,3
 25239 0000463F 7505                    	jnz	short not_fail
 25240 00004641 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25241                                  not_fail:
 25242 00004646 EBAB                    	JMP	short OKDevIO
 25243                                  
 25244                                  IOTOFILE:
 25245 00004648 08E4                    	OR	AH,AH
 25246 0000464A 7421                    	JZ	short IOIN
 25247 0000464C FECC                    	DEC	AH
 25248 0000464E 7405                    	JZ	short IOIST
 25249 00004650 FECC                    	DEC	AH
 25250 00004652 7411                    	JZ	short IOUT
 25251                                  IOUT_retn:	; 18/12/2022
 25252 00004654 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25253                                  IOIST:
 25254                                  	;push	word [si+15h]
 25255 00004655 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25256                                  	;push	word [si+17h]
 25257 00004658 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25258 0000465B E80F00                  	CALL	IOIN
 25259                                  	;pop	word [si+17h]
 25260 0000465E 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25261                                  	;pop	word [si+15h]
 25262 00004661 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25263 00004664 C3                      	retn
 25264                                  IOUT:
 25265 00004665 E82500                  	CALL	SETXADDR
 25266 00004668 E850EF                  	call	DOS_WRITE
 25267                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25268                                  	; 18/12/2022
 25269 0000466B EB54                    	jmp	RESTXADDR
 25270                                  ;IOUT_retn:
 25271                                  	;retn			; come crying to me when things don't
 25272                                  				; work ARR
 25273                                  IOIN:
 25274 0000466D E81D00                  	CALL	SETXADDR
 25275                                  					; SS override for DOS34_FLAG
 25276                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25277                                  	;or	word [ss:DOS34_FLAG],40h
 25278                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25279                                  	; 16/12/2022
 25280 00004670 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25281 00004676 E819ED                  	CALL	DOS_READ
 25282                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25283                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25284                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25285                                  	; 16/12/2022
 25286 00004679 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25287 0000467F 09C9                    	OR	CX,CX			; Check EOF
 25288 00004681 E83D00                  	CALL	RESTXADDR
 25289                                  					; SS override
 25290 00004684 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25291 00004688 75CA                    	jnz	short IOUT_retn	
 25292 0000468A B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25293 0000468C C3                      	retn
 25294                                  
 25295                                  SETXADDR:
 25296                                  					; SS override
 25297 0000468D 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25298                                  
 25299 00004692 06                      	push	es ; * (MSDOS 6.21)
 25300                                  
 25301 00004693 E815BE                  	call	save_world
 25302                                  					; SS override for DMAADD and THISSFT
 25303 00004696 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25304 0000469B 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25305 000046A0 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25306                                  
 25307 000046A5 16                      	push	ss
 25308 000046A6 1F                      	pop	ds
 25309                                  
 25310 000046A7 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25311 000046AB 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25312 000046AF 890E[2E03]              	MOV	[DMAADD+2],CX
 25313 000046B3 8B0E[8A03]              	MOV	CX,[IOXAD]
 25314 000046B7 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25315 000046BB 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25316 000046BF EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25317                                  
 25318                                  RESTXADDR:
 25319 000046C1 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25320 000046C5 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25321 000046C9 8F06[2C03]              	POP	WORD [DMAADD]
 25322                                  
 25323 000046CD E8C4BD                  	call	restore_world
 25324                                  
 25325 000046D0 07                      	pop	es ; * (MSDOS 6.21)
 25326                                  					; SS override
 25327                                  RESTRET:
 25328 000046D1 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25329                                  
 25330                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25331                                  ; 21/11/2022
 25332                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25333                                  
 25334                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25335                                  
 25336                                  ;----------------------------------------------------------------------------
 25337                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25338                                  ;
 25339                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25340                                  ;	the SFT.
 25341                                  ;
 25342                                  ;	ENTRY	(ES:DI) = SFT
 25343                                  ;	EXIT	none
 25344                                  ;	USES	all
 25345                                  ;----------------------------------------------------------------------------
 25346                                  
 25347                                  DEV_OPEN_SFT:
 25348 000046D6 06                      	push	es ; * (MSDOS 6.21)
 25349 000046D7 E8D1BD                  	call	save_world
 25350                                  	;mov	al,0Dh	
 25351 000046DA B00D                    	MOV	AL,DEVOPN
 25352 000046DC EB06                    	JMP	SHORT DO_OPCLS
 25353                                  
 25354                                  ;----------------------------------------------------------------------------
 25355                                  ; Procedure Name : DEV_CLOSE_SFT
 25356                                  ;
 25357                                  ; Inputs:
 25358                                  ;	ES:DI Points to SFT
 25359                                  ; Function:
 25360                                  ;	Issue a CLOSE call to the correct device
 25361                                  ; Outputs:
 25362                                  ;	None
 25363                                  ; ALL preserved
 25364                                  ;----------------------------------------------------------------------------
 25365                                  
 25366                                  DEV_CLOSE_SFT:
 25367 000046DE 06                      	push	es ; * (MSDOS 6.21)
 25368 000046DF E8C9BD                  	call	save_world
 25369                                  	;mov	al,0Eh	
 25370 000046E2 B00E                    	MOV	AL,DEVCLS
 25371                                  
 25372                                  	; Main entry for device open and close. AL contains the function 
 25373                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25374                                  	; open/close to block devices. This allows networks to function but 
 25375                                  	; does NOT hang up with bogus change-line code.
 25376                                  
 25377                                  	;entry	DO_OPCLS
 25378                                  DO_OPCLS:
 25379                                  	; Is the SFT for the net? If so, no action necessary.
 25380                                  
 25381                                  	; MSDOS 6.0
 25382                                  	;test	word [es:di+5],8000h
 25383                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25384 000046E4 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25385 000046E9 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25386 000046EB 30E4                    	XOR	AH,AH			; Unit
 25387                                  	;test	byte [es:di+5],80h
 25388 000046ED 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25389                                  	;les	di,[es:di+7]
 25390 000046F2 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25391 000046F6 7513                    	JNZ	short GOT_DEV_ADDR
 25392                                  
 25393                                  	; We are about to call device open/close on a block driver. If no 
 25394                                  	; sharing then just short circuit to done.
 25395                                  	
 25396                                  	; MSDOS 6.0
 25397                                  					; SS override
 25398 000046F8 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25399 000046FE 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25400                                  
 25401                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25402                                  	;mov	ah,[es:di+1]
 25403 00004700 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25404 00004704 268A0D                  	mov	cl,[es:di]
 25405                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25406                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25407                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25408 00004707 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25409                                  GOT_DEV_ADDR:				; ES:DI -> device
 25410                                  	;test	word [es:di+4],800h
 25411                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25412 0000470B 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25413 00004710 7440                    	JZ	short OPCLS_DONE	; Device can't
 25414 00004712 06                      	PUSH	ES
 25415 00004713 1F                      	POP	DS
 25416 00004714 89FE                    	MOV	SI,DI			; DS:SI -> device
 25417                                  
 25418                                  OPCLS_RETRY:
 25419                                  	;Context ES
 25420 00004716 16                      	push	ss
 25421 00004717 07                      	pop	es
 25422                                  					; DEVCALL is in DOSDATA
 25423 00004718 BF[5A03]                	MOV	DI,DEVCALL
 25424                                  
 25425 0000471B 89FB                    	MOV	BX,DI
 25426 0000471D 50                      	PUSH	AX
 25427                                  	;mov	al,13
 25428 0000471E B00D                    	MOV	AL,DOPCLHL
 25429 00004720 AA                      	STOSB				; Length
 25430 00004721 58                      	POP	AX
 25431 00004722 86E0                    	XCHG	AH,AL
 25432 00004724 AA                      	STOSB				; Unit
 25433 00004725 86E0                    	XCHG	AH,AL
 25434 00004727 AA                      	STOSB				; Command
 25435 00004728 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25436 0000472D 50                      	PUSH	AX			; Save Unit,Command
 25437                                  	;invoke	DEVIOCALL2
 25438 0000472E E82900                  	call	DEVIOCALL2
 25439                                  
 25440                                  	;mov	di,[es:bx+3]
 25441 00004731 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25442                                  	;test	di,8000h
 25443                                  	;jz	short OPCLS_DONEP	
 25444 00004735 21FF                    	and	di,di
 25445 00004737 7918                    	jns	short OPCLS_DONEP	; No error
 25446                                  	; 21/11/2022
 25447                                  	;test	word [si+4],8000h
 25448                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25449                                  	;test	word [si+5],80h
 25450 00004739 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25451 0000473D 7404                    	JZ	short BLKDEV
 25452 0000473F B486                    	MOV	AH,86H			; Read error in data, Char dev
 25453 00004741 EB04                    	JMP	SHORT HRDERR
 25454                                  BLKDEV:
 25455 00004743 88C8                    	MOV	AL,CL			; Drive # in AL
 25456 00004745 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25457                                  HRDERR:
 25458                                  	;invoke	CHARHARD
 25459 00004747 E89D0C                  	call	CHARHARD
 25460 0000474A 3C01                    	cmp	al,1
 25461 0000474C 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25462                                  					;  Note that FAIL is essentually IGNORED
 25463 0000474E 58                      	POP	AX			; Get back Unit, Command
 25464 0000474F EBC5                    	JMP	short OPCLS_RETRY
 25465                                  OPCLS_DONEP:
 25466 00004751 58                      	POP	AX			; Clean stack
 25467                                  OPCLS_DONE:
 25468 00004752 E83FBD                  	call	restore_world
 25469 00004755 07                      	pop	es ; * (MSDOS 6.21)
 25470 00004756 C3                      	retn
 25471                                  
 25472                                  ; 30/04/2019 - Retro DOS v4.0
 25473                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25474                                  
 25475                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25476                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25477                                  
 25478                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25479                                  ;----------------------------------------------------------------------------
 25480                                  ;**	DevIoCall  - Call Device
 25481                                  ;
 25482                                  ;	ENTRY	DS:SI Points to device SFT
 25483                                  ;		ES:BX Points to request data
 25484                                  ;	EXIT	DS:SI -> Device driver
 25485                                  ;	USES	DS:SI,AX
 25486                                  ;----------------------------------------------------------------------------
 25487                                  ;**	DevIoCall2 - Call Device
 25488                                  ;
 25489                                  ;	ENTRY	DS:SI Points to DPB
 25490                                  ;		ES:BX Points to request data
 25491                                  ;	EXIT	DS:SI -> Device driver
 25492                                  ;	USES	DS:SI,AX
 25493                                  ;----------------------------------------------------------------------------
 25494                                  
 25495                                  DEVIOCALL:
 25496                                  					; SS override for CALLSSEC, 
 25497                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25498 00004757 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25499                                  
 25500                                  	;entry	DEVIOCALL2
 25501                                  DEVIOCALL2:
 25502                                  	;EnterCrit critDevice
 25503 0000475A E85DCC                  	call	ECritDevice
 25504                                  
 25505                                  	; MSDOS 6.0
 25506                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25507                                  	;test	byte [si+5],80h
 25508 0000475D F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25509 00004761 7548                    	jnz	short chardev2		;AN000; >32mb no
 25510                                  
 25511                                  	; 16/12/2022
 25512                                  	; 22/11/2022
 25513 00004763 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25514 00004767 3C04                    	cmp	al,DEVRD	; 4
 25515 00004769 7408                    	je	short chkext	
 25516 0000476B 3C08                    	cmp	al,DEVWRT	; 8
 25517 0000476D 7404                    	je	short chkext
 25518 0000476F 3C09                    	cmp	al,DEVWRTV	; 9
 25519 00004771 7538                    	jne	short chardev2
 25520                                  
 25521                                  	; 16/12/2022
 25522                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25523                                  	;;cmp	byte [es:bx+2],4
 25524                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25525                                  	;JZ	short chkext		;AN000; >32mb   yes
 25526                                  	;;cmp	byte [es:bx+2],8
 25527                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25528                                  	;JZ	short chkext		;AN000; >32mb   yes
 25529                                  	;;cmp	byte [es:bx+2],9
 25530                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25531                                  	;				;AN000; >32mb write/verify ?
 25532                                  	;JNZ	short chardev2		;AN000; >32mb no
 25533                                  chkext:
 25534 00004773 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25535 00004776 7255                    	JC	short dev_exit		;AN000;LB. done
 25536                                  
 25537                                  	;test	byte [si+4],2
 25538 00004778 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25539 0000477C 741D                    	JZ	short chksector		;AN000;>32mb   no
 25540 0000477E 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25541 00004782 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25542 00004786 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25543 0000478D 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25544 00004791 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25545 00004795 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25546 00004799 EB10                    	JMP	short chardev2		;AN000; >32mb
 25547                                  chksector:				;AN000; >32mb
 25548 0000479B 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25549 000047A1 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25550                                  	;mov	word [es:bx+3],8107h
 25551 000047A3 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25552                                  					;AN000; >32mb
 25553 000047A9 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25554                                  
 25555                                  chardev2:				;AN000;
 25556                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25557                                  	; preserved
 25558                                  
 25559                                  	;mov	ax,[si+6]
 25560 000047AB 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25561 000047AE 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25562 000047B2 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25563 000047B7 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25564                                  
 25565                                  	;mov	ax,[si+8]
 25566 000047BC 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25567 000047BF 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25568 000047C3 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25569                                  
 25570                                  	; MSDOS 6.0
 25571 000047C8 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25572 000047CB 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25573                                  
 25574                                  dev_exit:
 25575                                  	;LeaveCrit critDevice
 25576                                  	;call	LCritDevice
 25577                                  	;retn
 25578                                  	; 18/12/2022
 25579 000047CD E905CC                  	jmp	LCritDevice
 25580                                  
 25581                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25582                                  ; 22/11/2022
 25583                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25584                                  
 25585                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25586                                  ;---------------------------------------------------------------------------
 25587                                  ;
 25588                                  ; Procedure Name : SETREAD, SETWRITE
 25589                                  ;
 25590                                  ; Inputs:
 25591                                  ;	DS:BX = Transfer Address
 25592                                  ;	CX = Record Count
 25593                                  ;	DX = Starting Record
 25594                                  ;	AH = Media Byte
 25595                                  ;	AL = Unit Code
 25596                                  ; Function:
 25597                                  ;	Set up the device call header at DEVCALL
 25598                                  ; Output:
 25599                                  ;	ES:BX Points to DEVCALL
 25600                                  ; No other registers effected
 25601                                  ;
 25602                                  ;---------------------------------------------------------------------------
 25603                                  
 25604                                  SETREAD:
 25605 000047D0 57                      	PUSH	DI
 25606 000047D1 51                      	PUSH	CX
 25607 000047D2 50                      	PUSH	AX
 25608 000047D3 B104                    	MOV	CL,DEVRD ; mov cl,4
 25609                                  SETCALLHEAD:
 25610 000047D5 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25611 000047D7 16                      	PUSH	SS
 25612 000047D8 07                      	POP	ES
 25613                                  					; DEVCALL is in DOSDATA
 25614 000047D9 BF[5A03]                	MOV	DI,DEVCALL
 25615                                  
 25616 000047DC AA                      	STOSB				; length
 25617 000047DD 58                      	POP	AX			; 
 25618 000047DE AA                      	STOSB				; Unit
 25619 000047DF 50                      	PUSH	AX
 25620 000047E0 88C8                    	MOV	AL,CL
 25621 000047E2 AA                      	STOSB				; Command code
 25622 000047E3 31C0                    	XOR	AX,AX
 25623 000047E5 AB                      	STOSW				; Status
 25624 000047E6 83C708                  	ADD	DI,8			; Skip link fields
 25625 000047E9 58                      	POP	AX
 25626 000047EA 86E0                    	XCHG	AH,AL
 25627 000047EC AA                      	STOSB				; Media byte
 25628 000047ED 86C4                    	XCHG	AL,AH
 25629 000047EF 50                      	PUSH	AX
 25630 000047F0 89D8                    	MOV	AX,BX
 25631 000047F2 AB                      	STOSW
 25632                                  
 25633 000047F3 8CD8                    	MOV	AX,DS
 25634 000047F5 AB                      	STOSW				; Transfer addr
 25635                                  
 25636 000047F6 59                      	POP	CX			; Real AX
 25637 000047F7 58                      	POP	AX			; Real CX
 25638 000047F8 AB                      	STOSW				; Count
 25639                                  
 25640 000047F9 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25641 000047FA AB                      	STOSW				; Start
 25642 000047FB 91                      	XCHG	AX,CX
 25643 000047FC 87D1                    	XCHG	DX,CX
 25644 000047FE 5F                      	POP	DI
 25645                                  					; DEVCALL is in DOSDATA
 25646 000047FF BB[5A03]                	MOV	BX,DEVCALL
 25647 00004802 C3                      	retn
 25648                                  
 25649                                  	;entry	SETWRITE
 25650                                  SETWRITE:
 25651                                  
 25652                                  ; Inputs:
 25653                                  ;	DS:BX = Transfer Address
 25654                                  ;	CX = Record Count
 25655                                  ;	DX = Starting Record
 25656                                  ;	AH = Media Byte
 25657                                  ;	AL = Unit Code
 25658                                  ; Function:
 25659                                  ;	Set up the device call header at DEVCALL
 25660                                  ; Output:
 25661                                  ;	ES:BX Points to DEVCALL
 25662                                  ; No other registers effected
 25663                                  
 25664 00004803 57                      	PUSH	DI
 25665 00004804 51                      	PUSH	CX
 25666 00004805 50                      	PUSH	AX
 25667 00004806 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25668 00004808 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25669 0000480D EBC6                    	JMP	SHORT SETCALLHEAD
 25670                                  
 25671                                  ; 30/04/2019 - Retro DOS v4.0
 25672                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25673                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25674                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25675                                  
 25676                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25677                                  ;---------------------------------------------------------------------------
 25678                                  ;
 25679                                  ; Procedure Name : RW_SC
 25680                                  ;
 25681                                  ; Inputs:
 25682                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25683                                  ;	 [SC_STATUS]= SC validity status
 25684                                  ;	 [SEQ_SECTOR]= last sector read
 25685                                  ; Function:
 25686                                  ;	Read from or write through secondary cache
 25687                                  ; Output:
 25688                                  ;	ES:BX Points to DEVCALL
 25689                                  ;	carry clear, I/O is not done
 25690                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25691                                  ;	carry set, I/O is done
 25692                                  ;
 25693                                  ;----------------------------------------------------------------------------
 25694                                  
 25695                                  RW_SC:
 25696                                  	; SS override for all variables used.
 25697                                  	
 25698 0000480F 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25699 00004815 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25700 00004817 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25701 0000481D 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25702 0000481F 51                      	PUSH	CX			    ;AN000;LB.
 25703 00004820 52                      	PUSH	DX			    ;AN000;LB. yes
 25704 00004821 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25705 00004822 56                      	PUSH	SI			    ;AN000;LB.
 25706 00004823 06                      	PUSH	ES			    ;AN000;LB.
 25707 00004824 57                      	PUSH	DI			    ;AN000;LB.
 25708                                  
 25709 00004825 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25710 0000482A 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25711 00004830 7408                    	JZ	short doread		    ;AN000;LB. yes
 25712 00004832 E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25713 00004835 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25714                                  scexit4:				    ;AN000;
 25715 00004838 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25716 00004839 C3                      	retn				    ;AN000;LB.
 25717                                  doread: 				    ;AN000;
 25718 0000483A E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25719 0000483D 720A                    	JC	short readSC		    ;AN000;LB.
 25720 0000483F 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25721 00004846 F9                      	STC				    ;AN000;LB. set carry
 25722 00004847 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25723                                  readSC: 				    ;AN000;
 25724 00004849 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25725 0000484D 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25726 00004852 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25727 00004857 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25728 0000485C 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25729 0000485F 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25730                                  chklow: 						
 25731 00004861 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25732 00004864 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25733 00004866 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25734 0000486D 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25735 00004871 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25736                                  readsr:
 25737 00004875 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25738 00004879 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25739 0000487D 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25740 00004881 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25741                                  
 25742 00004885 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25743 00004889 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25744 0000488D 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25745 00004891 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25746 00004895 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25747 0000489B 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25748 0000489F 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25749 000048A3 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25750 000048A7 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25751 000048AB 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25752 000048AF 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25753                                  saveseq2:				    ;AN000;
 25754 000048B3 F8                      	CLC				    ;AN000;LB. clear carry
 25755                                  saveseq:				    ;AN000;	
 25756 000048B4 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25757 000048B8 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25758 000048BC 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25759 000048C0 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25760 000048C4 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25761                                  scexit2:				    ;AN000;LB.
 25762 000048C6 F8                      	CLC				    ;AN000;LB.	clear carry
 25763                                  scexit: 				    ;AN000;		
 25764 000048C7 5F                      	POP	DI			    ;AN000;LB.
 25765 000048C8 07                      	POP	ES			    ;AN000;LB. restore registers
 25766 000048C9 5E                      	POP	SI			    ;AN000;LB.
 25767 000048CA 1F                      	POP	DS			    ;AN000;LB.
 25768 000048CB 5A                      	POP	DX			    ;AN000;LB.
 25769 000048CC 59                      	POP	CX			    ;AN000;LB.
 25770 000048CD C3                      	retn				    ;AN000;LB.
 25771                                  
 25772                                  ;Break	<IN_SC -- check if in secondary cache>
 25773                                  ;--------------------------------------------------------------------------
 25774                                  ;
 25775                                  ; Procedure Name : IN_SC
 25776                                  ;
 25777                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25778                                  ;	   [CURSC_DRIVE]= current SC drive
 25779                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25780                                  ;	   [SC_CACHE_COUNT]= SC count
 25781                                  ;	   [HIGH_SECTOR]:DX= sector number
 25782                                  ; Function:
 25783                                  ;	Check if the sector is in secondary cache
 25784                                  ; Output:
 25785                                  ;	carry clear, in SC
 25786                                  ;	   CX= the index in the secondary cache
 25787                                  ;	carry set, not in SC
 25788                                  ;
 25789                                  ;---------------------------------------------------------------------------
 25790                                  
 25791                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25792                                  IN_SC:
 25793                                  	; SS override for all variables used
 25794 000048CE 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25795 000048D2 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25796 000048D7 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25797 000048D9 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25798 000048DD 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25799 000048DF 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25800 000048E4 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25801 000048E9 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25802 000048EC 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25803 000048EE 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25804 000048F3 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25805 000048F5 F8                      	CLC				    ;AN000;;LB. clear carry
 25806                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25807                                  	; 16/12/2022
 25808 000048F6 C3                      	retn	; 30/04/2019
 25809                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25810                                  	;jmp	short inexit
 25811                                  
 25812                                  outrange2:				    ;AN000;;LB. set carry
 25813 000048F7 F9                      	STC				    ;AN000;;LB.
 25814                                  inexit: 				    ;AN000;;LB.
 25815 000048F8 C3                      	retn				    ;AN000;;LB.
 25816                                  
 25817                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25818                                  ;---------------------------------------------------------------------------
 25819                                  ;
 25820                                  ; Procedure Name : Invalidate_Sc
 25821                                  ;
 25822                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25823                                  ;	   [CURSC_DRIVE]= current SC drive
 25824                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25825                                  ;	   [SC_CACHE_COUNT]= SC count
 25826                                  ;	   [SC_STATUS]= SC status word
 25827                                  ;	   [HIGH_SECTOR]:DX= sector number
 25828                                  ;
 25829                                  ; Function:
 25830                                  ;	invalidate secondary cache if in there
 25831                                  ; Output:
 25832                                  ;	[SC_STATUS] is updated
 25833                                  ;---------------------------------------------------------------------------
 25834                                  
 25835                                  INVALIDATE_SC:
 25836                                  	; SS override for all variables used
 25837                                  
 25838 000048F9 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25839 000048FC 720C                    	JC	short outrange		    ;AN000;;LB. no
 25840 000048FE B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25841 00004901 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25842 00004903 F7D0                    	NOT	AX			    ;AN000;;LB.
 25843 00004905 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25844                                  outrange:				    ;AN000;;LB.
 25845 0000490A C3                      	retn				    ;AN000;;LB.
 25846                                  
 25847                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25848                                  ; 22/11/2022
 25849                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25850                                  
 25851                                  ;Break	<VIRREAD- virtually read data into buffer>
 25852                                  ;--------------------------------------------------------------------------
 25853                                  ;
 25854                                  ; Procedure Name : SC_FLAG
 25855                                  ;
 25856                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25857                                  ;		     1, continuous sectors were read into SC
 25858                                  ; Function:
 25859                                  ;	   Move data from SC to buffer
 25860                                  ; Output:
 25861                                  ;	 carry clear, data is moved to buffer
 25862                                  ;	 carry set, bad sector or exceeds maximum sector
 25863                                  ;	   SC_FLAG =0
 25864                                  ;	   CALLSCNT=1
 25865                                  ;	   SC_STATUS= -1 if succeeded
 25866                                  ;     
 25867                                  ;		       0 if failed
 25868                                  ;--------------------------------------------------------------------------
 25869                                  
 25870                                  VIRREAD:
 25871                                  	; SS override for all variables used
 25872                                  
 25873 0000490B 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25874 00004911 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25875 00004913 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25876 00004917 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25877 0000491B 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25878 0000491F 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25879 00004923 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25880 00004929 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25881                                  
 25882                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25883 00004930 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25884 00004936 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25885 00004938 1E                      	PUSH	DS			    ;AN000;;LB.
 25886 00004939 56                      	PUSH	SI			    ;AN000;;LB.
 25887 0000493A 06                      	PUSH	ES			    ;AN000;;LB.
 25888 0000493B 57                      	PUSH	DI			    ;AN000;;LB.
 25889 0000493C 52                      	PUSH	DX			    ;AN000;;LB.
 25890 0000493D 51                      	PUSH	CX			    ;AN000;;LB.
 25891 0000493E 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25892 00004940 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25893 00004943 59                      	POP	CX
 25894 00004944 5A                      	POP	DX			    ;AN000;;LB.
 25895 00004945 5F                      	POP	DI			    ;AN000;;LB.
 25896 00004946 07                      	POP	ES			    ;AN000;;LB.
 25897 00004947 5E                      	POP	SI			    ;AN000;;LB.
 25898 00004948 1F                      	POP	DS			    ;AN000;;LB.
 25899 00004949 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25900                                  scerror:				    ;AN000;
 25901 0000494B 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25902 00004952 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25903 00004959 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25904 0000495F F9                      	STC				    ;AN000;;LB. carry set
 25905 00004960 C3                      	retn				    ;AN000;;LB.
 25906                                  sc2end: 				    ;AN000;
 25907 00004961 F8                      	CLC				    ;AN000;;LB. carry clear
 25908 00004962 C3                      	retn				    ;AN000;;LB.
 25909                                  
 25910                                  ; 30/04/2019 - Retro  DOS v4.0
 25911                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25912                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25913                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25914                                  
 25915                                  ;Break	<SC2BUF- move data from SC to buffer>
 25916                                  ;----------------------------------------------------------------------------
 25917                                  ;
 25918                                  ; Procedure Name : SC2BUF
 25919                                  ;
 25920                                  ; Inputs:  [SC_STATUS] = SC validity status
 25921                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25922                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25923                                  ; Function:
 25924                                  ;	   Move data from SC to buffer
 25925                                  ; Output:
 25926                                  ;	   carry clear, in SC  and data is moved
 25927                                  ;	   carry set, not in SC and data is not moved
 25928                                  ;---------------------------------------------------------------------------
 25929                                  
 25930                                  SC2BUF:
 25931                                  	; SS override for all variables used
 25932 00004963 E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25933 00004966 7241                    	JC	short noSC		    ;AN000;LB. no
 25934 00004968 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25935 0000496B D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25936 0000496D 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25937 00004972 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25938                                  ;entry SC2BUF2
 25939                                  SC2BUF2:				    ;AN000;
 25940 00004974 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25941 00004976 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25942 0000497B 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25943 00004980 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25944 00004985 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25945 00004987 89C6                    	MOV	SI,AX			    ;AN000;LB.
 25946 00004989 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 25947 0000498E 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 25948 00004993 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 25949 00004998 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 25950                                  ;entry MOVWORDS
 25951                                  MOVWORDS:				    ;AN000;
 25952 0000499A 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 25953 000049A0 7403                    	JZ	short nodd		    ;AN000;LB. no
 25954 000049A2 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 25955 000049A4 66                      	DB	66H			    ;AN000;LB. use double word move
 25956                                  nodd:
 25957 000049A5 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 25958 000049A7 F8                      	CLC				    ;AN000;LB. clear carry
 25959 000049A8 C3                      	retn				    ;AN000;LB. exit
 25960                                  noSC:					    ;AN000;
 25961 000049A9 F9                      	STC				    ;AN000;LB. set carry
 25962                                  sexit:					    ;AN000;
 25963 000049AA C3                      	retn				    ;AN000;LB.
 25964                                  
 25965                                  ;============================================================================
 25966                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 25967                                  ;============================================================================
 25968                                  ; 29/07/2018 - Retro DOS v3.0
 25969                                  ; 19/05/2019 - Retro DOS v4.0
 25970                                  
 25971                                  ;	TITLE	MKNODE - Node maker
 25972                                  ;	NAME	MKNODE
 25973                                  
 25974                                  ;**	MKNODE.ASM
 25975                                  ;----------------------------------------------------------------------------
 25976                                  ;	Low level routines for making a new local file system node
 25977                                  ;	and filling in an SFT from a directory entry
 25978                                  ;
 25979                                  ;	BUILDDIR
 25980                                  ;	SETDOTENT
 25981                                  ;	MakeNode
 25982                                  ;	NEWENTRY
 25983                                  ;	FREEENT
 25984                                  ;	NEWDIR
 25985                                  ;	DOOPEN
 25986                                  ;	RENAME_MAKE
 25987                                  ;	CHECK_VIRT_OPEN
 25988                                  ;
 25989                                  ;	Revision history:
 25990                                  ;
 25991                                  ;	 AN000	version 4.0  Jan. 1988
 25992                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 25993                                  
 25994                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 25995                                  ;----------------------------------------------------------------------------
 25996                                  ;
 25997                                  ; Procedure Name : BUILDDIR,NEWDIR
 25998                                  ;
 25999                                  ; Inputs:
 26000                                  ;       ES:BP Points to DPB
 26001                                  ;       [THISSFT] Set if using NEWDIR entry point
 26002                                  ;               (used by ALLOCATE)
 26003                                  ;       [LASTENT] current last valid entry number in directory if no free
 26004                                  ;               entries
 26005                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26006                                  ; Function:
 26007                                  ;       Grow directory if no free entries and not root
 26008                                  ; Outputs:
 26009                                  ;       CARRY SET IF FAILURE
 26010                                  ;       ELSE
 26011                                  ;          AX entry number of new entry
 26012                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26013                                  ;               AX = first entry of new dir
 26014                                  ;       GETENT should be called to set [LASTENT]
 26015                                  ;
 26016                                  ;----------------------------------------------------------------------------
 26017                                  
 26018                                  ; 19/05/2019 - Retro DOS v4.0
 26019                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26020                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26021                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26022                                  
 26023                                  BUILDDIR:
 26024                                  	; 29/07/2018 - Retro DOS v3.0
 26025                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26026                                  
 26027 000049AB A1[D805]                        MOV     AX,[ENTFREE]
 26028 000049AE 83F8FF                          CMP     AX,-1
 26029 000049B1 7402                            JZ	short CHECK_IF_ROOT
 26030 000049B3 F8                              CLC
 26031 000049B4 C3                              retn
 26032                                  
 26033                                  CHECK_IF_ROOT:
 26034 000049B5 833E[C205]00                    CMP     word [DIRSTART],0
 26035 000049BA 7502                            JNZ	short NEWDIR
 26036 000049BC F9                              STC
 26037                                  builddir_retn:
 26038 000049BD C3                              retn				; Can't grow root
 26039                                  
 26040                                  	;entry   NEWDIR
 26041                                  NEWDIR:        
 26042 000049BE 8B1E[C205]              	MOV     BX,[DIRSTART]
 26043 000049C2 09DB                            OR      BX,BX
 26044 000049C4 7405                            JZ	short NULLDIR
 26045 000049C6 E84006                  	call	GETEOF
 26046 000049C9 72F2                            jc	short builddir_retn	; Screw up
 26047                                  NULLDIR:
 26048 000049CB B90100                          MOV     CX,1
 26049 000049CE E85105                  	call	ALLOCATE
 26050 000049D1 72EA                            jc	short  builddir_retn
 26051 000049D3 8B16[C205]                      MOV     DX,[DIRSTART]
 26052 000049D7 09D2                            OR      DX,DX
 26053 000049D9 750D                            JNZ	short ADDINGDIR
 26054 000049DB E8BAF5                  	call	SETDIRSRCH
 26055 000049DE 72DD                            jc	short  builddir_retn
 26056 000049E0 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26057 000049E6 EB2B                            JMP     SHORT GOTDIRREC
 26058                                  ADDINGDIR:
 26059 000049E8 53                              PUSH    BX
 26060 000049E9 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26061 000049ED E84B0C                          call	IsEOF
 26062 000049F0 5B                              POP     BX
 26063 000049F1 7219                            JB	short NOTFIRSTGROW
 26064                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26065 000049F3 891E[BC05]                      MOV     [CLUSNUM],BX
 26066 000049F7 51                              PUSH    CX
 26067 000049F8 50                              PUSH    AX
 26068 000049F9 55                              PUSH    BP
 26069 000049FA B401                            MOV     AH,1			; CLUSNUM update
 26070                                  	; 15/12/2022
 26071 000049FC 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26072                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26073                                  	;;mov	dl,[es:bp+0]
 26074                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26075 00004A00 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26076 00004A04 89DD                            MOV     BP,BX 			; CLUSNUM
 26077 00004A06 E887DD                  	call	FastOpen_Update
 26078 00004A09 5D                              POP     BP
 26079 00004A0A 58                              POP     AX
 26080 00004A0B 59                              POP     CX
 26081                                  
 26082                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26083                                  NOTFIRSTGROW:
 26084 00004A0C 89DA                            MOV     DX,BX
 26085 00004A0E 30DB                            XOR     BL,BL
 26086 00004A10 E8E304                  	call	FIGREC
 26087                                  GOTDIRREC:
 26088                                  	;mov	cl,[es:bp+4]
 26089 00004A13 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26090 00004A17 FEC1                            INC     CL
 26091 00004A19 30ED                            XOR     CH,CH
 26092                                  ZERODIR:
 26093 00004A1B 51                              PUSH    CX
 26094                                  	;mov	byte [ALLOWED],18h
 26095 00004A1C C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26096 00004A21 B0FF                            MOV     AL,0FFH
 26097 00004A23 E84E10                          call	GETBUFFR
 26098 00004A26 7302                            JNC	short GET_SSIZE
 26099 00004A28 59                              POP     CX
 26100 00004A29 C3                              retn
 26101                                  
 26102                                  GET_SSIZE:
 26103                                  	;mov	cx,[es:bp+2]
 26104 00004A2A 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26105 00004A2E 06                              PUSH    ES
 26106 00004A2F C43E[E205]                      LES     DI,[CURBUF]
 26107                                  	;or	byte [es:di+5],4
 26108 00004A33 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26109 00004A38 57                              PUSH    DI
 26110                                  	;;add	di,16	; MSDOS 3.3
 26111                                  	;add	di,20	; MSDOS 6.0	
 26112 00004A39 83C714                          ADD     DI,BUFINSIZ
 26113 00004A3C 31C0                            XOR     AX,AX
 26114 00004A3E D1E9                            SHR     CX,1
 26115 00004A40 F3AB                            REP     STOSW
 26116 00004A42 7301                            JNC	short EVENZ
 26117 00004A44 AA                              STOSB
 26118                                  EVENZ:
 26119 00004A45 5F                              POP     DI
 26120                                  
 26121                                  	; MSDOS 6.0
 26122 00004A46 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26123                                  					;LB. if already dirty		  ;AN000;
 26124 00004A4B 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26125 00004A4D E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26126                                          
 26127                                  	;or	byte [es:di+5],40h
 26128 00004A50 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26129                                  yesdirty7:
 26130 00004A55 07                              POP	ES
 26131 00004A56 59                              POP	CX
 26132                                  
 26133                                  	; 19/05/2019 - Retro DOS v4.0
 26134                                  
 26135                                  	; MSDOS 3.3
 26136                                  	;INC	DX
 26137                                  
 26138                                  	; MSDOS 6.0
 26139 00004A57 83C201                  	add	dx,1
 26140 00004A5A 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26141                                  
 26142 00004A5F E2BA                            LOOP    ZERODIR
 26143                                  
 26144 00004A61 A1[4803]                        MOV     AX,[LASTENT]
 26145 00004A64 40                              INC     AX
 26146 00004A65 F8                              CLC
 26147 00004A66 C3                              retn
 26148                                  
 26149                                  ;--------------------------------------------------------------------------
 26150                                  ;
 26151                                  ; Procedure Name : SETDOTENT
 26152                                  ;
 26153                                  ; set up a . or .. directory entry for a directory.
 26154                                  ;
 26155                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26156                                  ;               AX contains ". " or ".."
 26157                                  ;               DX contains first cluster of entry
 26158                                  ;
 26159                                  ;----------------------------------------------------------------------------
 26160                                  
 26161                                  SETDOTENT:
 26162                                  ;	Fill in name field
 26163 00004A67 AB                              STOSW
 26164 00004A68 B90400                          MOV     CX,4
 26165 00004A6B B82020                          MOV     AX,"  " ; 2020h
 26166 00004A6E F3AB                            REP     STOSW
 26167 00004A70 AA                              STOSB
 26168                                  
 26169                                  ;	Set up attribute
 26170                                  	;mov	al, 10h
 26171 00004A71 B010                            MOV     AL,attr_directory
 26172 00004A73 AA                              STOSB
 26173                                  
 26174                                  ;	Initialize time and date of creation
 26175 00004A74 83C70A                          ADD     DI,10
 26176 00004A77 8B36[9E05]                      MOV     SI,[THISSFT]
 26177                                  	;mov	ax,[si+0Dh]
 26178 00004A7B 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26179 00004A7E AB                              STOSW
 26180                                  	;mov	ax,[si+0Fh]
 26181 00004A7F 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26182 00004A82 AB                      	STOSW
 26183                                  
 26184                                  ;	Set up first cluster field
 26185 00004A83 89D0                            MOV     AX,DX
 26186 00004A85 AB                              STOSW
 26187                                  
 26188                                  ;	0 file size
 26189 00004A86 31C0                            XOR     AX,AX
 26190 00004A88 AB                              STOSW
 26191 00004A89 AB                              STOSW
 26192 00004A8A C3                              retn
 26193                                  
 26194                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26195                                  ;---------------------------------------------------------------------------
 26196                                  ;
 26197                                  ; Procedure Name : MakeNode
 26198                                  ;
 26199                                  ; Inputs:
 26200                                  ;       AL - attribute to create
 26201                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26202                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26203                                  ;               (AH ignored on dirs and devices)
 26204                                  ;
 26205                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26206                                  ;               a name already existant is ALWAYS an error in these cases.
 26207                                  ;
 26208                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26209                                  ;               terminated)
 26210                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26211                                  ;               ( = -1 if current dir not involved, else
 26212                                  ;                Points to first char after last "/" of current dir part)
 26213                                  ;       [THISCDS] Points to CDS being used
 26214                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26215                                  ; Function:
 26216                                  ;       Make a new node
 26217                                  ; Outputs:
 26218                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26219                                  ;       CARRY SET IF ERROR
 26220                                  ;          AX = 1 A node by this name exists and is a directory
 26221                                  ;          AX = 2 A new node could not be created
 26222                                  ;          AX = 3 A node by this name exists and is a disk file
 26223                                  ;               (AH was NZ on input)
 26224                                  ;          AX = 4 Bad Path
 26225                                  ;               SI return from GetPath maintained
 26226                                  ;          AX = 5 Attribute mismatch
 26227                                  ;          AX = 6 Sharing Violation
 26228                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26229                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26230                                  ;       ELSE
 26231                                  ;          AX = 0 Disk Node
 26232                                  ;          AX = 3 Device Node (error in some cases)
 26233                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26234                                  ;               containing new node.
 26235                                  ;          [CURBUF+2]:BX Points to entry
 26236                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26237                                  ;          [THISSFT] is filled in
 26238                                  ;               sf_mode = unchanged.
 26239                                  ;          Attribute byte in entry is input AL
 26240                                  ; DS preserved, others destroyed
 26241                                  ;
 26242                                  ;-------------------------------------------------------------------------
 26243                                  
 26244                                  ; 19/05/2019 - Retro DOS v4.0
 26245                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26246                                  
 26247                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26248                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26249                                  
 26250                                  MakeNode:
 26251                                  	;mov	word [CREATING],0E5FFh
 26252 00004A8B C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26253 00004A91 50                              PUSH    AX              ; Save AH value
 26254 00004A92 C606[4C03]00            	MOV	byte [NoSetDir],0
 26255 00004A97 A2[6D05]                	MOV	[SATTRIB],AL
 26256 00004A9A E861F5                  	call	GetPathNoSet
 26257 00004A9D 88CA                            MOV     DL,CL           ; Save CL info
 26258 00004A9F 89C1                            MOV     CX,AX           ; Device ID to CH
 26259 00004AA1 58                              POP     AX              ; Get back AH
 26260 00004AA2 732E                            JNC	short make_exists ; File existed
 26261 00004AA4 7505                            JNZ	short make_err_4 ; Path bad
 26262 00004AA6 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26263 00004AA9 7406                            JZ	short make_type	; Name simply not found, and no metas
 26264                                  make_err_4:
 26265 00004AAB B004                            MOV     AL,4            ; case 1 bad path
 26266                                  make_err_ret:
 26267 00004AAD 30E4                            XOR     AH,AH
 26268 00004AAF F9                              STC
 26269                                  ;make_retn:	; 22/11/2022
 26270 00004AB0 C3                              retn
 26271                                  
 26272                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26273                                  RENAME_MAKE:
 26274                                  make_type:
 26275                                  ;Extended Open hooks
 26276                                  	; MSDOS 6.0
 26277                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26278 00004AB1 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26279 00004AB6 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26280 00004AB8 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26281                                  					;FT. set for extended open ;AN000;
 26282                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26283 00004ABD F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26284 00004AC2 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26285 00004AC4 F9                      	STC				;FT. set carry			;AN000;
 26286 00004AC5 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26287                                  	; 22/11/2022
 26288                                  make_retn:
 26289                                  	;return
 26290 00004AC8 C3                      	retn				;FT.				;AN000;
 26291                                  
 26292                                  ;	Extended Open hooks
 26293                                  
 26294                                  make_type2:
 26295 00004AC9 C43E[9E05]                      LES     DI,[THISSFT]
 26296 00004ACD 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26297 00004ACF F9                              STC                     ; Not found
 26298 00004AD0 EB5A                            JMP     short make_new
 26299                                  
 26300                                  ; The node exists. It may be either a device, directory or file:
 26301                                  ;   Zero set => directory
 26302                                  ;   High bit of CH on => device
 26303                                  ;   else => file
 26304                                  
 26305                                  make_exists:
 26306 00004AD2 7448                            JZ	short make_exists_dir
 26307 00004AD4 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26308                                  	;test	byte [ATTRIB],18h
 26309 00004AD6 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26310 00004ADB 753B                            JNZ	short make_err_ret_5
 26311                                  				; Cannot already exist as Disk or Device Node
 26312                                                                  ;       if making DIR or Volume ID
 26313 00004ADD 08ED                            OR      CH,CH
 26314 00004ADF 781A                            JS	short make_share ; No further checks on attributes if device
 26315 00004AE1 08E4                            OR      AH,AH
 26316 00004AE3 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26317 00004AE5 51                              PUSH    CX              ; Save device ID
 26318 00004AE6 8E06[E405]                      MOV     ES,[CURBUF+2]
 26319                                  	;mov	ch,[es:bx+0Bh]
 26320 00004AEA 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26321                                  	;test	ch,1
 26322 00004AEE F6C501                  	test	CH,attr_read_only
 26323 00004AF1 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26324 00004AF3 E8B8F7                  	call	MatchAttributes
 26325 00004AF6 59                              POP     CX              ; Devid back in CH
 26326 00004AF7 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26327 00004AF9 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26328                                  make_share:
 26329 00004AFB 30E4                            XOR     AH,AH
 26330 00004AFD 50                              PUSH    AX              ; Save Disk or Device node
 26331 00004AFE 51                              PUSH    CX              ; Save Device ID
 26332 00004AFF 88EC                            MOV     AH,CH           ; Device ID to AH
 26333 00004B01 E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26334 00004B04 C43E[9E05]                      LES     DI,[THISSFT]
 26335 00004B08 56                      	push	si
 26336 00004B09 53                      	push	bx		; Save CURBUF pointers
 26337 00004B0A E89629                  	call	ShareEnter
 26338 00004B0D 735A                            jnc	short MakeEndShare
 26339                                  
 26340                                  ; User failed request.
 26341 00004B0F 5B                      	pop	bx
 26342 00004B10 5E                      	pop	si
 26343 00004B11 59                      	pop	cx
 26344 00004B12 58                      	pop	ax
 26345                                  
 26346                                  Make_Share_ret:
 26347 00004B13 B006                            MOV     AL,6
 26348 00004B15 EB96                            JMP	short make_err_ret
 26349                                  
 26350                                  make_err_ret_5P:
 26351 00004B17 59                              POP     CX              ; Get back device ID
 26352                                  make_err_ret_5:
 26353 00004B18 B005                            MOV     AL,5            ; Attribute mismatch
 26354                                          ; 22/11/2022
 26355 00004B1A EB91                    	JMP     short make_err_ret
 26356                                  
 26357                                  make_exists_dir:
 26358 00004B1C B001                            MOV     AL,1            ; exists as directory, always an error
 26359                                  	; 22/11/2022
 26360 00004B1E EB8D                    	JMP     short make_err_ret
 26361                                  
 26362                                  make_save:
 26363 00004B20 50                              PUSH    AX              ; Save whether Disk or File
 26364 00004B21 89C8                            MOV     AX,CX           ; Device ID to AH
 26365 00004B23 E87400                          CALL    NEWENTRY
 26366 00004B26 58                              POP     AX              ; 0 if Disk, 3 if File
 26367 00004B27 739F                            jnc	short make_retn
 26368 00004B29 B002                            MOV     AL,2            ; create failed case 2
 26369                                  make_save_retn:
 26370 00004B2B C3                              retn
 26371                                  
 26372                                  make_new:
 26373 00004B2C E8F1FF                          call    make_save
 26374 00004B2F 72FA                            jc	short make_save_retn	; case 2 fail
 26375                                  	;test	byte [ATTRIB],10h
 26376 00004B31 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26377 00004B36 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26378                                  					; so don't tell the sharer about them
 26379 00004B38 50                      	push	ax
 26380 00004B39 53                      	push	bx
 26381 00004B3A 56                      	push	si		
 26382 00004B3B E86529                          call	ShareEnter
 26383 00004B3E 5E                      	pop	si
 26384 00004B3F 5B                      	pop	bx
 26385 00004B40 58                      	pop	ax
 26386 00004B41 73E8                    	jnc	short make_save_retn
 26387                                  
 26388                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26389                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26390                                  ; possible: delete the newly created directory entry and return share_error.
 26391                                  
 26392 00004B43 50                              PUSH    AX
 26393 00004B44 C43E[E205]                      LES     DI,[CURBUF]
 26394                                  	;mov	byte [es:bx],0E5h
 26395 00004B48 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26396                                  	
 26397                                  	; MSDOS 6.0
 26398                                  	;test	byte [es:di+5],40h
 26399 00004B4C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26400                                  					;LB. if already dirty		  ;AN000;
 26401 00004B51 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26402                                  	; 22/11/2022
 26403 00004B53 E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26404                                  	;or	byte [es:di+5],40h
 26405 00004B56 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26406                                  yesdirty8:
 26407 00004B5B C42E[8A05]                      LES     BP,[THISDPB]
 26408                                  	; 15/12/2022
 26409 00004B5F 268A4600                        mov	al,[ES:BP]
 26410                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26411                                  	;;mov	al,[es:bp+0]
 26412                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26413 00004B63 E80C10                          call	FLUSHBUF		; write out buffer.
 26414 00004B66 58                              POP     AX
 26415 00004B67 EBAA                            jmp	short Make_Share_ret
 26416                                  
 26417                                  ; We have found an existing file. We have also entered it into the share set.
 26418                                  ; At this point we need to call newentry to correctly address the problem of
 26419                                  ; getting rid of old data (create an existing file) or creating a new
 26420                                  ; directory entry (create a new file). Unfortunately, this operation may
 26421                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26422                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26423                                  ; the share set now, do the operation and then reassert the share access.
 26424                                  ;
 26425                                  ; We are allowed to do this! There is no window! After all, we are in
 26426                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26427                                  
 26428                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26429                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26430                                  
 26431                                  MakeEndShare:
 26432 00004B69 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26433 00004B6D 31C0                            XOR     AX,AX
 26434 00004B6F E813C8                  	call	ECritSFT
 26435 00004B72 268705                  	xchg	AX,[ES:DI]
 26436                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26437 00004B75 50                      	push	ax
 26438 00004B76 57                      	push	di
 26439 00004B77 06                      	push	es
 26440 00004B78 9C                              PUSHF
 26441 00004B79 E82229                          call	ShareEnd                ; remove sharing
 26442 00004B7C 9D                              POPF
 26443 00004B7D 07                      	pop	es
 26444 00004B7E 5F                      	pop	di
 26445 00004B7F 268F05                          pop	word [ES:DI]	
 26446                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26447 00004B82 E81BC8                  	call	LCritSFT
 26448                                  	; 22/11/2022
 26449                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26450 00004B85 5B                      	pop	bx
 26451 00004B86 5E                      	pop	si
 26452 00004B87 59                      	pop	cx
 26453 00004B88 58                      	pop	ax
 26454 00004B89 E894FF                          CALL    make_save
 26455                                  
 26456                                  ; If the user failed, we do not reenter into the sharing set.
 26457                                  
 26458 00004B8C 729D                            jc	short make_save_retn	; bye if error
 26459 00004B8E 50                      	push	ax
 26460 00004B8F 53                      	push	bx
 26461 00004B90 56                      	push	si
 26462 00004B91 9C                              PUSHF
 26463 00004B92 E80E29                          call	ShareEnter
 26464 00004B95 9D                              POPF
 26465 00004B96 5E                      	pop	si
 26466 00004B97 5B                      	pop	bx
 26467 00004B98 58                      	pop	ax
 26468                                  
 26469                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26470                                  
 26471                                  makeendshare_retn:
 26472 00004B99 C3                              retn
 26473                                  
 26474                                  ;---------------------------------------------------------------------------
 26475                                  ;
 26476                                  ; Procedure Name : NEWENTRY
 26477                                  ;
 26478                                  ; Inputs:
 26479                                  ;       [THISSFT] set
 26480                                  ;       [THISDPB] set
 26481                                  ;       [LASTENT] current last valid entry number in directory if no free
 26482                                  ;               entries
 26483                                  ;       [VOLID] set if a volume ID was found during search
 26484                                  ;	Attrib Contains attributes for new file
 26485                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26486                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26487                                  ;               NC means file existed (device)
 26488                                  ;               C  means file did not exist
 26489                                  ;       AH = Device ID byte
 26490                                  ;       If FILE
 26491                                  ;           [CURBUF+2]:BX points to start of directory entry
 26492                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26493                                  ;       If device
 26494                                  ;           DS:BX points to start of "fake" directory entry
 26495                                  ;           DS:SI points to dir_first of "fake" directory entry
 26496                                  ;               (has DWORD pointer to device header)
 26497                                  ; Function:
 26498                                  ;       Make a new directory entry
 26499                                  ;       If an old one existed it is truncated first
 26500                                  ; Outputs:
 26501                                  ;       Carry set if error
 26502                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26503                                  ;               vol ID, user FAILed to I 24
 26504                                  ;       else
 26505                                  ;               outputs of DOOPEN
 26506                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26507                                  ;
 26508                                  ;----------------------------------------------------------------------------
 26509                                  
 26510                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26511                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26512                                  
 26513                                  NEWENTRY:
 26514 00004B9A C42E[8A05]                      LES     BP,[THISDPB]
 26515 00004B9E 7316                            JNC	short EXISTENT	
 26516 00004BA0 803E[4A03]00                    CMP     byte [FAILERR],0
 26517 00004BA5 F9                              STC
 26518 00004BA6 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26519 00004BA8 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26520 00004BAB 72EC                            jc	short makeendshare_retn	; Failed
 26521 00004BAD E8BAF3                          call	GETENT          ; Point at that free entry
 26522 00004BB0 72E7                            jc	short makeendshare_retn	; Failed
 26523 00004BB2 EB0E                            JMP     SHORT FREESPOT
 26524                                  
 26525                                  ERRRET3:
 26526 00004BB4 F9                              STC
 26527                                  newentry_retn:
 26528 00004BB5 C3                              retn
 26529                                  
 26530                                  EXISTENT:
 26531 00004BB6 08E4                            OR      AH,AH           ; Check if file is I/O device
 26532 00004BB8 7903                            JNS	short NOT_DEV1
 26533 00004BBA E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26534                                  
 26535                                  NOT_DEV1:
 26536 00004BBD E82C01                          call	FREEENT		; Free cluster chain
 26537 00004BC0 72F3                            jc	short newentry_retn ; Failed
 26538                                  FREESPOT:
 26539                                  	;test	byte [ATTRIB],8
 26540 00004BC2 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26541 00004BC7 7407                            JZ	short NOTVOLID
 26542 00004BC9 803E[7B05]00                    CMP     BYTE [VOLID],0
 26543 00004BCE 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26544                                  NOTVOLID:
 26545 00004BD0 8E06[E405]                      MOV     ES,[CURBUF+2]
 26546 00004BD4 89DF                            MOV     DI,BX
 26547                                  
 26548 00004BD6 BE[4B05]                        MOV     SI,NAME1
 26549                                  
 26550 00004BD9 B90500                          MOV     CX,5
 26551 00004BDC F3A5                            REP     MOVSW
 26552 00004BDE A4                              MOVSB                   ; Move name into dir entry
 26553 00004BDF A0[6B05]                	MOV	AL,[ATTRIB]
 26554 00004BE2 AA                      	STOSB                   ; Attributes
 26555                                  
 26556                                  ;; File Tagging for Create DOS 4.00
 26557 00004BE3 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26558                                  ;; File Tagging for Create DOS 4.00
 26559                                  
 26560 00004BE5 31C0                            XOR     AX,AX
 26561 00004BE7 F3AB                            REP     STOSW           ; Zero pad
 26562 00004BE9 E85ABF                          call	DATE16
 26563 00004BEC 92                              XCHG    AX,DX
 26564 00004BED AB                              STOSW                   ; dir_time
 26565 00004BEE 92                              XCHG    AX,DX
 26566 00004BEF AB                              STOSW                   ; dir_date
 26567 00004BF0 31C0                            XOR     AX,AX
 26568 00004BF2 57                              PUSH    DI              ; Correct SI input value
 26569                                  				; 	(recomputed for new buffer)
 26570 00004BF3 AB                              STOSW                   ; Zero dir_first and size
 26571 00004BF4 AB                              STOSW
 26572 00004BF5 AB                              STOSW
 26573                                  updnxt:
 26574 00004BF6 8B36[E205]              	MOV	SI,[CURBUF]
 26575                                  
 26576                                  	; 19/05/2019 - Retro DOS v4.0
 26577                                  
 26578                                  	; MSDOS 6.0
 26579 00004BFA 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26580                                  				;LB. if already dirty		  ;AN000;
 26581 00004BFF 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26582 00004C01 E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26583                                          
 26584                                  	;or	byte [es:si+5],40h
 26585 00004C04 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26586                                  yesdirty9:
 26587 00004C09 C42E[8A05]                      LES     BP,[THISDPB]
 26588                                  	; 15/12/2022
 26589 00004C0D 268A4600                	MOV	AL,[ES:BP]
 26590                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26591                                  	;;mov	al,[es:bp+0]
 26592                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26593 00004C11 50                              PUSH    AX
 26594 00004C12 53                              PUSH    BX
 26595                                  
 26596                                  ; If we have a file, we need to increment the open ref. count so that
 26597                                  ; we have some protection against invalid media changes if an Int 24
 26598                                  ; error occurs.
 26599                                  ; Do nothing for a device.
 26600                                  
 26601 00004C13 06                      	push	es
 26602 00004C14 57                      	push	di
 26603 00004C15 C43E[9E05]                      LES     DI,[THISSFT]
 26604                                  	;test	word [es:di+5],80h
 26605                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26606 00004C19 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26607 00004C1E 751A                            jnz	short GotADevice
 26608 00004C20 1E                      	push	ds
 26609 00004C21 53                      	push	bx
 26610 00004C22 C51E[8A05]                      LDS     BX,[THISDPB]
 26611                                  	;mov	[es:di+7],bx
 26612 00004C26 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26613 00004C2A 8CDB                            MOV     BX,DS
 26614                                  	;mov	[es:di+9],bx
 26615 00004C2C 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26616 00004C30 5B                      	pop	bx
 26617 00004C31 1F                      	pop	ds ; need to use DS for segment later on
 26618 00004C32 E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26619 00004C35 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26620                                  GotADevice:
 26621 00004C3A 5F                      	pop	di
 26622 00004C3B 07                      	pop	es
 26623                                  
 26624 00004C3C E8330F                          call	FLUSHBUF
 26625 00004C3F E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26626 00004C42 5B                              POP     BX
 26627 00004C43 58                              POP     AX
 26628 00004C44 5E                              POP     SI              ; Get SI input back
 26629 00004C45 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26630 00004C47 7301                    	jnc	short DOOPEN    ; Failed
 26631 00004C49 C3                      	retn
 26632                                  	
 26633                                  ;NOTE FALL THROUGH
 26634                                  
 26635                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26636                                  
 26637                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26638                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26639                                  
 26640                                  ; DOOPEN
 26641                                  ;----------------------------------------------------------------------------
 26642                                  ;
 26643                                  ; Inputs:
 26644                                  ;       [THISDPB] points to DPB if file
 26645                                  ;       [THISSFT] points to SFT being used
 26646                                  ;       AH = Device ID byte
 26647                                  ;       If FILE
 26648                                  ;           [CURBUF+2]:BX points to start of directory entry
 26649                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26650                                  ;       If device
 26651                                  ;           DS:BX points to start of "fake" directory entry
 26652                                  ;           DS:SI points to dir_first of "fake" directory entry
 26653                                  ;               (has DWORD pointer to device header)
 26654                                  ; Function:
 26655                                  ;       Fill in SFT from dir entry
 26656                                  ; Outputs:
 26657                                  ;       CARRY CLEAR
 26658                                  ;       sf_ref_count and sf_mode fields not altered
 26659                                  ;       sf_flags high byte = 0
 26660                                  ;       sf_flags low byte = AH except
 26661                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26662                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26663                                  ;       sf_position = 0
 26664                                  ;       If device
 26665                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26666                                  ;           sf_size = 0
 26667                                  ;       If file
 26668                                  ;           sf_firclus sf_size set from entry
 26669                                  ;           sf_devptr = [THISDPB]
 26670                                  ;           sf_cluspos = 0
 26671                                  ;           sf_lstclus = sf_firclus
 26672                                  ;           sf_dirsec sf_dirpos set
 26673                                  ; DS,SI,BX preserved, others destroyed
 26674                                  ;
 26675                                  ;----------------------------------------------------------------------------
 26676                                  
 26677                                  	;entry	DOOPEN
 26678                                  DOOPEN:
 26679                                  ;	Generate and store attribute
 26680                                  
 26681 00004C4A 88E6                            MOV     DH,AH           ; AH to different place
 26682 00004C4C C43E[9E05]                      LES     DI,[THISSFT]
 26683                                  	;add	di,4
 26684 00004C50 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26685 00004C53 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26686                                                                  ;   attribute of 0 (for R/O testing etc).
 26687 00004C55 08F6                            OR      DH,DH           ; See if our assumption good.
 26688 00004C57 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26689 00004C59 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26690                                  	;mov	al,[BX+0Bh]
 26691 00004C5D 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26692                                  				; If file, get attrib from dir entry
 26693                                  DEV_SFT1:
 26694 00004C60 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26695                                  
 26696                                  ;	Generate and store flags word
 26697                                  
 26698 00004C61 31C0                            XOR     AX,AX
 26699 00004C63 88F0                            MOV     AL,DH
 26700                                  	;or	al,40h
 26701 00004C65 0C40                            OR      AL,devid_file_clean
 26702 00004C67 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26703                                  
 26704                                  ;	Generate and store device pointer
 26705                                  
 26706 00004C68 1E                              PUSH    DS
 26707                                  	;lds	ax,[bx+1Ah]
 26708 00004C69 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26709 00004C6C 08F6                            OR      DH,DH
 26710 00004C6E 7805                            JS	short DEV_SFT2
 26711                                  
 26712                                  ;hkn; SS override
 26713 00004C70 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26714                                  DEV_SFT2:
 26715 00004C75 AB                              STOSW 			; store offset
 26716 00004C76 8CD8                            MOV     AX,DS
 26717 00004C78 1F                              POP     DS
 26718 00004C79 AB                      	STOSW			; store segment
 26719                                  				; ES:DI -> sf_firclus
 26720                                  
 26721                                  ;	Generate pointer to, generate and store first cluster 
 26722                                  ;	(irrelevant for devices)
 26723                                  
 26724 00004C7A 56                              PUSH    SI              ; Save pointer to dir_first
 26725 00004C7B A5                              MOVSW                   ; dir_first -> sf_firclus
 26726                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26727                                  
 26728                                  ;	Copy time/date of last modification
 26729                                  
 26730                                  	;sub	si,6
 26731 00004C7C 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26732                                  				; DS:SI->dir_time
 26733 00004C7F A5                              MOVSW                   ; dir_time -> sf_time
 26734                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26735 00004C80 A5                              MOVSW                   ; dir_date -> sf_date
 26736                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26737                                  
 26738                                  ;	Generate and store file size (0 for devices)
 26739                                  
 26740 00004C81 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26741 00004C82 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26742 00004C83 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26743 00004C85 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26744 00004C86 08F6                            OR      DH,DH
 26745 00004C88 7904                            JNS	short FILE_SFT1
 26746 00004C8A 31C0                            XOR     AX,AX
 26747 00004C8C 89C1                            MOV     CX,AX           ; Devices are open ended
 26748                                  FILE_SFT1:
 26749 00004C8E 91                              XCHG    AX,CX
 26750 00004C8F AB                              STOSW                   ; Low word of sf_size
 26751 00004C90 91                              XCHG    AX,CX
 26752 00004C91 AB                              STOSW                   ; High word of sf_size
 26753                                                                  ; ES:DI -> sf_position
 26754                                  ; Initialize position to 0
 26755                                  
 26756 00004C92 31C0                            XOR     AX,AX
 26757 00004C94 AB                              STOSW
 26758 00004C95 AB                              STOSW                   ; sf_position
 26759                                                                  ; ES:DI -> sf_cluspos
 26760                                  
 26761                                  ; Generate cluster optimizations for files
 26762                                  
 26763 00004C96 08F6                            OR      DH,DH
 26764 00004C98 7843                            JS	short DEV_SFT3
 26765 00004C9A AB                              STOSW                   ; sf_cluspos ; 19h
 26766                                  	;mov	ax,[bx+1Ah]
 26767 00004C9B 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26768                                  	; 19/05/2019
 26769                                  	; MSDOS 3.3
 26770                                  	;STOSW 			; sf_lstclus ; 1Bh
 26771                                  	; MSDOS 6.0
 26772 00004C9E 57                              PUSH	DI              ;AN004; save dirsec offset
 26773                                  	;sub	di,1Bh
 26774 00004C9F 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26775                                  	;mov	[es:di+35h],ax
 26776 00004CA2 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26777 00004CA6 5F                              POP	DI              ;AN004; restore dirsec offset
 26778                                  
 26779                                  ; DOS 3.3  FastOpen  6/13/86
 26780                                  
 26781 00004CA7 1E                      	PUSH	DS
 26782                                  
 26783                                  ;hkn; SS is DOSDATA
 26784 00004CA8 16                      	push	ss
 26785 00004CA9 1F                      	pop	ds
 26786                                  	;test	byte [FastOpenFlg],4
 26787 00004CAA F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26788 00004CAF 7411                    	JZ	short Not_FastOpen
 26789                                  
 26790                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26791 00004CB1 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26792                                  
 26793                                  	;mov	ax,[si+1]
 26794 00004CB4 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26795 00004CB7 AB                              STOSW                   ; sf_dirsec
 26796                                  	; MSDOS 6.0
 26797                                  	;mov	ax,[si+3]
 26798 00004CB8 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26799                                  				;;; changed for >32mb
 26800 00004CBB AB                              STOSW                   ; sf_dirsec
 26801                                  	; 19/08//2018
 26802 00004CBC 8A04                    	mov	al,[SI]
 26803                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26804 00004CBE AA                              STOSB                   ; sf_dirpos
 26805 00004CBF 1F                              POP	DS
 26806 00004CC0 EB19                            JMP     short Next_Name
 26807                                  
 26808                                  ; DOS 3.3  FastOpen  6/13/86
 26809                                  
 26810                                  Not_FastOpen:
 26811                                          ;POP     DS		; normal path
 26812                                  
 26813                                  ;hkn; SS override
 26814                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26815                                  	; 16/12/2022
 26816                                  	; 28/07/2019
 26817 00004CC2 8B36[E205]              	mov	si,[CURBUF]
 26818 00004CC6 1F                      	pop	ds
 26819                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26820                                  	;pop	ds
 26821                                  	;mov	si,[ss:CURBUF]
 26822                                  	
 26823                                  	;mov	ax,[si+6]
 26824 00004CC7 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26825 00004CCA AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26826                                  	; 19/05/2019        
 26827                                  	; MSDOS 6.0
 26828                                  	;mov	ax,[si+8]
 26829 00004CCB 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26830 00004CCE AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26831                                          
 26832 00004CCF 89D8                    	MOV     AX,BX
 26833                                  	;;add	si,16	; MSDOS 3.3	
 26834                                  	;add	si,20	; MSDOS 6.0
 26835 00004CD1 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26836 00004CD4 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26837                                          ;mov	cl,32
 26838 00004CD6 B120                    	MOV     CL,dir_entry.size
 26839 00004CD8 F6F1                            DIV     CL
 26840 00004CDA AA                              STOSB                   ; sf_dirpos
 26841                                  Next_Name:
 26842 00004CDB EB03                            JMP     SHORT FILE_SFT2
 26843                                  
 26844                                  DEV_SFT3:
 26845                                  	;add	di,7
 26846 00004CDD 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26847                                  FILE_SFT2:
 26848                                  
 26849                                  ; Copy in the object's name
 26850                                  
 26851 00004CE0 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26852 00004CE2 B90B00                          MOV     CX,11
 26853 00004CE5 F3A4                            REP     MOVSB           ; sf_name
 26854 00004CE7 5E                              POP     SI              ; recover DS:SI -> dir_first
 26855                                  
 26856                                  ;hkn; SS is DOSDATA
 26857 00004CE8 16                              push	ss
 26858 00004CE9 1F                      	pop	ds
 26859 00004CEA F8                              CLC
 26860 00004CEB C3                              retn
 26861                                  
 26862                                  ;---------------------------------------------------------------------------
 26863                                  ;
 26864                                  ; Procedure Name : FREEENT
 26865                                  ;
 26866                                  ; Inputs:
 26867                                  ;       ES:BP -> DPB
 26868                                  ;       [CURBUF] Set
 26869                                  ;       [CURBUF+2]:BX points to directory entry
 26870                                  ;       [CURBUF+2]:SI points to above dir_first
 26871                                  ; Function:
 26872                                  ;       Free the cluster chain for the entry if present
 26873                                  ; Outputs:
 26874                                  ;       Carry set if error (currently user FAILed to I 24)
 26875                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26876                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26877                                  ;---------------------------------------------------------------------------
 26878                                  
 26879                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26880                                  FREEENT:
 26881 00004CEC 1E                              PUSH    DS
 26882 00004CED C53E[E205]                      LDS     DI,[CURBUF]
 26883 00004CF1 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26884                                  	; 19/05/2019 - Retro DOS v4.0
 26885                                  	; MSDOS 6.0
 26886 00004CF3 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26887                                  ;hkn; SS override
 26888 00004CF6 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26889 00004CFB 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26890 00004CFE 1F                              POP     DS
 26891 00004CFF 83F902                  	CMP	CX,2
 26892 00004D02 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26893                                  	;cmp	cx,[es:bp+0Dh]
 26894 00004D04 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26895 00004D08 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26896 00004D0A 29FB                            SUB     BX,DI
 26897 00004D0C 53                              PUSH    BX              ; Save offset
 26898 00004D0D FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26899 00004D11 52                              PUSH    DX              ; Save sector number
 26900 00004D12 89CB                            MOV     BX,CX
 26901 00004D14 E8B702                          call	RELEASE         ; Free any data allocated
 26902 00004D17 5A                              POP     DX
 26903 00004D18 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26904 00004D1C 7302                            JNC	short GET_BUF_BACK
 26905 00004D1E 5B                              POP     BX
 26906                                  freeent_retn:
 26907 00004D1F C3                              retn			; Screw up
 26908                                  
 26909                                  GET_BUF_BACK:
 26910                                  	;mov	byte [ALLOWED],18h
 26911 00004D20 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26912 00004D25 30C0                            XOR     AL,AL
 26913 00004D27 E84A0D                  	call	GETBUFFR        ; Get sector back
 26914 00004D2A 5B                              POP     BX              ; Get offset back
 26915 00004D2B 72F2                            jc	short freeent_retn
 26916 00004D2D E869EA                  	call	SET_BUF_AS_DIR
 26917 00004D30 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26918 00004D34 89DE                            MOV     SI,BX
 26919                                  	;add	si,1Ah
 26920 00004D36 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26921                                  RET1:
 26922 00004D39 F8                              CLC
 26923 00004D3A C3                              retn
 26924                                  
 26925                                  ;---------------------------------------------------------------------------
 26926                                  ;
 26927                                  ; Procedure Name : CHECK_VIRT_OPEN
 26928                                  ;
 26929                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26930                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26931                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26932                                  ; flag [VIRTUAL_OPEN].
 26933                                  ; No registers affected (including flags).
 26934                                  ; On input, [THISSFT] points to current SFT.
 26935                                  ;
 26936                                  ;---------------------------------------------------------------------------
 26937                                  
 26938                                  CHECK_VIRT_OPEN:
 26939 00004D3B 50                      	PUSH    AX
 26940 00004D3C 9F                              lahf                    ; preserve flags
 26941 00004D3D 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26942 00004D42 7410                            JZ	short ALL_CLOSED
 26943 00004D44 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26944 00004D49 06                      	push	es
 26945 00004D4A 57                      	push	di
 26946 00004D4B C43E[9E05]                      LES     DI,[THISSFT]
 26947 00004D4F E88CF9                          call	DEV_CLOSE_SFT
 26948 00004D52 5F                      	pop	di
 26949 00004D53 07                      	pop	es
 26950                                  
 26951                                  ALL_CLOSED:
 26952 00004D54 9E                              sahf                    ; restore flags
 26953 00004D55 58                              POP     AX
 26954 00004D56 C3                              retn
 26955                                  
 26956                                  ;============================================================================
 26957                                  ; ROM.ASM, MSDOS 6.0, 1991
 26958                                  ;============================================================================
 26959                                  ; 29/07/2018 - Retro DOS v3.0
 26960                                  ; 20/05/2019 - Retro DOS v4.0
 26961                                  
 26962                                  ;	TITLE	ROM - Miscellaneous routines
 26963                                  ;	NAME	ROM
 26964                                  
 26965                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 26966                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 26967                                  ;
 26968                                  ;	SKPCLP
 26969                                  ;	FNDCLUS
 26970                                  ;	BUFSEC
 26971                                  ;	BUFRD
 26972                                  ;	BUFWRT
 26973                                  ;	NEXTSEC
 26974                                  ;	OPTIMIZE
 26975                                  ;	FIGREC
 26976                                  ;	ALLOCATE
 26977                                  ;	RESTFATBYT
 26978                                  ;	RELEASE
 26979                                  ;	RELBLKS
 26980                                  ;	GETEOF
 26981                                  ;
 26982                                  ;	Modification history:
 26983                                  ;
 26984                                  ;		Created: ARR 30 March 1983
 26985                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 26986                                  
 26987                                  ;Break   <FNDCLUS -- Skip over allocation units>
 26988                                  ;--------------------------------------------------------------------------
 26989                                  ;
 26990                                  ; Procedure Name : FNDCLUS
 26991                                  ;
 26992                                  ; Inputs:
 26993                                  ;       CX = No. of clusters to skip
 26994                                  ;       ES:BP = Base of drive parameters
 26995                                  ;       [THISSFT] point to SFT
 26996                                  ; Outputs:
 26997                                  ;       BX = Last cluster skipped to
 26998                                  ;       CX = No. of clusters remaining (0 unless EOF)
 26999                                  ;       DX = Position of last cluster
 27000                                  ;       Carry set if error (currently user FAILed to I 24)
 27001                                  ; DI destroyed. No other registers affected.
 27002                                  ;--------------------------------------------------------------------------
 27003                                  
 27004                                  ; 20/05/2019 - Retro DOS v4.0
 27005                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27006                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27007                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27008                                  
 27009                                  FNDCLUS:
 27010 00004D57 06                      	PUSH	ES
 27011 00004D58 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27012                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27013                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27014 00004D5C 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27015                                  	;mov	dx,[es:di+19h]
 27016 00004D60 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27017 00004D64 09DB                    	OR	BX,BX
 27018 00004D66 7424                    	JZ	short NOCLUS
 27019                                  
 27020 00004D68 29D1                            SUB     CX,DX
 27021 00004D6A 7308                            JNB	short FINDIT
 27022                                  
 27023 00004D6C 01D1                            ADD     CX,DX
 27024 00004D6E 31D2                            XOR     DX,DX
 27025                                  	;mov	bx,[es:di+0Bh]
 27026 00004D70 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27027                                  FINDIT:
 27028 00004D74 07                              POP	ES
 27029 00004D75 E313                    	JCXZ	RET9
 27030                                  
 27031                                  	;entry	SKPCLP
 27032                                  SKPCLP:
 27033 00004D77 E8D808                  	call	UNPACK
 27034 00004D7A 7214                            jc	short fndclus_retn	; retc
 27035                                  
 27036                                  	; 09/09/2018
 27037                                  
 27038                                  	; MSDOS 3.3
 27039                                  	;push	bx
 27040                                  	;mov	bx,di
 27041                                  	;call	IsEOF
 27042                                  	;pop	bx	
 27043                                  	;jae	short RET9
 27044                                  
 27045                                  	; 20/05/2019 - Retro DOS v4.0
 27046                                  
 27047                                  	; MSDOS 6.0
 27048 00004D7C 87DF                    	xchg	bx,di
 27049 00004D7E E8BA08                  	call	IsEOF
 27050 00004D81 87DF                    	xchg	bx,di
 27051 00004D83 7305                    	jae	short RET9
 27052                                  
 27053 00004D85 87DF                            XCHG    BX,DI
 27054 00004D87 42                              INC     DX
 27055                                  
 27056 00004D88 E2ED                    	LOOP	SKPCLP			; RMFS
 27057                                  RET9:	
 27058 00004D8A F8                      	CLC
 27059 00004D8B C3                              retn
 27060                                  NOCLUS:
 27061 00004D8C 07                              POP	ES
 27062 00004D8D 41                              INC	CX
 27063 00004D8E 4A                              DEC	DX
 27064 00004D8F F8                              CLC
 27065                                  
 27066                                  fndclus_retn:
 27067 00004D90 C3                              retn
 27068                                  
 27069                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27070                                  ;--------------------------------------------------------------------------
 27071                                  ;
 27072                                  ; Procedure Name : BUFSEC
 27073                                  ;
 27074                                  ; Inputs:
 27075                                  ;       AH = priority of buffer
 27076                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27077                                  ;       ES:BP = Base of drive parameters
 27078                                  ;       [CLUSNUM] = Physical cluster number
 27079                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27080                                  ;       [BYTCNT1] = Size of transfer
 27081                                  ; Function:
 27082                                  ;       Insure specified sector is in buffer, flushing buffer before
 27083                                  ;       read if necessary.
 27084                                  ; Outputs:
 27085                                  ;       ES:DI = Pointer to buffer
 27086                                  ;       SI = Pointer to transfer address
 27087                                  ;       CX = Number of bytes
 27088                                  ;       [NEXTADD] updated
 27089                                  ;       [TRANS] set to indicate a transfer will occur
 27090                                  ;       Carry set if error (user FAILed to I 24)
 27091                                  ;--------------------------------------------------------------------------
 27092                                  
 27093                                  BUFSEC:
 27094 00004D91 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27095 00004D95 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27096                                  	;mov	byte [ALLOWED],38h
 27097 00004D99 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27098 00004D9E E85501                          CALL    FIGREC
 27099 00004DA1 E8D00C                  	call	GETBUFFR
 27100 00004DA4 72EA                            jc	short fndclus_retn
 27101                                  
 27102 00004DA6 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27103 00004DAB 8B36[B805]                      MOV     SI,[NEXTADD]
 27104 00004DAF 89F7                            MOV     DI,SI
 27105 00004DB1 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27106 00004DB5 01CF                            ADD     DI,CX
 27107 00004DB7 893E[B805]                      MOV     [NEXTADD],DI
 27108 00004DBB C43E[E205]                      LES     DI,[CURBUF]
 27109                                  	;or	byte [es:di+5],8
 27110 00004DBF 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27111                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27112                                  	;lea	di,[di+20] ; MSDOS 6.0
 27113 00004DC4 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27114 00004DC7 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27115 00004DCB F8                              CLC
 27116 00004DCC C3                              retn
 27117                                  
 27118                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27119                                  
 27120                                  ;---------------------------------------------------------------------------
 27121                                  ;
 27122                                  ; Procedure Name : BUFRD
 27123                                  ;
 27124                                  ; Do a partial sector read via one of the system buffers
 27125                                  ; ES:BP Points to DPB
 27126                                  ; Carry set if error (currently user FAILed to I 24)
 27127                                  ;
 27128                                  ; DS - set to DOSDATA
 27129                                  ;
 27130                                  ;----------------------------------------------------------------------------
 27131                                  
 27132                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27133                                  	; 20/05/2019 - Retro DOS v4.0
 27134                                  BUFRD:
 27135 00004DCD 06                              PUSH	ES
 27136 00004DCE 31C0                            xor	ax, ax			; pre-read sector
 27137 00004DD0 E8BEFF                          CALL    BUFSEC
 27138 00004DD3 7303                            JNC	short BUF_OK
 27139                                  
 27140                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27141 00004DD5 07                              POP	ES
 27142 00004DD6 EB2B                            JMP     SHORT RBUFPLACED
 27143                                  
 27144                                  BUF_OK:
 27145 00004DD8 8CC3                            MOV     BX,ES
 27146 00004DDA 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27147 00004DDE 8EDB                            MOV     DS,BX
 27148 00004DE0 87FE                    	XCHG    DI,SI
 27149 00004DE2 D1E9                            SHR     CX,1
 27150                                  ;M039
 27151                                  	; MSDOS 3.3
 27152                                  	;JNC	short EVENRD
 27153                                  	;MOVSB
 27154                                  ;EVENRD:
 27155                                  	;REP     MOVSW
 27156                                  
 27157                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27158                                  ;       DS:SI-> Source within Buffer.
 27159                                  ;       ES:DI-> Destination within Transfer memory block.
 27160                                  
 27161                                  	; MSDOS 6.0
 27162 00004DE4 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27163                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27164                                  	;rep	movsb                   ;Copy last byte.
 27165                                  	; 16/12/2022
 27166 00004DE6 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27167 00004DE8 A4                      	movsb ; ****
 27168                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27169                                  	;adc	cx,0
 27170                                  	;rep	movsb
 27171                                  ;M039
 27172                                  EVENRD: ; ****
 27173 00004DE9 07                              POP	ES
 27174                                  ;hkn; SS override
 27175 00004DEA 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27176                                  	;;lea	bx,[di+16]
 27177                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27178 00004DEF 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27179 00004DF2 29DE                            SUB     SI,BX                   ; Position in buffer
 27180 00004DF4 E8310C                          call	PLACEBUF
 27181                                  	;cmp	si,[es:bp+2]
 27182 00004DF7 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27183 00004DFB 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27184                                  ;M039
 27185                                  	; MSDOS 3.3
 27186                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27187                                                                          ;  even though it is MRU.
 27188                                          ; MSDOS 6.0
 27189 00004DFD 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27190                                  ;M039					; chucking even though it is MRU.
 27191                                  
 27192                                  RBUFPLACEDC:
 27193 00004E02 F8                              CLC
 27194                                  RBUFPLACED:
 27195 00004E03 16                      	push	ss
 27196 00004E04 1F                      	pop	ds
 27197 00004E05 C3                              retn
 27198                                  
 27199                                  ;----------------------------------------------------------------------------
 27200                                  ;
 27201                                  ; Procedure : BUFWRT
 27202                                  ;
 27203                                  ; Do a partial sector write via one of the system buffers
 27204                                  ; ES:BP Points to DPB
 27205                                  ; Carry set if error (currently user FAILed to I 24)
 27206                                  ;
 27207                                  ; DS - set to DOSDATA
 27208                                  ;
 27209                                  ;----------------------------------------------------------------------------
 27210                                  
 27211                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27212                                  	; 20/05/2019 - Retro DOS v4.0
 27213                                  BUFWRT:
 27214 00004E06 A1[C405]                        MOV     AX,[SECPOS]
 27215                                          ; MSDOS 6.0
 27216 00004E09 83C001                  	ADD	AX,1            	; Set for next sector
 27217 00004E0C A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27218 00004E0F 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27219 00004E14 A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27220 00004E17 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27221 00004E1B B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27222 00004E1D 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27223 00004E1F 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27224 00004E21 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27225                                  
 27226                                  	; MSDOS 3.3
 27227                                  	;INC	AX
 27228                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27229                                  
 27230                                  	; 20/05/2019
 27231                                  	; MSDOS 3.3 & MSDOS 6.0
 27232 00004E24 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27233 00004E28 B001                            MOV     AL,1
 27234 00004E2A 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27235                                  _doread:
 27236 00004E2C 30C0                            XOR     AL,AL
 27237                                  NOREAD:
 27238 00004E2E 06                              PUSH	ES
 27239 00004E2F E85FFF                          CALL    BUFSEC
 27240 00004E32 72A1                    	JC	short BUF_IO_FAIL
 27241 00004E34 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27242 00004E38 D1E9                            SHR     CX,1
 27243                                  ;M039
 27244                                  	; MSDOS 3.3
 27245                                  	;JNC	short EVENWRT ; 09/09/2018
 27246                                  	;MOVSB
 27247                                  ;EVENWRT:
 27248                                  	;REP	MOVSW
 27249                                  
 27250                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27251                                  ;       DS:SI-> Source within Transfer memory block.
 27252                                  ;       ES:DI-> Destination within Buffer.
 27253                                  
 27254                                  	; MSDOS 6.0
 27255 00004E3A F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27256                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27257                                  	;rep	movsb                   ;Copy last byte.
 27258                                  	; 16/12/2022
 27259 00004E3C 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27260 00004E3E A4                      	movsb ; ****
 27261                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27262                                  	;adc	cx,0
 27263                                  	;rep	movsb
 27264                                  ;M039
 27265                                  EVENWRT: ; ****
 27266 00004E3F 07                              POP	ES
 27267                                  
 27268                                  ;hkn; SS override
 27269 00004E40 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27270                                  
 27271                                  	; MSDOS 6.0
 27272 00004E45 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27273                                  					;LB. if already dirty		  ;AN000;
 27274 00004E49 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27275 00004E4B E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27276                                  	
 27277                                  	;or	byte [bx+5],40h
 27278 00004E4E 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27279                                  yesdirty10:
 27280                                  	;;lea	si,[bx+16]
 27281                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27282 00004E52 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27283 00004E55 29F7                            SUB     DI,SI                   ; Position in buffer
 27284                                  ;M039
 27285                                  	; MSDOS 3.3
 27286                                  	;MOV	SI,DI
 27287                                  	;MOV	DI,BX
 27288                                  	;call	PLACEBUF
 27289                                  	;;cmp	si,[es:bp+2]
 27290                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27291                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27292                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27293                                                                          ;  even though it is MRU.
 27294                                  	; MSDOS 6.0
 27295                                  	;cmp	di,[es:bp+2]
 27296 00004E57 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27297 00004E5B 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27298 00004E5D 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27299                                  					; chucking even though it is MRU.
 27300                                  ;M039
 27301                                  
 27302                                  WBUFPLACED:
 27303 00004E62 F8                              CLC
 27304 00004E63 16                      	push	ss
 27305 00004E64 1F                      	pop	ds
 27306 00004E65 C3                              retn
 27307                                  
 27308                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27309                                  ;---------------------------------------------------------------------------
 27310                                  ;
 27311                                  ; Procedure Name : NEXTSEC
 27312                                  ;
 27313                                  ; Compute the next sector to read or write
 27314                                  ; ES:BP Points to DPB
 27315                                  ;
 27316                                  ;---------------------------------------------------------------------------
 27317                                  
 27318                                  NEXTSEC:
 27319 00004E66 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27320 00004E6B 7426                            JZ	short CLRET
 27321                                  
 27322 00004E6D A0[7305]                        MOV     AL,[SECCLUSPOS]
 27323 00004E70 FEC0                            INC     AL
 27324                                  	;cmp	al,[es:bp+4]
 27325 00004E72 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27326 00004E76 7618                            JBE	short SAVPOS
 27327                                  
 27328 00004E78 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27329 00004E7C E8BC07                          call	IsEOF
 27330 00004E7F 7314                            JAE	short NONEXT
 27331                                  
 27332 00004E81 E8CE07                          call	UNPACK
 27333 00004E84 720F                            JC	short NONEXT
 27334                                  clusgot:
 27335 00004E86 893E[BC05]                      MOV     [CLUSNUM],DI
 27336 00004E8A FF06[BA05]                      INC     word [LASTPOS]
 27337 00004E8E B000                            MOV     AL,0
 27338                                  SAVPOS:
 27339 00004E90 A2[7305]                        MOV     [SECCLUSPOS],AL
 27340                                  CLRET:
 27341 00004E93 F8                              CLC
 27342 00004E94 C3                              retn
 27343                                  NONEXT:
 27344 00004E95 F9                              STC
 27345 00004E96 C3                              retn
 27346                                  
 27347                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27348                                  ;----------------------------------------------------------------------------
 27349                                  ;
 27350                                  ; Procedure Name : OPTIMIZE
 27351                                  ;
 27352                                  ; Inputs:
 27353                                  ;       BX = Physical cluster
 27354                                  ;       CX = No. of records
 27355                                  ;       DL = sector within cluster
 27356                                  ;       ES:BP = Base of drive parameters
 27357                                  ;       [NEXTADD] = transfer address
 27358                                  ; Outputs:
 27359                                  ;       AX = No. of records remaining
 27360                                  ;       BX = Transfer address
 27361                                  ;       CX = No. or records to be transferred
 27362                                  ;       DX = Physical sector address            (LOW)
 27363                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27364                                  ;       DI = Next cluster
 27365                                  ;       [CLUSNUM] = Last cluster accessed
 27366                                  ;       [NEXTADD] updated
 27367                                  ;       Carry set if error (currently user FAILed to I 24)
 27368                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27369                                  ;
 27370                                  ;---------------------------------------------------------------------------
 27371                                  
 27372                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27373                                  OPTIMIZE:
 27374 00004E97 52                      	PUSH    DX
 27375 00004E98 53                              PUSH    BX
 27376                                  	;mov	al,[es:bp+4]
 27377 00004E99 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27378 00004E9D FEC0                            INC     AL              ; Number of sectors per cluster
 27379 00004E9F 88C4                            MOV     AH,AL
 27380 00004EA1 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27381 00004EA3 89CA                            MOV     DX,CX
 27382                                  	;MOV	CX,0
 27383                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27384                                  	; 16/12/2022
 27385 00004EA5 31C9                    	xor	cx,cx	; sub cx,cx
 27386                                  OPTCLUS:
 27387                                  ; AL has number of sectors available in current cluster
 27388                                  ; AH has number of sectors available in next cluster
 27389                                  ; BX has current physical cluster
 27390                                  ; CX has number of sequential sectors found so far
 27391                                  ; DX has number of sectors left to transfer
 27392                                  ; ES:BP Points to DPB
 27393                                  ; ES:SI has FAT pointer
 27394                                  
 27395                                  do_norm3:
 27396 00004EA7 E8A807                          call	UNPACK
 27397 00004EAA 7237                            JC	short OP_ERR
 27398                                  clusgot2:
 27399 00004EAC 00C1                    	ADD	CL,AL
 27400 00004EAE 80D500                          ADC     CH,0
 27401 00004EB1 39D1                            CMP     CX,DX
 27402 00004EB3 7333                            JAE	short BLKDON
 27403 00004EB5 88E0                            MOV     AL,AH
 27404 00004EB7 43                              INC     BX
 27405 00004EB8 39DF                            CMP     DI,BX
 27406 00004EBA 74EB                            JZ	short OPTCLUS
 27407 00004EBC 4B                              DEC     BX
 27408                                  FINCLUS:
 27409 00004EBD 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27410 00004EC1 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27411 00004EC3 52                              PUSH    DX
 27412 00004EC4 89C8                            MOV     AX,CX
 27413                                  	;mul	word[ES:BP+2]
 27414 00004EC6 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27415                                  				; Number of sectors times sector size
 27416 00004ECA 8B36[B805]                      MOV     SI,[NEXTADD]
 27417 00004ECE 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27418 00004ED0 A3[B805]                        MOV     [NEXTADD],AX
 27419 00004ED3 58                              POP     AX              ; Number of sectors still needed
 27420 00004ED4 5A                              POP     DX              ; Starting cluster
 27421 00004ED5 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27422 00004ED7 011E[BA05]                      ADD     [LASTPOS],BX
 27423 00004EDB 5B                              POP     BX              ; BL = sector position within cluster
 27424 00004EDC E81700                  	call	FIGREC
 27425 00004EDF 89F3                            MOV     BX,SI
 27426 00004EE1 F8                      	CLC
 27427 00004EE2 C3                              retn
 27428                                  OP_ERR:
 27429 00004EE3 83C404                          ADD     SP,4
 27430 00004EE6 F9                      	STC
 27431 00004EE7 C3                              retn
 27432                                  BLKDON:
 27433 00004EE8 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27434 00004EEA 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27435 00004EEC FECC                            DEC     AH              ; Adjust to mean position within cluster
 27436 00004EEE 8826[7305]                      MOV     [SECCLUSPOS],AH
 27437 00004EF2 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27438 00004EF4 EBC7                            JMP     SHORT FINCLUS
 27439                                  
 27440                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27441                                  ;---------------------------------------------------------------------------
 27442                                  ;
 27443                                  ; Procedure Name : FIGREC
 27444                                  ;
 27445                                  ; Inputs:
 27446                                  ;       DX = Physical cluster number
 27447                                  ;       BL = Sector position within cluster
 27448                                  ;       ES:BP = Base of drive parameters
 27449                                  ; Outputs:
 27450                                  ;       DX = physical sector number           (LOW)
 27451                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27452                                  ; No other registers affected.
 27453                                  ;
 27454                                  ;---------------------------------------------------------------------------
 27455                                  
 27456                                  	; 10/06/2019
 27457                                  	; 20/05/2019 - Retro DOS v4.0
 27458                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27459                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27460                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27461                                  FIGREC:
 27462 00004EF6 51                              PUSH    CX
 27463                                  	;mov	cl,[es:bp+5]
 27464 00004EF7 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27465 00004EFB 4A                              DEC     DX
 27466 00004EFC 4A                              DEC     DX
 27467                                  
 27468                                  	; MSDOS 3.3
 27469                                  	;SHL	DX,CL
 27470                                  
 27471                                  ;hkn; SS override HIGH_SECTOR
 27472                                  	; MSDOS 6.0
 27473 00004EFD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27474 00004F04 08C9                    	OR	CL,CL				;F.C. >32mb
 27475 00004F06 740C                    	JZ	short noshift			;F.C. >32mb
 27476 00004F08 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27477                                  rotleft:					;F.C. >32mb
 27478 00004F0A F8                      	CLC					;F.C. >32mb
 27479 00004F0B D1D2                    	RCL	DX,1				;F.C. >32mb
 27480                                  	; 10/06/2019
 27481 00004F0D 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27482 00004F12 E2F6                    	LOOP	rotleft				;F.C. >32mb
 27483                                  noshift:
 27484                                  	; MSDOS 3.3 & MSDOS 6.0
 27485 00004F14 08DA                            OR      DL,BL
 27486                                  	;add	dx,[es:bp+0Bh]
 27487 00004F16 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27488                                  	; MSDOS 6.0
 27489                                  	; 10/06/2019
 27490 00004F1A 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27491                                  	; MSDOS 3.3 & MSDOS 6.0        
 27492 00004F20 59                      	POP     CX
 27493                                  figrec_retn:
 27494 00004F21 C3                              retn
 27495                                  
 27496                                  ; 20/05/2019 - Retro DOS v4.0
 27497                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27498                                  
 27499                                  ; 30/07/2018 - Retro DOS v3.0
 27500                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27501                                  
 27502                                  ;Break   <ALLOCATE -- Assign disk space>
 27503                                  ;---------------------------------------------------------------------------
 27504                                  ;
 27505                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27506                                  ;
 27507                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27508                                  ;   FAT-chained onto the end of the existing file.
 27509                                  ;
 27510                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27511                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27512                                  ;   numbered clusters, looking for the necessary free blocks.
 27513                                  ;
 27514                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27515                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27516                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27517                                  ;
 27518                                  ;       If we get to the end of the disk without satisfaction:
 27519                                  ;
 27520                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27521                                  ;               return (insufficient_disk_space)
 27522                                  ;           ELSE
 27523                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27524                                  ;
 27525                                  ;   Note that there is no multitasking interlock. There is no race when
 27526                                  ;   examining the entrys in an in-core FAT block since there will be no
 27527                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27528                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27529                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27530                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27531                                  ;   satisfied. We can't allow another activation to think this cluster is
 27532                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27533                                  ;   allocated.
 27534                                  ;
 27535                                  ;   Note that when we run out of space this algorithem will scan from
 27536                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27537                                  ;   redundantly scanning the later part of the disk. This only happens when
 27538                                  ;   we run out of space, so sue me.
 27539                                  ;
 27540                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27541                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27542                                  ;                                                                          ;
 27543                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27544                                  ;   explanation:
 27545                                  ;
 27546                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27547                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27548                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27549                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27550                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27551                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27552                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27553                                  ;   the
 27554                                  ;           LOOP   findfre         ; alloc more if needed
 27555                                  ;   instruction when the first cluster is allocated to the nul file. The
 27556                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27557                                  ;
 27558                                  ;   This method is obviously useless (because it is non-reentrant) for
 27559                                  ;   multitasking, and will have to be changed. Storing the required value on
 27560                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27561                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27562                                  ;   problems with INT 24 well.
 27563                                  ;
 27564                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27565                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27566                                  ;                                                                          ;
 27567                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27568                                  ;               CX = No. of clusters to allocate
 27569                                  ;               ES:BP = Base of drive parameters
 27570                                  ;               [THISSFT] = Points to SFT
 27571                                  ;
 27572                                  ;       EXIT    'C' set if insufficient space
 27573                                  ;                 [FAILERR] can be tested to see the reason for failure
 27574                                  ;                 CX = max. no. of clusters that could be added to file
 27575                                  ;               'C' clear if space allocated
 27576                                  ;                 BX = First cluster allocated
 27577                                  ;                 FAT is fully updated
 27578                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27579                                  ;
 27580                                  ;       USES    ALL but SI, BP
 27581                                  
 27582                                  ;callmagic  proc near
 27583                                  ;       push    ds                             ;push segment of routine 
 27584                                  ;       push    Offset MagicPatch              ;push offset for routine
 27585                                  ;       retf                                   ;simulate jmp far
 27586                                  ;                                              ;far return address is on
 27587                                  ;                                              ;stack, so far return from
 27588                                  ;                                              ;call will return this routine
 27589                                  ;callmagic  endp
 27590                                  
 27591                                  ALLOCATE:
 27592                                  	; 10/09/2018
 27593                                  ;BEGIN MAGICDRV MODIFICATIONS
 27594                                  ;
 27595                                  ;7/5/92 scottq
 27596                                  ;
 27597                                  ;This is the disk compression patch location which allows
 27598                                  ;the disk compression software to fail allocations if the
 27599                                  ;FAT would allows allocation, but the free space for compressed
 27600                                  ;data would not.
 27601                                  ;        
 27602                                  ;;;	call    far ptr MAGICPATCH
 27603                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27604                                  ;;; but we do know the segment and offset of the routine
 27605                                  ;;; so simulate a far call to dosdata:magicpatch
 27606                                  ;;; note dosassume above, so DS -> dosdata
 27607                                  
 27608                                  	; MSDOS 6.0
 27609                                          ;clc				;clear carry so we fall through
 27610                                  	;				;if no patch is present
 27611                                  	;push	cs			;push segment for far return
 27612                                          ;call	callmagic		;this is a near call
 27613                                          ;jnc	short Regular_Allocate_Path
 27614                                  	;jmp	Disk_Full_Return
 27615                                  
 27616                                  ;Regular_Allocate_Path:
 27617                                  	; 20/05/2019 - Retro DOS v4.0
 27618                                  ;END MAGICDRV MODIFICATIONS
 27619                                  
 27620                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27621                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27622                                  
 27623 00004F22 53                              PUSH    BX                      ; save (bx)
 27624 00004F23 31DB                            XOR     BX,BX
 27625 00004F25 E82A07                  	call	UNPACK
 27626 00004F28 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27627 00004F2C 5B                              POP     BX
 27628 00004F2D 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27629                                  
 27630 00004F2F 51                              PUSH    CX
 27631 00004F30 53                              PUSH    BX
 27632                                  
 27633 00004F31 89DA                            MOV     DX,BX
 27634                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27635                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27636 00004F33 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27637 00004F37 83FB02                          cmp     bx,2
 27638 00004F3A 7709                            ja	short FINDFRE
 27639                                  
 27640                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27641                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27642                                  
 27643                                  ads1:
 27644                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27645                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27646 00004F3C 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27647 00004F42 BB0100                          mov     bx,1                    ; Counter next instruction so first
 27648                                                                          ;       cluster examined is 2
 27649                                  
 27650                                  ;   Scanning both forwards and backwards for a free cluster
 27651                                  ;
 27652                                  ;       (BX) = forwards scan pointer
 27653                                  ;       (CX) = clusters remaining to be allocated
 27654                                  ;       (DX) = current last cluster in file
 27655                                  ;       (TOS) = last cluster of file
 27656                                  
 27657                                  FINDFRE:
 27658 00004F45 43                              INC     BX
 27659                                  	;cmp	bx,[es:bp+0Dh]
 27660 00004F46 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27661 00004F4A 7757                    	ja	short ads7	; at end of disk
 27662 00004F4C E80307                          call	UNPACK          ; check out this cluster
 27663 00004F4F 722F                            jc	short ads4	; FAT error             [INTERR?]
 27664 00004F51 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27665                                  
 27666                                  ;   Have found a free cluster. Chain it to the file
 27667                                  ;
 27668                                  ;       (BX) = found free cluster #
 27669                                  ;       (DX) = current last cluster in file
 27670                                  
 27671                                  	;;mov	[es:bp+1Ch],bx
 27672                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27673 00004F53 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27674 00004F57 92                              xchg    ax,dx           ; save (dx) in ax
 27675 00004F58 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27676 00004F5B E84807                  	call	PACK            ; set special "temporary" mark
 27677 00004F5E 7220                            jc	short ads4	; FAT error             [INTERR?]
 27678                                  	;;cmp	word [es:bp+1Eh],-1
 27679                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27680 00004F60 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27681 00004F65 7404                            JZ	short NO_ALLOC	; No
 27682                                  	;;dec	word [es:bp+1Eh]
 27683                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27684 00004F67 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27685                                  NO_ALLOC:
 27686 00004F6B 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27687 00004F6C 87DA                            XCHG    BX,DX
 27688 00004F6E 89D0                            MOV     AX,DX
 27689 00004F70 E83307                  	call	PACK            ; link free cluster onto file
 27690                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27691                                                                  ;    cluster 0 with FIRCLUS value.
 27692 00004F73 720B                            jc	short ads4	; FAT error [INTERR?]
 27693 00004F75 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27694 00004F76 89DA                            mov     dx,bx           ; (dx) = current end of file
 27695 00004F78 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27696                                  
 27697                                  ;   We've successfully extended the file. Clean up and exit
 27698                                  ;
 27699                                  ;       (BX) = last cluster in file
 27700                                  
 27701 00004F7A BAFFFF                          MOV     DX,0FFFFH
 27702 00004F7D E82607                  	call	PACK            ; mark last cluster EOF
 27703                                  
 27704                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27705                                  ;   2 whole bytes. Hope its worth it...
 27706                                  ;
 27707                                  ;       'C' set if error
 27708                                  ;       calling (BX) and (CX) pushed on stack
 27709                                  
 27710                                  ads4:   
 27711 00004F80 5B                      	POP     BX
 27712 00004F81 59                              POP     CX              ; Don't need this stuff since we're successful
 27713 00004F82 729D                            jc	short figrec_retn
 27714 00004F84 E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27715                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27716 00004F87 7298                            jc	short figrec_retn
 27717 00004F89 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27718 00004F8C 7293                            jc	short figrec_retn
 27719 00004F8E 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27720 00004F90 09FF                            OR      DI,DI           ; clear 'C'
 27721 00004F92 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27722                                  
 27723                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27724                                  ;   info
 27725                                  dofastk:
 27726                                  	; 20/05/2019
 27727                                  	; MSDOS 6.0
 27728                                  	;push	dx ; * MSDOS 6.0
 27729                                  	;;mov	dl,[es:bp+0]
 27730                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27731                                  	;mov	dl,[es:bp]
 27732                                  
 27733                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27734                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27735                                  	
 27736                                  	; 16/12/2022
 27737                                  	;push	dx ; *
 27738                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27739                                  	; 15/12/2022
 27740                                  	;mov	dl,[es:bp]
 27741                                  	
 27742                                  	; MSDOS 3.3 & MSDOS 6.0
 27743 00004F94 06                      	PUSH	ES
 27744 00004F95 C43E[9E05]              	LES     DI,[THISSFT]
 27745                                  	;mov	[es:di+0Bh],bx
 27746 00004F99 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27747                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27748                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27749 00004F9D 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27750 00004FA1 07                      	POP	ES
 27751                                  	;retn
 27752                                  
 27753                                  	;pop	dx ; * MSDOS 6.0
 27754                                  
 27755                                  	; 16/12/2022
 27756                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27757                                  	;pop	dx ; *
 27758                                  
 27759 00004FA2 C3                      	retn	
 27760                                  
 27761                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27762                                  ;   of the disk...
 27763                                  
 27764                                  ads7:   
 27765 00004FA3 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27766 00004FA8 7592                    	jnz	short ads1	; start scan from front of disk
 27767                                  
 27768                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27769                                  ;   the space back to the free list and tell the caller how much he could have
 27770                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27771                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27772                                  ;
 27773                                  ;       (CX) = clusters remaining to be allocated
 27774                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27775                                  ;       (TOS+1) = # of clusters wanted to allocate
 27776                                  
 27777 00004FAA 5B                              POP     BX              ; (BX) = last cluster of file
 27778 00004FAB BAFFFF                          MOV     DX,0FFFFH
 27779 00004FAE E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27780 00004FB1 58                              POP     AX              ; No. of clusters requested
 27781                                                                  ; Don't "retc". We are setting Carry anyway,
 27782                                                                  ;   Alloc failed, so proceed with return CX
 27783                                                                  ;   setup.
 27784 00004FB2 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27785 00004FB4 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27786                                                                  ;   Alloc failed.
 27787                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27788                                          ; MSDOS 6.0
 27789 00004FB7 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27790 00004FBC F9                              STC
 27791 00004FBD C3                              retn
 27792                                  
 27793                                  ;-----------------------------------------------------------------------
 27794                                  ;
 27795                                  ; Procedure Name : RESTFATBYT
 27796                                  ;
 27797                                  ; SEE ALLOCATE CAVEAT
 27798                                  ;       Carry set if error (currently user FAILed to I 24)
 27799                                  ;-----------------------------------------------------------------------
 27800                                  
 27801                                  RESTFATBYT:
 27802 00004FBE 53                              PUSH    BX
 27803 00004FBF 52                              PUSH    DX
 27804 00004FC0 57                              PUSH    DI
 27805 00004FC1 31DB                            XOR     BX,BX
 27806 00004FC3 8B16[9605]                      MOV     DX,[FATBYT]
 27807 00004FC7 E8DC06                  	call	PACK
 27808 00004FCA 5F                              POP     DI
 27809 00004FCB 5A                              POP     DX
 27810 00004FCC 5B                              POP     BX
 27811                                  ; 16/12/2022
 27812                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27813                                  ;RELEASE_flush:
 27814 00004FCD C3                      	retn
 27815                                  
 27816                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27817                                  ;---------------------------------------------------------------------------
 27818                                  ;
 27819                                  ; Procedure Name : RELEASE
 27820                                  ;
 27821                                  ; Inputs:
 27822                                  ;       BX = Cluster in file
 27823                                  ;       ES:BP = Base of drive parameters
 27824                                  ; Function:
 27825                                  ;       Frees cluster chain starting with [BX]
 27826                                  ;       Carry set if error (currently user FAILed to I 24)
 27827                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27828                                  ;
 27829                                  ;-----------------------------------------------------------------------------
 27830                                  
 27831                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27832                                  	; 20/05/2019 - Retro DOS v4.0
 27833                                  RELEASE:
 27834 00004FCE 31D2                            XOR     DX,DX
 27835                                  
 27836                                  	;entry	RELBLKS
 27837                                  RELBLKS:
 27838                                  
 27839                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27840                                  ;   and free the rest in the chain.
 27841                                  
 27842 00004FD0 E87F06                  	call	UNPACK
 27843 00004FD3 7224                    	jc	short RELEASE_flush
 27844 00004FD5 7422                    	jz	short RELEASE_flush
 27845 00004FD7 89F8                            MOV     AX,DI
 27846 00004FD9 52                              PUSH    DX
 27847 00004FDA E8C906                  	call	PACK
 27848 00004FDD 5A                              POP     DX
 27849 00004FDE 7219                    	jc	short RELEASE_flush
 27850 00004FE0 09D2                            OR      DX,DX
 27851 00004FE2 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27852                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27853                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27854 00004FE4 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27855 00004FE9 7404                            JZ	short NO_DEALLOC	; No
 27856 00004FEB 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27857                                  NO_DEALLOC:
 27858 00004FEF 89C3                            MOV     BX,AX
 27859 00004FF1 48                              dec     ax              ; check for "1"
 27860 00004FF2 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27861 00004FF4 E84406                  	call	IsEOF
 27862 00004FF7 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27863                                  
 27864                                  	; 16/12/2022
 27865                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27866                                  ;%if 0
 27867                                  RELEASE_flush:
 27868                                  	; MSDOS 6.0
 27869 00004FF9 268A4600                	mov	al,[es:bp]
 27870                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27871 00004FFD 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27872 00004FFE 51                      	push	cx		;  them to be preserved.
 27873 00004FFF 06                      	push	es
 27874 00005000 55                      	push	bp
 27875 00005001 E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27876 00005004 5D                      	pop	bp
 27877 00005005 07                      	pop	es
 27878 00005006 59                      	pop	cx
 27879 00005007 5E                      	pop	si
 27880                                  ;%endif
 27881                                  RET12:
 27882 00005008 C3                      	retn
 27883                                  
 27884                                  ;Break	<GETEOF -- Find the end of a file>
 27885                                  ;------------------------------------------------------------------------
 27886                                  ;
 27887                                  ; Procedure Name : GETEOF
 27888                                  ;
 27889                                  ; Inputs:
 27890                                  ;       ES:BP Points to DPB
 27891                                  ;       BX = Cluster in a file
 27892                                  ;       DS = CS
 27893                                  ; Outputs:
 27894                                  ;       BX = Last cluster in the file
 27895                                  ;       Carry set if error (currently user FAILed to I 24)
 27896                                  ; DI destroyed. No other registers affected.
 27897                                  ;
 27898                                  ;--------------------------------------------------------------------------
 27899                                  
 27900                                  GETEOF:
 27901 00005009 E84606                  	call	UNPACK
 27902 0000500C 72FA                            jc	short RET12
 27903 0000500E 53                              PUSH    BX
 27904 0000500F 89FB                            MOV     BX,DI
 27905 00005011 E82706                  	call	IsEOF
 27906 00005014 5B                              POP     BX
 27907 00005015 73F1                            JAE     short RET12
 27908 00005017 89FB                            MOV     BX,DI
 27909 00005019 EBEE                            JMP     short GETEOF
 27910                                  
 27911                                  ;============================================================================
 27912                                  ; FCB.ASM, MSDOS 6.0, 1991
 27913                                  ;============================================================================
 27914                                  ; 30/07/2018 - Retro DOS v3.0
 27915                                  ; 20/05/2019 - Retro DOS v4.0
 27916                                  
 27917                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27918                                  ;	NAME	FCB
 27919                                  
 27920                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27921                                  ;		  filename characters
 27922                                  ;
 27923                                  ;	MakeFcb
 27924                                  ;	NameTrans
 27925                                  ;	PATHCHRCMP
 27926                                  ;	GetLet
 27927                                  ;	UCase
 27928                                  ;	GetLet3
 27929                                  ;	GetCharType
 27930                                  ;	TESTKANJ
 27931                                  ;	NORMSCAN
 27932                                  ;	DELIM
 27933                                  ;
 27934                                  ;	Revision history:
 27935                                  ;
 27936                                  ;		A000  version 4.00  Jan. 1988
 27937                                  ;	
 27938                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27939                                  
 27940                                  TableLook	EQU	-1
 27941                                  
 27942                                  SCANSEPARATOR	EQU	1
 27943                                  DRVBIT		EQU	2
 27944                                  NAMBIT		EQU	4
 27945                                  EXTBIT		EQU	8
 27946                                  
 27947                                  ;----------------------------------------------------------------------------
 27948                                  ;
 27949                                  ; Procedure : MakeFcb
 27950                                  ;
 27951                                  ;----------------------------------------------------------------------------
 27952                                  
 27953                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27954                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 27955                                  MAKEFCB:
 27956                                  ;hkn; SS override
 27957 0000501B 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 27958 00005021 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 27959                                  	;test	al,2
 27960 00005023 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 27961 00005025 7504                    	JNZ	short DEFDRV
 27962 00005027 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 27963                                  DEFDRV:
 27964 0000502B 47                      	INC	DI
 27965 0000502C B90800                  	MOV	CX,8
 27966                                  	;test	al,4
 27967 0000502F A804                    	test	AL,NAMBIT	; Use current name fields as default?
 27968 00005031 93                      	XCHG	AX,BX		; Save bits in BX
 27969 00005032 B020                    	MOV	AL," "
 27970 00005034 7404                    	JZ	short FILLB	; If not, go fill with blanks
 27971 00005036 01CF                    	ADD	DI,CX
 27972 00005038 31C9                    	XOR	CX,CX		; Don't fill any
 27973                                  FILLB:
 27974 0000503A F3AA                    	REP	STOSB
 27975 0000503C B103                    	MOV	CL,3
 27976 0000503E F6C308                  	test	BL,EXTBIT	; Use current extension as default
 27977 00005041 7404                    	JZ	short FILLB2
 27978 00005043 01CF                    	ADD	DI,CX
 27979 00005045 31C9                    	XOR	CX,CX
 27980                                  FILLB2:
 27981 00005047 F3AA                    	REP	STOSB
 27982 00005049 91                      	XCHG	AX,CX		; Put zero in AX
 27983 0000504A AB                      	STOSW
 27984 0000504B AB                      	STOSW			; Initialize two words after to zero
 27985 0000504C 83EF10                  	SUB	DI,16		; Point back at start
 27986                                  	;test	bl,1
 27987 0000504F F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 27988 00005052 7409                    	JZ	short SKPSPC
 27989 00005054 E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 27990 00005057 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 27991 0000505A 7504                    	JNZ	short NOSCAN
 27992 0000505C 46                      	INC	SI		; Skip over the delimiter
 27993                                  SKPSPC:
 27994 0000505D E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 27995                                  NOSCAN:
 27996 00005060 E8F500                  	CALL	GETLET
 27997 00005063 761E                    	JBE	short NODRV	; Quit if termination character
 27998 00005065 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 27999 00005068 7519                    	JNZ	short NODRV
 28000 0000506A 46                      	INC	SI		; Skip over colon
 28001 0000506B 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28002 0000506D 760F                    	JBE	short BADDRV	; Drive letter out of range
 28003                                  
 28004 0000506F 50                      	PUSH	AX
 28005 00005070 E8311B                  	call	GetVisDrv
 28006 00005073 58                      	POP	AX
 28007 00005074 730A                    	JNC	short HAVDRV
 28008                                  
 28009                                  	; 20/05/2019 - Retro DOS v4.0
 28010                                  	; MSDOS 6.0
 28011                                  ;hkn; SS override
 28012 00005076 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28013                                  					; if not FAT drive ;AN000;
 28014 0000507C 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28015                                  BADDRV:
 28016 0000507E B2FF                    	MOV	DL,-1
 28017                                  HAVDRV:
 28018 00005080 AA                      	STOSB			; Put drive specifier in first byte
 28019 00005081 46                      	INC	SI
 28020 00005082 4F                      	DEC	DI		; Counteract next two instructions
 28021                                  NODRV:
 28022 00005083 4E                      	DEC	SI		; Back up
 28023 00005084 47                      	INC	DI		; Skip drive byte
 28024                                  
 28025                                  	;entry	NORMSCAN
 28026                                  NORMSCAN:
 28027 00005085 B90800                  	MOV	CX,8
 28028 00005088 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28029 0000508B 803C2E                  	CMP	BYTE [SI],"."
 28030 0000508E 7515                    	JNZ	short NODOT
 28031 00005090 46                      	INC	SI		; Skip over dot if present
 28032                                  
 28033                                  	; MSDOS 6.0
 28034                                  ;hkn; SS override
 28035                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28036                                  	; 10/06/2019
 28037 00005091 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28038 00005097 7406                    	JZ	short VOLOK				;AN000;
 28039 00005099 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28040 0000509A B90200                  	MOV	CX,2					;AN000;
 28041 0000509D EB03                    	JMP	SHORT contvol				;AN000;
 28042                                  VOLOK:
 28043 0000509F B90300                  	MOV	CX,3		; Get 3-letter extension
 28044                                  contvol:
 28045 000050A2 E81300                  	CALL	MUSTGETWORD
 28046                                  NODOT:
 28047 000050A5 88D0                    	MOV	AL,DL
 28048                                  
 28049                                  	; MSDOS 6.0
 28050                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28051                                  	; 18/12/2022
 28052 000050A7 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28053                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28054                                  
 28055 000050AD C3                      	retn
 28056                                  
 28057                                  NONAM:
 28058 000050AE 01CF                    	ADD	DI,CX
 28059 000050B0 4E                      	DEC	SI
 28060 000050B1 C3                      	retn
 28061                                  
 28062                                  GETWORD:
 28063 000050B2 E8A300                  	CALL	GETLET		
 28064 000050B5 76F7                    	JBE	short NONAM	; Exit if invalid character
 28065 000050B7 4E                      	DEC	SI
 28066                                  
 28067                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28068                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28069                                  
 28070                                  MUSTGETWORD:
 28071 000050B8 E89D00                  	CALL	GETLET
 28072                                  
 28073                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28074                                  
 28075                                  ;IF NOT TABLELOOK
 28076                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28077                                  ;ENDIF
 28078 000050BB 750C                    	JNZ	short MustCheckCX
 28079                                  
 28080                                  ;hkn; SS override
 28081 000050BD 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28082 000050C3 7419                    	JZ	short FILLNAM
 28083 000050C5 3C20                    	CMP	AL," "
 28084 000050C7 7515                    	JNZ	short FILLNAM
 28085                                  
 28086                                  MustCheckCX:
 28087 000050C9 E3ED                    	JCXZ	MUSTGETWORD
 28088 000050CB 49                      	DEC	CX
 28089 000050CC 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28090 000050CE 7504                    	JNZ	short NOSTAR
 28091 000050D0 B03F                    	MOV	AL,"?"
 28092 000050D2 F3AA                    	REP	STOSB
 28093                                  NOSTAR:
 28094 000050D4 AA                      	STOSB
 28095 000050D5 3C3F                    	CMP	AL,"?"
 28096 000050D7 75DF                    	JNZ	short MUSTGETWORD
 28097 000050D9 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28098 000050DC EBDA                    	JMP	short MUSTGETWORD
 28099                                  FILLNAM:
 28100 000050DE B020                    	MOV	AL," "
 28101 000050E0 F3AA                    	REP	STOSB
 28102 000050E2 4E                      	DEC	SI
 28103 000050E3 C3                      	retn
 28104                                  
 28105                                  SCANB:
 28106 000050E4 AC                      	LODSB
 28107 000050E5 E8A100                  	CALL	SPCHK
 28108 000050E8 74FA                    	JZ	short SCANB
 28109 000050EA 4E                      	DEC	SI
 28110                                  scanb_retn:
 28111 000050EB C3                      	retn
 28112                                  
 28113                                  ;----------------------------------------------------------------------------
 28114                                  ;
 28115                                  ; Procedure Name : NameTrans
 28116                                  ;
 28117                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28118                                  ; allow spaces in pathnames
 28119                                  ;
 28120                                  ;   Inputs:	DS:SI points to start of path element
 28121                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28122                                  ;		ES = DOSGroup
 28123                                  ;		DS:SI advanced after name
 28124                                  ;   Registers modified: DI,AX,DX,CX
 28125                                  ;
 28126                                  ;----------------------------------------------------------------------------
 28127                                  
 28128                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28129                                  	; 20/05/2019 - Retro DOS v4.0
 28130                                  NameTrans:
 28131                                  ;hkn; SS override
 28132 000050EC 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28133 000050F2 16                      	push	ss
 28134 000050F3 07                      	pop	es
 28135                                  
 28136                                  ;hkn; NAME1 is in DOSDATA
 28137 000050F4 BF[4B05]                	MOV	DI,NAME1
 28138 000050F7 57                      	PUSH	DI
 28139 000050F8 B82020                  	MOV	AX,'  '
 28140 000050FB B90500                  	MOV	CX,5
 28141 000050FE AA                      	STOSB
 28142 000050FF F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28143 00005101 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28144 00005103 88C2                    	MOV	DL,AL
 28145 00005105 AA                      	STOSB
 28146 00005106 5F                      	POP	DI
 28147                                  
 28148 00005107 E87BFF                  	CALL	NORMSCAN
 28149                                  
 28150                                  ;hkn; SS override for NAME1
 28151 0000510A 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28152 00005110 75D9                    	jnz	short scanb_retn
 28153 00005112 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28154 00005118 C3                      	retn
 28155                                  
 28156                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28157                                  ;============================================================================
 28158                                  
 28159                                  ; 20/05/2019 - Retro DOS v4.0
 28160                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28161                                  
 28162                                  ;If TableLook
 28163                                  
 28164                                  ;hkn; Table	SEGMENT
 28165                                  ;	PUBLIC	CharType
 28166                                  ;----------------------------------------------------------------------------
 28167                                  
 28168                                  ; Character type table for file name scanning
 28169                                  ; Table provides a mapping of characters to validity bits.
 28170                                  ; Four bits are provided for each character. Values 7Dh and above
 28171                                  ; have all bits set, so that part of the table is chopped off, and
 28172                                  ; the translation routine is responsible for screening these values.
 28173                                  ; The bit values are defined in DOSSYM.INC
 28174                                  
 28175                                  ;	      ; ^A and NUL
 28176                                  ;CharType:
 28177                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28178                                  ;	      ; ^C and ^B
 28179                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28180                                  ;	      ; ^E and ^D
 28181                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28182                                  ;	      ; ^G and ^F
 28183                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28184                                  ;	      ; TAB and BS
 28185                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28186                                  ;	      ; ^K and ^J
 28187                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28188                                  ;	      ; ^M and ^L
 28189                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28190                                  ;	      ; ^O and ^N
 28191                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28192                                  ;	      ; ^Q and ^P
 28193                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28194                                  ;	      ; ^S and ^R
 28195                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28196                                  ;	      ; ^U and ^T
 28197                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28198                                  ;	      ; ^W and ^V
 28199                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28200                                  ;	      ; ^Y and ^X
 28201                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28202                                  ;	      ; ESC and ^Z
 28203                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28204                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28206                                  ;	      ; ^_ and ^^
 28207                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28208                                  ;	      ; ! and SPACE
 28209                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28210                                  ;	      ; # and "
 28211                                  ;	 db   LOW (NOT FFCB+FCHK)
 28212                                  ;	      ; $ - )
 28213                                  ;	 db   3 dup (0FFh)
 28214                                  ;	      ; + and *
 28215                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28216                                  ;	      ; - and '
 28217                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28218                                  ;	      ; / and .
 28219                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28220                                  ;	      ; 0 - 9
 28221                                  ;	 db   5 dup (0FFh)
 28222                                  ;	      ; ; and :
 28223                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28224                                  ;	      ; = and <
 28225                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28226                                  ;	      ; ? and >
 28227                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28228                                  ;	      ; A - Z
 28229                                  ;	 db   13 dup (0FFh)
 28230                                  ;	      ; \ and [
 28231                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28232                                  ;	      ; ^ and ]
 28233                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28234                                  ;	      ; _ - {
 28235                                  ;	 db   15 dup (0FFh)
 28236                                  ;	      ; } and |
 28237                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28238                                  
 28239                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28240                                  ;					; character in the table
 28241                                  
 28242                                  ;FCHK	equ 1		; normal name char, no chks needed
 28243                                  ;FDELIM	equ 2		; is a delimiter
 28244                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28245                                  ;FFCB	equ 8		; is valid in an FCB
 28246                                  
 28247                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28248                                  ;----------------------------------------------------------------------------
 28249                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28250                                  
 28251                                  CharType: ; 63 bytes
 28252 00005119 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28253 00005121 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28254 00005129 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28255 00005131 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28256 00005139 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28257 00005141 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28258 00005149 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28259 00005151 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28260                                  
 28261                                  CharType_last equ ($ - CharType) * 2
 28262                                  
 28263                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28264                                  ;----------------------------------------------------------------------------
 28265                                  ;CharType:
 28266                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28267                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28268                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28269                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28270                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28271                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28272                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28273                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28274                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28275                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28276                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28277                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28278                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28279                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28280                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28281                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28282                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28283                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28284                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28285                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28286                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28287                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28288                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28289                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28290                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28291                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28292                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28293                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28294                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28295                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28296                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28297                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28298                                  
 28299                                  ;hkn; Table	ENDS
 28300                                  
 28301                                  ;ENDIF
 28302                                  
 28303                                  ; 20/05/2019 - Retro DOS v4.0
 28304                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28305                                  
 28306                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28307                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28308                                  
 28309                                  ;----------------------------------------------------------------------------
 28310                                  ;
 28311                                  ; Procedure Names : GetLet, UCase, GetLet3
 28312                                  ;
 28313                                  ; These routines take a character, convert it to upper case, and check
 28314                                  ; for delimiters.  Three different entry points:
 28315                                  ;	GetLet -  DS:[SI] = character to convert
 28316                                  ;	UCase  -  AL = character to convert
 28317                                  ;	GetLet3 - AL = character
 28318                                  ;		  [BX] = translation table to use
 28319                                  ;
 28320                                  ;	Exit (in all cases) : AL = upper case character
 28321                                  ;			      CY set if char is control char other than TAB
 28322                                  ;			      ZF set if char is a delimiter
 28323                                  ;	Uses : AX, flags
 28324                                  ;
 28325                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28326                                  ; inline version.  Return with carry set is only possible in the inline
 28327                                  ; version. The table lookup version is the one in use.
 28328                                  ;
 28329                                  ;----------------------------------------------------------------------------
 28330                                  
 28331                                  ; This entry point has character at [SI]
 28332                                  
 28333                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28334                                  GETLET:	
 28335 00005158 AC                      	LODSB
 28336                                  
 28337                                  ; This entry point has character in AL
 28338                                  
 28339                                  	;entry	UCase
 28340                                  UCase:	
 28341                                  	; 09/08/2018
 28342                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28343                                  _UCase:
 28344 00005159 53                      	PUSH	BX
 28345 0000515A BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28346                                  
 28347                                  ; Convert the character in AL to upper case
 28348                                  
 28349                                  gl_0:
 28350 0000515D 3C61                    	CMP	AL,"a"
 28351 0000515F 7214                    	JB	short gl_2	; Already upper case, go check type
 28352 00005161 3C7A                    	CMP	AL,"z"
 28353 00005163 7702                    	JA	short gl_1
 28354 00005165 2C20                    	SUB	AL,20H		; Convert to upper case
 28355                                  
 28356                                  ; Map European character to upper case
 28357                                  
 28358                                  gl_1:
 28359 00005167 3C80                    	CMP	AL,80H
 28360 00005169 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28361 0000516B 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28362                                  
 28363                                  	; M048 - Start 
 28364                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28365                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28366                                  	; preserve it.
 28367                                  
 28368                                  	; 09/08/2018 - Retro DOS v3.0
 28369                                  	; MSDOS 3.3
 28370                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28371                                  	;CS	XLAT
 28372                                  
 28373                                  	; 20/05/2019 - Retro DOS v4.0
 28374                                  
 28375                                  	; MSDOS 6.0
 28376 0000516D 1E                      	push	ds
 28377                                  	;getdseg <ds>
 28378 0000516E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28379 00005173 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28380 00005174 1F                      	pop	ds
 28381                                  
 28382                                  	; M048 - End
 28383                                  
 28384                                  ; Now check the type
 28385                                  
 28386                                  ;If TableLook
 28387                                  gl_2:
 28388                                  	; 20/05/2019 - Retro DOS v4.0
 28389 00005175 50                      	PUSH	AX
 28390                                  
 28391                                  	; MSDOS 3.3
 28392                                  	;mov	bx,CharType
 28393                                  	;; 09/08/2018
 28394                                  	;;xlat	byte [cs:bx]
 28395                                  	;cs	xlat	
 28396                                  	
 28397                                  	; MSDOS 6.0
 28398 00005176 E81800                  	CALL	GetCharType	; returns type flags in AL
 28399                                  	
 28400                                  	;test	al,1	
 28401 00005179 A801                    	TEST	AL,FCHK 	; test for normal character
 28402 0000517B 58                      	POP	AX
 28403 0000517C 5B                      	POP	BX
 28404 0000517D C3                      	RETN
 28405                                  
 28406                                  ; This entry has character in AL and lookup table in BX
 28407                                  
 28408                                  	; MSDOS 6.0
 28409                                  ;	;entry GetLet3
 28410                                  GETLET3: ; 10/08/2018
 28411 0000517E 53                      	PUSH	BX
 28412 0000517F EBDC                    	JMP	short gl_0
 28413                                  ;ELSE
 28414                                  ;
 28415                                  ;gl_2:
 28416                                  ;	POP	BX
 28417                                  ;	CMP	AL,"."
 28418                                  ;	retz
 28419                                  ;	CMP	AL,'"'
 28420                                  ;	retz
 28421                                  ;	CALL	PATHCHRCMP
 28422                                  ;	retz
 28423                                  ;	CMP	AL,"["
 28424                                  ;	retz
 28425                                  ;	CMP	AL,"]"
 28426                                  ;	retz
 28427                                  ;ENDIF
 28428                                  
 28429                                  ;---------------------------------------------------------------------
 28430                                  ;
 28431                                  ; DELIM - check if character is a delimiter
 28432                                  ;	Entry : AX = character to check
 28433                                  ;	Exit  : ZF set if character is not a delimiter
 28434                                  ;	Uses  : Flags
 28435                                  ;
 28436                                  ;--------------------------------------------------------------------
 28437                                  
 28438                                  	;entry	DELIM
 28439                                  DELIM:
 28440                                  ;IF TableLook
 28441                                  	; 20/05/2019 - Retro DOS v4.0
 28442 00005181 50                      	PUSH	AX
 28443                                  
 28444                                  	; MSDOS 3.3
 28445                                  	;push	bx
 28446                                  	;mov	bx,CharType
 28447                                  	;;09/08/2018
 28448                                  	;;xlat	byte [cs:bx]
 28449                                  	;cs	xlat
 28450                                  	;pop	bx
 28451                                  
 28452                                  	; MSDOS 6.0
 28453 00005182 E80C00                  	CALL	GetCharType
 28454                                  	
 28455                                  	;test	al,2
 28456 00005185 A802                    	TEST	AL,FDELIM
 28457 00005187 58                      	POP	AX
 28458 00005188 C3                      	RETN
 28459                                  ;ELSE
 28460                                  ;	CMP	AL,":"
 28461                                  ;	retz
 28462                                  ;
 28463                                  ;	CMP	AL,"<"
 28464                                  ;	retz
 28465                                  ;	CMP	AL,"|"
 28466                                  ;	retz
 28467                                  ;	CMP	AL,">"
 28468                                  ;	retz
 28469                                  ;
 28470                                  ;	CMP	AL,"+"
 28471                                  ;	retz
 28472                                  ;	CMP	AL,"="
 28473                                  ;	retz
 28474                                  ;	CMP	AL,";"
 28475                                  ;	retz
 28476                                  ;	CMP	AL,","
 28477                                  ;	retz
 28478                                  ;ENDIF
 28479                                  
 28480                                  ;-------------------------------------------------------------------------
 28481                                  ;
 28482                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28483                                  ;	Entry : AL = character to check
 28484                                  ;	Exit  : ZF set if character is a space
 28485                                  ;	Uses  : flags
 28486                                  ;
 28487                                  ;-------------------------------------------------------------------------
 28488                                  
 28489                                  	;entry SPCHK
 28490                                  SPCHK:
 28491                                  ;IF TableLook
 28492                                  	; 20/05/2019 - Retro DOS v4.0
 28493 00005189 50                      	PUSH	AX
 28494                                  
 28495                                  	; MSDOS 3.3
 28496                                  	;push	bx
 28497                                  	;mov	bx,CharType
 28498                                  	;; 09/08/2018
 28499                                  	;;xlat	byte [cs:bx]
 28500                                  	;cs	xlat
 28501                                  	;pop	bx
 28502                                  
 28503                                  	; MSDOS 6.0
 28504 0000518A E80400                  	CALL	GetCharType
 28505                                  	
 28506                                  	;test	al,4
 28507 0000518D A804                    	TEST	AL,FSPCHK
 28508 0000518F 58                      	POP	AX
 28509 00005190 C3                      	RETN
 28510                                  ;ELSE
 28511                                  ;	CMP	AL,9		; Filter out tabs too
 28512                                  ;	retz
 28513                                  ;; WARNING! " " MUST be the last compare
 28514                                  ;	CMP	AL," "
 28515                                  ;	return
 28516                                  ;ENDIF
 28517                                  
 28518                                  ;-------------------------------------------------------------------------
 28519                                  ;
 28520                                  ;  GetCharType - return flag bits indicating character type
 28521                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28522                                  ;	defined above at label CharType.
 28523                                  ;
 28524                                  ;	Entry : AL = character to return type flags for
 28525                                  ;	Exit  : AL = type flags
 28526                                  ;	Uses  : AL, flags
 28527                                  ;
 28528                                  ;-------------------------------------------------------------------------
 28529                                  
 28530                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28531                                  
 28532                                  	; 20/05/2019 - Retro DOS v4.0
 28533                                  	; MSDOS 6.0
 28534                                  GetCharType:
 28535                                  	;cmp	al,7Eh
 28536 00005191 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28537 00005193 7316                    	jae	short gct_90		; return standard value
 28538                                  
 28539 00005195 53                      	push	bx
 28540 00005196 BB[1951]                	mov	bx,CharType		; load lookup table
 28541 00005199 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28542                                  	;xlat	cs:[bx] 		; get flags
 28543 0000519B 2ED7                    	cs	xlat	
 28544 0000519D 5B                      	pop	bx
 28545                                  
 28546                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28547                                  ; we have to shift the flags down to the low nibble
 28548                                  
 28549 0000519E 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28550                                  
 28551 000051A0 D0E8                    	shr	al,1			; we want high nibble, shift it down
 28552 000051A2 D0E8                    	shr	al,1
 28553 000051A4 D0E8                    	shr	al,1
 28554 000051A6 D0E8                    	shr	al,1
 28555                                  gct_80:
 28556 000051A8 240F                    	and	al,0Fh			; clear the unused nibble
 28557 000051AA C3                      	retn
 28558                                  gct_90:
 28559 000051AB B00F                    	mov	al,0Fh			; set all flags
 28560 000051AD C3                      	retn
 28561                                  
 28562                                  ;----------------------------------------------------------------------------
 28563                                  ;
 28564                                  ; Procedure : PATHCHRCMP
 28565                                  ;
 28566                                  ;----------------------------------------------------------------------------
 28567                                  
 28568                                  PATHCHRCMP:
 28569 000051AE 3C2F                    	CMP	AL,'/'
 28570 000051B0 7606                    	JBE	short PathRet
 28571 000051B2 3C5C                    	CMP	AL,'\'
 28572 000051B4 C3                      	retn
 28573                                  GotFor:
 28574 000051B5 B05C                    	MOV	AL,'\'
 28575 000051B7 C3                      	retn
 28576                                  PathRet:
 28577 000051B8 74FB                    	JZ	short GotFor
 28578 000051BA C3                      	retn
 28579                                  
 28580                                  ;============================================================================
 28581                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28582                                  ;============================================================================
 28583                                  ; 30/07/2018 - Retro DOS v3.0
 28584                                  ; 29/04/2019 - Retro DOS v4.0
 28585                                  
 28586                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28587                                  
 28588                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28589                                  
 28590                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28591                                  ;	NAME	IBMCTRLC
 28592                                  
 28593                                  ;**	Low level routines for detecting special characters on CON input,
 28594                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28595                                  ;	process termination code, and the INT 0 divide overflow handler.
 28596                                  ;
 28597                                  ;	FATAL
 28598                                  ;	FATAL1
 28599                                  ;	reset_environment
 28600                                  ;	DSKSTATCHK
 28601                                  ;	SPOOLINT
 28602                                  ;	STATCHK
 28603                                  ;	CNTCHAND
 28604                                  ;	DIVOV
 28605                                  ;	CHARHARD
 28606                                  ;	HardErr
 28607                                  ;
 28608                                  ;	Revision history:
 28609                                  ;
 28610                                  ;	    AN000	version 4.0   Jan 1988
 28611                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28612                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28613                                  ;
 28614                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28615                                  ;	      flags register. In order to return to user normally DOS used to
 28616                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28617                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28618                                  ;
 28619                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28620                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28621                                  ;	      charhard.
 28622                                  
 28623                                  ; 29/04/2019 - Retro DOS v4.0
 28624                                  	; MSDOS 6.0
 28625                                  ;		public	LowInt23Addr		
 28626                                  LowInt23Addr: ;	LABEL	DWORD
 28627 000051BB [E710]0000              	DW	LowInt23, 0
 28628                                  
 28629                                  ;		public	LowInt24Addr
 28630                                  LowInt24Addr: ;	LABEL	DWORD
 28631 000051BF [FB10]0000              	DW	LowInt24, 0
 28632                                  
 28633                                  ;		public	LowInt28Addr
 28634                                  LowInt28Addr: ;	LABEL	DWORD
 28635 000051C3 [0F11]0000              	DW	LowInt28, 0
 28636                                  
 28637                                  ;Break	<Checks for ^C in CON I/O>
 28638                                  
 28639                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28640                                  ; 05/05/2019 - Retro DOS v4.0
 28641                                  
 28642                                  ;---------------------------------------------------------------------------
 28643                                  ;
 28644                                  ; Procedure Name : DSKSTATCHK
 28645                                  ;
 28646                                  ; Check for ^C if only one level in
 28647                                  ;
 28648                                  ;---------------------------------------------------------------------------
 28649                                  
 28650                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28651                                  
 28652                                  DSKSTATCHK:        
 28653                                  	;CMP	BYTE [INDOS],1
 28654 000051C7 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28655                                  	;retnz			; Do NOTHING
 28656                                  	; 16/12/2022
 28657 000051CD 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28658                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28659                                  	;jz	short _RET37 ; dskstatchk1
 28660                                  	;retn
 28661                                  ;_RET37:
 28662                                  ;dskstatchk1:
 28663 000051CF 51                      	PUSH    CX
 28664 000051D0 06                              PUSH    ES
 28665 000051D1 53                              PUSH    BX
 28666 000051D2 1E                              PUSH    DS
 28667 000051D3 56                              PUSH    SI
 28668                                          
 28669                                  	;PUSH	CS
 28670                                          ;POP	ES
 28671                                          ;PUSH	CS
 28672                                          ;POP	DS
 28673                                  
 28674 000051D4 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28675 000051D6 8EC3                    	MOV	ES,BX		; for deviocall2
 28676 000051D8 8EDB                    	MOV	DS,BX
 28677                                  
 28678                                  	; 16/12/2022
 28679                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28680                                  
 28681                                  	; 05/05/2019
 28682                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28683                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28684                                  	;mov	word [ss:DSKSTST],0
 28685                                  
 28686                                  	; 16/12/2022
 28687                                  	; 25/06/2019
 28688 000051DA C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28689 000051DF C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28690 000051E4 C706[9503]0000          	mov	word [DSKSTST],0
 28691                                  
 28692 000051EA BB[9203]                        MOV     BX,DSKSTCALL
 28693                                  
 28694                                  	;LDS	SI,[ss:BCON]
 28695                                          ; 25/062019
 28696 000051ED C536[3200]              	lds	si,[BCON]
 28697                                  
 28698                                  ; 16/12/2022
 28699                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28700                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28701                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28702                                  ;	mov	word [ss:DSKSTST],0
 28703                                  ;	mov	bx,DSKSTCALL
 28704                                  ;	lds	si,[ss:BCON]
 28705                                  
 28706 000051F1 E866F5                  	CALL	DEVIOCALL2
 28707                                   	; 15/03/2018
 28708                                  	;;test	word [ss:DSKSTST],200h
 28709                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28710                                  	; 05/05/2019
 28711 000051F4 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28712 000051FA 7408                    	jz	short _GotCh		; No characters available
 28713                                  
 28714 000051FC 30C0                            XOR     AL,AL                   ; Set zero
 28715                                  RET36:
 28716 000051FE 5E                              POP     SI
 28717 000051FF 1F                              POP     DS
 28718 00005200 5B                              POP     BX
 28719 00005201 07                              POP     ES
 28720 00005202 59                              POP     CX
 28721                                  	; 16/12/2022
 28722                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28723                                  _RET37:
 28724 00005203 C3                              RETN
 28725                                  
 28726                                  _GotCh:
 28727 00005204 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28728                                  
 28729 00005208 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28730 0000520A 75F2                            JNZ     SHORT RET36
 28731 0000520C 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28732 00005212 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28733 00005218 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28734                                  	; 09/09/2018
 28735 0000521D 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28736 00005224 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28737 0000522B E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28738 0000522E 5E                              POP     SI
 28739 0000522F 1F                              POP     DS
 28740 00005230 5B                              POP     BX                      ; Clean stack
 28741 00005231 07                              POP     ES
 28742 00005232 59                              POP     CX
 28743 00005233 E9D000                          JMP	CNTCHAND ; 10/08/2018
 28744                                  
 28745                                  	; 05/05/2019
 28746                                  NOSTOP:
 28747                                  	; MSDOS 6.0
 28748 00005236 3C10                    	CMP	AL,"P"-"@"
 28749 00005238 7509                    	JNZ	short check_next
 28750                                  				    	; SS override
 28751 0000523A 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28752 00005240 7406                    	JZ	short INCHKJ		; no
 28753 00005242 C3                      	retn
 28754                                  check_next:
 28755                                  	;IF	NOT TOGLPRN
 28756                                  	;CMP	AL,"N"-"@"
 28757                                  	;JZ	short INCHKJ
 28758                                  	;ENDIF
 28759                                  
 28760 00005243 3C03                    	CMP	AL,"C"-"@"
 28761 00005245 7401                    	JZ	short INCHKJ
 28762                                  check_end:
 28763 00005247 C3                      	retn
 28764                                  
 28765                                  	; MSDOS 3.3
 28766                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28767                                          ;JZ	short INCHKJ
 28768                                  
 28769                                  	; 15/04/2018
 28770                                          ;;IF	NOT TOGLPRN
 28771                                          ;CMP	AL,"N"-"@"
 28772                                          ;JZ	SHORT INCHKJ
 28773                                          ;;ENDIF
 28774                                  	
 28775                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28776                                          ;JZ	short INCHKJ
 28777                                  	;RETN
 28778                                  
 28779                                  	; 08/09/2018
 28780                                  INCHKJ:	; 10/08/2018
 28781 00005248 E9A500                  	JMP	INCHK
 28782                                  
 28783                                  ;----------------------------------------------------------------------------
 28784                                  ;
 28785                                  ; Procedure Name : SpoolInt
 28786                                  ;
 28787                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28788                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28789                                  ; the middle of an INT 24.
 28790                                  ;
 28791                                  ;----------------------------------------------------------------------------
 28792                                  
 28793                                  SPOOLINT:
 28794 0000524B 9C                              PUSHF
 28795                                  	; 15/03/2018
 28796 0000524C 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28797 00005252 7423                            JZ      SHORT POPFRET
 28798 00005254 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28799 0000525A 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28800                                  
 28801                                  	; 30/07/2018
 28802                                  
 28803                                  	; Note that we are going to allow an external program to issue system 
 28804                                  	; calls at this time. We MUST preserve IdleInt across this.
 28805                                  
 28806 0000525C 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28807                                  
 28808                                  	; 05/05/2019 - Retro DOS v4.0
 28809                                   
 28810                                  	; MSDOS 6.0
 28811 00005261 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28812 00005267 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28813 00005269 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28814 0000526B EB05                    	jmp	short spool_ret_addr
 28815                                  
 28816                                  do_low_int28:
 28817                                  	;call	far [ss:LowInt28Addr]
 28818 0000526D 2EFF1E[C351]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28819                                  
 28820                                  spool_ret_addr:
 28821                                  	;INT	int_spooler		; INT 28h
 28822                                  
 28823 00005272 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28824                                  POPFRET:
 28825 00005277 9D                              POPF
 28826                                  _RET18:  
 28827 00005278 C3                      	RETN
 28828                                  
 28829                                  ; 05/05/2019 - Retro DOS v4.0
 28830                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28831                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28832                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28833                                  
 28834                                  ;----------------------------------------------------------------------------
 28835                                  ;
 28836                                  ; Procedure Name : STATCHK
 28837                                  ;
 28838                                  ;----------------------------------------------------------------------------
 28839                                  
 28840                                  STATCHK:
 28841 00005279 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28842                                                                          ; input redirection
 28843 0000527C 53                              PUSH    BX
 28844 0000527D 31DB                            XOR     BX,BX
 28845 0000527F E88CE4                          CALL	GET_IO_SFT
 28846 00005282 5B                              POP     BX
 28847 00005283 72F3                            JC      SHORT _RET18
 28848                                  
 28849 00005285 B401                            MOV     AH,1
 28850 00005287 E8F9F2                          CALL	IOFUNC
 28851 0000528A 74BF                            JZ      SHORT SPOOLINT
 28852 0000528C 3C13                            CMP     AL,'S'-'@'
 28853 0000528E 75A6                            JNZ     SHORT NOSTOP
 28854                                  
 28855                                  	; 05/05/2019
 28856                                  	; MSDOS 6.0			; SS override
 28857 00005290 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28858 00005296 75AF                    	JNZ	short check_end		; AN000; yes
 28859                                  
 28860 00005298 30E4                            XOR     AH,AH
 28861 0000529A E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28862 0000529D EB4A                            JMP     SHORT PAUSOSTRT
 28863                                  PRINTOFF:
 28864                                  PRINTON:
 28865 0000529F 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28866                                  
 28867                                  	; 30/07/2018 - Retro DOS v3.0
 28868 000052A4 53                      	PUSH	BX
 28869 000052A5 BB0400                  	MOV	BX,4
 28870 000052A8 E863E4                  	call	GET_IO_SFT
 28871 000052AB 5B                      	POP	BX
 28872 000052AC 72CA                    	jc	short _RET18
 28873 000052AE 06                      	PUSH	ES
 28874 000052AF 57                      	PUSH	DI
 28875 000052B0 1E                      	PUSH	DS
 28876 000052B1 07                      	POP	ES
 28877 000052B2 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28878                                  	;test	word [es:di+5],800h
 28879                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28880                                  	; 05/05/2019
 28881 000052B4 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28882 000052B9 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28883                                  
 28884                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28885                                  					; See if allowed
 28886 000052BB 50                      	push	ax
 28887 000052BC B82611                  	mov	ax,1126h
 28888 000052BF CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28889                                  			; Return: CF set on error, AX = error code
 28890                                  			; STACK unchanged
 28891 000052C1 58                      	pop	ax
 28892                                  
 28893 000052C2 730F                    	JNC	short NORM_PR 		; Echo is OK
 28894                                  
 28895                                  					; SS override
 28896 000052C4 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28897                                  
 28898                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28899                                  
 28900 000052CA 50                      	push    ax
 28901 000052CB B82411                  	mov     ax,1124h
 28902 000052CE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28903                                  			; ES:DI -> SFT, SS = DOS CS
 28904 000052D0 58                      	pop     ax
 28905                                  
 28906 000052D1 EB10                    	JMP	SHORT RETP6
 28907                                  NORM_PR:
 28908 000052D3 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28909 000052D9 7505                    	JNZ	short PRNOPN
 28910 000052DB E800F4                  	call	DEV_CLOSE_SFT
 28911 000052DE EB03                    	JMP	SHORT RETP6
 28912                                  PRNOPN:
 28913 000052E0 E8F3F3                  	call	DEV_OPEN_SFT
 28914                                  RETP6:
 28915 000052E3 5F                      	POP	DI
 28916 000052E4 07                      	POP	ES
 28917                                  STATCHK_RETN:
 28918 000052E5 C3                              RETN
 28919                                  PAUSOLP:
 28920 000052E6 E862FF                          CALL    SPOOLINT
 28921                                  PAUSOSTRT:
 28922 000052E9 B401                            MOV     AH,1
 28923 000052EB E895F2                          CALL	IOFUNC
 28924 000052EE 74F6                            JZ      SHORT PAUSOLP
 28925                                  INCHK:
 28926 000052F0 53                              PUSH    BX
 28927 000052F1 31DB                            XOR     BX,BX
 28928 000052F3 E818E4                          CALL	GET_IO_SFT
 28929 000052F6 5B                              POP     BX
 28930 000052F7 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28931 000052F9 30E4                            XOR     AH,AH
 28932 000052FB E885F2                          CALL	IOFUNC
 28933                                  	; 30/07/2018
 28934                                  	; MSDOS 3.3
 28935                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28936                                          ;JNZ	SHORT NOPRINT
 28937                                  
 28938                                  	;cmp	byte [SS:SCAN_FLAG],0
 28939                                  	;JZ	SHORT PRINTON	
 28940                                  	;mov	byte [ss:SCAN_FLAG],0
 28941                                  
 28942                                  	; 05/05/2019
 28943                                  	; MSDOS 6.0
 28944 000052FE 3C10                    	CMP	AL,"P"-"@"
 28945                                  	;;;;  7/14/86	ALT_Q key fix
 28946 00005300 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 28947                                  ;NOPRINT:	
 28948                                  	;IF	NOT TOGLPRN
 28949                                  	;CMP	AL,"N"-"@"
 28950                                  	;JZ	short PRINTOFF
 28951                                  	;ENDIF
 28952 00005302 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 28953                                  	;retnz
 28954 00005304 75DF                    	jnz	short STATCHK_RETN
 28955                                  
 28956                                  	; !! NOTE: FALL THROUGH !!
 28957                                  
 28958                                  ;---------------------------------------------------------------------------
 28959                                  ;
 28960                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 28961                                  ;
 28962                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 28963                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 28964                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 28965                                  ; processing to continue; 2) the original interrupt return address to the code
 28966                                  ; that performed the function call in the first place. If the user CTRL-C
 28967                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 28968                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 28969                                  ; is simulated.
 28970                                  ;
 28971                                  ;---------------------------------------------------------------------------
 28972                                  
 28973                                  CNTCHAND:
 28974                                  	; MSDOS 6.0			; SS override
 28975                                  					; AN002; from RAWOUT
 28976                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 28977                                  	;JNZ	short around_deadlock 	; AN002;
 28978                                  
 28979                                  	; 05/05/2019 - Retro DOS v4.0
 28980 00005306 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 28981 0000530C 7508                    	JNZ	short around_deadlock 	; AN002;
 28982                                  
 28983 0000530E B003                            MOV     AL,3			; Display "^C"
 28984 00005310 E864C4                          CALL	BUFOUT
 28985 00005313 E8FFC2                          CALL	CRLF
 28986                                  around_deadlock:
 28987 00005316 16                              PUSH    SS
 28988 00005317 1F                              POP     DS
 28989 00005318 803E[5703]00                    CMP     BYTE [CONSWAP],0
 28990 0000531D 7403                            JZ      SHORT NOSWAP
 28991 0000531F E856E0                          CALL	SWAPBACK
 28992                                  NOSWAP:
 28993 00005322 FA                      	CLI				; Prepare to play with stack
 28994 00005323 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 28995 00005327 8B26[8405]              	MOV	SP,[USER_SP]
 28996 0000532B E866B1                          CALL	restore_world       ; User registers now restored
 28997                                  
 28998                                  	; 30/07/2018 - Retro DOS v3.0 
 28999                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29000                                          ; 14/03/2018 - Retro DOS v2.0
 29001                                  	;MOV	BYTE [CS:INDOS],0	
 29002                                          ;MOV	BYTE [CS:ERRORMODE],0
 29003                                          ;MOV	[CS:ConC_Spsave],SP
 29004                                  	;clc	;30/07/2018
 29005                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29006                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29007                                  			; Return: return via RETF 2 with CF set
 29008                                  			; DOS will abort program with errorlevel 0
 29009                                  			; else
 29010                                  			; interrupted DOS call continues
 29011                                  
 29012                                  	; 05/05/2019 - Retro DOS v4.0
 29013                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29014                                  
 29015                                  	; CS was used to address these variables. We have to use DOSDATA
 29016                                  	
 29017 0000532E 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29018                                  			; (pop es, after 'call restore_world')	
 29019 0000532F 1E                      	push	ds
 29020                                  	;getdseg <ds>			; ds -> dosdata
 29021 00005330 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29022 00005335 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29023 0000533A C606[2003]00            	mov	byte [ERRORMODE],0
 29024 0000533F 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29025                                  	; User SP has changed because of push. Adjust for it
 29026 00005343 8306[3203]02            	add	word [ConC_Spsave],2
 29027                                  
 29028 00005348 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29029 0000534D 1F                       	pop	ds	; restore ds
 29030 0000534E 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29031 00005350 F8                      	CLC				
 29032 00005351 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29033 00005353 EB06                    	jmp	short ctrlc_ret_addr
 29034                                  
 29035                                  	; 05/05/2019
 29036                                  do_low_int23:
 29037 00005355 F8                      	clc
 29038 00005356 2EFF1E[BB51]            	call	far [cs:LowInt23Addr]	
 29039                                  
 29040                                  	; 30/07/2018 
 29041                                  
 29042                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29043                                  
 29044                                  ; The user has returned to us. The circumstances we allow are:
 29045                                  ;
 29046                                  ;   IRET	We retry the operation by redispatching the system call
 29047                                  ;   CLC/RETF	POP the stack and retry
 29048                                  ;   ... 	Exit the current process with ^C exit
 29049                                  ;
 29050                                  ; User's may RETURN to us and leave interrupts on. 
 29051                                  ; Turn 'em off just to be sure
 29052                                  
 29053                                  ctrlc_ret_addr: ; 05/05/2019
 29054                                  
 29055 0000535B FA                      	CLI
 29056                                  
 29057                                  	; MSDOS 3.3 
 29058                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29059                                  	;PUSHF				; and the flags (maybe new call)
 29060                                  	;POP	AX
 29061                                  
 29062                                  	; 05/05/2019
 29063                                  	; MSDOS 6.0
 29064                                  
 29065                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29066                                  
 29067 0000535C 50                      	push	ax
 29068 0000535D 8CD8                    	mov	ax,ds
 29069                                  	;getdseg <ds>			; ds -> dosdata
 29070 0000535F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29071 00005364 A3[0A0D]                	mov	[TEMPSEG],ax
 29072 00005367 58                      	pop	ax
 29073 00005368 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29074 0000536B 9C                      	pushf				; and the flags (maybe new call)
 29075 0000536C 58                      	pop	ax
 29076                                  
 29077                                  ; See if the input stack is identical to the output stack
 29078                                  
 29079                                  	; MSDOS 3.3
 29080                                  	;CMP	SP,[CS:ConC_Spsave]
 29081                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29082                                  
 29083                                  	; MSDOS 6.0
 29084 0000536D 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29085 00005371 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29086                                  
 29087                                  ; Repeat the operation by redispatching the system call.
 29088                                  
 29089                                  ctrlc_repeat:
 29090                                  	; MSDOS 3.3
 29091                                  	;MOV	AX,[CS:USER_IN_AX]
 29092                                  	; 05/05/2019
 29093                                  	; MSDOS 6.0
 29094 00005373 A1[3A03]                	mov	ax,[USER_IN_AX]
 29095 00005376 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29096                                  	; MSDOS 3.3 & MSDOS 6.0 
 29097                                  	;transfer COMMAND
 29098                                  COMMANDJ:
 29099 0000537A E9CAAF                  	JMP	COMMAND
 29100                                  
 29101                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29102                                  ; RETF'd leaving some flags on the stack and examine the input
 29103                                  
 29104                                  ctrlc_try_new:
 29105 0000537D 83C402                  	ADD	SP,2			; pop those flags
 29106                                  	;;test	ax,1
 29107                                  	;TEST	AX,f_Carry		; did he return with carry?
 29108 00005380 A801                    	test	al,f_Carry ; test al,1
 29109 00005382 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29110                                  
 29111                                  	; MSDOS 6.0
 29112 00005384 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29113                                  
 29114                                  	; Well...  time to abort the user.  
 29115                                  	; Signal a ^C exit and use the EXIT system call..
 29116                                  
 29117                                  ctrlc_abort:
 29118                                  	; MSDOS 3.3
 29119                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29120                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29121                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29122                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29123                                  	;;JMP	SHORT COMMANDJ
 29124                                  	;JMP	COMMAND
 29125                                  
 29126                                  	; 05/05/2019 - Retro DOS v4.0
 29127                                  	; MSDOS 6.0
 29128 00005388 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29129 0000538B 1E                      	push	ds
 29130                                  	;getdseg <ds>			; ds -> dosdata
 29131 0000538C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29132 00005391 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29133 00005396 1F                      	pop	ds
 29134                                  	;transfer COMMAND		; give up by faking $EXIT
 29135 00005397 EBE1                    	JMP	SHORT COMMANDJ
 29136                                  	;JMP	COMMAND
 29137                                  
 29138                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29139                                  ;----------------------------------------------------------------------------
 29140                                  ;
 29141                                  ; Procedure Name : DIVOV
 29142                                  ;
 29143                                  ; Default handler for division overflow trap
 29144                                  ;
 29145                                  ;----------------------------------------------------------------------------
 29146                                  
 29147                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29148                                  DIVOV: 
 29149                                  	; 05/05/2019 - Retro DOS v4.0
 29150                                  	; 30/07/2018
 29151                                  	; 07/07/2018 - Retro DOS v3.0
 29152 00005399 BE[F109]                	mov	si,DIVMES
 29153 0000539C 2E8B1E[040A]            	mov	bx,[cs:DivMesLen]
 29154                                  	;mov	ax,cs
 29155                                  	;mov	ss,ax
 29156                                  	; 05/05/2019
 29157                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29158 000053A1 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29159 000053A6 BC[A007]                	mov     sp,AUXSTACK
 29160                                  	;call	RealDivOv ; MSDOS 3.3
 29161 000053A9 E80200                  	call	_OUTMES ; MSDOS 6.0
 29162 000053AC EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29163                                  
 29164                                  ; 30/07/2018
 29165                                  
 29166                                  ; MSDOS 6.0
 29167                                  ;---------------------------------------------------------------------------
 29168                                  ;
 29169                                  ; Procedure Name : OutMes
 29170                                  ;
 29171                                  ;
 29172                                  ; OutMes: perform message output
 29173                                  ; Inputs:   SS:SI points to message
 29174                                  ;	    BX has message length
 29175                                  ; Outputs:  message to BCON
 29176                                  ;
 29177                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29178                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29179                                  ;NB. This procedure is called only from DIVOV. -SR
 29180                                  ;
 29181                                  ;---------------------------------------------------------------------------
 29182                                  
 29183                                  ;MSDOS 3.3
 29184                                  ;---------------------------------------------------------------------------
 29185                                  ; RealDivOv: perform actual divide overflow stuff.
 29186                                  ; Inputs:   none
 29187                                  ; Outputs:  message to BCON
 29188                                  ;---------------------------------------------------------------------------
 29189                                  
 29190                                  	; 05/05/2019 - Retro DOS v4.0
 29191                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29192                                  
 29193                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29194                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29195                                  
 29196                                  ;---------------------------------------------------------------------------
 29197                                  ;
 29198                                  ; Procedure Name : OutMes
 29199                                  ;
 29200                                  ; OutMes: perform message output
 29201                                  ; Inputs:   SS:SI points to message
 29202                                  ;	    BX has message length
 29203                                  ; Outputs:  message to BCON
 29204                                  ;
 29205                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29206                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29207                                  ;NB. This procedure is called only from DIVOV. -SR
 29208                                  ;
 29209                                  ;---------------------------------------------------------------------------
 29210                                  
 29211                                  	; 30/07/2018
 29212                                  	; MSDOS 6.0
 29213                                  _OUTMES:
 29214                                  	; MSDOS 3.3
 29215                                  ;RealDivOv:
 29216                                  	; 07/07/2018 - Retro DOS v3.0
 29217                                          ;Context ES
 29218 000053AE 16                      	push	ss ; 05/05/2019
 29219                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29220 000053AF 07                      	POP	ES
 29221                                          ;Context DS
 29222 000053B0 16                      	push	ss ; 05/05/2019	
 29223                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29224 000053B1 1F                      	POP	DS
 29225 000053B2 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29226 000053B7 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29227 000053BC C706[9503]0000                  MOV     WORD [DSKSTST],0
 29228                                  	; BX = [DivMesLen] = 19
 29229 000053C2 891E[A403]                      MOV     [DSKSTCNT],BX
 29230 000053C6 BB[9203]                        MOV     BX,DSKSTCALL
 29231 000053C9 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29232                                  	; 08/09/2018
 29233                                  	;mov	[DEVIOBUF_PTR],si
 29234                                  	; MSDOS 6.0
 29235                                  					; CS is used for string, fill in 
 29236                                  					; segment address 
 29237 000053CD 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29238                                  
 29239 000053D1 C536[3200]                      LDS     SI,[BCON]
 29240 000053D5 E882F3                          CALL	DEVIOCALL2
 29241                                  
 29242                                  	;; 14/03/2018
 29243                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29244                                  	;; 08/09/2018
 29245                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29246                                          ;MOV	WORD [CS:DSKSTCNT],1
 29247                                          
 29248                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29249                                  
 29250                                  	; ES still points to DOSDATA. ES is
 29251                                  					; not destroyed by deviocall2. So use
 29252                                  					; ES override.
 29253                                  
 29254 000053D8 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29255 000053DF 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29256                                  
 29257 000053E6 C3                      	RETN
 29258                                  
 29259                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29260                                  ;---------------------------------------------------------------------------
 29261                                  ;
 29262                                  ; Procedure Name : CHARHARD
 29263                                  ;
 29264                                  ;
 29265                                  ; Character device error handler
 29266                                  ; Same function as HARDERR
 29267                                  ;
 29268                                  ;---------------------------------------------------------------------------
 29269                                  
 29270                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29271                                  CHARHARD:
 29272                                  	; 05/05/2019 - Retro DOS v4.0
 29273                                  	; 30/07/2018
 29274                                  	; 08/07/2018 - Retro DOS v3.0
 29275                                  
 29276                                  	; MSDOS 6.0
 29277                                  		   			; M024 - start
 29278 000053E7 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29279                                  	;jne	short @f		; Y: allow fail
 29280 000053ED 750B                    	jne	short chard1
 29281                                  
 29282 000053EF 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29283                                  
 29284 000053F2 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29285 000053F8 7503                    	jnz	short ctrlp		; Y: 
 29286                                  ;@@:
 29287                                  chard1:					; M024 - end
 29288                                  	; MSDOS 6.0 & MSDOS 3.3
 29289                                  
 29290                                  ; Character device error handler
 29291                                  ; Same function as HARDERR
 29292                                  
 29293                                  	;or	ah,38h
 29294 000053FA 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29295                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29296 000053FD 368826[4B03]            	mov	[SS:ALLOWED],ah
 29297                                  
 29298                                  	; 15/03/2018
 29299 00005402 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29300 00005407 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29301 0000540C 56                              PUSH    SI
 29302                                  	;and	di,0FFh
 29303 0000540D 81E7FF00                        AND     DI,STECODE
 29304 00005411 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29305 00005413 E86400                          CALL    FATALC
 29306 00005416 5E                              POP     SI
 29307                                  	;return
 29308 00005417 C3                              RETN
 29309                                  
 29310                                  ;---------------------------------------------------------------------------
 29311                                  ;
 29312                                  ; Procedure Name : HardErr
 29313                                  ;
 29314                                  ; Hard disk error handler. Entry conditions:
 29315                                  ;	DS:BX = Original disk transfer address
 29316                                  ;	DX = Original logical sector number
 29317                                  ;	CX = Number of sectors to go (first one gave the error)
 29318                                  ;	AX = Hardware error code
 29319                                  ;	DI = Original sector transfer count	
 29320                                  ;	ES:BP = Base of drive parameters
 29321                                  ;	[READOP] = 0 for read, 1 for write
 29322                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29323                                  ; Output:
 29324                                  ;	[FAILERR] will be set if user responded FAIL
 29325                                  ;
 29326                                  ;--------------------------------------------------------------------------
 29327                                  
 29328                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29329                                  HARDERR:
 29330                                  	; 05/05/2019 - Retro DOS v4.0
 29331                                  	; 30/07/2018
 29332                                  	; 08/07/2018 - Retro DOS v3.0
 29333 00005418 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29334                                          ;and	di,0FFh
 29335 00005419 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29336                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29337                                  	;cmp	di,0
 29338 0000541D 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29339 00005420 750A                            JNZ     short NOSETWRPERR
 29340 00005422 50                              PUSH    AX
 29341                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29342                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29343                                          ;;MOV	AL,[ES:BP+0]
 29344                                  	; 15/12/2022
 29345 00005423 268A4600                	mov	al,[ES:BP]
 29346                                          	; 15/03/2018
 29347 00005427 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29348 0000542B 58                              POP     AX
 29349                                  NOSETWRPERR:
 29350 0000542C 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29351 0000542E 01C2                            ADD     DX,AX                   ; First sector number to retry
 29352 00005430 52                              PUSH    DX
 29353                                  	; 08/07/2018
 29354                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29355 00005431 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29356 00005435 5A                              POP     DX
 29357 00005436 01C3                            ADD     BX,AX                   ; First address for retry
 29358 00005438 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29359                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29360 0000543A 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29361 0000543E 721A                            JB      SHORT ERRINT
 29362 00005440 FEC4                            INC     AH                      ; Flag for FAT
 29363                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29364                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29365 00005442 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29366 00005446 7308                    	JAE	short TESTDIR 		; No
 29367                                  		 ; Err in FAT must force recomp of freespace
 29368                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29369                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29370 00005448 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29371 0000544E EB0A                    	JMP	SHORT ERRINT
 29372                                  TESTDIR:
 29373 00005450 FEC4                            INC     AH
 29374                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29375 00005452 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29376 00005456 7202                            JB      SHORT ERRINT
 29377 00005458 FEC4                            INC     AH                      ; Must be in data area
 29378                                  ERRINT:
 29379 0000545A D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29380 0000545C 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29381                                  
 29382                                  	; 15/08/2018
 29383                                  					; SS override for allowed and EXITHOLD
 29384 00005461 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29385                                  
 29386                                          ;entry   FATAL
 29387                                  FATAL:
 29388                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29389                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29390                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29391                                  	; 15/12/2022
 29392 00005466 268A4600                	MOV	AL,[ES:BP]        
 29393                                  
 29394                                  	;entry   FATAL1
 29395                                  FATAL1:  
 29396                                  	; 15/03/2018      
 29397 0000546A 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29398 0000546F 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29399                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29400                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29401 00005474 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29402 00005478 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29403                                  
 29404                                  	; DI has the INT-24-style extended error. We now map the error code 
 29405                                  	; for this into the normalized get extended error set by using the 
 29406                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29407                                  	; the device returned codes and leave all others beyond the look up 
 29408                                  	; table alone.
 29409                                  
 29410                                  	; 08/07/2018 - Retro DOS v3.0
 29411                                  FATALC:
 29412 0000547A E89701                  	call	SET_I24_EXTENDED_ERROR
 29413                                  	;cmp	di,0Ch
 29414 0000547D 83FF0C                  	CMP	DI,error_I24_gen_failure
 29415 00005480 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29416 00005482 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29417                                  					;  Only come via GetExtendedError
 29418                                  ;** ----------------------------------------------------------------
 29419                                  ;
 29420                                  ; Entry point used by REDIRector on Network I 24 errors.
 29421                                  ;
 29422                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29423                                  ;
 29424                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29425                                  ;     EXITHOLD set for restore of ES:BP.
 29426                                  ; ------------------------------------------------------------------
 29427                                  	;entry	NET_I24_ENTRY
 29428                                  NET_I24_ENTRY:
 29429                                  GOT_RIGHT_CODE:
 29430 00005485 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29431 0000548B 7404                            JZ	SHORT NoSetFail
 29432 0000548D B003                    	MOV	AL,3
 29433 0000548F EB6C                    	JMP	short FailRet
 29434                                  NoSetFail:
 29435 00005491 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29436 00005496 16                              PUSH	SS
 29437 00005497 07                              POP	ES
 29438                                      
 29439                                  	; Wango!!! We may need to free some user state info... In 
 29440                                  	; particular, we may have locked down a JFN for a user and he may 
 29441                                  	; NEVER return to us. Thus,we need to free it here and then 
 29442                                  	; reallocate it when we come back.
 29443                                  
 29444 00005498 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29445 0000549E 740C                    	JZ	short _NoFree
 29446 000054A0 1E                      	push	ds
 29447 000054A1 56                      	push	si
 29448 000054A2 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29449 000054A7 C604FF                  	MOV	BYTE [SI],0FFH
 29450 000054AA 5E                      	pop	si
 29451 000054AB 1F                      	pop	ds
 29452                                  
 29453                                  _NoFree:
 29454 000054AC FA                      	CLI
 29455                                  					; Prepare to play with stack
 29456 000054AD 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29457 000054B2 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29458                                  
 29459                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29460                                  
 29461                                  	;; Extended Open hooks
 29462                                  					; AN000;IFS.I24 error disabled
 29463                                  	;test	byte [ss:EXTOPEN_ON],2
 29464 000054B7 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29465 000054BD 7404                    	JZ	short i24yes		; AN000;IFS.no
 29466                                  faili24:				; AN000;
 29467 000054BF B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29468 000054C1 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29469                                  i24yes: 				; AN000;
 29470                                  	;; Extended Open hooks
 29471                                  
 29472 000054C3 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29473 000054C8 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29474                                  
 29475                                  	;;int	24h	
 29476                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29477                                  					; must preserve ES
 29478                                  	; 05/05/2019
 29479 000054CD 26803E[1112]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29480 000054D3 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29481 000054D5 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29482                                  					; must preserve ES
 29483 000054D7 EB05                    	jmp	short criterr_ret_addr
 29484                                  
 29485                                  do_low_int24:
 29486                                  	; 05/05/2019
 29487                                  	; MSDOS 6.0
 29488 000054D9 2EFF1E[BF51]            	call    far [cs:LowInt24Addr]
 29489                                  criterr_ret_addr:
 29490 000054DE 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29491 000054E3 268C16[8605]                    MOV     [ES:USER_SS],SS
 29492 000054E8 8CC5                            MOV     BP,ES
 29493 000054EA 8ED5                            MOV     SS,BP
 29494                                  passi24:
 29495 000054EC 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29496 000054F1 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29497 000054F6 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29498 000054FC FB                              STI
 29499                                  FailRet:
 29500 000054FD 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29501                                  	
 29502                                  	; 08/07/2018
 29503                                  
 29504                                  	; Triage the user's reply.
 29505                                  
 29506 00005502 3C01                    	CMP	AL,1
 29507 00005504 723D                    	JB	short CheckIgnore	; 0 => ignore
 29508 00005506 7445                    	JZ	short CheckRetry	; 1 => retry
 29509 00005508 3C03                    	CMP	AL,3			; 3 => fail
 29510 0000550A 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29511                                  
 29512                                  	; The reply was fail. See if we are allowed to fail.
 29513                                  
 29514                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29515                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29516                                  	;test	byte [ss:ALLOWED],8
 29517 0000550C 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29518 00005512 7443                    	jz	short DoAbort	; No, do abort
 29519                                  DoFail:
 29520 00005514 B003                    	MOV	AL,3		; just in case...
 29521                                  				; AN000;EO. I24 error disabled
 29522                                  	; 05/05/2019
 29523                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29524 00005516 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29525 0000551C 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29526                                  	
 29527 0000551E 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29528                                  CleanUp:
 29529 00005523 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29530 00005529 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29531                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29532                                  	;jnz	short CleanUp2
 29533                                  	;retn
 29534                                  	; 17/12/2022
 29535 0000552F 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29536                                  CleanUp2:
 29537 00005531 1E                      	push	ds
 29538 00005532 56                      	push	si
 29539 00005533 50                      	push	ax
 29540 00005534 36A1[AA05]              	MOV	AX,[ss:SFN]
 29541 00005538 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29542 0000553D 8804                    	MOV	[SI],AL
 29543 0000553F 58                      	pop	ax
 29544 00005540 5E                      	pop	si
 29545 00005541 1F                      	pop	ds
 29546                                  Cleanup_retn:
 29547 00005542 C3                      	retn
 29548                                  
 29549                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29550                                  
 29551                                  CheckIgnore:
 29552                                  	;test	byte [ss:ALLOWED],20h
 29553 00005543 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29554 00005549 74C9                    	jz	short DoFail			 ; No, do fail
 29555 0000554B EBD6                    	jmp	short CleanUp
 29556                                  
 29557                                  	; The reply was RETRY. See if we are allowed to retry.
 29558                                  
 29559                                  CheckRetry:
 29560                                  	;test	byte [ss:ALLOWED],10h
 29561 0000554D 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29562 00005553 74BF                    	jz	short DoFail			; No, do fail
 29563 00005555 EBCC                    	JMP	short CleanUp
 29564                                  
 29565                                  	; The reply was ABORT.
 29566                                  DoAbort:
 29567 00005557 16                      	push	ss
 29568 00005558 1F                      	pop	ds
 29569                                  
 29570 00005559 803E[5703]00            	CMP	byte [CONSWAP],0
 29571 0000555E 7403                    	JZ	short NOSWAP2
 29572 00005560 E815DE                  	call	SWAPBACK
 29573                                  NOSWAP2:
 29574                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29575                                  	; turn this abort into a fail.
 29576                                  
 29577                                  	;test	[fAborting],0FFh
 29578                                  	;jnz	short DoFail
 29579                                  
 29580 00005563 803E[5903]00            	cmp	byte [fAborting],0
 29581 00005568 75AA                    	JNZ	short DoFail
 29582                                  
 29583                                  	; Set return code
 29584                                  
 29585 0000556A C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29586 0000556F 30C0                    	XOR	AL,AL
 29587                                  
 29588                                  	; we are truly aborting the process. Go restore information from 
 29589                                  	; the PDB as necessary.
 29590                                  
 29591 00005571 E9990D                  	jmp	exit_inner
 29592                                  
 29593                                  ;** --------------------------------------------------------------------------
 29594                                  ;
 29595                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29596                                  ; different, then an old-style return is performed. If they are the same,
 29597                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29598                                  ; the source of the terminate addresses.
 29599                                  ;
 29600                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29601                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29602                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29603                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29604                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29605                                  ; operation. In essence, we dis-allow the abort response.
 29606                                  ;
 29607                                  ; output:   none.
 29608                                  ; ----------------------------------------------------------------------------
 29609                                  
 29610                                  	;entry	reset_environment
 29611                                  	
 29612                                  reset_environment:
 29613                                  	; 30/07/2018 - Retro DOS v3.0
 29614                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29615                                  
 29616                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29617                                  
 29618 00005574 1E                      	PUSH	DS			; save PDB of process
 29619                                  
 29620                                  	; There are no critical sections in force. Although we may enter 
 29621                                  	; here with critical sections locked down, they are no longer 
 29622                                  	; relevant. We may safely free all allocated resources.
 29623                                  
 29624 00005575 B482                    	MOV	AH,82h
 29625                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29626                                  	;int	2Ah 	
 29627 00005577 CD2A                    	INT	int_IBM
 29628                                  
 29629                                  					; SS override
 29630 00005579 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29631                                  
 29632                                  					; DOS 4.00 doesn't need it
 29633                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29634                                  					; Allow REDIR to clear some stuff
 29635                                  					; On process exit.
 29636 0000557F B82211                  	mov     ax, 1122h
 29637 00005582 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29638                                  			; SS = DOS CS
 29639                                  	;mov	al,22h	
 29640 00005584 B022                    	MOV	AL,int_terminate
 29641 00005586 E879B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29642                                  
 29643 00005589 59                      	POP	CX			; get ThisPDB
 29644 0000558A 06                      	push	es
 29645 0000558B 53                      	push	bx			; save return address
 29646                                  
 29647 0000558C 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29648 00005591 8EDB                    	MOV	DS,BX
 29649 00005593 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29650                                  
 29651                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29652                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29653                                  	; is not Exit_keep_process
 29654                                  	
 29655 00005596 39D8                    	CMP	AX,BX
 29656 00005598 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29657 0000559A 39CB                    	CMP	BX,CX
 29658 0000559C 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29659 0000559E 50                      	PUSH	AX			; save parent
 29660                                  
 29661                                  					; SS override
 29662                                  	;cmp	byte [SS:EXIT_TYPE],3
 29663 0000559F 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29664 000055A5 7406                    	JZ	short reset_to_parent 	; keeping this process
 29665                                  
 29666                                  	; We are truly removing a process. Free all allocation blocks 
 29667                                  	; belonging to this PDB
 29668                                  
 29669                                  	;invoke	arena_free_process
 29670 000055A7 E89B0D                  	call	arena_free_process
 29671                                  
 29672                                  	; Kill off remainder of this process. Close file handles and signal 
 29673                                  	; to relevant network folks that this process is dead. Remember that 
 29674                                  	; CurrentPDB is STILL the current process!
 29675                                  
 29676                                  	;invoke	DOS_ABORT
 29677 000055AA E8B6D9                  	call	DOS_ABORT
 29678                                  
 29679                                  reset_to_parent:
 29680                                  					; SS override
 29681 000055AD 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29682                                  
 29683                                  reset_return:				; come here for normal return
 29684                                  	;Context DS			; DS is used to refer to DOSDATA  
 29685 000055B2 16                      	push	ss
 29686 000055B3 1F                      	pop	ds	
 29687                                  
 29688 000055B4 B0FF                    	MOV	AL,-1
 29689                                  
 29690                                  	; make sure that everything is clean In this case ignore any errors, 
 29691                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29692                                  
 29693                                  	;EnterCrit critDisk
 29694 000055B6 E8CCBD                  	call	ECritDisk
 29695                                  	;invoke	FLUSHBUF
 29696 000055B9 E8B605                  	call	FLUSHBUF
 29697                                  	;LeaveCrit critDisk
 29698 000055BC E8E1BD                  	call	LCritDisk
 29699                                  
 29700                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29701                                  
 29702 000055BF E879F7                  	call	CHECK_VIRT_OPEN
 29703 000055C2 FA                      	CLI
 29704 000055C3 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29705 000055C8 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29706 000055CD C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29707 000055D2 8F06[8005]              	POP	WORD [EXITHOLD]
 29708 000055D6 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29709                                  
 29710                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29711                                  
 29712 000055DA 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29713 000055DE 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29714 000055E2 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29715                                  
 29716 000055E6 E8ABAE                  	call	restore_world
 29717                                  
 29718                                  	; 05/05/2019
 29719 000055E9 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29720                                  
 29721                                  	; MSDOS 6.0
 29722 000055EA 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29723 000055EB 8CD8                    	mov	ax,ds			; and not on stack.
 29724                                  	;getdseg <ds>			; ds -> dosdata
 29725 000055ED 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29726 000055F2 A3[0A0D]                	mov	[TEMPSEG],ax
 29727 000055F5 58                      	pop	ax
 29728                                  					; set up ds to DOSDATA
 29729                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29730 000055F6 A3[8405]                	mov	[USER_SP],ax
 29731                                  
 29732 000055F9 58                      	POP	AX			; suck off CS:IP of interrupt...
 29733 000055FA 58                      	POP	AX
 29734 000055FB 58                      	POP	AX
 29735                                  
 29736                                  ; M011 : BEGIN
 29737                                  
 29738                                  	; MSDOS 3.3
 29739                                  ;	MOV	AX,0F202h	; STI
 29740                                  
 29741                                  	; MSDOS 6.0
 29742 000055FC 9F                      	LAHF
 29743 000055FD 86E0                    	XCHG	AH,AL
 29744 000055FF 2402                    	AND	AL,2
 29745 00005601 B4F2                    	MOV	AH,0F2h
 29746                                  
 29747                                  ; M011 : END
 29748                                  
 29749                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29750 00005603 50                      	PUSH	AX
 29751                                   
 29752                                  	;PUSH	word [CS:EXITHOLD+2]
 29753                                  	;PUSH	word [CS:EXITHOLD]
 29754                                  	
 29755                                  	; MSDOS 6.0
 29756 00005604 FF36[8205]              	PUSH	word [EXITHOLD+2]
 29757 00005608 FF36[8005]              	PUSH	word [EXITHOLD]
 29758                                  
 29759                                  	;MOV	AX,[CS:USER_SP]
 29760                                  
 29761                                  	; MSDOS 6.0
 29762 0000560C A1[8405]                	MOV	AX,[USER_SP]
 29763 0000560F 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29764                                  
 29765 00005613 CF                      	IRET			; Long return back to user terminate address
 29766                                  
 29767                                  ;---------------------------------------------------------------------------
 29768                                  ;
 29769                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29770                                  ;
 29771                                  ; This routine handles extended error codes.
 29772                                  ; Input : DI = error code from device
 29773                                  ; Output: All EXTERR fields are set
 29774                                  ;
 29775                                  ;--------------------------------------------------------------------------
 29776                                  
 29777                                  SET_I24_EXTENDED_ERROR:
 29778 00005614 50                      	PUSH	AX
 29779                                  					; ErrMap24End is in DOSDATA
 29780 00005615 B8[BB0E]                	MOV	AX,ErrMap24End
 29781 00005618 2D[AB0E]                	SUB	AX,ErrMap24
 29782                                  					; Change to dosdata to access 
 29783                                  					; ErrMap24 and EXTERR -SR
 29784                                  	; 05/05/2019 - Retro DOS v4.0
 29785                                  	
 29786                                  	; MSDOS 6.0
 29787 0000561B 1E                      	push	ds
 29788                                  	;getdseg <ds>			; ds ->dosdata
 29789 0000561C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29790                                  
 29791                                  	; AX is the index of the first unavailable error. Do not translate 
 29792                                  	; if greater or equal to AX.
 29793                                  
 29794 00005621 39C7                    	CMP	DI,AX
 29795 00005623 89F8                    	MOV	AX,DI
 29796 00005625 7306                    	JAE	short NoTrans
 29797                                  
 29798                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29799 00005627 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29800 0000562B 30E4                    	XOR	AH,AH
 29801                                  NoTrans:
 29802                                  	;MOV	[CS:EXTERR],AX
 29803 0000562D A3[2403]                	mov	[EXTERR],AX
 29804 00005630 1F                      	pop	ds
 29805                                  	;assume	ds:nothing
 29806 00005631 58                      	POP	AX
 29807                                  
 29808                                  	; Now Extended error is set correctly. Translate it to get correct 
 29809                                  	; error locus class and recommended action.
 29810                                  
 29811 00005632 56                      	PUSH	SI
 29812                                  					; ERR_TABLE_24 is in DOSCODE 
 29813 00005633 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 29814 00005636 E88EB0                  	call	CAL_LK			; Set other extended error fields
 29815 00005639 5E                      	POP	SI
 29816 0000563A C3                      	retn
 29817                                  
 29818                                  ;============================================================================
 29819                                  ; FAT.ASM, MSDOS 6.0, 1991
 29820                                  ;============================================================================
 29821                                  ; 30/07/2018 - Retro DOS v3.0
 29822                                  ; 20/05/2019 - Retro DOS v4.0
 29823                                  
 29824                                  ;	TITLE	FAT - FAT maintenance routines
 29825                                  ;	NAME	FAT
 29826                                  
 29827                                  ;**	FAT.ASM
 29828                                  ;----------------------------------------------------------------------------
 29829                                  ;	Low level local device routines for performing disk change sequence,
 29830                                  ;	setting cluster validity, and manipulating the FAT
 29831                                  ;
 29832                                  ;	IsEof
 29833                                  ;	UNPACK
 29834                                  ;	PACK
 29835                                  ;	MAPCLUSTER
 29836                                  ;	FATREAD_SFT
 29837                                  ;	FATREAD_CDS
 29838                                  ;	FAT_operation
 29839                                  ;
 29840                                  ;	Revision history:
 29841                                  ;
 29842                                  ;	  AN000  version Jan. 1988
 29843                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29844                                  ;
 29845                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29846                                  ;	       from CL0FATENTRY rather than disk.
 29847                                  
 29848                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29849                                  
 29850                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29851                                  ;----------------------------------------------------------------------------
 29852                                  ;
 29853                                  ; Procedure Name : IsEOF
 29854                                  ;
 29855                                  ; IsEOF - check the fat value in BX for eof.
 29856                                  ;
 29857                                  ;   Inputs:	ES:BP point to DPB
 29858                                  ;		BX has fat value
 29859                                  ;   Outputs:	JAE eof
 29860                                  ;   Registers modified: none
 29861                                  ;
 29862                                  ;---------------------------------------------------------------------------
 29863                                  
 29864                                  IsEOF:
 29865                                  	;cmp	word [es:bp+0Dh],0FF6h
 29866 0000563B 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29867 00005641 730B                    	JAE	short EOF16			; yes, check for eof there
 29868                                  
 29869                                  ;J.K. 8/27/86
 29870                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29871                                  ;of any media that has "F0"(Other) as a MediaByte.
 29872                                  ;Hopely, this does not create any side effect for those who may use any value
 29873                                  ;other than "FF8-FFF" as an EOF for their own file.
 29874                                  
 29875 00005643 81FBF00F                	cmp	bx,0FF0h
 29876 00005647 7404                    	je	short IsEOF_other
 29877                                  
 29878 00005649 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29879                                  IsEOF_other:
 29880 0000564D C3                      	retn
 29881                                  EOF16:
 29882 0000564E 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29883 00005651 C3                      	retn
 29884                                  
 29885                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29886                                  
 29887                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29888                                  ;---------------------------------------------------------------------------
 29889                                  ;
 29890                                  ; Procedur Name : UNPACK
 29891                                  ;
 29892                                  ; Inputs:
 29893                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29894                                  ;	ES:BP = Base of drive parameters
 29895                                  ; Outputs:
 29896                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29897                                  ;	Zero set means DI=0 (free cluster)
 29898                                  ;	Carry set means error (currently user FAILed to I 24)
 29899                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29900                                  ;
 29901                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29902                                  ;
 29903                                  ;----------------------------------------------------------------------------
 29904                                  	
 29905                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29906                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29907                                  
 29908                                  	; 20/05/2019 - Retro DOS v4.0
 29909                                  UNPACK:
 29910                                  	; MSDOS 6.0			; M014 - Start
 29911 00005652 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29912 00005654 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29913 00005656 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29914 0000565A 09FF                    	or	di,di 			; return z if di=0
 29915 0000565C C3                      	retn				; done
 29916                                  up_cont:				; M014 - End
 29917                                  	; MSDOS 3.3 & MSDOS 6.0
 29918                                  	;cmp	bx,[es:bp+0Dh]
 29919 0000565D 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29920 00005661 7726                    	JA	short HURTFAT
 29921 00005663 E8DC00                  	CALL	MAPCLUSTER
 29922 00005666 721E                    	jc	short _DoContext
 29923 00005668 8B3D                    	MOV	DI,[DI]
 29924 0000566A 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29925 0000566C 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29926 00005670 81FEF60F                	CMP	SI,4096-10
 29927 00005674 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29928 00005676 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29929 00005678 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29930                                  High12:
 29931 0000567A D1EF                    	SHR	DI,1
 29932 0000567C D1EF                    	SHR	DI,1
 29933 0000567E D1EF                    	SHR	DI,1
 29934 00005680 D1EF                    	SHR	DI,1
 29935                                  Unpack12:
 29936 00005682 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29937                                  _DoContext:
 29938 00005686 16                      	PUSH	SS
 29939 00005687 1F                      	POP	DS
 29940 00005688 C3                      	retn
 29941                                  HURTFAT:
 29942                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29943                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29944 00005689 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29945 0000568F 50                      	PUSH	AX
 29946 00005690 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 29947                                  
 29948                                  ;hkn; SS override
 29949 00005692 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 29950                                  ;
 29951                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 29952                                  ;
 29953 00005698 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 29954 0000569B E8C8FD                  	call	FATAL
 29955 0000569E 3C03                    	CMP	AL,3
 29956 000056A0 F8                      	CLC
 29957 000056A1 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 29958 000056A3 F9                      	STC				; User said FAIL
 29959                                  OKU_RET:
 29960 000056A4 58                      	POP	AX
 29961                                  hurtfat_retn:
 29962 000056A5 C3                      	retn
 29963                                  
 29964                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 29965                                  
 29966                                  ;Break	<PACK -- PACK FAT ENTRIES>
 29967                                  ;----------------------------------------------------------------------------
 29968                                  ;
 29969                                  ; Procedure Name : PACK
 29970                                  ;
 29971                                  ; Inputs:
 29972                                  ;	BX = Cluster number
 29973                                  ;	DX = Data
 29974                                  ;	ES:BP = Pointer to drive DPB
 29975                                  ; Outputs:
 29976                                  ;	The data is stored in the FAT at the given cluster.
 29977                                  ;	SI,DX,DI all destroyed
 29978                                  ;	Carry set means error (currently user FAILed to I 24)
 29979                                  ;	No other registers affected
 29980                                  ;
 29981                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 29982                                  ;
 29983                                  ;---------------------------------------------------------------------------
 29984                                  
 29985                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29986                                  	; 20/05/2019 - Retro DOS v4.0
 29987                                  PACK:
 29988                                  	; MSDOS 6.0			; M014 - start
 29989 000056A6 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 29990 000056A8 7505                    	jnz	short p_cont		; N: proceed with normal pack
 29991 000056AA 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 29992 000056AE C3                      	retn				; done
 29993                                  p_cont:					; M014 - end
 29994                                  	; MSDOS 3.3 & MSDOS 6.0
 29995 000056AF E89000                  	CALL	MAPCLUSTER
 29996 000056B2 72D2                    	JC	short _DoContext
 29997 000056B4 8B35                    	MOV	SI,[DI]
 29998 000056B6 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 29999 000056B8 51                      	PUSH	CX			; move data to upper 12 bits
 30000 000056B9 B104                    	MOV	CL,4
 30001 000056BB D3E2                    	SHL	DX,CL
 30002 000056BD 59                      	POP	CX
 30003 000056BE 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30004 000056C1 EB14                    	JMP	SHORT PACKIN
 30005                                  ALIGNED:
 30006                                  	;cmp	word [es:bp+0Dh],0FF6h
 30007 000056C3 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30008 000056C9 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30009 000056CB 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30010 000056CF 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30011 000056D3 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30012                                  Pack16:
 30013 000056D5 31F6                    	XOR	SI,SI			; MZ no original data
 30014                                  PACKIN:
 30015 000056D7 09D6                    	OR	SI,DX
 30016 000056D9 8935                    	MOV	[DI],SI
 30017                                  
 30018                                  ;hkn; SS override
 30019 000056DB 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30020                                  	; MSDOS 6.0
 30021 000056E0 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30022                                  					;LB. if already dirty		  ;AN000;
 30023 000056E4 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30024                                  	; 10/06/2019
 30025 000056E6 E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30026                                  	
 30027                                  	;or	byte [si+5],40h
 30028 000056E9 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30029                                  yesdirty11:				;LB.				;AN000;
 30030                                  ;hkn; SS override
 30031 000056ED 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30032                                  ;hkn; SS is DOSDATA
 30033 000056F3 16                      	push	ss
 30034 000056F4 1F                      	pop	ds
 30035 000056F5 74AE                    	jz	short hurtfat_retn	; Carry clear
 30036 000056F7 50                      	PUSH	AX
 30037 000056F8 53                      	PUSH	BX
 30038 000056F9 51                      	PUSH	CX
 30039 000056FA A1[8E05]                	MOV	AX,[CLUSSAVE]
 30040 000056FD 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30041                                  	;;add	si,16 ; MSDOS 3.3
 30042                                  	;add	si,20 ; MSDOS 6.0
 30043 00005701 83C614                  	ADD	SI,BUFINSIZ
 30044 00005704 8824                    	MOV	[SI],AH
 30045                                  ;hkn; SS is DOSDATA
 30046                                  	;Context DS
 30047 00005706 16                      	push	ss
 30048 00005707 1F                      	pop	ds
 30049                                  	
 30050 00005708 50                      	PUSH	AX
 30051                                  	
 30052                                  	; MSDOS 6.0
 30053 00005709 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30054 0000570D 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30055                                  
 30056                                  	; MSDOS 3.3 & MSDOS 6.0
 30057 00005711 8B16[9005]              	MOV	DX,[CLUSSEC]
 30058 00005715 BE0100                  	MOV	SI,1
 30059 00005718 30C0                    	XOR	AL,AL
 30060 0000571A E85903                  	call	GETBUFFRB
 30061 0000571D 58                      	POP	AX
 30062 0000571E 721C                    	JC	short POPP_RET
 30063 00005720 C53E[E205]              	LDS	DI,[CURBUF]
 30064                                  	
 30065                                  	; MSDOS 6.0
 30066 00005724 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30067                                  					;LB. if already dirty		  ;AN000;
 30068 00005728 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30069 0000572A E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30070                                  	
 30071                                  	;or	byte [di+5],40h
 30072 0000572D 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30073                                  yesdirty12:
 30074                                  	;;add	di,16
 30075                                  	;add	di,20 ; MSDOS 6.0
 30076 00005731 83C714                  	ADD	DI,BUFINSIZ
 30077 00005734 4F                      	DEC	DI
 30078                                  	;add	di,[es:bp+2]
 30079 00005735 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30080 00005739 8805                    	MOV	[DI],AL
 30081 0000573B F8                      	CLC
 30082                                  POPP_RET:
 30083 0000573C 16                      	PUSH	SS
 30084 0000573D 1F                      	POP	DS
 30085 0000573E 59                      	POP	CX
 30086 0000573F 5B                      	POP	BX
 30087 00005740 58                      	POP	AX
 30088 00005741 C3                      	retn
 30089                                  
 30090                                  ; 31/07/2018 - Retro DOS v3.0
 30091                                  
 30092                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30093                                  ;---------------------------------------------------------------------------
 30094                                  ;
 30095                                  ; Procedure Name : MAPCLUSTER
 30096                                  ;
 30097                                  ; Inputs:
 30098                                  ;	ES:BP Points to DPB
 30099                                  ;	BX Is cluster number
 30100                                  ; Function:
 30101                                  ;	Get a pointer to the cluster
 30102                                  ; Outputs:
 30103                                  ;	DS:DI Points to contents of FAT for given cluster
 30104                                  ;	DS:SI Points to start of buffer
 30105                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30106                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30107                                  ;	Carry set if failed.
 30108                                  ; SI is destroyed.
 30109                                  ;
 30110                                  ;---------------------------------------------------------------------------
 30111                                  
 30112                                  	; 20/05/2019 - Retro DOS v4.0
 30113                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30114                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30115                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30116                                  
 30117                                  MAPCLUSTER:
 30118                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30119 00005742 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30120                                  	;SAVE	<AX,BX,CX,DX>
 30121 00005747 50                      	push	ax
 30122 00005748 53                      	push	bx
 30123 00005749 51                      	push	cx
 30124 0000574A 52                      	push	dx
 30125 0000574B 89D8                    	MOV	AX,BX			; AX = BX
 30126 0000574D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30127 00005753 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30128 00005755 D1E8                    	SHR	AX,1			; AX = BX/2
 30129                                  Map16:	
 30130                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30131 00005757 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30132                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30133 00005759 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30134 0000575B 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30135 0000575D 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30136                                  
 30137                                  ;IF FastDiv
 30138                                  ;
 30139                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30140                                  ; case and apply a really fast algorithm to get the desired results
 30141                                  ;
 30142                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30143                                  ; Fast method takes 39+20*4=119
 30144                                  ;
 30145                                  ; This saves a bunch.
 30146                                  
 30147 00005761 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30148 00005765 7510                    	jne	short _DoDiv		; 4  for no jump
 30149 00005767 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30150 00005769 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30151 0000576D 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30152                                  	; MDOS 3.3
 30153                                  	;shr	al,1	
 30154                                  	; MDOS 6.0
 30155 0000576F D1EF                    	shr	di,1			; 2
 30156 00005771 D0D8                    	rcr	al,1			; 2
 30157                                  	; MDOS 3.3 (& MSDOS 6.0)
 30158 00005773 30E4                    	xor	ah,ah			; 3
 30159 00005775 EB04                    	jmp	short DivDone		; 16
 30160                                  _DoDiv:
 30161                                  ;ENDIF
 30162                                  	; MSDOS 3.3
 30163                                  	;xor	dx,dx
 30164                                  	; MSDOS 6.0
 30165 00005777 89FA                    	mov	dx,di			; 2
 30166                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30167 00005779 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30168                                  ;IF FastDiv
 30169                                  DivDone:
 30170                                  ;ENDIF
 30171                                  	;add	ax,[es:bp+6]
 30172 0000577B 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30173 0000577F 49                      	DEC	CX			; CX is sector size - 1
 30174                                  	;SAVE	<AX,DX,CX>
 30175 00005780 50                      	push	ax
 30176 00005781 52                      	push	dx
 30177 00005782 51                      	push	cx
 30178 00005783 89C2                    	MOV	DX,AX
 30179                                  
 30180                                  	; MSDOS 6.0
 30181 00005785 C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30182                                  	; MDOS 3.3 (& MSDOS 6.0)
 30183 0000578B 30C0                    	XOR	AL,AL
 30184 0000578D BE0100                  	MOV	SI,1
 30185                                  	;invoke	GETBUFFRB
 30186 00005790 E8E302                  	call	GETBUFFRB
 30187                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30188 00005793 59                      	pop	cx
 30189 00005794 58                      	pop	ax
 30190 00005795 5A                      	pop	dx
 30191 00005796 7257                    	JC	short MAP_POP
 30192                                  
 30193 00005798 C536[E205]              	LDS	SI,[CURBUF]
 30194                                  	;;lea	di,[si+16]
 30195                                  	;lea	di,[si+20] ; MSDOS 6.0
 30196 0000579C 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30197 0000579F 01C7                    	ADD	DI,AX
 30198 000057A1 39C8                    	CMP	AX,CX
 30199 000057A3 7537                    	JNZ	short MAPRET
 30200 000057A5 8A05                    	MOV	AL,[DI]
 30201                                  	;Context DS		 	;hkn; SS is DOSDATA
 30202 000057A7 16                      	push	ss
 30203 000057A8 1F                      	pop	ds	
 30204 000057A9 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30205 000057AD A2[8E05]                	MOV	[CLUSSAVE],AL
 30206 000057B0 8916[9005]              	MOV	[CLUSSEC],DX
 30207                                  	; MSDOS 6.0
 30208 000057B4 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30209 000057BA 42                      	INC	DX
 30210 000057BB C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30211                                  	; MDOS 3.3 (& MSDOS 6.0)
 30212 000057C1 30C0                    	XOR	AL,AL
 30213 000057C3 BE0100                  	MOV	SI,1
 30214                                  	;invoke	GETBUFFRB
 30215 000057C6 E8AD02                  	call	GETBUFFRB
 30216 000057C9 7224                    	JC	short MAP_POP
 30217 000057CB C536[E205]              	LDS	SI,[CURBUF]
 30218 000057CF 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30219 000057D2 8A05                    	MOV	AL,[DI]
 30220                                  	;Context DS			;hkn; SS is DOSDATA
 30221 000057D4 16                      	push	ss
 30222 000057D5 1F                      	pop	ds
 30223 000057D6 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30224                                  
 30225                                  ;hkn; CLUSSAVE is in DOSDATA
 30226 000057D9 BF[8E05]                	MOV	DI,CLUSSAVE
 30227                                  MAPRET:
 30228                                  	;RESTORE <DX,CX,BX>
 30229 000057DC 5A                      	pop	dx
 30230 000057DD 59                      	pop	cx
 30231 000057DE 5B                      	pop	bx
 30232 000057DF 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30233 000057E1 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30234 000057E7 7302                    	JAE	short MapSet		; MZ no, set flags
 30235 000057E9 89D8                    	MOV	AX,BX
 30236                                  MapSet:
 30237 000057EB A801                    	TEST	AL,1			; set zero flag if not on boundary
 30238                                  	;RESTORE <AX>
 30239 000057ED 58                      	pop	ax
 30240 000057EE C3                      	retn
 30241                                  
 30242                                  MAP_POP:
 30243                                  	;RESTORE <DX,CX,BX,AX>
 30244 000057EF 5A                      	pop	dx
 30245 000057F0 59                      	pop	cx
 30246 000057F1 5B                      	pop	bx
 30247 000057F2 58                      	pop	ax
 30248                                  fatread_sft_retn: ; 17/12/2022
 30249 000057F3 C3                      	retn
 30250                                  
 30251                                  ; 20/05/2019 - Retro DOS v4.0
 30252                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30253                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30254                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30255                                  
 30256                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30257                                  ;----------------------------------------------------------------------------
 30258                                  ;
 30259                                  ; Procedure Name : FATREAD_SFT
 30260                                  ;
 30261                                  ; Inputs:
 30262                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30263                                  ;		giving a NET SFT will produce system crashing results).
 30264                                  ;	DS DOSDATA
 30265                                  ; Function:
 30266                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30267                                  ;	if disk changed.
 30268                                  ;	In other respects, same as FATREAD_CDS.
 30269                                  ;	(note ES:DI destroyed!)
 30270                                  ; Outputs:
 30271                                  ;	Carry set if error (currently user FAILed to I 24)
 30272                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30273                                  ;	as far as invalidating curdir_ID is concerned.
 30274                                  ;	Since getting a true disk changed on this call is a screw up
 30275                                  ;	anyway, that's the way it goes.
 30276                                  ;
 30277                                  ;---------------------------------------------------------------------------
 30278                                  
 30279                                  FATREAD_SFT:
 30280 000057F4 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30281                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30282                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30283                                  	; 15/12/2022
 30284 000057F8 268A4600                	mov	AL,[ES:BP]
 30285 000057FC A2[7605]                	MOV	[THISDRV],AL
 30286 000057FF E879AE                  	call	GOTDPB			;Set THISDPB
 30287                                  	;CALL	FAT_GOT_DPB
 30288                                  	; 17/12/2022
 30289 00005802 EB78                    	jmp	FAT_GOT_DPB
 30290                                  ;fatread_sft_retn:
 30291                                  	;retn
 30292                                  
 30293                                  ;----------------------------------------------------------------------------
 30294                                  ;
 30295                                  ; Procedure Name : FATREAD_CDS
 30296                                  ;
 30297                                  ; Inputs:
 30298                                  ;	DS:DOSDATA
 30299                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30300                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30301                                  ; Function:
 30302                                  ;	If disk may have been changed, media is determined and buffers are
 30303                                  ;	flagged invalid. If not, no action is taken.
 30304                                  ; Outputs:
 30305                                  ;	ES:BP = Drive parameter block
 30306                                  ;	THISDPB = ES:BP
 30307                                  ;	THISDRV set
 30308                                  ;	Carry set if error (currently user FAILed to I 24)
 30309                                  ; DS preserved , all other registers destroyed
 30310                                  ;
 30311                                  ;---------------------------------------------------------------------------
 30312                                  
 30313                                  	; 20/05/2019 - Retro DOS v4.0
 30314                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30315                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30316                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30317                                  
 30318                                  FATREAD_CDS:
 30319 00005804 06                      	PUSH	ES
 30320 00005805 57                      	PUSH	DI
 30321                                  	;les	bp,[es:di+45h]
 30322 00005806 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30323                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30324                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30325                                  	; 15/12/2022
 30326 0000580A 268A4600                	mov	AL,[ES:BP]
 30327 0000580E A2[7605]                	MOV	[THISDRV],AL
 30328 00005811 E867AE                  	call	GOTDPB			;Set THISDPB
 30329 00005814 E86500                  	CALL	FAT_GOT_DPB
 30330 00005817 5F                      	POP	DI			;Get back CDS pointer
 30331 00005818 07                      	POP	ES
 30332 00005819 72D8                    	jc	short fatread_sft_retn
 30333 0000581B 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30334                                  
 30335                                  ;	Media changed. We now need to find all CDS structures which use this
 30336                                  ;	DPB and invalidate their ID pointers.
 30337                                  
 30338                                  MED_CHANGE:
 30339 0000581D 31C0                    	XOR	AX,AX
 30340 0000581F 48                      	DEC	AX			; AX = -1
 30341 00005820 1E                      	PUSH	DS
 30342 00005821 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30343 00005825 30ED                    	XOR	CH,CH			; CX is number of structures
 30344                                  	;lds	si,[es:di+45h]
 30345 00005827 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30346                                  
 30347                                  ;hkn; SS override
 30348                                  
 30349                                  ;	Find all CDSs with this DevPtr
 30350                                  ;
 30351                                  ;	(ax) = -1
 30352                                  ;	(ds:si) = DevPtr
 30353                                  
 30354 0000582B 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30355                                  frcd20: 
 30356                                  	;;test	word [es:di+43h],8000h
 30357                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30358 00005830 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30359 00005835 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30360                                  
 30361                                  	; MSDOS 3.3
 30362                                  	;push	es
 30363                                  	;push	di
 30364                                  	;les	di,[es:di+45h]
 30365                                  	;;les	di,[ES:DI+curdir.devptr]
 30366                                  	;call	POINTCOMP
 30367                                  	;pop	di
 30368                                  	;pop	es
 30369                                  	;jnz	short frcd25
 30370                                  
 30371                                  	; MSDOS 6.0
 30372 00005837 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30373 0000583B 7512                    	jne	short frcd25		; no match
 30374 0000583D 8CDB                    	mov	bx,ds
 30375 0000583F 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30376 00005843 750A                    	jne	short frcd25		; CDS not for this drive
 30377                                  
 30378                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30379                                  	;test	[es:di+49h],ax
 30380 00005845 26854549                	test	[ES:DI+curdir.ID],AX
 30381 00005849 7404                    	JZ	short frcd25		; If root (0), leave root
 30382                                  	;mov	[es:di+49h],ax
 30383 0000584B 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30384                                  frcd25:	
 30385                                  	;;add	di,81  ; MSDOS 3.3
 30386                                  	;add	di,88  ; MSDOS 6.0	 
 30387 0000584F 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30388 00005852 E2DC                    	LOOP	frcd20
 30389 00005854 1F                      	POP	DS
 30390                                  NO_CHANGE:
 30391 00005855 C42E[8A05]              	LES	BP,[THISDPB]
 30392 00005859 F8                      	CLC
 30393 0000585A C3                      	retn
 30394                                  
 30395                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30396                                  ;----------------------------------------------------------------------------
 30397                                  ;
 30398                                  ; Procedure Name : FAT_operation
 30399                                  ;
 30400                                  ;----------------------------------------------------------------------------
 30401                                  
 30402                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30403                                  
 30404                                  FAT_operation:
 30405                                  	; 31/07/2018 - Retro DOS v3.0
 30406                                  FATERR:
 30407                                  	;mov	word [es:bp+1Eh],-1
 30408                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30409 0000585B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30410                                  					; Err in FAT must force recomp of freespace
 30411                                  	;and	di,0FFh
 30412 00005861 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30413                                  	;mov	byte [ALLOWED],18h
 30414 00005865 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30415                                  	;mov	ah,1Ah
 30416 0000586A B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30417 0000586C A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30418 0000586F E8F8FB                  	call	FATAL1
 30419 00005872 C42E[8A05]              	LES	BP,[THISDPB]
 30420 00005876 3C03                    	CMP	AL,3
 30421 00005878 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30422 0000587A F9                      	STC				; User said FAIL
 30423 0000587B C3                      	retn
 30424                                  
 30425                                  FAT_GOT_DPB:
 30426                                  	;Context DS			;hkn; SS is DOSDATA
 30427 0000587C 16                      	push	ss			
 30428 0000587D 1F                      	pop	ds
 30429                                  	;mov	al,0Fh
 30430 0000587E B00F                    	MOV	AL,DMEDHL
 30431                                  	;mov	ah,[es:bp+1]
 30432 00005880 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30433 00005884 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30434 00005887 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30435 0000588C C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30436                                  	;;mov	al,[es:bp+16h]
 30437                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30438 00005892 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30439 00005896 A2[6703]                	MOV	[CALLMED],AL
 30440 00005899 06                      	PUSH	ES
 30441 0000589A 1E                      	PUSH	DS
 30442                                  
 30443                                  ;hkn; DEVCALL is in DOSDATA
 30444 0000589B BB[5A03]                	MOV	BX,DEVCALL
 30445                                  	;;lds	si,[es:bp+12h]
 30446                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30447 0000589E 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30448 000058A2 07                      	POP	ES			; ES:BX Points to call header
 30449 000058A3 E8B4EE                  	call	DEVIOCALL2
 30450                                  	;Context DS		 	;hkn; SS is DOSDATA
 30451 000058A6 16                      	push	ss
 30452 000058A7 1F                      	pop	ds
 30453 000058A8 07                      	POP	ES			; Restore ES:BP
 30454 000058A9 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30455                                  	;test	di,8000h
 30456                                  	;jnz	short FATERR
 30457 000058AD 09FF                    	or	di,di
 30458 000058AF 78AA                    	js	short FATERR		; have error
 30459 000058B1 30E4                    	XOR	AH,AH
 30460                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30461                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30462 000058B3 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30463 000058B7 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30464                                  ; See if we had changed volume id by creating one on the diskette
 30465 000058BA 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30466 000058BE 7508                    	jnz	short CHECK_BYT
 30467 000058C0 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30468 000058C5 E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30469                                  					; new volume label.
 30470                                  CHECK_BYT:
 30471 000058C8 0A26[6803]              	OR	AH,[CALLRBYT]
 30472                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30473                                  	;JMP	short NEWDSK
 30474                                  	; 17/12/2022
 30475 000058CC 7865                    	js	short NEWDSK
 30476                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30477                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30478                                  	;JMP	short NEWDSK
 30479                                  
 30480                                  CHECK_ZR:
 30481 000058CE 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30482 000058D0 F8                      	CLC
 30483 000058D1 C3                      	retn				; If Media not changed (NZ)
 30484                                  
 30485                                  DISK_CHNG_ERR:
 30486 000058D2 06                      	PUSH	ES
 30487 000058D3 55                      	PUSH	BP
 30488                                  	;;les	bp,[es:bp+12h]
 30489                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30490 000058D4 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30491                                  	;;test	word [es:bp+4],800h
 30492                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30493 000058D8 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30494 000058DD 5D                      	POP	BP
 30495 000058DE 07                      	POP	ES
 30496 000058DF 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30497 000058E1 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30498 000058E2 57                      	PUSH	DI
 30499 000058E3 16                      	push	ss			;hkn; SS is DOSDATA
 30500 000058E4 1F                      	pop	ds
 30501                                  	;mov	byte [ALLOWED],18h
 30502 000058E5 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30503 000058EA 06                      	PUSH	ES
 30504 000058EB C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30505 000058EF 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30506 000058F3 07                      	POP	ES
 30507 000058F4 893E[2803]              	MOV	[EXTERRPT],DI
 30508                                  	;mov	ax,0Fh
 30509 000058F8 B80F00                  	MOV	AX,error_I24_wrong_disk
 30510 000058FB C606[7505]01            	MOV	byte [READOP],1		; Write
 30511                                  	;invoke	HARDERR
 30512 00005900 E815FB                  	call	HARDERR
 30513 00005903 5F                      	POP	DI			; Get back buffer for ignore
 30514 00005904 1F                      	POP	DS
 30515 00005905 3C03                    	CMP	AL,3
 30516                                  FAIL_OPJ2:
 30517 00005907 741D                    	JZ	short FAIL_OP
 30518 00005909 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30519                                  
 30520                                  CHKBUFFDIRT:
 30521                                  	; 20/05/2019 - Retro DOS v4.0
 30522                                  
 30523                                  	; MSDOS 3.3
 30524                                  	;lds	di,[BUFFHEAD]
 30525                                  
 30526                                  	; MSDOS 6.0
 30527 0000590C 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30528 00005912 741F                    	je	short NEWDSK			; no, skip the check
 30529 00005914 E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30530                                  nbuffer:
 30531                                  	;cmp	al,[di+4]
 30532 00005917 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30533 0000591A 750E                    	jne	short lfnxt			; no, go for next buffer
 30534                                  	;test   byte [di+5],40h
 30535 0000591C F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30536 00005920 7408                    	jz	short lfnxt			; no, go for next buffer
 30537                                  	;Context DS
 30538 00005922 16                      	push	ss
 30539 00005923 1F                      	pop	ds
 30540 00005924 F8                      	clc
 30541 00005925 C3                      	retn
 30542                                  
 30543                                  FAIL_OP:					; This label & code is here
 30544                                  	;Context DS				;  for reachability
 30545 00005926 16                      	push	ss
 30546 00005927 1F                      	pop	ds
 30547 00005928 F9                      	STC
 30548 00005929 C3                      	retn
 30549                                  
 30550                                  lfnxt:
 30551                                  	; 15/08/2018 - Retro DOS v3.0
 30552                                  	; MSDOS 3.3
 30553                                  	;lds	di,[di]
 30554                                  
 30555                                  	; 20/05/2019 - Retro DOS v4.0
 30556 0000592A 8B3D                    	mov	di,[di]
 30557                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30558                                  	
 30559                                  	; MSDOS 3.3
 30560                                  	;cmp	di,-1
 30561                                  	;jne	short nbuffer
 30562                                  	
 30563                                  	; MSDOS 6.0
 30564 0000592C 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30565 00005931 75E4                    	jne	short nbuffer			; no, check this guy also
 30566                                  
 30567                                  ; If no dirty buffers, assume Media changed
 30568                                  NEWDSK:
 30569                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30570                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30571 00005933 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30572                                  						;  recompute
 30573                                  	; MSDOS 3.3
 30574                                  	;call	SETVISIT
 30575                                  	; MSDOS 6.0
 30576 00005939 E8D300                  	call	 GETCURHEAD
 30577                                  nxbuffer:
 30578                                  	; MSDOS 3.3
 30579                                  	;or 	byte [di+5],20h
 30580                                  	; MSDOS 3.3 & MSDOS 6.0
 30581                                  	;cmp	[di+4],al
 30582 0000593C 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30583 0000593F 7510                    	jne	short lfnxt2
 30584                                  	;test	byte [di+5],40h
 30585 00005941 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30586 00005945 758B                    	jnz	short DISK_CHNG_ERR
 30587                                  	;mov	word [di+4],20FFh
 30588 00005947 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30589 0000594C E8D200                  	call	SCANPLACE
 30590                                  	; MSDOS 6.0
 30591 0000594F EB02                    	jmp	short skpbuff
 30592                                  lfnxt2:
 30593 00005951 8B3D                    	mov	di,[di]
 30594                                  	;mov	di,[di+BUFFINFO.buf_next]
 30595                                  skpbuff:
 30596                                  	; MSDOS 6.0
 30597 00005953 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30598 00005958 75E2                    	jne	short nxbuffer
 30599                                  
 30600 0000595A 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30601 00005960 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30602 00005962 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30603 00005967 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30604 00005969 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30605                                  ;lfnxt2:
 30606                                  	; MSDOS 3.3
 30607                                  	;call	SKIPVISIT
 30608                                  	;jnz	short nxbuffer
 30609                                  GOGETBPB:
 30610                                  	; MSDOS 3.3 & MSDOS 6.0
 30611                                  	;;lds	di,[es:bp+12h]
 30612                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30613 0000596F 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30614                                  	; 20/05/2019
 30615                                  	;test	word [di+4],2000h
 30616                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30617 00005973 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30618 00005977 7510                    	JNZ	short GETFREEBUF
 30619                                  	;context DS	    		;hkn; SS is DOSDATA
 30620 00005979 16                      	push	ss
 30621 0000597A 1F                      	pop	ds
 30622 0000597B BB0200                  	MOV	BX,2
 30623 0000597E E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30624                                  FAIL_OPJ:
 30625 00005981 72A3                    	JC	short FAIL_OP
 30626 00005983 C53E[E205]              	LDS	DI,[CURBUF]
 30627 00005987 EB13                    	JMP	SHORT GOTGETBUF
 30628                                  
 30629                                  GETFREEBUF:
 30630 00005989 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30631 0000598A 55                      	PUSH	BP
 30632                                  	; MSDOS 3.3
 30633                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30634                                  	; MSDOS 6.0
 30635 0000598B 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30636                                  ;hkn; SS override
 30637 0000598D 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30638 00005992 E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30639                                  	; MSDOS 3.3 & MSDOS 6.0
 30640 00005995 E84202                  	call	BUFWRITE
 30641 00005998 5D                      	POP	BP
 30642 00005999 07                      	POP	ES
 30643                                  	;JC	short FAIL_OPJ
 30644 0000599A 728A                    	jc	short FAIL_OP
 30645                                  GOTGETBUF:
 30646                                  	;;add	di,16
 30647                                  	;add	di,20 ; MSDOS 6.0
 30648 0000599C 83C714                  	ADD	DI,BUFINSIZ
 30649                                  
 30650                                  ;hkn; SS override
 30651 0000599F 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30652                                  	;Context DS			;hkn; SS is DOSDATA
 30653 000059A4 16                      	push	ss
 30654 000059A5 1F                      	pop	ds
 30655 000059A6 893E[6803]              	MOV	[CALLXAD],DI
 30656                                  	;mov	al,16h
 30657 000059AA B016                    	MOV	AL,DBPBHL
 30658                                  	;mov	ah,[es:bp+1]
 30659 000059AC 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30660 000059B0 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30661 000059B3 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30662 000059B8 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30663                                  	;;mov	al,[es:bp+16h]
 30664                                  	;mov	al,[es:bp+17h]
 30665 000059BE 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30666 000059C2 A2[6703]                	MOV	[CALLMED],AL
 30667 000059C5 06                      	PUSH	ES
 30668 000059C6 1E                      	PUSH	DS
 30669                                  	;;push	word [es:bp+14h]
 30670                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30671 000059C7 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30672                                  	;;push	word [es:bp+12h]
 30673                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30674 000059CB 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30675                                  
 30676                                  ;hkn; DEVCALL is in DOSDATA
 30677 000059CF BB[5A03]                	MOV	BX,DEVCALL
 30678 000059D2 5E                      	POP	SI
 30679 000059D3 1F                      	POP	DS			; DS:SI Points to device header
 30680 000059D4 07                      	POP	ES			; ES:BX Points to call header
 30681                                  	;invoke	DEVIOCALL2
 30682 000059D5 E882ED                  	call	DEVIOCALL2
 30683 000059D8 07                      	POP	ES			; Restore ES:BP
 30684                                  	;Context DS
 30685 000059D9 16                      	push	ss		 	;hkn; SS is DOSDATA
 30686 000059DA 1F                      	pop	ds
 30687 000059DB 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30688                                  	; MSDOS 3.3
 30689                                  	;test	di,8000h
 30690                                  	;jnz	short FATERRJ
 30691                                  	; MSDOS 6.0
 30692 000059DF 09FF                    	or	di,di
 30693 000059E1 7829                    	js	short FATERRJ 		; have error
 30694                                  	;;mov	al,[es:bp+16h]
 30695                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30696 000059E3 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30697 000059E7 C536[6C03]              	LDS	SI,[CALLBPB]
 30698                                  	;;mov	word [es:bp+1Ch],0
 30699                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30700 000059EB 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30701                                  	;invoke	$SETDPB
 30702 000059F1 E852B6                  	call	_$SETDPB
 30703                                  
 30704                                  ;hkn; SS override
 30705 000059F4 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30706                                  	;mov	al,[es:bp+8]
 30707 000059F9 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30708                                  
 30709                                  	; MSDOS 3.3
 30710                                  	;;mov	ah,[es:bp+0Fh]
 30711                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30712                                  	;;mov	[DI-8],ax
 30713                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30714                                  
 30715                                  	; MSDOS 6.0
 30716                                  	;mov	[di-0Ah],al
 30717 000059FD 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30718                                  						;>32mb		  ;AN000;
 30719                                  	;mov	ax,[es:bp+0Fh]
 30720 00005A00 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30721                                  	;mov	[di-9h],ax			  ;AC000;
 30722 00005A04 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30723                                  					;>32mb Correct buffer info ;AC000;
 30724                                  	;Context DS			;hkn; SS is DOSDATA
 30725 00005A07 16                      	push	ss
 30726 00005A08 1F                      	pop	ds
 30727 00005A09 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30728 00005A0B C3                      	retn
 30729                                  
 30730                                  FATERRJ: 
 30731 00005A0C E94CFE                  	JMP	FATERR
 30732                                  
 30733                                  ;============================================================================
 30734                                  ; STDBUF.ASM
 30735                                  ;============================================================================
 30736                                  ; Retro DOS v2.0 - 12/03/2018
 30737                                  
 30738                                  ;
 30739                                  ; Standard buffer management for MSDOS
 30740                                  ;
 30741                                  
 30742                                  ;.xlist
 30743                                  ;.xcref
 30744                                  ;INCLUDE STDSW.ASM
 30745                                  ;.cref
 30746                                  ;.list
 30747                                  
 30748                                  ;TITLE	STDBUF - MSDOS buffer management
 30749                                  ;NAME	STDBUF
 30750                                  
 30751                                  ;INCLUDE BUF.ASM
 30752                                  
 30753                                  ;============================================================================
 30754                                  ; BUF.ASM
 30755                                  ;============================================================================
 30756                                  ; 31/07/2018 - Retro DOS v3.0
 30757                                  ; Retro DOS v2.0 - 12/03/2018
 30758                                  ;
 30759                                  ; buffer management for MSDOS
 30760                                  ;
 30761                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30762                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30763                                  ;
 30764                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30765                                  ;
 30766                                  ;SETVISIT:
 30767                                  ;	; 31/07/2018 - Retro DOS v3.0
 30768                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30769                                  ;; Inputs:
 30770                                  ;;      None
 30771                                  ;; Function:
 30772                                  ;;      Set up a scan of I/O buffers
 30773                                  ;; Outputs:
 30774                                  ;;      All visit flags = 0
 30775                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30776                                  ;;                    may cause a scan to stop in the middle leaving some
 30777                                  ;;                    visit flags set, and some not set.
 30778                                  ;;      DS:DI Points to [BUFFHEAD]
 30779                                  ;; No other registers altered
 30780                                  ;
 30781                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30782                                  ;	PUSH    AX
 30783                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30784                                  ;	;mov	al,0DFh
 30785                                  ;	mov	al,~buf_visit
 30786                                  ;SETLOOP:
 30787                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30788                                  ;	;and	[DI+5],al
 30789                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30790                                  ;       LDS     DI,[DI]
 30791                                  ;       CMP     DI,-1
 30792                                  ;       JNZ     SHORT SETLOOP
 30793                                  ;       POP     AX ; 09/09/2018
 30794                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30795                                  ;SVISIT_RETN:
 30796                                  ;       RETN
 30797                                  ;
 30798                                  ;SKIPVISIT:
 30799                                  ;	; 31/07/2018 - Retro DOS v3.0
 30800                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30801                                  ;
 30802                                  ;; Inputs:
 30803                                  ;;      DS:DI Points to a buffer
 30804                                  ;; Function:
 30805                                  ;;      Skip visited buffers
 30806                                  ;; Outputs:
 30807                                  ;;      DS:DI Points to next unvisited buffer
 30808                                  ;;      Zero is set if skip to LAST buffer
 30809                                  ;; No other registers altered
 30810                                  ;
 30811                                  ;       CMP     DI,-1
 30812                                  ;       ;retz
 30813                                  ;       JZ	SHORT SVISIT_RETN
 30814                                  ;
 30815                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30816                                  ;       ;;;retnz
 30817                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30818                                  ;
 30819                                  ;	;test	byte [di+5],20h
 30820                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30821                                  ;	JNZ	short SKIPLOOP
 30822                                  ;	
 30823                                  ;	push	ax
 30824                                  ;	or	al,1
 30825                                  ;	pop	ax
 30826                                  ;	retn	
 30827                                  ;
 30828                                  ;SKIPLOOP:
 30829                                  ;	LDS     DI,[DI]
 30830                                  ;       JMP     SHORT SKIPVISIT
 30831                                  
 30832                                  ;============================================================================
 30833                                  ; BUF.ASM, MSDOS 6.0, 1991
 30834                                  ;============================================================================
 30835                                  ; 31/07/2018 - Retro DOS v3.0
 30836                                  ; 04/05/2019 - Retro DOS v4.0
 30837                                  
 30838                                  ;	TITLE	BUF - MSDOS buffer management
 30839                                  ;	NAME	BUF
 30840                                  
 30841                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30842                                  ;
 30843                                  ;	GETCURHEAD
 30844                                  ;	ScanPlace
 30845                                  ;	PLACEBUF
 30846                                  ;	PLACEHEAD
 30847                                  ;	PointComp
 30848                                  ;	GETBUFFR
 30849                                  ;	GETBUFFRB
 30850                                  ;	FlushBuf
 30851                                  ;	BufWrite
 30852                                  ;	SET_RQ_SC_PARMS
 30853                                  ;
 30854                                  ;	Revision history:
 30855                                  ;
 30856                                  ;		AN000  version 4.00  Jan. 1988
 30857                                  ;		A004   PTM 3765 -- Disk reset failed
 30858                                  ;		M039 DB 10/17/90 - Disk write optimization
 30859                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30860                                  
 30861                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30862                                  ;----------------------------------------------------------------------------
 30863                                  ; Procedure Name : GetCurHead
 30864                                  ; Inputs:
 30865                                  ;	 No Inputs
 30866                                  ; Function:
 30867                                  ;	Returns the pointer to the first buffer in Queue
 30868                                  ;	and updates FIRST_BUFF_ADDR
 30869                                  ;       and invalidates LASTBUFFER (recency pointer)
 30870                                  ; Outputs:
 30871                                  ;	DS:DI = pointer to the first buffer in Queue
 30872                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30873                                  ;       LASTBUFFER = -1
 30874                                  ; No other registers altered
 30875                                  ;----------------------------------------------------------------------------
 30876                                  
 30877                                  ; 04/05/2019 - Retro DOS v4.0
 30878                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30879                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30880                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30881                                  
 30882                                  GETCURHEAD:
 30883 00005A0F 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30884 00005A14 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30885 00005A1B 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30886 00005A20 C3                      	retn
 30887                                  
 30888                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30889                                  ;----------------------------------------------------------------------------
 30890                                  ; Procedure Name : ScanPlace
 30891                                  ; Inputs:
 30892                                  ;	Same as PLACEBUF
 30893                                  ; Function:
 30894                                  ;	Save scan location and call PLACEBUF
 30895                                  ; Outputs:
 30896                                  ;	DS:DI Points to saved scan location
 30897                                  ; All registers, except DS:DI, preserved.
 30898                                  ;----------------------------------------------------------------------------
 30899                                  ;M039: Rewritten to preserve registers.
 30900                                  
 30901                                  ;SCANPLACE:
 30902                                  ;	; 31/07/2018 - Retro DOS v3.0
 30903                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30904                                  ;	push	es
 30905                                  ;	les	si,[di]
 30906                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30907                                  ;	call	PLACEBUF
 30908                                  ;	push	es
 30909                                  ;	pop	ds
 30910                                  ;	mov	di,si
 30911                                  ;	pop	es
 30912                                  ;scanplace_retn:
 30913                                  ;	retn	
 30914                                  	
 30915                                  	; MSDOS 6.0
 30916                                  SCANPLACE:
 30917 00005A21 FF35                    	push	word [di]
 30918                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30919 00005A23 E80200                  	call	PLACEBUF
 30920 00005A26 5F                      	pop	di
 30921 00005A27 C3                      	retn
 30922                                  
 30923                                  ;----------------------------------------------------------------------------
 30924                                  ; Procedure Name : PlaceBuf
 30925                                  ; Input:
 30926                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30927                                  ; Function:
 30928                                  ;	Remove buffer from queue and re-insert it in proper place.
 30929                                  ; NO registers altered
 30930                                  ;----------------------------------------------------------------------------
 30931                                  
 30932                                  ;procedure PLACEBUF,NEAR
 30933                                  
 30934                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30935                                  	; 20/05/2019 - Retro DOS v4.0
 30936                                  PLACEBUF:
 30937                                  	; 31/07/2018 - Retro DOS v3.0
 30938                                  
 30939                                  	; MSDOS 6.0
 30940 00005A28 50                      	push	AX			;Save only regs we modify	;AN000;
 30941 00005A29 53                      	push	BX							;AN000;
 30942 00005A2A 56                      	push	SI							;AN000;
 30943                                  	
 30944 00005A2B 8B05                    	mov	ax,[di]
 30945                                  	;mov	ax,[di+BUFFINFO.buf_next]
 30946 00005A2D 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 30947                                  	
 30948 00005A32 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 30949 00005A34 7420                    	je	short nret			;Yes, special case	;AN000;
 30950 00005A36 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 30951 00005A38 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 30952 00005A3A 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 30953 00005A3E EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 30954                                  not_first:
 30955                                  	;mov	si,[di+2]
 30956 00005A40 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 30957 00005A43 8904                    	mov	[si],ax
 30958                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 30959 00005A45 96                      	xchg	si,ax
 30960                                  	;mov	[si+2],ax
 30961 00005A46 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 30962                                  	
 30963 00005A49 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 30964 00005A4C 893C                    	mov	[si],di
 30965                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 30966 00005A4E 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 30967 00005A51 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 30968 00005A54 891D                    	mov	[di],bx
 30969                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 30970                                  nret:									;AN000;
 30971 00005A56 5E                      	pop	SI							;AN000;
 30972 00005A57 5B                      	pop	BX							;AN000;
 30973 00005A58 58                      	pop	AX							;AN000;
 30974                                  									;AN000;
 30975                                  	;cmp	byte [di+4],0FFh
 30976 00005A59 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 30977 00005A5D 7505                            jne	short pbx			; M039: -no, jump.
 30978 00005A5F 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 30979                                  pbx:	
 30980 00005A64 C3                      	retn								;AN000;
 30981                                  
 30982                                  	; 31/07/2018 - Retro DOS v3.0
 30983                                  
 30984                                  	; MSDOS 3.3
 30985                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30986                                  
 30987                                  ;PLACEBUF:
 30988                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 30989                                  ;	
 30990                                  ;       CALL	save_world
 30991                                  ;       LES     CX,[DI]
 30992                                  ;       CMP     CX,-1           	; Buf is LAST?
 30993                                  ;       JZ      SHORT NRET		; Buffer already last
 30994                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 30995                                  ;       PUSH    DS
 30996                                  ;       POP     ES              	; Buf is ES:DI
 30997                                  ;	; 15/03/2018
 30998                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 30999                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31000                                  ;       JNZ     SHORT BUFLOOP
 31001                                  ;       MOV     [SS:BUFFHEAD],CX
 31002                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31003                                  ;       JMP     SHORT LOOKEND
 31004                                  ;BUFLOOP:
 31005                                  ;	; 31/07/2018
 31006                                  ;	mov	ax,ds
 31007                                  ;	mov	bx,si
 31008                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31009                                  ;       LDS     SI,[SI]
 31010                                  ;       CALL    POINTCOMP
 31011                                  ;       jnz	short BUFLOOP
 31012                                  ;	;
 31013                                  ;	mov	ds,ax
 31014                                  ;	mov	si,bx
 31015                                  ;	mov	[SI],cx
 31016                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31017                                  ;	mov	[SI+2],bp
 31018                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31019                                  ;LOOKEND:
 31020                                  ;	mov	ax,ds
 31021                                  ;	mov	bx,si
 31022                                  ;       LDS     SI,[SI]
 31023                                  ;       CMP     SI,-1
 31024                                  ;       jnz     short LOOKEND
 31025                                  ;GOTHEEND:
 31026                                  ;       mov	ds,ax
 31027                                  ;	mov	[BX],di
 31028                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31029                                  ;       MOV     WORD [ES:DI],-1
 31030                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31031                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31032                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31033                                  ;NRET:
 31034                                  ;       CALL	restore_world
 31035                                  ;	
 31036                                  ;	;cmp	byte [di+4],-1
 31037                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31038                                  ;	jnz     short scanplace_retn
 31039                                  ;	call    PLACEHEAD
 31040                                  ;	retn
 31041                                  
 31042                                  ;EndProc PLACEBUF
 31043                                  
 31044                                  ;M039 - Removed PLACEHEAD.
 31045                                  ;----------------------------------------------------------------------------
 31046                                  ; places buffer at head
 31047                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31048                                  ;	ONE IN THE LIST!!!!!!!
 31049                                  ; BUGBUG ---- this routine can be removed because it has only
 31050                                  ; BUGBUG ---- one instruction. This routine is called from
 31051                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31052                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31053                                  ; BUGBUG ---- But kept as it is for modularity
 31054                                  ;----------------------------------------------------------------------------
 31055                                  ;procedure   PLACEHEAD,NEAR
 31056                                  ;	mov	word ptr [BufferQueue], di
 31057                                  ;	ret
 31058                                  ;EndProc PLACEHEAD
 31059                                  ;M039
 31060                                  
 31061                                  ;----------------------------------------------------------------------------
 31062                                  ; Procedure Name : PLACEHEAD
 31063                                  ;
 31064                                  ; SAME AS PLACEBUF except places buffer at head
 31065                                  ;----------------------------------------------------------------------------
 31066                                  
 31067                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31068                                  	; 05/09/2018
 31069                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31070                                  ;PLACEHEAD:
 31071                                  ;	; 31/07/2018 - Retro DOS v3.0
 31072                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31073                                  ;
 31074                                  ;       CALL	save_world
 31075                                  ;       PUSH	DS
 31076                                  ;       POP	ES
 31077                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31078                                  ;       LDS     SI,[SS:BUFFHEAD]
 31079                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31080                                  ;	CALL    POINTCOMP
 31081                                  ;       JZ      SHORT GOTHEEND2
 31082                                  ;	MOV	[ES:DI],SI
 31083                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31084                                  ;       MOV	[ES:DI+2],DS
 31085                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31086                                  ;       MOV	[SS:BUFFHEAD],DI
 31087                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31088                                  ;LOOKEND2:
 31089                                  ;       mov	ax,ds
 31090                                  ;	mov	bx,si
 31091                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31092                                  ;       LDS     SI,[SI]
 31093                                  ;       CALL    POINTCOMP
 31094                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31095                                  ;       mov	ds,ax
 31096                                  ;	mov	word [bx],-1
 31097                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31098                                  ;	mov	word [bx+2],-1
 31099                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31100                                  ;GOTHEEND2:
 31101                                  ;      	call	restore_world
 31102                                  ;placehead_retn:
 31103                                  ;	retn
 31104                                  
 31105                                  ; 20/05/2019 - Retro DOS v4.0
 31106                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31107                                  
 31108                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31109                                  ;----------------------------------------------------------------------------
 31110                                  ;
 31111                                  ; Procedure Name : PointComp
 31112                                  ; Inputs:
 31113                                  ;         DS:SI & ES:DI
 31114                                  ; Function:
 31115                                  ;          Checks for ((SI==DI) && (ES==DS))
 31116                                  ;	   Assumes that pointers are normalized for the
 31117                                  ;	   same segment
 31118                                  ;
 31119                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31120                                  ; DO NOT USE FOR < or >
 31121                                  ; No Registers altered
 31122                                  ;
 31123                                  ;----------------------------------------------------------------------------
 31124                                  
 31125                                  POINTCOMP:
 31126                                  	; 31/07/2018 - Retro DOS v3.0
 31127                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31128 00005A65 39FE                    	CMP	SI,DI
 31129 00005A67 750A                    	jnz	short _ret_label	; return if nz
 31130                                  	;jnz	short placehead_retn 
 31131 00005A69 51                      	PUSH	CX
 31132 00005A6A 52                      	PUSH	DX
 31133 00005A6B 8CD9                    	MOV	CX,DS
 31134 00005A6D 8CC2                    	MOV	DX,ES
 31135 00005A6F 39D1                    	CMP	CX,DX
 31136 00005A71 5A                      	POP	DX
 31137 00005A72 59                      	POP	CX
 31138                                  _ret_label:
 31139 00005A73 C3                      	retn
 31140                                  
 31141                                  ; 01/08/2018 - Retro DOS v3.0
 31142                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31143                                  
 31144                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31145                                  
 31146                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31147                                  ;----------------------------------------------------------------------------
 31148                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31149                                  ;	It gets the specified local sector into one of the I/O buffers
 31150                                  ;	and shuffles the queue
 31151                                  ; 
 31152                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31153                                  ;		       ELSE no pre-read
 31154                                  ;		(DX) = Desired physical sector number	      (LOW)
 31155                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31156                                  ;		(ES:BP) = Pointer to drive parameters
 31157                                  ;		ALLOWED set in case of INT 24
 31158                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31159                                  ;		'C' clear if OK
 31160                                  ;		CURBUF Points to the Buffer for the sector
 31161                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31162                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31163                                  ;----------------------------------------------------------------------------
 31164                                  
 31165                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31166                                  ;----------------------------------------------------------------------------
 31167                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31168                                  ;	It gets the specified sector into one of the I/O buffers
 31169                                  ;	and shuffles the queue. We need a special entry point so that
 31170                                  ;	we can read the alternate FAT sector if the first read fails, also
 31171                                  ;	so we can mark the buffer as a FAT sector.
 31172                                  ; 
 31173                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31174                                  ;		       ELSE no pre-read
 31175                                  ;		(DX) = Desired physical sector number	     (LOW)
 31176                                  ;		(SI) != 0
 31177                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31178                                  ;		(ES:BP) = Pointer to drive parameters
 31179                                  ;		ALLOWED set in case of INT 24
 31180                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31181                                  ;		'C' clear if OK
 31182                                  ;		CUR ddBUF Points to the Buffer for the sector
 31183                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31184                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31185                                  ;----------------------------------------------------------------------------
 31186                                  
 31187                                  	; 20/05/2019 - Retro DOS v4.0
 31188                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31189                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31190                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31191                                  GETBUFFR:
 31192 00005A74 31F6                    	XOR	SI,SI
 31193                                  
 31194                                  ;	This entry point is called for FAT buffering with SI != 0
 31195                                  
 31196                                  GETBUFFRB:
 31197 00005A76 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31198                                  	; 15/12/2022
 31199 00005A79 268A4600                	mov	al,[ES:BP]
 31200                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31201                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31202 00005A7D C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31203                                  	; MSDOS 6.0
 31204                                  ;hkn; SS override
 31205 00005A81 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31206                                  
 31207                                  ;	See if this is the buffer that was most recently returned.
 31208                                  ;	A big performance win if it is.
 31209                                  
 31210 00005A86 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31211 00005A89 7412                    	je	short getb5			; No
 31212                                  	;cmp	dx,[di+6]
 31213 00005A8B 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31214 00005A8E 750D                    	JNZ	short getb5			; Wrong sector
 31215                                  	
 31216                                  	; MSDOS 6.0
 31217                                  	;cmp	cx,[di+8]
 31218 00005A90 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31219 00005A93 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31220                                  	
 31221                                  	;cmp	al,[di+4]
 31222 00005A95 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31223                                  	;JZ	getb35				; Just asked for same buffer
 31224 00005A98 7503                    	jnz	short getb5
 31225                                  	;jmp	getb35
 31226                                  	; 17/12/2022
 31227                                  	; 28/07/2019
 31228 00005A9A E9C800                  	jmp	getb35x
 31229                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31230                                  	;jmp	getb35
 31231                                  
 31232                                  ;	It's not the buffer most recently returned. See if it's in the
 31233                                  ;	cache.
 31234                                  ;
 31235                                  ;	(cx:dx) = sector #
 31236                                  ;	(al) = drive #
 31237                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31238                                  ;	??? list may be incomplete ???
 31239                                  
 31240                                  getb5:	
 31241                                  	; MSDOS 3.3
 31242                                  	;lds	di,[SS:BUFFHEAD]
 31243                                  	; MSDOS 6.0
 31244 00005A9D E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31245                                  getb10:	
 31246                                  	;cmp	dx,[di+6]
 31247 00005AA0 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31248 00005AA3 750D                    	jne	short getb12			; wrong sector lo
 31249                                  	
 31250                                  	; MSDOS 6.0
 31251                                  	;cmp	cx,[di+8]
 31252 00005AA5 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31253 00005AA8 7508                    	jne	short getb12			; wrong sector hi
 31254                                  	
 31255                                  	;cmp	al,[di+4]
 31256 00005AAA 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31257                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31258 00005AAD 7503                    	jne	short getb12
 31259 00005AAF E98D00                  	jmp	getb25
 31260                                  getb12:	
 31261                                  	; MSDOS 3.3
 31262                                  	;;mov	di,[DI]
 31263                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31264                                  	;
 31265                                  	; 15/08/2018
 31266                                  	;lds	di,[di]
 31267                                  
 31268                                  	;cmp	di,-1 ; 0FFFFh
 31269                                  	;jne	short getb10
 31270                                  	;lds	di,[SS:BUFFHEAD]
 31271                                  
 31272                                  	; MSDOS 6.0
 31273 00005AB2 8B3D                    	mov	di,[di]
 31274                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31275 00005AB4 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31276 00005AB9 75E5                    	jne	short getb10			; no, continue looking
 31277                                  
 31278                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31279                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31280                                  ;	new sector into it.
 31281                                  ;
 31282                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31283                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31284                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31285                                  ;	down a chain, but should be hashed.
 31286                                  ;
 31287                                  ;	(DS:DI) = first buffer in the queue
 31288                                  ;	(CX:DX) = sector # we want
 31289                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31290                                  
 31291                                  	; MSDOS 3.3 & MSDOS 6.0
 31292                                  ;hkn; SS override
 31293 00005ABB 51                      	PUSH	CX  ; MSDOS 6.0
 31294 00005ABC 56                      	push	si
 31295 00005ABD 52                      	push	dx
 31296 00005ABE 55                      	push	bp
 31297 00005ABF 06                      	push	es
 31298 00005AC0 E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31299 00005AC3 07                      	pop	es
 31300 00005AC4 5D                      	pop	bp
 31301 00005AC5 5A                      	pop	dx
 31302 00005AC6 5E                      	pop	si
 31303 00005AC7 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31304                                  	;jc	short getbx			; if got hard error
 31305 00005ACC 7303                    	jnc	short getb13
 31306 00005ACE E99E00                  	jmp	getbx
 31307                                  
 31308                                  getb13:
 31309                                  	; MSDOS 6.0
 31310 00005AD1 E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31311                                  
 31312                                  ;	We're ready to read in the buffer, if need be. If the caller
 31313                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31314                                  
 31315 00005AD4 30E4                    	XOR	AH,AH				; initial flags
 31316                                  ;hkn; SS override
 31317                                  	;test	byte [ss:PREREAD],0FFh
 31318                                  	;jnz	short getb20
 31319 00005AD6 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31320 00005ADB 754A                    	JNZ	short getb20			; no, we're done
 31321                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31322                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31323 00005ADD 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31324 00005AE0 B90100                  	MOV	CX,1
 31325 00005AE3 56                      	push	si
 31326 00005AE4 57                      	push	di
 31327 00005AE5 52                      	push	dx
 31328                                  	; MSDOS 6.0
 31329 00005AE6 06                      	push	es ; ***
 31330                                  
 31331                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31332                                  ;	this point. -mrw 10/88
 31333                                  	
 31334 00005AE7 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31335 00005AED 7407                    	jz	short getb14
 31336 00005AEF 1E                      	push	ds ; **
 31337 00005AF0 53                      	push	bx ; *
 31338 00005AF1 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31339                                  getb14:
 31340                                  ;M039: Eliminated redundant HMA code.
 31341                                  
 31342                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31343 00005AF6 09F6                    	OR	SI,SI			; FAT sector ?
 31344 00005AF8 7407                    	JZ	short getb15		
 31345                                  
 31346 00005AFA E8A9DC                  	call	FATSECRD
 31347                                  	;mov	ah,2
 31348 00005AFD B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31349                                  
 31350 00005AFF EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31351                                  
 31352                                  getb15:
 31353 00005B01 E8CEDC                  	call	DREAD			; Buffer is marked free if read barfs
 31354 00005B04 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31355                                  getb17:
 31356                                  	; 17/12/2022	
 31357                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31358                                  ;%if 0
 31359                                  	; MSDOS 6.0							  ;I001
 31360 00005B06 9C                      	pushf								  ;I001
 31361 00005B07 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31362 00005B0D 7411                    	jz	short not_in_hma	; no				  ;I001
 31363                                  	;mov	cx,[es:bp+2]
 31364 00005B0F 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31365 00005B13 D1E9                    	shr	cx,1							  ;I001
 31366 00005B15 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31367 00005B16 89DE                    	mov	si,bx							  ;I001
 31368 00005B18 5F                      	pop	di ; *							  ;I001
 31369 00005B19 07                      	pop	es ; **							  ;I001
 31370 00005B1A FC                      	cld								  ;I001
 31371 00005B1B 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31372 00005B1C F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31373 00005B1E 06                      	push	es							  ;I001
 31374 00005B1F 1F                      	pop	ds							  ;I001
 31375                                  ;%endif
 31376                                  
 31377                                  ; 17/12/2022
 31378                                  %if 0
 31379                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31380                                  	; MSDOS 5.0
 31381                                  	pushf
 31382                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31383                                  	jz	short not_in_hma	; no
 31384                                  	popf
 31385                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31386                                  	shr	cx,1
 31387                                  	mov	si,bx
 31388                                  	pop	di ; *
 31389                                  	pop	es ; **
 31390                                  	cld
 31391                                  	rep	movsw
 31392                                  	push	es
 31393                                  	pop	ds
 31394                                  	jmp	short getb19 ; 27/11/2022
 31395                                  %endif
 31396                                  
 31397                                  not_in_hma:								  ;I001
 31398 00005B20 9D                      	popf							 	  ;I001
 31399                                  getb19:
 31400 00005B21 07                      	pop	es ; ***
 31401 00005B22 5A                      	pop	dx
 31402 00005B23 5F                      	pop	di
 31403 00005B24 5E                      	pop	si
 31404 00005B25 7248                    	JC	short getbx
 31405                                  
 31406                                  ;	The buffer has the data setup in it (if we were to read)
 31407                                  ;	Setup the various buffer fields
 31408                                  ;
 31409                                  ;	(ds:di) = buffer address
 31410                                  ;	(es:bp) = DPB address
 31411                                  ;	(HIGH_SECTOR:DX) = sector #
 31412                                  ;	(ah) = BUF_FLAGS value
 31413                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31414                                  
 31415                                  ;hkn; SS override
 31416                                  getb20:	; MSDOS 6.0
 31417 00005B27 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31418                                  	;mov	[di+8],cx
 31419 00005B2C 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31420                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31421                                   	;mov	[di+6],dx
 31422 00005B2F 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31423                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31424                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31425 00005B32 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31426                                  	;;mov	[di+0Ch],es
 31427                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31428 00005B35 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31429                                  	; 15/12/2022
 31430 00005B38 268A4600                	mov	al,[es:bp]
 31431                                  	;mov	al,[es:bp+0]
 31432                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31433                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31434                                  	;mov	[di+4],ax
 31435 00005B3C 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31436                                  getb25:	
 31437                                  	; MSDOS 3.3
 31438                                  	;mov     ax,1
 31439                                  
 31440                                  	; MSDOS 6.0
 31441                                  	;mov	byte [di+0Ah],1
 31442 00005B3F C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31443 00005B43 31C0                    	XOR	AX,AX
 31444                                  
 31445                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31446 00005B45 09F6                    	OR	SI,SI				; FAT sector ?
 31447 00005B47 740B                    	JZ	short getb30
 31448                                  
 31449                                  	;mov	al,[es:bp+8]
 31450 00005B49 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31451                                  	
 31452                                  	; MSDOS 6.0
 31453 00005B4D 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31454                                  	;mov	ax,[es:bp+0Fh]
 31455 00005B50 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31456                                  						;  sectors
 31457                                  	; MSDOS 3.3
 31458                                  	;;mov	ah,[es:bp+0Fh]
 31459                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31460                                  
 31461                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31462                                  ;		is set
 31463                                  
 31464                                  getb30:	
 31465                                  	; MSDOS 6.0
 31466                                  	;mov	[di+0Bh],ax
 31467 00005B54 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31468                                  
 31469                                  	; MSDOS 3.3
 31470                                  	;;mov	[di+8],ax ; 15/08/2018	
 31471                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31472                                  
 31473 00005B57 E8CEFE                  	CALL	PLACEBUF
 31474                                  
 31475                                  ;hkn; SS override for next 4
 31476                                  getb35: 
 31477                                  	; 17/12/2022
 31478                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31479                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31480                                  	;MOV	[SS:CURBUF+2],DS
 31481                                  	;MOV	[SS:LastBuffer+2],DS
 31482                                  	;MOV	[SS:CURBUF],DI
 31483                                  	;MOV	[SS:LastBuffer],DI
 31484                                  	;CLC
 31485                                  
 31486                                  	; 17/12/2022
 31487                                  	; 07/12/2022
 31488                                  	; Retro DOS v4.0
 31489 00005B5A 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31490 00005B5F 36893E[1E00]            	mov	[ss:LastBuffer],di
 31491 00005B64 F8                      	clc
 31492                                  getb35x: ; 28/07/2019
 31493 00005B65 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31494 00005B6A 36893E[E205]            	MOV	[ss:CURBUF],di
 31495                                  
 31496                                  ;	Return with 'C' set appropriately
 31497                                  ;	(dx) = caller's original value
 31498                                  
 31499                                  getbx:	
 31500 00005B6F 16                      	push	ss
 31501 00005B70 1F                      	pop	ds
 31502                                  	;retn
 31503                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31504                                  getbuffrb_retn:
 31505                                  ;flushbuf_retn:	; 17/12/2022
 31506 00005B71 C3                      	retn
 31507                                  
 31508                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31509                                  ;----------------------------------------------------------------------------
 31510                                  ; Input:
 31511                                  ;	DS = DOSGROUP
 31512                                  ;	AL = Physical unit number local buffers only
 31513                                  ;	   = -1 for all units and all remote buffers
 31514                                  ; Function:
 31515                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31516                                  ;	Carry set if error (user FAILed to I 24)
 31517                                  ;	    Flush operation completed.
 31518                                  ; DS Preserved, all others destroyed (ES too)
 31519                                  ;----------------------------------------------------------------------------
 31520                                  
 31521                                  	; 20/05/2019 - Retro DOS v4.0
 31522                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31523                                  
 31524                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31525                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31526                                  FLUSHBUF:
 31527                                  	; MSDOS 3.3
 31528                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31529                                  	;lds	di,[BUFFHEAD]
 31530                                  
 31531                                  	; MSDOS 6.0
 31532 00005B72 E89AFE                  	call	GETCURHEAD
 31533                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31534 00005B75 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31535 00005B7B 7508                    	jnz	short scan_buf_queue
 31536 00005B7D 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31537 00005B83 7423                    	je	short end_scan
 31538                                  	
 31539                                  scan_buf_queue:
 31540 00005B85 E82900                  	call	CHECKFLUSH
 31541                                  	;push	ax  ; MSDOS 3.3
 31542                                  	; MSDOS 6.0
 31543                                  	;mov	ah,[di+4]
 31544 00005B88 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31545 00005B8B 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31546 00005B90 7408                    	je	short free_the_buf
 31547                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31548 00005B92 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31549 00005B98 7405                    	jz	short dont_free_the_buf
 31550                                  	; MSDOS 3.3
 31551                                  	;;mov	al,[di+4]
 31552                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31553                                  	;cmp	[SS:WPERR],al					;hkn;
 31554                                  	; 15/08/2018
 31555                                  	;jne	short dont_free_the_buf	
 31556                                  free_the_buf:
 31557                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31558 00005B9A C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31559                                  dont_free_the_buf:
 31560                                  	;pop	ax  ; MSDOS 3.3 	   	
 31561                                  
 31562                                  	; MSDOS 3.3
 31563                                  	;mov	di,[DI]
 31564                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31565                                  	;
 31566                                  	; 15/08/2018
 31567                                  	;lds	di,[di]
 31568                                  	;
 31569                                  	;cmp	di,-1 ; 0FFFFh
 31570                                  	;jnz	short scan_buf_queue 
 31571                                  	
 31572                                  	; MSDOS 6.0
 31573 00005B9F 8B3D                    	mov	di,[di]
 31574                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31575 00005BA1 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31576 00005BA6 75DD                    	jne	short scan_buf_queue
 31577                                  
 31578                                  end_scan:
 31579 00005BA8 16                      	push	ss
 31580 00005BA9 1F                      	pop	ds
 31581                                  	; 01/08/2018 - Retro DOS v3.0
 31582                                  	;cmp	byte [FAILERR],0
 31583                                  	;jne	short bad_flush
 31584                                  	;retn
 31585                                  ;bad_flush:
 31586                                  	;stc
 31587                                  	;retn
 31588                                  
 31589                                  	; 17/12/2022
 31590                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31591                                  	; 01/08/2018 - Retro DOS v3.0
 31592 00005BAA 803E[4A03]01            	cmp	byte [FAILERR],1
 31593 00005BAF F5                      	cmc
 31594                                  flushbuf_retn:
 31595 00005BB0 C3                      	retn
 31596                                  	
 31597                                  	; 17/12/2022
 31598                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31599                                  	;cmp	byte [FAILERR],0
 31600                                  	;jne	short bad_flush
 31601                                  	;retn
 31602                                  ;bad_flush:
 31603                                  	;stc
 31604                                  	;retn
 31605                                  
 31606                                  ;----------------------------------------------------------------------------
 31607                                  ;
 31608                                  ; Procedure Name : CHECKFLUSH
 31609                                  ;
 31610                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31611                                  ;	   DS:DI - pointer to buffer
 31612                                  ;
 31613                                  ; Function : Write out a buffer if it is dirty
 31614                                  ;
 31615                                  ; Carry set if problem (currently user FAILed to I 24)
 31616                                  ;
 31617                                  ;----------------------------------------------------------------------------
 31618                                  
 31619                                  CHECKFLUSH:
 31620                                  	; MSDOS 6.0
 31621 00005BB1 B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31622                                  	;cmp	[di+4],ah
 31623 00005BB3 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31624 00005BB6 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31625 00005BB8 38C4                    	CMP	AH,AL			; 
 31626 00005BBA 7406                    	JZ	short DOBUFFER		; do this buffer
 31627                                  	;cmp	al,[di+4]
 31628 00005BBC 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31629 00005BBF F8                      	CLC
 31630 00005BC0 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31631                                  DOBUFFER:
 31632                                  	;test	byte [di+5],40h
 31633 00005BC2 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31634 00005BC6 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31635 00005BC8 50                      	PUSH	AX
 31636                                  	;push	word [di+4]
 31637 00005BC9 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31638 00005BCC E80B00                  	CALL	BUFWRITE
 31639 00005BCF 58                      	POP	AX
 31640 00005BD0 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31641                                  	;and	ah,0BFh
 31642 00005BD2 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31643                                  	;mov	[di+4],ax
 31644 00005BD5 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31645                                  LEAVE_BUF:
 31646 00005BD8 58                      	POP	AX			; Search info
 31647                                  checkflush_retn:
 31648 00005BD9 C3                      	retn
 31649                                  
 31650                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31651                                  ;----------------------------------------------------------------------------
 31652                                  ;
 31653                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31654                                  ;
 31655                                  ;	ENTRY	DS:DI Points to the buffer
 31656                                  ;
 31657                                  ;	EXIT	Buffer marked free
 31658                                  ;		Carry set if error (currently user FAILed to I 24)
 31659                                  ;
 31660                                  ;	USES	All buf DS:DI
 31661                                  ;		HIGH_SECTOR
 31662                                  ;----------------------------------------------------------------------------
 31663                                  
 31664                                  	; 20/05/2019 - Retro DOS v4.0
 31665                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31666                                  
 31667                                  
 31668                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31669                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31670                                  
 31671                                  BUFWRITE:
 31672                                  	; 10/09/2018
 31673                                  	; 01/08/2018 - Retro DOS v3.0
 31674                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31675 00005BDA B8FF00                  	MOV	AX,00FFH
 31676                                  	;xchg	ax,[di+4]
 31677 00005BDD 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31678 00005BE0 3CFF                    	CMP	AL,0FFH
 31679 00005BE2 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31680                                  	;test	ah,40h
 31681 00005BE4 F6C440                  	test	AH,buf_dirty
 31682 00005BE7 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31683                                  	; MSDOS 6.0
 31684 00005BE9 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31685                                  
 31686                                  ;hkn; SS override
 31687 00005BEC 363A06[2203]            	CMP	AL,[SS:WPERR]
 31688 00005BF1 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31689                                  
 31690                                  ;hkn; SS override
 31691                                  	; MSDOS 6.0
 31692 00005BF3 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31693                                  	
 31694                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31695                                  	;les	bp,[di+13] ; MSDOS 6.0
 31696 00005BF7 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31697                                  	;;lea	bx,[di+16]
 31698                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31699 00005BFA 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31700                                  	;mov	dx,[di+6]
 31701 00005BFD 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31702                                  	
 31703                                  	; MSDOS 6.0
 31704                                  	;mov	cx,[di+8]
 31705 00005C00 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31706                                  
 31707                                  ;hkn; SS override
 31708 00005C03 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31709 00005C08 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31710                                  	; MSDOS 3.3
 31711                                  	;; mov	cx,[DI+8]
 31712                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31713                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31714 00005C0B 30ED                    	XOR	CH,CH
 31715                                  	;;mov	ah,ch ; MSDOS 3.3
 31716                                  
 31717                                  ;hkn; SS override for ALLOWED
 31718                                  	;mov	byte [SS:ALLOWED],18h
 31719 00005C0D 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31720                                  	;test	byte [di+5],8
 31721                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31722                                  	;test	ah,8
 31723 00005C13 F6C408                  	test	AH,buf_isDATA
 31724 00005C16 7406                    	JZ	short NO_IGNORE
 31725                                  	;or	byte [SS:ALLOWED],20h
 31726 00005C18 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31727                                  NO_IGNORE:
 31728                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31729                                  	; MSDOS 6.0
 31730                                  	;mov	ax,[di+11]
 31731 00005C1E 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31732                                  
 31733 00005C21 57                      	PUSH	DI		; Save buffer pointer
 31734 00005C22 31FF                    	XOR	DI,DI		; Indicate failure
 31735                                  
 31736 00005C24 1E                      	push	ds ; *
 31737 00005C25 53                      	push	bx ; **
 31738                                  WRTAGAIN:
 31739 00005C26 57                      	push	di ; ***
 31740 00005C27 51                      	push	cx ; ****
 31741 00005C28 50                      	push	ax ; *****
 31742                                  	;MOV	CX,1
 31743                                  	; 17/12/2022
 31744                                  	; ch = 0
 31745 00005C29 B101                    	mov	cl,1 ; 24/07/2019
 31746                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31747                                  	;mov	cx,1
 31748 00005C2B 53                      	push	bx ; ******
 31749 00005C2C 52                      	push	dx ; *******
 31750 00005C2D 1E                      	push	ds ; ********
 31751                                  
 31752                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31753                                  
 31754                                  	; MSDOS 6.0
 31755 00005C2E 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31756 00005C34 7418                    	jz	short NBUFFINHMA
 31757 00005C36 51                      	push	cx
 31758 00005C37 06                      	push	es
 31759 00005C38 89DE                    	mov	si,bx
 31760 00005C3A 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31761 00005C3E D1E9                    	shr	cx,1
 31762 00005C40 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31763 00005C45 89FB                    	mov	bx,di
 31764 00005C47 FC                      	cld
 31765 00005C48 F3A5                    	rep	movsw
 31766 00005C4A 06                      	push	es
 31767 00005C4B 1F                      	pop	ds
 31768 00005C4C 07                      	pop	es
 31769 00005C4D 59                      	pop	cx
 31770                                  NBUFFINHMA:
 31771 00005C4E E8E1DB                  	call	DWRITE		; Write out the dirty buffer
 31772 00005C51 1F                      	pop	ds ; ********
 31773 00005C52 5A                      	pop	dx ; *******
 31774 00005C53 5B                      	pop	bx ; ******
 31775 00005C54 58                      	pop	ax ; *****
 31776 00005C55 59                      	pop	cx ; ****
 31777 00005C56 5F                      	pop	di ; ***
 31778 00005C57 7201                    	JC	short NOSET
 31779 00005C59 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31780                                  NOSET:				;	succeedes.
 31781 00005C5A 01C2                    	ADD	DX,AX
 31782 00005C5C E2C8                    	LOOP	WRTAGAIN
 31783 00005C5E 5B                      	pop	bx ; **
 31784 00005C5F 1F                      	pop	ds ; *
 31785 00005C60 09FF                    	OR	DI,DI		; Clears carry
 31786 00005C62 7501                    	JNZ	short BWROK	; At least one write worked
 31787 00005C64 F9                      	STC			; DI never got INCed, all writes failed.
 31788                                  BWROK:	
 31789 00005C65 5F                      	POP	DI
 31790 00005C66 C3                      	retn
 31791                                  
 31792                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31793                                  ;----------------------------------------------------------------------------
 31794                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31795                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31796                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31797                                  ;	code and time
 31798                                  ;
 31799                                  ;	ENTRY	ES:BP = drive parameter block
 31800                                  ;
 31801                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31802                                  ;		[SC_DRIVE]= drive #
 31803                                  ;
 31804                                  ;	USES	Flags
 31805                                  ;----------------------------------------------------------------------------
 31806                                  
 31807                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31808                                  ; 04/05/2019 - Retro DOS v4.0
 31809                                  
 31810                                  SET_RQ_SC_PARMS:
 31811                                  ;hkn; SS override for all variables used in this procedure.
 31812 00005C67 50                      	push	ax
 31813                                  	;mov	ax,[es:bp+2]
 31814 00005C68 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31815 00005C6C 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31816                                  	;;mov	al,[es:bp+0]
 31817                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31818                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31819                                  	; 15/12/2022
 31820 00005C70 268A4600                	mov	al,[ES:BP]
 31821 00005C74 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31822 00005C78 58                      	pop	ax
 31823                                  srspx:	
 31824 00005C79 C3                      	retn					;LB. return
 31825                                  
 31826                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31827                                  ;----------------------------------------------------------------------------
 31828                                  ; Input:
 31829                                  ;	none
 31830                                  ; Function:
 31831                                  ;	increment dirty buffers count
 31832                                  ; Output:
 31833                                  ;	dirty buffers count is incremented
 31834                                  ;
 31835                                  ; All registers preserved
 31836                                  ;----------------------------------------------------------------------------
 31837                                  
 31838                                  INC_DIRTY_COUNT:
 31839                                  ;; BUGBUG  ---- remove this routine
 31840                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31841 00005C7A 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31842 00005C7F C3                      	retn
 31843                                  
 31844                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31845                                  ;----------------------------------------------------------------------------
 31846                                  ; Input:
 31847                                  ;	none
 31848                                  ; Function:
 31849                                  ;	decrement dirty buffers count
 31850                                  ; Output:
 31851                                  ;	dirty buffers count is decremented
 31852                                  ;
 31853                                  ; All registers preserved
 31854                                  ;----------------------------------------------------------------------------
 31855                                  
 31856                                  DEC_DIRTY_COUNT:
 31857 00005C80 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31858 00005C86 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31859 00005C88 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31860                                  					; error condition to underflow here? ;hkn;
 31861                                  ddcx:	
 31862 00005C8D C3                      	retn
 31863                                  
 31864                                  ;============================================================================
 31865                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31866                                  ;============================================================================
 31867                                  ; 02/08/2018 - Retro DOS v3.0
 31868                                  ; 29/04/2019 - Retro DOS v4.0
 31869                                  
 31870                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31871                                  
 31872                                  ; Pseudo EXEC system call for DOS
 31873                                  
 31874                                  ;	TITLE	MSPROC - process maintenance
 31875                                  ;	NAME	MSPROC
 31876                                  
 31877                                  ; =========================================================================
 31878                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31879                                  ;	I/O specs are defined in DISPATCH.
 31880                                  ;
 31881                                  ;	$WAIT
 31882                                  ;	$EXEC
 31883                                  ;	$Keep_process
 31884                                  ;	Stay_resident
 31885                                  ;	$EXIT
 31886                                  ;	$ABORT
 31887                                  ;	abort_inner
 31888                                  ;
 31889                                  ;	Modification history:
 31890                                  ;
 31891                                  ;		Created: ARR 30 March 1983
 31892                                  ;		AN000	version 4.0 jan. 1988
 31893                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31894                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31895                                  ;
 31896                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31897                                  ;
 31898                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31899                                  ;		       dossym.inc. 7/30/90
 31900                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31901                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31902                                  ;		       stack is provided at the end of the program. Note that
 31903                                  ;		       only SP is changed.
 31904                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31905                                  ;
 31906                                  ;		M028 - 4b04 implementation
 31907                                  ;
 31908                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31909                                  ;			in memory block >= 64K, sp = 0. If memory block
 31910                                  ;			obtained is <64K, point sp at the end of the memory
 31911                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31912                                  ;			added for a stack segment which may be needed if it
 31913                                  ;			is loaded in low memory situations.
 31914                                  ;
 31915                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31916                                  ;
 31917                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31918                                  ;			a bad environment if it reached 32767 bytes. Changed
 31919                                  ;			to allow 32768 bytes of environment.
 31920                                  ;
 31921                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31922                                  ;		       COM file high. Also ensure that if the biggest block
 31923                                  ;		       into which we load the com file is less than 64K then
 31924                                  ;		       we provide atleast 256 bytes of stack to the user.
 31925                                  ;
 31926                                  ;		M050 - Made Lie table search CASE insensitive
 31927                                  ;
 31928                                  ;		M060 - Removed special version table from the kernal and
 31929                                  ;                      put it in a device drive which puts the address
 31930                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31931                                  ;		       as a DWORD.
 31932                                  ;
 31933                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31934                                  ;		       entry do not try to load low if there is no space in
 31935                                  ;		       UMBs.
 31936                                  ;
 31937                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31938                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31939                                  ;		       change return address to LeaveDos if AL=5.
 31940                                  ;
 31941                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31942                                  ;                      controls building a version of MSDOS.SYS that only
 31943                                  ;                      runs programs from a fixed list (defined in the
 31944                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31945                                  ;                      for details.  This feature is used to build a
 31946                                  ;                      "special" version of DOS that can be handed out to
 31947                                  ;                      OEM/ISV customers as part of a "service" disk.
 31948                                  ;
 31949                                  ; =========================================================================
 31950                                  
 31951                                  ;SAVEXIT  EQU  10
 31952                                  
 31953                                  ;BREAK	<$WAIT - return previous process error code>
 31954                                  ; =========================================================================
 31955                                  ;	$WAIT - Return previous process error code.
 31956                                  ;
 31957                                  ;	Assembler usage:
 31958                                  ;
 31959                                  ;	    MOV     AH, WaitProcess
 31960                                  ;	    INT     int_command
 31961                                  ;
 31962                                  ;	ENTRY	none
 31963                                  ;	EXIT	(ax) = exit code
 31964                                  ;	USES	all
 31965                                  ; =========================================================================
 31966                                  
 31967                                  	; 20/05/2019 - Retro DOS v4.0
 31968                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 31969                                  
 31970                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31971                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 31972                                  _$WAIT:
 31973                                  	; 02/08/2018 - Retro DOS v3.0
 31974                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 31975                                  
 31976 00005C8E 31C0                    	xor	AX,AX
 31977 00005C90 368706[3403]            	xchg	AX,[ss:exit_code]
 31978 00005C95 E9ECA9                  	jmp	SYS_RET_OK
 31979                                  
 31980                                  ; =========================================================================
 31981                                  ;BREAK <$exec - load/go a program>
 31982                                  ;	EXEC.ASM - EXEC System Call
 31983                                  ;
 31984                                  ;
 31985                                  ; Assembler usage:
 31986                                  ;	    lds     DX, Name
 31987                                  ;	    les     BX, Blk
 31988                                  ;	    mov     AH, Exec
 31989                                  ;	    mov     AL, FUNC
 31990                                  ;	    int     INT_COMMAND
 31991                                  ;
 31992                                  ;	AL  Function
 31993                                  ;	--  --------
 31994                                  ;	 0  Load and execute the program.
 31995                                  ;	 1  Load, create the program header but do not
 31996                                  ;	    begin execution.
 31997                                  ;	 3  Load overlay. No header created.
 31998                                  ;
 31999                                  ;	    AL = 0 -> load/execute program
 32000                                  ;
 32001                                  ;	    +---------------------------+
 32002                                  ;	    | WORD segment address of	|
 32003                                  ;	    | environment.		|
 32004                                  ;	    +---------------------------+
 32005                                  ;	    | DWORD pointer to ASCIZ	|
 32006                                  ;	    | command line at 80h	|
 32007                                  ;	    +---------------------------+
 32008                                  ;	    | DWORD pointer to default	|
 32009                                  ;	    | FCB to be passed at 5Ch	|
 32010                                  ;	    +---------------------------+
 32011                                  ;	    | DWORD pointer to default	|
 32012                                  ;	    | FCB to be passed at 6Ch	|
 32013                                  ;	    +---------------------------+
 32014                                  ;
 32015                                  ;	    AL = 1 -> load program
 32016                                  ;
 32017                                  ;	    +---------------------------+
 32018                                  ;	    | WORD segment address of	|
 32019                                  ;	    | environment.		|
 32020                                  ;	    +---------------------------+
 32021                                  ;	    | DWORD pointer to ASCIZ	|
 32022                                  ;	    | command line at 80h	|
 32023                                  ;	    +---------------------------+
 32024                                  ;	    | DWORD pointer to default	|
 32025                                  ;	    | FCB to be passed at 5Ch	|
 32026                                  ;	    +---------------------------+
 32027                                  ;	    | DWORD pointer to default	|
 32028                                  ;	    | FCB to be passed at 6Ch	|
 32029                                  ;	    +---------------------------+
 32030                                  ;	    | DWORD returned value of	|
 32031                                  ;	    | CS:IP			|
 32032                                  ;	    +---------------------------+
 32033                                  ;	    | DWORD returned value of	|
 32034                                  ;	    | SS:IP			|
 32035                                  ;	    +---------------------------+
 32036                                  ;
 32037                                  ;	    AL = 3 -> load overlay
 32038                                  ;
 32039                                  ;	    +---------------------------+
 32040                                  ;	    | WORD segment address where|
 32041                                  ;	    | file will be loaded.	|
 32042                                  ;	    +---------------------------+
 32043                                  ;	    | WORD relocation factor to |
 32044                                  ;	    | be applied to the image.	|
 32045                                  ;	    +---------------------------+
 32046                                  ;
 32047                                  ; Returns:
 32048                                  ;	    AX = error_invalid_function
 32049                                  ;	       = error_bad_format
 32050                                  ;	       = error_bad_environment
 32051                                  ;	       = error_not_enough_memory
 32052                                  ;	       = error_file_not_found
 32053                                  ; =========================================================================
 32054                                  ;
 32055                                  ;   Revision history:
 32056                                  ;
 32057                                  ;	 A000	version 4.00  Jan. 1988
 32058                                  ;
 32059                                  ; =========================================================================
 32060                                  
 32061                                  Exec_Internal_Buffer		EQU	OPENBUF
 32062                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32063                                  
 32064                                  ; =========================================================================
 32065                                  
 32066                                  ;IF1		; warning message on buffers
 32067                                  ;%out	Please make sure that the following are contiguous and of the
 32068                                  ;%out	following sizes:
 32069                                  ;%out
 32070                                  ;%out	OpenBuf     128
 32071                                  ;%out	RenBuf	    128
 32072                                  ;%out	SearchBuf    53
 32073                                  ;%out	DummyCDS    curdirLen
 32074                                  ;ENDIF
 32075                                  
 32076                                  ; =========================================================================
 32077                                  
 32078                                  ; =========================================================================
 32079                                  ;
 32080                                  ; =========================================================================
 32081                                  
 32082                                  	; 20/05/2019 - Retro DOS v4.0
 32083                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32084                                  
 32085                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32086                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32087                                  	
 32088                                  _$EXEC:
 32089                                  	; 02/08/2018 - Retro DOS v3.0
 32090                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32091                                  
 32092                                  EXEC001S:
 32093                                  	;LocalVar    Exec_Blk		,DWORD
 32094                                  	;LocalVar    Exec_Func		,BYTE
 32095                                  	;LocalVar    Exec_Load_High	,BYTE
 32096                                  	;LocalVar    Exec_FH		,WORD
 32097                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32098                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32099                                  	;LocalVar    Exec_Environ	,WORD
 32100                                  	;LocalVar    Exec_Size		,WORD
 32101                                  	;LocalVar    Exec_Load_Block	,WORD
 32102                                  	;LocalVar    Exec_DMA		,WORD
 32103                                  	;LocalVar    ExecNameLen 	,WORD
 32104                                  	;LocalVar    ExecName		,DWORD
 32105                                  	;
 32106                                  	;LocalVar    Exec_DMA_Save	,WORD
 32107                                  	;LocalVar    Exec_NoStack	,BYTE
 32108                                  
 32109                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32110                                  	;%define	Exec_Blk	dword [bp-4]
 32111                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32112                                  	%define		Exec_BlkL	word [bp-4]	
 32113                                  	%define		Exec_BlkH	word [bp-2]
 32114                                  	%define		Exec_Func	byte [bp-5]
 32115                                  	%define		Exec_Load_High	byte [bp-6]
 32116                                  	%define		Exec_FH		word [bp-8]
 32117                                  	%define		Exec_Rel_Fac	word [bp-10]
 32118                                  	%define		Exec_Res_Len_Para word [bp-12]
 32119                                  	%define		Exec_Environ	word [bp-14]
 32120                                  	%define		Exec_Size	word [bp-16]
 32121                                  	%define		Exec_Load_Block	word [bp-18]
 32122                                  	%define		Exec_DMA	word [bp-20]
 32123                                  	%define		ExecNameLen	word [bp-22]
 32124                                  	;%define	ExecName	dword [bp-26]
 32125                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32126                                  	%define		ExecNameL	word [bp-26]	
 32127                                  	%define		ExecNameH	word [bp-24]
 32128                                  	; MSDOS 6.0
 32129                                  	%define		Exec_DMA_Save	word [bp-28]
 32130                                  	%define		Exec_NoStack	byte [bp-29]
 32131                                  	
 32132                                  	; ==================================================================
 32133                                  	; validate function
 32134                                  	; ==================================================================
 32135                                  		      	
 32136                                  	; M068 - Start
 32137                                  	;
 32138                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32139                                  	; possibility that the count may not be decremented all the way to
 32140                                  	; 0. A typical case is if the program for which we intended to keep 
 32141                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32142                                  	; calls), exits pre-maturely due to error conditions.
 32143                                  
 32144                                  	; MSDOS 6.0
 32145 00005C98 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32146                                  
 32147                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32148                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32149                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32150                                  
 32151 00005C9E 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32152                                  	;jne	short @f
 32153 00005CA0 7505                    	jne	short Exec_@f		; N: continue
 32154                                  					; Y: change ret addr. to LeaveDos.
 32155 00005CA2 59                      	pop	cx			; Note CX is not input to ExecReady
 32156 00005CA3 B9[4C04]                	mov	cx,LeaveDOS
 32157 00005CA6 51                      	push	cx
 32158                                  ;@@:
 32159                                  Exec_@f:
 32160                                  	; M068 - End
 32161                                  	
 32162                                  	;Enter
 32163                                  
 32164 00005CA7 55                      	push	bp
 32165 00005CA8 89E5                    	mov	bp,sp
 32166                                  	;;sub	sp,26	; MSDOS 3.3
 32167                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32168                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32169                                  	; 17/12/2022
 32170                                  	; 20/05/2019
 32171 00005CAA 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32172                                  
 32173                                  	; MSDOS 6.0
 32174 00005CAD 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32175                                  					; M030
 32176 00005CAF 7614                    	jna	short Exec_Check_2
 32177                                  
 32178                                  	; MSDOS 3.3
 32179                                  	;cmp	AL,3
 32180                                  	;jna	short Exec_Check_2
 32181                                  
 32182                                  Exec_Bad_Fun:
 32183 00005CB1 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32184                                  					; Extended Error Locus	;smr;SS Override
 32185                                  	;mov	al,1
 32186 00005CB7 B001                    	mov	al,error_invalid_function
 32187                                  
 32188                                  Exec_Ret_Err:
 32189                                  	;Leave
 32190 00005CB9 89EC                    	mov	sp,bp
 32191 00005CBB 5D                      	pop	bp
 32192                                  	;transfer SYS_RET_ERR
 32193 00005CBC E9CEA9                  	jmp	SYS_RET_ERR
 32194                                  
 32195                                  	; MSDOS 6.0
 32196                                  ExecReadyJ:
 32197 00005CBF E80318                  	call	ExecReady		; M028
 32198 00005CC2 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32199                                  
 32200                                  Exec_Check_2:
 32201 00005CC5 3C02                    	cmp	AL,2			
 32202 00005CC7 74E8                    	je	short Exec_Bad_Fun
 32203                                  
 32204                                  	; MSDOS 6.0
 32205 00005CC9 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32206 00005CCB 74E4                    	je	short Exec_Bad_Fun
 32207                                  	
 32208 00005CCD 3C05                    	cmp	al,5			; M028 ; M030
 32209 00005CCF 74EE                    	je	short ExecReadyJ	; M028
 32210                                  
 32211                                  	;mov	[bp-4],bx
 32212 00005CD1 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32213                                  	;mov	[bp-2],es
 32214 00005CD4 8C46FE                  	mov	Exec_BlkH,ES
 32215                                  	;mov	[bp-5],al
 32216 00005CD7 8846FB                  	mov	Exec_Func,AL
 32217                                  	;mov	byte [bp-6],0
 32218 00005CDA C646FA00                	mov	Exec_Load_High,0
 32219                                  
 32220                                  	;mov	[bp-26],dx
 32221 00005CDE 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32222                                  	;mov	[bp-24],ds
 32223 00005CE1 8C5EE8                  	mov	ExecNameH,DS
 32224 00005CE4 89D6                    	mov	SI,DX			; move pointer to convenient place
 32225                                  	;invoke	DStrLen
 32226 00005CE6 E885B5                  	call	DStrLen
 32227                                  	;mov	[bp-22],cx
 32228 00005CE9 894EEA                  	mov	ExecNameLen,CX		; save length
 32229                                  
 32230                                  	; MSDOS 6.0
 32231 00005CEC 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32232 00005CF0 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32233                                  
 32234 00005CF4 30C0                    	xor	AL,AL			; open for reading
 32235 00005CF6 55                      	push	BP
 32236                                  
 32237                                  	; MSDOS 6.0
 32238                                  	;or	byte [ss:DOS_FLAG],1
 32239 00005CF7 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32240                                  					; the redir that this open call is
 32241                                  					; due to an exec.
 32242                                  
 32243                                  	;invoke	$OPEN			; is the file there?
 32244 00005CFD E80B13                  	call	_$OPEN
 32245                                  
 32246                                  	; MSDOS 6.0
 32247 00005D00 9C                      	pushf
 32248                                  	; 02/06/2019
 32249                                  	;and	byte [ss:DOS_FLAG],0FEh
 32250 00005D01 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32251 00005D07 9D                      	popf
 32252                                  
 32253 00005D08 5D                      	pop	BP
 32254                                  
 32255                                  	; MSDOS 3.3 & MSDOS 6.0
 32256 00005D09 72AE                    	jc	short Exec_Ret_Err
 32257                                  
 32258                                  	;mov	[bp-8],ax
 32259 00005D0B 8946F8                  	mov	Exec_FH,AX
 32260 00005D0E 89C3                    	mov	BX,AX
 32261 00005D10 30C0                    	xor	AL,AL
 32262                                  	;invoke	$Ioctl
 32263 00005D12 E8F8C5                  	call	_$IOCTL
 32264 00005D15 7207                    	jc	short Exec_BombJ
 32265                                  
 32266                                  	;test	dl,80h
 32267 00005D17 F6C280                  	test	DL,devid_ISDEV
 32268 00005D1A 740A                    	jz	short Exec_Check_Environ
 32269                                  
 32270                                  	;mov	al,2
 32271 00005D1C B002                    	mov	AL,error_file_not_found
 32272                                  Exec_BombJ:
 32273 00005D1E E9CA00                  	jmp	Exec_Bomb
 32274                                  
 32275                                  BadEnv:
 32276                                  	;mov	al,0Ah
 32277 00005D21 B00A                    	mov	AL,error_bad_environment
 32278 00005D23 E9C500                  	jmp	Exec_Bomb
 32279                                  
 32280                                  Exec_Check_Environ:
 32281                                  	;mov	word [bp-18],0
 32282 00005D26 C746EE0000              	mov	Exec_Load_Block,0
 32283                                  	;mov	word [bp-14],0
 32284 00005D2B C746F20000              	mov	Exec_Environ,0
 32285                                  					; overlays... no environment
 32286                                  	;test	byte [bp-5],2
 32287 00005D30 F646FB02                	test	Exec_Func,exec_func_overlay
 32288 00005D34 7552                    	jnz	short Exec_Read_Header
 32289                                  
 32290                                  	;lds	si,[bp-4]
 32291 00005D36 C576FC                  	lds	SI,Exec_Blk		; get block
 32292 00005D39 8B04                    	mov	ax,[SI]
 32293                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32294 00005D3B 09C0                    	or	AX,AX
 32295 00005D3D 750C                    	jnz	short Exec_Scan_Env
 32296                                  
 32297 00005D3F 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32298                                  	;mov	ax,[44]
 32299 00005D44 A12C00                  	mov	AX,[PDB.ENVIRON]
 32300                                  
 32301                                  ; MSDOS 6.0
 32302                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32303                                  ;
 32304                                  ; Exec_environ is being correctly initialized after the environment has been
 32305                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32306                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32307                                  ; parent's environment.
 32308                                  ;	mov	Exec_Environ,AX
 32309                                  ;
 32310                                  ;----------------------------------------------------------------------------
 32311                                  
 32312                                  	;mov	[bp-14],ax
 32313                                  	;mov	Exec_Environ,ax
 32314                                  
 32315 00005D47 09C0                    	or	AX,AX
 32316 00005D49 743D                    	jz	short Exec_Read_Header
 32317                                  
 32318                                  Exec_Scan_Env:
 32319 00005D4B 8EC0                    	mov	ES,AX
 32320 00005D4D 31FF                    	xor	DI,DI
 32321                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32322 00005D4F B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32323 00005D52 30C0                    	xor	AL,AL
 32324                                  
 32325                                  Exec_Get_Environ_Len:
 32326 00005D54 F2AE                    	repnz	scasb			; find that nul byte
 32327 00005D56 75C9                    	jnz	short BadEnv
 32328                                  
 32329 00005D58 49                      	dec	CX			; Dec CX for the next nul byte test
 32330 00005D59 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32331                                  
 32332 00005D5B AE                      	scasb				; is there another nul byte?
 32333 00005D5C 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32334                                  
 32335 00005D5E 57                      	push	DI
 32336                                  	;lea	bx,[DI+11h]
 32337 00005D5F 8D5D11                  	lea	BX,[DI+0Fh+2]
 32338                                  	;add	bx,[bp-22]
 32339 00005D62 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32340                                  					; remember argv[0] length
 32341                                  					; round up and remember argc
 32342 00005D65 B104                    	mov	CL,4
 32343 00005D67 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32344 00005D69 06                      	push	ES
 32345                                  	;invoke	$Alloc			; can we get the space?
 32346 00005D6A E84406                  	call	_$ALLOC
 32347 00005D6D 1F                      	pop	DS
 32348 00005D6E 59                      	pop	CX
 32349                                  
 32350                                  	;jnc	short Exec_Save_Environ
 32351                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32352                                  	; 17/12/2022
 32353 00005D6F 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32354                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32355                                  	;jnc	short Exec_Save_Environ
 32356                                  	;jmp	SHORT Exec_No_Mem
 32357                                  
 32358                                  Exec_Save_Environ:
 32359 00005D71 8EC0                    	mov	ES,AX
 32360                                  	;mov	[bp-14],ax
 32361 00005D73 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32362 00005D76 31F6                    	xor	SI,SI
 32363 00005D78 89F7                    	mov	DI,SI
 32364 00005D7A F3A4                    	rep	movsb			; copy the environment
 32365 00005D7C B80100                  	mov	AX,1
 32366 00005D7F AB                      	stosw
 32367                                  	;lds	si,[bp-26]
 32368 00005D80 C576E6                  	lds	SI,ExecName
 32369                                  	;mov	cx,[bp-22]
 32370 00005D83 8B4EEA                  	mov	CX,ExecNameLen
 32371 00005D86 F3A4                    	rep	movsb
 32372                                  
 32373                                  Exec_Read_Header:
 32374                                  	; We read in the program header into the above data area and
 32375                                  	; determine where in this memory the image will be located.
 32376                                  
 32377                                  	;Context DS
 32378 00005D88 16                      	push	ss
 32379 00005D89 1F                      	pop	ds
 32380                                  	;mov	cx,26
 32381 00005D8A B91A00                  	mov	CX,exec_header_len	; header size
 32382 00005D8D BA[C80F]                	mov	DX,exec_signature
 32383 00005D90 06                      	push	ES
 32384 00005D91 1E                      	push	DS
 32385 00005D92 E88304                  	call	ExecRead
 32386 00005D95 1F                      	pop	DS
 32387 00005D96 07                      	pop	ES
 32388 00005D97 7250                    	jc	short Exec_Bad_File
 32389                                  
 32390 00005D99 09C0                    	or	AX,AX
 32391 00005D9B 744C                    	jz	short Exec_Bad_File
 32392                                  	;cmp	ax,26
 32393 00005D9D 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32394 00005DA0 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32395                                  
 32396 00005DA2 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32397 00005DA8 7504                    	jnz	short Exec_Check_Sig
 32398                                  
 32399                                  	;mov	byte [bp-6],0FFh
 32400 00005DAA C646FAFF                	mov	Exec_Load_High,-1
 32401                                  
 32402                                  Exec_Check_Sig:
 32403 00005DAE A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32404                                  	;cmp	ax,5A4Dh ; 'MZ'
 32405 00005DB1 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32406 00005DB4 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32407                                  
 32408                                  	;cmp	ax,4D5Ah ; 'ZM'
 32409 00005DB6 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32410 00005DB9 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32411                                  
 32412                                  Exec_Com_Filej:
 32413 00005DBB E9E901                  	jmp	Exec_Com_File
 32414                                  
 32415                                  	; We have the program header... determine memory requirements
 32416                                  
 32417                                  Exec_Save_Start:
 32418 00005DBE A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32419 00005DC1 B105                    	mov	CL,5			; convert to paragraphs
 32420 00005DC3 D3E0                    	shl	AX,CL
 32421 00005DC5 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32422                                  	;mov	[bp-12],ax
 32423 00005DC9 8946F4                  	mov	Exec_Res_Len_Para,AX
 32424                                  
 32425                                  		; Do we need to allocate memory?
 32426                                  		; Yes if function is not load-overlay
 32427                                  
 32428                                  	;test	byte [bp-5],2
 32429 00005DCC F646FB02                	test	Exec_Func,exec_func_overlay
 32430 00005DD0 7445                    	jz	short Exec_Allocate	; allocation of space
 32431                                  
 32432                                  		; get load address from block
 32433                                  
 32434                                  	;les	di,[bp-4]
 32435 00005DD2 C47EFC                  	les	DI,Exec_Blk
 32436 00005DD5 268B05                  	mov	ax,[es:di]
 32437                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32438                                  	;mov	[bp-20],ax
 32439 00005DD8 8946EC                  	mov	Exec_DMA,AX
 32440                                  
 32441                                  	; 17/12/2022
 32442                                  	;;mov	ax,[es:di+2]
 32443                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32444                                  	;;mov	[bp-10],ax
 32445                                  	;mov	Exec_Rel_Fac,AX
 32446                                  
 32447                                  	; 17/12/2022
 32448                                  	; 30/11/2022 (!most proper code!)
 32449                                  	;mov	dx,[es:di+2]
 32450 00005DDB 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32451                                  	;mov	[bp-10],dx
 32452 00005DDF 8956F6                  	mov	Exec_Rel_Fac,dx
 32453                                  	; ax = Exec_DMA
 32454 00005DE2 E9DE00                  	jmp	Exec_Find_Res
 32455                                  
 32456                                  ; 17/12/2022
 32457                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32458                                  ; 27/09/2023
 32459                                  %if 0
 32460                                  	; 02/06/2019 - Retro DOS v4.0
 32461                                  	;mov	ax,[bp-20]  ; *+*
 32462                                  	mov	AX,Exec_DMA ; *+*
 32463                                  	; 10/08/2018
 32464                                  	jmp	Exec_Find_Res		; M000
 32465                                  %endif
 32466                                  
 32467                                  Exec_No_Mem:
 32468                                  	;mov	al,8
 32469 00005DE5 B008                    	mov	AL,error_not_enough_memory
 32470 00005DE7 EB02                    	jmp	short Exec_Bomb
 32471                                  
 32472                                  Exec_Bad_File:
 32473                                  	;mov	al,0Bh
 32474 00005DE9 B00B                    	mov	AL,error_bad_format
 32475                                  
 32476                                  Exec_Bomb:
 32477                                  	;mov	bx,[bp-8]
 32478 00005DEB 8B5EF8                  	mov	BX,Exec_FH
 32479 00005DEE E84004                  	call	Exec_Dealloc
 32480                                  	;LeaveCrit CritMem
 32481 00005DF1 E8ACB5                  	call	LCritMEM
 32482                                  	;save	<AX,BP>
 32483 00005DF4 50                      	push	ax
 32484 00005DF5 55                      	push	bp
 32485                                  	;invoke	$CLOSE
 32486 00005DF6 E83E0A                  	call	_$CLOSE
 32487                                  	;restore <BP,AX>
 32488 00005DF9 5D                      	pop	bp
 32489 00005DFA 58                      	pop	ax
 32490 00005DFB E9BBFE                  	jmp	Exec_Ret_Err
 32491                                  
 32492                                  Exec_Chk_Mem: 
 32493                                  
 32494                                  ; 17/12/2022
 32495                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32496                                  ;%if 0
 32497                                  	; MSDOS 6.0    			; M063 - Start
 32498                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32499                                  	; 10/06/2019
 32500 00005DFE A0[0203]                	mov	al,[AllocMethod]
 32501                                  	;mov	bl,[ss:ALLOCMSAVE]
 32502 00005E01 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32503                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32504 00005E05 881E[0203]              	mov	[AllocMethod],bl
 32505                                  	
 32506 00005E09 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32507 00005E0C 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32508                                  	;				; N: continue
 32509                                  	;
 32510 00005E0E A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32511 00005E10 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32512                                  	; 02/06/2019
 32513                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32514 00005E12 A1[8A00]                	mov	ax,[SAVE_AX]
 32515                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32516                                  					; M063 - End
 32517 00005E15 EB2B                    	jmp	short Exec_Norm_Alloc1
 32518                                  ;%endif
 32519                                  
 32520                                  ; 17/12/2022
 32521                                  %if 0
 32522                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32523                                  	; MSDOS 6.0    			; M063 - Start
 32524                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32525                                  	mov	bl,[ss:ALLOCMSAVE]
 32526                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32527                                  
 32528                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32529                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32530                                  	;				; N: continue
 32531                                  	;
 32532                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32533                                  	jz	short Exec_No_Mem	; N: no memory 
 32534                                  
 32535                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32536                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32537                                  					; M063 - End
 32538                                  %endif
 32539                                  
 32540                                  Exec_Allocate:
 32541                                  	; 09/09/2018
 32542                                  
 32543                                  	; M005 - START
 32544                                  	; If there is no STACK segment for this exe file and if this
 32545                                  	; not an overlay and the resident size is less than 64K - 
 32546                                  	; 256 bytes we shall add 256 bytes to the programs 
 32547                                  	; resident memory requirement and set Exec_SP to this value.
 32548                                  	
 32549                                  	; 17/12/2022
 32550 00005E17 29DB                    	sub	bx,bx ; 0	
 32551                                  
 32552                                  	; MSDOS 6.0
 32553                                  	;;mov	byte [bp-29],0
 32554                                  	;mov	Exec_NoStack,0
 32555                                  	; 17/12/2022
 32556 00005E19 885EE3                  	mov	Exec_NoStack,bl ; 0
 32557 00005E1C 391E[D60F]              	cmp	[exec_SS],bx ; 0
 32558                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32559 00005E20 7511                    	jne	short ea1		; Y: continue normal processing
 32560 00005E22 391E[D80F]              	cmp	[exec_SP],bx ; 0
 32561                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32562 00005E26 750B                    	jne	short ea1		; Y: continue normal processing
 32563                                  
 32564                                  	;inc	byte [bp-29]
 32565 00005E28 FE46E3                  	inc	Exec_NoStack
 32566 00005E2B 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32567 00005E2E 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32568                                  
 32569 00005E30 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32570                                  ea1:
 32571                                  	; M005 - END
 32572                                  
 32573                                  	; MSDOS 6.0			; M000 - start
 32574                                  	; 20/05/2019
 32575                                  	; (ds = ss = DOSDATA)
 32576 00005E33 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32577                                  					; Q: is the alloc strat high_first
 32578 00005E38 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32579                                  					; Y: set high_only bit
 32580 00005E3A 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32581                                  					; M000 - end
 32582                                  Exec_Norm_Alloc:
 32583 00005E3F A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32584                                  Exec_Norm_Alloc1:	; 02/06/2019
 32585                                  					; M000: attempt at allocating memory
 32586                                  	; MSDOS 3.3
 32587                                  	;push	ax			; M000
 32588                                  
 32589 00005E42 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32590 00005E45 1E                      	push	DS
 32591                                  	;invoke	$Alloc			; should have carry set and BX has max
 32592 00005E46 E86805                  	call	_$ALLOC
 32593 00005E49 1F                      	pop	DS
 32594                                  
 32595                                  	; MSDOS 6.0
 32596 00005E4A A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32597                                  	; MSDOS 3.3
 32598                                  	;pop	ax			; M000
 32599                                  
 32600 00005E4D 83C010                  	add	AX,10h			; room for header
 32601 00005E50 83FB11                  	cmp	BX,11h			; enough room for a header
 32602                                  	; MSDOS 6.0
 32603 00005E53 72A9                    	jb	short Exec_Chk_Mem	; M000
 32604                                  	; MSDOS 3.3	
 32605                                  	;jb	short Exec_No_Mem
 32606                                  
 32607 00005E55 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32608                                  	; MSDOS 6.0
 32609 00005E57 77A5                    	ja	short Exec_Chk_Mem	; M000
 32610                                  	; MSDOS 3.3
 32611                                  	;ja	short Exec_No_Mem
 32612                                  
 32613                                  	;test	byte [bp-6],0FFh
 32614 00005E59 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32615 00005E5D 7518                    	jnz	short Exec_BX_Max	; use max
 32616                                  
 32617                                  	; 09/09/2018
 32618                                  
 32619 00005E5F 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32620                                  	; MSDOS 6.0
 32621 00005E63 7299                    	jc	short Exec_Chk_Mem		; M000
 32622                                  	; MSDOS 3.3
 32623                                  	;jc	short Exec_No_Mem
 32624                                  
 32625 00005E65 39D8                    	cmp	AX,BX			; enough space?
 32626                                  	; MSDOS 6.0
 32627 00005E67 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32628                                  	; MSDOS 3.3
 32629                                  	;ja	short Exec_No_Mem
 32630                                  
 32631 00005E69 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32632 00005E6D 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32633 00005E71 7204                    	jc	short Exec_BX_Max
 32634                                  
 32635 00005E73 39D8                    	cmp	AX,BX
 32636 00005E75 7602                    	jbe	short Exec_Got_Block
 32637                                  
 32638                                  Exec_BX_Max:
 32639 00005E77 89D8                    	mov	AX,BX
 32640                                  
 32641                                  Exec_Got_Block:
 32642                                  	; 03/08/2018 - Retro DOS v3.0
 32643                                  
 32644 00005E79 1E                      	push	DS
 32645 00005E7A 89C3                    	mov	BX,AX
 32646                                  	;mov	[bp-16],bx
 32647 00005E7C 895EF0                  	mov	Exec_Size,BX
 32648                                  	;invoke	$Alloc			; get the space
 32649 00005E7F E82F05                  	call	_$ALLOC
 32650 00005E82 1F                      	pop	DS
 32651                                  	; MSDOS 6.0
 32652                                  	;jc	short Exec_Chk_Mem	; M000
 32653                                  	; MSDOS 3.3
 32654                                  	;;jc	short Exec_No_Mem
 32655                                  	; 20/05/2019
 32656 00005E83 7303                    	jnc	short ea0
 32657 00005E85 E976FF                  	jmp	Exec_Chk_Mem
 32658                                  ea0:
 32659                                  	; MSDOS 6.0
 32660 00005E88 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32661 00005E8C 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32662                                  
 32663                                  ;M029; Begin changes
 32664                                  ; This code does special handling for programs with no stack segment. If so,
 32665                                  ;check if the current block is larger than 64K. If so, we do not modify
 32666                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32667                                  ;case Exec_SS is not changed.
 32668                                  
 32669                                  	; MSDOS 6.0
 32670                                  	;cmp	byte [bp-29],0
 32671 00005E90 807EE300                	cmp	Exec_NoStack,0
 32672                                  	;je	@f
 32673 00005E94 7412                    	je	short ea2
 32674                                  
 32675 00005E96 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32676                                  	;jae	@f			; Y: Exec_SP = 0
 32677 00005E9A 730C                    	jae	short ea2
 32678                                  
 32679                                  ;Make Exec_SP point at the top of the memory block
 32680                                  
 32681 00005E9C B104                    	mov	cl,4
 32682 00005E9E D3E3                    	shl	bx,cl			; get byte offset
 32683 00005EA0 81EB0001                	sub	bx,100h			; take care of PSP
 32684 00005EA4 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32685                                  ea2:
 32686                                  ;@@:
 32687                                  ;M029; end changes
 32688                                  
 32689                                  	;mov	[bp-18],ax
 32690 00005EA8 8946EE                  	mov	Exec_Load_Block,AX
 32691 00005EAB 83C010                  	add	AX,10h
 32692                                  	;test	byte [bp-6],0FFh
 32693 00005EAE F646FAFF                	test	Exec_Load_High,-1
 32694 00005EB2 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32695                                  
 32696                                  	;add	ax,[bp-16]
 32697 00005EB4 0346F0                  	add	AX,Exec_Size		; go to end
 32698                                  	;sub	ax,[bp-12]
 32699 00005EB7 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32700 00005EBA 83E810                  	sub	AX,10h			; drop off pdb
 32701                                  
 32702                                  Exec_Use_AX:
 32703                                  	;mov	[bp-10],ax
 32704 00005EBD 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32705                                  	;mov	[bp-20],ax
 32706 00005EC0 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32707                                  
 32708                                  	; Determine the location in the file of the beginning of
 32709                                  	; the resident
 32710                                  
 32711                                  ; 17/12/2022
 32712                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32713                                  ;%if 0
 32714                                  
 32715                                  Exec_Find_Res:
 32716                                  	; MSDOS 6.0
 32717                                  	;;mov	dx,[bp-20]
 32718                                  	;mov	DX,Exec_DMA ; *+*
 32719                                  	;;mov	[bp-28],dx
 32720                                  	;mov	Exec_DMA_Save,DX
 32721                                  
 32722                                  	; 17/12/2022
 32723                                  	; AX = Exec_DMA
 32724                                  
 32725                                  	; 02/06/2019 - Retro DOS v4.0
 32726                                  	;mov	[bp-28],ax ; *+*
 32727 00005EC3 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32728                                  
 32729                                  ;%endif
 32730                                  
 32731                                  ; 17/12/2022
 32732                                  %if 0
 32733                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32734                                  Exec_Find_Res:
 32735                                  	;mov	dx,[bp-20]
 32736                                  	mov	DX,Exec_DMA ; *+*
 32737                                  	;mov	[bp-28],dx
 32738                                  	mov	Exec_DMA_Save,DX
 32739                                  %endif
 32740                                  
 32741                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32742 00005EC6 8B16[D00F]              	mov	DX,[exec_par_dir]
 32743 00005ECA 52                      	push	DX
 32744 00005ECB B104                    	mov	CL,4
 32745 00005ECD D3E2                    	shl	DX,CL			; low word of location
 32746 00005ECF 58                      	pop	AX
 32747 00005ED0 B10C                    	mov	CL,12
 32748 00005ED2 D3E8                    	shr	AX,CL			; high word of location
 32749 00005ED4 89C1                    	mov	CX,AX			; CX <- high
 32750                                  
 32751                                  		; Read in the resident image (first, seek to it)
 32752                                  	;mov	bx,[bp-8]
 32753 00005ED6 8B5EF8                  	mov	BX,Exec_FH
 32754 00005ED9 1E                      	push	DS
 32755 00005EDA 30C0                    	xor	AL,AL
 32756                                  	;invoke	$Lseek			; Seek to resident
 32757 00005EDC E8D40A                  	call	_$LSEEK
 32758 00005EDF 1F                      	pop	DS
 32759 00005EE0 7303                    	jnc	short Exec_Big_Read
 32760                                  
 32761 00005EE2 E906FF                  	jmp	Exec_Bomb
 32762                                  
 32763                                  Exec_Big_Read:				; Read resident into memory
 32764                                  	;mov	bx,[bp-12]
 32765 00005EE5 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32766 00005EE8 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32767 00005EEC 7203                    	jb	short Exec_Read_OK
 32768                                  
 32769 00005EEE BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32770                                  
 32771                                  Exec_Read_OK:
 32772                                  	;sub	[bp-12],bx
 32773 00005EF1 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32774 00005EF4 53                      	push	BX
 32775 00005EF5 B104                    	mov	CL,4
 32776 00005EF7 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32777 00005EF9 89D9                    	mov	CX,BX			; Count in correct register
 32778 00005EFB 1E                      	push	DS
 32779                                  	;mov	ds,[bp-20]
 32780 00005EFC 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32781                                  
 32782 00005EFF 31D2                    	xor	DX,DX
 32783 00005F01 51                      	push	CX			; Save our count
 32784 00005F02 E81303                  	call	ExecRead
 32785 00005F05 59                      	pop	CX			; Get old count to verify
 32786 00005F06 1F                      	pop	DS
 32787 00005F07 7248                    	jc	short Exec_Bad_FileJ
 32788                                  
 32789 00005F09 39C1                    	cmp	CX,AX			; Did we read enough?
 32790 00005F0B 5B                      	pop	BX			; Get paragraph count back
 32791 00005F0C 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32792                                  
 32793                                  	; The read did not match the request. If we are off by 512
 32794                                  	; bytes or more then the header lied and we have an error.
 32795                                  
 32796 00005F0E 29C1                    	sub	CX,AX
 32797 00005F10 81F90002                	cmp	CX,512
 32798 00005F14 733B                    	jae	short Exec_Bad_FileJ
 32799                                  
 32800                                  	; We've read in CX bytes... bump DTA location
 32801                                  
 32802                                  ExecCheckEnd:
 32803                                  	;add	[bp-20],bx
 32804 00005F16 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32805                                  	;test	word [bp-12],0FFFFh
 32806 00005F19 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32807 00005F1E 75C5                    	jnz	short Exec_Big_Read
 32808                                  
 32809                                  	; The image has now been read in. We must perform relocation
 32810                                  	; to the current location.
 32811                                  
 32812                                  exec_do_reloc:
 32813                                  	;mov	cx,[bp-10]
 32814 00005F20 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32815 00005F23 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32816 00005F26 01C8                    	add	AX,CX			; and relocate him
 32817 00005F28 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32818                                  
 32819 00005F2B A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32820 00005F2E A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32821                                  
 32822 00005F31 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 32823 00005F35 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32824 00005F38 8CC0                    	mov	AX,ES			; rms;NSS
 32825 00005F3A 01C8                    	add	AX,CX			; relocated...
 32826 00005F3C A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32827                                  
 32828 00005F3F 31C9                    	xor	CX,CX
 32829 00005F41 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32830                                  	;mov	bx,[bp-8]
 32831 00005F45 8B5EF8                  	mov	BX,Exec_FH
 32832 00005F48 1E                      	push	DS
 32833 00005F49 31C0                    	xor	AX,AX
 32834                                  	;invoke	$Lseek
 32835 00005F4B E8650A                  	call	_$LSEEK
 32836 00005F4E 1F                      	pop	DS
 32837 00005F4F 7303                    	jnc	short exec_get_entries
 32838                                  
 32839                                  Exec_Bad_FileJ:
 32840 00005F51 E995FE                  	jmp	Exec_Bad_File
 32841                                  
 32842                                  exec_get_entries:
 32843 00005F54 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32844                                  
 32845                                  exec_read_reloc:
 32846 00005F58 52                      	push	DX
 32847                                  	;mov	dx,OPENBUF
 32848 00005F59 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32849                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32850                                  	;mov	cx,396 ; MSDOS 6.0
 32851 00005F5C B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32852 00005F5F 1E                      	push	DS
 32853 00005F60 E8B502                  	call	ExecRead
 32854 00005F63 07                      	pop	ES
 32855 00005F64 5A                      	pop	DX
 32856 00005F65 72EA                    	jc	short Exec_Bad_FileJ
 32857                                  
 32858                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32859                                  	;mov	cx,99 ;  MSDOS 6.0
 32860 00005F67 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32861                                  					; Pointer to byte location in header
 32862                                  	;mov	di,OPENBUF
 32863 00005F6A BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32864                                  	;mov	si,[bp-10]
 32865 00005F6D 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32866                                  
 32867                                  exec_reloc_one:
 32868 00005F70 09D2                    	or	DX,DX			; Any more entries?
 32869 00005F72 7416                    	jz	short Exec_Set_PDBJ
 32870                                  
 32871                                  exec_get_addr:
 32872 00005F74 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32873 00005F77 8CD8                    	mov	AX,DS			; Relocate address of item
 32874                                  
 32875                                  	; MSDOS 6.0
 32876                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32877                                  	;add	ax,[bp-28]
 32878 00005F79 0346E4                  	add	AX,Exec_DMA_Save
 32879                                  
 32880 00005F7C 8ED8                    	mov	DS,AX
 32881 00005F7E 0137                    	add	[BX],SI
 32882 00005F80 83C704                  	add	DI,4
 32883 00005F83 4A                      	dec	DX
 32884 00005F84 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32885                                  
 32886                                  	; We've exhausted a single buffer's worth. Read in the next
 32887                                  	; piece of the relocation table.
 32888                                  
 32889 00005F86 06                      	push	ES
 32890 00005F87 1F                      	pop	DS
 32891 00005F88 EBCE                    	jmp	short exec_read_reloc
 32892                                  
 32893                                  Exec_Set_PDBJ:
 32894                                  	; MSDOS 6.0
 32895                                  	
 32896                                  	; We now determine if this is a buggy exe packed file and if 
 32897                                  	; so we patch in the right code. Note that fixexepatch will
 32898                                  	; point to a ret if dos loads low. The load segment as 
 32899                                  	; determined above will be in exec_dma_save
 32900                                  	
 32901 00005F8A 06                      	push	es
 32902 00005F8B 50                      	push	ax			; M030
 32903 00005F8C 51                      	push	cx			; M030
 32904                                  	;mov	es,[bp-28]
 32905 00005F8D 8E46E4                  	mov	es,Exec_DMA_Save
 32906 00005F90 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 32907 00005F94 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 32908 00005F99 36FF16[1212]            	call	word [ss:FixExePatch]
 32909                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32910                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32911                                  	;call	word [ss:Rational386PatchPtr]
 32912 00005F9E 59                      	pop	cx			; M030
 32913 00005F9F 58                      	pop	ax			; M030
 32914 00005FA0 07                      	pop	es
 32915                                  
 32916 00005FA1 E9DE00                  	jmp	Exec_Set_PDB
 32917                                  
 32918                                  Exec_No_Memj:
 32919 00005FA4 E93EFE                  	jmp	Exec_No_Mem
 32920                                  
 32921                                  	; we have a .COM file. First, determine if we are merely
 32922                                  	; loading an overlay.
 32923                                  
 32924                                  Exec_Com_File:
 32925                                  	;test	byte [bp-5],2
 32926 00005FA7 F646FB02                	test	Exec_Func,exec_func_overlay
 32927 00005FAB 742D                    	jz	short Exec_Alloc_Com_File
 32928                                  	;lds	si,[bp-4]
 32929 00005FAD C576FC                  	lds	SI,Exec_Blk		; get arg block
 32930 00005FB0 AD                      	lodsw				; get load address
 32931                                  	;mov	[bp-20],ax
 32932 00005FB1 8946EC                  	mov	Exec_DMA,AX
 32933 00005FB4 B8FFFF                  	mov	AX,0FFFFh
 32934 00005FB7 EB63                    	jmp	short Exec_Read_Block	; read it all!
 32935                                  
 32936                                  Exec_Chk_Com_Mem:			
 32937                                  	; MSDOS 6.0	     		; M063 - Start
 32938 00005FB9 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32939 00005FBD 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32940 00005FC2 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32941 00005FC7 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32942 00005FCA 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32943                                  					; N: continue
 32944                                  	
 32945 00005FCC A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32946 00005FCE 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 32947                                  	
 32948                                  	;mov	ax,[bp-18]
 32949 00005FD0 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 32950 00005FD3 31DB                    	xor	bx,bx			; M047: bx => free arena
 32951 00005FD5 E87502                  	call	ChangeOwner		; M047: free this block
 32952                                  	
 32953 00005FD8 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 32954                                  					; M063 - End
 32955                                  	
 32956                                  	; We must allocate the max possible size block (ick!)
 32957                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 32958                                  	; size of block.
 32959                                  
 32960                                  Exec_Alloc_Com_File:
 32961                                  	; MSDOS 6.0			; M000 -start
 32962 00005FDA 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 32963                                  					; Q: is the alloc strat high_first
 32964 00005FE0 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 32965                                  					; Y: set high_only bit
 32966 00005FE2 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 32967                                  					; M000 - end
 32968                                  Exec_Norm_Com_Alloc:			; M000
 32969                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32970 00005FE8 BBFFFF                  	mov	BX,0FFFFh
 32971                                  	;invoke	$Alloc			; largest piece available as error
 32972 00005FEB E8C303                  	call	_$ALLOC
 32973 00005FEE 09DB                    	or	BX,BX
 32974                                  	; MSDOS 6.0
 32975 00005FF0 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 32976                                  	; MSDOS 3.3
 32977                                  	;jz	short Exec_No_Memj
 32978                                  
 32979                                  	;mov	[bp-16],bx
 32980 00005FF2 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 32981 00005FF5 53                      	push	BX
 32982                                  	;invoke	$ALLOC			; largest piece available
 32983 00005FF6 E8B803                  	call	_$ALLOC
 32984 00005FF9 5B                      	pop	BX			; get size of block...
 32985                                  	;mov	[bp-18],ax
 32986 00005FFA 8946EE                  	mov	Exec_Load_Block,AX
 32987                                  
 32988 00005FFD 83C010                  	add	AX,10h			; increment for header
 32989                                  	;mov	[bp-20],ax
 32990 00006000 8946EC                  	mov	Exec_DMA,AX
 32991                                  
 32992 00006003 31C0                    	xor	AX,AX			; presume 64K read...
 32993 00006005 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 32994 00006009 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 32995                                  
 32996 0000600B 89D8                    	mov	AX,BX			; convert size to bytes
 32997 0000600D B104                    	mov	CL,4
 32998 0000600F D3E0                    	shl	AX,CL
 32999                                  	; 17/12/2022
 33000                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33001                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33002                                  	; MSDOS 5.0
 33003                                  	;cmp	AX,100h   
 33004                                  	; 02/06/2019 - Retro DOS v4.0
 33005                                  	; MSDOS 6.0
 33006                                          ; 17/12/2022
 33007 00006011 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33008 00006014 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33009                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33010                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33011                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33012                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33013                                  
 33014                                  					; M047: size of the block is < 64K
 33015 00006016 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33016                                  
 33017                                  Exec_Read_Com:
 33018                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33019 00006019 2D0001                  	sub	AX,100h 		; remember size of psp
 33020                                  Exec_Read_Block:
 33021 0000601C 50                      	push	AX			; save number to read
 33022                                  	;mov	bx,[bp-8]
 33023 0000601D 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33024 00006020 31C9                    	xor	CX,CX			; but seek to 0:0
 33025 00006022 89CA                    	mov	DX,CX
 33026 00006024 31C0                    	xor	AX,AX			; seek relative to beginning
 33027                                  	;invoke	$Lseek			; back to beginning of file
 33028 00006026 E88A09                  	call	_$LSEEK
 33029 00006029 59                      	pop	CX			; number to read
 33030                                  	;mov	ds,[bp-20]
 33031 0000602A 8E5EEC                  	mov	DS,Exec_DMA
 33032 0000602D 31D2                    	xor	DX,DX
 33033 0000602F 51                      	push	CX
 33034 00006030 E8E501                  	call	ExecRead
 33035 00006033 5E                      	pop	SI			; get number of bytes to read
 33036 00006034 7303                    	jnc	short OkRead
 33037 00006036 E9B0FD                  	jmp	Exec_Bad_File
 33038                                  
 33039                                  	; 10/09/2018
 33040                                  OkRead:
 33041 00006039 39F0                    	cmp	AX,SI			; did we read them all?
 33042                                  	; MSDOS 6.0
 33043                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33044                                  	; MSDOS 3.3
 33045                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33046 0000603B 7503                    	jne	short OkRead2
 33047 0000603D E979FF                  	jmp	Exec_Chk_Com_Mem
 33048                                  OkRead2:
 33049                                  	; MSDOS 6.0
 33050 00006040 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33051 00006045 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33052                                  
 33053                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33054                                  	;test	byte [bp-5],2
 33055 0000604A F646FB02                	test	Exec_Func,exec_func_overlay
 33056 0000604E 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33057                                  
 33058                                  	;mov	ax,[bp-20]
 33059 00006050 8B46EC                  	mov	AX,Exec_DMA
 33060 00006053 83E810                  	sub	AX,10h
 33061 00006056 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33062 0000605A 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33063                                  
 33064                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33065                                  	; of 0 on stack.
 33066                                  
 33067 00006061 81C6FE00                	add	SI,0FEh 		; make room for stack
 33068                                  
 33069                                  	; MSDOS 6.0
 33070 00006065 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33071 00006068 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33072 0000606A 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33073                                  
 33074                                  Exec_St_Ok:
 33075                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33076 0000606E 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33077 00006073 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33078 00006077 8ED8                    	mov	DS,AX
 33079 00006079 C7040000                	mov	WORD [SI],0		; 0 for return
 33080                                  
 33081                                  	; MSDOS 6.0
 33082                                  
 33083                                  	; M068
 33084                                  	;
 33085                                  	; We now determine if this is a Copy Protected App. If so the 
 33086                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33087                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33088                                  
 33089 0000607D 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33090                                  
 33091                                  Exec_Set_PDB:
 33092                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33093                                  	;mov	bx,[bp-8]
 33094 00006082 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33095 00006085 E8A901                  	call	Exec_Dealloc
 33096 00006088 55                      	push	BP
 33097                                  	;invoke	$Close			; release the jfn
 33098 00006089 E8AB07                  	call	_$CLOSE
 33099 0000608C 5D                      	pop	BP
 33100 0000608D E89301                  	call	Exec_Alloc
 33101                                  	;test	byte [bp-5],2
 33102 00006090 F646FB02                	test	Exec_Func,exec_func_overlay
 33103 00006094 743A                    	jz	short Exec_Build_Header
 33104                                  
 33105                                  	; MSDOS 6.0
 33106 00006096 E8C201                  	call	Scan_Execname
 33107 00006099 E8D601                  	call	Scan_Special_Entries
 33108                                  ;SR;
 33109                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33110                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33111                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33112                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33113                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33114                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33115                                  ;issues the version check, it gets the lie version until the next overlay
 33116                                  ;call is issued.
 33117                                  
 33118 0000609C 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33119 000060A2 7426                    	je	short norm_ovl		;yes, no special handling
 33120 000060A4 56                      	push	si
 33121 000060A5 06                      	push	es
 33122 000060A6 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33123                                  	 
 33124                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33125 000060AB 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33126 000060AF 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33127                                  	
 33128 000060B1 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33129 000060B6 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33130 000060BB 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33131                                  		;;; PDB.VERSION
 33132 000060C0 EB06                    	jmp	short setver_done
 33133                                  sysinit_done:
 33134 000060C2 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33135                                  setver_done:
 33136 000060C8 07                      	pop	es
 33137 000060C9 5E                      	pop	si
 33138                                  norm_ovl:
 33139                                  	;leave
 33140 000060CA 89EC                    	mov	sp,bp		
 33141 000060CC 5D                      	pop	bp
 33142                                  
 33143                                  	;transfer SYS_RET_OK		; overlay load -> done
 33144 000060CD E9B4A5                  	jmp	SYS_RET_OK
 33145                                  
 33146                                  Exec_Build_Header:
 33147                                  	;mov	dx,[bp-18]
 33148 000060D0 8B56EE                  	mov	DX,Exec_Load_Block
 33149                                  					; assign the space to the process
 33150                                  	;mov	si,1
 33151 000060D3 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33152                                  	;mov	ax,[bp-14]
 33153 000060D6 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33154 000060D9 09C0                    	or	AX,AX
 33155 000060DB 7405                    	jz	short No_Owner		; no environment
 33156                                  
 33157 000060DD 48                      	dec	AX			; point to header
 33158 000060DE 8ED8                    	mov	DS,AX
 33159 000060E0 8914                    	mov	[SI],DX 		; assign ownership
 33160                                  No_Owner:
 33161                                  	;mov	ax,[bp-18]
 33162                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33163                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33164                                  	; 17/12/2022
 33165 000060E2 89D0                    	mov	ax,dx ; 06/06/2019
 33166                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33167                                  	
 33168 000060E4 48                      	dec	AX
 33169 000060E5 8ED8                    	mov	DS,AX			; point to header
 33170 000060E7 8914                    	mov	[SI],DX 		; assign ownership
 33171                                  
 33172                                  	; MSDOS 6.0
 33173 000060E9 1E                      	push	DS			;AN000;MS. make ES=DS
 33174 000060EA 07                      	pop	ES			;AN000;MS.
 33175                                  	;mov	di,8
 33176 000060EB BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33177 000060EE E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33178                                  					;	   ds:si->name, cx=name length
 33179 000060F1 51                      	push	CX			;AN007;;MS. save for fake version
 33180 000060F2 56                      	push	SI			;AN007;;MS. save for fake version
 33181                                  
 33182                                  MoveName:				;AN000;
 33183 000060F3 AC                      	lodsb				;AN000;;MS. get char
 33184 000060F4 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33185 000060F6 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33186                                  					;AN000;
 33187 000060F8 AA                      	stosb				;AN000;;MS. move char
 33188                                  					; MSKK bug fix - limit length copied
 33189 000060F9 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33190 000060FC 7302                    	jae	short Mem_Done		; jump if so
 33191                                  	;
 33192 000060FE E2F3                    	loop	MoveName		;AN000;;MS. continue
 33193                                  Mem_Done:				;AN000;
 33194 00006100 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33195                                  	;cmp	di,16
 33196 00006102 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33197 00006105 7301                    	jae	short Fill8		;AN000;MS.
 33198                                  	
 33199 00006107 AA                      	stosb				;AN000;MS.
 33200                                  	
 33201                                  Fill8:					;AN000;
 33202 00006108 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33203 00006109 59                      	pop	CX			;AN007;MS.
 33204                                  	
 33205 0000610A E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33206                                  
 33207                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33208 0000610D 52                      	push	DX
 33209                                  	;mov	si,[bp-16]
 33210 0000610E 8B76F0                  	mov	SI,Exec_Size
 33211 00006111 01D6                    	add	SI,DX
 33212                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33213 00006113 E8F6AF                  	call	_$DUP_PDB
 33214 00006116 5A                      	pop	DX
 33215                                  
 33216                                  	;push	word [bp-14]
 33217 00006117 FF76F2                  	push	Exec_Environ
 33218                                  	;pop	WORD [ES:2Ch]
 33219 0000611A 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33220                                  
 33221                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33222                                  					; version number in PSP
 33223 0000611F 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33224 00006124 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33225                                  		; PDB.VERSION
 33226                                  
 33227                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33228                                  	;lds	si,[bp-4]
 33229 00006129 C576FC                  	lds	SI,Exec_Blk		; get the block
 33230 0000612C 1E                      	push	DS			; save its location
 33231 0000612D 56                      	push	SI
 33232                                  	;lds	si,[si+6]
 33233 0000612E C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33234                                  
 33235                                  	; DS points to user space 5C FCB
 33236                                  
 33237 00006131 B90C00                  	mov	CX,12			; copy drive, name and ext
 33238 00006134 51                      	push	CX
 33239 00006135 BF5C00                  	mov	DI,5Ch
 33240 00006138 8A1C                    	mov	BL,[SI]
 33241 0000613A F3A4                    	rep	movsb
 33242                                  
 33243                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33244                                  
 33245 0000613C 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33246 0000613E AB                      	stosw
 33247 0000613F AB                      	stosw
 33248                                  
 33249                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33250                                  
 33251 00006140 59                      	pop	CX
 33252 00006141 5E                      	pop	SI			; get block
 33253 00006142 1F                      	pop	DS
 33254 00006143 1E                      	push	DS			; save (again)
 33255 00006144 56                      	push	SI
 33256                                  	;lds	si,[si+0Ah]
 33257 00006145 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33258                                  
 33259                                  	; DS points to user space 6C FCB
 33260                                  
 33261 00006148 8A3C                    	mov	BH,[SI] 		; do same as above
 33262 0000614A F3A4                    	rep	movsb
 33263 0000614C AB                      	stosw
 33264 0000614D AB                      	stosw
 33265 0000614E 5E                      	pop	SI			; get block (last time)
 33266 0000614F 1F                      	pop	DS
 33267                                  	;ld	si,[si+2]
 33268 00006150 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33269                                  
 33270                                  	; DS points to user space 80 command line
 33271                                  
 33272 00006153 80C980                  	or	CL,80h
 33273 00006156 89CF                    	mov	DI,CX
 33274 00006158 F3A4                    	rep	movsb			; Wham!
 33275                                  
 33276                                  	; Process BX into default AX (validity of drive specs on args).
 33277                                  	; We no longer care about DS:SI.
 33278                                  
 33279 0000615A FEC9                    	dec	CL			; get 0FFh in CL
 33280 0000615C 88F8                    	mov	AL,BH
 33281 0000615E 30FF                    	xor	BH,BH
 33282                                  	;invoke	GetVisDrv
 33283 00006160 E8410A                  	call	GetVisDrv
 33284 00006163 7302                    	jnc	short Exec_BL
 33285                                  
 33286 00006165 88CF                    	mov	BH,CL
 33287                                  
 33288                                  Exec_BL:
 33289 00006167 88D8                    	mov	AL,BL
 33290 00006169 30DB                    	xor	BL,BL
 33291                                  	;invoke	GetVisDrv
 33292 0000616B E8360A                  	call	GetVisDrv
 33293 0000616E 7302                    	jnc	short Exec_Set_Return
 33294                                  
 33295 00006170 88CB                    	mov	BL,CL
 33296                                  
 33297                                  Exec_Set_Return:
 33298                                  	;invoke	Get_User_Stack			; get his return address
 33299 00006172 E855A3                  	call	Get_User_Stack
 33300                                  
 33301                                  	;push	word [si+14h]
 33302 00006175 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33303                                  	;push	word [si+12h]
 33304 00006178 FF7412                  	push	word [SI+user_env.user_IP]
 33305                                  	;push	word [si+14h]
 33306 0000617B FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33307                                  	;push	word [si+12h]
 33308 0000617E FF7412                  	push	word [SI+user_env.user_IP]
 33309                                  	;pop	word [ES:0Ah]
 33310 00006181 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33311                                  	;pop	word [ES:0Ch]
 33312 00006186 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33313                                  
 33314 0000618B 31C0                    	xor	AX,AX
 33315 0000618D 8ED8                    	mov	DS,AX
 33316                                  					; save them where we can get them
 33317                                  					; later when the child exits.
 33318                                  	;pop	word [88h]
 33319 0000618F 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33320                                  	;pop	word [90h]
 33321 00006193 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33322                                  
 33323 00006197 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33324 0000619E 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33325 000061A3 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33326                                  
 33327                                  	;test	byte [bp-5],1
 33328 000061A8 F646FB01                	test	Exec_Func,exec_func_no_execute
 33329 000061AC 7427                    	jz	short exec_go
 33330                                  
 33331 000061AE 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33332                                  	;les	di,[bp-4]
 33333 000061B3 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33334                                  	;mov	[es:di+10h],ds
 33335 000061B6 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33336                                  
 33337 000061BA 4E                      	dec	SI			; 'push' default AX
 33338 000061BB 4E                      	dec	SI
 33339 000061BC 891C                    	mov	[SI],BX 		; save default AX reg
 33340                                  	;mov	[es:di+0Eh], si
 33341 000061BE 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33342                                  
 33343 000061C2 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33344                                  	;mov	[es:di+14h],ds
 33345 000061C7 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33346                                  	;mov	[es:di+12h],ax
 33347 000061CB 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33348                                  	
 33349                                  	;leave
 33350 000061CF 89EC                    	mov	sp,bp
 33351 000061D1 5D                      	pop	bp	
 33352                                  
 33353                                  	;transfer SYS_RET_OK
 33354 000061D2 E9AFA4                  	jmp	SYS_RET_OK
 33355                                  
 33356                                  exec_go:
 33357 000061D5 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33358 000061DA 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33359 000061DF 8CC0                    	mov	AX,ES
 33360                                  
 33361                                  	; MSDOS 6.0
 33362 000061E1 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33363 000061E7 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33364                                  
 33365 000061E9 1E                      	push	ds			; Y: control must go to low mem stub
 33366                                  		
 33367 000061EA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33368                                  					;    control to user 
 33369 000061EF 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33370                                  					; M004: Set bit to signal int 21
 33371                                  					; ah = 25 & ah= 49. See dossym.inc 
 33372                                  					; under TAG M003 & M009 for 
 33373                                  					; explanation
 33374 000061F4 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33375                                  					; M068: going to be turned OFF.
 33376                                  	
 33377 000061F8 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33378 000061FA 1F                      	pop	ds
 33379                                  	
 33380 000061FB 50                      	push	ax			; ret far into the low mem stub
 33381 000061FC B8[1511]                	mov	ax,disa20_xfer
 33382 000061FF 50                      	push	ax
 33383 00006200 8CC0                    	mov	AX,ES			; restore ax
 33384 00006202 CB                      	retf
 33385                                  
 33386                                  Xfer_To_User:
 33387                                  	; DS:SI points to entry point
 33388                                  	; AX:DI points to initial stack
 33389                                  	; DX has PDB pointer
 33390                                  	; BX has initial AX value
 33391                                  
 33392 00006203 FA                      	cli
 33393                                  	; 15/08/2018
 33394 00006204 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33395                                  
 33396 0000620A 8ED0                    	mov	SS,AX			; set up user's stack
 33397 0000620C 89FC                    	mov	SP,DI			; and SP
 33398 0000620E FB                      	sti
 33399                                  
 33400 0000620F 1E                      	push	DS			; fake long call to entry
 33401 00006210 56                      	push	SI
 33402 00006211 8EC2                    	mov	ES,DX			; set up proper seg registers
 33403 00006213 8EDA                    	mov	DS,DX
 33404 00006215 89D8                    	mov	AX,BX			; set up proper AX
 33405                                  
 33406 00006217 CB                      	retf
 33407                                  
 33408                                  ; 04/08/2018 - Retro DOS v3.0
 33409                                  
 33410                                  ;----------------------------------------------------------------------------
 33411                                  ;
 33412                                  ;----------------------------------------------------------------------------
 33413                                  
 33414                                  ExecRead:
 33415 00006218 E81600                  	CALL	Exec_Dealloc
 33416                                  	;mov	bx,[bp-8]
 33417 0000621B 8B5EF8                  	MOV	bx,Exec_FH
 33418                                  
 33419 0000621E 55                      	PUSH	BP
 33420 0000621F E82607                  	call	_$READ
 33421 00006222 5D                      	POP	BP
 33422                                  
 33423                                  	;CALL	Exec_Alloc
 33424                                  	;retn
 33425                                  	; 18/12/2022
 33426                                  	;jmp	short Exec_Alloc
 33427                                  
 33428                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33429                                  
 33430                                  ;----------------------------------------------------------------------------
 33431                                  ;
 33432                                  ;----------------------------------------------------------------------------
 33433                                  
 33434                                  Exec_Alloc:
 33435 00006223 53                      	push	BX
 33436                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33437                                  	; 20/05/2019 - Retro DOS v4.0
 33438                                  	; MSDOS 6.0
 33439 00006224 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33440 00006229 E81000                  	call	ChangeOwners
 33441 0000622C E871B1                  	call	LCritMEM
 33442 0000622F 5B                      	pop	BX
 33443 00006230 C3                      	retn
 33444                                  
 33445                                  ;----------------------------------------------------------------------------
 33446                                  ;
 33447                                  ;----------------------------------------------------------------------------
 33448                                  
 33449                                  Exec_Dealloc:
 33450 00006231 53                      	push	BX
 33451                                  	;mov	bx,0
 33452 00006232 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33453 00006234 E84EB1                  	call	ECritMEM
 33454 00006237 E80200                  	call	ChangeOwners
 33455 0000623A 5B                      	pop	BX
 33456 0000623B C3                      	retn
 33457                                  
 33458                                  ; 18/12/2022
 33459                                  %if 0
 33460                                  ;----------------------------------------------------------------------------
 33461                                  ;
 33462                                  ;----------------------------------------------------------------------------
 33463                                  
 33464                                  Exec_Alloc:
 33465                                  	push	BX
 33466                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33467                                  	; 20/05/2019 - Retro DOS v4.0
 33468                                  	; MSDOS 6.0
 33469                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33470                                  	call	ChangeOwners
 33471                                  	call	LCritMEM
 33472                                  	pop	BX
 33473                                  	retn
 33474                                  
 33475                                  %endif
 33476                                  
 33477                                  ;----------------------------------------------------------------------------
 33478                                  ;
 33479                                  ;----------------------------------------------------------------------------
 33480                                  
 33481                                  ChangeOwners:
 33482 0000623C 9C                      	pushf
 33483 0000623D 50                      	push	AX
 33484                                  	;mov	ax,[bp-14]
 33485 0000623E 8B46F2                  	mov	AX,Exec_Environ
 33486 00006241 E80900                  	call	ChangeOwner
 33487                                  	;mov	ax,[bp-18]
 33488 00006244 8B46EE                  	mov	AX,Exec_Load_Block
 33489 00006247 E80300                  	call	ChangeOwner
 33490 0000624A 58                      	pop	AX
 33491 0000624B 9D                      	popf
 33492                                  chgown_retn:
 33493 0000624C C3                      	retn
 33494                                  
 33495                                  ;----------------------------------------------------------------------------
 33496                                  ;
 33497                                  ;----------------------------------------------------------------------------
 33498                                  
 33499                                  ChangeOwner:
 33500 0000624D 09C0                    	or	AX,AX			; is area allocated?
 33501 0000624F 74FB                    	jz	short chgown_retn	; no, do nothing
 33502 00006251 48                      	dec	AX
 33503 00006252 1E                      	push	DS
 33504 00006253 8ED8                    	mov	DS,AX
 33505 00006255 891E0100                	mov	[ARENA.OWNER],BX
 33506 00006259 1F                      	pop	DS
 33507 0000625A C3                      	retn
 33508                                  
 33509                                  ;----------------------------------------------------------------------------
 33510                                  ;
 33511                                  ;----------------------------------------------------------------------------
 33512                                  
 33513                                  ; 20/05/2019 - Retro DOS v4.0
 33514                                  
 33515                                  	; MSDOS 6.0
 33516                                  Scan_Execname:
 33517 0000625B C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33518                                  Scan_Execname1:				; M028
 33519                                  Save_Begin:				;
 33520 0000625E 89F1                    	mov	CX,SI			; CX= starting addr
 33521                                  Scan0:					;
 33522 00006260 AC                      	lodsb				; get char
 33523                                  
 33524 00006261 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33525 00006263 74F9                    	jz	short Save_Begin	; yes, save si
 33526 00006265 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33527 00006267 74F5                    	jz	short Save_Begin	; yes, save si
 33528 00006269 3C00                    	cmp	AL,0			; is end of name
 33529 0000626B 75F3                    	jnz	short Scan0		; no, continue scanning
 33530 0000626D 29CE                    	sub	SI,CX			; get name's length
 33531 0000626F 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33532                                  
 33533 00006271 C3                      	retn
 33534                                  
 33535                                  ;----------------------------------------------------------------------------
 33536                                  ;
 33537                                  ;----------------------------------------------------------------------------
 33538                                  
 33539                                  ; 20/05/2019 - Retro DOS v4.0
 33540                                  
 33541                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33542                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33543                                  
 33544                                  	; MSDOS 6.0
 33545                                  
 33546                                  Scan_Special_Entries:
 33547                                  
 33548 00006272 49                      	dec	CX			; cx= name length
 33549                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33550                                  					;reset to current version
 33551                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33552                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33553                                  	;mov	word [ss:SPECIAL_VERSION],5
 33554                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33555                                  
 33556                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33557 00006273 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33558                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33559                                  ;***	call	Reset_Version
 33560                                  
 33561                                  ;M060	push	SS
 33562                                  ;M060	pop	ES
 33563                                  
 33564 0000627A 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33565 0000627F 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33566 00006281 09F8                    	or	AX,DI			;M060; be sure the table exists
 33567 00006283 7427                    	jz	short End_List		;M060; If ZR then no table
 33568                                  
 33569                                  GetEntries:
 33570 00006285 268A05                  	mov	AL,[ES:DI]		; end of list
 33571 00006288 08C0                    	or	AL,AL
 33572 0000628A 7420                    	jz	short End_List		; yes
 33573                                  
 33574 0000628C 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33575 00006291 38C8                    	cmp	AL,CL			; same length ?
 33576 00006293 751B                    	jnz	short SkipOne 		; no
 33577                                  
 33578 00006295 47                      	inc	DI			; es:di -> special name
 33579 00006296 51                      	push	CX			; save length and name addr
 33580 00006297 56                      	push	SI
 33581                                  
 33582                                  ; M050 - BEGIN
 33583                                  
 33584 00006298 50                      	push	ax			; save len
 33585                                  sse_next_char:
 33586 00006299 AC                      	lodsb
 33587 0000629A E8BCEE                  	call	UCase
 33588 0000629D AE                      	scasb
 33589 0000629E 750D                    	jne	short Not_Matched
 33590 000062A0 E2F7                    	loop	sse_next_char
 33591                                  	
 33592                                  ;	repz	cmpsb			; same name ?
 33593                                  ;	jnz	short Not_Matched	; no
 33594                                  
 33595 000062A2 58                      	pop	ax			; take len off the stack
 33596                                  
 33597                                  ; M050 - END
 33598                                  
 33599 000062A3 268B05                  	mov	AX,[ES:DI]		; get special version
 33600 000062A6 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33601                                  
 33602                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33603                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33604                                  
 33605 000062AA 5E                      	pop	SI
 33606 000062AB 59                      	pop	CX
 33607                                  	; 18/12/2022
 33608                                  	;jmp	SHORT End_List
 33609                                  
 33610                                  	; 18/12/2022
 33611                                  End_List:
 33612 000062AC C3                      	retn
 33613                                  
 33614                                  Not_Matched:
 33615 000062AD 58                      	pop	ax			; get len from stack ; M050
 33616 000062AE 5E                      	pop	SI			; restore si,cx
 33617 000062AF 59                      	pop	CX
 33618                                  
 33619                                  SkipOne:
 33620 000062B0 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33621 000062B5 30E4                    	xor	AH,AH			; position to next entry
 33622 000062B7 01C7                    	add	DI,AX
 33623                                  
 33624 000062B9 83C703                  	add	DI,3			; DI -> next entry length
 33625                                  ;***	add	DI,4			; DI -> next entry length
 33626                                  
 33627 000062BC EBC7                    	jmp	short GetEntries
 33628                                  
 33629                                  	; 18/12/2022
 33630                                  ;End_List:
 33631                                  	;retn
 33632                                  
 33633                                  ; 04/08/2018 - Retro DOS v3.0
 33634                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33635                                  
 33636                                  ;----------------------------------------------------------------------------
 33637                                  ;SUBTTL Terminate and stay resident handler
 33638                                  ;
 33639                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33640                                  ;	    truncate the current block.
 33641                                  ;
 33642                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33643                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33644                                  ;	    and restoring the vectors.
 33645                                  ;
 33646                                  ;----------------------------------------------------------------------------
 33647                                  
 33648                                  	; 20/05/2019 - Retro DOS v4.0
 33649                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33650                                  
 33651                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33652                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33653                                  
 33654                                  _$KEEP_PROCESS:
 33655 000062BE 50                      	push	AX			; keep exit code around
 33656                                  	;mov	byte [SS:EXIT_TYPE],3
 33657 000062BF 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33658 000062C5 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33659 000062CA 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33660 000062CD 7303                    	jae	short Keep_Shrink	; info
 33661                                  
 33662 000062CF BA0600                  	mov	DX,6h
 33663                                  
 33664                                  Keep_Shrink:
 33665 000062D2 89D3                    	mov	BX,DX
 33666 000062D4 53                      	push	BX
 33667 000062D5 06                      	push	ES
 33668 000062D6 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33669 000062D9 1F                      	pop	DS
 33670 000062DA 5B                      	pop	BX
 33671 000062DB 7207                    	jc	short Keep_Done		; failed on modification
 33672                                  
 33673 000062DD 8CD8                    	mov	AX,DS
 33674 000062DF 01D8                    	add	AX,BX
 33675                                  	;mov	[2],ax
 33676 000062E1 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33677                                  
 33678                                  Keep_Done:
 33679 000062E4 58                      	pop	AX
 33680 000062E5 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33681                                  
 33682                                  ;----------------------------------------------------------------------------
 33683                                  ;
 33684                                  ;----------------------------------------------------------------------------
 33685                                  
 33686                                  STAY_RESIDENT:
 33687                                  	;mov	ax,3100h
 33688 000062E7 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33689 000062EA 83C20F                  	add	DX,15
 33690 000062ED D1DA                    	rcr	DX,1
 33691 000062EF B103                    	mov	CL,3
 33692 000062F1 D3EA                    	shr	DX,CL
 33693                                  
 33694 000062F3 E951A0                  	jmp	COMMAND
 33695                                  
 33696                                  ;----------------------------------------------------------------------------
 33697                                  ;SUBTTL $EXIT - return to parent process
 33698                                  ;   Assembler usage:
 33699                                  ;	    MOV     AL, code
 33700                                  ;	    MOV     AH, Exit
 33701                                  ;	    INT     int_command
 33702                                  ;   Error return:
 33703                                  ;	    None.
 33704                                  ;
 33705                                  ;----------------------------------------------------------------------------
 33706                                  
 33707                                  	; 20/05/2019 - Retro DOS v4.0
 33708                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33709                                  
 33710                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33711                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33712                                  _$EXIT:
 33713                                  	; 04/08/2018 - Retro DOS v3.0
 33714                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33715 000062F6 30E4                    	xor	AH,AH
 33716 000062F8 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33717 000062FD 08E4                    	or	AH,AH
 33718                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33719 000062FF 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33720 00006305 7406                    	jz	short exit_inner
 33721                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33722 00006307 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33723                                  
 33724                                  	;entry	Exit_inner
 33725                                  exit_inner:
 33726 0000630D E8BAA1                  	call	Get_User_Stack		;PBUGBUG
 33727                                  
 33728 00006310 36FF36[3003]            	push	word [ss:CurrentPDB]
 33729                                  	;pop	word [si+14h]
 33730 00006315 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33731 00006318 EB08                    	jmp	short abort_inner
 33732                                  
 33733                                  ;BREAK <$ABORT -- Terminate a process>
 33734                                  ;----------------------------------------------------------------------------
 33735                                  ; Inputs:
 33736                                  ;	user_CS:00 must point to valid program header block
 33737                                  ; Function:
 33738                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33739                                  ;	to the terminate address
 33740                                  ; Returns:
 33741                                  ;	TO THE TERMINATE ADDRESS
 33742                                  ;----------------------------------------------------------------------------
 33743                                  
 33744                                  _$ABORT:
 33745 0000631A 30C0                    	xor	AL,AL
 33746                                  	;mov	byte [SS:EXIT_TYPE],0
 33747                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33748 0000631C 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33749                                  
 33750                                  	; abort_inner must have AL set as the exit code! The exit type
 33751                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33752                                  	; to be correct as the one that is terminating.
 33753                                  
 33754                                  abort_inner:
 33755 00006322 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33756 00006327 36A3[3403]              	mov	[SS:exit_code],AX
 33757 0000632B E89CA1                  	call	Get_User_Stack
 33758                                  
 33759                                  	;mov	ds,[si+14h]
 33760 0000632E 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33761 00006331 31C0                    	xor	AX,AX
 33762 00006333 8EC0                    	mov	ES,AX
 33763                                  	;mov	si,10
 33764 00006335 BE0A00                  	mov	SI,SAVEXIT
 33765                                  	;mov	di,88h
 33766 00006338 BF8800                  	mov	DI,addr_int_terminate
 33767 0000633B A5                      	movsw
 33768 0000633C A5                      	movsw
 33769 0000633D A5                      	movsw
 33770 0000633E A5                      	movsw
 33771 0000633F A5                      	movsw
 33772 00006340 A5                      	movsw
 33773 00006341 E930F2                  	jmp	reset_environment
 33774                                  
 33775                                  ;----------------------------------------------------------------------------
 33776                                  ;
 33777                                  ; fixexepatch will point to this is DOS loads low. 
 33778                                  ;
 33779                                  ;----------------------------------------------------------------------------
 33780                                  ; MSDOS 6.0
 33781                                  
 33782                                  ; 29/04/2019 - Retro DOS v4.0
 33783                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33784                                  
 33785                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33786                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33787                                  
 33788                                  RetExePatch: ; proc near
 33789                                  	
 33790 00006344 C3                      	retn
 33791                                  
 33792                                  ;============================================================================
 33793                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33794                                  ;============================================================================
 33795                                  ; 04/08/2018 - Retro DOS v3.0
 33796                                  ; 14/05/2019 - Retro DOS v4.0
 33797                                  
 33798                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33799                                  
 33800                                  ;**
 33801                                  ;	Microsoft Confidential
 33802                                  ;	Copyright (C) Microsoft Corporation 1991
 33803                                  ;	All Rights Reserved.
 33804                                  ;
 33805                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33806                                  ;	I/O specs are defined in DISPATCH.
 33807                                  ;
 33808                                  ;	$ALLOC
 33809                                  ;	$SETBLOCK
 33810                                  ;	$DEALLOC
 33811                                  ;	$AllocOper
 33812                                  ;	arena_free_process
 33813                                  ;	arena_next
 33814                                  ;	check_signature
 33815                                  ;	Coalesce
 33816                                  ;
 33817                                  ;	Modification history:
 33818                                  ;
 33819                                  ;	    Created: ARR 30 March 1983
 33820                                  ;
 33821                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33822                                  ;		      M003 - added support for link/unlink UMBs from
 33823                                  ;			     DOS arena chain. 7/18/90
 33824                                  ;		      M009 - Added error returns invalid function and 
 33825                                  ;			     arena trashed in set link state call.
 33826                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33827                                  ;			     if UMB_HEAD is initialized.
 33828                                  ;
 33829                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33830                                  ;			     support. Please see under M009 in 
 33831                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33832                                  ;
 33833                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33834                                  ;			     sure that umb_head arena is valid and also make
 33835                                  ;			     sure that the previous arena is pointing to 
 33836                                  ;			     umb_head.
 33837                                  ;
 33838                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33839                                  ;			     set allloc strategy.
 33840                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33841                                  ;			     bx in AllocSetStrat.
 33842                                  ;
 33843                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33844                                  ;			     a bit to indicate to dos dispatcher to turn
 33845                                  ;			     a20 off before iret. See M016.
 33846                                  ;
 33847                                  
 33848                                  ;	BREAK	<memory allocation utility routines>
 33849                                  
 33850                                  
 33851                                  ; 15/04/2018 - Retro DOS v2.0
 33852                                  ;----------------------------------------------------------------------------
 33853                                  ; xenix memory calls for MSDOS
 33854                                  ;
 33855                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33856                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33857                                  ;
 33858                                  ;INCLUDE DOSSEG.ASM
 33859                                  
 33860                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33861                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33862                                  
 33863                                  ;.xlist
 33864                                  ;.xcref
 33865                                  ;INCLUDE DOSSYM.ASM
 33866                                  ;INCLUDE DEVSYM.ASM
 33867                                  ;.cref
 33868                                  ;.list
 33869                                  
 33870                                  ;TITLE ALLOC.ASM - memory arena manager
 33871                                  ;NAME Alloc
 33872                                  
 33873                                  ;SUBTTL memory allocation utility routines
 33874                                  ;PAGE
 33875                                  ;
 33876                                  ; arena data
 33877                                  ;
 33878                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33879                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33880                                  ;       i_need  FirstArena,WORD         ; first free block found
 33881                                  ;       i_need  BestArena,WORD          ; best free block found
 33882                                  ;       i_need  LastArena,WORD          ; last free block found
 33883                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33884                                  
 33885                                  ;**	Arena_Free_Process
 33886                                  ;----------------------------------------------------------------------------
 33887                                  ;	Free all arena blocks allocated to a prOcess
 33888                                  ;
 33889                                  ;	ENTRY	(bx) = PID of process
 33890                                  ;	EXIT	none
 33891                                  ;	USES	????? BUGBUG
 33892                                  ;----------------------------------------------------------------------------
 33893                                  
 33894                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33895                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33896                                  
 33897                                  arena_free_process:
 33898                                  	; 14/05/2019 - Retro DOS v4.0
 33899                                  	; 04/08/2018 - Retro DOS v3.0
 33900 00006345 36A1[2400]                      MOV	AX,[SS:arena_head]
 33901                                  arena_free_process_start:
 33902 00006349 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33903                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33904 0000634C E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33905                                  
 33906                                  arena_free_process_loop:
 33907                                          ;retc
 33908 0000634F 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33909 00006351 06                      	PUSH    ES
 33910 00006352 1F                              POP     DS
 33911                                  	;cmp	[1],bx 
 33912 00006353 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33913 00006357 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33914                                  	;mov	[1],di
 33915 00006359 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33916                                  
 33917                                  arena_free_next:
 33918                                  	;cmp	byte [di],5Ah ;'Z'
 33919 0000635D 803D5A                          CMP     BYTE [DI],arena_signature_end
 33920                                                                          ; end of road, Jack?
 33921                                          ;retz				; never come back no more
 33922                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33923                                  	; 14/05/2019
 33924                                  	; MSDOS 6.0
 33925 00006360 7405                    	jz	short arena_chk_umbs
 33926                                          
 33927 00006362 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33928 00006365 EBE8                            JMP     SHORT arena_free_process_loop
 33929                                  
 33930                                  	; MSDOS 6.0
 33931                                  arena_chk_umbs:				; M010 - Start
 33932                                  	; 20/05/2019
 33933 00006367 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33934 0000636B 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33935 0000636E 741E                    	je	short ret_label		; N: we're done
 33936                                  	
 33937 00006370 8CDF                    	mov	di,ds			; di = last arena
 33938 00006372 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33939 00006374 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33940 00006376 EBD1                    	jmp	short arena_free_process_start
 33941                                  					; M010 - End
 33942                                  ;AFP_RETN:
 33943                                  ;	RETN
 33944                                  
 33945                                  ;	BREAK	<Arena Helper Routines>
 33946                                  
 33947                                  ;**	Arena_Next - Find Next item in Arena
 33948                                  ;----------------------------------------------------------------------------
 33949                                  ;	ENTRY	DS - pointer to block head
 33950                                  ;		(di) = 0
 33951                                  ;	EXIT	AX,ES - pointers to next head
 33952                                  ;		'C' set iff arena damaged
 33953                                  ;----------------------------------------------------------------------------
 33954                                  
 33955                                  arena_next:
 33956 00006378 8CD8                            MOV     AX,DS                   ; AX <- current block
 33957 0000637A 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 33958 0000637E 40                              INC     AX                      ; remember that header!
 33959                                  
 33960                                  ;       fall into check_signature and return
 33961                                  ;
 33962                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 33963                                  ;       RETN
 33964                                  
 33965                                  ;**	Check_Signature - Check Memory Block Signature
 33966                                  ;----------------------------------------------------------------------------
 33967                                  ;	ENTRY	(AX) = address of block header
 33968                                  ;		(di) = 0
 33969                                  ;	EXIT	 ES = AX
 33970                                  ;		'C' clear if signature good
 33971                                  ;		'C' set if signature bad
 33972                                  ;	USES	ES, Flags
 33973                                  ;----------------------------------------------------------------------------
 33974                                  
 33975                                  check_signature:        
 33976                                  
 33977 0000637F 8EC0                    	MOV     ES,AX                   ; ES <- AX
 33978                                  	;cmp	byte [es:di],4Dh ; 'M'
 33979 00006381 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 33980                                                                          ; IF next signature = not_end THEN
 33981 00006385 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 33982                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 33983 00006387 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 33984                                                                          ; IF next signature = end then
 33985 0000638B 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 33986 0000638D F9                              STC                             ; set error
 33987                                  ret_label: ; MSDOS 6.0
 33988                                  AFP_RETN:
 33989                                   	; Retro DOS v2.0 - 05/03/2018
 33990                                  check_signature_ok:
 33991                                  COALESCE_RETN:
 33992 0000638E C3                      	RETN
 33993                                  
 33994                                  ;**	Coalesce - Combine free blocks ahead with current block
 33995                                  ;----------------------------------------------------------------------------
 33996                                  ;	Coalesce adds the block following the argument to the argument block,
 33997                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 33998                                  ;	some callers (such as $setblock) use it to join a free block to it's
 33999                                  ;	preceeding allocated block.
 34000                                  ;
 34001                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34002                                  ;		(di) = 0
 34003                                  ;	EXIT	'C' clear if OK
 34004                                  ;		  (ds) unchanged, this block updated
 34005                                  ;		  (ax) = address of next block, IFF not at end
 34006                                  ;		'C' set if arena trashed
 34007                                  ;	USES	(cx)
 34008                                  ;----------------------------------------------------------------------------
 34009                                          
 34010                                  Coalesce:
 34011                                  	;cmp	byte [di],5Ah ; 'Z'
 34012 0000638F 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34013                                                                          ; IF current signature = END THEN
 34014                                          ;retz				;   GOTO ok
 34015 00006392 74FA                            jz	short COALESCE_RETN
 34016 00006394 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34017                                          ;retc				; IF no error THEN GOTO check
 34018 00006397 72F5                    	jc	short COALESCE_RETN
 34019                                  
 34020                                  coalesce_check:
 34021                                  	;cmp	[es:1],di
 34022 00006399 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34023                                          ;retnz				; IF next block isnt free THEN return
 34024 0000639E 75EE                            JNZ	SHORT COALESCE_RETN
 34025                                  	;mov	cx,[ES:3]
 34026 000063A0 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34027 000063A5 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34028                                          ;ADD	[3],CX
 34029 000063A6 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34030 000063AA 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34031 000063AD 880D                            MOV     [DI],CL
 34032 000063AF EBDE                            JMP     SHORT Coalesce		; try again
 34033                                  
 34034                                  ; 04/08/2018 - Retro DOS v3.0
 34035                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34036                                  
 34037                                  ;	BREAK  <$Alloc - allocate space in memory>
 34038                                  
 34039                                  ; MSDOS 6.0
 34040                                  ;----------------------------------------------------------------------------
 34041                                  ;**	$Alloc - Allocate Memory Space
 34042                                  ;
 34043                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34044                                  ;	Alloc returns a pointer to a free block of memory that
 34045                                  ;	has the requested size in paragraphs.
 34046                                  ;
 34047                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34048                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34049                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34050                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34051                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34052                                  ;
 34053                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34054                                  ;	starts from arena_head.
 34055                                  ;
 34056                                  ;	Assembler usage:
 34057                                  ;           MOV     BX,size
 34058                                  ;           MOV     AH,Alloc
 34059                                  ;           INT     21h
 34060                                  ;
 34061                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34062                                  ;	so that we start searching the arena at it's first non-trivial free
 34063                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34064                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34065                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34066                                  ;	verify that this is true; if so, this can stay as is
 34067                                  ;
 34068                                  ;	ENTRY	(bx) = requested size, in bytes
 34069                                  ;		(DS) = (ES) = DOSGROUP
 34070                                  ;	EXIT	'C' clear if memory allocated
 34071                                  ;		  (ax:0) = address of requested memory
 34072                                  ;		'C' set if request failed
 34073                                  ;		  (AX) = error_not_enough_memory
 34074                                  ;		    (bx) = max size we could have allocated
 34075                                  ;		  (ax) = error_arena_trashed
 34076                                  ;	USES	All
 34077                                  ;----------------------------------------------------------------------------
 34078                                  
 34079                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34080                                  ;----------------------------------------------------------------------------
 34081                                  ;SUBTTL $Alloc - allocate space in memory
 34082                                  ;
 34083                                  ;   Assembler usage:
 34084                                  ;           MOV     BX,size
 34085                                  ;           MOV     AH,Alloc
 34086                                  ;           INT     21h
 34087                                  ;         AX:0 is pointer to allocated memory
 34088                                  ;         BX is max size if not enough memory
 34089                                  ;
 34090                                  ;   Description:
 34091                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34092                                  ;       memory that has the requested  size  in  paragraphs.
 34093                                  ;
 34094                                  ;   Error return:
 34095                                  ;           AX = error_not_enough_memory
 34096                                  ;              = error_arena_trashed
 34097                                  ;----------------------------------------------------------------------------
 34098                                  
 34099                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34100                                  
 34101                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34102                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34103                                  
 34104                                  _$ALLOC:
 34105                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34106                                  	; 14/05/2019 - Retro DOS v4.0
 34107                                  	; 04/08/2018 - Retro DOS v3.0
 34108                                  	;EnterCrit critMem
 34109 000063B1 E8D1AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34110                                  
 34111                                  ; 17/12/2022
 34112                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34113                                  ;%if 0
 34114                                  	; 14/05/2019
 34115 000063B4 16                      	push	ss
 34116 000063B5 1F                      	pop	ds
 34117                                  
 34118                                  	; MSDOS 6.0
 34119                                  	;mov	ax,[ss:arena_head]
 34120                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34121                                  
 34122 000063B6 A1[2400]                	mov	ax,[arena_head]
 34123 000063B9 A3[8E00]                	mov	[START_ARENA],ax			
 34124                                  	
 34125                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34126 000063BC F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34127                                  					; Q: should we start scanning from 
 34128                                  					;    UMB's
 34129 000063C1 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34130                                  		
 34131                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34132                                  	;cmp	word [UMB_HEAD],-1
 34133                                  	;je	short norm_alloc	; N: scan from arena_head
 34134                                  
 34135                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34136 000063C3 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34137 000063C8 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34138                                  	
 34139                                  	;mov	ax,[ss:UMB_HEAD]
 34140                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34141 000063CA A1[8C00]                	mov	ax,[UMB_HEAD]
 34142 000063CD A3[8E00]                	mov	[START_ARENA],ax
 34143                                  					; M000 - end
 34144                                  norm_alloc:
 34145 000063D0 31C0                            XOR     AX,AX
 34146 000063D2 89C7                            MOV     DI,AX
 34147                                  	; 15/03/2018
 34148                                          ;MOV	[SS:FirstArena],AX	; init the options
 34149                                          ;MOV	[SS:BestArena],AX
 34150                                          ;MOV	[SS:LastArena],AX
 34151                                  	; 14/05/2019
 34152 000063D4 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34153 000063D7 A3[4203]                        MOV	[BestArena],AX
 34154 000063DA A3[4403]                        MOV	[LastArena],AX
 34155 000063DD 50                              PUSH    AX                      ; alloc_max <- 0
 34156                                  	; 04/08/2018
 34157                                  start_scan:
 34158                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34159                                  	;MOV	AX,[arena_head]
 34160                                  
 34161                                  	; 14/05/2019	
 34162                                  	; MSDOS 6.0
 34163                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34164 000063DE A1[8E00]                	mov	ax,[START_ARENA]
 34165                                  
 34166                                  	; 27/09/2023 (BugFix) (*) 
 34167                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34168                                  start_scan_x:
 34169                                  
 34170 000063E1 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34171 000063E4 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34172                                  
 34173                                  ;%endif
 34174                                  
 34175                                  ; 17/12/2022
 34176                                  %if 0
 34177                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34178                                  
 34179                                  	; MSDOS 6.0
 34180                                  	mov	ax,[ss:arena_head]
 34181                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34182                                  
 34183                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34184                                  					; Q: should we start scanning from 
 34185                                  					;    UMB's
 34186                                  	jz	short norm_alloc	; N: scan from arena_head
 34187                                  		
 34188                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34189                                  	;je	short norm_alloc	; N: scan from arena_head
 34190                                  
 34191                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34192                                  	jz	short norm_alloc	; N: scan from arena_head
 34193                                  	
 34194                                  	mov	ax,[ss:UMB_HEAD]
 34195                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34196                                  					; M000 - end
 34197                                  norm_alloc:
 34198                                          XOR     AX,AX
 34199                                          MOV     DI,AX
 34200                                  	; 15/03/2018
 34201                                  	MOV	[SS:FirstArena],AX	; init the options
 34202                                  	MOV	[SS:BestArena],AX
 34203                                  	MOV	[SS:LastArena],AX
 34204                                          PUSH    AX                      ; alloc_max <- 0
 34205                                  	; 04/08/2018
 34206                                  start_scan:
 34207                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34208                                  	; 14/05/2019	
 34209                                  	; MSDOS 6.0
 34210                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34211                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34212                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34213                                  %endif
 34214                                  
 34215                                  alloc_scan:
 34216 000063E6 06                              PUSH    ES
 34217 000063E7 1F                              POP     DS                      ; DS <- ES
 34218 000063E8 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34219 000063EC 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34220                                  
 34221                                  alloc_next:
 34222                                  	; MSDOS 6.0			; M000 - start 
 34223 000063EE 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34224 000063F4 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34225                                  	
 34226 000063F6 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34227                                  					; Q: is alloc strategy high_first
 34228 000063FC 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34229 000063FE 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34230 00006402 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34231                                  					;    arena_head
 34232 00006407 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34233 00006409 8CD8                    	mov	ax,ds			; ax = current block
 34234 0000640B 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34235 00006410 EB03                    	jmp	short alloc_chk_end
 34236                                  
 34237                                  norm_strat:
 34238                                  	;cmp	byte [di],5Ah ; 'Z'
 34239 00006412 803D5A                          CMP     BYTE [DI],arena_signature_end
 34240                                                                          ; IF current block is last THEN
 34241                                  alloc_chk_end:
 34242 00006415 740E                            JZ      SHORT alloc_end		;   GOTO end
 34243 00006417 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34244 0000641A 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34245                                  
 34246                                  alloc_err:
 34247 0000641C 58                              POP     AX
 34248                                  
 34249                                  alloc_trashed:
 34250                                  	;LeaveCrit critMem
 34251 0000641D E880AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34252                                          ;error	error_arena_trashed
 34253                                  	;mov	al,7
 34254 00006420 B007                    	MOV	AL,error_arena_trashed
 34255                                  alloc_errj:
 34256 00006422 E968A2                  	JMP	SYS_RET_ERR
 34257                                  
 34258                                  alloc_end:
 34259                                  	; 18/05/2019
 34260 00006425 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34261 0000642B 7403                    	jz	short alloc_chk 
 34262 0000642D E98400                  	jmp	alloc_do_split
 34263                                  
 34264                                  alloc_chk:
 34265                                  	; MSDOS 6.0
 34266 00006430 36A1[2400]              	mov	ax,[ss:arena_head]
 34267 00006434 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34268 00006439 740E                    	je	short alloc_fail	; Y: not enough memory
 34269                                  					; N:
 34270                                  					; Q: is the alloc strat HIGH_ONLY
 34271 0000643B 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34272 00006441 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34273                                  	
 34274 00006443 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34275                                  	; 27/09/2023 (*)
 34276 00006447 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34277                                  	;jmp	short start_scan
 34278                                  					; M000 - end
 34279                                  
 34280                                  alloc_fail:
 34281                                          ;invoke Get_User_Stack
 34282 00006449 E87EA0                          CALL	Get_User_Stack
 34283 0000644C 5B                      	POP     BX
 34284                                          ;MOV	[SI].user_BX,BX
 34285                                  	;MOV	[SI+2],BX
 34286 0000644D 895C02                  	mov	[SI+user_env.user_BX],bx
 34287                                  	;LeaveCrit critMem
 34288 00006450 E84DAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34289                                  	;error	error_not_enough_memory
 34290                                  	;mov	al,8
 34291 00006453 B008                    	MOV	AL,error_not_enough_memory
 34292                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34293 00006455 EBCB                    	jmp	short alloc_errj
 34294                                  	;JMP	SYS_RET_ERR
 34295                                  
 34296                                  alloc_free:
 34297 00006457 E835FF                          CALL    Coalesce		; add following free block to current
 34298 0000645A 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34299 0000645C 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34300 00006460 5A                              POP     DX                      ; check for max found size
 34301 00006461 39D1                            CMP     CX,DX
 34302 00006463 7602                            JNA     SHORT alloc_test
 34303 00006465 89CA                            MOV     DX,CX
 34304                                  
 34305                                  alloc_test:
 34306 00006467 52                              PUSH    DX
 34307 00006468 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34308 0000646A 7782                    	JA      SHORT alloc_next	;   GOTO next
 34309                                  
 34310                                  	; 15/03/2018
 34311 0000646C 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34312 00006472 7505                    	JNZ	SHORT alloc_best
 34313 00006474 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34314                                  alloc_best:
 34315 00006479 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34316 0000647F 740E                            JZ      SHORT alloc_make_best	; initial best
 34317 00006481 06                              PUSH	ES
 34318 00006482 368E06[4203]                    MOV     ES,[SS:BestArena]
 34319 00006487 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34320 0000648C 07                              POP	ES
 34321 0000648D 7605                            JBE     SHORT alloc_last
 34322                                  alloc_make_best:
 34323 0000648F 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34324                                  alloc_last:
 34325 00006494 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34326 00006499 E952FF                          JMP     alloc_next
 34327                                  ;
 34328                                  ; split the block high
 34329                                  ;
 34330                                  alloc_do_split_high:
 34331 0000649C 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34332 000064A1 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34333 000064A5 29D9                            SUB     CX,BX
 34334 000064A7 8CDA                            MOV     DX,DS
 34335 000064A9 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34336 000064AB 01CA                            ADD     DX,CX                   ; point to next block
 34337 000064AD 8EC2                            MOV     ES,DX                   ; no decrement!
 34338 000064AF 49                              DEC     CX
 34339 000064B0 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34340 000064B2 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34341                                  ;
 34342                                  ; we have scanned memory and have found all appropriate blocks
 34343                                  ; check for the type of allocation desired; first and best are identical
 34344                                  ; last must be split high
 34345                                  ;
 34346                                  alloc_do_split:
 34347                                  
 34348                                  ; 17/12/2022
 34349                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34350                                  ;%if 0
 34351                                  	; 14/05/2019
 34352                                  	; MSDOS 6.0			; M000 - start
 34353                                  	;xor	cx,cx
 34354 000064B4 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34355                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34356 000064B9 80E13F                  	and	cl,3Fh
 34357                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34358 000064BC 80F901                  	cmp	cl,BEST_FIT
 34359 000064BF 77DB                    	ja	short alloc_do_split_high
 34360                                  ;%endif
 34361                                  
 34362                                  	; 17/12/2022
 34363                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34364                                  	; MSDOS 6.0 & MSDOS 5.0
 34365                                  	;xor	cx,cx
 34366                                  	;mov	cl,[ss:AllocMethod]
 34367                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34368                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34369                                  	;ja	short alloc_do_split_high
 34370                                  
 34371                                  	; 15/03/2018
 34372                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34373                                  	; 04/08/2018
 34374                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34375                                          ;JA	SHORT alloc_do_split_high
 34376                                          
 34377 000064C1 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34378 000064C6 7205                    	JB      SHORT alloc_get_size
 34379 000064C8 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34380                                  
 34381                                  alloc_get_size:
 34382 000064CD 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34383 000064D1 29D9                            SUB     CX,BX                   ; get room left over
 34384 000064D3 8CD8                            MOV     AX,DS
 34385 000064D5 89C2                            MOV     DX,AX                   ; save for owner setting
 34386 000064D7 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34387 000064D9 01D8                            ADD     AX,BX
 34388 000064DB 40                              INC     AX                      ; remember the header
 34389 000064DC 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34390 000064DE 49                              DEC     CX                      ; CX <- size of split block
 34391                                  alloc_set_sizes:
 34392 000064DF 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34393 000064E3 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34394                                  	;mov	bl,4Dh ; 'M'
 34395 000064E8 B34D                            MOV     BL,arena_signature_normal
 34396 000064EA 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34397 000064EC 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34398 000064EF 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34399                                  
 34400                                  alloc_set_owner:
 34401 000064F4 8EDA                            MOV     DS,DX
 34402 000064F6 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34403 000064FA A30100                          MOV     [ARENA.OWNER],AX
 34404 000064FD 8CD8                            MOV     AX,DS
 34405 000064FF 40                              INC     AX
 34406 00006500 5B                              POP     BX
 34407                                  	;LeaveCrit critMem
 34408 00006501 E89CAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34409                                  	
 34410                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34411                                  alloc_ok:
 34412                                          ;transfer SYS_RET_OK
 34413 00006504 E97DA1                  	JMP	SYS_RET_OK
 34414                                  
 34415                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34416                                  
 34417                                  ; MSDOS 6.0
 34418                                  ;----------------------------------------------------------------------------
 34419                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34420                                  ;
 34421                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34422                                  ;	any following free space onto this block; then we try to trim the
 34423                                  ;	block down to the size requested.
 34424                                  ;
 34425                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34426                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34427                                  ;	Thus the maximum-size-possible value that we return has already
 34428                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34429                                  ;
 34430                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34431                                  ;		finish it's work. For this reason we build the allocsf
 34432                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34433                                  ;		code.
 34434                                  ;
 34435                                  ;	ENTRY	(es) = segment of old block
 34436                                  ;		(bx) = newsize
 34437                                  ;		(ah) = SETBLOCK
 34438                                  ;
 34439                                  ;	EXIT	'C' clear if OK
 34440                                  ;		'C' set if error
 34441                                  ;		  (ax) = error_invalid_block
 34442                                  ;		       = error_arena_trashed
 34443                                  ;		       = error_not_enough_memory
 34444                                  ;		       = error_invalid_function
 34445                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34446                                  ;	USES	???? BUGBUG
 34447                                  ;----------------------------------------------------------------------------
 34448                                  
 34449                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34450                                  ;----------------------------------------------------------------------------
 34451                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34452                                  ;
 34453                                  ;   Assembler usage:
 34454                                  ;           MOV     ES,block
 34455                                  ;           MOV     BX,newsize
 34456                                  ;           MOV     AH,setblock
 34457                                  ;           INT     21h
 34458                                  ;         if setblock fails for growing, BX will have the maximum
 34459                                  ;         size possible
 34460                                  ;   Error return:
 34461                                  ;           AX = error_invalid_block
 34462                                  ;              = error_arena_trashed
 34463                                  ;              = error_not_enough_memory
 34464                                  ;              = error_invalid_function
 34465                                  ;----------------------------------------------------------------------------
 34466                                  
 34467                                  _$SETBLOCK:        
 34468                                  	; 04/08/2018 - Retro DOS v3.0
 34469                                  	;EnterCrit   critMem
 34470 00006507 E87BAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34471                                  
 34472 0000650A BF0000                  	MOV     DI,ARENA.SIGNATURE
 34473 0000650D 8CC0                            MOV     AX,ES
 34474 0000650F 48                              DEC     AX
 34475 00006510 E86CFE                          CALL    check_signature
 34476 00006513 7303                            JNC     SHORT setblock_grab
 34477                                  
 34478                                  setblock_bad:
 34479 00006515 E905FF                          JMP     alloc_trashed
 34480                                  
 34481                                  setblock_grab:
 34482 00006518 8ED8                            MOV     DS,AX
 34483 0000651A E872FE                          CALL    Coalesce
 34484 0000651D 72F6                            JC      SHORT setblock_bad
 34485 0000651F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34486 00006523 51                              PUSH    CX
 34487 00006524 39CB                            CMP     BX,CX
 34488 00006526 76A5                            JBE     SHORT alloc_get_size
 34489 00006528 E91EFF                          JMP     alloc_fail
 34490                                  
 34491                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34492                                  
 34493                                  ; MSDOS 6.0
 34494                                  ;----------------------------------------------------------------------------
 34495                                  ;**	$DEALLOC - Free Heap Memory
 34496                                  ;
 34497                                  ;	ENTRY	(es) = address of item
 34498                                  ;
 34499                                  ;	EXIT	'C' clear of OK
 34500                                  ;		'C' set if error
 34501                                  ;		  (AX) = error_invalid_block
 34502                                  ;	USES	???? BUGBUG
 34503                                  
 34504                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34505                                  ;----------------------------------------------------------------------------
 34506                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34507                                  ;
 34508                                  ;   Assembler usage:
 34509                                  ;           MOV     ES,block
 34510                                  ;           MOV     AH,dealloc
 34511                                  ;           INT     21h
 34512                                  ;
 34513                                  ;   Error return:
 34514                                  ;           AX = error_invalid_block
 34515                                  ;              = error_arena_trashed
 34516                                  ;---------------------------------------------------------------------------- 
 34517                                  
 34518                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34519                                  _$DEALLOC:
 34520                                  	; 14/05/2019 - Retro DOS v4.0    
 34521                                  	; 04/08/2018 - Retro DOS v3.0
 34522                                  	;EnterCrit   critMem
 34523 0000652B E857AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34524                                  
 34525                                  	; MSDOS 6.0			; M016, M068 - Start
 34526 0000652E 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34527                                  					; Q: was the previous call an int 21
 34528                                  					;    exec call
 34529 00006534 740E                    	jz	short deallocate	; N: continue
 34530 00006536 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34531 0000653C 7506                    	jne	short deallocate	; N: continue
 34532 0000653E 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34533                                  deallocate:				; M016, M068 - End
 34534 00006544 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34535 00006547 8CC0                            MOV     AX,ES
 34536 00006549 48                              DEC     AX
 34537 0000654A E832FE                          CALL    check_signature
 34538 0000654D 720A                            JC      SHORT dealloc_err
 34539 0000654F 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34540                                  	;LeaveCrit critMem
 34541 00006554 E849AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34542                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34543                                          ;transfer SYS_RET_OK
 34544                                  dealloc_ok:
 34545 00006557 EBAB                    	jmp	short alloc_ok
 34546                                  	;JMP	SYS_RET_OK
 34547                                  
 34548                                  dealloc_err:
 34549                                  	;LeaveCrit critMem
 34550 00006559 E844AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34551                                          ;error	error_invalid_block
 34552                                  	;mov	al,9
 34553 0000655C B009                    	MOV	AL,error_invalid_block
 34554                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34555                                  dealloc_errj:
 34556                                  AllocOperErrj:	; 17/12/2022
 34557 0000655E E92CA1                  	JMP	SYS_RET_ERR
 34558                                  
 34559                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34560                                  
 34561                                  ; MSDOS 6.0
 34562                                  ;----------------------------------------------------------------------------
 34563                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34564                                  ;
 34565                                  ;	Assembler usage:
 34566                                  ;           MOV     AH,AllocOper
 34567                                  ;           MOV     BX,method
 34568                                  ;           MOV     AL,func
 34569                                  ;           INT     21h
 34570                                  ;
 34571                                  ;	ENTRY	
 34572                                  ;		(al) = 0
 34573                                  ;		  Get allocation Strategy in (ax)
 34574                                  ;
 34575                                  ;		(al) = 1, (bx) = method = zw0000xy
 34576                                  ;		  Set allocation strategy.
 34577                                  ;		   w  = 1  => HIGH_ONLY
 34578                                  ;		   z  = 1  => HIGH_FIRST
 34579                                  ;		   xy = 00 => FIRST_FIT
 34580                                  ;		      = 01 => BEST_FIT
 34581                                  ;		      = 10 => LAST_FIT
 34582                                  ;
 34583                                  ;		(al) = 2
 34584                                  ;		  Get UMB link state in (al)
 34585                                  ;
 34586                                  ;		(al) = 3
 34587                                  ;		  Set UMB link state
 34588                                  ;		   (bx) = 0 => Unlink UMBs
 34589                                  ;		   (bx) = 1 => Link UMBs
 34590                                  ;
 34591                                  ;
 34592                                  ;	EXIT	'C' clear if OK
 34593                                  ;
 34594                                  ;		 if (al) = 0
 34595                                  ;		  (ax) = existing method
 34596                                  ;		 if (al) = 1
 34597                                  ;		  Sets allocation strategy
 34598                                  ;		 if (al) = 2
 34599                                  ;		  (al) = 0 => UMBs not linked
 34600                                  ;		  (al) = 1 => UMBs linked in
 34601                                  ;		 if (al) = 3
 34602                                  ;		  Links/Unlinks the UMBs into DOS chain
 34603                                  ;
 34604                                  ;		'C' set if error
 34605                                  ;		  AX = error_invalid_function
 34606                                  ;
 34607                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34608                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34609                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34610                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34611                                  ;		    arena' if an arena sig is damaged.
 34612                                  ;----------------------------------------------------------------------------
 34613                                  
 34614                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34615                                  ;----------------------------------------------------------------------------
 34616                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34617                                  ;
 34618                                  ;   Assembler usage:
 34619                                  ;           MOV     AH,AllocOper
 34620                                  ;           MOV     BX,method
 34621                                  ;           MOV     AL,func
 34622                                  ;           INT     21h
 34623                                  ;
 34624                                  ;   Error return:
 34625                                  ;           AX = error_invalid_function
 34626                                  ;----------------------------------------------------------------------------
 34627                                  
 34628                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34629                                  _$ALLOCOPER:
 34630                                  	; 14/05/2019 - Retro DOS v4.0
 34631                                  	; MSDOS 6.0
 34632 00006561 08C0                    	or	al,al ; 0
 34633 00006563 741E                    	jz	short AllocGetStrat
 34634                                  	; 17/12/2022
 34635                                  	;cmp	al,1
 34636                                  	;jz	short AllocSetStrat
 34637                                  
 34638                                  	; 01/12/2022
 34639                                  	;cmp	al, 2
 34640                                  	;jb	short AllocSetStrat
 34641                                  	;ja	short AllocSetLink
 34642                                  	;;jmp	short AllocGetLink
 34643                                  ;AllocGetLink:
 34644                                  	; MSDOS 6.0
 34645                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34646                                  	;and 	al,LINKSTATE		
 34647                                  	;;transfer SYS_RET_OK
 34648                                  	;jmp	SYS_RET_OK
 34649                                  
 34650 00006565 3C02                    	cmp	al,2
 34651                                  	; 17/12/2022
 34652 00006567 7223                    	jb	short AllocSetStrat ; al = 1
 34653 00006569 7432                    	je	short AllocGetLink
 34654                                  
 34655                                  	;cmp	al,2
 34656                                  	;jz	short AllocGetLink
 34657 0000656B 3C03                    	cmp	al,3
 34658 0000656D 7436                    	jz	short AllocSetLink
 34659                                  
 34660                                  	; 15/04/2018
 34661                                  	;CMP	AL,1
 34662                                          ;JB	SHORT AllocOperGet
 34663                                          ;JZ	SHORT AllocOperSet
 34664                                  
 34665                                  AllocOperError:
 34666                                  	; 04/08/2018 - Retro DOS v3.0
 34667                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34668                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34669 0000656F 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34670                                  	;error	error_invalid_function
 34671                                  	;mov	al,1
 34672 00006575 B001                    	MOV	AL,error_invalid_function
 34673                                  	; 17/12/2022
 34674                                  ;AllocOperErrj:
 34675                                  	;JMP	SYS_RET_ERR
 34676                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34677                                  	;jmp	short dealloc_errj
 34678                                  	; 17/12/2022
 34679 00006577 EBE5                    	jmp	short AllocOperErrj
 34680                                  
 34681                                  AllocArenaError:
 34682                                  	; MSDOS 6.0
 34683 00006579 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34684                                  					; M009: Extended Error Locus
 34685                                  	;error	error_arena_trashed	; M009:
 34686                                  	;mov	al,7
 34687 0000657F B007                    	MOV	AL,error_arena_trashed
 34688                                  	;JMP	SYS_RET_ERR
 34689 00006581 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34690                                  
 34691                                  AllocGetStrat: 
 34692                                  	; MSDOS 6.0
 34693                                  AllocOperGet:
 34694 00006583 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34695 00006587 30E4                            XOR     AH,AH
 34696                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34697                                  	;transfer SYS_RET_OK
 34698                                  AllocOperOk:
 34699                                  	; 17/12/2022
 34700                                  	;jmp	short dealloc_ok
 34701 00006589 E9F8A0                  	JMP	SYS_RET_OK
 34702                                  
 34703                                  AllocSetStrat: 
 34704                                  	; 14/05/2019
 34705                                  	; MSDOS 6.0
 34706 0000658C 53                      	push	bx			; M000 - start
 34707                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34708                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34709                                  	; 17/12/2022
 34710 0000658D 80E33F                  	and	bl,3Fh
 34711 00006590 83FB02                  	cmp	bx,2			; BX must be 0-2
 34712                                  	;cmp	bl,2
 34713 00006593 5B                      	pop	bx			; M000 - end
 34714 00006594 77D9                    	ja	short AllocOperError
 34715                                  
 34716                                  AllocOperSet:
 34717 00006596 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34718                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34719                                  	;transfer SYS_RET_OK
 34720                                  AllocOperOkj:
 34721 0000659B EBEC                    	jmp	short AllocOperOk
 34722                                  	;JMP	SYS_RET_OK
 34723                                  
 34724                                  AllocGetLink:
 34725                                  	; MSDOS 6.0
 34726 0000659D 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34727                                  	;and	al,1
 34728 000065A1 2401                    	and 	al,LINKSTATE		
 34729                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34730                                  	;transfer SYS_RET_OK
 34731                                  AllocOperOkj2:
 34732                                  	; 17/12/2022
 34733 000065A3 EBE4                    	jmp	short AllocOperOk
 34734                                  	;jmp	short AllocOperOkj
 34735                                  	;;JMP	SYS_RET_OK
 34736                                  
 34737                                  AllocSetLink:
 34738                                  	; MSDOS 6.0			; M009 - start
 34739 000065A5 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34740 000065AA 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34741 000065AD 74C0                    	je	short AllocOperError	; N: error
 34742                                  					; Y: continue
 34743                                  					; M009 - end
 34744 000065AF 83FB01                  	cmp	bx,1			
 34745 000065B2 7204                    	jb	short UnlinkUmbs
 34746 000065B4 741C                    	jz	short LinkUmbs
 34747                                  	
 34748 000065B6 EBB7                    	jmp	short AllocOperError
 34749                                  	
 34750                                  UnlinkUmbs:
 34751                                  	;test	byte [ss:UMBFLAG],1
 34752 000065B8 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34753 000065BE 7410                    	jz	short unlinked		; Y: return 
 34754                                  	
 34755 000065C0 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34756 000065C3 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34757                                  	
 34758                                  					; make it last
 34759 000065C5 C60600005A              	mov	byte [0],arena_signature_end
 34760                                  	
 34761                                  	;and	byte [ss:UMBFLAG],0FEh
 34762 000065CA 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34763                                  	
 34764                                  unlinked:
 34765                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34766                                  	;transfer SYS_RET_OK
 34767                                  	; 17/12/2022
 34768 000065D0 EBB7                    	jmp	short AllocOperOk
 34769                                  	;jmp	short AllocOperOkj2
 34770                                  	;;JMP	SYS_RET_OK
 34771                                  
 34772                                  LinkUmbs:
 34773 000065D2 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34774 000065D8 7510                    	jnz	short linked		; Y: return
 34775                                  	
 34776 000065DA E80F00                  	call	GetLastArena		; get arena before umb_head
 34777 000065DD 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34778                                  	
 34779                                  					; make it normal. M061: ds points to
 34780                                  					; arena before umb_head
 34781 000065DF C60600004D              	mov	byte [0],arena_signature_normal
 34782                                  	
 34783 000065E4 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34784                                  linked:
 34785                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34786                                  	;transfer SYS_RET_OK
 34787                                  	; 17/12/2022
 34788 000065EA EB9D                    	jmp	short AllocOperOk
 34789                                  	;jmp	short unlinked
 34790                                  	;;JMP	SYS_RET_OK
 34791                                  
 34792                                  ; MSDOS 6.0
 34793                                  ;--------------------------------------------------------------------------
 34794                                  ; Procedure Name : GetLastArena		-  M003
 34795                                  ;
 34796                                  ; Inputs	 : cx = umb_head
 34797                                  ;
 34798                                  ;
 34799                                  ; Outputs	 : If UMBs are linked
 34800                                  ;			ES = umb_head
 34801                                  ;			DS = arena before umb_head
 34802                                  ;		   else
 34803                                  ;			DS = last arena
 34804                                  ;			ES = next arena. will be umb_head if NC.
 34805                                  ;
 34806                                  ;		   CY if error
 34807                                  ;
 34808                                  ; Uses		 : DS, ES, DI, BX
 34809                                  ;--------------------------------------------------------------------------
 34810                                  
 34811                                  ; 14/05/2019 - Retro DOS v4.0
 34812                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34813                                  
 34814                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34815                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34816                                  	
 34817                                  GetLastArena:
 34818 000065EC 50                      	push	ax			; save ax
 34819                                  
 34820 000065ED 36A1[2400]              	mov	ax,[ss:arena_head]
 34821 000065F1 8EC0                    	mov	es,ax			; es = arena_head
 34822 000065F3 31FF                    	xor	di,di
 34823                                  
 34824 000065F5 26803D5A                	cmp     byte [es:di],arena_signature_end
 34825                                  					; Q: is this the last arena
 34826 000065F9 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34827                                  					
 34828                                  GLA_next:
 34829 000065FB 8ED8                    	mov	ds,ax
 34830 000065FD E878FD                  	call	arena_next		; ax, es -> next arena
 34831                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34832                                  	;jc	short GLA_err
 34833                                  	; 17/12/2022
 34834 00006600 7228                    	jc	short GLA_err2
 34835                                  
 34836 00006602 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34837 00006608 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34838                                  					;    umb_head
 34839                                  					; N: terminating condition is 05Ah
 34840                                  
 34841 0000660A 26803D5A                	cmp     byte [es:di],arena_signature_end
 34842                                  					; Q: is this the last arena
 34843 0000660E EB02                    	jmp	short GLA_@f
 34844                                  GLA_chkumb:
 34845 00006610 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34846                                  GLA_@f:
 34847 00006612 75E7                    	jne	short GLA_next		; N: get next arena
 34848                                  
 34849                                  GLA_done:
 34850                                  					; M061 - Start
 34851 00006614 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34852 0000661A 750B                    	jnz	short GLA_ret		; Y: we're done
 34853                                  					; N: let us confirm that the next 
 34854                                  					;    arena is umb_head
 34855 0000661C 8ED8                    	mov	ds,ax
 34856 0000661E E857FD                  	call	arena_next		; ax, es -> next arena
 34857                                  	;jc	short GLA_err
 34858 00006621 7207                    	jc	short GLA_err2
 34859 00006623 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34860 00006625 7502                    	jne	short GLA_err		; N: error
 34861                                  					; M061 - End
 34862                                  GLA_ret:
 34863                                  	; 17/12/2022				
 34864                                  	;clc
 34865                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34866                                  	;clc
 34867 00006627 58                      	pop	ax			; M061
 34868 00006628 C3                      	retn				; M061
 34869                                  
 34870                                  GLA_err:
 34871 00006629 F9                      	stc				; M061
 34872                                  GLA_err2:
 34873 0000662A 58                      	pop	ax
 34874 0000662B C3                      	retn
 34875                                  
 34876                                  ;============================================================================
 34877                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34878                                  ;============================================================================
 34879                                  ; 04/08/2018 - Retro DOS v3.0
 34880                                  
 34881                                  ;	TITLE SRVCALL - Server DOS call
 34882                                  ;	NAME  SRVCALL
 34883                                  
 34884                                  ;**	SRVCALL.ASM - Server DOS call functions
 34885                                  ;
 34886                                  ;
 34887                                  ;	$ServerCall
 34888                                  ;
 34889                                  ;	Modification history:
 34890                                  ;
 34891                                  ;	    Created: ARR 08 August 1983
 34892                                  
 34893                                  ;AsmVars <Installed>
 34894                                  
 34895                                  ;include dpl.asm
 34896                                  
 34897                                  ;Installed = TRUE
 34898                                  
 34899                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34900                                  ; ---------------------------------------------------------------------------
 34901                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34902                                  
 34903                                  ;BREAK <ServerCall -- Server DOS call>
 34904                                  
 34905                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34906                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34907                                  
 34908                                  ;hkn; TABLE	SEGMENT
 34909                                  ;Public SRVC001S,SRVC001E
 34910                                  ;SRVC001S label byte
 34911                                  
 34912                                  SRVC001S:
 34913                                  
 34914 0000662C [3066]                  SERVERTAB:	dw	SERVER_DISP
 34915 0000662E [8266]                  SERVERLEAVE:	dw	SERVERRETURN
 34916 00006630 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34917 00006631 [EA66]                  		dw	SRV_CALL	; 0
 34918 00006633 [8366]                  		dw	COMMIT_ALL	; 1
 34919 00006635 [B966]                  		dw	CLOSE_NAME	; 2
 34920 00006637 [C466]                  		dw	CLOSE_UID	; 3
 34921 00006639 [CB66]                  		dw	CLOSE_UID_PID	; 4
 34922 0000663B [D266]                  		dw	GET_LIST	; 5
 34923 0000663D [2B67]                  		dw	GET_DOS_DATA	; 6
 34924 0000663F [4F67]                  		dw	SPOOL_OPER	; 7
 34925 00006641 [4F67]                  		dw	SPOOL_OPER	; 8
 34926 00006643 [4F67]                  		dw	SPOOL_OPER	; 9
 34927 00006645 [5B67]                  		dw	_$SetExtendedError  ; 10
 34928                                  
 34929                                  SERVER_DISP_END:  ;  LABEL BYTE
 34930                                  
 34931                                  ;SRVC001E label byte
 34932                                  
 34933                                  SRVC001E:
 34934                                  
 34935                                  ;hkn; TABLE	ENDS
 34936                                  
 34937                                  ;----------------------------------------------------------------------------
 34938                                  ;
 34939                                  ; Procedure Name : $ServerCall
 34940                                  ;
 34941                                  ; Inputs:
 34942                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34943                                  ; Function:
 34944                                  ;	AL=0	Server DOS call
 34945                                  ;	AL=1	Commit All files
 34946                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 34947                                  ;	AL=3	Close all files for DPL_UID
 34948                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 34949                                  ;	AL=5	Get open file list entry
 34950                                  ;		    IN: BX File Index
 34951                                  ;			CX User Index
 34952                                  ;		    OUT:ES:DI -> Name
 34953                                  ;			BX = UID
 34954                                  ;		    CX = # locked blocks held by this UID
 34955                                  ;	AL=6	Get DOS data area
 34956                                  ;		    OUT: DS:SI -> Start
 34957                                  ;			CX size in bytes of swap if indos
 34958                                  ;			DX size in bytes of swap always
 34959                                  ;	AL=7	Get truncate flag
 34960                                  ;	AL=8	Set truncate flag
 34961                                  ;	AL=9	Close all spool files
 34962                                  ;	AL=10	SetExtendedError
 34963                                  ;
 34964                                  ;----------------------------------------------------------------------------
 34965                                  
 34966                                  _$ServerCall:
 34967                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34968                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 34969                                  	; 10/06/2019
 34970                                  	; 29/04/2019 - Retro DOS v4.0
 34971                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 34972                                  
 34973                                  	; 05/08/2018 - Retro DOS v3.0
 34974                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 34975 00006647 3C07                    	CMP	AL,7
 34976 00006649 7204                    	JB	short SET_STUFF
 34977 0000664B 3C09                    	CMP	AL,9
 34978 0000664D 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 34979                                  SET_STUFF:
 34980 0000664F 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 34981                                  	;mov	bx,[si+12h]
 34982 00006651 8B5C12                  	MOV	BX,[SI+DPL.UID]
 34983                                  
 34984                                  	; MSDOS 6.0
 34985                                  ;SR;
 34986                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 34987                                  ; of USER_ID
 34988                                  
 34989 00006654 36F606[3010]01          	test	byte [SS:IsWin386],1
 34990 0000665A 7505                    	jnz	short skip_win386
 34991                                  
 34992                                  ;hkn; SS override for user_id and proc_id
 34993                                  	; 15/08/2018
 34994 0000665C 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 34995                                  
 34996                                  skip_win386:
 34997 00006661 8B5C14                  	MOV	BX,[SI+DPL.PID]
 34998 00006664 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 34999                                  NO_SET_ID:
 35000                                  	; 10/06/2019 - Retro DOS v4.0
 35001 00006669 2EFF36[2E66]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35002 0000666E 2EFF36[2C66]            	PUSH	word [cS:SERVERTAB]	; push table address
 35003 00006673 50                      	PUSH	AX
 35004 00006674 E81EAC                  	call	TableDispatch
 35005                                  
 35006                                  ;hkn; SS override
 35007                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35008 00006677 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35009                                  	;error	error_invalid_function
 35010                                  	;mov	al,1
 35011 0000667D B001                    	MOV	AL,error_invalid_function
 35012                                  servercall_error:
 35013 0000667F E90BA0                  	JMP	SYS_RET_ERR
 35014                                  
 35015                                  SERVERRETURN:
 35016 00006682 C3                      	retn
 35017                                  
 35018                                  ; Commit - iterate through the open file list and make sure that the
 35019                                  ; directory entries are correctly updated.
 35020                                  
 35021                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35022                                  COMMIT_ALL:
 35023 00006683 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35024 00006685 16                      	push	ss
 35025 00006686 1F                      	pop	ds
 35026 00006687 E8FBAC                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35027                                  CommitLoop:
 35028 0000668A 53                      	push	bx
 35029 0000668B E82401                  	call	SFFromSFN
 35030 0000668E 7222                    	JC	short CommitDone
 35031 00006690 26833D00                	cmp	word [es:di],0
 35032                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35033                                  					; if (ThisSFT->refcount != 0)
 35034 00006694 7418                    	JZ	short CommitNext
 35035                                  	;cmp	word [es:di],0FFFFh ; -1
 35036 00006696 26833DFF                	cmp	word [ES:DI],sf_busy
 35037                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35038                                  					; BUSY SFTs have god knows what
 35039 0000669A 7412                    	JZ	short CommitNext	;   in them.
 35040                                  	; 17/12/2022
 35041 0000669C 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35042                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35043 000066A1 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35044                                  					;	doesn't deadlock
 35045 000066A3 893E[9E05]              	MOV	[THISSFT],DI
 35046 000066A7 8C06[A005]              	MOV	[THISSFT+2],ES
 35047 000066AB E876CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35048                                  CommitNext:
 35049 000066AE 5B                      	pop	bx
 35050 000066AF 43                      	INC	BX
 35051 000066B0 EBD8                    	JMP	short CommitLoop
 35052                                  CommitDone:
 35053 000066B2 E8EBAC                  	call	LCritSFT
 35054 000066B5 5B                      	pop	bx
 35055                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35056                                  Commit_Ok:
 35057 000066B6 E9CB9F                  	jmp	SYS_RET_OK
 35058                                  	
 35059                                  
 35060                                  CLOSE_NAME:
 35061                                  
 35062                                  ;if installed
 35063                                  
 35064                                  ;hkn; SS override
 35065                                  	;call	far [ss:MFTcloN]
 35066 000066B9 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35067                                  ;else
 35068                                  ;	Call	MFTcloN
 35069                                  ;endif
 35070                                  
 35071                                  CheckReturns:
 35072 000066BE 7202                    	JC	short func_err
 35073                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35074                                  	;transfer SYS_RET_OK
 35075                                  Commit_Okj:
 35076 000066C0 EBF4                    	jmp	short Commit_Ok
 35077                                  	;jmp	SYS_RET_OK
 35078                                  
 35079                                  func_err:
 35080                                  	;transfer SYS_RET_ERR
 35081                                  	;jmp	SYS_RET_ERR
 35082 000066C2 EBBB                    	jmp	short servercall_error
 35083                                  
 35084                                  CLOSE_UID:
 35085                                  
 35086                                  ;if installed
 35087                                  ;hkn; SS override
 35088                                  	;call	far [ss:MFTclU]
 35089 000066C4 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35090                                  ;else
 35091                                  ;	Call	MFTclU
 35092                                  ;endif
 35093 000066C9 EBF3                    	JMP	short CheckReturns
 35094                                  
 35095                                  CLOSE_UID_PID:
 35096                                  
 35097                                  ;if installed
 35098                                  ;hkn; SS override
 35099                                  	;call	far [ss:MFTCloseP]
 35100 000066CB 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35101                                  ;else
 35102                                  ;	Call	MFTCloseP
 35103                                  ;endif
 35104 000066D0 EBEC                    	JMP	short CheckReturns
 35105                                  
 35106                                  GET_LIST:
 35107                                  
 35108                                  ;if installed
 35109                                  ;hkn; SS override
 35110                                  	;call	far [ss:MFT_get]
 35111 000066D2 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35112                                  ;else
 35113                                  ;	Call	MFT_get
 35114                                  ;endif
 35115 000066D7 72E9                    	JC	short func_err
 35116 000066D9 E8EE9D                  	call	Get_User_Stack
 35117                                  	;mov	[si+2],bx
 35118 000066DC 895C02                  	MOV	[SI+user_env.user_BX],BX
 35119                                  	;mov	[si+10],di
 35120 000066DF 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35121                                  	;mov	[si+16],es
 35122 000066E2 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35123                                  SetCXOK:
 35124                                  	;mov	[si+4],cx
 35125 000066E5 894C04                  	MOV	[SI+user_env.user_CX],CX
 35126                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35127                                  	;transfer SYS_RET_OK
 35128                                  Commit_Okj2:
 35129                                  	; 17/12/2022
 35130 000066E8 EBCC                    	jmp	short Commit_Ok
 35131                                  	;jmp	short Commit_Okj
 35132                                  	;;jmp	SYS_RET_OK
 35133                                  
 35134                                  SRV_CALL:
 35135 000066EA 58                      	POP	AX			; get rid of call to $srvcall
 35136 000066EB 1E                      	push	ds
 35137 000066EC 56                      	push	si
 35138 000066ED E8DA9D                  	call	Get_User_Stack
 35139 000066F0 5F                      	pop	di
 35140 000066F1 07                      	pop	es
 35141                                  
 35142                                  ; DS:SI point to stack
 35143                                  ; ES:DI point to DPL
 35144                                  
 35145 000066F2 E87FAB                  	call	XCHGP
 35146                                  
 35147                                  ; DS:SI point to DPL
 35148                                  ; ES:DI point to stack
 35149                                  ;
 35150                                  ; We now copy the registers from DPL to save stack
 35151                                  
 35152 000066F5 56                      	push	si
 35153 000066F6 B90600                  	MOV	CX,6
 35154 000066F9 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35155 000066FB 47                      	INC	DI
 35156 000066FC 47                      	INC	DI			; Skip user_BP
 35157 000066FD A5                      	MOVSW				; DS
 35158 000066FE A5                      	MOVSW				; ES
 35159 000066FF 5E                      	pop	si			; DS:SI -> DPL
 35160 00006700 8B04                    	mov	ax,[SI]
 35161                                  	;MOV	AX,[SI+DPL.AX]
 35162                                  	;mov	bx,[si+2]
 35163 00006702 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35164                                  	;mov	cx,[si+4]
 35165 00006705 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35166                                  	;mov	dx,[si+6]
 35167 00006708 8B5406                  	MOV	DX,[SI+DPL.DX]
 35168                                  	;mov	di,[si+10]
 35169 0000670B 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35170                                  	;mov	es,[si+14]
 35171 0000670E 8E440E                  	MOV	ES,[SI+DPL.ES]
 35172                                  	;push	word [si+8]
 35173 00006711 FF7408                  	PUSH	word [SI+DPL.SI]
 35174                                  	;mov	ds,[si+12]
 35175 00006714 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35176 00006717 5E                      	POP	SI
 35177                                  
 35178                                  ;hkn; SS override for next 3
 35179 00006718 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35180 0000671D 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35181 00006722 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35182 00006728 E99C9C                  	jmp	REDISP
 35183                                  
 35184                                  GET_DOS_DATA:
 35185 0000672B 16                      	push	ss
 35186 0000672C 07                      	pop	es
 35187 0000672D BF[2003]                	MOV     DI,SWAP_START
 35188 00006730 B9[AC0A]                	MOV     CX,SWAP_END
 35189 00006733 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35190 00006736 29F9                    	SUB     CX,DI
 35191 00006738 29FA                    	SUB     DX,DI
 35192 0000673A D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35193 0000673C 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35194 0000673F D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35195 00006741 E8869D                  	call	Get_User_Stack
 35196                                  	;mov	[si+14],es
 35197 00006744 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35198                                  	;mov	[si+8],di
 35199 00006747 897C08                  	MOV     [SI+user_env.user_SI],DI
 35200                                  	;mov	[si+6],dx
 35201 0000674A 895406                  	MOV     [SI+user_env.user_DX],DX
 35202 0000674D EB96                    	JMP	short SetCXOK
 35203                                  
 35204                                  SPOOL_OPER:
 35205                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35206                                  
 35207 0000674F 50                      	push    ax
 35208 00006750 B82511                  	mov     ax,1125h
 35209 00006753 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35210                                  			; STACK: WORD subfunction
 35211                                  			; Return: CF set on error, AX = error code
 35212                                  			; STACK unchanged
 35213 00006755 5B                      	pop	bx
 35214                                  	; 17/12/2022
 35215                                  	;JC	short func_err2
 35216 00006756 7390                    	jnc	short Commit_Okj2
 35217                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35218                                  	;;jmp	SYS_RET_OK
 35219                                  	;jmp	short Commit_Okj2
 35220                                  	
 35221                                  func_err2:
 35222 00006758 E9329F                  	jmp	SYS_RET_ERR
 35223                                  
 35224                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35225                                  ;--------------------------------------------------------------------------
 35226                                  ;
 35227                                  ; Procedure Name : $SetExtendedError
 35228                                  ;
 35229                                  ; $SetExtendedError takes extended error information and loads it up for the
 35230                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35231                                  ; mask their actions.
 35232                                  ;
 35233                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35234                                  ;   Outputs: none
 35235                                  ;
 35236                                  ;---------------------------------------------------------------------------
 35237                                  
 35238                                  _$SetExtendedError:
 35239                                  
 35240                                  ;hkn; SS override for all variables used
 35241                                  
 35242 0000675B 8B04                    	mov	ax,[si]
 35243                                  	;MOV	AX,[SI+DPL.AX]
 35244 0000675D 36A3[2403]              	MOV	[SS:EXTERR],AX
 35245                                  	;mov	ax,[si+10]
 35246 00006761 8B440A                  	MOV	AX,[SI+DPL.DI]
 35247 00006764 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35248                                  	;mov	ax,[si+14]
 35249 00006768 8B440E                  	MOV	AX,[SI+DPL.ES]
 35250 0000676B 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35251                                  	;mov	ax,[si+2]
 35252 0000676F 8B4402                  	MOV	AX,[SI+DPL.BX]
 35253 00006772 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35254                                  	;mov	ax,[si+4]
 35255 00006776 8B4404                  	MOV	AX,[SI+DPL.CX]
 35256 00006779 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35257 0000677E C3                      	retn
 35258                                  
 35259                                  ;============================================================================
 35260                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35261                                  ;============================================================================
 35262                                  ; 05/08/2018 - Retro DOS v3.0
 35263                                  ; 05/05/2019 - Retro DOS v4.0
 35264                                  
 35265                                  ;**	Handle related utilities for MSDOS 2.X.
 35266                                  ;----------------------------------------------------------------------------
 35267                                  ;	pJFNFromHandle	written
 35268                                  ;	SFFromHandle	written
 35269                                  ;	SFFromSFN	written
 35270                                  ;	JFNFree 	written
 35271                                  ;	SFNFree 	written
 35272                                  ;
 35273                                  ;	Modification history:
 35274                                  ;
 35275                                  ;	    Created: MZ 1 April 1983
 35276                                  ;----------------------------------------------------------------------------
 35277                                  
 35278                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35279                                  
 35280                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35281                                  ;----------------------------------------------------------------------------
 35282                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35283                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35284                                  ;
 35285                                  ;	NOTE:
 35286                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35287                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35288                                  ;
 35289                                  ;	ENTRY	(bx) = handle
 35290                                  ;	EXIT	'C' clear if ok
 35291                                  ;		  (es:di) = address of JFN value
 35292                                  ;		'C' set if error
 35293                                  ;		  (ax) = error code
 35294                                  ;	USES	AX, DI, ES, Flags
 35295                                  ;----------------------------------------------------------------------------
 35296                                  
 35297                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35298                                  
 35299                                  pJFNFromHandle:
 35300                                  	; 05/05/2019 - Retro DOS v4.0
 35301                                  	;getdseg <es>			; es -> dosdata
 35302 0000677F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35303                                  	
 35304                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35305 00006784 268E06[3003]            	mov	es,[es:CurrentPDB]
 35306                                  
 35307                                  	;cmp	bx,[ES:32h]
 35308 00006789 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35309 0000678E 7204                    	JB	short pjfn10		; no, get offset
 35310                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35311                                  	;mov	al,6
 35312 00006790 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35313                                  ReturnCarry:
 35314 00006792 F9                      	STC                             ; signal error
 35315 00006793 C3                      	retn				; go back
 35316                                  pjfn10: 
 35317                                  	;les	di,[es:34h]
 35318 00006794 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35319 00006799 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35320                                  	;clc
 35321                                  pJFNFromHandle_error:
 35322 0000679B C3                      	retn
 35323                                  
 35324                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35325                                  ;----------------------------------------------------------------------------
 35326                                  ;
 35327                                  ; Procedure Name : SFFromHandle
 35328                                  ;
 35329                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35330                                  ;
 35331                                  ;   Input:      BX has handle
 35332                                  ;   Output:     Carry Set
 35333                                  ;                   AX has error code
 35334                                  ;               Carry Reset
 35335                                  ;                   ES:DI has pointer to SF entry
 35336                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35337                                  ; NOTE:
 35338                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35339                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35340                                  ;
 35341                                  ;----------------------------------------------------------------------------
 35342                                  
 35343                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35344                                  
 35345                                  SFFromHandle:
 35346 0000679C E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35347                                  	;retc				; return if error
 35348 0000679F 72FA                    	jc	short pJFNFromHandle_error
 35349 000067A1 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35350                                  	;JNZ	short GetSF		; nope, suck out SF
 35351                                  	;;mov	al,6
 35352                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35353                                  	;jmp	short ReturnCarry	; signal it
 35354                                  	; 17/12/2022
 35355                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35356 000067A5 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35357                                  	;JNZ	short GetSF		; nope, suck out SF
 35358                                  	;;mov	al,6
 35359                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35360                                  	;jmp	short ReturnCarry	; signal it
 35361                                  GetSF:
 35362 000067A7 53                      	push	bx			; save handle
 35363 000067A8 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35364 000067AB 30FF                    	XOR     BH,BH                   ; ignore upper half
 35365 000067AD E80200                  	CALL    SFFromSFN               ; get real sf spot
 35366 000067B0 5B                      	pop	bx			; restore
 35367 000067B1 C3                      	retn                        	; say goodbye
 35368                                  
 35369                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35370                                  
 35371                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35372                                  ;----------------------------------------------------------------------------
 35373                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35374                                  ;	is more than just a simple index instruction because the SF table
 35375                                  ;	can be made up of multiple pieces chained together. We follow the
 35376                                  ;	chain to the right piece and then do the index operation.
 35377                                  ;
 35378                                  ;   NOTE:
 35379                                  ;	This routine is called from SFFromHandle which is called
 35380                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35381                                  ;
 35382                                  ;	ENTRY	BX has SF index
 35383                                  ;	EXIT	'C' clear if OK
 35384                                  ;		  ES:DI points to SF entry
 35385                                  ;		'C' set if index too large
 35386                                  ;	USES	BX, DI, ES
 35387                                  ;----------------------------------------------------------------------------
 35388                                  
 35389                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35390                                  
 35391                                  SFFromSFN:
 35392                                  	; 05/05/2019 - Retro DOS v4.0
 35393                                  	;getdseg <es>			; es -> dosdata
 35394 000067B2 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35395                                  
 35396                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35397 000067B7 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35398                                  sfsfn5:	
 35399                                  	;cmp	bx,[es:di+4]
 35400 000067BC 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35401 000067C0 720E                    	JB	short sfsfn7		; yes, go grab it
 35402                                  	;sub	bx,[es:di+4]
 35403 000067C2 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35404 000067C6 26C43D                  	les	di,[es:di] ; 14/08/2018
 35405                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35406 000067C9 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35407 000067CC 75EE                    	JNZ	short sfsfn5		; no, try again
 35408 000067CE F9                      	STC
 35409 000067CF C3                      	retn				; return with error, not found
 35410                                  sfsfn7:
 35411 000067D0 50                      	push	ax
 35412                                  	;mov	ax,53 ; MSDOS 3.3
 35413                                  	;mov	ax,59 ; MSDOS 6.0
 35414                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35415                                  	
 35416                                  	; 17/12/2022
 35417 000067D1 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35418                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35419                                  	;mov	ax,SF_ENTRY.size ; 59
 35420                                  	
 35421 000067D3 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35422 000067D5 01C7                    	ADD	DI,AX			; add base of SF block
 35423 000067D7 58                      	pop	ax
 35424                                  	;add	di,6
 35425 000067D8 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35426 000067DB C3                      	retn				; return with 'C' clear
 35427                                  
 35428                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35429                                  
 35430                                  ;**	JFNFree - Find a Free JFN Slot
 35431                                  ;----------------------------------------------------------------------------
 35432                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35433                                  ;
 35434                                  ;	ENTRY	(ss) = DOSDATA
 35435                                  ;	EXIT	'C' clear if OK
 35436                                  ;		  (bx) = new handle
 35437                                  ;		  (es:di) = pointer to JFN slot
 35438                                  ;		'C' set if error
 35439                                  ;		  (al) = error code
 35440                                  ;	USES	bx, di, es, flags
 35441                                  ;----------------------------------------------------------------------------
 35442                                  
 35443                                  JFNFree:
 35444 000067DC 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35445                                  jfnf1:	
 35446 000067DE E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35447 000067E1 7209                    	JC	short jfnf5		; no more handles
 35448 000067E3 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35449 000067E7 7405                    	je	short jfnfx		; yes, carry is clear
 35450 000067E9 43                      	INC     BX                      ; no, next handle
 35451 000067EA EBF2                    	JMP	short jfnf1		; and try again
 35452                                  
 35453                                  	; Error. 'C' set
 35454                                  jfnf5:	
 35455                                  	;mov	al,4
 35456 000067EC B004                    	MOV	AL,error_too_many_open_files
 35457                                  jfnfx:	
 35458 000067EE C3                      	retn				; bye
 35459                                  
 35460                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35461                                  
 35462                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35463                                  ;----------------------------------------------------------------------------
 35464                                  ;	SFNFree scans through the sf table looking for a free entry
 35465                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35466                                  ;
 35467                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35468                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35469                                  ;	we can't just mark it busy because we may get blown out of our open
 35470                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35471                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35472                                  ;	an SFT with this value we look to see if it belongs to this user
 35473                                  ;	and process.  If it does belong to us then it must be an orphan
 35474                                  ;	and we reclaim it.
 35475                                  ;
 35476                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35477                                  ;		over and over, but we could at least set a high water mark...
 35478                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35479                                  ;		even though this is not a frequently called routine - jgl
 35480                                  ;
 35481                                  ;	ENTRY	(ss) = DOSDATA
 35482                                  ;	EXIT	'C' clear if no error
 35483                                  ;		  (bx) = SFN
 35484                                  ;		  (es:di) = pointer to SFT
 35485                                  ;		  es:[di].SFT_REF_COUNT = -1
 35486                                  ;		'C' set if error
 35487                                  ;		  (al) = error code
 35488                                  ;	USES	bx, di, es, Flags
 35489                                  ;----------------------------------------------------------------------------
 35490                                  
 35491                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35492                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35493                                  
 35494                                  SFNFree:
 35495                                  	; 12/08/2018
 35496                                  	; 05/08/2018 - Retro DOS v3.0
 35497                                  	;
 35498                                  	; MSDOS 6.0
 35499 000067EF 50                      	push	ax
 35500 000067F0 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35501                                  sfnf5:	
 35502 000067F2 53                      	push	bx
 35503 000067F3 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35504 000067F6 5B                      	pop	bx
 35505 000067F7 723A                    	jc	short sfnf95		; no more free SFNs
 35506 000067F9 26833D00                	cmp	word [ES:DI],0
 35507                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35508 000067FD 741D                    	je	short sfnf20			; yep, got one
 35509                                  	
 35510                                  	;cmp	word [es:di],0FFFFh ; -1
 35511 000067FF 26833DFF                	cmp	word [ES:DI],sf_busy
 35512                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35513 00006803 7403                    	je	short sfnf10		; special busy mark
 35514                                  sfnf7:	
 35515 00006805 43                      	inc	bx			; try the next one
 35516 00006806 EBEA                    	jmp	short sfnf5
 35517                                  
 35518                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35519                                  ;	it was abandoned during a earlier call and we can use it.
 35520                                  ;
 35521                                  ;	(bx)	= SFN
 35522                                  ;	(es:di) = pointer to SFT
 35523                                  ;	(TOS)	= caller's (ax)
 35524                                  
 35525                                  sfnf10:	
 35526 00006808 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35527                                  	;cmp	[es:di+2Fh],ax
 35528 0000680C 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35529 00006810 75F3                    	jnz	short sfnf7		; not ours
 35530 00006812 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35531                                  	;cmp	[es:di+31h],ax
 35532 00006816 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35533 0000681A 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35534                                  
 35535                                  ;	We have an SFT to allocate
 35536                                  ;
 35537                                  ;	(bx)	= SFN
 35538                                  ;	(es:di) = pointer to SFT
 35539                                  ;	(TOS)	= caller's (ax)
 35540                                  
 35541                                  sfnf20:
 35542                                  	; cf = 0 ;; Retro DOS v3.0
 35543                                  
 35544                                  	;mov	word [es:di],0FFFFh
 35545 0000681C 26C705FFFF              	mov	word [ES:DI],sf_busy
 35546                                  					; make sure that this is allocated
 35547                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35548                                  
 35549 00006821 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35550                                  	;mov	[es:di+2Fh],ax
 35551 00006825 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35552 00006829 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35553                                  	;mov	[es:di+31h],ax
 35554 0000682D 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35555                                  sfnf21: ;; Retro DOS v3.0
 35556                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35557                                  	;pop	ax
 35558                                  	;;clc
 35559                                  	;retn				; return with no error
 35560                                  	; 17/12/2022
 35561 00006831 58                      	pop	ax
 35562                                  	;clc
 35563 00006832 C3                      	retn
 35564                                  
 35565                                  ;**	Error - no more free SFNs
 35566                                  ;
 35567                                  ;	'C' set
 35568                                  ;	(TOS) = saved ax
 35569                                  
 35570                                  sfnf95: 
 35571 00006833 58                      	pop	ax
 35572                                  	;mov	al,4
 35573 00006834 B004                    	mov	al,error_too_many_open_files
 35574 00006836 C3                      	retn				; return with 'C' and error
 35575                                  
 35576                                  ;============================================================================
 35577                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35578                                  ;============================================================================
 35579                                  ; 13/07/2018 - Retro DOS v3.0
 35580                                  ; 20/05/2019 - Retro DOS v4.0
 35581                                  
 35582                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35583                                  
 35584                                  ;	BREAK <$Close - return a handle to the system>
 35585                                  ;----------------------------------------------------------------------------
 35586                                  ;
 35587                                  ;**	$Close - Close a file Handle
 35588                                  ;
 35589                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35590                                  ;		path
 35591                                  ;
 35592                                  ;	Assembler usage:
 35593                                  ;	    MOV     BX, handle
 35594                                  ;	    MOV     AH, Close
 35595                                  ;	    INT     int_command
 35596                                  ;
 35597                                  ;	ENTRY	(bx) = handle
 35598                                  ;	EXIT	<normal INT21 return convention>
 35599                                  ;	USES	all
 35600                                  ;
 35601                                  ;----------------------------------------------------------------------------
 35602                                  
 35603                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35604                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35605                                  
 35606                                  _$CLOSE:
 35607                                  ;	Grab the SFT pointer from the JFN.
 35608                                  
 35609 00006837 E85A02                  	call	CheckOwner		; get system file entry
 35610 0000683A 722B                    	jc	short CloseError	; error return
 35611 0000683C 16                      	push	ss
 35612 0000683D 1F                      	pop	ds			; For DOS_CLOSE
 35613 0000683E 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35614 00006842 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35615                                  
 35616                                  ; DS:SI point to JFN table entry.
 35617                                  ; ES:DI point to SFT
 35618                                  ;
 35619                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35620                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35621                                  ; If the file was not a net FCB, we free the JFN too.
 35622                                  
 35623                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35624 00006846 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35625 0000684A 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35626                                  	;mov	al,[ES:DI+2]
 35627 0000684C 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35628                                  	;and	al,0F0h
 35629 00006850 24F0                    	AND	AL,SHARING_MASK
 35630                                  	;cmp	al,70h
 35631 00006852 3C70                    	CMP	AL,SHARING_NET_FCB
 35632 00006854 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35633                                  
 35634                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35635                                  ; -1.
 35636                                  
 35637                                  FreeJFN:
 35638 00006856 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35639 00006859 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35640                                  PostFree:
 35641                                  
 35642                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35643                                  
 35644 0000685D E86FC7                  	call	DOS_CLOSE
 35645                                  
 35646                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35647                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35648                                  
 35649 00006860 7205                    	JC	short CloseError
 35650                                  	;mov	ah,3Eh
 35651 00006862 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35652                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35653                                  CloseOk:
 35654 00006864 E91D9E                  	jmp	SYS_RET_OK
 35655                                  CloseError:
 35656 00006867 E9239E                  	jmp	SYS_RET_ERR
 35657                                  
 35658                                  ;	BREAK <$Commit - commit the file>
 35659                                  ;----------------------------------------------------------------------------
 35660                                  ;
 35661                                  ;**	$Commit - Commit a File
 35662                                  ;
 35663                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35664                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35665                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35666                                  ;	and fix this!! jgl
 35667                                  ;
 35668                                  ;	Assembler usage:
 35669                                  ;	    MOV     BX, handle
 35670                                  ;	    MOV     AH, Commit
 35671                                  ;	    INT     int_command
 35672                                  ;
 35673                                  ;	ENTRY	(bx) = handle
 35674                                  ;	EXIT	none
 35675                                  ;	USES	all
 35676                                  ;;----------------------------------------------------------------------------
 35677                                  
 35678                                  _$COMMIT:
 35679                                  ;	Grab the SFT pointer from the JFN.
 35680                                  
 35681 0000686A E82702                  	call	CheckOwner		; get system file entry
 35682 0000686D 7213                    	JC	short CommitError	; error return
 35683 0000686F 16                      	push	ss
 35684 00006870 1F                      	pop	ds			; For DOS_COMMIT
 35685 00006871 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35686 00006875 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35687                                  
 35688                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35689                                  ;
 35690                                  ;	ES:DI point to SFT
 35691                                  
 35692 00006879 E8A8C8                  	call	DOS_COMMIT
 35693 0000687C 7204                    	JC	short CommitError
 35694                                  	; 07/12/2022
 35695                                  	;jc	short CloseError
 35696                                  	;mov	ah,68h
 35697 0000687E B468                    	MOV	AH,COMMIT
 35698                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35699                                  	;jmp	SYS_RET_OK
 35700                                  CommitOk:
 35701 00006880 EBE2                    	jmp	short CloseOk	
 35702                                  
 35703                                  CommitError:
 35704                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35705                                  	;jmp	SYS_RET_ERR
 35706 00006882 EBE3                    	jmp	short CloseError
 35707                                  
 35708                                  ;	BREAK <$ExtHandle - extend handle count>
 35709                                  
 35710                                  ;**	$ExtHandle - Extend Handle Count
 35711                                  ;----------------------------------------------------------------------------
 35712                                  ;	Assembler usage:
 35713                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35714                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35715                                  ;	    INT     int_command 		 busy )
 35716                                  ;
 35717                                  ;	ENTRY	(bx) = new number of handles
 35718                                  ;	EXIT	'C' clear if OK
 35719                                  ;		'C' set iff err
 35720                                  ;		  (ax) = error code
 35721                                  ;			 AX = error_not_enough_memory
 35722                                  ;			      error_too_many_open_files
 35723                                  ;	USES	all
 35724                                  ;----------------------------------------------------------------------------
 35725                                  
 35726                                  _$ExtHandle:
 35727 00006884 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35728                                  	;cmp	bx,20
 35729 00006886 83FB14                  	CMP	BX,FILPERPROC
 35730 00006889 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35731 0000688B BB1400                  	MOV	BX,FILPERPROC
 35732                                  exth2:	
 35733 0000688E 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35734                                  	;mov	cx,[ES:32h]
 35735 00006893 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35736 00006898 39CB                    	CMP	BX,CX			; the requested == current
 35737 0000689A 7455                    	JE	short ok_done 		; yes and exit
 35738 0000689C 7722                    	JA	short larger		; go allocate new table
 35739                                  
 35740                                  ;	We're going to shrink the # of handles available
 35741                                  
 35742 0000689E BD0100                  	MOV	BP,1			; shrink
 35743                                  	;mov	ds,[ES:36h]
 35744 000068A1 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35745 000068A6 89DE                    	MOV	SI,BX			;
 35746 000068A8 29D9                    	SUB	CX,BX			; get difference
 35747                                  
 35748                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35749                                  chck_handles:
 35750 000068AA 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35751 000068AD 753D                    	JNZ	short too_many_files	; status
 35752 000068AF 46                      	INC	SI
 35753 000068B0 E2F8                    	LOOP	chck_handles
 35754 000068B2 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35755 000068B5 7709                    	JA	short larger		; no
 35756                                  
 35757 000068B7 BD0200                  	MOV	BP,2			; psp
 35758                                  	;mov	di,24
 35759 000068BA BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35760 000068BD 53                      	PUSH	BX
 35761 000068BE EB1D                    	JMP	short movhandl
 35762                                  
 35763                                  larger:
 35764 000068C0 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35765 000068C3 747F                    	JZ	short invalid_func	; 10/08/2018
 35766 000068C5 F8                      	CLC
 35767 000068C6 53                      	PUSH	BX			; save requested number
 35768 000068C7 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35769 000068CA B104                    	MOV	CL,4
 35770                                  	;ror	bx,cl			; MSDOS 3.3
 35771 000068CC D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35772 000068CE 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35773                                  
 35774 000068D2 55                      	PUSH	BP
 35775 000068D3 E8DBFA                  	call	_$ALLOC			; allocate memory
 35776 000068D6 5D                      	POP	BP
 35777 000068D7 7266                    	JC	short no_memory		; not enough meory
 35778                                  
 35779 000068D9 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35780 000068DB 31FF                    	XOR	DI,DI
 35781                                  movhandl:
 35782 000068DD 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35783                                  
 35784 000068E2 F7C50300                	test	BP,3			; enlarge ?
 35785 000068E6 740C                    	JZ	short enlarge 		; yes
 35786 000068E8 59                      	POP	CX			; cx = the amount you shrink
 35787 000068E9 51                      	PUSH	CX
 35788 000068EA EB0C                    	JMP	short copy_hand
 35789                                  
 35790                                  ;	Done.  'C' clear
 35791                                  
 35792                                  ; 17/12/2022
 35793                                  ;ok_done:
 35794                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35795                                  ;	;jmp	short CommitOk
 35796                                  ;	; 17/12/2022
 35797                                  ;	jmp	SYS_RET_OK
 35798                                  
 35799                                  too_many_files:
 35800                                  	;mov	al,4
 35801 000068EC B004                    	MOV	AL,error_too_many_open_files
 35802                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35803                                  	;jmp	SYS_RET_ERR
 35804                                  CommitErrorj:
 35805                                  	;jmp	short CommitError
 35806                                  	; 17/12/2022
 35807 000068EE E99C9D                  	jmp	SYS_RET_ERR
 35808                                  
 35809                                  ; 17/12/2022 
 35810                                  ok_done:
 35811                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35812                                  	;jmp	short CommitOk
 35813                                  	; 17/12/2022
 35814 000068F1 E9909D                  	jmp	SYS_RET_OK
 35815                                  
 35816                                  enlarge:
 35817                                  	;mov	cx,[32h]
 35818 000068F4 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35819                                  copy_hand:
 35820 000068F8 89CA                    	MOV	DX,CX
 35821                                  	;lds	si,[34h]
 35822 000068FA C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35823 000068FE F3A4                    	REP	MOVSB			; copy infomation to new table
 35824 00006900 59                      	POP	CX			; get new number of handles
 35825 00006901 51                      	PUSH	CX			; save it again
 35826 00006902 29D1                    	SUB	CX,DX			; get the difference
 35827 00006904 B0FF                    	MOV	AL,-1			; set availability to handles
 35828 00006906 F3AA                    	REP	STOSB
 35829 00006908 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35830                                  	;cmp	word [34h],0
 35831 0000690D 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35832 00006912 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35833 00006914 55                      	PUSH	BP
 35834 00006915 1E                      	PUSH	DS			; save old table segment
 35835 00006916 06                      	PUSH	ES			; save new table segment
 35836 00006917 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35837 0000691B E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35838 0000691E 07                      	POP	ES			; restore new table segment
 35839 0000691F 1F                      	POP	DS			; restore old table segment
 35840 00006920 5D                      	POP	BP
 35841                                  
 35842                                  update_info:
 35843 00006921 F7C50200                	test	BP,2			; psp?
 35844 00006925 7408                    	JZ	short non_psp 		; no
 35845                                  	;mov	word [34h],18h ; 24
 35846 00006927 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35847 0000692D EB06                    	JMP	short final
 35848                                  non_psp:
 35849                                  	;mov	word [34h],0
 35850 0000692F C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35851                                  final:
 35852                                  	;mov	[36h],es	
 35853 00006935 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35854                                  	;pop	word [32h]
 35855 00006939 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35856                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35857                                  	;jmp	SYS_RET_OK
 35858                                  ok_done_j:
 35859 0000693D EBB2                    	jmp	short ok_done
 35860                                  
 35861                                  no_memory:
 35862 0000693F 5B                      	POP	BX			; clean stack
 35863                                  	;mov	al,8
 35864 00006940 B008                    	MOV	AL,error_not_enough_memory
 35865                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35866                                  	;jmp	SYS_RET_ERR
 35867                                  CommitErrorj2:
 35868 00006942 EBAA                    	jmp	short CommitErrorj
 35869                                  
 35870                                  invalid_func:
 35871                                  	;mov	al,1
 35872 00006944 B001                    	MOV	AL,error_invalid_function
 35873                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35874                                  	;jmp	SYS_RET_ERR
 35875                                  CommitErrorj3:
 35876                                  	;jmp	short CommitErrorj2
 35877                                  	; 17/12/2022
 35878 00006946 EBA6                    	jmp	short CommitErrorj
 35879                                  
 35880                                  ; 20/05/2019 - Retro DOS v4.0
 35881                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35882                                  
 35883                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35884                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35885                                  
 35886                                  ;	BREAK <$READ - Read from a file handle>
 35887                                  ;----------------------------------------------------------------------------
 35888                                  ;
 35889                                  ;**	$Read - Read from a File Handle
 35890                                  ;
 35891                                  ;   Assembler usage:
 35892                                  ;
 35893                                  ;	LDS	DX, buf
 35894                                  ;	MOV	CX, count
 35895                                  ;	MOV	BX, handle
 35896                                  ;	MOV	AH, Read
 35897                                  ;	INT	int_command
 35898                                  ;	  AX has number of bytes read
 35899                                  ;
 35900                                  ;	ENTRY	(bx) = file handle
 35901                                  ;		(cx) = byte count
 35902                                  ;		(ds:dx) = buffer address
 35903                                  ;	EXIT	Through system call return so that to user:
 35904                                  ;		  'C' clear if OK
 35905                                  ;		    (ax) = bytes read
 35906                                  ;		  'C' set if error
 35907                                  ;		    (ax) = error code
 35908                                  ;
 35909                                  ;----------------------------------------------------------------------------
 35910                                  
 35911                                  _$READ:
 35912 00006948 BE[9233]                	MOV	SI,DOS_READ
 35913                                  ReadDo:
 35914 0000694B E831FE                  	call	pJFNFromHandle
 35915 0000694E 7208                    	JC	short ReadError
 35916                                  
 35917 00006950 268A05                  	MOV	AL,[ES:DI]
 35918 00006953 E83E01                  	call	CheckOwner		; get the handle
 35919 00006956 7303                    	JNC	short ReadSetup		; no errors do the operation
 35920                                  
 35921                                  ;	Have an error. 'C' set
 35922                                  
 35923                                  ReadError:
 35924                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35925                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35926                                  	;jmp	short CommitErrorj3
 35927                                  	; 17/12/2022
 35928 00006958 E9329D                  	jmp	SYS_RET_ERR
 35929                                  
 35930                                  ReadSetup:
 35931 0000695B 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35932 00006960 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35933                                  	; 20/05/2019 - Retro DOS v4.0
 35934                                  	; MSDOS 6.0 
 35935                                  ;; Extended Open
 35936                                  	;test	byte [es:di+3],20h
 35937 00006965 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35938                                  						 ;AN000;;EO. need i24
 35939 0000696A 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35940 0000696C 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35941                                  					;AN000;;EO. set it off;smr;SS Override
 35942                                  needi24:				;AN000;
 35943                                  ;; Extended Open
 35944 00006972 36FF36[2C03]            	push	word [SS:DMAADD]
 35945 00006977 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 35946                                  
 35947                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35948                                  
 35949                                  	; 26/07/2019
 35950                                  
 35951                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35952                                  	;
 35953                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 35954                                  	; there is not another caller; it is better to put the code in this proc
 35955                                   	; here instead of calling it as a subroutine; but I have modified code
 35956                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 35957                                  
 35958                                  	; MSDOS 6.0
 35959 0000697C E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 35960                                  	
 35961                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35962                                  	; MSDOS 3.3
 35963                                  	;MOV	BX,DX			; copy offset
 35964                                  	;push	cx			; don't stomp on count
 35965                                  	;MOV	CL,4			; bits to shift bytes->para
 35966                                  	;SHR	BX,CL			; get number of paragraphs
 35967                                  	;pop	cx			; get count back
 35968                                  	;MOV	AX,DS			; get original segment
 35969                                  	;ADD	AX,BX			; get new segment
 35970                                  	;MOV	DS,AX			; in seg register
 35971                                  	;AND	DX,0Fh			; normalize offset
 35972                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 35973                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 35974                                  						;smr;SS Override
 35975                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35976                                  	
 35977 0000697F 16                      	push	ss			; go for DOS addressability
 35978 00006980 1F                      	pop	ds
 35979                                  
 35980 00006981 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 35981                                  
 35982 00006983 8F06[2E03]              	pop	word [DMAADD+2]
 35983 00006987 8F06[2C03]              	pop	word [DMAADD]
 35984                                  	;JNC	short READ_OK		;AN002;
 35985                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 35986                                  	; 17/12/2022
 35987 0000698B 72CB                    	jc	short ReadError
 35988                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35989                                  	;jnc	short READ_OK		;AN002;
 35990                                  	;jmp	short ReadError
 35991                                  
 35992                                  READ_OK:
 35993 0000698D 89C8                    	MOV	AX,CX			; get correct return in correct reg
 35994                                  Read_Okj:
 35995                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35996                                  	;;jmp	SYS_RET_OK		; successful return
 35997                                  	;jmp	short ok_done_j
 35998                                  	; 17/12/2022
 35999 0000698F E9F29C                  	jmp	SYS_RET_OK
 36000                                  
 36001                                  ; 13/07/2018 - Retro DOS v3.0
 36002                                  
 36003                                  ;----------------------------------------------------------------------------
 36004                                  
 36005                                  ;   Input: DS:DX points to user's buffer addr
 36006                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36007                                  ;   Output: [DMAADD] set
 36008                                  
 36009                                  ; 20/05/2019 - Retro DOS v4.0
 36010                                  ; 26/07/2019
 36011                                  ;	; MSDOS 6.0
 36012                                  ;Align_Buffer:
 36013                                  ;	MOV	BX,DX			; copy offset
 36014                                  ;	push	cx			; don't stomp on count
 36015                                  ;	MOV	CL,4			; bits to shift bytes->para
 36016                                  ;	SHR	BX,CL			; get number of paragraphs
 36017                                  ;	pop	cx			; get count back
 36018                                  ;	MOV	AX,DS			; get original segment
 36019                                  ;	ADD	AX,BX			; get new segment
 36020                                  ;	MOV	DS,AX			; in seg register
 36021                                  ;	AND	DX,0Fh			; normalize offset
 36022                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36023                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36024                                  ;						;smr;SS Override
 36025                                  ;	retn
 36026                                  
 36027                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36028                                  Align_Buffer:
 36029 00006992 89D3                    	MOV	BX,DX			; copy offset
 36030 00006994 51                      	push	cx			; don't stomp on count
 36031 00006995 B104                    	MOV	CL,4			; bits to shift bytes->para
 36032 00006997 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36033 00006999 59                      	pop	cx			; get count back
 36034 0000699A 8CD8                    	MOV	AX,DS			; get original segment
 36035 0000699C 01D8                    	ADD	AX,BX			; get new segment
 36036 0000699E 8ED8                    	MOV	DS,AX			; in seg register
 36037 000069A0 83E20F                  	AND	DX,0Fh			; normalize offset
 36038 000069A3 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36039 000069A8 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36040                                  						;smr;SS Override
 36041 000069AD C3                      	retn
 36042                                  
 36043                                  ; 20/05/2019 - Retro DOS v4.0
 36044                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36045                                  
 36046                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36047                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36048                                  
 36049                                  ;BREAK <$WRITE - write to a file handle>
 36050                                  ;----------------------------------------------------------------------------
 36051                                  ;
 36052                                  ;   Assembler usage:
 36053                                  ;	    LDS     DX, buf
 36054                                  ;	    MOV     CX, count
 36055                                  ;	    MOV     BX, handle
 36056                                  ;	    MOV     AH, Write
 36057                                  ;	    INT     int_command
 36058                                  ;	  AX has number of bytes written
 36059                                  ;   Errors:
 36060                                  ;	    AX = write_invalid_handle
 36061                                  ;	       = write_access_denied
 36062                                  ;
 36063                                  ;   Returns in register AX
 36064                                  ;
 36065                                  ;----------------------------------------------------------------------------
 36066                                  
 36067                                  _$WRITE:
 36068 000069AE BE[BB35]                	MOV	SI,DOS_WRITE
 36069 000069B1 EB98                    	JMP	short ReadDo
 36070                                  
 36071                                  ;BREAK <$LSEEK - move r/w pointer>
 36072                                  ;----------------------------------------------------------------------------
 36073                                  ;
 36074                                  ;   Assembler usage:
 36075                                  ;	    MOV     DX, offsetlow
 36076                                  ;	    MOV     CX, offsethigh
 36077                                  ;	    MOV     BX, handle
 36078                                  ;	    MOV     AL, method
 36079                                  ;	    MOV     AH, LSeek
 36080                                  ;	    INT     int_command
 36081                                  ;	  DX:AX has the new location of the pointer
 36082                                  ;   Error returns:
 36083                                  ;	    AX = error_invalid_handle
 36084                                  ;	       = error_invalid_function
 36085                                  ;   Returns in registers DX:AX
 36086                                  ;
 36087                                  ;----------------------------------------------------------------------------
 36088                                  
 36089                                  ; 21/05/2019 - Retro DOS v4.0
 36090                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36091                                  
 36092                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36093                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36094                                  
 36095                                  _$LSEEK:
 36096 000069B3 E8DE00                  	call	CheckOwner		; get system file entry
 36097                                  
 36098                                  	; 17/12/2022
 36099                                  ;LSeekError:
 36100                                  	;JNC	short CHKOWN_OK		;AN002;
 36101                                  	;JMP	short ReadError		;AN002; error return
 36102                                  	; 17/12/2022
 36103                                  	; 02/06/2019
 36104 000069B6 72A0                    	jc	short ReadError
 36105                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36106                                  	;JNC	short CHKOWN_OK		;AN002;
 36107                                  	;JMP	short ReadError		;AN002; error return
 36108                                  
 36109                                  CHKOWN_OK:
 36110                                  					;AN002;
 36111 000069B8 3C02                    	CMP	AL,2			; is the seek value correct?
 36112 000069BA 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36113                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36114 000069BC 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36115                                  					;smr;SS Override
 36116                                  	;mov	al,1
 36117 000069C2 B001                    	mov	al,error_invalid_function ; invalid method
 36118                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36119                                  LSeekError2:
 36120 000069C4 EB92                    	jmp	short ReadError
 36121                                  
 36122                                  LSeekDisp:
 36123 000069C6 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36124 000069C8 720A                    	JB	short LSeekStore	; just store CX:DX
 36125 000069CA 771B                    	JA	short LSeekEOF		; seek from end of file
 36126                                  	;add	dx,[es:di+21]
 36127 000069CC 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36128                                  	;adc	cx,[es:di+23]
 36129 000069D0 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36130                                  LSeekStore:
 36131 000069D4 89C8                    	MOV	AX,CX			; AX:DX
 36132 000069D6 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36133                                  LSeekSetpos:
 36134                                  	;mov	[es:di+21],ax
 36135 000069D7 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36136                                  	;mov	[es:di+23],dx
 36137 000069DB 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36138 000069DF E8E89A                  	call	Get_User_Stack
 36139                                  	;mov	[si+6],dx
 36140 000069E2 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36141                                  	;jmp	SYS_RET_OK		; successful return
 36142                                  	; 25/06/2019
 36143                                  	;jmp	SYS_RET_OK_clc
 36144                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36145                                  	;jmp	SYS_RET_OK_clc
 36146                                  LSeekOk:
 36147 000069E5 EBA8                    	jmp     short Read_Okj
 36148                                  
 36149                                  LSeekEOF:
 36150                                  	;;test	word [es:di+5],8000h
 36151                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36152                                  	; 21/05/2019 - Retro DOS v4.0
 36153 000069E7 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36154 000069EC 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36155                                  LOCAL_LSeek:
 36156                                  	;add	dx,[es:di+17]
 36157 000069EE 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36158                                  	;adc	cx,[es:di+19]
 36159 000069F2 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36160 000069F6 EBDC                    	JMP	short LSeekStore	; go and set the position
 36161                                  
 36162                                  Check_LSeek_Mode:
 36163                                  	;;test	word [es:di+2],8000h
 36164                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36165                                  	; 21/05/2019
 36166 000069F8 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36167 000069FD 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36168                                  	;mov	ax,[es:di+2]
 36169 000069FF 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36170                                  	;and	ax, 0F0h
 36171 00006A03 25F000                  	AND	AX,SHARING_MASK
 36172                                  	;cmp	ax,40h
 36173 00006A06 83F840                  	CMP	AX,SHARING_DENY_NONE
 36174 00006A09 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36175                                  	;cmp	ax,30h
 36176 00006A0B 83F830                  	CMP	AX,SHARING_DENY_READ
 36177 00006A0E 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36178                                  NET_LSEEK:
 36179                                  ;	JMP	short LOCAL_LSeek
 36180                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36181                                  	;CallInstall Net_Lseek,MultNET,33
 36182                                  	;JNC	short LSeekSetPos
 36183                                  
 36184 00006A10 B82111                  	mov     ax,1121h
 36185 00006A13 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36186                                  			; CX:DX = offset (in bytes) from end
 36187                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36188                                  			; SS = DOS CS
 36189                                  			; Return: CF set on error
 36190                                  			; CF clear if successful, DX:AX = new file position
 36191 00006A15 73C0                    	jnb     short LSeekSetpos
 36192                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36193                                  	;jmp	SYS_RET_ERR
 36194                                  ;LSeekError3:
 36195                                  	; 17/12/2022
 36196                                  LSeekError:
 36197                                  	;jmp	short LSeekError2
 36198                                  DupErr:	; 17/12/2022
 36199 00006A17 E9739C                  	jmp	SYS_RET_ERR
 36200                                  
 36201                                  ;BREAK <FileTimes - modify write times on a handle>
 36202                                  ;----------------------------------------------------------------------------
 36203                                  ;
 36204                                  ;   Assembler usage:
 36205                                  ;	    MOV AH, FileTimes (57H)
 36206                                  ;	    MOV AL, func
 36207                                  ;	    MOV BX, handle
 36208                                  ;	; if AL = 1 then then next two are mandatory
 36209                                  ;	    MOV CX, time
 36210                                  ;	    MOV DX, date
 36211                                  ;	    INT 21h
 36212                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36213                                  ;	; for the handle.
 36214                                  ;
 36215                                  ;	AL=02		 get extended attributes
 36216                                  ;	   BX=handle
 36217                                  ;	   CX=size of buffer (0, return max size )
 36218                                  ;	   DS:SI query list (si=-1, selects all EA)
 36219                                  ;	   ES:DI buffer to hold EA list
 36220                                  ;
 36221                                  ;	AL=03		 get EA name list
 36222                                  ;	   BX=handle
 36223                                  ;	   CX=size of buffer (0, return max size )
 36224                                  ;	   ES:DI buffer to hold name list
 36225                                  ;
 36226                                  ;	AL=04		 set extended attributes
 36227                                  ;	   BX=handle
 36228                                  ;	   ES:DI buffer of EA list
 36229                                  ;
 36230                                  ;
 36231                                  ;   Error returns:
 36232                                  ;	    AX = error_invalid_function
 36233                                  ;	       = error_invalid_handle
 36234                                  ;
 36235                                  ;----------------------------------------------------------------------------
 36236                                  
 36237                                  ; 21/05/2019 - Retro DOS v4.0
 36238                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36239                                  
 36240                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36241                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36242                                  
 36243                                  _$FILE_TIMES:
 36244                                  	; 13/07/2018 - Retro DOS v3.0
 36245                                  
 36246                                  	; MSDOS 3.3
 36247                                  	;cmp	al,2			; correct subfunction ?
 36248                                  	;jb	short ft1
 36249                                  
 36250                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36251                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36252                                  						;SS Overr
 36253                                  	;;mov	al,1
 36254                                  	;mov	al,error_invalid_function ; give bad return
 36255                                  	;jmp	SYS_RET_ERR
 36256                                  
 36257                                  	; MSDOS 6.0
 36258 00006A1A 3C02                    	cmp	al,2			; correct subfunction ?
 36259 00006A1C 7340                    	jae	short inval_func
 36260                                  ;ft1:
 36261 00006A1E E87300                  	call	CheckOwner		; get sft
 36262                                  	; 17/12/2022
 36263 00006A21 72F4                    	jc	short LSeekError	; bad handle
 36264                                  
 36265 00006A23 08C0                    	or	al,al			; get time/date ?
 36266 00006A25 7515                    	jnz	short ft_set_time
 36267                                  
 36268                                  ;------ here we get the time & date from the sft for the user
 36269                                  
 36270 00006A27 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36271                                  	;mov	cx,[es:di+13]
 36272 00006A28 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36273                                  	;mov	dx,[es:di+15]
 36274 00006A2C 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36275 00006A30 FB                      	sti
 36276 00006A31 E8969A                  	call	Get_User_Stack
 36277                                  	;mov	[si+4],cx
 36278 00006A34 894C04                  	mov	[si+user_env.user_CX],cx
 36279                                  	;mov	[si+6],dx
 36280 00006A37 895406                  	mov	[si+user_env.user_DX],dx
 36281 00006A3A EB1F                    	jmp	short ok_ret
 36282                                  
 36283                                  ;------ here we set the time in sft
 36284                                  
 36285                                  ft_set_time:
 36286 00006A3C E846A9                  	call    ECritSFT
 36287                                  	;mov	[es:di+13],cx
 36288 00006A3F 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36289                                  	;mov	[es:di+15],dx
 36290 00006A43 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36291                                  
 36292 00006A47 31C0                    	xor	ax, ax
 36293 00006A49 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36294                                  
 36295                                  ;------ set the flags in SFT entry
 36296                                  	;and	word [es:di+5],0FFBFh
 36297                                  	; 18/12/2022
 36298                                  	;and	byte [es:di+5],0BFh
 36299 00006A4E 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36300                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36301                                  							; mark file as dirty
 36302                                  	;or	word [es:di+5],4000h
 36303                                  	; 17/12/2022
 36304                                  	;or	byte [es:di+6],40h
 36305 00006A53 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36306                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36307                                  							; ask close not to
 36308                                  							;   bother about date
 36309                                  							;   and time
 36310 00006A58 E845A9                  	call	LCritSFT
 36311                                  ok_ret:
 36312                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36313                                  	; 17/12/2022
 36314 00006A5B E9269C                  	jmp	SYS_RET_OK
 36315                                  	;jmp	short LSeekOk
 36316                                  
 36317                                  inval_func:
 36318                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36319 00006A5E 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36320                                  						;SS Overr
 36321                                  	;mov	al,1
 36322 00006A64 B001                    	mov	al,error_invalid_function ; give bad return
 36323                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36324                                  ft_error:
 36325                                  	;;jmp	SYS_RET_ERR
 36326                                  	;jmp	short LSeekError3
 36327                                  	; 17/12/2022
 36328 00006A66 EBAF                    	jmp	short LSeekError
 36329                                  
 36330                                  ; 21/05/2019 - Retro DOS v4.0
 36331                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36332                                  
 36333                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36334                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36335                                  
 36336                                  ;BREAK <$DUP - duplicate a jfn>
 36337                                  ;----------------------------------------------------------------------------
 36338                                  ;
 36339                                  ;   Assembler usage:
 36340                                  ;	    MOV     BX, fh
 36341                                  ;	    MOV     AH, Dup
 36342                                  ;	    INT     int_command
 36343                                  ;	  AX has the returned handle
 36344                                  ;   Errors:
 36345                                  ;	    AX = dup_invalid_handle
 36346                                  ;	       = dup_too_many_open_files
 36347                                  ;
 36348                                  ;----------------------------------------------------------------------------
 36349                                  
 36350                                  _$DUP:
 36351 00006A68 89D8                    	MOV	AX,BX			; save away old handle in AX
 36352 00006A6A E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36353                                  DupErrorCheck:
 36354 00006A6D 72A8                    	JC	short DupErr		; nope, bye
 36355 00006A6F 06                      	push	es
 36356 00006A70 57                      	push	di			; save away SFT
 36357 00006A71 5E                      	pop	si			; into convenient place DS:SI
 36358 00006A72 1F                      	pop	ds
 36359 00006A73 93                      	XCHG	AX,BX			; get back old handle
 36360 00006A74 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36361 00006A77 729E                    	JC	short DupErr		; errors go home
 36362 00006A79 E861C0                  	call	DOS_Dup_Direct
 36363 00006A7C E800FD                  	call	pJFNFromHandle		; get pointer
 36364 00006A7F 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36365 00006A82 881C                    	MOV	[SI],BL			; stuff in new SFT
 36366                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36367                                  	;jmp	SYS_RET_OK		; and go home
 36368 00006A84 EBD5                    	jmp	short ok_ret
 36369                                  
 36370                                  	; 17/12/2022
 36371                                  ;DupErr:
 36372                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36373                                  	;;jmp	SYS_RET_ERR
 36374                                  	;jmp	short ft_error
 36375                                  
 36376                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36377                                  ;----------------------------------------------------------------------------
 36378                                  ;
 36379                                  ;   Assembler usage:
 36380                                  ;	    MOV     BX, fh
 36381                                  ;	    MOV     CX, newfh
 36382                                  ;	    MOV     AH, Dup2
 36383                                  ;	    INT     int_command
 36384                                  ;   Error returns:
 36385                                  ;	    AX = error_invalid_handle
 36386                                  ;
 36387                                  ;----------------------------------------------------------------------------
 36388                                  
 36389                                  _$DUP2:
 36390 00006A86 53                      	push	bx
 36391 00006A87 51                      	push	cx			; save source
 36392 00006A88 89CB                    	MOV	BX,CX			; get one to close
 36393 00006A8A E8AAFD                  	call	_$CLOSE			; close destination handle
 36394 00006A8D 5B                      	pop	bx
 36395 00006A8E 58                      	pop	ax			; old in AX, new in BX
 36396 00006A8F E8EDFC                  	call	pJFNFromHandle		; get pointer
 36397 00006A92 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36398                                  
 36399                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36400                                  ;----------------------------------------------------------------------------
 36401                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36402                                  ;   process without the process knowing it (delete/rename of open files, for
 36403                                  ;   example), it is possible for the redirector to issue a call to a handle
 36404                                  ;   that it soes not rightfully own. We check here to make sure that the
 36405                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36406                                  ;   SFFromHandle to really make sure that the SFT is good.
 36407                                  ;
 36408                                  ;	ENTRY	BX has the handle
 36409                                  ;		User_ID is the current user
 36410                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36411                                  ;		Carry Set => AX has error code
 36412                                  ;	USES	none
 36413                                  ;----------------------------------------------------------------------------
 36414                                  
 36415                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36416                                  	; 21/05/2019 - Retro DOS v4.0
 36417                                  CheckOwner:
 36418                                  	; 13/07/2018 - Retro DOS v3.0
 36419                                  
 36420 00006A94 E805FD                  	call	SFFromHandle
 36421 00006A97 721B                    	jc	short co_ret_label	; retc
 36422                                  
 36423 00006A99 50                      	push	ax
 36424                                  
 36425                                  	; MSDOS 6.0
 36426                                  
 36427                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36428                                  ;SR; are shared across multiple VMs in win386.
 36429                                  
 36430 00006A9A 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36431 00006AA0 7404                    	jz	short no_win386		;win386 is not present
 36432 00006AA2 31C0                    	xor	ax,ax			;set the zero flag
 36433 00006AA4 EB08                    	jmp	short _skip_win386	
 36434                                  
 36435                                  no_win386:
 36436 00006AA6 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36437                                  	;cmp	ax,[es:di+47]
 36438 00006AAA 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36439                                  
 36440                                  _skip_win386:
 36441 00006AAE 58                      	pop	ax
 36442                                  	
 36443                                  	; 17/12/2022
 36444 00006AAF 7403                    	jz	short co_ret_label
 36445                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36446                                  	;jnz	short CheckOwner_err
 36447                                  	;retn
 36448                                  	
 36449                                  CheckOwner_err:
 36450                                  	;mov	al,6
 36451 00006AB1 B006                    	mov	al,error_invalid_handle
 36452 00006AB3 F9                      	stc
 36453                                  
 36454                                  co_ret_label:
 36455 00006AB4 C3                      	retn
 36456                                  
 36457                                  ;============================================================================
 36458                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36459                                  ;============================================================================
 36460                                  ; Retro	DOS v3.0 - 11/07/2018
 36461                                  ; 21/05/2019 - Retro DOS v4.0
 36462                                  
 36463                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36464                                  ;	NAME	MACRO
 36465                                  
 36466                                  ;	Microsoft Confidential
 36467                                  ;	Copyright (C) Microsoft Corporation 1991
 36468                                  ;	All Rights Reserved.
 36469                                  
 36470                                  ;**	MACRO.ASM
 36471                                  ;
 36472                                  ;	$AssignOper
 36473                                  ;	FIND_DPB
 36474                                  ;	InitCDS
 36475                                  ;	$UserOper
 36476                                  ;	GetVisDrv
 36477                                  ;	GetThisDrv
 36478                                  ;	GetCDSFromDrv
 36479                                  ;
 36480                                  ;   Revision history:
 36481                                  ;
 36482                                  ;	Created: MZ 4 April 1983
 36483                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36484                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36485                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36486                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36487                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36488                                  ;				    aliasing.
 36489                                  ;
 36490                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36491                                  ;   each valid drive letter the text of the current directory on that drive.
 36492                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36493                                  ;   be at the root. A current directory is either the raw local directory
 36494                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36495                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36496                                  ;
 36497                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36498                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36499                                  ;   this and all * are expanded into ?'s.
 36500                                  ;
 36501                                  ;   The second part of name translation involves subtree aliasing. A list of
 36502                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36503                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36504                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36505                                  ;   replaced with the other subtree in the pair.
 36506                                  ;
 36507                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36508                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36509                                  ;   The output of the previous translation is examined to see if any of the
 36510                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36511                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36512                                  ;   'mount' one device under another.
 36513                                  ;
 36514                                  ;   The final form of name translation involves the mapping of a user's
 36515                                  ;   logical drive number into the internal physical drive. This is
 36516                                  ;   accomplished by converting the drive number into letter:CON, performing
 36517                                  ;   the above translation and then converting the character back into a drive
 36518                                  ;   number.
 36519                                  ;
 36520                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36521                                  ;   take a path and form the real text of the pathname with all . and ..
 36522                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36523                                  ;   TransPath.
 36524                                  ;
 36525                                  ;	A000	version 4.00  Jan. 1988
 36526                                  
 36527                                  ;Installed = TRUE
 36528                                  
 36529                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36530                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36531                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36532                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36533                                  ;					; current drive)
 36534                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36535                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36536                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36537                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36538                                  ;	I_need	MYNAME,16		; machine name
 36539                                  ;	I_need	MYNUM,WORD		; machine number
 36540                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36541                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36542                                  ;	I_need	DrvErr,BYTE		; drive error
 36543                                  
 36544                                  ;BREAK <$AssignOper -- Set up a Macro>
 36545                                  ;----------------------------------------------------------------------------
 36546                                  ; Inputs:
 36547                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36548                                  ;	AL = 01 set assign mode 		    (SetMode)
 36549                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36550                                  ;	AL = 03 Define Macro (attch start)
 36551                                  ;	    BL = Macro type
 36552                                  ;	       = 0 alias
 36553                                  ;	       = 1 file/device
 36554                                  ;	       = 2 drive
 36555                                  ;	       = 3 Char device -> network
 36556                                  ;	       = 4 File device -> network
 36557                                  ;	    DS:SI -> ASCIZ source name
 36558                                  ;	    ES:DI -> ASCIZ destination name
 36559                                  ;	AL = 04 Cancel Macro
 36560                                  ;	    DS:SI -> ASCIZ source name
 36561                                  ;	AL = 05 Modified get attach list entry
 36562                                  ;	AL = 06 Get ifsfunc item
 36563                                  ;	AL = 07 set in_use of a drive's CDS
 36564                                  ;	     DL = drive number, 0=default  0=A,,
 36565                                  ;	AL = 08 reset in_use of a drive's CDS
 36566                                  ;	     DL = drive number, 0=A, 1=B,,,
 36567                                  ; Function:
 36568                                  ;	Do macro stuff
 36569                                  ; Returns:
 36570                                  ;	Std Xenix style error return
 36571                                  ;----------------------------------------------------------------------------
 36572                                  
 36573                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36574                                  	; 21/05/2019 - Retro DOS v4.0
 36575                                  _$AssignOper:
 36576                                  	; MSDOS 6.0
 36577 00006AB5 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36578 00006AB7 7525                    	JNZ	short chk08		      ; no			;AN000;
 36579                                  srinuse:								;AN000;
 36580 00006AB9 50                      	PUSH	AX			      ; save al 		;AN000;
 36581 00006ABA 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36582 00006ABC E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36583 00006ABF 58                      	POP	AX			      ; 			;AN000;
 36584 00006AC0 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36585                                  	;cmp	word [si+45h],0
 36586 00006AC2 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36587 00006AC6 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36588 00006AC8 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36589 00006ACA 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36590                                  	;or	word [si+43h],4000h
 36591                                  	; 17/12/2022
 36592                                  	;or	byte [si+44h],40h
 36593 00006ACC 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36594                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36595 00006AD0 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36596                                  resetdrv:
 36597                                  	;and	word [si+43h],0BFFFh									;AN000;
 36598                                  	; 18/12/2022
 36599 00006AD2 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36600                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36601 00006AD6 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36602                                  
 36603                                  	; 17/12/2022
 36604                                  baddrv: 								;AN000;
 36605 00006AD8 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36606                                  
 36607                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36608                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36609                                  	; 17/12/2022
 36610                                  	; 21/05/2019
 36611                                  ASS_ERR:
 36612 00006ADB E9AF9B                  	jmp	SYS_RET_ERR
 36613                                  
 36614                                  chk08:									;AN000;
 36615 00006ADE 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36616 00006AE0 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36617                                  
 36618                                    ;IF	NOT INSTALLED
 36619                                  	;transfer NET_ASSOPER
 36620                                    ;ELSE
 36621                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36622 00006AE2 50                      	PUSH	AX
 36623                                  	;mov	ax,111Eh
 36624                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36625 00006AE3 B81E11                  	mov	ax,(MultNET*256)+30
 36626 00006AE6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36627                                  			; SS = DOS CS
 36628                                  			; STACK: WORD function to execute
 36629                                  			; Return: CF set on error, AX = error code
 36630                                  			; STACK unchanged
 36631 00006AE8 5B                      	POP	BX			; Don't zap error code in AX
 36632 00006AE9 72F0                    	JC	short ASS_ERR
 36633                                  okdone:
 36634 00006AEB E9969B                  	jmp	SYS_RET_OK
 36635                                  
 36636                                  	; 17/12/2022
 36637                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36638                                  ;ASS_ERR:
 36639                                  	;jmp	SYS_RET_ERR
 36640                                  
 36641                                    ;ENDIF
 36642                                  
 36643                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36644                                  ;----------------------------------------------------------------------------
 36645                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36646                                  ;
 36647                                  ;	ENTRY	AL has drive number A = 0
 36648                                  ;	EXIT	'C' set
 36649                                  ;		    No DPB for this drive number
 36650                                  ;		'C' clear
 36651                                  ;		    DS:SI points to DPB for drive
 36652                                  ;	USES	SI, DS, Flags
 36653                                  ;----------------------------------------------------------------------------
 36654                                  
 36655                                  	; 21/05/2019 - Retro DOS v4.0
 36656                                  FIND_DPB:
 36657 00006AEE 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36658                                  fdpb5:	
 36659 00006AF3 83FEFF                  	CMP	SI,-1
 36660 00006AF6 7409                    	JZ	short fdpb10
 36661 00006AF8 3A04                    	cmp	al,[si]
 36662                                  	;CMP	AL,[SI+DPB.DRIVE]
 36663 00006AFA 7406                    	jz	short ret_label15	; Carry clear (retz)
 36664                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36665                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36666 00006AFC C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36667 00006AFF EBF2                    	JMP	short fdpb5
 36668                                  fdpb10:	
 36669 00006B01 F9                      	STC
 36670                                  ret_label15:
 36671 00006B02 C3                      	retn
 36672                                  
 36673                                  ;	Break <InitCDS - set up an empty CDS>
 36674                                  ;----------------------------------------------------------------------------
 36675                                  ;**	InitCDS - Setup an Empty CDS
 36676                                  ;
 36677                                  ;	ENTRY	ThisCDS points to CDS
 36678                                  ;		AL has uppercase drive letter
 36679                                  ;	EXIT	ThisCDS is now empty
 36680                                  ;		(ES:DI) = CDS
 36681                                  ;		'C' set if no DPB associated with drive
 36682                                  ;	USES	AH,ES,DI, Flags
 36683                                  ;----------------------------------------------------------------------------
 36684                                  
 36685                                  ; 21/05/2019 - Retro DOS v4.0
 36686                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36687                                  
 36688                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36689                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36690                                  
 36691                                  InitCDS:
 36692                                  	; 19/08/2018
 36693                                  	; 05/08/2018 - Retro DOS v3.0
 36694                                  	; MSDOS 6.0
 36695 00006B03 50                      	push	ax			; save (AL) for caller
 36696 00006B04 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36697                                  	;mov	word [es:di+67],0
 36698 00006B09 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36699 00006B0F 2C40                    	SUB	AL,"A"-1                ; A = 1
 36700 00006B11 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36701 00006B16 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36702 00006B18 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36703 00006B19 50                      	PUSH	AX			; save drive number for later
 36704 00006B1A 0441                    	add	al,"A"
 36705 00006B1C B43A                    	MOV	AH,':'
 36706 00006B1E 268905                  	mov	[ES:DI],ax
 36707                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36708                                  	;mov	ax,"\"
 36709                                  	;mov	[es:di+2],ax
 36710                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36711 00006B21 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36712                                  	;or	word [es:di+67],4000h
 36713                                  	;or	byte [es:di+68],40h
 36714 00006B27 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36715 00006B2C 29C0                    	sub	ax,ax
 36716                                  	;MOV	[es:di+73],ax ; 0
 36717 00006B2E 26894549                	MOV	[ES:DI+curdir.ID],ax
 36718                                  	;mov	[es:di+75],ax ; 0
 36719 00006B32 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36720 00006B36 B002                    	mov	al,2
 36721                                  	;mov	[es:di+79],aX ; 2
 36722 00006B38 2689454F                	MOV	[ES:DI+curdir.end],ax
 36723 00006B3C 58                      	POP	AX			; (al) = drive number
 36724 00006B3D 1E                      	push	ds
 36725 00006B3E 56                      	push	si
 36726 00006B3F E8ACFF                  	call	FIND_DPB
 36727 00006B42 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36728                                  	;mov	[es:di+69],si
 36729 00006B44 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36730                                  	;mov	[es:di+71],ds
 36731 00006B48 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36732                                  icds5:	
 36733 00006B4C 5E                      	pop	si
 36734 00006B4D 1F                      	pop	ds
 36735                                  icdsx:	
 36736 00006B4E 58                      	pop	ax
 36737                                  RET45:
 36738 00006B4F C3                      	retn
 36739                                  
 36740                                  ;Break <$UserOper - get/set current user ID (for net)>
 36741                                  ;----------------------------------------------------------------------------
 36742                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36743                                  ;	maintain this string and do no verifications.
 36744                                  ;
 36745                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36746                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36747                                  ;		DS:DX is user string pointer (calls 1,2)
 36748                                  ;		ES:DI is user buffer (call 3)
 36749                                  ;		BX is assign index (calls 2,3,4,5)
 36750                                  ;		CX is user number (call 1)
 36751                                  ;		DX is flag word (call 4)
 36752                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36753                                  ;			and user CX is set to the user number
 36754                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36755                                  ;		If AL = 5 then DX is flag word
 36756                                  ;----------------------------------------------------------------------------
 36757                                  
 36758                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36759                                  	; 21/05/2019 - Retro DOS v4.0
 36760                                  _$UserOper:
 36761                                  	; 05/08/2018 - Retro DOS v3.0
 36762                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36763 00006B50 50                      	PUSH	AX
 36764 00006B51 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36765 00006B53 58                      	POP	AX
 36766 00006B54 7211                    	JB	short UserGet 		; return to user the string
 36767 00006B56 742E                    	JZ	short UserSet 		; set the current user
 36768 00006B58 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36769 00006B5A 763D                    	JBE	short UserPrint		; yep
 36770                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36771 00006B5C 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36772                                  					; Extended Error Locus
 36773                                  	;error	error_invalid_function	; not 0,1,2,3
 36774                                  	;mov	al,1
 36775 00006B62 B001                    	MOV	AL,error_invalid_function
 36776                                  useroper_error:
 36777                                  	; 17/12/2022
 36778                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36779 00006B64 E9269B                  	JMP	SYS_RET_ERR
 36780                                  	;jmp	short ASS_ERR
 36781                                  
 36782                                  UserGet:
 36783                                  ; Transfer MYNAME to DS:DX
 36784                                  ; Set Return CX to MYNUM
 36785 00006B67 1E                      	PUSH	DS			; switch registers
 36786 00006B68 07                      	POP	ES
 36787 00006B69 89D7                    	MOV	DI,DX			; destination
 36788 00006B6B 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36789 00006B70 E85799                  	call	Get_User_Stack
 36790                                  	;mov	[si+4],cx
 36791 00006B73 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36792 00006B76 16                      	push	ss			; point to DOSDATA
 36793 00006B77 1F                      	pop	ds
 36794 00006B78 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36795                                  UserMove:
 36796 00006B7B B90F00                  	MOV	CX,15
 36797 00006B7E F3A4                    	REP	MOVSB			; blam.
 36798 00006B80 31C0                    	XOR	AX,AX			; 16th byte is 0
 36799 00006B82 AA                      	STOSB
 36800                                  UserBye:
 36801 00006B83 E9FE9A                  	jmp	SYS_RET_OK		; no errors here
 36802                                  
 36803                                  UserSet:
 36804                                  ; Transfer DS:DX to MYNAME
 36805                                  ; CX to MYNUM
 36806 00006B86 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36807 00006B8B 89D6                    	MOV	SI,DX			; user space has source
 36808 00006B8D 16                      	push	ss
 36809 00006B8E 07                      	pop	es
 36810 00006B8F BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36811 00006B92 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36812 00006B97 EBE2                    	JMP	short UserMove
 36813                                  
 36814                                  UserPrint:
 36815                                  
 36816                                    ;IF NOT Installed
 36817                                    ;	transfer PRINTER_GETSET_STRING
 36818                                    ;ELSE
 36819 00006B99 50                      	PUSH	AX
 36820                                  	;mov	ax,111Fh
 36821                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36822 00006B9A B81F11                  	mov	ax,(MultNET<<8)|31
 36823 00006B9D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36824                                  			; STACK: WORD function
 36825                                  			; Return: CF set on error, AX = error code
 36826                                  			; STACK unchanged
 36827 00006B9F 5A                      	POP	DX			; Clean stack
 36828                                  	;JNC	short OKPA
 36829 00006BA0 73E1                    	jnc	short UserBye ; 21/05/2019
 36830                                  	; 17/12/2022
 36831 00006BA2 EBC0                    	jmp	short useroper_error
 36832                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36833                                  	;jnb     short OKPA
 36834                                  	;jmp     short useroper_error
 36835                                  
 36836                                  	; 17/12/2022
 36837                                  ;OKPA:
 36838                                  ;	jmp	short UserBye
 36839                                  
 36840                                    ;ENDIF
 36841                                  
 36842                                  
 36843                                  ;Break	<GetVisDrv - return visible drive>
 36844                                  ;----------------------------------------------------------------------------
 36845                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36846                                  ;
 36847                                  ;   Inputs:	AL has drive identifier (0=default)
 36848                                  ;   Outputs:	Carry Set - invalid drive/macro
 36849                                  ;		Carry Clear - AL has physical drive (0=A)
 36850                                  ;		    ThisCDS points to CDS
 36851                                  ;   Registers modified: AL
 36852                                  ;----------------------------------------------------------------------------
 36853                                  
 36854                                  	; 21/05/2019 - Retro DOS v4.0
 36855                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36856                                  
 36857                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36858                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36859                                  GetVisDrv:
 36860                                  	; 05/08/2018 - Retro DOS v3.0
 36861                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36862 00006BA4 E81900                  	CALL	GETTHISDRV		; get inuse drive
 36863 00006BA7 72A6                    	jc	short RET45
 36864 00006BA9 1E                      	push	ds
 36865 00006BAA 56                      	push	si
 36866 00006BAB 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36867                                  	;test	word [si+67],2000h
 36868                                  	; 17/12/2022
 36869                                  	;test	byte [si+68],20h
 36870 00006BB0 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36871                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36872 00006BB4 5E                      	pop	si
 36873 00006BB5 1F                      	pop	ds
 36874 00006BB6 7497                    	jz	short RET45		; if not spliced, return OK
 36875                                  	; MSDOS 6.0
 36876                                  	;mov	byte [ss:DrvErr],0Fh
 36877 00006BB8 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36878 00006BBE F9                      	STC				; signal error
 36879 00006BBF C3                      	retn
 36880                                  
 36881                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36882                                  ;----------------------------------------------------------------------------
 36883                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36884                                  ;	macro pointer
 36885                                  ;
 36886                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36887                                  ;   Outputs:
 36888                                  ;		Carry Set - invalid drive/macro
 36889                                  ;		Carry Clear - AL has physical drive (0=A)
 36890                                  ;		   ThisCDS points to macro
 36891                                  ;   Registers modified: AL
 36892                                  ;----------------------------------------------------------------------------
 36893                                  
 36894                                  	; 21/05/2019 - Retro DOS v4.0
 36895                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36896                                  
 36897                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36898                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36899                                  GETTHISDRV:
 36900                                  	; 05/08/2018
 36901                                  	; 12/07/2018 - Retro DOS v3.0
 36902                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36903                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36904 00006BC0 08C0                    	OR	AL,AL			; are we using default drive?
 36905 00006BC2 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36906 00006BC4 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36907                                  	;INC	ax			; Counteract next instruction
 36908                                  	; 04/09/2018
 36909                                  	;inc	al
 36910                                  	; 07/12/2022
 36911 00006BC8 40                      	inc	ax
 36912                                  GTD10:	
 36913                                  	;DEC	AX
 36914                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36915 00006BC9 48                      	dec	ax			; 0 = A
 36916                                  	;dec	al
 36917 00006BCA 1E                      	PUSH	DS			; save world
 36918 00006BCB 56                      	PUSH	SI
 36919                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36920 00006BCC 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36921 00006BD2 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36922 00006BD8 7420                    	JZ	SHORT GTD20		; Logical
 36923 00006BDA 50                      	PUSH	AX
 36924 00006BDB 06                      	PUSH	ES
 36925 00006BDC 57                      	PUSH	DI
 36926 00006BDD 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36927                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36928 00006BE4 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36929 00006BE9 0441                    	ADD	AL,'A'
 36930 00006BEB E815FF                  	CALL	InitCDS			; InitCDS(c);
 36931                                  	;test	word [es:di+67],4000h
 36932                                  	; 17/12/2022
 36933                                  	;test	byte [es:di+68],40h
 36934 00006BEE 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36935                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36936 00006BF3 5F                      	POP	DI
 36937 00006BF4 07                      	POP	ES
 36938 00006BF5 58                      	POP	AX
 36939 00006BF6 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36940 00006BF8 EB18                    	JMP	SHORT GTDX		; carry clear
 36941                                  GTD20:
 36942 00006BFA E81800                  	CALL	GetCDSFromDrv
 36943 00006BFD 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36944                                  	;test	word [si+43h],4000h
 36945                                  	; 17/12/2022
 36946                                  	;test	byte [si+44h],40h
 36947 00006BFF F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36948                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 36949 00006C03 750D                    	JNZ	SHORT GTDX		; carry clear
 36950                                  GTD30:	
 36951                                  	; 21/05/2019
 36952                                  	; MSDOS 6.0
 36953 00006C05 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 36954 00006C07 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 36955                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 36956 00006C0B 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 36957 00006C11 F9                      	STC
 36958                                  GTDX:	
 36959 00006C12 5E                      	POP	SI			; restore world
 36960 00006C13 1F                      	POP	DS
 36961 00006C14 C3                      	RETN
 36962                                   
 36963                                  
 36964                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 36965                                  ;----------------------------------------------------------------------------
 36966                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 36967                                  ;	pointer, returning an error if the drive number is greater than the
 36968                                  ;	number of CDS's
 36969                                  ;
 36970                                  ;   Inputs:	AL is physical unit # A=0...
 36971                                  ;   Outputs:	Carry Set if Bad Drive
 36972                                  ;		Carry Clear
 36973                                  ;		    DS:SI -> CDS
 36974                                  ;		    [THISCDS] = DS:SI
 36975                                  ;   Registers modified: DS,SI
 36976                                  ;----------------------------------------------------------------------------
 36977                                  
 36978                                  	; 21/05/2019 - Retro DOS v4.0
 36979                                  GetCDSFromDrv:
 36980 00006C15 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 36981 00006C1A 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 36982 00006C1C F9                      	STC				; signal error
 36983 00006C1D C3                      	RETN				; bye
 36984                                  GetCDS:
 36985 00006C1E 53                      	PUSH	BX
 36986 00006C1F 50                      	PUSH	AX
 36987 00006C20 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 36988                                  	;mov	bl,81 ; MSDOS 3.3
 36989                                  	;mov	bl,88 ; MSDOS 6.0 
 36990 00006C25 B358                    	MOV	BL,curdir.size		; size in convenient spot
 36991 00006C27 F6E3                    	MUL	BL			; get net offset
 36992 00006C29 01C6                    	ADD	SI,AX			; convert to true pointer
 36993 00006C2B 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 36994 00006C30 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 36995 00006C35 58                      	POP	AX
 36996 00006C36 5B                      	POP	BX
 36997 00006C37 F8                      	CLC				; no error
 36998 00006C38 C3                      	RETN				; bye!
 36999                                  
 37000                                  ;============================================================================
 37001                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37002                                  ;============================================================================
 37003                                  ; Retro	DOS v3.0 - 12/07/2018
 37004                                  ; 22/05/2019 - Retro DOS v4.0
 37005                                  
 37006                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37007                                  ;----------------------------------------------------------------------------
 37008                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37009                                  ;       gritty substitution.
 37010                                  ;
 37011                                  ;   Inputs:     DS:DX - pointer to FCB
 37012                                  ;               ES:DI - point to destination
 37013                                  ;   Outputs:    Carry Set - invalid path in final map
 37014                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37015                                  ;                   Sattrib is set from possibly extended FCB
 37016                                  ;                   ExtFCB set if extended FCB found
 37017                                  ;   Registers modified: most
 37018                                  ;----------------------------------------------------------------------------
 37019                                  
 37020                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37021                                  TransFCB:
 37022                                  	; 22/05/2019 - Retro DOS v4.0
 37023                                  	; 12/07/2018 - Retro DOS v3.0
 37024                                  	;LocalVar FCBTmp,16
 37025                                  	;ENTER
 37026 00006C39 55                      	push	bp
 37027 00006C3A 89E5                    	mov	bp,sp
 37028                                  	;sub	sp,15	; MSDOS 3.3
 37029 00006C3C 83EC10                  	sub	sp,16	; MSDOS 6.0
 37030 00006C3F 16                      	push	ss
 37031 00006C40 07                      	pop	es
 37032 00006C41 06                      	push	es
 37033 00006C42 57                      	push	di
 37034                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37035                                  	;LEA	DI,FCBTmp 
 37036 00006C43 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37037 00006C46 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37038 00006C4C 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37039 00006C52 E89FB0                  	call	GetExtended             ; get FCB, extended or not
 37040                                  	; 06/12/2022
 37041 00006C55 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37042 00006C57 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37043 00006C5A 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37044 00006C5E 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37045                                  GetDrive:
 37046 00006C64 AC                      	lodsb				; get drive byte
 37047 00006C65 E858FF                  	call	GETTHISDRV
 37048 00006C68 722A                    	jc	short BadPack
 37049 00006C6A E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37050                                  
 37051                                  ; Scan the source to see if there are any illegal chars
 37052                                  
 37053                                  	;mov	bx,CharType		; load lookup table
 37054 00006C6D B90B00                  	mov	cx,11
 37055 00006C70 56                      	push	si			; back over name, ext
 37056                                  FCBScan:
 37057 00006C71 AC                      	lodsb				; get a byte
 37058                                  	
 37059                                  	; 09/08/2018
 37060                                  	;;xlat	byte [es:bx]
 37061                                  	;es	xlat
 37062                                  
 37063                                  	; 22/05/2019 - Retro DOS v4.0	
 37064 00006C72 E81CE5                  	call	GetCharType		; get flags
 37065                                  
 37066                                  	;test	al,8	
 37067 00006C75 A808                    	test	al,FFCB
 37068 00006C77 741B                    	jz	short BadPack
 37069                                  NextCh: 
 37070 00006C79 E2F6                    	loop	FCBScan
 37071 00006C7B 5E                      	pop	si
 37072 00006C7C 89FB                    	mov	bx,di
 37073 00006C7E E8CCB4                  	call	PackName                ; crunch the path
 37074 00006C81 5F                      	pop	di			; get original destination
 37075 00006C82 07                      	pop	es
 37076 00006C83 16                      	push	ss			; get DS addressability
 37077 00006C84 1F                      	pop	ds
 37078                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37079                                  	;LEA	SI,FCBTmp		; point at new pathname
 37080 00006C85 8D76F0                  	lea	si,[bp-16]
 37081 00006C88 803F00                  	cmp	byte [bx],0
 37082 00006C8B 7407                    	jz	short BadPack
 37083 00006C8D 55                      	push	bp
 37084 00006C8E E80E00                  	call	TransPathSet            ; convert the path
 37085 00006C91 5D                      	pop	bp
 37086 00006C92 7303                    	jnc	short FCBRet		; bye with transPath error code
 37087                                  BadPack:
 37088 00006C94 F9                      	STC
 37089                                  	;mov	al,3
 37090 00006C95 B003                    	MOV     AL,error_path_not_found
 37091                                  FCBRet: 
 37092                                  	;LEAVE
 37093 00006C97 89EC                    	mov	sp,bp
 37094 00006C99 5D                      	pop	bp
 37095                                  TransPath_retn:
 37096 00006C9A C3                      	retn
 37097                                  
 37098                                  ; 12/07/2018 - Retro DOS v3.0
 37099                                  
 37100                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37101                                  ;----------------------------------------------------------------------------
 37102                                  ;
 37103                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37104                                  ;       substitution, insertion of current directory and fixing . and ..
 37105                                  ;       entries. Perform splicing. Allow input string to match splice
 37106                                  ;       exactly.
 37107                                  ;
 37108                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37109                                  ;       matches splice.
 37110                                  ;
 37111                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37112                                  ;
 37113                                  ;   The following anomalous behaviour is required:
 37114                                  ;
 37115                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37116                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37117                                  ;       Raw net I/O sets ThisCDS => NULL.
 37118                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37119                                  ;
 37120                                  ;   Other behaviour:
 37121                                  ;
 37122                                  ;       ThisCDS set up.
 37123                                  ;       FatRead done on local CDS.
 37124                                  ;       ValidateCDS done on local CDS.
 37125                                  ;
 37126                                  ;   Brief flowchart:
 37127                                  ;
 37128                                  ;       if fSharing then
 37129                                  ;           set up DummyCDS (ThisCDS)
 37130                                  ;           canonicalize (sets cMeta)
 37131                                  ;           splice
 37132                                  ;           fatRead
 37133                                  ;           return
 37134                                  ;       if \\ or d:\\ lead then
 37135                                  ;           set up null CDS (ThisCDS)
 37136                                  ;           canonicalize (sets cMeta)
 37137                                  ;           return
 37138                                  ;       if device then
 37139                                  ;           set up dummyCDS (ThisCDS)
 37140                                  ;           canonicalize (sets cMeta)
 37141                                  ;           return
 37142                                  ;       if file then
 37143                                  ;           getCDS (sets (ThisCDS) from name)
 37144                                  ;           validateCDS (may reset current dir)
 37145                                  ;           Copy current dir
 37146                                  ;           canonicalize (set cMeta)
 37147                                  ;           splice
 37148                                  ;           generate correct CDS (ThisCDS)
 37149                                  ;           if local then
 37150                                  ;               fatread
 37151                                  ;           return
 37152                                  ;
 37153                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37154                                  ;               DI - point to buffer in DOSDATA
 37155                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37156                                  ;                   syntax, etc. or user FAILed to I 24.
 37157                                  ;               WFP_Start - points to beginning of buffer
 37158                                  ;               Curr_Dir_End - points to end of current dir in path
 37159                                  ;               DS - DOSDATA
 37160                                  ;   Registers modified: most
 37161                                  ;
 37162                                  ;----------------------------------------------------------------------------
 37163                                  
 37164                                  ; 22/05/2019
 37165                                  ; 13/05/2019 - Retro DOS v4.0
 37166                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37167                                  
 37168                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37169                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37170                                  
 37171                                  TransPath:
 37172 00006C9B 30C0                    	XOR     AL,AL
 37173 00006C9D EB02                    	JMP     SHORT SetSplice
 37174                                  TransPathSet:
 37175 00006C9F B0FF                    	MOV     AL,-1
 37176                                  SetSplice:
 37177 00006CA1 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37178 00006CA5 B0FF                    	MOV     AL,-1
 37179                                  TransPathNoSet:
 37180 00006CA7 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37181 00006CAB 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37182 00006CB1 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37183 00006CB6 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37184 00006CBD 16                      	push	ss
 37185 00006CBE 07                      	pop	es
 37186                                  	;lea	bp,[di+134]
 37187 00006CBF 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37188                                  ;
 37189                                  ; if this is through the server dos call, fsharing is set. We set up a
 37190                                  ; dummy cds and let the operation go.
 37191                                  ;
 37192 00006CC3 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37193 00006CC9 7435                    	JZ	short CheckUNC		; skip to UNC check
 37194                                  ;
 37195                                  ; ES:DI point to buffer
 37196                                  ;
 37197 00006CCB E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37198 00006CCE E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37199 00006CD1 722A                    	jc	short NoPath
 37200 00006CD3 E80B03                  	CALL	TextFromDrive		; drop in new
 37201 00006CD6 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37202 00006CD9 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37203 00006CDC 72BC                    	jc	short TransPath_retn	; errors
 37204                                  ;
 37205                                  ; Perform splices for net guys.
 37206                                  ;
 37207 00006CDE 16                      	push	ss
 37208 00006CDF 1F                      	pop	ds
 37209 00006CE0 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37210 00006CE4 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37211 00006CE9 7403                    	JZ	short NoServerSplice
 37212 00006CEB E83102                  	CALL    Splice
 37213                                  NoServerSplice:
 37214 00006CEE 16                      	push	ss
 37215 00006CEF 1F                      	pop	ds                      ; for FATREAD
 37216 00006CF0 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37217 00006CF4 E88EA6                  	call	ECritDisk
 37218 00006CF7 E80AEB                  	call	FATREAD_CDS
 37219 00006CFA E8A3A6                  	call	LCritDisk
 37220                                  NoPath:
 37221                                  	;mov	al,3
 37222 00006CFD B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37223 00006CFF C3                      	retn				; any errors are in Carry flag
 37224                                  
 37225                                  ; Let the network decide if the name is for a spooled device. It will map
 37226                                  ; the name if so.
 37227                                  
 37228                                  CheckUNC:
 37229 00006D00 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37230                                  	;CallInstall NetSpoolCheck,MultNET,35
 37231 00006D07 B82311                  	mov	ax,1123h
 37232 00006D0A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37233                                  			; DS:SI -> ASCIZ filename to canonicalize
 37234                                  			; ES:DI -> 128-byte buffer for qualified name
 37235                                  			; Return: CF set if not resolved
 37236 00006D0C 7329                    	JNC	short UNCDone
 37237                                  
 37238                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37239                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37240                                  ; input, then the name has been changed to the remote spooler by the above net
 37241                                  ; call. Also, there may be a drive in front of the \\.
 37242                                  
 37243                                  NO_CHECK:
 37244 00006D0E E8B902                  	CALL    DriveFromText		; eat drive letter
 37245 00006D11 50                      	PUSH    AX                      ; save it
 37246 00006D12 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37247 00006D14 E897E4                  	call    PATHCHRCMP              ; convert to normal form
 37248 00006D17 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37249 00006D19 E892E4                  	call    PATHCHRCMP              ; convert to normal form
 37250 00006D1C 751F                    	JNZ	short CheckDevice	; not a path char
 37251 00006D1E 38C4                    	CMP     AH,AL                   ; are they same?
 37252 00006D20 751B                    	JNZ	short CheckDevice	; nope
 37253                                  
 37254                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37255                                  ; local machine root path
 37256                                  
 37257 00006D22 58                      	POP     AX
 37258 00006D23 A5                      	MOVSW                           ; get the lead \\.
 37259                                  UNCCpy:
 37260 00006D24 AC                      	LODSB                           ; get a byte
 37261 00006D25 E831E4                   	call	UCase                   ;AN000;; convert the char
 37262 00006D28 08C0                    	OR      AL,AL
 37263 00006D2A 740E                    	JZ	short UNCTerm		; end of string. All done.
 37264 00006D2C E87FE4                  	call    PATHCHRCMP              ; is it a path char?
 37265 00006D2F 89FB                    	MOV     BX,DI                   ; backup position
 37266 00006D31 AA                      	STOSB
 37267 00006D32 75F0                    	JNZ	short UNCCpy		; no, go copy
 37268 00006D34 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37269                                  UNCDone:
 37270 00006D37 16                      	push	ss
 37271 00006D38 1F                      	pop	ds
 37272 00006D39 C3                       	retn				; return error code
 37273                                  UNCTerm:
 37274 00006D3A AA                      	STOSB                           ;AN000;
 37275 00006D3B EBFA                    	JMP	short UNCDone		;AN000;
 37276                                  
 37277                                  CheckDevice:
 37278                                  
 37279                                  ; Check DS:SI for device. First eat any path stuff
 37280                                  
 37281 00006D3D 58                      	POP     AX                      ; retrieve drive info
 37282 00006D3E 803C00                  	CMP     BYTE [SI],0		; check for null file
 37283 00006D41 7504                    	JNZ	short CheckPath
 37284                                  	;mov	al,2 
 37285 00006D43 B002                    	MOV     AL,error_file_not_found ; bad file error
 37286 00006D45 F9                      	STC                             ; signal error on null input
 37287 00006D46 C3                      	RETN				; bye!
 37288                                  CheckPath:
 37289 00006D47 50                      	push	ax
 37290 00006D48 55                      	push	bp			; save drive number
 37291                                  
 37292                                  
 37293                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37294                                  %if 0
 37295                                  	; MSDOS 6.0
 37296                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37297                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37298                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37299                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37300                                  ;;;end up having a 5D in the opcode's displacement field. The
 37301                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37302                                  ;;;
 37303                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37304                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37305                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37306                                  ;;;
 37307                                  ;;;More info:
 37308                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37309                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37310                                  ;;;
 37311                                  	call	no5Dshere
 37312                                  start5Dhack:
 37313                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37314                                  backfrom5Dhack:
 37315                                  
 37316                                  %endif
 37317                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37318                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37319 00006D49 E8B8D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37320                                  
 37321 00006D4C 5D                      	pop	bp
 37322 00006D4D 58                      	pop	ax			; get drive letter back
 37323 00006D4E 731C                    	JNC	short DoFile		; yes we have a file.
 37324                                  
 37325                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37326                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37327                                  ; call.
 37328                                  
 37329 00006D50 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37330 00006D56 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37331 00006D59 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37332                                  
 37333                                  ; Now that we have noted that we have a device, we put it into a form that
 37334                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37335                                  ; string. We relax this to state that if the d:\ is present then the path
 37336                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37337                                  ; a device.
 37338                                  
 37339 00006D5F E87F02                  	CALL    TextFromDrive
 37340 00006D62 B02F                    	MOV     AL,'/'                  ; path sep.
 37341 00006D64 AA                      	STOSB
 37342 00006D65 E8E0A4                  	call	StrCpy			; move remainder of string
 37343                                  
 37344 00006D68 F8                      	CLC                             ; everything OK.
 37345 00006D69 16                      	push	ss
 37346 00006D6A 1F                      	pop	ds                      ; remainder of OK stuff
 37347                                  DoFile_retn:
 37348 00006D6B C3                      	retn
 37349                                  
 37350                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37351                                  %if 0
 37352                                  
 37353                                  no5Dshere:
 37354                                  	; 10/08/2018
 37355                                  	jmp	CheckThisDevice		; snoop for device
 37356                                  %endif
 37357                                  
 37358                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37359                                  
 37360                                  ; We have a file. Get the raw CDS.
 37361                                  
 37362                                  DoFile:
 37363                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37364                                  
 37365 00006D6C E835FE                  	call	GetVisDrv               ; get proper CDS
 37366                                  	;mov	al,3 
 37367 00006D6F B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37368 00006D71 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37369                                  
 37370                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37371                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37372                                  ; Use the one that we are going to use (ES:DI).
 37373                                  
 37374                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37375 00006D73 1E                      	push	ds
 37376 00006D74 56                      	push	si
 37377 00006D75 06                      	push	es
 37378 00006D76 57                      	push	di
 37379 00006D77 E8CED5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37380                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37381 00006D7A 5F                      	pop	di
 37382 00006D7B 07                      	pop	es
 37383 00006D7C 5E                      	pop	si
 37384 00006D7D 1F                      	pop	ds
 37385                                  	;mov	al,3
 37386 00006D7E B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37387                                  	;retc				; someone failed an operation
 37388 00006D80 72E9                    	jc	short DoFile_retn
 37389                                  
 37390                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37391                                  ; current directory. Copy it in.
 37392                                  
 37393 00006D82 1E                      	push	ds
 37394 00006D83 56                      	push	si
 37395 00006D84 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37396 00006D89 89FB                    	MOV     BX,DI                   ; point to destination
 37397                                  	;add	bx,[si+79] ; MSDOS 6.0
 37398 00006D8B 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37399                                  	;lea	bp,[di+134]
 37400 00006D8E 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37401                                  					;AN000;
 37402 00006D92 E8C2A4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37403 00006D95 4F                      	DEC     DI                      ; point to NUL byte
 37404                                  
 37405                                  ; Make sure that there is a path char at end.
 37406                                  
 37407 00006D96 B05C                    	MOV     AL,'\'
 37408 00006D98 263845FF                	CMP     [ES:DI-1],AL
 37409 00006D9C 7401                    	JZ	short GetOrig
 37410 00006D9E AA                      	STOSB
 37411                                  
 37412                                  ; Now get original string.
 37413                                  
 37414                                  GetOrig:
 37415 00006D9F 4F                      	DEC     DI                      ; point to path char
 37416 00006DA0 5E                      	pop	si
 37417 00006DA1 1F                      	pop	ds
 37418                                  
 37419                                  ; BX points to the end of the root part of the CDS (at where a path char
 37420                                  ; should be). Now, we decide whether we use this root or extend it with the
 37421                                  ; current directory. See if the input string begins with a leading 
 37423 00006DA2 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37424 00006DA5 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37425 00006DA7 08C0                    	OR      AL,AL                   ; end of string?
 37426 00006DA9 7410                    	JZ	short DoCanon		; yes, skip.
 37427                                  ;
 37428                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37429                                  ; to this root. Make sure that there is a path char there and advance the
 37430                                  ; source string over all leading \'s.
 37431                                  ;
 37432 00006DAB 89DF                    	MOV     DI,BX                   ; back up to root point.
 37433                                  SkipPath:
 37434 00006DAD AC                      	LODSB
 37435 00006DAE E8FDE3                  	call    PATHCHRCMP
 37436 00006DB1 74FA                    	JZ	short SkipPath
 37437 00006DB3 4E                      	DEC     SI
 37438 00006DB4 08C0                    	OR      AL,AL
 37439 00006DB6 7403                    	JZ	short DoCanon
 37440                                  
 37441                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37442                                  ; for yucks.
 37443                                  
 37444                                  PathAssure:
 37445 00006DB8 B05C                    	MOV     AL,'\'	; 5Ch
 37446 00006DBA AA                      	STOSB
 37447                                  
 37448                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37449                                  ; BP is the max extent to advance DI
 37450                                  ; BX is the backup limit for ..
 37451                                  
 37452                                  DoCanon:
 37453 00006DBB E85200                  	CALL    Canonicalize            ; wham.
 37454                                  	;retc				; badly formatted path.
 37455 00006DBE 72AB                    	jc	short DoFile_retn
 37456                                  
 37457                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37458                                  ; to wfp_start and do string substitution. BP is still the max position in
 37459                                  ; buffer.
 37460                                  
 37461 00006DC0 16                      	push	ss
 37462 00006DC1 1F                      	pop	ds
 37463 00006DC2 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37464 00006DC6 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37465 00006DCA E81C02                  	CALL    PathPref                ; is there a prefix?
 37466 00006DCD 7514                    	JNZ	short DoSplice		; no, do splice
 37467                                  
 37468                                  ; We have a match. Check to see if we ended in a path char.
 37469                                  
 37470 00006DCF 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37471 00006DD2 E8D9E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37472 00006DD5 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37473                                  Pathline:                               ; 2/13/KK
 37474 00006DD7 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37475 00006DDB 7406                    	JZ	short DoSplice
 37476 00006DDD 47                      	INC     DI                      ; point to after current path char
 37477 00006DDE 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37478                                  
 37479                                  ; Splice the result.
 37480                                  
 37481                                  DoSplice:
 37482 00006DE3 16                      	push	ss
 37483 00006DE4 1F                      	pop	ds			; back to DOSDATA
 37484 00006DE5 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37485 00006DE9 31C9                    	XOR     CX,CX
 37486 00006DEB F606[7105]FF            	TEST	byte [FSPLICE],-1
 37487 00006DF0 7403                    	JZ	short SkipSplice
 37488 00006DF2 E82A01                  	CALL    Splice                  ; replaces in place.
 37489                                  SkipSplice:
 37490                                  
 37491                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37492                                  ; device.
 37493                                  
 37494 00006DF5 16                      	push	ss
 37495 00006DF6 1F                      	pop	ds
 37496 00006DF7 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37497                                  	;test	word [es:di+67],8000h
 37498                                  	; 17/12/2022
 37499                                  	;test	byte [es:di+68],80h
 37500 00006DFB 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37501                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37502 00006E00 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37503 00006E02 E30B                    	JCXZ    Done
 37504 00006E04 E87EA5                  	call	ECritDisk
 37505 00006E07 E8FAE9                  	call	FATREAD_CDS
 37506 00006E0A E893A5                  	call	LCritDisk
 37507                                  	;mov	al, 3
 37508 00006E0D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37509                                  Done:   
 37510 00006E0F C3                      	retn                         ; any errors in carry flag.
 37511                                  
 37512                                  ; 13/07/2018
 37513                                  
 37514                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37515                                  ;----------------------------------------------------------------------------
 37516                                  ;   Canonicalize - copy path removing . and .. entries.
 37517                                  ;
 37518                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37519                                  ;               ES:DI - point to buffer
 37520                                  ;               BX - backup limit (offset from ES) points to slash
 37521                                  ;               BP - end of buffer
 37522                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37523                                  ;                   syntax, etc.
 37524                                  ;               Carry Clear -
 37525                                  ;                   DS:DI - advanced to end of string
 37526                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37527                                  ;   Registers modified: AX CX DX (in addition to those above)
 37528                                  ;----------------------------------------------------------------------------
 37529                                  
 37530                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37531                                  
 37532                                  Canonicalize:
 37533                                  
 37534                                  ; We copy all leading path separators.
 37535                                  
 37536 00006E10 AC                      	LODSB                           ;   while (PathChr (*s))
 37537 00006E11 E89AE3                  	call    PATHCHRCMP
 37538 00006E14 7507                    	JNZ	short CanonDec
 37539 00006E16 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37540 00006E18 7319                    	JAE	short CanonBad		;           goto error;
 37541 00006E1A AA                      	STOSB
 37542 00006E1B EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37543                                  CanonDec:
 37544 00006E1D 4E                      	DEC     SI
 37545                                  
 37546                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37547                                  ; component (no leading path separators) and ES:DI being the destination
 37548                                  ; buffer.
 37549                                  
 37550                                  CanonLoop:
 37551                                  
 37552                                  ; If we are at the end of the source string, then we need to check to see that
 37553                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37554                                  ; Otherwise, do nothing
 37555                                  
 37556 00006E1E 31C0                    	XOR     AX,AX
 37557 00006E20 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37558 00006E22 751A                    	JNZ	short DoComponent
 37559 00006E24 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37560 00006E29 7505                    	JNZ	short DoTerminate
 37561 00006E2B B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37562 00006E2D AA                      	STOSB
 37563 00006E2E 88E0                    	MOV     AL,AH
 37564                                  DoTerminate:
 37565 00006E30 AA                      	STOSB                           ;           *d++ = 0;
 37566 00006E31 F8                      	CLC                             ;           return (0);
 37567 00006E32 C3                      	retn
 37568                                  
 37569                                  CanonBad:
 37570 00006E33 E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37571                                  	;mov	al,3
 37572 00006E36 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37573 00006E38 7402                    	JZ	short PathEnc		; path character encountered in string
 37574                                  	;mov	al,2
 37575 00006E3A B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37576                                  PathEnc:
 37577 00006E3C F9                      	STC
 37578                                  CanonBad_retn:
 37579 00006E3D C3                      	retn
 37580                                  
 37581                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37582                                  ; it to 8.3
 37583                                  
 37584                                  DoComponent:                            ;           }
 37585 00006E3E E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37586 00006E41 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37587                                  
 37588                                  ; We special case the . and .. cases.  These will be backed up.
 37589                                  
 37590                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37591 00006E43 26833D2E                	CMP	WORD [ES:DI],002Eh
 37592 00006E47 7408                    	JZ	short Skip1
 37593                                  	;CMP	WORD PTR ES:[DI],'..'
 37594 00006E49 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37595 00006E4E 750A                    	JNZ	short CanonNormal
 37596 00006E50 4F                      	DEC     DI                      ;           d--;
 37597                                  Skip1:  
 37598 00006E51 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37599                                  	;mov	al,3
 37600 00006E54 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37601 00006E56 72E5                    	jc	short CanonBad_retn
 37602 00006E58 EB02                    	JMP     short CanonPath         ;           }
 37603                                  
 37604                                  ; We have a normal path. Advance destination pointer over it.
 37605                                  
 37606                                  CanonNormal:                            ;       else
 37607 00006E5A 01CF                    	ADD     DI,CX                   ;           d += ct;
 37608                                  
 37609                                  ; We have successfully copied a component. We are now pointing at a path
 37610                                  ; sep char or are pointing at a nul or are pointing at something else.
 37611                                  ; If we point at something else, then we have an error.
 37612                                  
 37613                                  CanonPath:
 37614 00006E5C E81600                  	CALL    PathSep
 37615 00006E5F 75D2                    	JNZ	short CanonBad		; something else...
 37616                                  
 37617                                  ; Copy the first path char we see.
 37618                                  
 37619 00006E61 AC                      	LODSB                           ; get the char
 37620 00006E62 E849E3                  	call    PATHCHRCMP              ; is it path char?
 37621 00006E65 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37622 00006E67 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37623 00006E69 73C8                    	JAE	short CanonBad		; yep, error.
 37624 00006E6B AA                      	STOSB                           ; copy the one byte
 37625                                  
 37626                                  ; Skip all remaining path chars
 37627                                  
 37628                                  CanonPathLoop:
 37629 00006E6C AC                      	LODSB                           ; get next byte
 37630 00006E6D E83EE3                  	call    PATHCHRCMP              ; path char again?
 37631 00006E70 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37632 00006E72 4E                      	DEC     SI                      ; back up
 37633 00006E73 EBA9                    	JMP	short  CanonLoop	; go copy component
 37634                                  
 37635                                  ;BREAK <PathSep - determine if char is a path separator>
 37636                                  ;----------------------------------------------------------------------------
 37637                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37638                                  ;   Inputs:     DS:SI - point to a char
 37639                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37640                                  ;               Zero set if AL is / \ or NUL
 37641                                  ;               Zero reset otherwise
 37642                                  ;   Registers modified: AL
 37643                                  ;----------------------------------------------------------------------------
 37644                                  
 37645                                  PathSep:
 37646 00006E75 8A04                    	MOV     AL,[SI]                 ; get the character
 37647                                  PathSepGotCh:				; already have character
 37648 00006E77 08C0                    	OR      AL,AL                   ; test for zero
 37649 00006E79 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37650                                  	;call	PATHCHRCMP              ; check for path character
 37651                                  	;retn				; and return HIS determination
 37652                                  	; 18/12/2022
 37653 00006E7B E930E3                  	jmp	PATHCHRCMP
 37654                                  
 37655                                  
 37656                                  ;BREAK <SkipBack - move backwards to a path separator>
 37657                                  ;----------------------------------------------------------------------------
 37658                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37660                                  ;               BX has current directory back up limit (point to a / \)
 37661                                  ;   Outputs:    ES:DI backed up to point to a path char
 37662                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37663                                  ;               Carry set if illegal backup
 37664                                  ;               Carry Clear if ok
 37665                                  ;   Registers modified: DI,AL
 37666                                  ;----------------------------------------------------------------------------
 37667                                  
 37668                                  SkipBack:
 37669 00006E7E 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37670 00006E80 720B                    	JB	short SkipBad		;       if (d < dlim)
 37671 00006E82 4F                      	DEC     DI                      ;           goto err;
 37672 00006E83 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37673 00006E86 E825E3                  	call    PATHCHRCMP              ;           break;
 37674 00006E89 75F3                    	JNZ	short SkipBack		;       }
 37675 00006E8B F8                      	CLC                             ;   return (0);
 37676 00006E8C C3                      	retn				;
 37677                                  SkipBad:                                ;err:
 37678                                  	;mov	al,3
 37679 00006E8D B003                    	MOV     AL,error_path_not_found ; bad path error
 37680 00006E8F F9                      	STC                             ;   return (-1);
 37681 00006E90 C3                      	retn				;
 37682                                  
 37683                                  ;Break <CopyComponent - copy out a file path component>
 37684                                  ;----------------------------------------------------------------------------
 37685                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37686                                  ;
 37687                                  ;   Inputs:     DS:SI - source path
 37688                                  ;               ES:DI - destination
 37689                                  ;               ES:BP - end of buffer
 37690                                  ;   Outputs:    Carry Set - too long
 37691                                  ;               Carry Clear - DS:SI moved past component
 37692                                  ;                   CX has length of destination
 37693                                  ;   Registers modified: AX,CX,DX
 37694                                  ;----------------------------------------------------------------------------
 37695                                  
 37696                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37697                                  
 37698                                  CopyComponent:
 37699                                  
 37700                                  %define CopyBP	 [BP]		; word
 37701                                  %define CopyD	 [BP+2]		; dword
 37702                                  %define CopyDoff [BP+2]		; word
 37703                                  %define CopyS	 [BP+6]		; dword
 37704                                  %define CopySoff [BP+6]		; word
 37705                                  %define CopyTemp [BP+10]	; byte
 37706                                  
 37707 00006E91 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37708 00006E94 1E                      	push	ds
 37709 00006E95 56                      	push	si
 37710 00006E96 06                      	push	es
 37711 00006E97 57                      	push	di
 37712 00006E98 55                      	push	bp
 37713 00006E99 89E5                    	MOV     BP,SP
 37714 00006E9B B42E                    	MOV     AH,'.'
 37715 00006E9D AC                      	LODSB
 37716 00006E9E AA                      	STOSB
 37717 00006E9F 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37718 00006EA1 7518                    	JNZ	short NormalComp
 37719 00006EA3 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37720 00006EA6 740B                    	JZ	short NulTerm
 37721                                  TryTwoDot:
 37722 00006EA8 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37723 00006EA9 AA                      	STOSB
 37724 00006EAA 38E0                    	CMP     AL,AH
 37725 00006EAC 7557                    	JNZ	short CopyBad
 37726 00006EAE E8C4FF                  	CALL    PathSep
 37727 00006EB1 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37728                                  NulTerm:                                ;               return -1;
 37729 00006EB3 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37730 00006EB5 AA                      	STOSB
 37731 00006EB6 897606                  	MOV     CopySoff,SI
 37732 00006EB9 EB47                    	JMP     SHORT _GoodRet		;       }
 37733                                  NormalComp:                             ;   else {
 37734 00006EBB 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37735 00006EBE E82BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37736 00006EC1 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37737 00006EC4 743F                    	JZ	short CopyBad		;           return (-1);
 37738 00006EC6 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37739 00006ECC 7510                    	JNZ	short DoPack
 37740 00006ECE 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37741 00006ED1 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37742 00006ED6 7F2D                    	JG	short CopyBad		;               return (-1);
 37743 00006ED8 7504                    	JNZ	short DoPack		;           else
 37744 00006EDA 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37745 00006EDC 742F                    	JZ	short CopyBadPath	;               return (-1);
 37746                                  DoPack:                                 ;           }
 37747 00006EDE 897606                  	MOV     CopySoff,SI ; [bp+6]
 37748 00006EE1 16                      	push	ss
 37749 00006EE2 1F                      	pop	ds
 37750 00006EE3 BE[4B05]                	MOV     SI,NAME1
 37751 00006EE6 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37752 00006EE9 57                      	push	di
 37753 00006EEA E860B2                  	call	PackName                ;       PackName (Name1, temp);
 37754 00006EED 5F                      	pop	di
 37755 00006EEE E86FA3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37756 00006EF1 49                      	DEC     CX
 37757 00006EF2 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37758                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37759                                  	;cmp	cx,[bp+0]
 37760                                  	; 15/12/2022
 37761                                  	;cmp	cx,[bp]
 37762 00006EF5 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37763 00006EF8 730B                    	JAE	short CopyBad		;           return (-1);
 37764 00006EFA 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37765 00006EFC C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37766 00006EFF E855A3                  	call	FStrCpy
 37767                                  _GoodRet:				;       }
 37768 00006F02 F8                      	CLC
 37769 00006F03 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37770                                  CopyBad:
 37771 00006F05 F9                      	STC
 37772 00006F06 E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37773                                  	;mov	al,2
 37774 00006F09 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37775 00006F0B 7503                    	JNZ	short CopyEnd
 37776                                  CopyBadPath:
 37777 00006F0D F9                      	STC
 37778                                  	;mov	al,3
 37779 00006F0E B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37780                                  CopyEnd:
 37781 00006F10 5D                      	pop	bp
 37782 00006F11 5F                      	pop	di
 37783 00006F12 07                      	pop	es
 37784 00006F13 5E                      	pop	si
 37785 00006F14 1F                      	pop	ds
 37786 00006F15 9F                      	LAHF
 37787 00006F16 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37788 00006F19 E844A3                  	call	StrLen
 37789 00006F1C 49                      	DEC     CX
 37790 00006F1D 9E                      	SAHF
 37791 00006F1E C3                      	retn
 37792                                  
 37793                                  ; 14/05/2019 - Retro DOS v4.0
 37794                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37795                                  
 37796                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37797                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37798                                  
 37799                                  ;Break <Splice - pseudo mount by string substitution>
 37800                                  ;----------------------------------------------------------------------------
 37801                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37802                                  ;       ThisCDS to point to physical drive CDS.
 37803                                  ;   Inputs:     DS:SI point to string
 37804                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37805                                  ;   Outputs:    DS:SI points to thisCDS
 37806                                  ;               ES:DI points to DPB
 37807                                  ;               String at DS:SI may be reduced in length by removing prefix
 37808                                  ;               and substituting drive letter.
 37809                                  ;               CX = 0 If no splice done
 37810                                  ;               CX <> 0 otherwise
 37811                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37812                                  ;                   left alone
 37813                                  ;               ThisDPB points to proper DPB
 37814                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37815                                  ;----------------------------------------------------------------------------
 37816                                  
 37817                                  Splice:
 37818 00006F1F 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37819 00006F25 7469                    	JZ	short AllDone
 37820 00006F27 36FF36[A205]            	push	word [SS:THISCDS]
 37821 00006F2C 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37822 00006F31 1E                      	push	ds
 37823 00006F32 56                      	push	si
 37824 00006F33 5F                      	pop	di
 37825 00006F34 07                      	pop	es
 37826 00006F35 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37827                                  SpliceScan:
 37828 00006F37 E8DBFC                  	call	GetCDSFromDrv
 37829 00006F3A 724A                    	JC	short SpliceDone
 37830 00006F3C FEC0                    	INC     AL
 37831                                  	; 17/12/2022
 37832                                  	;test	byte [si+68],20h
 37833 00006F3E F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37834                                  	;;test	word [si+67],2000h
 37835                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37836 00006F42 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37837 00006F44 57                      	push	di
 37838 00006F45 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37839 00006F48 7403                    	JZ	short SpliceFound	;
 37840                                  SpliceSkip:
 37841 00006F4A 5F                      	pop	di
 37842 00006F4B EBEA                    	JMP	short SpliceScan	;               continue;
 37843                                  SpliceFound:
 37844 00006F4D 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37845 00006F51 7508                    	JNZ	short SpliceDo
 37846 00006F53 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37847 00006F59 75EF                    	JNZ	short SpliceSkip
 37848                                  SpliceDo:
 37849 00006F5B 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37850 00006F5D 06                      	push	es
 37851 00006F5E 1F                      	pop	ds
 37852 00006F5F 5F                      	pop	di
 37853 00006F60 E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37854 00006F63 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37855 00006F67 09C0                    	OR      AX,AX
 37856 00006F69 7808                    	JS	short NoPoke
 37857 00006F6B 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37858 00006F6D 29F0                    	SUB     AX,SI
 37859 00006F6F 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37860                                  NoPoke:
 37861 00006F73 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37862 00006F76 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37863 00006F78 B05C                    	MOV     AL,"\"
 37864 00006F7A AA                      	STOSB
 37865                                  SpliceCopy:                             ;               strcpy (src, p);
 37866 00006F7B E8D9A2                  	call	FStrCpy
 37867 00006F7E 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37868 00006F81 80C901                  	OR      CL,1                    ; signal splice done.
 37869 00006F84 EB0C                    	JMP     SHORT DoSet             ;               return;
 37870                                  SpliceDone:                             ;               }
 37871 00006F86 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37872 00006F8B 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37873                                  AllDone:
 37874 00006F90 31C9                    	XOR     CX,CX
 37875                                  DoSet:
 37876 00006F92 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37877                                  	;les	di,[si+69]
 37878 00006F97 C47C45                  	LES     DI,[SI+curdir.devptr]	
 37879 00006F9A 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37880 00006F9F 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37881                                  Splice_retn:
 37882 00006FA4 C3                      	retn
 37883                                  
 37884                                  ; 15/05/2019 - Retro DOS v4.0
 37885                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37886                                  
 37887                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37888                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37889                                  
 37890                                  ;Break <$NameTrans - partially process a name>
 37891                                  ;----------------------------------------------------------------------------
 37892                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37893                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37894                                  ;   to Transpath playing games with devices, we need to insure that the output
 37895                                  ;   has drive letter and : in it.
 37896                                  ;
 37897                                  ;   Inputs:     DS:SI - source string for translation
 37898                                  ;               ES:DI - pointer to buffer
 37899                                  ;   Outputs:
 37900                                  ;       Carry Clear
 37901                                  ;               Buffer at ES:DI is filled in with data
 37902                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37903                                  ;       Carry Set
 37904                                  ;               AX = error_path_not_found
 37905                                  ;   Registers modified: all
 37906                                  ;----------------------------------------------------------------------------
 37907                                  
 37908                                  _$NameTrans:
 37909 00006FA5 1E                      	push	ds
 37910 00006FA6 56                      	push	si
 37911 00006FA7 06                      	push	es
 37912 00006FA8 57                      	push	di
 37913 00006FA9 51                      	push	cx ; MSDOS 6.0
 37914                                  	
 37915                                  	; MSDOS 6.0	
 37916                                  ; M027 - Start
 37917                                  ;
 37918                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37919                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37920                                  ; device if the old call set the volume attribute bit. Note that devname in
 37921                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37922                                  ; and restore CX.
 37923                                  
 37924                                  	;mov	ch,16h
 37925 00006FAA B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37926 00006FAC E8BA02                  	call	SetAttrib
 37927                                  
 37928                                  ; M027 - End
 37929                                  
 37930                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37931 00006FAF BF[BE03]                	MOV     DI,OPENBUF
 37932 00006FB2 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37933 00006FB5 59                      	pop	cx ; MSDOS 6.0
 37934 00006FB6 5F                      	pop     di
 37935 00006FB7 07                      	pop	es
 37936 00006FB8 5E                      	pop     si
 37937 00006FB9 1F                      	pop     ds
 37938 00006FBA 7303                    	JNC	short TransOK
 37939 00006FBC E9CE96                  	jmp	SYS_RET_ERR
 37940                                  TransOK:
 37941 00006FBF BE[BE03]                	MOV     SI,OPENBUF
 37942 00006FC2 16                      	push	ss
 37943 00006FC3 1F                      	pop	ds
 37944                                  ;GotText:
 37945 00006FC4 E890A2                  	call	FStrCpy
 37946 00006FC7 E9BA96                  	jmp	SYS_RET_OK
 37947                                  
 37948                                  ;Break   <DriveFromText - return drive number from a text string>
 37949                                  ;----------------------------------------------------------------------------
 37950                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 37951                                  ;   pointer.
 37952                                  ;
 37953                                  ;   Inputs:     DS:SI point to a text string
 37954                                  ;   Outputs:    AL has drive number
 37955                                  ;               DS:SI advanced
 37956                                  ;   Registers modified: AX,SI.
 37957                                  ;----------------------------------------------------------------------------
 37958                                  
 37959                                  DriveFromText:
 37960 00006FCA 30C0                    	XOR     AL,AL                   ;       drive = 0;
 37961 00006FCC 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 37962 00006FCF 74D3                    	jz	short Splice_retn
 37963 00006FD1 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 37964 00006FD5 75CD                    	jnz	short Splice_retn
 37965 00006FD7 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 37966 00006FD8 0C20                    	OR      AL,20h
 37967                                  	;sub	al,60h
 37968 00006FDA 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 37969 00006FDC 75C6                    	jnz	short Splice_retn
 37970 00006FDE B0FF                    	MOV     AL,-1                   ; nuke AL...
 37971 00006FE0 C3                      	retn				;           }
 37972                                  
 37973                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 37974                                  ;----------------------------------------------------------------------------
 37975                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 37976                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 37977                                  ;
 37978                                  ;   Inputs:     AL has 0-based drive number
 37979                                  ;   Outputs:    ES:DI advanced
 37980                                  ;   Registers modified: AX
 37981                                  ;----------------------------------------------------------------------------
 37982                                  
 37983                                  TextFromDrive:
 37984 00006FE1 FEC0                    	INC     AL
 37985                                  TextFromDrive1:
 37986                                  	;add	al,40h
 37987 00006FE3 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 37988 00006FE5 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 37989 00006FE7 AB                      	STOSW
 37990                                  PathPref_retn:
 37991 00006FE8 C3                      	retn
 37992                                  
 37993                                  ;Break   <PathPref - see if one path is a prefix of another>
 37994                                  ;----------------------------------------------------------------------------
 37995                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 37996                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 37997                                  ;   prefix: A:\ and A:\FOO
 37998                                  ;
 37999                                  ;   Inputs:     DS:SI potential prefix
 38000                                  ;               ES:DI string
 38001                                  ;   Outputs:    Zero set => prefix found
 38002                                  ;                   DI/SI advanced past matching part
 38003                                  ;               Zero reset => no prefix, DS/SI garbage
 38004                                  ;   Registers modified: CX
 38005                                  ;----------------------------------------------------------------------------
 38006                                  
 38007                                  PathPref:
 38008 00006FE9 E882A2                  	call	DStrLen                 ; get length
 38009 00006FEC 49                      	DEC     CX                      ; do not include nul byte
 38010 00006FED F3A6                    	REPZ    CMPSB                   ; compare
 38011 00006FEF 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38012 00006FF1 50                      	push	ax			; save char register
 38013 00006FF2 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38014 00006FF5 E8B6E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38015 00006FF8 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38016                                  NotSep:                                 ; 2/13/KK
 38017 00006FFA 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38018 00006FFD E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38019                                  Prefix:
 38020 00007000 58                      	pop	ax			; get back original
 38021 00007001 C3                      	retn
 38022                                  
 38023                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38024                                  ;----------------------------------------------------------------------------
 38025                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38026                                  ;     a path separator.
 38027                                  ;
 38028                                  ;     Input:    DS:SI target string (null terminated)
 38029                                  ;     Output:   Zero set => path separator encountered in string
 38030                                  ;               Zero clear => null encountered
 38031                                  ;     Registers modified: SI
 38032                                  ;----------------------------------------------------------------------------
 38033                                  
 38034                                  ScanPathChar:
 38035 00007002 AC                      	LODSB                           ; fetch a character
 38036 00007003 E871FE                  	call    PathSepGotCh
 38037 00007006 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38038                                  	;call	PATHCHRCMP              ; path separator?
 38039                                  	;retn
 38040                                  	; 18/12/2022
 38041 00007008 E9A3E1                  	jmp	PATHCHRCMP
 38042                                  
 38043                                  ;============================================================================
 38044                                  ; FILE.ASM, MSDOS 6.0, 1991
 38045                                  ;============================================================================
 38046                                  ; 14/07/2018 - Retro DOS v3.0
 38047                                  
 38048                                  ; 13/05/2019 - Retro DOS v4.0
 38049                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38050                                  
 38051                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38052                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38053                                  
 38054                                  ; MSDOS 2.11
 38055                                  ;BREAK <$Open - open a file handle>
 38056                                  ;----------------------------------------------------------------------------
 38057                                  ;   Assembler usage:
 38058                                  ;           LDS     DX, Name
 38059                                  ;           MOV     AH, Open
 38060                                  ;           MOV     AL, access
 38061                                  ;           INT     int_command
 38062                                  ;
 38063                                  ;       ACCESS          Function
 38064                                  ;       ------          --------
 38065                                  ;       open_for_read   file is opened for reading
 38066                                  ;       open_for_write  file is opened for writing
 38067                                  ;       open_for_both   file is opened for both reading and writing.
 38068                                  ;
 38069                                  ;   Error returns:
 38070                                  ;           AX = error_invalid_access
 38071                                  ;              = error_file_not_found
 38072                                  ;              = error_access_denied
 38073                                  ;              = error_too_many_open_files
 38074                                  ;----------------------------------------------------------------------------
 38075                                  
 38076                                  ; MSDOS 6.0
 38077                                  ;	BREAK <$Open - open a file from a path string>
 38078                                  ;----------------------------------------------------------------------------
 38079                                  ;
 38080                                  ;**	$OPen - Open a File
 38081                                  ;
 38082                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38083                                  ;	file and and returns a handle
 38084                                  ;
 38085                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38086                                  ;		(AL) = open mode
 38087                                  ;	EXIT	'C' clear if OK
 38088                                  ;		  (ax) = file handle
 38089                                  ;		'C' set if error
 38090                                  ;		  (ax) = error code
 38091                                  ;	USES	all
 38092                                  ;
 38093                                  ;----------------------------------------------------------------------------
 38094                                  
 38095                                  ; 13/05/2019 - Retro DOS v4.0
 38096                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38097                                  
 38098                                  _$OPEN:       
 38099 0000700B 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38100                                  _$Open2:
 38101                                  	;mov	ch,16h
 38102 0000700D B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38103 0000700F E85702                  	call	SetAttrib
 38104 00007012 B9[132C]                	mov	cx,DOS_OPEN
 38105                                  
 38106                                  	;xor	ah,ah  ; MSDOS 3.3
 38107                                  
 38108 00007015 50                      	push	ax
 38109                                  
 38110                                  ;*	General file open/create code. The $CREATE call and the various
 38111                                  ;	$OPEN calls all come here.
 38112                                  ;
 38113                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38114                                  ;	path names, etc., and then dispatch to our individual handlers.
 38115                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38116                                  ;
 38117                                  ;	(TOS) = create mode
 38118                                  ;	(CX) = address of routine to call to do actual function
 38119                                  ;	(DS:DX) = ASCIZ name
 38120                                  ;	SAttrib = Attribute mask
 38121                                  
 38122                                  ;	Get a free SFT and mark it "being allocated"
 38123                                  
 38124                                  AccessFile:
 38125 00007016 E86CA3                  	call	ECritSFT
 38126 00007019 E8D3F7                  	call	SFNFree			; get a free sfn
 38127 0000701C E881A3                  	call	LCritSFT
 38128 0000701F 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38129 00007021 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38130 00007026 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38131 0000702B 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38132                                  
 38133                                  ;	Find a free area in the user's JFN table.
 38134                                  
 38135 00007030 E8A9F7                  	call	JFNFree			; get a free jfn
 38136 00007033 7303                    	jnc	short SaveJFN
 38137                                  OpenFailJ:
 38138 00007035 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38139                                  
 38140                                  SaveJFN:
 38141 00007038 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38142 0000703D 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38143 00007042 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38144                                  
 38145                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38146                                  ;	reusing the same JFN.
 38147                                  
 38148 00007047 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38149 0000704C 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38150 0000704F 89D6                    	MOV	SI,DX			; get name in appropriate place
 38151 00007051 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38152 00007054 51                      	push	cx			; save routine to call
 38153 00007055 E843FC                  	call	TransPath		; convert the path
 38154 00007058 5B                      	pop	bx			; (bx) = routine to call
 38155                                  
 38156 00007059 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38157 0000705E 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38158 00007060 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38159 00007066 7404                    	JZ	short SetSearch
 38160                                  	;mov	al,2
 38161 00007068 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38162                                  OpenCleanJ:
 38163 0000706A EB50                    	JMP	short OpenClean
 38164                                  
 38165                                  SetSearch:
 38166 0000706C 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38167                                  
 38168                                  ;	We need to get the new inheritance bits.
 38169                                  
 38170 0000706D 31C9                    	xor	cx,cx
 38171                                  	; MSDOS 6.0
 38172                                  	;mov	[si+2],cx ; 0
 38173 0000706F 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38174                                  	;mov    [si+51],cx ; 0
 38175 00007072 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38176                                  	;
 38177 00007075 81FB[132C]              	CMP	BX,DOS_OPEN
 38178 00007079 7509                    	JNZ	short _DoOper
 38179                                  	;test   al,80h
 38180 0000707B A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38181 0000707D 7405                    	JZ	short _DoOper ; 10/08/2018
 38182 0000707F 247F                    	AND	AL,7Fh			; mask off inherit bit
 38183                                  	;mov	cx,1000h
 38184 00007081 B90010                  	MOV	CX,sf_no_inherit
 38185                                  _DoOper:
 38186                                  	;; MSDOS 3.3
 38187                                  	;;mov	word [si+2], 0
 38188                                  	;;mov	word [si+33h], 0
 38189                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38190                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38191                                  
 38192                                  	; MSDOS 6.0
 38193                                  ;**	Check if this is an extended open. If so you must set the
 38194                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38195                                  ;	Set_EXT_mode in creat.asm
 38196                                  
 38197                                  	; MSDOS 6.0
 38198                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38199 00007084 57                      	push	di
 38200 00007085 06                      	push	es
 38201 00007086 1E                      	push	ds
 38202 00007087 07                      	pop	es
 38203 00007088 56                      	push	si
 38204 00007089 5F                      	pop	di			; (es:di) = SFT address
 38205 0000708A E872BB                  	call	Set_EXT_mode
 38206                                  	;RESTORE <es, di>
 38207 0000708D 07                      	pop	es
 38208 0000708E 5F                      	pop	di
 38209                                  
 38210                                  	;Context DS
 38211 0000708F 16                      	push	ss
 38212 00007090 1F                      	pop	ds	
 38213                                  
 38214 00007091 51                      	push	cx
 38215 00007092 FFD3                    	CALL	BX			; blam!
 38216 00007094 59                      	pop	cx
 38217 00007095 C536[9E05]              	LDS	SI,[THISSFT]
 38218 00007099 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38219                                  	;jc	short OpenE ; MSDOS 3.3
 38220                                  
 38221                                  ;	The SFT was successfully opened. Remove busy mark.
 38222                                  
 38223                                  OpenOK:
 38224                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38225 0000709B C7040100                	mov	word [SI],1
 38226                                  	;or	[SI+5],cx
 38227 0000709F 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38228                                  
 38229                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38230                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38231                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38232                                  ;
 38233                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38234                                  ; sharer.
 38235                                  
 38236 000070A2 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38237 000070A6 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38238                                  
 38239 000070AB 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38240                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38241                                  OpenOkj:
 38242 000070B2 E9CF95                  	jmp	SYS_RET_OK		; bye with no errors
 38243                                  
 38244                                  	; MSDOS 6.0
 38245                                  ;Extended Open hooks check
 38246                                  OpenE2:					;AN000;;EO.
 38247 000070B5 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38248 000070B8 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38249 000070BA EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38250                                  
 38251                                  ;	Extended Open hooks check
 38252                                  ;
 38253                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38254                                  
 38255                                  OpenClean:
 38256 000070BC 5B                      	pop	bx			; clean off stack
 38257                                  OpenE:
 38258                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38259 000070BD C7040000                	mov	word [SI],0
 38260 000070C1 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38261 000070C6 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38262 000070C9 EB02                    	JMP	SHORT OpenCritLeave
 38263                                  
 38264                                  OpenFail:
 38265 000070CB FB                      	STI
 38266 000070CC 59                      	pop	cx			; Clean stack
 38267                                  OpenCritLeave:
 38268 000070CD 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38269                                  
 38270                                  	; MSDOS 6.0
 38271                                  ; File Tagging DOS 4.00
 38272 000070D4 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38273                                  					;AN000;;FT. code page mismatch
 38274 000070DA 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38275 000070DC E9B695                  	jmp	From_GetSet		;AN000;;FT. yes
 38276                                  NORERR: 				;AN000;
 38277                                  ; File Tagging DOS 4.00
 38278                                  
 38279 000070DF E9AB95                  	jmp	SYS_RET_ERR		; no free, return error
 38280                                  
 38281                                  ; MSDOS 2.11
 38282                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38283                                  ;----------------------------------------------------------------------------
 38284                                  ;   Assembler usage:
 38285                                  ;           LDS     DX, name
 38286                                  ;           MOV     AH, Creat
 38287                                  ;           MOV     CX, access
 38288                                  ;           INT     21h
 38289                                  ;       ; AX now has the handle
 38290                                  ;
 38291                                  ;   Error returns:
 38292                                  ;           AX = error_access_denied
 38293                                  ;              = error_path_not_found
 38294                                  ;              = error_too_many_open_files
 38295                                  ;----------------------------------------------------------------------------
 38296                                  
 38297                                  ; MSDOS 6.0
 38298                                  ;	BREAK <$Creat - create a brand-new file>
 38299                                  ;----------------------------------------------------------------------------
 38300                                  ;
 38301                                  ;**	$Creat - Create a File
 38302                                  ;
 38303                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38304                                  ;	initial attributes contained in CX
 38305                                  ;
 38306                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38307                                  ;		(CX) = initial attributes
 38308                                  ;	EXIT	'C' set if error
 38309                                  ;		  (ax) = error code
 38310                                  ;		'C' clear if OK
 38311                                  ;		  (ax) = file handle
 38312                                  ;	USES	all
 38313                                  ;
 38314                                  ;----------------------------------------------------------------------------
 38315                                  
 38316                                  _$CREAT:
 38317 000070E2 51                      	push	cx			; Save attributes on stack
 38318 000070E3 B9[E92A]                	mov	CX,DOS_CREATE		; routine to call
 38319                                  AccessSet:
 38320                                  	;mov	byte [ss:SATTRIB],6
 38321 000070E6 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38322                                  	; 10/08/2018
 38323 000070EC E927FF                  	JMP	AccessFile		; use good ol' open
 38324                                  
 38325                                  ; MSDOS 6.0 (MSDOS 3.3)
 38326                                  ;	BREAK <$CHMOD - change file attributes>
 38327                                  ;----------------------------------------------------------------------------
 38328                                  ;
 38329                                  ;**	$CHMOD - Change File Attributes
 38330                                  ;
 38331                                  ;   Assembler usage:
 38332                                  ;	    LDS     DX, name
 38333                                  ;	    MOV     CX, attributes
 38334                                  ;	    MOV     AL,func (0=get, 1=set)
 38335                                  ;	    INT     21h
 38336                                  ;   Error returns:
 38337                                  ;	    AX = error_path_not_found
 38338                                  ;	    AX = error_access_denied
 38339                                  ;
 38340                                  ;----------------------------------------------------------------------------
 38341                                  
 38342                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38343                                  _$CHMOD:
 38344                                  	; 05/08/2018 - Retro DOS v3.0
 38345                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38346 000070EF BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38347 000070F2 50                      	push	ax
 38348 000070F3 51                      	push	cx			; save function and attributes
 38349 000070F4 89D6                    	MOV	SI,DX			; get things in appropriate places
 38350 000070F6 E8A6FB                  	call	TransPathSet		; get correct path
 38351 000070F9 59                      	pop	cx
 38352 000070FA 58                      	pop	ax			; and get function and attrs back
 38353 000070FB 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38354 000070FD 16                      	push	ss			; set up for later possible calls
 38355 000070FE 1F                      	pop	ds
 38356 000070FF 803E[7A05]FF            	CMP	byte [CMETA],-1
 38357 00007104 754E                    	JNZ	short ChModErr
 38358                                  	;mov	byte [SATTRIB],16h
 38359 00007106 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38360 0000710B 2C01                    	SUB	AL,1			; fast way to discriminate
 38361 0000710D 720B                    	JB	short ChModGet		; 0 -> go get value
 38362 0000710F 7417                    	JZ	short ChModSet		; 1 -> go set value
 38363                                  	;mov	byte [EXTERR_LOCUS],1
 38364 00007111 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38365                                  	;mov	al,1
 38366 00007116 B001                    	mov	al,error_invalid_function ; bad value
 38367                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38368                                  chmod_errj:	
 38369                                  	;;jmp	SYS_RET_ERR
 38370                                  	;jmp	short ChModE	
 38371 00007118 EBC5                    	jmp	short NORERR	; 06/12/2022
 38372                                  ChModGet:
 38373 0000711A E8B6B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38374 0000711D 7237                    	JC	short ChModE		; error codes are already set for ret
 38375 0000711F E8A893                  	call	Get_User_Stack		; point to user saved vaiables
 38376                                  	;mov	[SI+4],ax
 38377 00007122 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38378                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38379                                  OpenOkj2:
 38380                                  	; 17/12/2022
 38381                                  	;;jmp	SYS_RET_OK		; say sayonara
 38382                                  	;jmp	short OpenOkj
 38383                                  	; 25/06/2019
 38384 00007125 E95F95                  	jmp	SYS_RET_OK_clc
 38385                                  
 38386                                  ChModSet:
 38387 00007128 89C8                    	MOV	AX,CX			; get attrs in position
 38388 0000712A E804B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38389 0000712D 7227                    	JC	short ChModE		; errors are set
 38390                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38391                                  	;jmp	SYS_RET_OK
 38392                                  OpenOkj3:
 38393                                  	;jmp	short OpenOkj2
 38394                                  	; 17/12/2022
 38395 0000712F E95295                  	jmp	SYS_RET_OK
 38396                                  
 38397                                  ; 17/12/2022
 38398                                  %if 0
 38399                                  ChModErr:
 38400                                  NotFound:	; 17/12/2022
 38401                                  	;mov	al,3
 38402                                  	mov	al,error_path_not_found
 38403                                  ChModE:
 38404                                  UnlinkE:	; 17/12/2022
 38405                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38406                                  	;;jmp	SYS_RET_ERR
 38407                                  	;jmp	short chmod_errj
 38408                                  	; 17/12/2022
 38409                                  	jmp	short NORERR
 38410                                  %endif
 38411                                  
 38412                                  ; 22/05/2019 - Retro DOS v4.0
 38413                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38414                                  
 38415                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38416                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38417                                  
 38418                                  ;	BREAK <$UNLINK - delete a file entry>
 38419                                  ;----------------------------------------------------------------------------
 38420                                  ;
 38421                                  ;**	$UNLINK - Delete a File
 38422                                  ;
 38423                                  ;
 38424                                  ;	Assembler usage:
 38425                                  ;	    LDS     DX, name
 38426                                  ;	    IF VIA SERVER DOS CALL
 38427                                  ;	     MOV     CX,SEARCH_ATTRIB
 38428                                  ;	    MOV     AH, Unlink
 38429                                  ;	    INT     21h
 38430                                  ;
 38431                                  ;	ENTRY	(ds:dx) = path name
 38432                                  ;		(cx) = search_attribute, if via server_dos
 38433                                  ;	EXIT	'C' clear if no error
 38434                                  ;		'C' set if error
 38435                                  ;		  (ax) = error code
 38436                                  ;			= error_file_not_found
 38437                                  ;			= error_access_denied
 38438                                  ;
 38439                                  ;----------------------------------------------------------------------------
 38440                                  
 38441                                  _$UNLINK:
 38442 00007132 51                      	push	cx			; Save possible CX input parm
 38443 00007133 89D6                    	MOV	SI,DX			; Point at input string
 38444 00007135 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38445 00007138 E864FB                  	call	TransPathSet		; go get normalized path
 38446 0000713B 59                      	pop	cx
 38447 0000713C 7216                    	JC	short ChModErr		; badly formed path
 38448 0000713E 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38449 00007144 750E                    	JNZ	short NotFound
 38450 00007146 16                      	push	ss
 38451 00007147 1F                      	pop	ds
 38452                                  	;mov	ch,6
 38453 00007148 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38454 0000714A E81C01                  	call	SetAttrib
 38455 0000714D E871B4                  	call	DOS_DELETE		; remove that file
 38456                                  	;JC	short UnlinkE 		; error is there
 38457                                  	; 17/12/2022
 38458 00007150 728D                    	jc	short NORERR
 38459                                  
 38460                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38461                                  UnlinkOk:
 38462                                  	;jmp	SYS_RET_OK		; okey doksy
 38463 00007152 EBDB                    	jmp	short OpenOkj3
 38464                                  
 38465                                  	; 17/12/2022
 38466                                  ChModErr:	; 17/12/2022
 38467                                  NotFound:
 38468                                  	;mov	al,3
 38469 00007154 B003                    	MOV	AL,error_path_not_found
 38470                                  ChModE:		; 17/12/2022
 38471                                  UnlinkE:
 38472                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38473                                  	;;jmp	SYS_RET_ERR		; bye
 38474                                  	;jmp	short ChModE
 38475                                  	; 17/12/2022
 38476 00007156 EB87                    	jmp	short NORERR
 38477                                  
 38478                                  ;BREAK <$RENAME - move directory entries around>
 38479                                  ;----------------------------------------------------------------------------
 38480                                  ;
 38481                                  ;   Assembler usage:
 38482                                  ;	    LDS     DX, source
 38483                                  ;	    LES     DI, dest
 38484                                  ;	    IF VIA SERVER DOS CALL
 38485                                  ;	      MOV   CX,SEARCH_ATTRIB
 38486                                  ;	    MOV     AH, Rename
 38487                                  ;	    INT     21h
 38488                                  ;
 38489                                  ;   Error returns:
 38490                                  ;	    AX = error_file_not_found
 38491                                  ;	       = error_not_same_device
 38492                                  ;	       = error_access_denied
 38493                                  ;
 38494                                  ;----------------------------------------------------------------------------
 38495                                  
 38496                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38497                                  _$RENAME:
 38498                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38499 00007158 51                      	push	cx
 38500 00007159 1E                      	push	ds
 38501 0000715A 52                      	push	dx			; save source and possible CX arg
 38502 0000715B 06                      	PUSH	ES
 38503 0000715C 1F                      	POP	DS			; move dest to source
 38504 0000715D 89FE                    	MOV	SI,DI			; save for offsets
 38505 0000715F BF[3E04]                	MOV	DI,RENBUF
 38506 00007162 E83AFB                  	call	TransPathSet		; munge the paths
 38507 00007165 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38508 0000716A 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38509 0000716F 5E                      	pop	si
 38510 00007170 1F                      	pop	ds
 38511 00007171 59                      	pop	cx			; get back source and possible CX arg
 38512                                  epjc2:	
 38513 00007172 72E0                    	JC	short ChModErr		; get old error
 38514 00007174 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38515 0000717A 75D8                    	JNZ	short NotFound
 38516 0000717C 51                      	push	cx			; Save possible CX arg
 38517 0000717D BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38518 00007180 E81CFB                  	call	TransPathSet		; wham
 38519 00007183 59                      	pop	cx
 38520 00007184 72EC                    	JC	short epjc2
 38521 00007186 16                      	push	ss
 38522 00007187 1F                      	pop	ds
 38523 00007188 803E[7A05]FF            	CMP	byte [CMETA],-1
 38524 0000718D 72C5                    	JB	short NotFound
 38525                                  
 38526                                  	; MSDOS 6.0
 38527 0000718F FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38528 00007193 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38529 00007197 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38530 0000719A 16                      	PUSH	SS			   ;AN000;;MS.
 38531 0000719B 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38532 0000719C 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38533                                  rnloop: 				   ;AN000;
 38534 0000719E E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38535 000071A1 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38536 000071A3 E880A0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38537 000071A6 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38538 000071A8 FEC0                    	INC	AL			   ;AN000;;MS.	next
 38539 000071AA EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38540                                  rnerr:					   ;AN000;
 38541 000071AC 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38542                                  	;error	error_current_directory    ;AN000;;MS.
 38543 000071AF B010                    	mov	al,error_current_directory 
 38544                                  	;jmp	SYS_RET_ERR
 38545                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38546 000071B1 EBA3                    	jmp	short UnlinkE
 38547                                  dorn:					   ;AN000;
 38548 000071B3 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38549 000071B8 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38550                                  
 38551 000071BD 16                      	push	ss
 38552 000071BE 1F                      	pop	ds
 38553                                  
 38554                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38555                                  	;mov	ch,16h
 38556 000071BF B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38557                                  					; rename appropriate files
 38558 000071C1 E8A500                  	call	SetAttrib
 38559 000071C4 E8D8B5                  	call	DOS_RENAME		; do the deed
 38560 000071C7 728D                    	JC	short UnlinkE 		; errors
 38561                                  
 38562                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38563                                  	;jmp	SYS_RET_OK
 38564 000071C9 EB87                    	jmp	short UnlinkOk
 38565                                  
 38566                                  
 38567                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38568                                  
 38569                                  ; 14/07/2018 - Retro DOS v3.0
 38570                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38571                                  
 38572                                  ;Break <$CreateNewFile - Create a new directory entry>
 38573                                  ;----------------------------------------------------------------------------
 38574                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38575                                  ;	was no previous directory entry, and fail if a directory entry with
 38576                                  ;	the same name existed previously.
 38577                                  ;
 38578                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38579                                  ;		CX contains default file attributes
 38580                                  ;   Outputs:	Carry Clear:
 38581                                  ;		    AX has file handle opened for read/write
 38582                                  ;		Carry Set:
 38583                                  ;		    AX has error code
 38584                                  ;   Registers modified: All
 38585                                  ;----------------------------------------------------------------------------
 38586                                  
 38587                                  _$CreateNewFile:
 38588 000071CB 51                      	push	cx			; Save attributes on stack
 38589 000071CC B9[B62B]                	MOV	CX,DOS_Create_New	; routine to call
 38590 000071CF E914FF                  	JMP	AccessSet		; use good ol' open
 38591                                  
 38592                                  ;**	BinToAscii - convert a number to a string.
 38593                                  ;----------------------------------------------------------------------------
 38594                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38595                                  ;	This routine is used to generate temp file names so we don't spend
 38596                                  ;	the time and code needed for a true hex number, we just use
 38597                                  ;	A thorugh O.
 38598                                  ;
 38599                                  ;	ENTRY	(ax) = value
 38600                                  ;		(es:di) = destination
 38601                                  ;	EXIT	(es:di) updated by 4
 38602                                  ;	USES	cx, di, flags
 38603                                  ;----------------------------------------------------------------------------
 38604                                  
 38605                                  ; MSDOS 3.3
 38606                                  ;BinToAscii:
 38607                                  ;	mov     cx,4
 38608                                  ;bta5:
 38609                                  ;	push    cx
 38610                                  ;	mov     cl,4
 38611                                  ;	rol     ax,cl
 38612                                  ;	push    ax
 38613                                  ;	and     al,0Fh
 38614                                  ;	add     al,'0'
 38615                                  ;	cmp     al,'9'
 38616                                  ;	jbe     short bta6
 38617                                  ;	add     al,7
 38618                                  ;bta6: 
 38619                                  ;	stosb
 38620                                  ;	pop     ax
 38621                                  ;	pop     cx
 38622                                  ;	loop    bta5
 38623                                  ;	retn
 38624                                  
 38625                                  ; MSDOS 6.0
 38626                                  BinToAscii:
 38627 000071D2 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38628                                  bta5:	
 38629 000071D5 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38630 000071D7 50                      	push	ax			; preserve remainder of digits
 38631 000071D8 240F                    	AND	AL,0Fh			; grab low nibble
 38632 000071DA 0441                    	ADD	AL,'A'			; turn into ascii
 38633 000071DC AA                      	STOSB				; drop in the character
 38634 000071DD 58                      	pop	ax			; (ax) = shifted number
 38635 000071DE FECD                    	dec	ch
 38636 000071E0 75F3                    	jnz	short bta5		; process 4 digits
 38637 000071E2 C3                      	retn
 38638                                  
 38639                                  ;Break	<$CreateTempFile - create a unique name>
 38640                                  ;----------------------------------------------------------------------------
 38641                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38642                                  ;	Method used is to get the current time, convert to a name and attempt
 38643                                  ;	a create new. Repeat until create new succeeds.
 38644                                  ;
 38645                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38646                                  ;		CX  contains default attributes
 38647                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38648                                  ;		AX has handle
 38649                                  ;   Registers modified: all
 38650                                  ;----------------------------------------------------------------------------
 38651                                  
 38652                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38653                                  
 38654                                  _$CreateTempFile:
 38655                                  	;Enter
 38656 000071E3 55                      	push	bp
 38657 000071E4 89E5                    	mov	bp,sp
 38658                                  
 38659                                  	;LocalVar  EndPtr,DWORD
 38660                                  	;LocalVar  FilPtr,DWORD
 38661                                  	;LocalVar  Attr,WORD
 38662                                  
 38663 000071E6 83EC0A                  	sub	sp,10
 38664                                  
 38665                                  	;test	cx,0FFD8h
 38666 000071E9 F7C1D8FF                	test	CX,~attr_changeable
 38667 000071ED 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38668                                  
 38669                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38670                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38671                                  ; below. The code loops on error_access_denied, but if one of the non
 38672                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38673                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38674                                  ; need to detect these cases before getting to the loop.
 38675                                  
 38676                                  	;mov	ax, 5
 38677 000071EF B80500                  	MOV	AX,error_access_denied
 38678 000071F2 EB69                    	JMP	SHORT SETTMPERR
 38679                                  
 38680                                  OKatts:
 38681                                  	;MOV	attr,CX 		; save attribute
 38682 000071F4 894EF6                  	mov     [bp-10],cx
 38683                                  	;MOV	FilPtrL,DX		; pointer to file
 38684 000071F7 8956F8                  	mov	[bp-8],dx
 38685                                  	;MOV	FilPtrH,DS
 38686 000071FA 8C5EFA                  	mov	[bp-6],ds
 38687                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38688 000071FD 8C5EFE                  	mov	[bp-2],ds
 38689 00007200 1E                      	PUSH	DS
 38690 00007201 07                      	POP	ES			; destination for nul search
 38691 00007202 89D7                    	MOV	DI,DX
 38692 00007204 89F9                    	MOV	CX,DI
 38693 00007206 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38694                                  	; MSDOS 6.0
 38695 00007208 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38696 0000720A 7501                    	JNZ	short okok		;AN000;MS. no
 38697                                  	;MOV	CX,-1			;AN000;MS.
 38698                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38699                                  	; 17/12/2022
 38700 0000720C 49                      	dec	cx  ; mov cx,-1
 38701                                  	;mov	cx,-1 ; 0FFFh
 38702                                  okok:					;AN000;
 38703 0000720D 31C0                    	XOR	AX,AX			;AN000;
 38704 0000720F F2AE                    	REPNZ	SCASB			;AN000;
 38705                                  					;AN000;
 38706 00007211 4F                      	DEC	DI			; point back to the null
 38707 00007212 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38708 00007216 E895DF                  	call	PATHCHRCMP		; Is it a path separator?
 38709 00007219 7403                    	JZ	short SETENDPTR		; Yes
 38710                                  STOREPTH:
 38711 0000721B B05C                    	MOV	AL,'\'
 38712 0000721D AA                      	STOSB				; Add a path separator (and INC DI)
 38713                                  SETENDPTR:
 38714                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38715 0000721E 8856FC                  	mov	[bp-4],dl
 38716                                  CreateLoop:
 38717 00007221 16                      	push	ss			; let ReadTime see variables
 38718 00007222 1F                      	pop	ds
 38719 00007223 55                      	push	bp
 38720 00007224 E84999                  	call	READTIME		; go get time
 38721 00007227 5D                      	pop	bp
 38722                                  ;
 38723                                  ; Time is in CX:DX. Go drop it into the string.
 38724                                  ;
 38725                                  	;les	di,EndPtr		; point to the string
 38726 00007228 C47EFC                  	les	di,[BP-4]
 38727 0000722B 89C8                    	mov	ax,cx
 38728 0000722D E8A2FF                  	call	BinToAscii		; store upper word
 38729 00007230 89D0                    	mov	ax,dx
 38730 00007232 E89DFF                  	call	BinToAscii		; store lower word
 38731 00007235 30C0                    	xor	al,al
 38732 00007237 AA                      	STOSB				; nul terminate
 38733                                  	;LDS	DX,FilPtr		; get name
 38734 00007238 C556F8                  	lds	dx,[bp-8]
 38735                                  	;MOV	CX,Attr 		; get attr
 38736 0000723B 8B4EF6                  	mov	cx,[bp-10]
 38737 0000723E 55                      	push	bp
 38738 0000723F E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38739 00007242 5D                      	pop	bp
 38740 00007243 7319                    	JNC	short CreateDone	; failed, go try again
 38741                                  
 38742                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38743                                  ; error and figure out what to do.
 38744                                  
 38745                                  	;; MSDOS 3.3			; M049 - start
 38746                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38747                                  ;;	cmp	al,error_file_exists
 38748                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38749                                  ;;	cmp	al,error_access_denied
 38750                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38751                                  
 38752                                  	; MSDOS 6.0
 38753                                  	;cmp	al,50h
 38754 00007245 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38755 00007247 74D8                    	JZ	short CreateLoop	; Y: try again
 38756                                  	;cmp	al,5
 38757 00007249 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38758 0000724B 7510                    	JNZ	short SETTMPERR		; N: Error out
 38759                                  					; Y: Check to see if we got this due
 38760                                  					;    to the network drive. Note that
 38761                                  					;    the redir will set the exterr
 38762                                  					;    to error_cannot_make if this is 
 38763                                  					;    so. 
 38764 0000724D 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38765                                  					; See if it's REALLY an att mismatch
 38766 00007253 7408                    	je	short SETTMPERR		; no, network error, stop
 38767                                  ;M070
 38768                                  ; If the user failed on an I24, we do not want to try again
 38769                                  ;
 38770 00007255 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38771                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38772                                  
 38773                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38774                                  	; 17/12/2022
 38775 0000725B 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38776                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38777                                  	;jz	short SETTMPERR
 38778                                  	;jmp	short CreateLoop
 38779                                  
 38780                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38781                                  					; M049 - end
 38782                                  SETTMPERR:
 38783 0000725D F9                      	STC
 38784                                  CreateDone:
 38785                                  	;Leave
 38786 0000725E 89EC                    	mov	sp,bp
 38787 00007260 5D                      	pop	bp
 38788 00007261 7203                    	JC	short CreateFail
 38789 00007263 E91E94                  	jmp	SYS_RET_OK		; success!
 38790                                  CreateFail:
 38791 00007266 E92494                  	jmp	SYS_RET_ERR
 38792                                  
 38793                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38794                                  ;   (CH) or to the value in CL if the current system call is through
 38795                                  ;   serverdoscall.
 38796                                  ;
 38797                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38798                                  ;		fSharing == TRUE => set sattrib to CL
 38799                                  ;   Outputs:	none
 38800                                  ;   Registers changed:	CX
 38801                                  
 38802                                  SetAttrib:
 38803 00007269 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38804 0000726F 7502                    	jnz	short Set
 38805 00007271 88E9                    	mov	cl,ch
 38806                                  Set:
 38807 00007273 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38808 00007278 C3                      	retn
 38809                                  
 38810                                  ; 14/07/2018 - Retro DOS v3.0
 38811                                  ; MSDOS 6.0
 38812                                  
 38813                                  ; 29/04/2019 - Retro DOS v4.0
 38814                                  
 38815                                  ;Break	<Extended_Open- Extended open the file>
 38816                                  ;----------------------------------------------------------------------------
 38817                                  ; Input: AL= 0 reserved  AH=6CH
 38818                                  ;	 BX= mode
 38819                                  ;	 CL= create attribute  CH=search attribute (from server)
 38820                                  ;	 DX= flag
 38821                                  ;	 DS:SI = file name
 38822                                  ;	 ES:DI = parm list
 38823                                  ;			   DD  SET EA list (-1) null
 38824                                  ;			   DW  n  parameters
 38825                                  ;			   DB  type (TTTTTTLL)
 38826                                  ;			   DW  IOMODE
 38827                                  ; Function: Extended Open
 38828                                  ; Output: carry clear
 38829                                  ;		     AX= handle
 38830                                  ;		     CX=1 file opened
 38831                                  ;			2 file created/opened
 38832                                  ;			3 file replaced/opened
 38833                                  ;	  carry set: AX has error code
 38834                                  ;----------------------------------------------------------------------------
 38835                                  
 38836                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38837                                  _$Extended_Open:			  ;AN000;
 38838                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38839 00007279 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38840 0000727E 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38841                                  	; 17/12/2022
 38842 00007285 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38843                                  	;;test	dx,0FE00h
 38844                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38845 00007288 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38846 0000728A 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38847 0000728C 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38848 0000728F 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38849                                  	;and	dl,0Fh
 38850 00007291 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38851 00007294 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38852 00007297 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38853                                  	;and	ah,0F0h
 38854 00007299 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38855 0000729C 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38856 0000729F 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38857                                  
 38858 000072A1 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38859 000072A6 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38860 000072AB 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38861 000072B0 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38862 000072B5 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38863 000072BA 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38864 000072BF 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38865 000072C4 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38866 000072C9 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38867 000072CB 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38868 000072CD EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38869                                  ext_inval2:				  ;AN000;;EO.
 38870                                  	;mov	al,1
 38871 000072CF B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38872                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38873                                  eo_err:
 38874                                  	;jmp	SYS_RET_ERR
 38875 000072D1 EB93                    	jmp	short CreateFail
 38876                                  
 38877                                  ext_inval_parm:				  ;AN000;EO..
 38878 000072D3 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38879 000072D4 5E                      	POP	SI			  ;AN000;EO..
 38880                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38881                                  	;mov	al,13
 38882 000072D5 B00D                    	mov	al,error_invalid_data
 38883                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38884                                  	;;jmp	SYS_RET_ERR
 38885                                  	;jmp	short eo_err
 38886                                  	; 17/12/2022
 38887 000072D7 EB8D                    	jmp	short CreateFail
 38888                                  
 38889                                  	; 17/12/2022	
 38890                                  ;error_return:				  ;AN000;EO.
 38891                                  ;	retn				  ;AN000;EO.. return with error
 38892                                  
 38893                                  goopen2:				  ;AN000;
 38894                                  	; 17/12/2022
 38895                                  	;test	bh,20h				 
 38896 000072D9 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38897                                  	;;test	bx,2000h
 38898                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38899 000072DC 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38900                                  	;or	byte [SS:EXTOPEN_ON],2
 38901 000072DE 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38902                                  goopen:					  ;AN000;
 38903                                  	;or	byte [SS:EXTOPEN_ON],1 
 38904 000072E4 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38905                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38906                                  	; 18/12/2022
 38907 000072EA 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38908                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38909 000072F0 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38910 000072F6 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38911 000072F8 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38912 000072FB 723F                    	JC	short error_return	  ;AN000;;EO. error
 38913                                  
 38914 000072FD 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38915 00007303 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38916                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38917 00007305 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38918 0000730C EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38919                                  
 38920                                  	; 17/12/2022
 38921                                  ;ok_return2:
 38922                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38923                                  
 38924                                  chknext:
 38925                                  	; 17/12/2022
 38926 0000730E 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38927                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38928                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38929 00007314 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38930 00007316 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38931 00007319 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38932 0000731B 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38933 00007321 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38934 00007323 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38935 0000732A 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38936 00007330 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38937 00007332 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38938 00007339 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38939                                  error_return2:
 38940 0000733B F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38941                                  error_return:	 ;17/12/2022
 38942 0000733C C3                      	retn				  ;AN000;;EO. return with error
 38943                                  
 38944                                  	; 17/12/2022
 38945                                  ok_return:
 38946                                  ok_return2:
 38947 0000733D E94493                  	jmp	SYS_RET_OK
 38948                                  
 38949                                  exist_open:				  ;AN000;
 38950 00007340 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 38951 00007346 7402                    	jz	short noserver		  ;AN000;;EO. no
 38952 00007348 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 38953                                  noserver:
 38954 0000734A E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 38955 0000734D 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 38956 0000734F 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 38957 00007355 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 38958                                  local_extopen:
 38959                                  	;cmp	ax,2
 38960 00007357 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 38961 0000735A 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 38962                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 38963                                  	; 17/12/2022
 38964 0000735C 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 38965                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 38966                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 38967                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 38968                                  	; 17/12/2022
 38969 00007362 745D                    	jz	short extexit ; 10/06/2019
 38970                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38971                                  	;jnz	short do_creat
 38972                                  	;jmp	short extexit
 38973                                  do_creat:
 38974 00007364 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 38975 00007369 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 38976 0000736E 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 38977 00007370 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 38978 00007373 724C                    	JC	short extexit 		  ;AN000;;EO. error
 38979                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38980 00007375 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 38981                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 38982 0000737C EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38983                                  
 38984                                  ext_ok:
 38985 0000737E 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 38986 00007384 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 38987                                  	;mov	word [SS:EXTOPEN_FLAG],1
 38988 00007386 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 38989                                  setXAttr:
 38990                                  	; 29/04/2019
 38991 0000738D 50                      	push	ax
 38992 0000738E E83991                  	call	Get_User_Stack		  ;AN000;;EO.
 38993 00007391 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 38994                                  	;mov	[si+4],ax
 38995 00007395 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 38996 00007398 58                      	pop	ax			  ;AN000;;EO.
 38997 00007399 8904                    	mov	[si],ax
 38998                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 38999                                  	; 17/12/2022
 39000 0000739B EBA0                    	jmp	short ok_return
 39001                                  ;ok_return:				  ;AN000;
 39002                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39003                                  
 39004                                  extexit2:				  ;AN000; ERROR RECOVERY
 39005 0000739D 5B                      	POP	BX			  ;AN000;EO. close the handle
 39006 0000739E 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39007                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39008 0000739F 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39009                                  					  ;AN000;EO. from create;smr;SS Override
 39010 000073A5 750C                    	JNZ	short justopen		  ;AN000;EO.
 39011 000073A7 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39012 000073AC C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39013 000073AE E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39014 000073B1 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39015                                  
 39016                                  justopen:				  ;AN000;
 39017 000073B3 E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39018                                  reserror:				  ;AN000;
 39019 000073B6 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39020 000073B7 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39021                                  
 39022                                  ext_file_unfound:			  ;AN000;
 39023                                  	;mov	ax,2
 39024 000073B9 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39025 000073BC EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39026                                  ext_inval:				  ;AN000;
 39027                                  	;mov	ax,1
 39028 000073BE B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39029                                  lockoperr:	; 17/12/2022
 39030                                  extexit:
 39031 000073C1 E9C992                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39032                                  
 39033                                  ;============================================================================
 39034                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39035                                  ;============================================================================
 39036                                  ; 14/07/2018 - Retro DOS v3.0
 39037                                  ; 22/05/2019 - Retro DOS v4.0
 39038                                  
 39039                                  ;BREAK <$LockOper - Lock Calls>
 39040                                  ;----------------------------------------------------------------------------
 39041                                  ;
 39042                                  ;   Assembler usage:
 39043                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39044                                  ;	    MOV     CX, OffsetHigh
 39045                                  ;	    MOV     DX, OffsetLow
 39046                                  ;	    MOV     SI, LengthHigh
 39047                                  ;	    MOV     DI, LengthLow
 39048                                  ;	    MOV     AH, LockOper
 39049                                  ;	    MOV     AL, Request
 39050                                  ;	    INT     21h
 39051                                  ;
 39052                                  ;   Error returns:
 39053                                  ;	    AX = error_invalid_handle
 39054                                  ;	       = error_invalid_function
 39055                                  ;	       = error_lock_violation
 39056                                  ;
 39057                                  ;   Assembler usage:
 39058                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39059                                  ;
 39060                                  ;				    0? lock all
 39061                                  ;				    8? lock write
 39062                                  ;				    ?2 lock multiple
 39063                                  ;				    ?3 unlock multiple
 39064                                  ;				    ?4 lock/read
 39065                                  ;				    ?5 write/unlock
 39066                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39067                                  ;	    MOV     BX, Handle
 39068                                  ;	    MOV     CX, count or size
 39069                                  ;	    LDS     DX, buffer
 39070                                  ;	    INT     21h
 39071                                  ;
 39072                                  ;   Error returns:
 39073                                  ;	    AX = error_invalid_handle
 39074                                  ;	       = error_invalid_function
 39075                                  ;	       = error_lock_violation
 39076                                  ;
 39077                                  ;----------------------------------------------------------------------------
 39078                                  
 39079                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39080                                  _$LockOper:
 39081 000073C4 3C01                    	CMP	AL,1
 39082 000073C6 770B                    	JA	short lock_bad_func
 39083                                  
 39084 000073C8 57                      	PUSH	DI			       ; Save LengthLow
 39085 000073C9 E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39086 000073CC 731D                    	JNC	short lock_do 		       ; have valid handle
 39087 000073CE 5F                      	POP	DI			       ; Clean stack
 39088                                  	;mov	al,6
 39089 000073CF B006                    	mov	al,error_invalid_handle
 39090                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39091                                  ;lockoperr:
 39092                                  	;jmp	SYS_RET_ERR
 39093                                  	; 17/12/2022
 39094 000073D1 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39095                                  
 39096                                  lock_bad_func:
 39097                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39098 000073D3 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39099                                  	;mov	al,1
 39100 000073D9 B001                    	mov	al,error_invalid_function
 39101                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39102                                  lockoperrj:
 39103                                  	;jmp	SYS_RET_ERR
 39104 000073DB EBE4                    	jmp	short lockoperr
 39105                                  
 39106                                  	; 22/05/2019 - Retro DOS v4.0
 39107                                  
 39108                                  	; MSDOS 6.0 
 39109                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39110                                  ; Dead code deleted, MD, 23 Mar 90
 39111                                  
 39112                                  ;lock_do:
 39113                                  ;	; MSDOS 3.3
 39114                                  ;	or	al,al
 39115                                  ;	pop	ax
 39116                                  ;	jz	short DOS_Lock
 39117                                  ;DOS_Unlock:
 39118                                  ;	;test	word [es:di+5],8000h
 39119                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39120                                  ;	JZ	short LOCAL_UNLOCK
 39121                                  ;	push    ax
 39122                                  ;	mov     ax,110Bh
 39123                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39124                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39125                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39126                                  ;			; SFT DPB field -> DPB of drive containing file
 39127                                  ;			; Return: CF set error
 39128                                  ;	pop     bx
 39129                                  ;	jmp     short ValChk
 39130                                  ;
 39131                                  ;LOCAL_UNLOCK:
 39132                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39133                                  ;ValChk:
 39134                                  ;	JNC	short Lock_OK
 39135                                  ;lockerror:
 39136                                  ;	jmp	SYS_RET_ERR
 39137                                  ;Lock_OK:
 39138                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39139                                  ;	jmp	SYS_RET_OK
 39140                                  ;DOS_Lock:
 39141                                  ;	;test	word [es:di+5],8000h
 39142                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39143                                  ;	JZ	short LOCAL_LOCK
 39144                                  ;	;CallInstall NET_XLock,MultNET,10
 39145                                  ;	mov     ax, 110Ah
 39146                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39147                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39148                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39149                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39150                                  ;			; Return: CF set error
 39151                                  ;	JMP	short ValChk
 39152                                  ;
 39153                                  ;LOCAL_LOCK:
 39154                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39155                                  ;	JMP	short ValChk
 39156                                  
 39157                                  ; 17/12/2022
 39158                                  LOCAL_UNLOCK:
 39159                                  	; MSDOS 3.3
 39160                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39161                                  	; MSDOS 6.0
 39162 000073DD FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39163                                  ValChk:
 39164 000073E1 7302                    	JNC	short Lock_OK
 39165                                  lockerror:
 39166                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39167                                  	;;jmp	SYS_RET_ERR
 39168                                  	;jmp	short lockoperrj
 39169                                  	; 17/12/2022
 39170 000073E3 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39171                                  Lock_OK:
 39172                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39173                                  	; 10/06/2019
 39174 000073E5 A1[0C06]                	mov	ax,[TEMP_VAR]
 39175 000073E8 E99992                  	jmp	SYS_RET_OK
 39176                                  
 39177                                  	; 22/05/2019
 39178                                  lock_do:
 39179                                  	; MSDOS 6.0
 39180 000073EB 89C3                    	MOV	BX,AX				; save AX
 39181 000073ED BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39182                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39183                                  	;;mov	[bp+0],dx
 39184                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39185                                  	; 15/12/2022
 39186 000073F0 895600                  	mov	[bp],dx
 39187                                  	;mov	[bp+2],cx
 39188 000073F3 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39189 000073F6 59                      	POP	CX				; get low length
 39190                                  	;mov	[bp+4],cx
 39191 000073F7 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39192                                  	;mov	[bp+6],si
 39193 000073FA 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39194 000073FD B90100                  	MOV	CX,1				; one range
 39195                                  
 39196                                  ;	PUSH	CS				;
 39197                                  ;	POP	DS				; DS:DX points to
 39198                                  
 39199 00007400 16                      	push	ss
 39200 00007401 1F                      	pop	ds
 39201                                  
 39202 00007402 89EA                    	MOV	DX,BP				; Lock_Buffer
 39203                                  	;test	al,1
 39204 00007404 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39205                                  	;JNZ	short DOS_Unlock		; yes
 39206                                  	;JMP	short DOS_Lock			; function 0
 39207                                  	; 17/12/2022
 39208                                  	; 10/06/2019
 39209 00007406 740E                    	jz	short DOS_Lock
 39210                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39211                                  	;JNZ	short DOS_Unlock
 39212                                  	;JMP	short DOS_Lock
 39213                                  
 39214                                  DOS_Unlock:
 39215                                  	;;test	word [es:di+5],8000h
 39216                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39217 00007408 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39218 0000740D 74CE                    	JZ	short LOCAL_UNLOCK
 39219                                  
 39220                                  lock_unlock: ; 22/05/2019
 39221                                  	
 39222                                  	;CallInstall Net_Xlock,MultNET,10
 39223                                  	
 39224                                  	; MSDOS 3.3
 39225                                  	;mov     ax,110Bh
 39226                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39227                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39228                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39229                                  			; SFT DPB field -> DPB of drive containing file
 39230                                  			; Return: CF set error
 39231                                  	; MSDOS 6.0
 39232 0000740F B80A11                  	mov     ax,110Ah
 39233 00007412 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39234                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39235                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39236                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39237                                  			; Return: CF set error
 39238                                  
 39239 00007414 EBCB                    	JMP	SHORT ValChk
 39240                                  
 39241                                  ; 17/12/2022
 39242                                  %if 0
 39243                                  LOCAL_UNLOCK:
 39244                                  	; MSDOS 3.3
 39245                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39246                                  	; MSDOS 6.0
 39247                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39248                                  ValChk:
 39249                                  	JNC	short Lock_OK
 39250                                  lockerror:
 39251                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39252                                  	;jmp	SYS_RET_ERR
 39253                                  	jmp	short lockoperrj
 39254                                  Lock_OK:
 39255                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39256                                  	; 10/06/2019
 39257                                  	mov	ax,[TEMP_VAR]
 39258                                  	jmp	SYS_RET_OK
 39259                                  %endif
 39260                                  
 39261                                  DOS_Lock:
 39262                                  	;;test	word [es:di+5],8000h
 39263                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39264 00007416 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39265 0000741B 7407                    	JZ	short LOCAL_LOCK
 39266                                  
 39267                                  	;CallInstall NET_XLock,MultNET,10
 39268                                  
 39269 0000741D B80A11                  	mov     ax,110Ah
 39270 00007420 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39271                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39272                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39273                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39274                                  			; Return: CF set error
 39275                                  
 39276 00007422 EBBD                    	JMP	short ValChk
 39277                                  
 39278                                  LOCAL_LOCK:
 39279                                  	; MSDOS 3.3
 39280                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39281                                  	; MSDOS 6.0
 39282 00007424 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39283                                  
 39284 00007428 EBB7                    	JMP	short ValChk
 39285                                  
 39286                                  ; 14/07/2018 - Retro DOS v3.0
 39287                                  ; LOCK_CHECK
 39288                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39289                                  
 39290                                  ;----------------------------------------------------------------------------
 39291                                  ; Inputs:
 39292                                  ;	Outputs of SETUP
 39293                                  ;	[USER_ID] Set
 39294                                  ;	[PROC_ID] Set
 39295                                  ; Function:
 39296                                  ;	Check for lock violations on local I/O
 39297                                  ;	Retries are attempted with sleeps in between
 39298                                  ; Outputs:
 39299                                  ;    Carry clear
 39300                                  ;	Operation is OK
 39301                                  ;    Carry set
 39302                                  ;	A lock violation detected
 39303                                  ; Outputs of SETUP preserved
 39304                                  ;----------------------------------------------------------------------------
 39305                                  
 39306                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39307                                  	; 22/05/2019 - Retro DOS v4.0
 39308                                  LOCK_CHECK:
 39309 0000742A 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39310                                  LockRetry:
 39311 0000742E 53                      	push	bx		; save regs
 39312 0000742F 50                      	push	ax ; MSDOS 6.0
 39313                                  
 39314                                  	;MSDOS 3.3
 39315                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39316                                  	;MSDOS 6.0
 39317 00007430 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39318                                  
 39319 00007434 58                      	pop	ax ; MSDOS 6.0
 39320 00007435 5B                      	pop	bx		; restrore regs
 39321 00007436 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39322                                  LockN:
 39323 00007438 E8409E                  	call	Idle		; wait a while
 39324 0000743B 4B                      	DEC	BX		; remember a retry
 39325 0000743C 75F0                    	JNZ	short LockRetry	; more retries left...
 39326 0000743E F9                      	STC
 39327                                  lc_ret_label:
 39328 0000743F C3                      	retn
 39329                                  
 39330                                  ; 14/07/2018 - Retro DOS v3.0
 39331                                  ; LOCK_VIOLATION
 39332                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39333                                  
 39334                                  ;----------------------------------------------------------------------------
 39335                                  ; Inputs:
 39336                                  ;	[THISDPB] set
 39337                                  ;	[READOP] indicates whether error on read or write
 39338                                  ; Function:
 39339                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39340                                  ; Outputs:
 39341                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39342                                  ;	Carry clear if user wants a retry
 39343                                  ;
 39344                                  ; DS, ES, DI, CX preserved, others destroyed
 39345                                  ;----------------------------------------------------------------------------
 39346                                  
 39347                                  LOCK_VIOLATION:
 39348 00007440 1E                      	PUSH	DS
 39349 00007441 06                      	PUSH	ES
 39350 00007442 57                      	PUSH	DI
 39351 00007443 51                      	PUSH	CX
 39352                                  	;mov	ax,21h
 39353 00007444 B82100                  	MOV	AX,error_lock_violation
 39354                                  	;mov	byte [ALLOWED],18h
 39355 00007447 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39356 0000744C C42E[8A05]              	LES	BP,[THISDPB]
 39357 00007450 BF0100                  	MOV	DI,1		; Fake some registers
 39358 00007453 89F9                    	MOV	CX,DI
 39359                                  	;mov	dx,[es:bp+11]
 39360 00007455 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39361 00007459 E8BCDF                  	call	HARDERR
 39362 0000745C 59                      	POP	CX
 39363 0000745D 5F                      	POP	DI
 39364 0000745E 07                      	POP	ES
 39365 0000745F 1F                      	POP	DS
 39366 00007460 3C01                    	CMP	AL,1
 39367 00007462 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39368 00007464 F9                      	STC
 39369 00007465 C3                      	retn
 39370                                  
 39371                                  ; 14/07/2018 - Retro DOS v3.0
 39372                                  
 39373                                  ;----------------------------------------------------------------------------
 39374                                  
 39375                                  ;	do a retz to return error
 39376                                  
 39377                                  	; 22/05/2019 - Retro DOS v4.0
 39378                                  CheckShare:
 39379                                  	; MSDOS 3.3
 39380                                  	;cmp	byte [cs:fShare],0
 39381                                  	;retn
 39382                                  
 39383                                  	; MSDOS 6.0
 39384 00007466 1E                      	push	ds			;smr;
 39385                                  	;getdseg <ds>			; ds -> dosdata
 39386 00007467 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39387 0000746C 803E[0303]00            	cmp	byte [fShare],0
 39388 00007471 1F                      	pop	ds			;smr;
 39389 00007472 C3                      	retn
 39390                                  	
 39391                                  ;============================================================================
 39392                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39393                                  ;============================================================================
 39394                                  ; 14/07/2018 - Retro DOS v3.0
 39395                                  ; 22/05/2019 - Retro DOS v4.0
 39396                                  
 39397                                  ; SHARE_CHECK
 39398                                  ;----------------------------------------------------------------------------
 39399                                  ; Inputs:
 39400                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39401                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39402                                  ;       [WFP_START] has full path of name
 39403                                  ;       [USER_ID] Set
 39404                                  ;       [PROC_ID] Set
 39405                                  ; Function:
 39406                                  ;       Check for sharing violations on local file/device access
 39407                                  ; Outputs:
 39408                                  ;    Carry clear
 39409                                  ;       Sharing approved
 39410                                  ;    Carry set
 39411                                  ;       A sharing violation detected
 39412                                  ;           AX is error code
 39413                                  ; USES    ALL but DS
 39414                                  ;----------------------------------------------------------------------------
 39415                                  
 39416                                  	; 22/05/2019 - Retro DOS v4.0
 39417                                  SHARE_CHECK:
 39418                                  	; 26/07/2019
 39419 00007473 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39420                                  shchk_retn:
 39421 00007477 C3                      	retn
 39422                                  
 39423                                  ; SHARE_VIOLATION
 39424                                  ;----------------------------------------------------------------------------
 39425                                  ; Inputs:
 39426                                  ;       [THISDPB] Set
 39427                                  ;       AX has error code
 39428                                  ; Function:
 39429                                  ;       Handle Sharing errors
 39430                                  ; Outputs:
 39431                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39432                                  ;       Carry clear if user wants a retry
 39433                                  ;
 39434                                  ; DS, ES, DI preserved, others destroyed
 39435                                  ;----------------------------------------------------------------------------
 39436                                  
 39437                                  SHARE_VIOLATION:
 39438 00007478 1E                      	PUSH    DS
 39439 00007479 06                      	PUSH	ES
 39440 0000747A 57                      	PUSH    DI
 39441 0000747B C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39442                                  	;mov	byte [ALLOWED],18h
 39443 00007480 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39444 00007485 C42E[8A05]              	LES     BP,[THISDPB]
 39445 00007489 BF0100                  	MOV     DI,1			; Fake some registers
 39446 0000748C 89F9                    	MOV     CX,DI
 39447                                  	;mov	dx,[es:bp+17]
 39448 0000748E 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39449 00007492 E883DF                  	call	HARDERR
 39450 00007495 5F                      	POP     DI
 39451 00007496 07                      	POP	ES
 39452 00007497 1F                      	POP     DS
 39453 00007498 3C01                    	CMP     AL,1
 39454 0000749A 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39455 0000749C F9                      	STC
 39456 0000749D C3                      	retn
 39457                                  
 39458                                  ;----------------------------------------------------------------------------
 39459                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39460                                  ;       NOT perform a close, it merely asserts that the sharing information
 39461                                  ;       for the SFT/UID/PID may be safely released.
 39462                                  ;
 39463                                  ;   Inputs:     ES:DI points to an SFT
 39464                                  ;   Outputs:    None
 39465                                  ;   Registers modified: all except DS,ES,DI
 39466                                  ;----------------------------------------------------------------------------
 39467                                  
 39468                                  ShareEnd:
 39469                                  	; 26/07/2019
 39470 0000749E FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39471 000074A2 C3                      	retn
 39472                                  
 39473                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39474                                  ;----------------------------------------------------------------------------
 39475                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39476                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39477                                  ;
 39478                                  ;   Inputs:     ThisSFT points to the SFT
 39479                                  ;               WFP_Start points to the WFP
 39480                                  ;   Outputs:    Carry clear => successful entry
 39481                                  ;               Carry set => failed system call
 39482                                  ;   Registers modified: all
 39483                                  ;----------------------------------------------------------------------------
 39484                                  
 39485                                  ShareEnter:
 39486 000074A3 51                      	push	cx
 39487                                  retry:
 39488 000074A4 8B0E[1A00]              	mov     cx,[RetryCount]
 39489                                  attempt:
 39490 000074A8 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39491 000074AC 31C0                    	XOR     AX,AX
 39492                                   	;mov	[es:di+51],axfff
 39493 000074AE 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39494 000074B2 51                      	push	cx
 39495 000074B3 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39496 000074B6 59                      	pop	cx
 39497 000074B7 730A                    	jnc	short done		; success, let the user see this
 39498 000074B9 E8BF9D                  	call	Idle                    ; wait a while
 39499 000074BC E2EA                    	loop    attempt                 ; go back for another attempt
 39500 000074BE E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39501 000074C1 73E1                    	jnc	short retry		; user said to retry, go do it
 39502                                  done:
 39503 000074C3 59                      	pop	cx
 39504 000074C4 C3                      	retn
 39505                                  
 39506                                  ;============================================================================
 39507                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39508                                  ;============================================================================
 39509                                  ; 29/04/2019 - Retro DOS 4.0
 39510                                  
 39511                                  ;** EXEPATCH.ASM 
 39512                                  ;----------------------------------------------------------------------------
 39513                                  ;	Contains the foll:
 39514                                  ;
 39515                                  ;		- code to find and overlay buggy unpack code
 39516                                  ;		- new code to be overlayed on buggy unpack code 
 39517                                  ;		- old code sequence to identify buggy unpack code
 39518                                  ;
 39519                                  ;	Revision history:
 39520                                  ;
 39521                                  ;		Created: 5/14/90
 39522                                  ;----------------------------------------------------------------------------
 39523                                  
 39524                                  ;----------------------------------------------------------------------------
 39525                                  ;
 39526                                  ; M020 : Fix for rational bug - for details see routine header
 39527                                  ; M028 : 4b04 implementation
 39528                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39529                                  ; M032 : set turnoff bit only if DOS in HMA.
 39530                                  ; M033 : if IP < 2 then not exepacked.
 39531                                  ; M046 : support for a 4th version of exepacked files.
 39532                                  ; M068 : support for copy protected apps.
 39533                                  ; M071 : use A20OFF_COUNT of 10.
 39534                                  ;
 39535                                  ;----------------------------------------------------------------------------
 39536                                  
 39537                                  PATCH1_COM_OFFSET	EQU	06CH
 39538                                  PATCH1_OFFSET		EQU	028H
 39539                                  PATCH1_CHKSUM		EQU	0EF4EH
 39540                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39541                                  
 39542                                  PATCH2_COM_OFFSET	EQU	076H
 39543                                  PATCH2_OFFSET		EQU	032H
 39544                                  
 39545                                  	; The strings that start at offset 076h have two possible 
 39546                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39547                                  
 39548                                  PATCH2_CHKSUM		EQU	78B2H
 39549                                  CHKSUM2_LEN		EQU	119H/2
 39550                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39551                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39552                                  
 39553                                  PATCH3_COM_OFFSET	EQU	074H
 39554                                  PATCH3_OFFSET		EQU	032H
 39555                                  PATCH3_CHKSUM		EQU	4EDEH
 39556                                  CHKSUM3_LEN		EQU	117H/2
 39557                                  
 39558                                  ;**	Data structure passed for ExecReady call
 39559                                  ;
 39560                                  ;struc ERStruc
 39561                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39562                                  ; .ER_Flags:	resw	1
 39563                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39564                                  ; .ER_PSP:	resw	1	; PSP of the program
 39565                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39566                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39567                                  ; .size:
 39568                                  ;endstruc
 39569                                  
 39570                                  ;DOSCODE SEGMENT
 39571                                  
 39572                                  	; 22/05/2019 - Retro DOS v4.0
 39573                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39574                                  
 39575                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39576                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39577                                  
 39578                                  ; M028 - BEGIN
 39579                                  
 39580                                  ;--------------------------------------------------------------------------
 39581                                  ;
 39582                                  ;	Procedure Name		: ExecReady
 39583                                  ;
 39584                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39585                                  ;
 39586                                  ;--------------------------------------------------------------------------
 39587                                  
 39588                                  ExecReady:
 39589 000074C5 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39590                                  	;;test	word [si+2],1
 39591                                  	; 17/12/2022
 39592 000074C7 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39593                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39594 000074CB 7413                    	jz	short er_setver		; only setver for .COM files
 39595                                  
 39596                                  	;mov	ax,[si+8]
 39597 000074CD 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39598 000074D0 83C010                  	add	ax,10h
 39599 000074D3 8EC0                    	mov	es,ax
 39600                                  
 39601                                  	;mov	cx,[si+10]
 39602 000074D5 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39603                                  	;mov	cx,[si+12]
 39604 000074D8 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39605                                  
 39606 000074DB 36FF16[1212]            	call	[ss:FixExePatch]
 39607                                  	
 39608                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39609                                  	;call	[ss:Rational386PatchPtr]
 39610                                  
 39611                                  er_setver:
 39612                                  	;;test	word [si+2],2		; Q: is this an overlay
 39613                                  	; 17/12/2022
 39614 000074E0 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39615                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39616 000074E4 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39617                                  					; N: set up lie version first
 39618 000074E6 1E                      	push	ds
 39619 000074E7 56                      	push	si
 39620                                  	;lds	si,[si+4]
 39621 000074E8 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39622 000074EB E870ED                  	call	Scan_Execname1
 39623 000074EE E881ED                  	call	Scan_Special_Entries
 39624 000074F1 5E                      	pop	si
 39625 000074F2 1F                      	pop	ds
 39626                                  	;mov	es,[si+8]
 39627 000074F3 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39628 000074F6 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39629 000074FA 26A34000                	mov	[es:PDB.Version],ax
 39630                                  
 39631                                  er_chkdoshi:
 39632 000074FE 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39633 00007504 741F                    	je	short er_done		; M032: N: done
 39634                                  
 39635                                  					; M068 - Start
 39636                                  	;mov	ax,[si+8]
 39637 00007506 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39638                                  
 39639                                  	;or	byte [ss:DOS_FLAG],4
 39640 00007509 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39641                                  					; ah = 25 & ah= 49. See dossym.inc 
 39642                                  					; under TAG M003 & M009 for 
 39643                                  					; explanation
 39644                                  	;;test	word [si+2],1
 39645                                  	; 17/12/2022
 39646 0000750F F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39647                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39648 00007513 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39649                                  					;    a20off_psp and ret
 39650 00007515 1E                         	push	ds
 39651 00007516 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39652 00007518 E85D03                  	call	IsCopyProt		; check if copy protected
 39653 0000751B 1F                      	pop	ds
 39654                                  
 39655                                  er_setA20:
 39656                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39657                                  	; is non-zero at this point it indicates that the A20 is to be 
 39658                                  	; turned off for that many int 21 calls made by the app. In 
 39659                                  	; addition the A20 has to be turned off when we exit from this 
 39660                                  	; call. Hence the inc.
 39661                                  
 39662 0000751C 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39663 00007521 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39664                                  					; turned OFF.
 39665                                  er_done:				; M068 - End
 39666 00007525 31C0                    	xor	ax,ax
 39667 00007527 C3                      	retn
 39668                                  
 39669                                  ; M028 - END
 39670                                  
 39671                                  
 39672                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39673                                  %if 0
 39674                                  
 39675                                  ;----------------------------------------------------------------------------
 39676                                  ;
 39677                                  ; procedure : Rational386Patch
 39678                                  ;
 39679                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39680                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39681                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39682                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39683                                  ;
 39684                                  ; This routine applies patches to the Rational DOS Extender to work around
 39685                                  ; most of the register trashing bugs.
 39686                                  ;
 39687                                  ; Note that there are additional register trashing bugs not fixed by these
 39688                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39689                                  ; may be modified on interrupts.
 39690                                  ;
 39691                                  ; There are two different Rational DOS Extender patchs in this module.
 39692                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39693                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39694                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39695                                  ; or not.
 39696                                  ;
 39697                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39698                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39699                                  ; running in the HMA.
 39700                                  ;
 39701                                  ; This patch detection and replacement is based on an example supplied by
 39702                                  ; Ben Williams at Rational.
 39703                                  ;
 39704                                  ;----------------------------------------------------------------------------
 39705                                  
 39706                                  ; 22/05/2019 - Retro DOS v4.0
 39707                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39708                                  
 39709                                  ;----------------------------------------------------------------------------
 39710                                  ;
 39711                                  ; INPUT : ES = segment where program got loaded
 39712                                  ;
 39713                                  ;----------------------------------------------------------------------------
 39714                                  
 39715                                  rpFind1:
 39716                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39717                                  
 39718                                  rpFind1Len equ	$ - rpFind1
 39719                                  
 39720                                  ;	cli
 39721                                  ;	in	al, 21h
 39722                                  ;	pusha
 39723                                  ;	xor	ax, ax
 39724                                  ;	out	43h, al
 39725                                  ;	mov	dx, ...
 39726                                  
 39727                                  rpFind1a:
 39728                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39729                                  
 39730                                  rpFind1aLen equ	$ - rpFind1a
 39731                                  
 39732                                  ;	mov	al, 0Eh
 39733                                  ;	out	37h, al
 39734                                  ;	xor	ax, ax
 39735                                  ;	out	0F2h, al
 39736                                  
 39737                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39738                                  
 39739                                  rpFind2:
 39740                                  	db	0Fh, 20h, 0C0h
 39741                                  
 39742                                  rpFind2Len equ	$ - rpFind2
 39743                                  
 39744                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39745                                  
 39746                                  rpFind3:
 39747                                  	db	0Fh, 22h, 0C0h, 0EAh
 39748                                  
 39749                                  rpFind3Len equ	$ - rpFind3
 39750                                  
 39751                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39752                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39753                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39754                                  
 39755                                  ; note, there is no rpRepl1 string
 39756                                  
 39757                                  rpRepl2:
 39758                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39759                                  
 39760                                  rpRepl2Len equ	$ - rpRepl2
 39761                                  
 39762                                  ;	push	eax
 39763                                  ;	push	cx
 39764                                  ;	mov	eax, cr0
 39765                                  
 39766                                  rpRepl3:
 39767                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39768                                  
 39769                                  rpRepl3Len equ	$ - rpRepl3
 39770                                  
 39771                                  ;	mov	ss, bx
 39772                                  ;	pop	cx
 39773                                  ;	pop	eax
 39774                                  
 39775                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39776                                  
 39777                                  rpFind4:
 39778                                  	db	93h, 58h, 8Bh, 0CCh
 39779                                  
 39780                                  rpFind4Len equ	$ - rpFind4
 39781                                  
 39782                                  ;	xchg	bx, ax
 39783                                  ;	pop	ax
 39784                                  ;	mov	cx, sp
 39785                                  
 39786                                  rpFind5:
 39787                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39788                                  
 39789                                  rpFind5Len equ	$ - rpFind5
 39790                                  
 39791                                  ;	mov	ax, DE0Ch
 39792                                  ;	int	67h
 39793                                  ;	mov	sp, cx
 39794                                  ;	jmp	bx
 39795                                  
 39796                                  rpRepl4:
 39797                                  	db	93h, 58h, 8Bh, 0CCh
 39798                                  	db	02Eh, 066h, 0A3h
 39799                                  
 39800                                  rpRepl4o1Len equ $ - rpRepl4
 39801                                  
 39802                                  	db	00h, 00h
 39803                                  	db	02Eh, 066h, 89h, 36h
 39804                                  
 39805                                  rpRepl4o2Len equ $ - rpRepl4
 39806                                  
 39807                                  	db	00h, 00h
 39808                                  
 39809                                  rpRepl4Len equ	$ - rpRepl4
 39810                                  
 39811                                  ;	xchg	bx, ax
 39812                                  ;	pop	ax
 39813                                  ;	mov	cx, sp
 39814                                  ;	mov	dword ptr cs:[xxxx], eax
 39815                                  ;	mov	dword ptr cs:[xxxx], esi
 39816                                  
 39817                                  rpRepl5:
 39818                                  	db	8Bh, 0E1h
 39819                                  	db	2Eh, 66h, 0A1h
 39820                                  
 39821                                  rpRepl5o1Len equ $ - rpRepl5
 39822                                  
 39823                                  	db	00h, 00h
 39824                                  	db	2Eh, 66h, 8Bh, 36h
 39825                                  
 39826                                  rpRepl5o2Len equ $ - rpRepl5
 39827                                  
 39828                                  	db	00h, 00h
 39829                                  	db	0FFh, 0E3h
 39830                                  
 39831                                  rpRepl5Len equ	$ - rpRepl5
 39832                                  
 39833                                  ;	mov	sp, cx
 39834                                  ;	mov	eax, dword ptr cs:[xxxx]
 39835                                  ;	mov	esi, dword ptr cs:[xxxx]
 39836                                  ;	jmp	bx
 39837                                  
 39838                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39839                                  
 39840                                  rpFind6:
 39841                                  	db	0FAh, 52h, 51h
 39842                                  
 39843                                  rpFind6Len equ	$ - rpFind6
 39844                                  
 39845                                  ;	cli
 39846                                  ;	push	dx
 39847                                  ;	push	cx
 39848                                  
 39849                                  rpFind7a:
 39850                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39851                                  
 39852                                  rpFind7aLen equ	$ - rpFind7a
 39853                                  
 39854                                  ;	mov	ax, 0DE0Ch
 39855                                  ;	call	fword ptr es:[xxxx]
 39856                                  
 39857                                  rpFind7b:
 39858                                  	db	59h, 5Ah, 5Bh
 39859                                  
 39860                                  rpFind7bLen equ	$ - rpFind7b
 39861                                  
 39862                                  ;	pop	cx
 39863                                  ;	pop	dx
 39864                                  ;	pop	bx
 39865                                  
 39866                                  rpRepl6 :
 39867                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39868                                  
 39869                                  rpRepl6Len equ	$ - rpRepl6
 39870                                  
 39871                                  ;	cli
 39872                                  ;	push	eax
 39873                                  ;	push	ebx
 39874                                  ;	push	ecx
 39875                                  ;	push	edx
 39876                                  
 39877                                  rpRepl7:
 39878                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39879                                  
 39880                                  rpRepl7Len equ	$ - rpRepl7
 39881                                  
 39882                                  ;	pop	edx
 39883                                  ;	pop	ecx
 39884                                  ;	pop	ebx
 39885                                  ;	pop	eax
 39886                                  ;	pop	bx
 39887                                  
 39888                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39889                                  
 39890                                  rpFind8:
 39891                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39892                                  
 39893                                  rpFind8Len equ	$ - rpFind8
 39894                                  
 39895                                  ;	pusha
 39896                                  ;	push	es
 39897                                  ;	push	ds
 39898                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39899                                  ;	mov	ds, ax
 39900                                  
 39901                                  rpFind9 :
 39902                                  	db	1Fh, 07h, 61h
 39903                                  
 39904                                  rpFind9Len equ	$ - rpFind9
 39905                                  
 39906                                  ;	pop	ds
 39907                                  ;	pop	es
 39908                                  ;	popa
 39909                                  
 39910                                  rpRepl8:
 39911                                   	db	66h, 60h, 06h, 1Eh
 39912                                  
 39913                                  rpRepl8Len equ	$ - rpRepl8
 39914                                  
 39915                                  ;	pushad
 39916                                  ;	push	es
 39917                                  ;	push	ds
 39918                                  
 39919                                  rpRepl9:
 39920                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39921                                  
 39922                                  rpRepl9Len equ	$ - rpRepl9
 39923                                  
 39924                                  ;	pop	ds
 39925                                  ;	pop	es
 39926                                  ;	popad
 39927                                  ;	retn			;no need to jmp back to main-line
 39928                                  
 39929                                  ;----------------------------------------------------------------------------
 39930                                  
 39931                                  struc SearchPair
 39932                                   .sp_off1: resw 1	; offset of 1st search string
 39933                                   .sp_len1: resw 1	; length of 1st search string
 39934                                   .sp_off2: resw 1	; 2nd string
 39935                                   .sp_len2: resw 1	; 2nd string
 39936                                   .sp_diff: resw 1	; max difference between offsets
 39937                                   .size:
 39938                                  endstruc
 39939                                  
 39940                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39941                                  
 39942                                  rpBug1Strs:
 39943                                  	dw	rpFind2
 39944                                  	dw	rpFind2Len ; 3
 39945                                  	dw	rpFind3
 39946                                  	dw	rpFind3Len ; 4
 39947                                  	dw	20h
 39948                                  
 39949                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 39950                                  
 39951                                  rpBug2Strs:
 39952                                  	dw	rpFind4
 39953                                  	dw	rpFind4Len ; 4
 39954                                  	dw	rpFind5
 39955                                  	dw	rpFind5Len ; 9
 39956                                  	dw	80h
 39957                                  
 39958                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 39959                                  
 39960                                  rpBug3Strs:
 39961                                  	dw	rpFind6
 39962                                  	dw	rpFind6Len ; 3
 39963                                  	dw	rpFind7a
 39964                                  	dw	rpFind7aLen ; 7
 39965                                  	dw	80h
 39966                                  
 39967                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 39968                                  
 39969                                  rpBug4Strs:
 39970                                  	dw	rpFind8
 39971                                  	dw	4
 39972                                  	dw	rpFind9
 39973                                  	dw	rpFind9Len ; 3
 39974                                  	dw	80h
 39975                                  
 39976                                  ;----------------------------------------------------------------------------
 39977                                  
 39978                                  struc StackVars
 39979                                   .sv_wVersion:	resw 1		; Rational extender version #
 39980                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 39981                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 39982                                   .size:
 39983                                  endstruc
 39984                                  
 39985                                  ;----------------------------------------------------------------------------
 39986                                  
 39987                                  ; 22/05/2019 - Retro DOS v4.0
 39988                                  
 39989                                  Rational386Patch:
 39990                                  	; Do a few quick checks to see if this looks like a Rational
 39991                                  	; Extended application. Hopefully this will quickly weed out
 39992                                  	; most non Rational apps.
 39993                                  
 39994                                  	cmp	word [es:0],395		; version number goes here - versions
 39995                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 39996                                  
 39997                                  	cmp	word [es:0Ch],20h	; always has this value here
 39998                                  	jne	short rp3QuickOut
 39999                                  
 40000                                  	push	ax
 40001                                  
 40002                                  	mov	ax,18h 			; extender has 18h at
 40003                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40004                                  	jne	short rp3QO_ax
 40005                                  	cmp	[es:28],ax
 40006                                  	jne	short rp3QO_ax
 40007                                  	cmp	[es:36],ax
 40008                                  	je	short rp3Maybe
 40009                                  rp3QO_ax:
 40010                                  	pop	ax
 40011                                  rp3QuickOut:
 40012                                  	retn
 40013                                  
 40014                                  ; It might be the rational extender, do more extensive checking
 40015                                  
 40016                                  rp3Maybe:
 40017                                  	cld
 40018                                  	push	bx			; note ax pushed above
 40019                                  	push	cx
 40020                                  	push	dx
 40021                                  	push	si
 40022                                  	push	di
 40023                                  	push	es
 40024                                  	push	ds			; we use all of them
 40025                                  	push	bp
 40026                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40027                                  	mov	bp,sp
 40028                                  
 40029                                  	push	cs
 40030                                  	pop	ds
 40031                                  
 40032                                  	mov	ax,[es:0]		; save version #
 40033                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40034                                  	mov	[bp],ax	
 40035                                  					; check that binary version # matches
 40036                                  	call	VerifyVersion		;   ascii string
 40037                                  	jne	short rp3Exit_j
 40038                                  
 40039                                  ; Looks like this is it, find where to put the patch code.  The
 40040                                  ; patch will be located on top of Rational code specific to 80286
 40041                                  ; processors, so these patchs MUST NOT be applied if running on
 40042                                  ; an 80286 system.
 40043                                  
 40044                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40045                                  
 40046                                  	mov	cx,4500h		; force search len to 4700h (searches
 40047                                  	;mov	[bp+2],cx
 40048                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40049                                  
 40050                                  	mov	es,[es:20h]		; es=code segment
 40051                                  
 40052                                  	mov	si,rpFind1		; string to find
 40053                                  	mov	dx,rpFind1Len ; 10	; length to match
 40054                                  	call	ScanCodeSeq		; look for code seq
 40055                                  	jz	short rpGotPatch
 40056                                  
 40057                                  ; According to Rational, some very old versions of the extender may not
 40058                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40059                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40060                                  
 40061                                  	mov	si,rpFind1a
 40062                                  	mov	dx,rpFind1aLen  ;8
 40063                                  	call	ScanCodeSeq
 40064                                  	jz	short rpGotPatch
 40065                                  
 40066                                  rp3Exit_j:
 40067                                  	jmp	rp3Exit
 40068                                  
 40069                                  ; Found the location to write patch code! DI = offset in code seg.
 40070                                  
 40071                                  rpGotPatch:
 40072                                  	;mov	[bp+4],di
 40073                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40074                                  
 40075                                  ;----------------------------------------------------------------------------
 40076                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40077                                  
 40078                                  	;cmp	word [bp+0],381
 40079                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40080                                  	cmp	word [bp],381
 40081                                  	jae	short rpBug2			;   < 3.81
 40082                                  
 40083                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40084                                  	call	FindBadCode
 40085                                  	jc	short rpBug2
 40086                                  
 40087                                  ; si = rpFind2 offset, di = rpFind3 offset
 40088                                  
 40089                                  	push	di
 40090                                  	mov	di,si				; rpFind2 offset
 40091                                  	mov	dx,rpFind2Len ; 3
 40092                                  
 40093                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40094                                  	jne	short rp_no_cx
 40095                                  
 40096                                  	dec	di				;   yes, gobble up push cx too
 40097                                  	inc	dx
 40098                                  rp_no_cx:
 40099                                  	mov	si,rpRepl2			; patch out find2 sequence
 40100                                  	mov	cx,rpRepl2Len  ; 6
 40101                                  	call	GenPatch
 40102                                  
 40103                                  	pop	di				; rpFind3 offset
 40104                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40105                                  	jne	short rp_no_cx2
 40106                                  
 40107                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40108                                  rp_no_cx2:
 40109                                  	;mov	ax,[bp+4]
 40110                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40111                                  	;mov	[es:di+4],ax
 40112                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40113                                  
 40114                                  	push	di				; save find3 offset
 40115                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40116                                  	mov	cx,rpRepl3Len ; 5
 40117                                  	call	CopyPatch
 40118                                  
 40119                                  	pop	bx				; find3 offset
 40120                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40121                                  	call	GenJump 			; jmp back from patch area
 40122                                  	;mov	[bp+4],di
 40123                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40124                                  						;   area pointer
 40125                                  
 40126                                  ;----------------------------------------------------------------------------
 40127                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40128                                  
 40129                                  rpBug2:
 40130                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40131                                  	call	FindBadCode
 40132                                  	jc	short rpBug3
 40133                                  
 40134                                  ; si = rpFind4 offset, di = rpFind5 offset
 40135                                  
 40136                                  	;push	word [bp+4]
 40137                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40138                                  						;   (where repl4 goes)
 40139                                  	push	di				; save find5 offset
 40140                                  
 40141                                  	mov	di,si
 40142                                  	mov	dx,rpFind4Len ; 4
 40143                                  	mov	si,rpRepl4
 40144                                  	mov	cx,rpRepl4Len ; 15
 40145                                  	call	GenPatch			; patch out find4 code
 40146                                  
 40147                                  	pop	di				; find5 offset
 40148                                  	add	di,5				; keep 5 bytes of find5 code
 40149                                  	;mov	bx,[bp+4]
 40150                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40151                                  	push	bx				; save repl5 location
 40152                                  	call	GenJump
 40153                                  
 40154                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40155                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40156                                  	call	CopyPatch			;   so no need to jmp back to
 40157                                  						;   main-line code
 40158                                  
 40159                                  ; patches have been made, now update the patch code to store/load dwords just
 40160                                  ; after the code in the patch area
 40161                                  
 40162                                  	pop	di				; repl5 location
 40163                                  	pop	si				; repl4 location
 40164                                  
 40165                                  	;mov	ax,[bp+4]
 40166                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40167                                  
 40168                                  	;mov	[es:si+7],ax
 40169                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40170                                  	;mov	[es:di+5],ax
 40171                                  	mov	[es:di+rpRepl5o1Len],ax
 40172                                  	add	ax,4
 40173                                  	;mov	[es:si+0Dh],ax
 40174                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40175                                  	;mov	[es:di+0Bh],ax
 40176                                  	mov	[es:di+rpRepl5o2Len],ax
 40177                                  
 40178                                  	;add	word [bp+4],8
 40179                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40180                                  						; patch area
 40181                                  
 40182                                  ;----------------------------------------------------------------------------
 40183                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40184                                  
 40185                                  rpBug3:
 40186                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40187                                  	call	FindBadCode
 40188                                  	jc	short rpBug4
 40189                                  
 40190                                  	;add	di,9
 40191                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40192                                  	push	si				;   code and locate find7b
 40193                                  	mov	si,rpFind7b			;   sequence
 40194                                  	mov	dx,rpFind7bLen ; 3
 40195                                  	call	ScanCodeSeq_di
 40196                                  	pop	si
 40197                                  	jnz	short rpBug4
 40198                                  
 40199                                  	push	di				; save find7b code offset
 40200                                  
 40201                                  	mov	di,si
 40202                                  	mov	dx,rpFind6Len ; 3
 40203                                  	mov	si,rpRepl6
 40204                                  	mov	cx,rpRepl6Len ; 9
 40205                                  	call	GenPatch			; patch out find6 code
 40206                                  
 40207                                  	pop	di
 40208                                  	mov	dx,rpFind7bLen ; 3
 40209                                  	mov	si,rpRepl7
 40210                                  	mov	cx,rpRepl7Len ; 9
 40211                                  	call	GenPatch			; patch out find7b code
 40212                                  
 40213                                  ;----------------------------------------------------------------------------
 40214                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40215                                  
 40216                                  rpBug4:
 40217                                  	;cmp	word [bp+0],360
 40218                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40219                                  	cmp	word [bp],360
 40220                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40221                                  
 40222                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40223                                  	call	FindBadCode
 40224                                  	jc	short rp3Exit
 40225                                  
 40226                                  	push	di				; save find9 code offset
 40227                                  
 40228                                  	mov	di,si
 40229                                  	mov	dx,3
 40230                                  	mov	si,rpRepl8
 40231                                  	mov	cx,rpRepl8Len ; 4
 40232                                  	call	GenPatch			; patch out find8 code
 40233                                  
 40234                                  	pop	di				; find9 offset
 40235                                  	;mov	bx,[bp+4]
 40236                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40237                                  	call	GenJump 			;   patch area
 40238                                  
 40239                                  	mov	si,rpRepl9			; copy replacement code to
 40240                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40241                                  	call	CopyPatch			;   so no jmp back to main-line
 40242                                  
 40243                                  rp3Exit:
 40244                                  	add	sp,StackVars.size
 40245                                  	pop	bp
 40246                                  	pop	ds
 40247                                  	pop	es
 40248                                  	pop	di
 40249                                  	pop	si
 40250                                  	pop	dx
 40251                                  	pop	cx
 40252                                  	pop	bx
 40253                                  	pop	ax
 40254                                  	retn
 40255                                  
 40256                                  ;----------------------------------------------------------------------------
 40257                                  ;
 40258                                  ; FindBadCode
 40259                                  ;
 40260                                  ; Searches Rational code segment looking for a pair of find strings (all
 40261                                  ; patches have at least two find strings).
 40262                                  ;
 40263                                  ; Entry:
 40264                                  ;	ES    = code segment to search
 40265                                  ;	DS:BX = search pair structure for this search
 40266                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40267                                  ;
 40268                                  ; Exit:
 40269                                  ;	CY flag clear if both strings found, and
 40270                                  ;	SI    = offset in ES of 1st string
 40271                                  ;	DI    = offset in ES of 2nd string
 40272                                  ;	CY set if either string not found, or strings too far apart
 40273                                  ;
 40274                                  ; Used:
 40275                                  ;	CX
 40276                                  ;
 40277                                  ;----------------------------------------------------------------------------
 40278                                  
 40279                                  ;struc SearchPair
 40280                                  ; .sp_off1: resw 1	; offset of 1st search string
 40281                                  ; .sp_len1: resw 1	; length of 1st search string
 40282                                  ; .sp_off2: resw 1	; 2nd string
 40283                                  ; .sp_len2: resw 1	; 2nd string
 40284                                  ; .sp_diff: resw 1	; max difference between offsets
 40285                                  ; .size:
 40286                                  ;endstruc
 40287                                  
 40288                                  FindBadCode:
 40289                                  	;mov	cx,[bp+2]
 40290                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40291                                  
 40292                                  	mov	si,[bx]	; mov si,[bx+0]
 40293                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40294                                  	
 40295                                  	;mov	dx,[bx+2]
 40296                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40297                                  	call	ScanCodeSeq
 40298                                  	jnz	short fbc_error		; done if 1st not found
 40299                                  
 40300                                  	push	di			; save 1st string offset
 40301                                  
 40302                                  	;mov	si,[bx+4]
 40303                                  	mov	si,[bx+SearchPair.sp_off2]
 40304                                  	;mov	dx,[bx+6]
 40305                                  	mov	dx,[bx+SearchPair.sp_len2]
 40306                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40307                                  
 40308                                  	pop	si			; restore 1st string offset
 40309                                  	jnz	short fbc_error
 40310                                  
 40311                                  	mov	ax,di			; sanity check that
 40312                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40313                                  	jc	short fbc_error
 40314                                  	;cmp	ax,[bx+8]
 40315                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40316                                  	ja	short fbc_error
 40317                                  
 40318                                  	clc
 40319                                  	retn
 40320                                  
 40321                                  fbc_error:
 40322                                  	stc
 40323                                  	retn
 40324                                  
 40325                                  ;----------------------------------------------------------------------------
 40326                                  ;
 40327                                  ; GenPatch
 40328                                  ;
 40329                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40330                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40331                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40332                                  ; code.
 40333                                  ;
 40334                                  ; Entry:
 40335                                  ;	ES:DI = start of buggy code to be patched
 40336                                  ;	DX    = length of buggy code to be patched
 40337                                  ;	DS:SI = replacement patch code
 40338                                  ;	CX    = length of replacement patch code
 40339                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40340                                  ;
 40341                                  ; Exit:
 40342                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40343                                  ;
 40344                                  ; Used:
 40345                                  ;	AX, BX, SI, Flags
 40346                                  ;
 40347                                  ;----------------------------------------------------------------------------
 40348                                  
 40349                                  GenPatch:
 40350                                  	push	di			;save offset of buggy code
 40351                                  
 40352                                  	;mov	bx,[bp+4]
 40353                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40354                                  					;jump from buggy code to patch area
 40355                                  	call	GenJump
 40356                                  
 40357                                  	call	CopyPatch		;copy replacement code to patch area
 40358                                  
 40359                                  	pop	bx			;offset of buggy code + buggy code
 40360                                  	add	bx,dx			;  length = return from patch offset
 40361                                  
 40362                                  	call	GenJump 		;jump from patch area back to main-
 40363                                  	;mov	[bp+4],di
 40364                                  	mov	[bp+StackVars.sv_pPatch],di
 40365                                  					;  line code, update patch pointer
 40366                                  	retn
 40367                                  
 40368                                  ;----------------------------------------------------------------------------
 40369                                  ;
 40370                                  ; CopyPatch
 40371                                  ;
 40372                                  ; Copies patch code to patch location.
 40373                                  ;
 40374                                  ; Entry:
 40375                                  ;	DS:SI = patch code to be copied
 40376                                  ;	ES    = segment of code to patch
 40377                                  ;	CX    = length of code to copy
 40378                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40379                                  ;
 40380                                  ; Exit:
 40381                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40382                                  ;
 40383                                  ; Used:
 40384                                  ;	SI, Flags
 40385                                  ;
 40386                                  ;----------------------------------------------------------------------------
 40387                                  
 40388                                  CopyPatch:
 40389                                  	push	cx
 40390                                  	;mov	di,[bp+4]
 40391                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40392                                  	cld
 40393                                  	rep movsb
 40394                                  	pop	cx
 40395                                  	;mov	[bp+4],di
 40396                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40397                                  	retn
 40398                                  
 40399                                  ;----------------------------------------------------------------------------
 40400                                  ;
 40401                                  ; GenJump
 40402                                  ;
 40403                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40404                                  ;
 40405                                  ; Entry:
 40406                                  ;	ES:DI = from location (where to put jmp instruction)
 40407                                  ;	BX    = to location (where to jump to)
 40408                                  ;
 40409                                  ; Exit:
 40410                                  ;	DI = byte after generated jump
 40411                                  ;
 40412                                  ; Used:
 40413                                  ;	AX
 40414                                  ;
 40415                                  ;----------------------------------------------------------------------------
 40416                                  
 40417                                  GenJump:
 40418                                  	mov	al,0E9h		; jmp rel16 opcode
 40419                                  	stosb
 40420                                  
 40421                                  	mov	ax,bx		; calc offset to 'to' location
 40422                                  	sub	ax,di
 40423                                  	sub	ax,2
 40424                                  
 40425                                  	stosw			; output offset
 40426                                  
 40427                                  	retn
 40428                                  
 40429                                  ;----------------------------------------------------------------------------
 40430                                  ;
 40431                                  ; ScanCodeSeq
 40432                                  ;
 40433                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40434                                  ;
 40435                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40436                                  ;
 40437                                  ;----------------------------------------------------------------------------
 40438                                  
 40439                                  ScanCodeSeq:
 40440                                  	mov	di,200h
 40441                                  ScanCodeSeq_di:
 40442                                  	push	cx
 40443                                  	sub	cx,dx
 40444                                  	inc	cx
 40445                                  scsagain:
 40446                                  	push	si
 40447                                  	push	di
 40448                                  	push	cx
 40449                                  	mov	cx,dx
 40450                                  	rep	cmpsb
 40451                                  	pop	cx
 40452                                  	pop	di
 40453                                  	pop	si
 40454                                  	je	short scsfound
 40455                                  	inc	di
 40456                                  	loop	scsagain
 40457                                  scsfound:
 40458                                  	pop	cx
 40459                                  vvexit:		; 18/12/2022
 40460                                  	retn
 40461                                  	
 40462                                  ;----------------------------------------------------------------------------
 40463                                  ;
 40464                                  ; VerifyVersion
 40465                                  ;
 40466                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40467                                  ; from ES:2A.
 40468                                  ;
 40469                                  ;       Entry: AX = binary version number 
 40470                                  ;       Exit : Z flag set if version numbers match
 40471                                  ;
 40472                                  ;----------------------------------------------------------------------------
 40473                                  
 40474                                  VerifyVersion:
 40475                                  	mov	si,[es:2Ah]		; offset of version number
 40476                                  					;  in ascii
 40477                                  	mov	bl,10
 40478                                  	add	si,3			; point to last digit
 40479                                  
 40480                                  	call	VVDigit
 40481                                  	jne	short vvexit
 40482                                  	call	VVDigit
 40483                                  	jne	short vvexit
 40484                                  	cmp	byte [es:si],'.'
 40485                                  	jne	short vvexit
 40486                                  	dec	si
 40487                                  	;call	VVDigit
 40488                                  	; 18/12/2022
 40489                                  	;jmp	short VVDigit
 40490                                  ;vvexit:
 40491                                  	;retn
 40492                                  VVDigit:
 40493                                  	div	bl
 40494                                  	add	ah,'0'
 40495                                  	dec	si
 40496                                  	cmp	[es:si+1],ah
 40497                                  	mov	ah,0			; do not xor or sub we need Z
 40498                                  	retn
 40499                                  
 40500                                  %endif
 40501                                  
 40502                                  ;-----------------------------------------------------------------------
 40503                                  
 40504                                  ; 23/05/2019 - Retro DOS v4.0
 40505                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40506                                  
 40507                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40508                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40509                                  
 40510                                  exepatch_start:	 ; label byte
 40511                                  
 40512                                  	; The following is the code that'll be layed over the buggy unpack
 40513                                  	; code.
 40514                                  str1:
 40515 00007528 06                      	db  06h	  		;push	es		 
 40516 00007529 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40517                                  
 40518                                  first_stop equ	$-str1
 40519                                  			
 40520 0000752B 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40521                                  
 40522                                  first:  ; label	byte
 40523                                  
 40524 0000752D 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40525 0000752F 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40526 00007531 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40527 00007534 57                      	db  57h	    		;push	di
 40528 00007535 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40529 00007538 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40530 0000753A F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40531 0000753C 47                      	db  47h	    		;inc	di			
 40532 0000753D 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40533 0000753F 5F                      	db  5Fh	    		;pop	di
 40534 00007540 58                      	db  58h	    		;pop	ax
 40535                                  
 40536                                  second_stop equ	$-first
 40537                                  
 40538 00007541 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40539                                  
 40540                                  second: ; label	byte
 40541                                  
 40542 00007543 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40543                                  		    		;NextRec:				
 40544 00007545 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40545                                  		    		;norm_agn:				
 40546 00007548 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40547 0000754A F7D0                    	db  0F7h,0D0h		;not	ax		
 40548 0000754C D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40549 0000754E 7413                    	db  74h,13h		;jz	short SI_ok			
 40550 00007550 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40551 00007552 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40552 00007555 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40553 00007557 7308                    	db  73h,08h		;jnc	short SItoDS			
 40554 00007559 F7DA                    	db  0F7h,0DAh		;neg	dx			
 40555 0000755B D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40556 0000755D 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40557 0000755F 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40558                                  				;SItoDS: 				
 40559 00007561 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40560                                  				;SI_ok:					
 40561 00007563 87F7                    	db  87h,0F7h		;xchg	si,di			
 40562 00007565 1E                      	db  1Eh			;push	ds			
 40563 00007566 06                      	db  06h			;push	es			
 40564 00007567 1F                      	db  1Fh			;pop	ds			
 40565 00007568 07                      	db  07h			;pop	es			
 40566 00007569 FECD                    	db  0FEh,0CDh		;dec	ch			
 40567 0000756B 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40568 0000756D AC                      	db  0ACh		;lodsb			
 40569 0000756E 92                      	db  92h			;xchg	dx,ax
 40570 0000756F 4E                      	db  4Eh			;dec	si
 40571 00007570 AD                      	db  0ADh		;lodsw			
 40572 00007571 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40573 00007573 46                      	db  46h			;inc	si		
 40574 00007574 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40575 00007576 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40576 00007578 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40577 0000757A 7505                    	db  75h,05h		;jne	short TryEnum
 40578 0000757C AC                      	db  0ACh		;lodsb				
 40579 0000757D F3AA                    	db  0F3h,0AAh		;rep stosb			
 40580                                  
 40581                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40582 0000757F EB06                    	db  0EBh,06h		;jmp	short TryNext
 40583                                  
 40584                                  				;TryEnum:
 40585 00007581 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40586 00007583 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40587 00007585 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40588                                  				;TryNext:
 40589                                  
 40590 00007587 92                      	db  92h			;xchg	dx,ax
 40591                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40592                                  
 40593 00007588 A801                    	db  0A8h,01h		;test	al,1			
 40594 0000758A 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40595 0000758C 9090                    	db  90h,90h		;nop,nop
 40596                                  	
 40597                                  last_stop equ $-second
 40598                                  size_str1 equ $-str1
 40599                                  
 40600                                  	; The following is the code that we need to look for in the exe
 40601                                  	; file.
 40602                                  
 40603                                  scan_patch1: ; label byte
 40604                                  
 40605 0000758E 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40606 00007590 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40607 00007592 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40608 00007594 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40609 00007596 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40610 00007598 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40611 0000759B B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40612 0000759E B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40613 000075A0 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40614 000075A2 47                      	db  47h			;inc	di			
 40615 000075A3 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40616 000075A5 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40617 000075A7 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40618 000075A9 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40619 000075AB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40620                                  				;NextRec:
 40621 000075AE B104                    	db  0B1h,04h		;mov	cl,4
 40622 000075B0 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40623 000075B2 F7D0                    	db  0F7h,0D0h		;not	ax		
 40624 000075B4 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40625 000075B6 7409                    	db  74h,09h		;jz	short SI_ok
 40626 000075B8 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40627 000075BA 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40628 000075BC 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40629 000075BE 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40630                                  	       			;SI_ok:
 40631 000075C1 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40632 000075C3 F7D0                    	db  0F7h,0D0h		;not	ax
 40633 000075C5 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40634 000075C7 7409                    	db  74h,09h		;jz	short DI_ok
 40635 000075C9 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40636 000075CB 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40637 000075CD 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40638 000075CF 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40639                                  				;DI_ok:
 40640                                  
 40641                                  size_scan_patch1 equ $-scan_patch1
 40642                                  
 40643                                  scan_patch2: ; label byte
 40644                                  			
 40645 000075D2 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40646 000075D4 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40647 000075D6 48                      	db  48h			;dec	ax
 40648 000075D7 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40649 000075D9 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40650 000075DB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40651 000075DE B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40652 000075E1 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40653 000075E3 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40654 000075E5 47                      	db  47h			;inc	di			
 40655 000075E6 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40656 000075E8 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40657 000075EA 48                      	db  48h			;dec	ax
 40658 000075EB 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40659 000075ED BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40660                                  				;NextRec:
 40661 000075F0 B104                    	db  0B1h,04h		;mov	cl,4
 40662 000075F2 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40663 000075F4 F7D0                    	db  0F7h,0D0h		;not	ax		
 40664 000075F6 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40665 000075F8 740A                    	db  74h,0Ah		;jz	short SI_ok
 40666 000075FA 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40667 000075FC 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40668 000075FE 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40669 00007600 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40670                                  				;or	si,0FFF0H
 40671                                  				;SI_ok:
 40672 00007604 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40673 00007606 F7D0                    	db  0F7h,0D0h		;not	ax
 40674 00007608 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40675 0000760A 740A                    	db  74h,0Ah		;jz	short DI_ok
 40676 0000760C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40677 0000760E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40678 00007610 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40679 00007612 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40680                                  				;or	di,0FFF0H
 40681                                  				;DI_ok:
 40682                                  
 40683                                  size_scan_patch2 equ $-scan_patch2
 40684                                  
 40685                                  scan_patch3: ; label byte
 40686                                  
 40687 00007616 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40688 00007618 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40689 0000761A 48                      	db  48h			;dec	ax
 40690 0000761B 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40691 0000761D 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40692 0000761F BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40693 00007622 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40694 00007625 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40695 00007627 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40696 00007629 47                      	db  47h			;inc	di			
 40697 0000762A 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40698 0000762C 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40699 0000762E 48                      	db  48h			;dec	ax
 40700 0000762F 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40701 00007631 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40702                                  				;NextRec:
 40703 00007634 B104                    	db  0B1h,04h		;mov	cl,4
 40704 00007636 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40705 00007638 F7D0                    	db  0F7h,0D0h		;not	ax		
 40706 0000763A D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40707 0000763C 7409                    	db  74h,09h		;jz	short SI_ok
 40708 0000763E 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40709 00007640 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40710 00007642 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40711 00007644 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40712                                  				;SI_ok:
 40713 00007647 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40714 00007649 F7D0                    	db  0F7h,0D0h		;not	ax
 40715 0000764B D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40716 0000764D 7409                    	db  74h,09h		;jz	short DI_ok
 40717 0000764F 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40718 00007651 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40719 00007653 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40720 00007655 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40721                                  				;DI_ok:
 40722                                  
 40723                                  size_scan_patch3 equ $-scan_patch3
 40724                                  
 40725                                  scan_com: ; label byte
 40726                                  
 40727 00007658 AC                      	db  0ACh		;lodsb			
 40728 00007659 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40729 0000765B 4E                      	db  4Eh			;dec	si
 40730 0000765C AD                      	db  0ADh		;lodsw			
 40731 0000765D 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40732 0000765F 46                      	db  46h			;inc	si		
 40733 00007660 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40734 00007662 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40735 00007664 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40736 00007666 7506                    	db  75h,06h		;jne	short TryEnum
 40737 00007668 AC                      	db  0ACh		;lodsb				
 40738 00007669 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40739 0000766B EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40740                                  				;TryEnum:
 40741 0000766E 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40742 00007670 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40743 00007672 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40744                                  				;TryNext:
 40745 00007674 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40746 00007676 A801                    	db  0A8h,01h		;test	al,1			
 40747                                  ;	db  74h,0BAh		;jz	short NextRec			
 40748                                  
 40749                                  size_scan_com	equ	$-scan_com
 40750                                  
 40751                                  ;-----------------------------------------------------------------------
 40752                                  
 40753                                  ; 23/05/2019 - Retro DOS v4.0
 40754                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40755                                  
 40756                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40757                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40758                                  
 40759                                  ExePatch:
 40760 00007678 E80600                  	call	ExePackPatch
 40761 0000767B 36FF16[1412]            	call	word [ss:RationalPatchPtr]
 40762 00007680 C3                      	retn
 40763                                  
 40764                                  ;-----------------------------------------------------------------------
 40765                                  ;
 40766                                  ; Procedure Name 	: ExePackPatch
 40767                                  ;
 40768                                  ; Inputs	 	: DS 			-> DOSDATA
 40769                                  ;			  ES:0 			-> read in image
 40770                                  ;			  ax:cx = start cs:ip of program
 40771                                  ; Output		:		
 40772                                  ;
 40773                                  ;	1. If ES <= 0fffh
 40774                                  ;	   2. if exepack signature ('RB') found
 40775                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40776                                  ;	       	 4. if rest of the code & checksum compares
 40777                                  ;	  	    5. overlay buggy code with code in 
 40778                                  ;		       doscode:str1.
 40779                                  ;		 6. endif
 40780                                  ;	      7. endif
 40781                                  ;	   8. endif
 40782                                  ;	9. endif
 40783                                  ;
 40784                                  ;
 40785                                  ; Uses			: NONE
 40786                                  ;
 40787                                  ;-----------------------------------------------------------------------
 40788                                  		
 40789                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40790                                  	; 23/05/2019 - Retro DOS v4.0	
 40791                                  ExePackPatch:
 40792 00007681 53                      	push	bx
 40793 00007682 8CC3                    	mov	bx,es			; bx has load segment
 40794 00007684 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40795 00007688 7602                    	jbe	short ep_cont		; N: 
 40796 0000768A 5B                      	pop	bx			; Y: no need to patch
 40797 0000768B C3                      	retn
 40798                                  ep_cont:
 40799 0000768C 1E                      	push	ds
 40800 0000768D 06                      	push	es
 40801 0000768E 50                      	push	ax
 40802 0000768F 51                      	push	cx
 40803 00007690 56                      	push	si
 40804 00007691 57                      	push	di
 40805                                  	
 40806                                  		; M033 - start
 40807                                  		; exepacked programs have an IP of 12h (>=2)
 40808                                  
 40809 00007692 83E902                  	sub	cx,2			; Q: is IP >=2 
 40810 00007695 7303                    	jnb	short epp_1		; N: exit
 40811 00007697 E9C500                  	jmp	ep_notpacked
 40812                                  					; ax:cx now points to location of
 40813                                  					; 'RB' if this is an exepacked file.
 40814                                  		; M033 - end
 40815                                  epp_1:
 40816 0000769A 89CF                    	mov	di,cx
 40817 0000769C 8EC0                    	mov	es,ax
 40818 0000769E 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40819                                  					; unpack_offset
 40820                                  
 40821 000076A3 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40822                                  	;ljne	ep_notpacked
 40823 000076A8 7403                    	je	short epp_2
 40824 000076AA E9B200                  	jmp	ep_notpacked
 40825                                  epp_2:
 40826 000076AD 0E                      	push	cs
 40827 000076AE 1F                      	pop	ds			; set ds to cs
 40828                                  
 40829                                  	;add	di,6Ch
 40830 000076AF 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40831                                  					;          file where we hope to find
 40832                                  					;	   scan string. 
 40833                                  
 40834 000076B2 E8B200                  	call	chk_common_str		; check for match
 40835                                  
 40836 000076B5 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40837                                  					; N: check at patch2_offset
 40838                                  					; Y: check for rest of patch string
 40839 000076B7 BE[8E75]                	mov	si,scan_patch1
 40840                                  					; ds:si -> scan string 
 40841 000076BA 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40842                                  
 40843                                  	;add	di,28h
 40844                                  	; 07/12/2022
 40845 000076BF 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40846                                  					;          file where we hope to find
 40847                                  					;	   scan string. 
 40848                                  	;mov	cx,68
 40849 000076C2 B94400                  	mov	cx,size_scan_patch1
 40850                                  	;mov	bx,142
 40851 000076C5 BB8E00                  	mov	bx,CHKSUM1_LEN
 40852                                  	;mov	ax,0EF4Eh
 40853 000076C8 B84EEF                  	mov	ax,PATCH1_CHKSUM
 40854 000076CB E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40855 000076CE 7208                    	jc	short ep_done1		; Q: did we pass the test
 40856                                  					; N: exit
 40857                                  					; Y: overlay code with new 
 40858 000076D0 BE[2875]                	mov	si,str1
 40859                                  	;mov	cx,102
 40860 000076D3 B96600                  	mov	cx,size_str1
 40861                                  	
 40862 000076D6 F3A4                    	rep	movsb
 40863                                  ep_done1:
 40864 000076D8 E98400                  	jmp	ep_done
 40865                                  
 40866                                  ep_chkpatch2:
 40867                                  	;mov	di,76h
 40868 000076DB BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40869                                  					; in another version of unpack
 40870 000076DE E88600                  	call	chk_common_str		; check for match
 40871                                  
 40872 000076E1 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40873                                  					; N: check for patch3_offset
 40874                                  					; Y: check for rest of patch string
 40875                                  
 40876 000076E3 BE[D275]                	mov	si,scan_patch2
 40877                                  					; ds:si -> scan string 
 40878                                  	;mov	di,32h
 40879 000076E6 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40880                                  					;          file where we hope to find
 40881                                  	;mov	cx,68			;	   scan string. 
 40882 000076E9 B94400                  	mov	cx,size_scan_patch2
 40883                                  	;mov	bx,140
 40884 000076EC BB8C00                  	mov	bx,CHKSUM2_LEN
 40885                                  	;mov	ax,78B2h
 40886 000076EF B8B278                  	mov	ax,PATCH2_CHKSUM
 40887 000076F2 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40888                                  
 40889                                  					; M046 - Start
 40890                                  					; Q: did we pass the test
 40891 000076F5 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40892                                  					; N: try with a different chksum
 40893                                  
 40894                                  
 40895 000076F7 BE[D275]                	mov	si,scan_patch2
 40896                                  					; ds:si -> scan string 
 40897                                  	;mov	cx,68
 40898 000076FA B94400                  	mov	cx,size_scan_patch2
 40899                                  	;mov	bx,129
 40900 000076FD BB8100                  	mov	bx,CHKSUM2A_LEN
 40901                                  	;mov	ax,1C47h
 40902 00007700 B8471C                  	mov	ax,PATCH2A_CHKSUM
 40903 00007703 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40904                                  					; Q: did we pass the test
 40905 00007706 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40906                                  					; Y: overlay code with new 
 40907                                  						
 40908                                  ep_patchcode2:			       	; M046 - End
 40909 00007708 BE[2875]                	mov	si,str1
 40910                                  	;mov	cx,3
 40911 0000770B B90300                  	mov	cx,first_stop
 40912 0000770E F3A4                    	rep	movsb
 40913 00007710 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40914 00007713 AB                      	stosw
 40915 00007714 83C602                  	add	si,2
 40916                                  	;mov	cx,20
 40917 00007717 B91400                  	mov	cx,second_stop
 40918 0000771A F3A4                    	rep	movsb
 40919 0000771C AB                      	stosw				; put in dec ax and nop
 40920 0000771D 83C602                  	add	si,2
 40921                                  	;mov	cx,75
 40922 00007720 B94B00                  	mov	cx,last_stop
 40923 00007723 F3A4                    	rep	movsb
 40924 00007725 EB38                    	jmp	short ep_done
 40925                                  
 40926                                  ep_chkpatch3:
 40927                                  	;mov	di,74h
 40928 00007727 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40929                                  					; in another version of unpack
 40930 0000772A E83A00                  	call	chk_common_str		; check for match
 40931                                  
 40932 0000772D 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40933                                  					; N: exit
 40934                                  					; Y: check for rest of patch string
 40935 0000772F BE[1676]                	mov	si,scan_patch3
 40936                                  					; ds:si -> scan string 
 40937                                  	;mov	di,32h
 40938 00007732 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40939                                  					;          file where we hope to find
 40940                                  					;	   scan string. 
 40941                                  	;mov	cx,66
 40942 00007735 B94200                  	mov	cx,size_scan_patch3
 40943                                  	;mov	bx,139
 40944 00007738 BB8B00                  	mov	bx,CHKSUM3_LEN
 40945                                  	;mov	ax,4EDEh
 40946 0000773B B8DE4E                  	mov	ax,PATCH3_CHKSUM
 40947 0000773E E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 40948 00007741 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 40949                                  					; N: exit
 40950                                  					; Y: overlay code with new 
 40951 00007743 BE[2875]                	mov	si,str1
 40952                                  	;mv	cx,3
 40953 00007746 B90300                  	mov	cx,first_stop
 40954 00007749 F3A4                    	rep	movsb
 40955 0000774B B048                    	mov	al,48h			; al = opcode for dec ax
 40956 0000774D AA                      	stosb
 40957 0000774E 83C602                  	add	si,2
 40958                                  	;mov	cx,20
 40959 00007751 B91400                  	mov	cx,second_stop
 40960 00007754 F3A4                    	rep	movsb
 40961 00007756 AA                      	stosb				; put in dec ax
 40962 00007757 83C602                  	add	si,2
 40963                                  	;mov	cx,75
 40964 0000775A B94B00                  	mov	cx,last_stop
 40965 0000775D F3A4                    	rep	movsb
 40966                                  
 40967                                  ep_notpacked:
 40968                                  	;stc
 40969                                  ep_done:
 40970 0000775F 5F                      	pop	di
 40971 00007760 5E                      	pop	si
 40972 00007761 59                      	pop	cx
 40973 00007762 58                      	pop	ax
 40974 00007763 07                      	pop	es
 40975 00007764 1F                      	pop	ds
 40976 00007765 5B                      	pop	bx
 40977 00007766 C3                      	retn
 40978                                  
 40979                                  ;-------------------------------------------------------------------------
 40980                                  ;
 40981                                  ; 	Procedure Name	: chk_common_str
 40982                                  ;
 40983                                  ;	Input		: DS = DOSCODE
 40984                                  ;			; ES:DI points to string in packed file
 40985                                  ;
 40986                                  ;	Output		; Z if match else NZ
 40987                                  ;
 40988                                  ;-------------------------------------------------------------------------
 40989                                  
 40990                                  	; 23/05/2019 - Retro DOS v4.0
 40991                                  chk_common_str:
 40992 00007767 BE[5876]                	mov	si,scan_com
 40993                                  					; ds:si -> scan string 
 40994                                  	;mov	cx,32
 40995 0000776A B92000                  	mov	cx,size_scan_com
 40996                                  
 40997 0000776D F3A6                    	repe	cmpsb	       
 40998                                  
 40999                                  					; M046 - start
 41000                                  	; a fourth possible version of these exepacked programs have a 
 41001                                  	; 056h instead of 06Bh. See scan_com above
 41002                                  	;
 41003                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41004                                  	;
 41005                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41006                                  	; we shall try to match the rest of the string
 41007                                  	;
 41008                                  
 41009 0000776F 7409                    	jz	short ccs_done
 41010 00007771 26807DFF56              	cmp	byte [es:di-1],56h
 41011 00007776 7502                    	jnz	short ccs_done
 41012                                  
 41013 00007778 F3A6                    	repe	cmpsb	    
 41014                                  ccs_done:				; M046 - end
 41015 0000777A C3                      	retn
 41016                                  
 41017                                  ;-------------------------------------------------------------------------
 41018                                  ;
 41019                                  ;	Procedure Name	: chk_patchsum
 41020                                  ;
 41021                                  ;	Input		: DS:SI -> string we're looking for
 41022                                  ;			: ES:DI -> offset in packed file
 41023                                  ;			: CX 	= scan length
 41024                                  ;			: BX	= length of check sum
 41025                                  ;			: AX 	= value of check sum
 41026                                  ;
 41027                                  ;	Output		: if patch & check sum compare
 41028                                  ;				NC
 41029                                  ;			  else
 41030                                  ;				CY
 41031                                  ;
 41032                                  ;	Uses		: AX, BX, CX, SI
 41033                                  ;
 41034                                  ;-------------------------------------------------------------------------
 41035                                  
 41036                                  	; 23/05/2019 - Retro DOS v4.0
 41037                                  chk_patchsum:
 41038 0000777B 57                      	push	di
 41039                                  
 41040 0000777C F3A6                    	repe	cmpsb			   
 41041                                  
 41042 0000777E 751A                    	jnz	short cp_fail		; Q: does the patch match
 41043                                  					; N: exit
 41044                                  					; Y:	
 41045                                  
 41046                                  		; we do a check sum starting from the location of the 
 41047                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41048                                  		; unpacking code.
 41049                                  
 41050 00007780 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41051 00007785 89D9                    	mov	cx,bx			; cx = length of check sum
 41052                                  
 41053 00007787 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41054 00007789 31C0                    	xor	ax,ax
 41055                                  ep_chksum:
 41056 0000778B 260305                  	add	ax,[es:di]
 41057 0000778E 83C702                  	add	di,2
 41058 00007791 E2F8                    	loop	ep_chksum
 41059                                  
 41060 00007793 5F                      	pop	di			; restore di
 41061                                  
 41062 00007794 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41063 00007796 7502                    	jne	short cp_fail		; N: exit
 41064                                  					; Y: 
 41065 00007798 F8                      	clc	
 41066 00007799 C3                      	retn
 41067                                  
 41068                                  cp_fail:
 41069 0000779A F9                      	stc
 41070 0000779B C3                      	retn
 41071                                  
 41072                                  ; M020 : BEGIN
 41073                                  ;
 41074                                  ;----------------------------------------------------------------------------
 41075                                  ;
 41076                                  ; procedure : RationalPatch
 41077                                  ;
 41078                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41079                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41080                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41081                                  ;
 41082                                  ; THE BUG is in the following code sequence:
 41083                                  ;
 41084                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41085                                  ;90		even				; word align
 41086                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41087                                  ;e8 xx xx	call	set_A20			; enable A20
 41088                                  ;
 41089                                  ; This patch routine replaces the mov & the loop with a far call into a
 41090                                  ; routine in DOS data segment which is in low memory (because A20 line
 41091                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41092                                  ; a mov & loop.
 41093                                  ;
 41094                                  ; Identification of Buggy Rational EXE
 41095                                  ; ====================================
 41096                                  ;
 41097                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41098                                  ;
 41099                                  ; OFFSET				Contains
 41100                                  ; ------				--------
 41101                                  ; 0000h			100 times Version number in binary
 41102                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41103                                  ;
 41104                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41105                                  ;
 41106                                  ; 002ah			offset where version number is stored in ASCII
 41107                                  ;				e.g. '3.48A'
 41108                                  ;
 41109                                  ; 0030h			offset of copyright string. Copyright strings either
 41110                                  ;			start with "DOS/16M Copyright...." or
 41111                                  ;			"Copyright.....". The string contains
 41112                                  ;			"Rational Systems, Inc."
 41113                                  ;
 41114                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41115                                  ;				from the program image
 41116                                  ; 0016h			word : size of buggy code segment
 41117                                  ;
 41118                                  ;	Buggy code is definite to start after offset 200h in its segment
 41119                                  ;
 41120                                  ;----------------------------------------------------------------------------
 41121                                  
 41122                                  ; 23/05/2019 - Retro DOS v4.0
 41123                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41124                                  
 41125                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41126                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41127                                  
 41128                                  RScanPattern1:
 41129 0000779C 000020000000400001-     	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41129 000077A5 00                 
 41130                                  
 41131                                  RLen1 equ $ - RScanPattern1
 41132                                  
 41133                                  RScanPattern2:
 41134 000077A6 8B0E100090E2FEE8        	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41135                                  
 41136                                  RLen2 equ $ - RScanPattern2
 41137                                  
 41138                                  RScanPattern3:
 41139 000077AE 8B0E1000E2FEE8          	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41140                                  
 41141                                  RLen3 equ $ - RScanPattern2
 41142                                  
 41143                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41144                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41145                                  
 41146                                  ;----------------------------------------------------------------------------
 41147                                  ;
 41148                                  ; INPUT : ES = segment where program got loaded
 41149                                  ;
 41150                                  ;----------------------------------------------------------------------------
 41151                                  
 41152                                  RationalPatch:
 41153 000077B5 FC                      	cld
 41154 000077B6 50                      	push	ax
 41155 000077B7 53                      	push	bx
 41156 000077B8 51                      	push	cx
 41157 000077B9 52                      	push	dx
 41158 000077BA 56                      	push	si
 41159 000077BB 57                      	push	di
 41160 000077BC 06                      	push	es
 41161 000077BD 1E                      	push	ds			; we use all of them
 41162 000077BE BF0A00                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41163 000077C1 0E                      	push	cs
 41164 000077C2 1F                      	pop	ds
 41165                                  	
 41166 000077C3 BE[9C77]                	mov	si,RScanPattern1
 41167                                  	;mov	cx,10
 41168 000077C6 B90A00                  	mov	cx,RLen1
 41169 000077C9 F3A6                    	rep	cmpsb			; do we have the pattern ?
 41170 000077CB 754A                    	jne	short rpexit
 41171 000077CD 26A10000                	mov	ax,[es:0]
 41172 000077D1 3D5C01                  	cmp	ax,348			; is it a buggy version ?
 41173 000077D4 7241                    	jb	short rpexit
 41174 000077D6 3D7F01                  	cmp	ax,383			; is it a buggy version
 41175 000077D9 773C                    	ja	short rpexit
 41176                                  
 41177 000077DB E85A00                  	call	VerifyVersion
 41178 000077DE 7537                    	jne	short rpexit
 41179                                  
 41180 000077E0 268B0E1600              	mov	cx,[es:16h]		; Length of buggy code seg
 41181 000077E5 81E90002                	sub	cx,200h			; Length we search (we start
 41182                                  					;  at offset 200h)
 41183 000077E9 268E062000              	mov	es,[es:20h]		; es=buggy code segment
 41184 000077EE BE[A677]                	mov	si,RScanPattern2
 41185                                  	;mov	dx,8	
 41186 000077F1 BA0800                  	mov	dx,RLen2
 41187 000077F4 E82900                  	call	ScanCodeSeq		; look for code seq with nop
 41188 000077F7 740B                    	jz	short rpfound
 41189                                  
 41190 000077F9 BE[AE77]                	mov	si,RScanPattern3
 41191                                  	;mov	dx,15
 41192 000077FC BA0F00                  	mov	dx,RLen3
 41193 000077FF E81E00                  	call	ScanCodeSeq		; look for code seq w/o nop
 41194 00007802 7513                    	jnz	short rpexit
 41195                                  
 41196                                  rpfound:
 41197                                  	
 41198                                  ;	we set up a far call into DOS data
 41199                                  ;	dx has the length of the code seq we were searching for
 41200                                  
 41201 00007804 B09A                    	mov	al,9Ah			; far call opcode
 41202 00007806 AA                      	stosb
 41203 00007807 B8[1612]                	mov	ax,RatBugCode
 41204 0000780A AB                      	stosw
 41205 0000780B 8CD0                    	mov	ax,ss
 41206 0000780D AB                      	stosw
 41207 0000780E 89D1                    	mov	cx,dx
 41208 00007810 83E906                  	sub	cx,6			; filler (with NOPs)
 41209 00007813 B090                    	mov	al,90h
 41210 00007815 F3AA                    	rep	stosb
 41211                                  rpexit:
 41212 00007817 1F                      	pop	ds
 41213 00007818 07                      	pop	es
 41214 00007819 5F                      	pop	di
 41215 0000781A 5E                      	pop	si
 41216 0000781B 5A                      	pop	dx
 41217 0000781C 59                      	pop	cx
 41218 0000781D 5B                      	pop	bx
 41219 0000781E 58                      	pop	ax
 41220 0000781F C3                      	retn
 41221                                  
 41222                                  ; M020 END
 41223                                  
 41224                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41225                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41226                                  
 41227                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41228                                  
 41229                                  ;----------------------------------------------------------------------------
 41230                                  ;
 41231                                  ; ScanCodeSeq
 41232                                  ;
 41233                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41234                                  ;
 41235                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41236                                  ;
 41237                                  ;----------------------------------------------------------------------------
 41238                                  
 41239                                  ScanCodeSeq:
 41240                                  	; 17/12/2022
 41241 00007820 BF0002                  	mov	di,200h
 41242                                  ;ScanCodeSeq_di:
 41243 00007823 51                      	push	cx
 41244 00007824 29D1                    	sub	cx,dx
 41245 00007826 41                      	inc	cx
 41246                                  	; 17/12/2022
 41247                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41248                                  	;mov	di,200h
 41249                                  scsagain:
 41250 00007827 56                      	push	si
 41251 00007828 57                      	push	di
 41252 00007829 51                      	push	cx
 41253 0000782A 89D1                    	mov	cx,dx
 41254 0000782C F3A6                    	rep	cmpsb
 41255 0000782E 59                      	pop	cx
 41256 0000782F 5F                      	pop	di
 41257 00007830 5E                      	pop	si
 41258 00007831 7403                    	je	short scsfound
 41259 00007833 47                      	inc	di
 41260 00007834 E2F1                    	loop	scsagain
 41261                                  scsfound:
 41262 00007836 59                      	pop	cx
 41263                                  vvexit:		; 18/12/2022
 41264 00007837 C3                      	retn
 41265                                  
 41266                                  
 41267                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41268                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41269                                  
 41270                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41271                                  
 41272                                  ;----------------------------------------------------------------------------
 41273                                  ;
 41274                                  ; VerifyVersion
 41275                                  ;
 41276                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41277                                  ; from ES:2A.
 41278                                  ;
 41279                                  ;       Entry: AX = binary version number 
 41280                                  ;       Exit : Z flag set if version numbers match
 41281                                  ;
 41282                                  ;----------------------------------------------------------------------------
 41283                                  
 41284                                  VerifyVersion:
 41285 00007838 268B362A00              	mov	si,[es:2Ah]		; offset of version number
 41286                                  					;  in ascii
 41287 0000783D B30A                    	mov	bl,10
 41288 0000783F 83C603                  	add	si,3			; point to last digit
 41289                                  
 41290 00007842 E80E00                  	call	VVDigit
 41291 00007845 75F0                    	jne	short vvexit
 41292 00007847 E80900                  	call	VVDigit
 41293 0000784A 75EB                    	jne	short vvexit
 41294 0000784C 26803C2E                	cmp	byte [es:si],'.' ; 2Eh
 41295 00007850 75E5                    	jne	short vvexit
 41296 00007852 4E                      	dec	si
 41297                                  	;call	VVDigit
 41298                                  	; 18/12/2022
 41299                                  	;jmp	short VVDigit
 41300                                  ;vvexit:
 41301                                  	;retn
 41302                                  VVDigit:
 41303 00007853 F6F3                    	div	bl
 41304 00007855 80C430                  	add	ah,'0' ; 30h
 41305 00007858 4E                      	dec	si
 41306 00007859 26386401                	cmp	[es:si+1],ah
 41307 0000785D B400                    	mov	ah,0			; do not xor or sub we need Z
 41308 0000785F C3                      	retn
 41309                                  
 41310                                  ;---------------------------------------------------------------------------
 41311                                  ;
 41312                                  ;	M068
 41313                                  ;
 41314                                  ; 	Procedure Name	: IsCopyProt
 41315                                  ;
 41316                                  ;	Inputs		: DS:100 -> start of com file just read in
 41317                                  ;
 41318                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41319                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41320                                  ;			  copy protect scheme that relies on the A20 line
 41321                                  ;			  being turned off for it's scheme to work.
 41322                                  ;
 41323                                  ;			  Note: The int 21 function dispatcher will turn 
 41324                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41325                                  ;				and dec the A20OFF_COUNT before	iretting 
 41326                                  ;				to the user. 
 41327                                  ;
 41328                                  ;	Uses		: ES, DI, SI, CX
 41329                                  ;
 41330                                  ;---------------------------------------------------------------------------
 41331                                  
 41332                                  ; 23/05/2019 - Retro DOS v4.0
 41333                                  
 41334                                  CPStartOffset	EQU	0175h
 41335                                  CPID1Offset	EQU	011Bh
 41336                                  CPID2Offset	EQU	0173h
 41337                                  CPID3Offset	EQU	0146h
 41338                                  CPID4Offset	EQU	0124h
 41339                                  ID1		EQU	05343h
 41340                                  ID2		EQU	05044h
 41341                                  ID3		EQU	0F413h
 41342                                  ID4		EQU	08000h
 41343                                  
 41344                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41345                                  
 41346                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41347                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41348                                  
 41349                                  CPScanPattern:
 41350 00007860 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41351 00007864 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41352 00007868 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41353 0000786E 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41354 00007872 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41355 00007875 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41356                                  
 41357                                  CPSPlen	EQU $ - CPScanPattern
 41358                                  
 41359                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41360                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41361                                  
 41362                                  IsCopyProt:
 41363 00007878 813E1B014353            	cmp	word [CPID1Offset],ID1
 41364 0000787E 752D                    	jne	short CP_done
 41365                                  
 41366 00007880 813E73014450            	cmp	word [CPID2Offset],ID2
 41367 00007886 7525                    	jne	short CP_done
 41368                                  
 41369 00007888 813E460113F4            	cmp	word [CPID3Offset],ID3
 41370 0000788E 751D                    	jne	short CP_done
 41371                                  
 41372 00007890 813E24010080            	cmp	word [CPID4Offset],ID4
 41373 00007896 7515                    	jne	short CP_done
 41374                                  
 41375 00007898 0E                      	push	cs
 41376 00007899 07                      	pop	es
 41377 0000789A BF[6078]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41378                                  
 41379 0000789D BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41380                                  					; of pattern
 41381                                  
 41382 000078A0 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41383 000078A3 F3A6                    	repe	cmpsb
 41384 000078A5 7506                    	jnz	short CP_done
 41385                                  
 41386 000078A7 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41387                                  CP_done:
 41388 000078AD C3                      	retn
 41389                                  	
 41390                                  ;DOSCODE ENDS
 41391                                  
 41392                                  	;END
 41393                                  
 41394                                  ;----------------------------------------------------------------------------
 41395                                  
 41396                                  ;align 2 ; 05/09/2018 (Error!)
 41397                                  
 41398                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41399                                  ;align 16 ; 08/09/2018 (OK.)
 41400                                  align 2
 41401                                  
 41402                                  ; 06/08/2018 - Retro DOS v3.0
 41403                                  ;============================================================================
 41404                                  ; MSINIT.ASM
 41405                                  ;============================================================================
 41406                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41407                                  ;
 41408                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41409                                  ;
 41410                                  	; 15/07/2018 - Retro DOS v3.0
 41411                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41412                                  
 41413                                  ; temp iret instruction
 41414                                  
 41415                                  
 41416                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41417                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41418                                  
 41419                                  initiret: ; MSDOS 6.0
 41420                                  SYSBUF:
 41421                                  ;IRETT: ; 06/05/2019
 41422 000078AE CF                      	iret
 41423                                  
 41424                                  ; 22/04/2019 - Retro DOS v4.0
 41425                                  
 41426                                  ; pointer to the BIOS data segment that will be available just to the
 41427                                  ; initialization code
 41428                                  
 41429 000078AF 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41430                                  
 41431                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41432                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41433                                  
 41434                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41435                                  
 41436                                  ParaRound:
 41437 000078B1 83C00F                  	add	ax, 15
 41438 000078B4 D1D8                    	rcr	ax, 1
 41439 000078B6 D1E8                    	shr	ax, 1
 41440 000078B8 D1E8                    	shr	ax, 1
 41441 000078BA D1E8                    	shr	ax, 1
 41442 000078BC C3                      	retn
 41443                                  
 41444                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41445                                  
 41446                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41447                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41448                                  	
 41449                                  	; 30/05/2019
 41450                                  	; 22/04/2019 - Retro DOS v4.0
 41451                                  	; 07/07/2018 - Retro DOS v3.0
 41452                                  	; Retro DOS v2.0 - 03/03/2018
 41453                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41454                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41455                                  DOSINIT:
 41456                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41457                                  	;
 41458                                  	; Far call from SYSINIT
 41459                                  	; DX = Memory size in paragraphs
 41460                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41461                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41462                                  	;
 41463                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41464                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41465                                  
 41466 000078BD FA                              CLI
 41467 000078BE FC                              CLD
 41468                                  
 41469                                  	; 03/11/2022
 41470                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41471                                  	
 41472                                  	; 17/12/2022
 41473                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41474                                  	;push	dx ; =*=		; save parameters from BIOS
 41475                                  	
 41476 000078BF 56                      	push	si
 41477 000078C0 1E                      	push	ds
 41478 000078C1 57                      	push	di			;save di (ptr to BiosComBlock)
 41479                                  
 41480 000078C2 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41481                                  
 41482                                  ; First, move the DOS data segment to its final location in low memory
 41483                                  
 41484                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41485                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41486 000078C4 B8[767D]                	mov	ax,MEMSTRT		; get offset of end of init code
 41487                                  
 41488                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41489                                  	;and	ax,~15	; 0FFF0h	; boundary
 41490                                  
 41491                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41492                                  					; code segment
 41493                                  
 41494                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41495 000078C7 83C00F                  	add	ax,15			; round to nearest paragraph
 41496 000078CA 83E0F0                  	and	ax,~15			; boundary
 41497                                  
 41498 000078CD 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41499                                  					; code segment
 41500                                  	; 05/12/2022
 41501                                  	; 30/04/2019 - Retro DOS v4.0
 41502                                  	;xor	si,si
 41503                                  	
 41504 000078CF 8CC8                    	mov	ax,cs
 41505 000078D1 8ED8                    	mov	ds,ax			; ds = current code segment
 41506                                  					; DS:SI now points to dosdata
 41507                                  
 41508                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41509                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41510                                  					;  BData segment. Cannot use
 41511                                  					;  getdseg macro here!!!
 41512                                  	; 17/12/2022
 41513 000078D3 8E06[AF78]              	mov	es,[InitBioDataSeg]
 41514                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41515                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41516                                  
 41517                                  	;mov	es,[es:3]
 41518 000078D7 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41519                                  
 41520 000078DC 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41521                                  
 41522                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41523                                  	;mov	cx,4976  ; 25/05/2019
 41524                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41525                                  	;mov	cx,4962
 41526                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41527 000078DE B96213                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41528 000078E1 F3A4                    	rep	movsb			; move data to final location
 41529                                  	
 41530 000078E3 5F                      	pop	di			; restore ptr to BiosComBlock
 41531 000078E4 1F                      	pop	ds			; restore parms from BIOS
 41532 000078E5 5E                      	pop	si
 41533                                  	; 17/12/2022
 41534                                  	;pop	dx ; 30/05/2019	
 41535                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41536                                  	;pop	dx ; =*=		
 41537                                  
 41538 000078E6 06                      	push	es
 41539 000078E7 1E                      	push	ds
 41540 000078E8 07                      	pop	es			; es:si -> device chain
 41541 000078E9 1F                      	pop	ds			; ds points to dosdata
 41542                                  
 41543                                  ;SR;
 41544                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41545                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41546                                  ;lie table handling for device drivers. This can be expanded later on to
 41547                                  ;establish a communication block from the BIOS to the DOS.
 41548                                  
 41549                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41550                                  	;mov	[1042h],bx
 41551 000078EA 893E[4010]              	mov	[BiosDataPtr],di
 41552 000078EE 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41553                                  
 41554 000078F2 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41555                                  
 41556                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41557                                  
 41558 000078F7 2E8C1E[BD51]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41559 000078FC 2E8C1E[C151]            	mov	[cs:LowInt24Addr+2],ds
 41560 00007901 2E8C1E[C551]            	mov	[cs:LowInt28Addr+2],ds
 41561                                  
 41562                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41563                                  	;mov	[584h],sp
 41564                                  	;mov	[586h],ss
 41565 00007906 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41566 0000790A 8926[8405]              	mov	[USER_SP],sp
 41567 0000790E 8C16[8605]              	mov	[USER_SS],ss
 41568                                  
 41569 00007912 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41570 00007914 8ED0                    	mov	ss,ax
 41571                                  
 41572                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41573                                  	;mov	sp,offset dosdata:dskstack
 41574 00007916 BC[2009]                	mov	sp,DSKSTACK
 41575                                  
 41576                                  ;M023
 41577                                  ; Init patch ptrs to default values
 41578                                  
 41579                                  	;mov	word [1212h],RetExePatch
 41580                                  	;mov	word [1214h],RetExePatch
 41581                                  	;mov	word [61h],RetExePatch
 41582 00007919 C706[1212][4463]        	mov	word [FixExePatch],RetExePatch	; M023
 41583 0000791F C706[1412][4463]        	mov	word [RationalPatchPtr],RetExePatch ; M023
 41584 00007925 C706[6100][4463]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41585                                  
 41586                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41587                                  %if 0	
 41588                                  
 41589                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41590                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41591                                  ; running in the HMA.
 41592                                  
 41593                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41594                                  	cmp	al,2		;   386 or later?
 41595                                  	mov	ax,Rational386Patch
 41596                                  	jae	short di_set_patch
 41597                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41598                                  di_set_patch:
 41599                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41600                                  
 41601                                  %endif
 41602                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41603                                  
 41604 0000792B 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41605                                  
 41606                                  	; ax now holds segment of DOS code
 41607 0000792D A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41608                                  
 41609 00007930 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41610 00007934 8936[4800]              	mov	word [NULDEV],si
 41611                                  ;SR;
 41612                                  ; There are some locations in the Win386 instance data structures
 41613                                  ; which need to be set up with the DOS data segment. First, initialize
 41614                                  ; the segment part of the instance table pointer in the SIS.
 41615                                  
 41616                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41617 00007938 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41618                                  
 41619                                  ; Now initialize the segment part of the pointer to the data in each
 41620                                  ; instance table entry.
 41621                                  
 41622 0000793C 56                      	push	si		; preserve pointer to device chain
 41623                                  	; 18/12/2022
 41624                                  	; cx = 0
 41625 0000793D B107                    	mov	cl,7
 41626                                  	;mov	cx,7		; There are 7 entries in the instance table
 41627                                  				; M019
 41628                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41629 0000793F BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 41630                                  Instance_init_loop:
 41631 00007942 8C1C                    	mov	[si],ds		; set offset in instance entry
 41632                                  	;add	si,6
 41633 00007944 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41634 00007947 E2F9                    	loop	Instance_init_loop
 41635                                  
 41636                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41637                                  
 41638                                  	; 18/12/2022
 41639 00007949 B105                    	mov	cl,5
 41640                                  	;mov	cx,5		; There are five entries in the instance table
 41641                                  
 41642                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41643                                  	;mov	si,11EDh	; point si to segment field
 41644 0000794B BE[ED11]                	mov	si,OldInstanceJunk+6
 41645                                  OldInstance_init_loop:
 41646 0000794E 8C1C                    	mov	[si],ds		; set offset in instance entry
 41647 00007950 83C606                  	add	si,6		; move on to next entry
 41648 00007953 E2F9                    	loop	OldInstance_init_loop
 41649 00007955 5E                      	pop	si		; restore pointer to device chain
 41650                                  
 41651                                  ; End of WIN386 2.xx compatibility bullshit
 41652                                  
 41653                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41654                                  %if 0	
 41655                                     	; 30/04/2019
 41656                                  	;push	es
 41657                                  	;pop	ds
 41658                                  			; ds:si points to console device
 41659                                  
 41660                                  	; 24/04/2019 - Retro DOS v4.0
 41661                                  
 41662                                  	; 15/07/2018
 41663                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41664                                  	; (Set INT 2Ah handler address to an 'IRET')
 41665                                  
 41666                                  	; need crit vector inited to use deviocall
 41667                                  	;push	ds			; preserve segment of device chain
 41668                                  	push	es ; 30/04/2019
 41669                                  
 41670                                  %endif
 41671                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41672 00007956 06                      	push	es
 41673                                  	; 17/12/2022
 41674                                  	;pop	ds
 41675                                  	;push	ds
 41676                                  
 41677 00007957 31C0                    	xor	ax,ax
 41678 00007959 8ED8                    	mov	ds,ax			; point DS to int vector table
 41679 0000795B B8[AE78]                	mov	ax,initiret
 41680                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41681 0000795E A3A800                  	mov	[addr_int_ibm],ax
 41682 00007961 8CC8                    	mov	ax,cs
 41683                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41684 00007963 A3AA00                  	mov	[addr_int_ibm+2],ax
 41685 00007966 1F                      	pop	ds			; restore segment of device chain
 41686                                  
 41687 00007967 E81F02                  	call	CHARINIT  		; initialize console driver
 41688 0000796A 56                      	push	si			; save pointer to header
 41689                                  
 41690 0000796B 16                      	push	ss			; move pointer to dos data...
 41691 0000796C 07                      	pop	es			; ...into ES
 41692                                  
 41693                                  	;initialize sft for file 0 (CON)
 41694                                  
 41695                                          ; 07/07/2018 - Retro DOS v3.0
 41696                                  	; 24/04/2019 - Retro DOS v4.0
 41697                                  	;mov	di,SFTABL+6 
 41698 0000796D BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41699 00007970 B80300                          MOV     AX,3
 41700 00007973 AB                              STOSW           	; Refcount
 41701 00007974 FEC8                            DEC     AL
 41702 00007976 AB                              STOSW           	; Access rd/wr, compatibility
 41703 00007977 30C0                            XOR     AL,AL
 41704 00007979 AA                              STOSB           	; attribute
 41705                                  	;mov	al,0C3h
 41706 0000797A B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41707 0000797C AB                      	STOSW			; flags
 41708 0000797D 89F0                            mov	ax,si
 41709 0000797F AB                              stosw			; device pointer in devptr	
 41710 00007980 8CD8                            mov	ax,ds
 41711 00007982 AB                      	stosw
 41712 00007983 31C0                    	xor	ax,ax	; 0
 41713 00007985 AB                      	stosw			; firclus
 41714 00007986 AB                      	stosw			; time
 41715 00007987 AB                      	stosw			; date
 41716 00007988 48                      	dec	ax	; -1
 41717 00007989 AB                      	stosw			; size
 41718 0000798A AB                      	stosw
 41719 0000798B 40                      	inc	ax	; 0
 41720 0000798C AB                      	stosw			; position
 41721 0000798D AB                      	stosw
 41722                                  	;add	di,7
 41723 0000798E 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41724                                  				; point at name
 41725                                  	;add	si,10
 41726 00007991 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41727                                  				; point to name
 41728 00007994 B90400                  	mov	cx,4
 41729 00007997 F3A5                    	rep	movsw		; name
 41730 00007999 B103                    	mov	cl,3
 41731 0000799B B020                    	mov	al," "
 41732 0000799D F3AA                    	rep	stosb		; extension
 41733                                  
 41734 0000799F 5E                      	pop	si		; get back pointer to header
 41735                                  
 41736                                  				; mark device as CON I/O
 41737                                  	; 15/07/2018
 41738                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41739 000079A0 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41740                                  	; 12/03/2018
 41741                                  	;mov	[ss:32h],si
 41742 000079A4 368936[3200]            	MOV     [SS:BCON],SI
 41743                                  	;mov	[ss:34h],ds
 41744 000079A9 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41745                                  
 41746                                  	; initialize each device until the clock device is found
 41747                                  
 41748                                  CHAR_INIT_LOOP:
 41749 000079AE C534                            LDS     SI,[SI]			; AUX device
 41750 000079B0 E8D601                  	call	CHARINIT 
 41751                                         	;15/07/2018
 41752                                  	;test	byte [SI+4],8
 41753 000079B3 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41754 000079B7 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41755                                  	; 12/03/2018
 41756                                  	;mov	[ss:2Eh],si
 41757 000079B9 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41758                                  	;mov	[ss:30h],ds
 41759 000079BE 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41760                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41761                                  
 41762                                  	;mov	bp,4970			; bp = pointer to free mem
 41763                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41764                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41765                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41766 000079C3 BD6213                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41767                                  
 41768 000079C6 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41769 000079CB 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41770                                  PERDRV:
 41771                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41772 000079D0 C534                            LDS	SI,[SI]			; Next device
 41773 000079D2 83FEFF                          CMP	SI,-1	; 0FFFFh
 41774 000079D5 7479                    	JZ	SHORT CONTINIT
 41775                                  
 41776 000079D7 E8AF01                          call	CHARINIT
 41777                                  
 41778                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41779                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41780                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41781                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41782                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41783                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41784                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41785                                  
 41786                                          ; 15/07/2018
 41787                                  	;test	word [SI+4],8000h		; DEVTYP
 41788                                          ; 17/12/2022
 41789                                  	;test	byte [SI+5],80h
 41790 000079DA F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41791                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41792 000079DE 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41793                                  
 41794 000079E0 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41795 000079E5 30ED                    	XOR     CH,CH
 41796                                          ; 07/07/2018
 41797                                  	;MOV	[SI+10],CL		; Number of units in name field
 41798 000079E7 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41799 000079EA 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41800 000079EF 30F6                    	XOR     DH,DH
 41801 000079F1 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41802 000079F6 1E                      	PUSH    DS
 41803 000079F7 56                              PUSH    SI
 41804 000079F8 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41805                                  
 41806                                  PERUNIT:
 41807 000079FD 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41808 000079FF 43                              INC     BX
 41809 00007A00 43                              INC     BX                      ; On to next BPB
 41810                                  	; 15/12/2022
 41811                                  	; 07/07/2018
 41812                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41813 00007A01 26885600                	MOV     [ES:BP],DL
 41814                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41815                                  	;;mov	[ES:BP+0],DL
 41816                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41817                                  
 41818                                  	;MOV	[ES:BP+1],DH
 41819 00007A05 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41820 00007A09 53                              PUSH    BX
 41821 00007A0A 51                              PUSH    CX
 41822 00007A0B 52                              PUSH    DX
 41823                                  
 41824                                          ;invoke	$SETDPB
 41825 00007A0C E83796                          CALL	_$SETDPB		; build DPB!
 41826                                  
 41827                                  	; 07/07/2018
 41828                                  	;MOV	AX,[ES:BP+2]
 41829 00007A0F 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41830                                          ; 12/03/2018
 41831 00007A13 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41832 00007A18 7604                    	JBE     SHORT NOTMAX		; N:
 41833 00007A1A 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41834                                  NOTMAX:					
 41835                                  	; set the next dpb field in the currently built bpb
 41836                                  	; and mark as never accessed
 41837                                          
 41838                                  	; 24/04/2019
 41839 00007A1E 89E8                    	mov	ax,bp			; get pointer to DPB
 41840                                  	;add	ax,33
 41841 00007A20 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41842                                  					; set seg & offset of next DPB
 41843                                  	;mov	[es:bp+25],ax
 41844 00007A23 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41845                                  	;mov	[es:bp+27],es
 41846 00007A27 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41847                                  					; mark as never accessed
 41848                                  	;mov	byte [es:bp+24],0FFh
 41849 00007A2B 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41850                                  
 41851 00007A30 5A                      	POP     DX
 41852 00007A31 59                              POP     CX
 41853 00007A32 5B                              POP     BX
 41854 00007A33 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41855 00007A35 5E                              POP     SI
 41856 00007A36 1F                              POP     DS
 41857                                  					; ds:si -> device header
 41858                                  					; store it in the corresponding dpb
 41859                                  	; 07/07/2018
 41860                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41861 00007A37 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41862                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41863 00007A3B 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41864                                  
 41865 00007A3F 1E                              PUSH    DS			; save pointer to device header
 41866 00007A40 56                              PUSH    SI
 41867 00007A41 FEC6                            INC     DH			; inc unit #
 41868 00007A43 FEC2                            INC     DL			; inc drive #
 41869 00007A45 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41870                                          ;add	bp,33 ; 24/04/2019
 41871 00007A47 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41872 00007A4A E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41873                                          
 41874 00007A4C 5E                      	POP     SI			; restore pointer to device header
 41875 00007A4D 1F                              POP     DS
 41876 00007A4E EB80                    	JMP	PERDRV			; process all drivers in chain
 41877                                  
 41878                                  CONTINIT:
 41879                                  	; 24/04/2019
 41880                                  	;sub	bp,33			; set link in last DPB to -1
 41881 00007A50 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41882                                  					; set last link offset & segment
 41883                                  	;mov	word [bp+25],0FFFFh
 41884 00007A53 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41885                                  	;mov	word [bp+27],0FFFFh
 41886 00007A58 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41887                                  	;add	bp,33
 41888 00007A5D 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41889                                  					; the DPB chain is done.  
 41890 00007A60 16                      	push	ss
 41891 00007A61 1F                      	pop	ds
 41892                                  
 41893 00007A62 89E8                    	mov	ax,bp
 41894 00007A64 E84AFE                  	call	ParaRound		; round up to segment
 41895                                  
 41896 00007A67 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41897 00007A69 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41898                                  
 41899 00007A6B BB0F00                  	mov	bx,0Fh
 41900                                  	
 41901                                  	; 24/05/2019
 41902                                  	;mov	cx,[ENDMEM]
 41903                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41904                                  	; 17/12/2022
 41905                                  	;mov	cx,[ENDMEM] 
 41906                                  					; set seg inpacketto dosdata					
 41907 00007A6E 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41908                                  
 41909                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41910                                  ; Also patch in the segment of the pointers in the dosdata area.
 41911                                  ;
 41912                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41913                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41914                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41915                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41916                                  
 41917 00007A72 52                      	push	dx			; preserve first free segment
 41918                                  
 41919 00007A73 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41920 00007A76 8EC0                    	mov	es,ax			; es = segment of DOS
 41921 00007A78 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41922                                  
 41923 00007A7E E8E101                  	call	patch_vec_segments	; uses AX as doscode segment
 41924 00007A81 E81602                  	call	patch_misc_segments	; patch in segments for sharer and 
 41925                                  					; other tables with seg in ES.
 41926                                  	; 17/12/2022
 41927                                  	; cx = 0
 41928 00007A84 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41929                                  
 41930 00007A88 5A                      	pop	dx			; restore first free segment
 41931                                  
 41932                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41933                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41934                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41935                                  ; low_mem_stub by seg_reinit.
 41936                                  
 41937                                  	;xor	ax,ax ; 0
 41938                                  	;mov	ds,ax
 41939                                  	;mov	es,ax
 41940                                  	; 17/12/2022
 41941                                  	; cx = 0
 41942                                  	;xor	cx,cx ; 0
 41943 00007A89 8ED9                    	mov	ds,cx
 41944 00007A8B 8EC1                    	mov	es,cx
 41945                                  
 41946                                  	; set the segment of int 24 vector that was 
 41947                                  	; left out by patch_vec_segments above.
 41948                                  
 41949                                  	; 17/12/2022
 41950                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41951                                  ;%if 0
 41952                                  	; 24/05/2019
 41953                                  	;;mov	di,90h
 41954                                  	;;mov	di,4*int_fatal_abort
 41955                                  	;mov	di,addr_int_fatal_abort
 41956 00007A8D BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 41957                                  
 41958 00007A90 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 41959                                  	;mov	[di+2],ax  ; int 24h segment
 41960 00007A94 8905                    	mov	[di],ax ; 24/05/2019
 41961                                  
 41962                                  	;;mov	di,82h
 41963                                  	;mov	di,INTBASE+2
 41964                                  
 41965                                  ;%endif
 41966                                  	; 17/12/2022
 41967                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41968                                  	;;mov	di,90h
 41969                                  	;;mov	di,4*int_fatal_abort
 41970                                  	;mov	di,addr_int_fatal_abort
 41971                                  	;mov	ax,[ss:TEMP_DOSLOC]
 41972                                  	;mov	[di+2],ax  ; int 24h segment
 41973                                  	;;mov	di,82h
 41974                                  	;mov	di,INTBASE+2
 41975                                  
 41976                                  	; set default divide trap offset
 41977                                  
 41978                                  	;mov	word ptr ds:[0],offset doscode:divov
 41979 00007A96 C7060000[9953]          	mov	word [0],DIVOV	
 41980                                  
 41981                                  	; set vectors 20-28 and 2a-3f to point to iret.
 41982                                  
 41983                                  	;mov	di,80h
 41984 00007A9C BF8000                  	mov	di,INTBASE
 41985                                  	;mov	ax,offset doscode:irett
 41986 00007A9F B8[2103]                	mov	ax,IRETT
 41987                                  
 41988                                  	; 17/12/2022
 41989                                  	; cx = 0
 41990 00007AA2 B109                    	mov	cl,9
 41991                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 41992                                  					;   sets offsets for ints 20h-28h
 41993                                  iset1:
 41994 00007AA4 AB                      	stosw
 41995 00007AA5 83C702                  	add	di,2
 41996 00007AA8 E2FA                    	loop	iset1
 41997                                  
 41998 00007AAA 83C704                  	add	di,4			; skip vector 29h
 41999                                  
 42000                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42001                                  ;					;   sets offsets for ints 2ah-2fh
 42002                                  ;iset2:
 42003                                  ;	stosw
 42004                                  ;	add	di,2
 42005                                  ;	loop	iset2
 42006                                  
 42007                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42008                                  ; patch_vec_segments above. So skip it.
 42009                                  
 42010                                  ;	add	di,8			; skip vector 30h & 31h 
 42011                                  
 42012                                  	;;;
 42013                                  	; 06/05/2019 - Retro DOS v4.0
 42014                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42015                                  	; 17/12/2022
 42016 00007AAD B105                    	mov	cl,5 ; 28/06/2019
 42017                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42018                                  	;mov	cx,6
 42019                                  iset2:
 42020 00007AAF AB                      	stosw
 42021 00007AB0 83C702                  	add	di,2
 42022 00007AB3 E2FA                    	loop	iset2
 42023                                  
 42024                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42025                                  	; 17/12/2022
 42026 00007AB5 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42027                                  	;add	di,8
 42028                                  	;;;
 42029                                  
 42030                                  	; 17/12/2022
 42031 00007AB8 B10E                    	mov	cl,14
 42032                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42033                                  					;   sets offsets for ints 32h-3fh
 42034                                  iset3:
 42035 00007ABA AB                      	stosw
 42036 00007ABB 83C702                  	add	di,2
 42037 00007ABE E2FA                    	loop	iset3
 42038                                  
 42039                                  ;if installed
 42040                                  	; set the offset of int2f handler
 42041                                  	;mov	word [0BCh],INT2F
 42042 00007AC0 C706BC00[5007]          	mov	word [02Fh*4],INT2F
 42043                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42044 00007AC6 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42045                                  	;mov	[0BEh],ax
 42046 00007ACA A3BE00                  	mov	[(02Fh*4)+2],ax
 42047                                  ;endif
 42048                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42049                                  	; long jump will be patched in by seg_reinit
 42050                                  
 42051                                  	;mov	byte [C0h],0EAh
 42052 00007ACD C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42053                                  	;mov	byte [C1h],CALL_ENTRY
 42054 00007AD2 C706C100[2203]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42055                                  
 42056 00007AD8 C7068000[1B03]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42057 00007ADE C7068400[4703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42058 00007AE4 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42059 00007AEA 89168A00                	mov	word [addr_int_terminate+2],dx	
 42060 00007AEE C7069400[7A05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42061 00007AF4 C7069800[0106]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42062 00007AFA C7069C00[E762]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42063                                  
 42064 00007B00 16                      	push	ss
 42065 00007B01 1F                      	pop	ds
 42066                                  	
 42067                                  	; 24/05/2019
 42068                                  	;push	ss
 42069                                  	;pop	es
 42070                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42071                                  	; 17/12/2022
 42072                                  	;push	ss
 42073                                  	;pop	es
 42074                                  
 42075 00007B02 52                      	push	dx			; remember address of arena
 42076                                  
 42077 00007B03 42                      	inc	dx			; leave room for arena header
 42078                                  	;mov	[330h],dx
 42079 00007B04 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42080                                  
 42081 00007B08 31FF                    	xor	di,di			; point es:di at end of memory
 42082 00007B0A 8EC2                    	mov	es,dx			; ...where psp will be
 42083 00007B0C 31C0                    	xor	ax,ax
 42084                                  	;mov	cx,80h			; psp is 128 words
 42085                                  	; 17/12/2022
 42086 00007B0E B180                    	mov	cl,128 ; 28/06/2019
 42087                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42088                                  	;mov	cx,128
 42089                                  
 42090 00007B10 F3AB                    	rep	stosw			; zero out psp area
 42091 00007B12 A1[4603]                        mov     ax,[ENDMEM]
 42092                                  	
 42093                                  	; 17/12/2022
 42094                                  	; cx = 0
 42095 00007B15 E87B96                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42096                                  
 42097                                  	; ds, es now point to PSP
 42098                                  
 42099 00007B18 16                      	push	ss
 42100 00007B19 1F                      	pop	ds
 42101                                  
 42102                                  	;mov	di,24
 42103 00007B1A BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42104 00007B1D 31C0                    	xor	ax,ax
 42105 00007B1F AB                      	stosw
 42106 00007B20 AA                      	stosb				; 0,1 and 2 are con device
 42107 00007B21 B0FF                    	mov	al,0FFh
 42108                                  	;mov	cx,FILPERPROC-3 ; 17
 42109                                  	; 17/12/2022
 42110                                  	; cx = 4
 42111 00007B23 B111                    	mov	cl,FILPERPROC-3 ; 17
 42112 00007B25 F3AA                    	rep	stosb			; rest are unused
 42113                                  
 42114 00007B27 16                      	push	ss
 42115 00007B28 07                      	pop	es
 42116                                  					; must be set to print messages
 42117 00007B29 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42118                                  
 42119                                  ; after this point the char device functions for con will work for
 42120                                  ; printing messages
 42121                                  
 42122                                  	; 24/04/2019 - Retro DOS v4.0
 42123                                  
 42124                                  ; 12/05/2019
 42125                                  ;
 42126                                  ;write_version_msg:
 42127                                  ;
 42128                                  ;	;if	(not ibm)
 42129                                  ;	;mov	si,offset doscode:header
 42130                                  ;	mov	si,HEADER
 42131                                  ;outmes:
 42132                                  ;	;lods	cs:byte ptr [si]
 42133                                  ;	cs
 42134                                  ;	lodsb
 42135                                  ;	cmp	al,"$"
 42136                                  ;	je	short outdone
 42137                                  ;	call	OUTT
 42138                                  ;	jmp	short outmes
 42139                                  ;outdone:
 42140                                  ;	push	ss			; out stomps on segments
 42141                                  ;	pop	ds
 42142                                  ;	push	ss
 42143                                  ;	pop	es
 42144                                  ;	;endif
 42145                                  
 42146                                  	; at this point es is dosdata
 42147                                  
 42148                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42149                                  	; in sysinittable (ms_data.asm)
 42150                                  
 42151                                  	;mov	si,0D28h
 42152 00007B2D BE[280D]                	mov	si,SysInitTable
 42153                                  
 42154                                  	; 17/12/2022
 42155                                  	; ds = es = ss
 42156                                  
 42157                                  	; 17/12/2022
 42158                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42159                                  ;%if 0
 42160                                  	;;mov	[es:si+6],es
 42161                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42162                                  	;;mov	[es:si+2],es
 42163                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42164                                  	
 42165 00007B30 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42166 00007B33 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42167                                  
 42168                                  	; buffhead -> dosdata:hashinitvar 
 42169                                  
 42170                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42171 00007B36 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42172                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42173                                  	;mov	si,6Dh
 42174 00007B3A BE[6D00]                	mov	si,HASHINITVAR
 42175                                  	;mov	[es:BUFFHEAD],si
 42176 00007B3D 8936[3800]              	mov	[BUFFHEAD],si
 42177                                  
 42178 00007B41 5A                              pop     dx                      ; restore address of arena
 42179                                  
 42180                                  	;mov	[032Ch+2],dx
 42181 00007B42 8916[2E03]                      mov     [DMAADD+2],dx
 42182                                  
 42183                                  	;mov	[es:arena_head],dx
 42184 00007B46 8916[2400]              	mov	[arena_head],dx
 42185                                  
 42186                                  ;%endif
 42187                                  
 42188                                  ; 17/12/2022
 42189                                  %if 0
 42190                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42191                                  	;;;
 42192                                  	;mov	[es:si+6],es
 42193                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42194                                  	;mov	[es:si+2],es
 42195                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42196                                  
 42197                                  	; buffhead -> dosdata:hashinitvar 
 42198                                  
 42199                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42200                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42201                                  	;mov	si,6Dh
 42202                                  	mov	si,HASHINITVAR
 42203                                  	mov	[es:BUFFHEAD],si
 42204                                  
 42205                                          pop     dx                      ; restore address of arena
 42206                                  
 42207                                  	;mov	[032Ch+2],dx
 42208                                          mov     [DMAADD+2],dx
 42209                                  
 42210                                  	mov	[es:arena_head],dx
 42211                                  	;;;
 42212                                  %endif
 42213                                  
 42214 00007B4A 8EDA                            mov     ds,dx
 42215                                  
 42216                                  	;mov	byte [0],'Z'
 42217 00007B4C C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42218                                          ;mov	word [1],0
 42219 00007B51 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42220                                  
 42221 00007B57 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42222 00007B5B 29D0                    	sub	ax,dx
 42223 00007B5D 48                              dec     ax
 42224 00007B5E A30300                          mov     [ARENA.SIZE],ax
 42225                                  
 42226                                  	; point to sft 0
 42227                                  
 42228                                  	;mov	di,offset dosdata:sftabl + sftable
 42229                                  	;mov	di,SFTABL+6
 42230 00007B61 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42231 00007B64 B80300                          mov     ax,3
 42232 00007B67 AB                              stosw           		; adjust refcount
 42233                                  
 42234                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42235                                  
 42236                                          ;mov	di,offset dosdata:sysinittable
 42237                                  	;mov	di,0D28h
 42238 00007B68 BF[280D]                	mov	di,SysInitTable	
 42239                                  
 42240 00007B6B 42                      	inc	dx			; advance dx from arena to psp
 42241 00007B6C 8EDA                    	mov	ds,dx			; point ds to psp
 42242                                  
 42243                                  					; pass the address os seg_reinit 
 42244                                  					; in dx
 42245 00007B6E BA[DC7B]                	mov	dx,seg_reinit
 42246 00007B71 B9[2875]                	mov	cx,exepatch_start
 42247 00007B74 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42248                                  
 42249 00007B78 B8[AE78]                	mov	ax,SYSBUF
 42250 00007B7B 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42251                                  	
 42252 00007B7E 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42253 00007B83 368E16[8605]                    mov     ss,[ss:USER_SS]
 42254                                  
 42255 00007B88 CB                              retf
 42256                                  
 42257                                  ;
 42258                                  ; END OF DOSINIT
 42259                                  ;
 42260                                  ;--------------------------------------------------------------------------
 42261                                  
 42262                                  CHARINIT:
 42263                                  	; 24/04/2019 - Retro DOS v4.0
 42264                                  	; 07/07/2018 - Retro DOS v3.0
 42265                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42266 00007B89 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42267                                  	;mov	byte [ss:035Bh],0
 42268 00007B8F 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42269                                  	;mov	byte [ss:035Ch],0
 42270 00007B95 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42271                                  	;mov	word [ss:035BD],0
 42272 00007B9B 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42273 00007BA2 06                              PUSH	ES
 42274 00007BA3 53                              PUSH	BX
 42275 00007BA4 50                              PUSH	AX
 42276 00007BA5 BB[5A03]                        MOV	BX,DEVCALL
 42277                                          ;PUSH	CS
 42278 00007BA8 16                      	PUSH	SS ; 30/04/2019
 42279 00007BA9 07                              POP	ES
 42280 00007BAA E8ADCB                          CALL	DEVIOCALL2	
 42281 00007BAD 58                      	POP	AX
 42282 00007BAE 5B                              POP	BX
 42283 00007BAF 07                              POP	ES
 42284 00007BB0 C3                              RETN
 42285                                  
 42286                                  ; 25/04/2019 - Retro DOS v4.0
 42287                                  
 42288                                  ;-----------------------------------------------------------------------------
 42289                                  ;
 42290                                  ;	check_XMM: routine to check presence of XMM driver
 42291                                  ;
 42292                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42293                                  ;
 42294                                  ;	USED:	none
 42295                                  ;
 42296                                  ;-----------------------------------------------------------------------------
 42297                                  
 42298                                  check_XMM: ; proc near
 42299                                  ;
 42300                                  ; determine whether or not an XMM driver is installed
 42301                                  ;
 42302 00007BB1 50                      	push	ax
 42303                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42304 00007BB2 B80043                  	mov	ax,4300h
 42305 00007BB5 CD2F                    	int	2Fh
 42306                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42307                                  		; Return: AL = 80h XMS driver installed
 42308                                  		; AL <> 80h no driver
 42309 00007BB7 3C80                    	cmp	al,80h			; Q: installed
 42310 00007BB9 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42311                                  ;
 42312                                  ; get the XMM control functions entry point, save it, we
 42313                                  ; need to call it later.
 42314                                  ;
 42315 00007BBB 53                      	push	bx
 42316 00007BBC 52                      	push	dx
 42317 00007BBD 1E                      	push	ds
 42318 00007BBE 06                      	push	es
 42319                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42320 00007BBF B81043                  	mov	ax,4310h
 42321 00007BC2 CD2F                    	int	2Fh
 42322                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42323                                  		; Return: ES:BX -> driver entry point
 42324                                  
 42325 00007BC4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42326                                  
 42327 00007BC9 891E[6311]              	mov	[XMMcontrol],bx
 42328 00007BCD 8C06[6511]              	mov	[XMMcontrol+2],es
 42329                                  cXMMexit:
 42330 00007BD1 F8                      	clc
 42331 00007BD2 07                      	pop	es
 42332 00007BD3 1F                      	pop	ds
 42333 00007BD4 5A                      	pop	dx
 42334 00007BD5 5B                      	pop	bx
 42335 00007BD6 58                      	pop	ax
 42336 00007BD7 C3                      	retn				; done
 42337                                  ;
 42338                                  ; set carry if XMM driver not present
 42339                                  ;
 42340                                  cXMM_no_driver:
 42341 00007BD8 F9                      	stc
 42342 00007BD9 58                      	pop	ax
 42343 00007BDA C3                      	retn
 42344                                  
 42345                                  ;-----------------------------------------------------------------------------
 42346                                  ;
 42347                                  ; Procedure Name : seg_reinit
 42348                                  ;
 42349                                  ; Inputs	 : ES has final dos code location
 42350                                  ;		   AX = 0 / 1
 42351                                  ;
 42352                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42353                                  ;		   if AX =0
 42354                                  ;		      if first entry
 42355                                  ;			 patch segment & offset of vectors with stub
 42356                                  ;			 and stub with segment in ES
 42357                                  ;		      else
 42358                                  ;			 patch stub with segment in ES
 42359                                  ;
 42360                                  ;		   else if AX = 1
 42361                                  ;			patch segment of vectors with segment in ES	
 42362                                  ;
 42363                                  ; NOTE		 : This routine can be called at most twice!
 42364                                  ;
 42365                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42366                                  ;-----------------------------------------------------------------------------
 42367                                  
 42368 00007BDB 00                      num_entry: db	0		; keeps track of the # of times this routine
 42369                                  				; has been called. (0 or 1)
 42370                                  
 42371                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42372                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42373                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42374                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42375                                  
 42376                                  seg_reinit:	; proc	far
 42377 00007BDC 1E                      	push	ds
 42378                                  
 42379 00007BDD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42380                                  
 42381 00007BE2 E8B500                  	call	patch_misc_segments	; patch in segments for sharer and 
 42382                                  					; other tables with seg in ES.
 42383                                  	; 17/12/2022
 42384                                  	; cx = 0
 42385 00007BE5 39C8                    	cmp	ax,cx ; 0
 42386                                  	;cmp	ax,0
 42387 00007BE7 756C                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42388                                  
 42389                                  	; 17/12/2022
 42390 00007BE9 2E380E[DB7B]            	cmp	[cs:num_entry],cl ; 0
 42391                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42392 00007BEE 7508                    	jne	short second_entry	; N: just patch the stub with 
 42393                                  					;    segment in ES
 42394                                  					; Y: patch the vectors with stub 
 42395 00007BF0 8CD8                    	mov	ax,ds
 42396 00007BF2 E86D00                  	call	patch_vec_segments	; patch the segment of vectors
 42397 00007BF5 E8EC00                  	call	patch_offset		; patch the offsets of vectors 
 42398                                  					; with those in the stub.
 42399                                  	; 17/12/2022
 42400                                  	; cx = 0
 42401                                  second_entry:
 42402 00007BF8 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42403                                  
 42404                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42405                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42406 00007BFA BF[6210]                	mov	di,DOSINTTABLE
 42407                                  	; 17/12/2022
 42408                                  	; cx = 0
 42409                                  	;mov	cx,9
 42410 00007BFD B109                    	mov	cl,9
 42411 00007BFF 1E                      	push	ds			
 42412 00007C00 07                      	pop	es			; es:di -> DOSINTTABLE
 42413                                  
 42414                                  dosinttabloop:
 42415 00007C01 83C702                  	add	di,2
 42416 00007C04 AB                      	stosw
 42417 00007C05 E2FA                    	loop	dosinttabloop	
 42418                                  
 42419                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42420                                  ; use the HMA, so we don't want to check CS
 42421                                  
 42422                                  ;ifndef ROMDOS
 42423 00007C07 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42424 00007C0A 724E                    	jb	short sr_done		; N: done
 42425                                  ;endif
 42426 00007C0C E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42427 00007C0F 7249                    	jc	short sr_done		; failed to set up XMS do not do
 42428                                  					; A20 toggling in the stub.
 42429                                  	; 17/12/2022
 42430                                  	; cx = 0
 42431 00007C11 E84B01                  	call	patch_in_nops		; enable the stub to check A20 state
 42432                                  ; M021-
 42433                                  	;mov	byte [1211h],1
 42434 00007C14 C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42435                                  				
 42436                                  					; set pointer to the routine that 
 42437                                  					; patches buggy exepacked code.
 42438                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42439 00007C19 C706[1212][7876]        	mov	word [FixExePatch],ExePatch
 42440                                  					; M068: set pointer to the routine 
 42441                                  					; M068: that detects copy protected
 42442                                  					; M068: apps
 42443                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42444 00007C1F C706[6100][7878]        	mov	word [ChkCopyProt],IsCopyProt
 42445                                  
 42446                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42447                                  
 42448                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42449                                  ;
 42450                                  ;; M020 - begin
 42451                                  ;
 42452                                  ;	call	WhatCPUType
 42453                                  ;	cmp	al,1
 42454                                  ;	jne	short sr_done 		; we need Rational Patch only
 42455                                  ;					;  on 286 systems
 42456                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42457                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42458                                  ;
 42459                                  ;; M020 - end
 42460                                  ;
 42461                                  ;	jmp	short sr_done
 42462                                  ;
 42463                                  ;patch_vec_seg:				; patch vectors with segment in es
 42464                                  ;	mov	ax,es
 42465                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42466                                  ;					; NOTE we don't have to patch the 
 42467                                  ;					; offsets as they have been already
 42468                                  ;					; set to the doscode offsets at
 42469                                  ;					; DOSINIT.
 42470                                  ;sr_done:
 42471                                  ;	mov	byte [cs:num_entry],1
 42472                                  ;	pop	ds
 42473                                  ;	retf	; ! far return !
 42474                                  
 42475                                  ;----------------------------------------------------------------------------
 42476                                  ;
 42477                                  ; Procedure Name : WhatCPUType
 42478                                  ;
 42479                                  ; Inputs	 : none
 42480                                  ;
 42481                                  ; Outputs	 : AL = 0 if CPU <  286
 42482                                  ;		      = 1 if CPU == 286
 42483                                  ;		      = 2 if CPU >= 386
 42484                                  ;
 42485                                  ; Regs. Mod.	 : AX
 42486                                  ;
 42487                                  ;----------------------------------------------------------------------------
 42488                                  
 42489                                  WhatCPUType:
 42490                                  	; 25/04/2019 - Retro DOS v4.0
 42491                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42492                                  
 42493                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42494                                  
 42495                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42496                                  ; 	it is called from both CODE and SYSINITSEG.
 42497                                  ;
 42498                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42499                                  ;  Returns: AX = 0 if 8086 or 8088
 42500                                  ;              = 1 if 80286
 42501                                  ;              = 2 if 80386
 42502                                  
 42503                                  	; 04/11/2022
 42504                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42505                                  
 42506                                  Get_CPU_Type:	;macro
 42507 00007C25 9C                      	pushf
 42508 00007C26 53                      	push	bx			; preserve bx
 42509 00007C27 31DB                    	xor	bx,bx			; init bx to zero
 42510                                  
 42511 00007C29 31C0                    	xor	ax,ax			; 0000 into AX
 42512 00007C2B 50                      	push	ax			; put it on the stack...
 42513 00007C2C 9D                      	popf				; ...then shove it into the flags
 42514 00007C2D 9C                      	pushf				; get it back out of the flags...
 42515 00007C2E 58                      	pop	ax			; ...and into ax
 42516 00007C2F 2500F0                  	and	ax,0F000h		; mask off high four bits
 42517 00007C32 3D00F0                  	cmp	ax,0F000h		; was it all 1's?
 42518 00007C35 740E                    	je	short cpu_8086		; aye; it's an 8086 or 8088
 42519                                  
 42520 00007C37 B800F0                  	mov	ax,0F000h		; now try to set the high four bits..
 42521 00007C3A 50                      	push	ax
 42522 00007C3B 9D                      	popf
 42523 00007C3C 9C                      	pushf
 42524 00007C3D 58                      	pop	ax			; ...and see what happens
 42525 00007C3E 2500F0                  	and	ax,0F000h		; any high bits set ?
 42526 00007C41 7401                    	jz	short cpu_286		; nay; it's an 80286
 42527                                  
 42528                                  cpu_386:				; bx starts as zero
 42529 00007C43 43                      	inc	bx			; inc twice if 386
 42530                                  cpu_286:				; just inc once if 286
 42531 00007C44 43                      	inc	bx
 42532                                  cpu_8086:				; don't inc at all if 086
 42533 00007C45 89D8                    	mov	ax,bx			; put CPU type value in ax
 42534 00007C47 5B                      	pop	bx			; restore original bx
 42535 00007C48 9D                      	popf
 42536                                  	
 42537                                  	;endm
 42538                                  
 42539                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42540                                  	;retn
 42541                                  
 42542                                  	; 04/11/2022
 42543                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42544 00007C49 3C01                    	cmp	al,1
 42545 00007C4B 750D                    	jne	short sr_done 		; we need Rational Patch only
 42546                                  					;  on 286 systems
 42547 00007C4D C706[1412][B577]        	mov	word [RationalPatchPtr],RationalPatch
 42548                                  
 42549 00007C53 EB05                    	jmp	short sr_done
 42550                                  
 42551                                  patch_vec_seg:				; patch vectors with segment in es
 42552 00007C55 8CC0                    	mov	ax,es
 42553 00007C57 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42554                                  					; NOTE we don't have to patch the 
 42555                                  					; offsets as they have been already
 42556                                  					; set to the doscode offsets at
 42557                                  					; DOSINIT.
 42558                                  sr_done:
 42559 00007C5A 2EC606[DB7B]01          	mov	byte [cs:num_entry],1
 42560 00007C60 1F                      	pop	ds
 42561 00007C61 CB                      	retf	; ! far return !
 42562                                  
 42563                                  ;----------------------------------------------------------------------------
 42564                                  ;
 42565                                  ; Procedure Name : patch_vec_segments
 42566                                  ;
 42567                                  ; Inputs	 : ax -> has segment address to patch in
 42568                                  ;		   ds -> DOSDATA
 42569                                  ;
 42570                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42571                                  ;			
 42572                                  ;			0,20-28,3a-3f
 42573                                  ;
 42574                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42575                                  ;
 42576                                  ;----------------------------------------------------------------------------
 42577                                  
 42578                                  patch_vec_segments:
 42579                                  
 42580 00007C62 06                      	push	es
 42581                                  
 42582 00007C63 31C9                    	xor	cx,cx ; 0
 42583 00007C65 8EC1                    	mov	es,cx
 42584                                  
 42585                                  	;mov	di,82h
 42586 00007C67 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42587                                  
 42588 00007C6A 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42589                                  
 42590                                  					; set vectors 20 & 21
 42591                                  	; 04/11/2022
 42592                                  	;mov	cx,2
 42593                                  	; 17/12/2022
 42594                                  	;mov	cl,2
 42595                                  ps_set1:
 42596 00007C6E AB                      	stosw	; int 20h segment
 42597                                  	;add	di,2
 42598                                  	; 17/12/2022
 42599 00007C6F 47                      	inc	di
 42600 00007C70 47                      	inc	di
 42601                                  	;loop	ps_set1
 42602                                  
 42603                                  	; 17/12/2022
 42604 00007C71 AB                      	stosw	; int 21h segment
 42605                                  	;inc	di
 42606                                  	;inc	di
 42607                                  
 42608                                  	;add	di,4			; skip int 22h vector
 42609 00007C72 83C706                  	add	di,6 ; *
 42610                                  
 42611 00007C75 AB                      	stosw				; set int 23h
 42612 00007C76 83C706                  	add	di,6			; skip int 24h
 42613                                  
 42614                                  					; set vectors 25-28 and 2a-3f 
 42615                                  	; 04/11/2022
 42616                                  	;mov	cx,4			; set 4 segments
 42617                                  	; 17/12/2022
 42618 00007C79 B104                    	mov	cl,4
 42619                                  ps_set2:
 42620 00007C7B AB                      	stosw				
 42621                                  	;add	di,2
 42622                                  	; 17/12/2022
 42623 00007C7C 47                      	inc	di
 42624 00007C7D 47                      	inc	di
 42625 00007C7E E2FB                    	loop	ps_set2
 42626                                  
 42627 00007C80 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42628                                  					;   already be set.
 42629                                  	; 04/11/2022
 42630                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42631                                  	; 17/12/2022
 42632 00007C83 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42633                                  ps_set3:
 42634 00007C85 AB                      	stosw
 42635                                  	;add	di,2
 42636                                  	; 17/12/2022
 42637 00007C86 47                      	inc	di
 42638 00007C87 47                      	inc	di
 42639 00007C88 E2FB                    	loop	ps_set3
 42640                                  
 42641                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42642                                  ; below. So skip it.
 42643                                  
 42644 00007C8A 83C708                  	add	di,8			; skip vector 30h & 31h 
 42645                                  	
 42646                                  	; 04/11/2022
 42647                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42648                                  	; 17/12/2022
 42649 00007C8D B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42650                                  ps_set4:
 42651 00007C8F AB                      	stosw
 42652                                  	;add	di,2
 42653                                  	; 17/12/2022
 42654 00007C90 47                      	inc	di
 42655 00007C91 47                      	inc	di
 42656 00007C92 E2FB                    	loop	ps_set4
 42657                                  
 42658                                  ; set offset of int2f
 42659                                  
 42660                                  ;if installed
 42661                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42662                                  ;endif
 42663                                  	;mov	[es:0C3h],ax
 42664 00007C94 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42665                                  	; 17/12/2022
 42666                                  	; cx = 0
 42667 00007C98 07                      	pop	es
 42668 00007C99 C3                      	retn
 42669                                  
 42670                                  ;---------------------------------------------------------------------------
 42671                                  ;
 42672                                  ; Procedure Name : patch_misc_segments
 42673                                  ;
 42674                                  ; Inputs	 : es = segment to patch in
 42675                                  ;		   ds = dosdata
 42676                                  ;
 42677                                  ; outputs	 : patches in the sharer and other tables in the dos
 42678                                  ;		   with right dos code segment in es
 42679                                  ;
 42680                                  ; Regs Mod	 : DI,SI,CX
 42681                                  ;
 42682                                  ;---------------------------------------------------------------------------
 42683                                  
 42684                                  patch_misc_segments:
 42685                                  
 42686 00007C9A 53                      	push	bx
 42687 00007C9B 06                      	push	es
 42688 00007C9C 50                      	push	ax
 42689                                  
 42690 00007C9D 8CC0                    	mov	ax,es			; ax - > DOS segment
 42691                                  	
 42692 00007C9F 1E                      	push	ds
 42693 00007CA0 07                      	pop	es			; es -> DOSDATA
 42694                                  	
 42695                                  ; initialize the jump table for the sharer...
 42696                                  
 42697                                  	;mov	di,offset dosdata:jshare
 42698                                  	;mov	di,90h
 42699 00007CA1 BF[9000]                	mov	di,JShare
 42700                                  	;mov	bx,[0AAAh]
 42701 00007CA4 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42702                                  					; table was patched during the first
 42703                                  					; call to this routine
 42704 00007CA8 B90F00                  	mov	cx,15
 42705                                  jumptabloop:
 42706                                  	;add	di,2			; skip offset
 42707                                  	; 17/12/2022
 42708 00007CAB 47                      	inc	di
 42709 00007CAC 47                      	inc	di
 42710 00007CAD 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42711 00007CB0 7405                    	je	short share_patch	; Y: patch in sharer table
 42712                                  					; N: 
 42713 00007CB2 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42714 00007CB5 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42715                                  share_patch:
 42716 00007CB7 AB                      	stosw				; drop in segment
 42717                                  no_share_patch:
 42718 00007CB8 E2F1                    	loop	jumptabloop
 42719                                  					; BUGBUG patching the country info 
 42720                                  					; with dosdata can be done inline
 42721                                  					; in dosinit.
 42722                                  					; for dos 3.3 country info
 42723                                  					; table address
 42724                                  
 42725                                  	;mov	si,offset dosdata:country_cdpg
 42726                                  	;mov	si,122Ah   
 42727 00007CBA BE[2A12]                	mov	si,COUNTRY_CDPG
 42728                                  					; initialize double word
 42729                                  					; pointers with dosdata in ds
 42730                                  	;mov	[si+4Fh],ds
 42731                                  	;mov	[si+54h],ds
 42732                                  	;mov	[si+59h],ds
 42733                                  	;mov	[si+5Eh],ds
 42734                                  	;mov	[si+80h],ds
 42735                                  	;mov	[si+63h],ds
 42736 00007CBD 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42737 00007CC0 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42738 00007CC3 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42739 00007CC6 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42740 00007CC9 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42741 00007CCD 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42742                                  
 42743                                  					; fastopen routines are in doscode
 42744                                  					; so patch with doscode seg in ax
 42745                                  
 42746                                  	;mov	si,offset dosdata:fastopentable
 42747                                  	;mov	si,0D30h
 42748 00007CD0 BE[300D]                	mov	si,FastOpenTable
 42749                                  
 42750                                  	; 17/12/2022
 42751                                  	; bx = [TEMP_DOSLOC]
 42752 00007CD3 83FBFF                  	cmp	bx,-1
 42753                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42754 00007CD6 7405                    	je	short fast_patch	; Y: patch segment
 42755                                  	;mov	cx,[TEMP_DOSLOC]
 42756                                  					; Q: has fastopen patched in it's
 42757                                  					;    segment
 42758                                  	; 17/12/2022
 42759 00007CD8 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42760                                  	;;cmp	cx,[si+4]
 42761                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42762 00007CDB 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42763                                  
 42764                                  fast_patch:
 42765                                  	;mov	[si+4],ax
 42766 00007CDD 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42767                                  no_fast_patch:
 42768                                  	; 17/12/2022
 42769                                  	; cx = 0
 42770 00007CE0 58                      	pop	ax
 42771 00007CE1 07                      	pop	es
 42772 00007CE2 5B                      	pop	bx
 42773                                  
 42774 00007CE3 C3                      	retn
 42775                                  
 42776                                  ;--------------------------------------------------------------------------
 42777                                  ;
 42778                                  ; Procedure Name : patch_offset
 42779                                  ; 
 42780                                  ; Inputs	 : NONE
 42781                                  ;
 42782                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42783                                  ;		   0,20-28,3a-3f, and 30,31
 42784                                  ;
 42785                                  ;
 42786                                  ; Regs. Mod	 : AX,DI,CX
 42787                                  ;--------------------------------------------------------------------------
 42788                                  
 42789                                  patch_offset:
 42790 00007CE4 06                      	push	es		; preserve es
 42791                                  
 42792 00007CE5 31C0                    	xor	ax,ax
 42793 00007CE7 8EC0                    	mov	es,ax
 42794                                  				; set default divide trap address
 42795                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42796                                  	;mov	word [es:0],108Ah
 42797 00007CE9 26C7060000[8A10]        	mov	word [es:0],ldivov
 42798                                  
 42799                                  	;mov	di,80h
 42800 00007CF0 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42801                                  	;mov	ax,offset dosdata:lirett
 42802                                  	;mov	ax,10DAh
 42803 00007CF3 B8[DA10]                	mov	ax,lirett
 42804                                  				; set vectors 20 & 21 to point to iret.
 42805                                  	; 17/12/2022
 42806                                  	; cx = 0
 42807                                  
 42808                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42809                                  po_iset1:
 42810 00007CF6 AB                      	stosw	; int 20h offset
 42811                                  	;add	di,2 ; *
 42812                                  	;loop	po_iset1
 42813                                  	; 17/12/2022
 42814 00007CF7 47                      	inc	di
 42815 00007CF8 47                      	inc	di
 42816 00007CF9 AB                      	stosw	; int 21h offset
 42817                                  
 42818                                  	;add	di,4		; skip vector 22h
 42819                                  	; 17/12/2022
 42820 00007CFA 83C706                  	add	di,6 ; *	
 42821                                  
 42822 00007CFD AB                      	stosw			; set offset of 23h
 42823                                  	;add	di,6		; skip 24h
 42824                                  	; 19/09/2023
 42825 00007CFE 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 42826                                  
 42827                                  				; set vectors 25-28 and 2a-3f to iret.
 42828                                  	; 04/11/2022
 42829                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42830                                  	; 19/09/2023
 42831                                  	; 17/12/2022
 42832                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 42833                                  po_iset2:
 42834 00007D01 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 42835                                  	;add	di,2
 42836                                  	; 19/09/2023
 42837                                  	; 17/12/2022
 42838                                  	;inc	di
 42839                                  	;inc	di
 42840                                  	; 19/09/2023
 42841                                  	;loop	po_iset2
 42842                                  
 42843                                  	;add	di,4		; skip vector 29h
 42844                                  	; 19/09/2023
 42845 00007D02 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 42846                                  
 42847                                  	; 04/11/2022
 42848                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42849                                  	; 17/12/2022
 42850                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42851 00007D05 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42852                                  po_iset3:
 42853 00007D07 AB                      	stosw
 42854                                  	;add	di,2
 42855                                  	; 17/12/2022
 42856 00007D08 47                      	inc	di
 42857 00007D09 47                      	inc	di
 42858 00007D0A E2FB                    	loop	po_iset3
 42859                                  
 42860                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42861                                  ; below. So skip it.
 42862                                  
 42863                                  	;add	di,8		; skip vector 30h & 31h 
 42864                                  	; 17/12/2022
 42865 00007D0C 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 42866                                  
 42867                                  	; 04/11/2022
 42868                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42869                                  				;   sets offsets for ints 32h-3fh
 42870                                  	; 17/12/2022
 42871 00007D0F B10E                    	mov	cl,14 ; 26/06/2019
 42872                                  po_iset4:
 42873 00007D11 AB                      	stosw
 42874                                  	;add	di,2
 42875                                  	; 17/12/2022
 42876 00007D12 47                      	inc	di
 42877 00007D13 47                      	inc	di
 42878 00007D14 E2FB                    	loop	po_iset4
 42879                                  
 42880                                  ;if installed
 42881                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42882                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42883 00007D16 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 42884                                  ;endif
 42885                                  
 42886                                  ; set up entry point call at vectors 30-31h
 42887                                  	;mov	byte [es:0C0h],0EAh
 42888 00007D1D 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42889                                  	;mov	word [es:0C1h],10D0h
 42890                                  
 42891 00007D23 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42892                                  
 42893                                  							; 19/09/2023
 42894                                  	;mov	word [es:80h],1094h
 42895 00007D2A 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 42896                                  	;mov	word [es:84h],109Eh
 42897 00007D31 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 42898                                  	;mov	word [es:94h],10A8h
 42899 00007D38 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 42900                                  	;mov	word [es:98h],10B2h
 42901 00007D3F 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 42902                                  	;mov	word [es:9Ch],10BCh
 42903 00007D46 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 42904                                  
 42905                                  	; 17/12/2022
 42906                                  	; CX = 0
 42907 00007D4D 07                      	pop	es		; restore es
 42908 00007D4E C3                      	retn
 42909                                  
 42910                                  ;--------------------------------------------------------------------------
 42911                                  ;
 42912                                  ; 	Procedure Name	:	patch_in_nops
 42913                                  ;
 42914                                  ; 	Entry		: 	ES -> DOSDATA
 42915                                  ;
 42916                                  ;	Regs Mod	: 	cx, di
 42917                                  ;
 42918                                  ;	Description:
 42919                                  ;		This routine patches in 2 nops at the offsets specified in 
 42920                                  ;	patch_table. This basically enables the low mem stub to start 
 42921                                  ;	making XMS calls.
 42922                                  ;
 42923                                  ;--------------------------------------------------------------------------
 42924                                  
 42925                                  	; 04/11/2022
 42926                                  	; (MSDOS 5.0 MSDOS.SYS)
 42927                                  	; DOSCODE:0BC50h
 42928                                  
 42929                                  patch_table:	; label	byte
 42930                                  	;dw	offset dosdata:i0patch
 42931                                  	;dw	offset dosdata:i20patch
 42932                                  	;dw	offset dosdata:i21patch
 42933                                  	;dw	offset dosdata:i25patch
 42934                                  	;dw	offset dosdata:i26patch
 42935                                  	;dw	offset dosdata:i27patch
 42936                                  	;dw	offset dosdata:i2fpatch
 42937                                  	;dw	offset dosdata:cpmpatch
 42938 00007D4F [8A10]                  	dw	i0patch
 42939 00007D51 [9410]                  	dw	i20patch
 42940 00007D53 [9E10]                  	dw	i21patch
 42941 00007D55 [A810]                  	dw	i25patch
 42942 00007D57 [B210]                  	dw	i26patch
 42943 00007D59 [BC10]                  	dw	i27patch
 42944 00007D5B [C610]                  	dw	i2fpatch
 42945 00007D5D [D010]                  	dw	cpmpatch
 42946                                  
 42947                                  patch_table_size equ ($-patch_table)/2
 42948                                  
 42949                                  patch_in_nops:
 42950 00007D5F 50                      	push	ax
 42951 00007D60 56                      	push	si
 42952 00007D61 BE[4F7D]                	mov	si,patch_table
 42953 00007D64 B89090                  	mov	ax,9090h ; nop, nop
 42954                                  	; 17/12/2022
 42955                                  	; cx = 0
 42956                                  	;mov	cx,8
 42957                                  	;mov	cx,patch_table_size ; 8
 42958 00007D67 B108                    	mov	cl,patch_table_size ; 8
 42959                                  pin_loop:
 42960 00007D69 2E8B3C                  	mov	di,[cs:si]
 42961 00007D6C AB                      	stosw
 42962                                  	;add	si,2
 42963                                  	; 17/12/2022
 42964 00007D6D 46                      	inc	si
 42965 00007D6E 46                      	inc	si
 42966 00007D6F E2F8                    	loop	pin_loop
 42967 00007D71 5E                      	pop	si
 42968 00007D72 58                      	pop	ax
 42969 00007D73 C3                      	retn
 42970                                  
 42971                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42972                                  ; ---------------------------------------------------------------------------
 42973                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 42974                                  ; ---------------------------------------------------------------------------
 42975                                  
 42976                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 42977                                  DOSCODE_END:
 42978                                  	;times	9 db 0	; db 9 dup(0)
 42979                                  	; 18/12/2022
 42980 00007D74 0000                    	dw	0  ;	times 2 db 0
 42981                                  
 42982                                  ;align 16
 42983                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 42984                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 42985                                  
 42986                                  ; ---------------------------------------------------------------------------
 42987                                  
 42988                                  
 42989                                  ;memstrt label word
 42990                                  ; ---------------------------------------------------------------------------
 42991                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 42992                                  ; ---------------------------------------------------------------------------
 42993                                  
 42994                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 42995                                  
 42996                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 42997                                  ; the dos initialization segment
 42998                                  
 42999                                  ;ifndef ROMDOS
 43000                                  
 43001                                  ;doscode ends
 43002                                  
 43003                                  ;else
 43004                                  
 43005                                  ;;dosinitseg ends
 43006                                  
 43007                                  ;endif ; ROMDOS
 43008                                  
 43009                                  ;============================================================================
 43010                                  
 43011                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43012                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43013                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43014                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43015                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43016                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43017                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43018                                  
 43019                                  ;; burasý doscode sonu
 43020                                  
 43021                                  ;============================================================================
 43022                                  ; DOSDATA
 43023                                  ;============================================================================
 43024                                  ; 29/04/2019 - Retro DOS 4.0
 43025                                  
 43026                                  ;[BITS 16]
 43027                                  
 43028                                  ;[ORG 0]
 43029                                  
 43030                                  ; 25/04/2019 - Retro DOS v4.0
 43031                                  
 43032                                  ;============================================================================
 43033                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43034                                  ;============================================================================
 43035                                  
 43036                                  ;align 16
 43037                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43038                                  	; (4970 bytes for MSDOS 6.21)
 43039                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43040                                  
 43041                                  ;============================================================================
 43042                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43043                                  ;============================================================================
 43044                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43045                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43046                                  ; 16/07/2018 - Retro DOS 3.0	
 43047                                  
 43048                                  ;Break <Initialized data and data used at DOS initialization>
 43049                                  ;----------------------------------------------------------------------------
 43050                                  
 43051                                  ; We need to identify the parts of the data area that are relevant to tasks
 43052                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43053                                  ; data will be gathered with the system code. The process data under 2.x will
 43054                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43055                                  ;
 43056                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43057                                  ; describing that data item.
 43058                                  
 43059                                  ;DOSDATA SEGMENT
 43060                                  
 43061                                  ; 04/11/2022
 43062                                  ;[ORG 0]
 43063                                  
 43064                                  ; ----------------------------------------------------------------------------
 43065                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43066                                  ; ----------------------------------------------------------------------------
 43067                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43068                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43069                                  ; ----------------------------------------------------------------------------
 43070                                  
 43071                                  ; 04/11/2022
 43072                                  
 43073                                  ;DOSDATA:0000h
 43074                                  
 43075 00007D76 90<rep Ah>              align 16
 43076                                  
 43077                                  ; ----------------------------------------------------------------------------
 43078                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43079                                  ; ----------------------------------------------------------------------------
 43080                                  
 43081                                  segment .data  vstart=0 ; 06/12/2022
 43082                                  								
 43083                                  ; ============================================================================
 43084                                  
 43085                                  ; 06/12/2022
 43086                                  ;DOSDATASTART equ $
 43087                                  DOSDATASTART:
 43088                                  
 43089                                  
 43090                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43091                                  
 43092                                  	;; 03/11/2022
 43093                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43094                                  
 43095                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43096                                  	;db	4 dup (?)	
 43097 00000000 00<rep 4h>              	times	4 db 0
 43098                                  
 43099                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43100                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43101                                  	;dw	0
 43102                                  
 43103                                  	;EVEN
 43104                                  
 43105                                  ;align 2
 43106                                  
 43107                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43108                                  ; area compatability. This location must be incremented EACH TIME the data
 43109                                  ; area here gets mucked with.
 43110                                  ;
 43111                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43112                                  
 43113                                  MSCT001S:	; LABEL BYTE
 43114                                  	
 43115                                  DataVersion:	
 43116 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43117                                  
 43118                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43119                                  ;hkn; been removed to DOSCODE above
 43120                                  
 43121                                  ;M044
 43122                                  ; First part of save area for saving last para of Window memory
 43123                                  
 43124                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43125 00000006 00<rep 8h>              	times	8 db 0
 43126                                  
 43127                                  	; MSDOS 6.21 DOSDATA:000Eh
 43128                                  MYNUM:			; Offset 000Eh
 43129 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43130                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43131 00000010 0000                    	dw	0
 43132                                  OpenLRU:
 43133 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43134                                  OEM_HANDLER: 		
 43135 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43136                                  
 43137                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43138                                  ;;			way that we leave DOS???? - jgl
 43139                                  
 43140                                  LeaveAddr:
 43141 00000018 [4C04]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43142                                  RetryCount:		
 43143 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43144                                  RetryLoop:
 43145 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43146                                  LastBuffer:
 43147 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43148                                  CONTPOS:
 43149 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43150                                  arena_head:
 43151 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43152                                  
 43153                                  ;; 16/07/2018
 43154                                  ;;***************************************************************************
 43155                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43156                                  ;;***************************************************************************
 43157                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43158                                  ;;
 43159                                  ;;	AH = 52h
 43160                                  ;;
 43161                                  ;;	on return:
 43162                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43163                                  ;;		Known "invars" fields follow (varies with DOS version):
 43164                                  ;;
 43165                                  ;;	Offset Size		 Description
 43166                                  ;;
 43167                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43168                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43169                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43170                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43171                                  ;;		      0 indicates no unread input (DOS 3.x)
 43172                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43173                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43174                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43175                                  ;;	  08   dword  pointer to $CLOCK device driver
 43176                                  ;;	  0C   dword  pointer to CON device driver
 43177                                  ;;	  10   byte   number of logical drives in system
 43178                                  ;;	  11   word   maximum bytes/block of any block device
 43179                                  ;;	  13   dword  pointer to DOS cache buffer header
 43180                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43181                                  ;;		      point to the next device in device chain
 43182                                  ;;
 43183                                  ;;***************************************************************************
 43184                                  
 43185                                  ; The following block of data is used by SYSINIT. 
 43186                                  ; Do not change the order or size of this block
 43187                                  
 43188                                  ;SYSINITVAR:
 43189                                  ;----------------------------------------------------------------------------
 43190                                  SYSINITVARS:
 43191                                  DPBHEAD:
 43192 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43193                                  SFT_ADDR:
 43194 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43195                                  BCLOCK:
 43196 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43197                                  BCON:
 43198 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43199                                  MAXSEC:
 43200 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43201                                  BUFFHEAD:
 43202 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43203                                  CDSADDR:
 43204 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43205                                  SFTFCB:
 43206 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43207                                  KEEPCOUNT:
 43208 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43209                                  NUMIO:
 43210 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43211                                  CDSCOUNT:
 43212 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43213                                  
 43214                                  ; A fake header for the NUL device
 43215                                  NULDEV:
 43216 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43217                                  	;dw	8004h
 43218 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43219 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43220 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43221 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43222                                  SPLICES:
 43223 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43224                                  
 43225                                  Special_Entries:
 43226 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43227                                  UU_IFS_DOS_CALL:
 43228 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43229                                  ; 
 43230                                  ; UU_IFS_HEADER:
 43231                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43232                                  
 43233                                  ChkCopyProt:
 43234 00000061 0000                    	dw	0	; M068
 43235                                  A20OFF_PSP:
 43236 00000063 0000                    	dw	0	; M068
 43237                                  BUFFERS_PARM1:
 43238 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43239                                  BUFFERS_PARM2:
 43240 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43241                                  BOOTDRIVE:
 43242 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43243                                  DDMOVE:
 43244 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43245                                  EXT_MEM_SIZE:
 43246 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43247                                  
 43248                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43249                                  ;
 43250                                  ; Replaced by next two declarations
 43251                                  ;
 43252                                  ;UU_BUF_HASH_PTR:
 43253                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43254                                  ;UU_BUF_HASH_COUNT:
 43255                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43256                                  
 43257                                  BufferQueue:
 43258 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43259                                  DirtyBufferCount:
 43260 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43261                                  			; BUGBUG ---- change to byte
 43262                                  SC_CACHE_PTR:
 43263 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43264                                  SC_CACHE_COUNT:
 43265 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43266                                  BuffInHMA:
 43267 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43268                                  LoMemBuff:
 43269 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43270                                  			;  in Low mem when buffs are in HMA
 43271                                  ;
 43272                                  ; All variables which have UU_ as prefix can be reused for other
 43273                                  ; purposes and can be renamed. All these variables were used for
 43274                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43275                                  ; manager ---- MOHANS
 43276                                  ;
 43277                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43278                                  UU_BUF_EMS_FIRST_PAGE:	
 43279 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43280                                  
 43281                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43282                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43283                                  ;	dw	0			
 43284                                  
 43285                                  CL0FATENTRY:
 43286 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43287                                  			; is used in pack/unpack rts.
 43288                                  			; in fat.asm if cluster 0 is specified.
 43289                                  			; SR;
 43290                                  IoStatFail:
 43291 00000083 00                      	db	0	; IoStatFail has been added to 
 43292                                  			; record a fail on an I24 
 43293                                  			; issued from IOFUNC on a status call. 
 43294                                  
 43295                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43296                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43297                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43298                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43299                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43300                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43301                                  ;
 43302                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43303                                  						; state of the 	buffers page.
 43304                                  						; This one byte is retained to 
 43305                                  						; keep the size of this data 
 43306                                  						; block the same.;
 43307                                  ALLOCMSAVE:
 43308 00000084 00                      	db	0	; M063: temp var. used to 
 43309                                  			; M063: save alloc method in
 43310                                  			; M063: msproc.asm
 43311                                  A20OFF_COUNT:
 43312 00000085 00                      	db	0	; M068: indiactes the # of 
 43313                                  			; M068: int 21 calls for 
 43314                                  			; M068: which A20 is off
 43315                                  DOS_FLAG:
 43316 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43317                                  			; definitions
 43318                                  UNPACK_OFFSET:
 43319 00000087 0000                    	dw	0	; saves pointer to the start
 43320                                  			; of unpack code in exepatch.
 43321                                  			; asm.
 43322                                  UMBFLAG:
 43323 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43324                                  			; M003: link state of the UMBs
 43325                                  			; M003: whether linked or not 
 43326                                  			; M003: to the DOS arena chain
 43327                                  SAVE_AX:
 43328 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43329                                  			; M000: in msproc.asm
 43330                                  UMB_HEAD:
 43331 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43332                                  			; M000: the first umb arena by 
 43333                                  			; M000: BIOS sysinit.
 43334                                  START_ARENA:
 43335 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43336                                  			; M000: from which DOS will 
 43337                                  			; M000: start its scan for alloc.
 43338                                  
 43339                                  ; End of SYSINITVar block
 43340                                  ;----------------------------------------------------------------------------
 43341                                  
 43342                                  ; 25/04/2019 - Retro DOS v4.0
 43343                                  
 43344                                  ; 16/07/2018
 43345                                  ; MSDOS 3.3 (& MDOS 6.0)
 43346                                  
 43347                                  ;
 43348                                  ; Sharer jump table
 43349                                  ;
 43350                                  
 43351                                  ;PUBLIC	JShare
 43352                                  	;EVEN
 43353                                  
 43354                                  ;JShare	LABEL	DWORD
 43355                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43356                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43357                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43358                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43359                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43360                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43361                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43362                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43363                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43364                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43365                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43366                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43367                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43368                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43369                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43370                                  
 43371                                  align 2
 43372                                  
 43373                                  JShare:
 43374 00000090 [4A07]0000              		DW	BadCall,0
 43375 00000094 [4E07]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43376 00000098 [4E07]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43377 0000009C [4A07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43378 000000A0 [4A07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43379 000000A4 [4A07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43380 000000A8 [4A07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43381 000000AC [4A07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43382 000000B0 [4E07]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43383 000000B4 [4A07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43384 000000B8 [4A07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43385 000000BC [4A07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43386 000000C0 [4E07]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43387 000000C4 [4A07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43388 000000C8 [4A07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43389                                  
 43390                                  
 43391                                  ;============================================================================
 43392                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43393                                  ;============================================================================
 43394                                  ; 25/04/2019 - Retro DOS 4.0 
 43395                                  ; 16/07/2018 - Retro DOS 3.0	
 43396                                  
 43397                                  ;Break <Initialized data and data used at DOS initialization>
 43398                                  ;----------------------------------------------------------------------------
 43399                                  
 43400                                  ; We need to identify the parts of the data area that are relevant to tasks
 43401                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43402                                  ; data will be gathered with the system code.  The process data under 2.x will
 43403                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43404                                  ;
 43405                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43406                                  ; describing that data item.
 43407                                  
 43408                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43409                                  
 43410                                  ;
 43411                                  ; Table of routines for assignable devices
 43412                                  ;
 43413                                  ; MSDOS allows assignment if the following standard devices:
 43414                                  ;   stdin  (usually CON input)
 43415                                  ;   stdout (usually CON output)
 43416                                  ;   auxin  (usually AUX input)
 43417                                  ;   auxout (usually AUX output)
 43418                                  ;   stdlpt (usually PRN output)
 43419                                  ;
 43420                                  ; SPECIAL NOTE:
 43421                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43422                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43423                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43424                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43425                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43426                                  ;   as EOF).
 43427                                  
 43428                                  ; Default SFTs for boot up
 43429                                  
 43430                                  		;PUBLIC	SFTABL
 43431                                  
 43432                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43433 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43434 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43435 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43436                                  		;times 295 db 0 ; MSDOS 6.0
 43437 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43438                                  
 43439                                  ; the next two variables relate to the position of the logical stdout/stdin
 43440                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43441                                  ; console.
 43442                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43443 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43444 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43445                                  					;	   of buffered input call
 43446 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43447 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43448                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43449 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43450 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43451 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43452                                  switch_character:
 43453 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43454 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43455 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43456 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43457 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43458                                  
 43459                                  ; The following table is a list of addresses that the sharer patches to be
 43460                                  ; PUSH AX to enable the critical sections
 43461                                  
 43462                                  		; DOSDATA:0315h (MSDOS 6.21)
 43463                                  
 43464                                  ;PUBLIC	CritPatch
 43465                                  
 43466                                  CritPatch:	; LABEL WORD
 43467                                  
 43468                                  ;IRP sect,<critDisk,critDevice>
 43469                                  
 43470                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43471                                  ;
 43472                                  ;SR; Change code patch address to a variable in data segment
 43473                                  ;
 43474                                  ;       dw OFFSET DOSDATA: redir_patch
 43475                                  ;       dw OFFSET DOSDATA: redir_patch
 43476                                  ;
 43477                                  ;;hkn	Short_Addr  E&sect
 43478                                  ;;hkn	Short_Addr  L&sect
 43479                                  ;
 43480                                  ;ELSE
 43481                                  ;	DW	0
 43482                                  ;	DW	0
 43483                                  ;ENDIF
 43484                                  ;ENDM
 43485                                  ;	DW	0
 43486                                  
 43487                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43488                                   
 43489 00000315 [0C0D]                  	dw 	redir_patch
 43490 00000317 [0C0D]                  	dw 	redir_patch			
 43491 00000319 [0C0D]                  	dw	redir_patch
 43492 0000031B [0C0D]                  	dw 	redir_patch
 43493                                  
 43494 0000031D 0000                    	dw	0
 43495                                  
 43496                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43497                                  ; Also, IBM server 1.0 requires this also.
 43498                                  
 43499                                  	;EVEN			; Force swap area to start on word boundry
 43500 0000031F 90                      align 2
 43501                                  	;PUBLIC	SWAP_START
 43502                                  SWAP_START:	; LABEL BYTE
 43503 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43504 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43505 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43506 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43507 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43508                                  
 43509                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43510 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43511 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43512                                  ; end warning
 43513                                   
 43514 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43515                                  
 43516 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43517 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43518 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43519 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43520 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43521 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43522                                  ;				; F.C. 2/17/86
 43523 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43524 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43525                                  ;align 2
 43526                                  SWAP_ALWAYS:	; 05/08/2018
 43527 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43528                                  				;   extended error type stuff.
 43529                                  				;   NOTE: does not have Correct value on
 43530                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43531                                  				;   GetExtendedError system calls)
 43532 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43533 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43534 00000340 0000                    FirstArena:	dw 0		; first free block found
 43535 00000342 0000                    BestArena:	dw 0		; best free block found
 43536 00000344 0000                    LastArena:	dw 0		; last free block found
 43537 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43538 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43539 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43540 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43541 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43542 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43543 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43544                                  
 43545                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43546                                  	;EVEN
 43547 0000034F 90                      align 2
 43548                                  		; DOSDATA:0350h (MSDOS 6.21)
 43549 00000350 00                      DAY:		db 0		; Day of month
 43550 00000351 00                      MONTH:		db 0		; Month of year
 43551 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43552 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43553 00000356 00                      WEEKDAY:	db 0		; Day of week
 43554                                  ; end warning
 43555                                  
 43556 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43557 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43558 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43559                                  
 43560                                  ; Combination of all device call parameters
 43561                                  	;PUBLIC	DEVCALL 	;
 43562                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43563                                  DEVCALL: ; 08/08/2018
 43564 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43565 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43566 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43567 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43568 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43569                                  
 43570                                  	;PUBLIC	CALLUNIT
 43571                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43572                                  CALLFLSH: ; LABEL   WORD	;
 43573 00000367 00                      CALLMED:	db 0		; media byte
 43574                                  CALLBR:	  ; LABEL   DWORD	;
 43575                                  	;PUBLIC	CALLXAD 	;
 43576                                  CALLXAD:  ; LABEL   DWORD	;
 43577 00000368 00                      CALLRBYT:	db 0		;
 43578                                  	;PUBLIC	CALLVIDM	;
 43579                                  CALLVIDM: ; LABEL   DWORD	;
 43580 00000369 00<rep 3h>              	times 3 db 0	;
 43581                                  	;PUBLIC CallBPB		;
 43582                                  CALLBPB:  ; LABEL   DWORD	;
 43583                                  CALLSCNT:			;
 43584 0000036C 0000                    		dw 0		;
 43585                                  	;PUBLIC	CALLSSEC	;
 43586                                  CALLSSEC: ; LABEL   WORD	;
 43587 0000036E 0000                    		dw 0		;
 43588 00000370 00000000                CALLVIDRW:	dd 0		;
 43589                                  ;MSDOS 6.0
 43590 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43591 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43592                                  
 43593                                  ; Same as above for I/O calls	;
 43594                                  				;
 43595                                  	;PUBLIC	IOCall		;
 43596                                  ;IOCALL	SRHEAD	<>		;
 43597                                  IOCALL:	; 07/08/2018
 43598 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43599 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43600 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43601 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43602 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43603                                  IOFLSH:	  ; LABEL   WORD	;
 43604                                          ;PUBLIC  IORCHR		;
 43605                                  IORCHR:	  ; LABEL   BYTE	;
 43606 00000389 00                      IOMED:		db 0		;
 43607 0000038A 00000000                IOXAD:		dd 0		;
 43608 0000038E 0000                    IOSCNT:		dw 0		;	
 43609 00000390 0000                    IOSSEC:		dw 0		;
 43610                                  
 43611                                  ; Call struct for DSKSTATCHK	;
 43612 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43613 00000393 00                      		db 0
 43614 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43615 00000395 0000                    DSKSTST:	dw 0		;
 43616 00000397 00<rep 8h>              	times 8	db 0		;
 43617 0000039F 00                      DSKCHRET:	db 0		;
 43618                                  
 43619                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43620                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43621                                  ;hkn   short_addr  DEVIOBUF	;
 43622                                  	
 43623 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43624 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43625 000003A4 0100                    DSKSTCNT:	dw 1		;
 43626 000003A6 0000                    		dw 0		;
 43627                                  
 43628 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43629                                  
 43630                                  ;MSDOS 6.0
 43631                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43632 000003A9 00000000                		dd 0		;MS. position
 43633 000003AD 00000000                		dd 0		;MS. length
 43634                                  
 43635                                  ;hkn; the foll. was moved from dosmes.asm.
 43636                                  
 43637                                  	;EVEN
 43638 000003B1 90                      align 2				; needed to maintain offsets
 43639                                  
 43640                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43641                                  USERNUM:
 43642 000003B2 0000                     		dw 0		; 24 bit user number
 43643 000003B4 00                      		db 0
 43644                                  ;IF IBM
 43645                                  ;IF IBMCOPYRIGHT
 43646                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43647                                  ;ELSE
 43648                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43649                                  ;ENDIF
 43650                                  ;ELSE
 43651 000003B5 FF                      OEMNUM:		DB 0FFh
 43652                                  ;ENDIF
 43653                                  
 43654                                  ;============================================================================
 43655                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43656                                  ;============================================================================
 43657                                  ; 25/04/2019 - Retro DOS 4.0
 43658                                  
 43659                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43660                                  ; ----------------------------------------------------------
 43661                                  ; This data section which was named as uninitialized data
 43662                                  ; (as overlayed by initialization code) but follows 
 43663                                  ; initialized data section from DOSDATA:03B6h address
 43664                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43665                                  ; and there is not overlaying..)
 43666                                  ; **********************************************************
 43667                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43668                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43669                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43670                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43671                                  ; TIMEBUF is at offset 03B6h.
 43672                                  ; **********************************************************	
 43673                                  
 43674                                  ;Break <Uninitialized data overlayed by initialization code>
 43675                                  ;----------------------------------------------------------------------------
 43676                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43677                                  ; Init code overlaps with data area below
 43678                                  
 43679                                  ; 	ORG     0
 43680                                  
 43681                                  MSDAT001S:	; label byte
 43682                                  
 43683                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43684                                  TIMEBUF: ;	times 6 db 0
 43685 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43686 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43687                                  
 43688                                  ; The following areas are used as temp buffer in EXEC system call
 43689                                  
 43690                                  ; DOSDATA:03BEh
 43691                                  OPENBUF: ;times 64  dw	0
 43692 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43693                                  RENBUF:	
 43694 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43695                                  
 43696                                  ; Buffer for search calls
 43697                                  SEARCHBUF:	
 43698 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43699                                  DUMMYCDS:  ;times 88 db 0
 43700 000004F3 00<rep 58h>             	times	curdirLen db 0
 43701                                  
 43702                                  ; End of contiguous buffer
 43703                                   
 43704                                  ; Temporary directory entry for use by many routines. Device directory
 43705                                  ; entries (bogus) are built here.
 43706                                  
 43707                                  ; DOSDATA:054Bh
 43708                                  
 43709                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43710                                  
 43711                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43712                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43713                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43714                                  
 43715                                  NAME1:	
 43716 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43717                                  NAME2:
 43718 00000557 00<rep Dh>              	times	13 db	0 		;
 43719                                  DESTSTART:
 43720 00000564 0000                    	dw	0			;
 43721                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43722                                  	;times	5  db	0
 43723 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43724                                  
 43725                                  ; End Temporary directory entry.
 43726                                  
 43727 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43728                                  EXTFCB:	
 43729 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43730                                  SATTRIB:
 43731 0000056D 00                      	db	0		; Storage for search attributes
 43732                                  OPEN_ACCESS:
 43733 0000056E 00                      	db	0		; access of open system call
 43734                                  FOUNDDEL:
 43735 0000056F 00                      	db	0		; true => file was deleted
 43736                                  FOUND_DEV:
 43737 00000570 00                      	db	0		; true => search found a device
 43738                                  FSPLICE:
 43739 00000571 00                      	db	0		; true => do a splice in transpath
 43740                                  FSHARING:
 43741 00000572 00                      	db	0		; TRUE => no redirection
 43742                                  SECCLUSPOS:
 43743 00000573 00                      	db	0		; Position of first sector within cluster
 43744 00000574 00                      TRANS:	db	0		;
 43745 00000575 00                      READOP:	db	0		;
 43746                                  THISDRV:
 43747 00000576 00                      	db	0		;
 43748                                  CLUSFAC:
 43749 00000577 00                      	db	0		;
 43750                                  CLUSSPLIT:
 43751 00000578 00                      	db	0		;
 43752                                  INSMODE:
 43753 00000579 00                      	db	0		; true => insert mode in buffered read
 43754 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43755 0000057B 00                      VOLID:	db	0		;
 43756                                  EXIT_TYPE:
 43757 0000057C 00                      	db	0		; type of exit...
 43758                                   
 43759                                  	;EVEN
 43760                                  
 43761 0000057D 90                      align 2
 43762                                  
 43763                                  ; DOSDATA:057Eh
 43764                                  
 43765                                  ; WARNING - the following two items are accessed as a word
 43766                                  
 43767                                  CREATING:
 43768 0000057E 00                      	db	0		; true => creating a file
 43769 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43770                                  				; = DIRFREE iff BUGBUG
 43771                                  EXITHOLD:
 43772 00000580 00000000                	dd	0		; Temp location for proc terminate
 43773                                  USER_SP:
 43774 00000584 0000                    	dw	0		; User SP for system call
 43775                                  USER_SS:
 43776 00000586 0000                    	dw	0		; User SS for system call
 43777                                  CONTSTK:
 43778 00000588 0000                    	dw	0		;
 43779                                  THISDPB:
 43780 0000058A 00000000                	dd	0		;
 43781                                  CLUSSAVE:
 43782 0000058E 0000                    	dw	0		;
 43783                                  CLUSSEC:
 43784 00000590 00000000                	dd	0		;>32mb			AC0000
 43785                                  PREREAD:
 43786 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43787 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43788                                  FATBYTE:
 43789 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43790                                  ; DOSDATA:059Ah
 43791 0000059A 00000000                DEVPT:	dd	0		;
 43792                                  THISSFT:
 43793 0000059E 00000000                	dd	0		; Address of user SFT
 43794                                  THISCDS:
 43795 000005A2 00000000                	dd	0		; Address of current CDS
 43796                                  THISFCB:
 43797 000005A6 00000000                	dd	0		; Address of user FCB
 43798 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43799 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43800 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43801                                  WFP_START:
 43802 000005B2 0000                    	dw	0		;
 43803                                  REN_WFP:
 43804 000005B4 0000                    	dw	0		;
 43805                                  CURR_DIR_END:
 43806 000005B6 0000                    	dw	0		;
 43807                                  NEXTADD:
 43808 000005B8 0000                    	dw	0		;
 43809                                  LASTPOS:
 43810 000005BA 0000                    	dw	0		;
 43811                                  CLUSNUM:
 43812 000005BC 0000                    	dw	0		;
 43813 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43814                                  DIRSTART:
 43815 000005C2 0000                    	dw	0		;
 43816 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43817 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43818                                                                  ; sectors
 43819                                  BYTSECPOS:
 43820 000005CC 0000                    	dw	0		; Position of first byte within sector
 43821                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43822 000005CE 0000<rep 2h>                    times	2 dw 0
 43823                                  BYTCNT1:
 43824 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43825                                  BYTCNT2:
 43826 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43827 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43828                                  ; DOSDATA:05D8h
 43829                                  ENTFREE:
 43830 000005D8 0000                    	dw	0		;
 43831                                  ENTLAST:
 43832 000005DA 0000                    	dw	0		;
 43833                                  NXTCLUSNUM:
 43834 000005DC 0000                    	dw	0		;
 43835                                  GROWCNT:
 43836 000005DE 00000000                	dd	0		;
 43837 000005E2 00000000                CURBUF:	dd	0		;
 43838 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43839 000005EA 0000                    SAVEBX:	dw	0		;
 43840 000005EC 0000                    SAVEDS:	dw	0		;
 43841                                  RESTORE_TMP:
 43842 000005EE 0000                    	dw	0		; return address for restore world
 43843 000005F0 0000                    NSS:	dw	0
 43844 000005F2 0000                    NSP:	dw	0
 43845                                  ; DOSDATA:05F4h
 43846                                  EXTOPEN_FLAG:
 43847 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43848                                  EXTOPEN_ON:
 43849 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43850                                  EXTOPEN_IO_MODE:
 43851 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43852                                  SAVE_DI:
 43853 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43854                                  SAVE_ES:
 43855 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43856                                  SAVE_DX:
 43857 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43858                                  SAVE_CX:
 43859 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43860                                  SAVE_BX:
 43861 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43862                                  SAVE_SI:
 43863 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43864                                  SAVE_DS:
 43865 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43866                                  
 43867                                  ; DOSDATA:0607h
 43868                                  
 43869                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43870                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43871                                  ; the high 16, the low 16 are still in the register.
 43872                                  
 43873                                  HIGH_SECTOR:	
 43874 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43875                                  ;OffsetMagicPatch:
 43876                                  ;	dw	MagicPatch ;scottq 8/6/92
 43877                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43878 00000609 0000                    	dw	0
 43879                                  				;see dos\mpatch.asm
 43880                                  DISK_FULL:
 43881 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43882                                  TEMP_VAR:
 43883 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43884                                  TEMP_VAR2:
 43885 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43886 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43887                                  DOS34_FLAG:
 43888 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43889                                  NO_FILTER_PATH:
 43890 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43891                                  NO_FILTER_DPATH:
 43892 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43893                                  ; M008
 43894                                  AbsRdWr_SS:
 43895 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43896                                  AbsRdWr_SP:
 43897 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43898                                  
 43899                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43900                                  ; M008
 43901                                   
 43902                                   
 43903                                  ; make those pushes fast!!!
 43904                                  
 43905                                  ;EVEN
 43906                                  
 43907 0000061F 90                      align 2
 43908                                  
 43909                                  StackSize   equ 180h  ; 384	; gross but effective
 43910                                  
 43911                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43912                                  ;				; made up their minds about
 43913                                   
 43914                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43915                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43916                                  
 43917                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43918                                   
 43919 00000620 00<rep 180h>                    times	StackSize db	0	;
 43920                                  AUXSTACK:			; LABEL   BYTE
 43921                                   
 43922 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43923                                  DSKSTACK:			; LABEL   BYTE
 43924                                   
 43925 00000920 00<rep 180h>                    times	StackSize db	0	;
 43926                                  IOSTACK:			; LABEL   BYTE
 43927                                  
 43928                                  ; DOSDATA:0AA0h 
 43929                                   
 43930                                  ; patch space for Boca folks.
 43931                                  ; Say What????!!! This does NOT go into the swappable area!
 43932                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43933                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43934                                   
 43935                                  IBMPATCH: ; label byte
 43936                                  PRINTER_FLAG:
 43937 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43938                                  VOLCHNG_FLAG:
 43939 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43940                                  VIRTUAL_OPEN:
 43941 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43942                                   
 43943                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43944                                  
 43945                                  FSeek_drive:
 43946 00000AA3 00                      	db	0		;AN000; fastseek drive #
 43947                                  FSeek_firclus:
 43948 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 43949                                  FSeek_logclus:
 43950 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 43951                                  FSeek_logsave:
 43952 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 43953                                  
 43954                                  ; DOSDATA:0AAAh
 43955                                  
 43956                                  TEMP_DOSLOC:
 43957 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 43958                                  				;at SYSINIT time.
 43959                                  SWAP_END:  ; LABEL   BYTE
 43960                                   
 43961                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 43962                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 43963                                  ; to include this byte.
 43964                                   
 43965 00000AAC 00                      	db	0
 43966                                  
 43967                                  ; DOSDATA:0AADh
 43968                                   
 43969                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 43970                                  
 43971                                  ;DOSDATA    ENDS
 43972                                  
 43973                                  ;============================================================================
 43974                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 43975                                  ;============================================================================
 43976                                  ; 27/04/2019 - Retro DOS 4.0
 43977                                  ; 16/07/2018 - Retro DOS 3.0
 43978                                  
 43979                                  ;DOSDATA Segment
 43980                                  
 43981                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 43982                                  
 43983                                  ;
 43984                                  ; upper case table
 43985                                  ; ---------------------------------------------------------------------------
 43986                                  UCASE_TAB:	; label   byte
 43987 00000AAD 8000                    	dw	128
 43988 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 43989 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 43990 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 43991 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 43992 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 43993 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 43994 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 43995 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 43996 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 43997 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 43998 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 43999 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44000 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44001 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44002 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44003 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44004                                  ;
 44005                                  ; file upper case table
 44006                                  ; ---------------------------------------------------------------------------
 44007                                  FILE_UCASE_TAB:	; label  byte
 44008 00000B2F 8000                    	dw	128
 44009 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44010 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44011 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44012 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44013 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44014 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44015 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44016 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44017 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44018 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44019 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44020 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44021 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44022 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44023 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44024 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44025                                  ;
 44026                                  ; file char list
 44027                                  ; ---------------------------------------------------------------------------
 44028                                  FILE_CHAR_TAB:	; label  byte
 44029 00000BB1 1600                    	dw	22				; length
 44030 00000BB3 0100FF                  	db	1,0,255 			; include all
 44031 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44032 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44032 00000BC2 7C3C3E2B3D3B2C     
 44033                                  	;db	24 dup (?)			; reserved
 44034 00000BC9 00<rep 18h>             	times	24 db 0
 44035                                  
 44036                                  ;
 44037                                  ; collate table
 44038                                  ; ---------------------------------------------------------------------------
 44039                                  COLLATE_TAB:	; label   byte
 44040 00000BE1 0001                    	dw	256
 44041 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44042 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44043 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44044 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44045 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44046 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44047 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44048 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44049 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44050 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44051 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44052 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44053 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44054 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44055 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44056 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44057 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44058 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44059 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44060 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44061 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44062 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44063 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44064 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44065 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44066 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44067 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44068 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44069 00000CC3 E053                    	db	224,"S"
 44070 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44071 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44072 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44073 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44074                                  
 44075                                  ; ------------------------------------------------<MSKK01>----------------------
 44076                                  
 44077                                  ; DOSDATA:0CE3h
 44078                                  
 44079                                  ; 29/04/2019
 44080                                  
 44081                                  ; dbcs is not supported in DOS 3.3
 44082                                  ;		   DBCS_TAB	    CC_DBCS <>
 44083                                  ;
 44084                                  ; DBCS for DOS 4.00			   2/12/KK
 44085                                  
 44086                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44087                                  ; ------------------------------------------------<MSKK01>----------------------
 44088                                  ;ifdef	DBCS
 44089                                  ; ifdef	  JAPAN
 44090                                  ;		dw	6		; <MSKK01>
 44091                                  ;		db	081h,09fh	; <MSKK01>
 44092                                  ;		db	0e0h,0fch	; <MSKK01>
 44093                                  ;		db	0,0		; <MSKK01>
 44094                                  ;
 44095                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44096                                  ; endif
 44097                                  ; ifdef	  TAIWAN
 44098                                  ;		dw	4		; <TAIWAN>
 44099                                  ;		db	081h,0FEh	; <TAIWAN>
 44100                                  ;		db	0,0		; <TAIWAN>
 44101                                  ;
 44102                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44103                                  ; endif
 44104                                  ; ifdef   KOREA                         ; Keyl
 44105                                  ;               dw      4               ; <KOREA>
 44106                                  ;               db      0A1h,0FEh       ; <KOREA>
 44107                                  ;               db      0,0             ; <KOREA>
 44108                                  ;
 44109                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44110                                  ;  endif
 44111                                  ;else
 44112 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44113                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44114 00000CE5 00<rep 10h>             		times	16 db 0
 44115                                  
 44116                                  ;		dw	6		;  2/12/KK
 44117                                  ;		db	081h,09Fh	;  2/12/KK
 44118                                  ;		db	0E0h,0FCh	;  2/12/KK
 44119                                  ;		db	0,0		;  2/12/KK
 44120                                  ;
 44121                                  ;endif
 44122                                  ; ------------------------------------------------<MSKK01>----------------------
 44123                                  
 44124                                  ; DOSDATA:0CF5h
 44125                                  
 44126                                  ; ---------------------------------------------------------------------------
 44127                                  ;
 44128                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44129                                  ;     ENTRY: AL = Character to map
 44130                                  ;     EXIT:  AL = The converted character
 44131                                  ; Alters no registers except AL and flags.
 44132                                  ; The routine should do nothing to chars below 80H.
 44133                                  ; ---------------------------------------------------------------------------
 44134                                  ; Example:
 44135                                  
 44136                                  MAP_CASE:
 44137                                  ;Procedure MAP_CASE,FAR
 44138                                  
 44139 00000CF5 3C80                    	CMP	AL,80h
 44140 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44141 00000CF9 CB                      	RETF
 44142                                  Map1:
 44143 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44144 00000CFC 1E                      	PUSH	DS
 44145 00000CFD 53                      	PUSH	BX
 44146 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44147                                  FINISH:
 44148 00000D01 0E                      	PUSH	CS		;Move to DS
 44149 00000D02 1F                      	POP	DS
 44150 00000D03 D7                      	XLAT			;Get upper case character
 44151 00000D04 5B                      	POP	BX
 44152 00000D05 1F                      	POP	DS
 44153                                  L_RET:	
 44154 00000D06 CB                      	RETF
 44155                                  
 44156                                  ;EndProc MAP_CASE
 44157                                  
 44158                                  ; ---------------------------------------------------------------------------
 44159                                  
 44160                                  ; The variables for ECS version are moved here for the same data alignments
 44161                                  ; as IBM-DOS and MS-DOS.
 44162                                  
 44163                                  InterChar:
 44164 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44165                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44166                                  DUMMY:	; LABEL   WORD
 44167                                  InterCon:  
 44168 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44169                                  SaveCurFlg:
 44170 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44171                                  
 44172                                  ; ---------------------------------------------------------------------------
 44173                                  
 44174 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44175                                  redir_patch:
 44176 00000D0C 00                      	  db	0
 44177                                  
 44178                                  ; DOSDATA:0D0Dh
 44179                                  
 44180                                  Mark1:	; label byte
 44181                                  
 44182                                  ;IF2
 44183                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44184                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44185                                  ;	ENDIF
 44186                                  ;ENDIF
 44187                                  
 44188 00000D0D 00<rep 5h>              	  times 5 db 0
 44189                                  
 44190                                  ;############################################################################
 44191                                  ;
 44192                                  ; ** HACK FOR DOS 4.0 REDIR **
 44193                                  ; 
 44194                                  ; The redir requires the following:
 44195                                  ;
 44196                                  ;	MSVERS	offset D12H
 44197                                  ;	YRTAB	offset D14H
 44198                                  ; 	MONTAB	offset D1CH
 44199                                  ;
 44200                                  ; WARNING! WARNING!
 44201                                  ; 
 44202                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44203                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44204                                  ;
 44205                                  ; CURRENTLY MARK1 = 0D0DH
 44206                                  ;
 44207                                  ;############################################################################
 44208                                  
 44209                                  	;ORG	0D12h
 44210                                  
 44211                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44212                                  
 44213                                  	;db	6
 44214                                  	;db	20
 44215                                  
 44216                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44217                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44218 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44219 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44220                                  
 44221                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44222                                  ;
 44223                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44224                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44225                                  
 44226                                  ; Days in year
 44227                                  
 44228                                  YRTAB:   
 44229 00000D14 C8A6                    	DB	200,166			; Leap year
 44230 00000D16 C8A5                    	DB	200,165
 44231 00000D18 C8A5                    	DB	200,165
 44232 00000D1A C8A5                    	DB	200,165
 44233                                  
 44234                                  ; Days of each month
 44235                                  
 44236                                  MONTAB:        
 44237 00000D1C 1F                      	DB      31                      ; January
 44238                                  february:
 44239 00000D1D 1C                      	DB	28 			; February--reset each 
 44240                                  					; time year changes
 44241 00000D1E 1F                              DB      31                      ; March
 44242 00000D1F 1E                              DB      30                      ; April
 44243 00000D20 1F                              DB      31                      ; May
 44244 00000D21 1E                              DB      30                      ; June
 44245 00000D22 1F                              DB      31                      ; July
 44246 00000D23 1F                              DB      31                      ; August
 44247 00000D24 1E                              DB      30                      ; September
 44248 00000D25 1F                              DB      31                      ; October
 44249 00000D26 1E                              DB      30                      ; November
 44250 00000D27 1F                              DB      31                      ; December
 44251                                  
 44252                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44253                                  
 44254                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44255                                  
 44256                                  SysInitTable:
 44257                                  	;dw	SYSINITVAR
 44258 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44259 00000D2A 0000                            dw      0		; segment
 44260 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44261 00000D2E 0000                            dw      0		; segment of pointer
 44262                                  
 44263                                  ; DOS 3.3 F.C. 6/12/86
 44264                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44265                                  
 44266                                  FastTable:				; a better name
 44267                                  FastOpenTable:
 44268 00000D30 0200                    	dw      2                       ; number of entries
 44269 00000D32 [1B13]                  	dw      FastRet			; pointer to ret instr.
 44270 00000D34 0000                    	dw      0                       ; and will be modified by
 44271 00000D36 [1B13]                  	dw      FastRet			; FASTxxx when loaded in
 44272 00000D38 0000                    	dw      0                       
 44273                                  
 44274                                  ; DOS 3.3 F.C. 6/12/86
 44275                                  
 44276                                  FastFlg:				; flags
 44277                                  FastOpenFlg:
 44278 00000D3A 00                      	db	0			; don't change the foll: order  
 44279                                  
 44280                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44281                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44282                                  ; or filled by FastOPen when calling FastOpen Lookup
 44283                                  
 44284                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44285                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44286                                  	;times	11 db 0
 44287 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44288                                  
 44289                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44290                                  ; when calling FastOpen Lookup
 44291                                  
 44292                                  Dir_Info_Buff:	; label  byte
 44293                                  	;db   	SIZE dir_entry dup (0)
 44294                                  	;times	32 db 0
 44295 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44296                                  
 44297                                  Next_Element_Start:
 44298 00000D66 0000                    	dw	0			; save next element start offset
 44299                                  Del_ExtCluster:
 44300 00000D68 0000                    	dw	0			; for dos_delete                       
 44301                                  
 44302                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44303                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44304                                  ; not to destroy the INT 21 stack saved for the user.
 44305                                  
 44306                                  USER_SP_2F:	; LABEL  WORD
 44307 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44308                                  
 44309                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44310                                  DOS_TEMP:	; label  word		; temporary word
 44311                                  FAKE_STACK_2F:  
 44312                                  	; dw  14 dup (0)		; 12 register temporary storage
 44313 00000D6C 0000<rep Eh>            	times 14 dw 0
 44314                                  
 44315                                  Hash_Temp: 	;label  word		; temporary word             
 44316                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44317 00000D88 0000<rep 4h>            	times 4 dw 0
 44318                                              	
 44319                                  SCAN_FLAG:	
 44320 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44321                                  DATE_FLAG:
 44322 00000D91 0000                    	dw     0                	; flag to update the date
 44323                                  
 44324                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44325 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44326                                  
 44327                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44328 00000D95 00000000                	dd     0               		; for extended error                   
 44329 00000D99 00000000                	dd     0			; for parser                           
 44330 00000D9D 00000000                	dd     0			; for critical errror                  
 44331 00000DA1 00000000                	dd     0			; for IFS                              
 44332 00000DA5 00000000                	dd     0			; for code reduction                   
 44333                                  
 44334                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44335 00000DA9 FFFFFFFF                	dd     -1                                                        
 44336                                  SC_SECTOR_SIZE:
 44337 00000DAD 0000                    	dw	0			; sector size for SC                 
 44338                                  SC_DRIVE:
 44339 00000DAF 00                      	db	0			; drive # for secondary cache        
 44340                                  CurSC_DRIVE:
 44341 00000DB0 FF                      	db	-1			; current SC drive                   
 44342                                  CurSC_SECTOR:
 44343 00000DB1 00000000                	dd	0			; current SC starting sector         
 44344                                  SC_STATUS:
 44345 00000DB5 0000                    	dw	0			; SC status word                     
 44346                                  SC_FLAG:
 44347 00000DB7 00                      	db	0			; SC flag                            
 44348                                  AbsDskErr:
 44349 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44350                                                                                            
 44351                                  NO_NAME_ID:	; label byte                                                           
 44352 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44352 00000DC3 2020               
 44353                                  
 44354                                  ;hkn; moved from TABLE segment in kstrin.asm
 44355                                  
 44356                                  KISTR001S:	; label	byte		; 2/17/KK
 44357 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44358                                  KISTR001E:	; label	byte		; 2/17/KK
 44359                                  
 44360                                  ; the nul device driver used to be part of the code. However, since the 
 44361                                  ; header is in the data, and the entry points are only given as an offset,
 44362                                  ; the strategy and interrupt entry points must also be in the data now.
 44363                                  
 44364                                  ; DOSDATA:0DC6h
 44365                                  
 44366                                  SNULDEV:
 44367                                  ;procedure snuldev,far
 44368                                  	;or	word [es:bx+3],100h
 44369                                  	; 17/12/2022
 44370                                  	;or	byte [es:bx+4],01h
 44371                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44372                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44373 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44374                                  INULDEV:
 44375 00000DCC CB                      	retf				; must not be a return!
 44376                                  ;endproc snuldev
 44377                                  
 44378                                  ;M044
 44379                                  ; Second part of save area for saving last para of Windows memory
 44380                                  
 44381                                  WinoldPatch2:
 44382                                  	;db	8 dup (?)	; M044
 44383 00000DCD 00<rep 8h>              	times	8 db 0	
 44384                                  UmbSave2:
 44385                                  	;db	5 dup (?)	; M062
 44386 00000DD5 00<rep 5h>              	times	5 db 0
 44387                                  UmbSaveFlag:
 44388 00000DDA 00                      	db	0		; M062
 44389                                  
 44390                                  ; DOSDATA:0DDBh
 44391                                  
 44392                                  Mark2:	; label byte
 44393                                  
 44394                                  ;IF2
 44395                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44396                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44397                                  ;	ENDIF
 44398                                  ;ENDIF
 44399                                  
 44400                                  ;############################################################################
 44401                                  ;
 44402                                  ; ** HACK FOR DOS 4.0 REDIR **
 44403                                  ; 
 44404                                  ; The redir requires the following:
 44405                                  ;
 44406                                  ;	ERR_TABLE_21	offset DDBH
 44407                                  ;	ERR_TABLE_24	offset E5BH
 44408                                  ; 	ErrMap24	offset EABH
 44409                                  ;
 44410                                  ; WARNING! WARNING!
 44411                                  ;
 44412                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44413                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44414                                  ;
 44415                                  ; CURRENTLY MARK2 = 0DD0H
 44416                                  ;
 44417                                  ;############################################################################
 44418                                  
 44419                                  	;ORG	0DDBh
 44420                                  
 44421                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44422                                  
 44423                                  ; ---------------------------------------------------------------------------
 44424                                  ;
 44425                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44426                                  ; errors. Each entry is 4 bytes long:
 44427                                  ;
 44428                                  ;       Err#,Class,Action,Locus
 44429                                  ;
 44430                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44431                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44432                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44433                                  ;
 44434                                  ; ---------------------------------------------------------------------------
 44435                                  
 44436                                  ;ErrTab  Macro   err,class,action,locus
 44437                                  ;ifidn <locus>,<0FFh>
 44438                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44439                                  ;ELSE
 44440                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44441                                  ;ENDIF
 44442                                  ;ENDM
 44443                                  
 44444                                  ERR_TABLE_21: ; LABEL   BYTE
 44445 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44446 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44447 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44448 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44449 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44450 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44451 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44452 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44453 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44454 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44455 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44456 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44457 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44458 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44459 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44460 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44461 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44462 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44463 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44464 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44465 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44466 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44467 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44468 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44469 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44470 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44471 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44472 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44473                                      ; MSDOS 6.0
 44474 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44475 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44476 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44477 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44478                                  
 44479                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44480                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44481                                  ;		db 2,8,3,2
 44482                                  ;		db 3,8,3,2
 44483                                  ;		db 4,1,4,1
 44484                                  ;		db 5,3,3,0FFh
 44485                                  ;		db 6,7,4,1
 44486                                  ;		db 7,7,5,5
 44487                                  ;		db 8,1,4,5
 44488                                  ;		db 9,7,4,5
 44489                                  ;		db 0Ah,7,4,5
 44490                                  ;		db 0Bh,9,3,1
 44491                                  ;		db 0Ch,7,4,1
 44492                                  ;		db 0Dh,9,4,1
 44493                                  ;		db 0Fh,8,3,2
 44494                                  ;		db 10h,3,3,2
 44495                                  ;		db 11h,0Dh,3,2
 44496                                  ;		db 12h,8,3,2
 44497                                  ;		db 50h,0Ch,3,2
 44498                                  ;		db 20h,0Ah,2,2
 44499                                  ;		db 21h,0Ah,2,2
 44500                                  ;		db 54h,1,4,0FFh
 44501                                  ;		db 56h,3,3,1
 44502                                  ;		db 52h,1,4,2
 44503                                  ;		db 32h,9,3,3
 44504                                  ;		db 55h,0Ch,3,3
 44505                                  ;		db 57h,9,3,1
 44506                                  ;		db 53h,0Dh,4,1
 44507                                  ;		db 24h,1,4,5
 44508                                  ; MSDOS 6.0 (MSDOS 6.21)
 44509                                  ;		db 26h,1,4,1
 44510                                  ;		db 27h,1,4,1
 44511                                  ;		db 5Ah,0Dh,4,2
 44512                                  ; MSDOS 6.0 & MSDOS 3.3
 44513                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44514                                  
 44515                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44516                                  
 44517                                  ; ---------------------------------------------------------------------------
 44518                                  ;
 44519                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44520                                  ; errors. Each entry is 4 bytes long:
 44521                                  ;
 44522                                  ;       Err#,Class,Action,Locus
 44523                                  ;
 44524                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44525                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44526                                  ; THE END.
 44527                                  ;
 44528                                  ; ---------------------------------------------------------------------------
 44529                                  
 44530                                  ERR_TABLE_24: ; LABEL   BYTE
 44531 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44532 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44533 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44534 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44535 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44536 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44537 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44538 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44539 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44540 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44541 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44542 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44543 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44544 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44545 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44546 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44547 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44548 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44549 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44550 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44551                                  
 44552                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44553                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44554                                  ;		db 14h,4,5,1
 44555                                  ;		db 15h,5,7,0FFh
 44556                                  ;		db 16h,4,5,1
 44557                                  ;		db 17h,0Bh,4,2
 44558                                  ;		db 18h,4,5,1
 44559                                  ;		db 19h,5,1,2
 44560                                  ;		db 1Ah,0Bh,7,2
 44561                                  ;		db 1Bh,0Bh,4,2
 44562                                  ;		db 1Ch,2,7,4
 44563                                  ;		db 1Dh,5,4,0FFh
 44564                                  ;		db 1Eh,5,4,0FFh
 44565                                  ;		db 1Fh,0Dh,4,0FFh
 44566                                  ;		db 20h,0Ah,2,2
 44567                                  ;		db 21h,0Ah,2,2
 44568                                  ;		db 22h,0Bh,7,2
 44569                                  ;		db 32h,9,3,3
 44570                                  ;		db 23h,7,4,1
 44571                                  ;		db 24h,1,4,5
 44572                                  ;		db 0FFh,0Dh,5,0FFh
 44573                                  
 44574                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44575                                  
 44576                                  ; ---------------------------------------------------------------------------
 44577                                  ;
 44578                                  ; We need to map old int 24 errors and device driver errors into the new set
 44579                                  ; of errors. The following table is indexed by the new errors
 44580                                  ;
 44581                                  ; ---------------------------------------------------------------------------
 44582                                  
 44583                                  ;Public  ErrMap24
 44584                                  ErrMap24: ; Label   BYTE
 44585 00000EAB 13                          DB  error_write_protect	; 0
 44586 00000EAC 14                          DB  error_bad_unit		; 1
 44587 00000EAD 15                          DB  error_not_ready		; 2
 44588 00000EAE 16                          DB  error_bad_command	; 3
 44589 00000EAF 17                          DB  error_CRC		; 4
 44590 00000EB0 18                          DB  error_bad_length	; 5
 44591 00000EB1 19                          DB  error_seek		; 6
 44592 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 44593 00000EB3 1B                          DB  error_sector_not_found	; 8
 44594 00000EB4 1C                          DB  error_out_of_paper	; 9
 44595 00000EB5 1D                          DB  error_write_fault	; A
 44596 00000EB6 1E                          DB  error_read_fault	; B
 44597 00000EB7 1F                          DB  error_gen_failure	; C
 44598 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 44599 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 44600 00000EBA 22                          DB  error_wrong_disk	; F
 44601                                  
 44602                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44603                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44604                                  	
 44605                                  ErrMap24End: ; LABEL   BYTE
 44606                                  
 44607                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44608                                  
 44609                                  ; ---------------------------------------------------------------------------
 44610                                  
 44611                                  ; 27/04/2019 - Retro DOS v4.0
 44612                                  
 44613                                  FIRST_BUFF_ADDR:
 44614 00000EBB 0000                    	dw	0			; first buffer address               
 44615                                  SPECIAL_VERSION:
 44616 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 44617                                  FAKE_COUNT:
 44618 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44619                                  OLD_FIRSTCLUS:
 44620 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44621                                  
 44622                                  ; ---------------------------------------------------------------------------
 44623                                  
 44624                                  ;smr; moved from TABLE segment in exec.asm
 44625                                  
 44626 00000FC0 0000                    exec_init_SP: dw 0
 44627 00000FC2 0000                    exec_init_SS: dw 0
 44628 00000FC4 0000                    exec_init_IP: dw 0
 44629 00000FC6 0000                    exec_init_CS: dw 0
 44630                                  
 44631                                  exec_signature:
 44632 00000FC8 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44633                                  exec_len_mod_512:
 44634 00000FCA 0000                    	dw	0	; low 9 bits of length
 44635                                  exec_pages:
 44636 00000FCC 0000                    	dw	0	; number of 512b pages in file
 44637                                  exec_rle_count:
 44638 00000FCE 0000                    	dw	0	; count of reloc entries
 44639                                  exec_par_dir:
 44640 00000FD0 0000                    	dw	0	; number of paragraphs before image
 44641                                  exec_min_BSS:
 44642 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 44643                                  exec_max_BSS:
 44644 00000FD4 0000                    	dw	0	; max number of para of BSS
 44645                                  exec_SS:
 44646 00000FD6 0000                    	dw	0	; stack of image
 44647                                  exec_SP:
 44648 00000FD8 0000                    	dw	0	; SP of image
 44649                                  exec_chksum:
 44650 00000FDA 0000                    	dw	0	; checksum  of file (ignored)
 44651                                  exec_IP:
 44652 00000FDC 0000                    	dw	0	; IP of entry
 44653                                  exec_CS:
 44654 00000FDE 0000                    	dw	0	; CS of entry
 44655                                  exec_rle_table:
 44656 00000FE0 0000                    	dw	0	; byte offset of reloc table
 44657                                  
 44658                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44659                                  
 44660                                  ;smr; eom
 44661                                  
 44662                                  ; ---------------------------------------------------------------------------
 44663                                  
 44664                                  ;SR;
 44665                                  ; WIN386 instance table for DOS
 44666                                  
 44667                                  Win386_Info:
 44668 00000FE2 0300                    	db	3, 0
 44669 00000FE4 000000000000000000-     	dd	0, 0, 0
 44669 00000FED 000000             
 44670 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 44671                                  
 44672                                  Instance_Table:
 44673 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 44674 00000FFA [3200]00000400          	dw	BCON, 0, 4
 44675 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 44676 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 44677 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44678 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44679 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44680 0000101E 00000000                	dw	0, 0
 44681                                  
 44682                                  ; M001; SR;
 44683                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44684                                  ; M001; some DOS variables. Note that the only really important variable in 
 44685                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44686                                  ; M001; which does not need to be done in DOS 5.0. 
 44687                                  
 44688                                  Win386_DOSVars:
 44689 00001022 05                      	db	5	;Major version 5 ; M001
 44690 00001023 00                      	db	0	;Minor version 0 ; M001
 44691 00001024 [EC05]                  	dw	SAVEDS	; M001
 44692 00001026 [EA05]                  	dw	SAVEBX	; M001
 44693 00001028 [2103]                  	dw	INDOS	; M001
 44694 0000102A [3E03]                  	dw	USER_ID	; M001
 44695 0000102C [1503]                  	dw	CritPatch ; M001
 44696 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 44697                                  
 44698                                  ;SR;
 44699                                  ; Flag to indicate whether WIN386 is running or not
 44700                                  
 44701 00001030 00                      IsWin386: db	0
 44702                                  
 44703                                  ;M018
 44704                                  ; This variable contains the path to the VxD device needed for Win386
 44705                                  
 44706 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44706 0000103A 2E33383600         
 44707                                  
 44708                                  ;End WIN386 support
 44709                                  
 44710                                  ; ---------------------------------------------------------------------------
 44711                                  
 44712                                  ;SR;
 44713                                  ; These variables have been added for the special lie support for device
 44714                                  ;drivers.
 44715                                  ;
 44716                                  
 44717                                  DriverLoad:	
 44718 0000103F 01                      	db	1	;initialized to do special handling
 44719                                  BiosDataPtr:
 44720 00001040 00000000                	dd	0
 44721                                  
 44722                                  ; 27/04/2019 - Retro DOS v4.0
 44723                                  ; 04/11/2022
 44724                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44725                                  
 44726                                  ;------------------------------------------------------------------------
 44727                                  ; Patch for Sidekick
 44728                                  ;
 44729                                  ; A documented method for finding the offset of the Errormode flag in the 
 44730                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44731                                  ; for the following sequence of instructions.
 44732                                  ;
 44733                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44734                                  ;
 44735                                  ; The Offset of Errormode flag is 0320h
 44736                                  ;
 44737                                  ;------------------------------------------------------------------------
 44738                                  
 44739 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44740 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 44741 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44742 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 44743                                  
 44744                                  ;--------------------------------------------------------------------------
 44745                                  ; Patch for PortOfEntry - M036
 44746                                  ;
 44747                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44748                                  ; the offset of Errormode flag. The following patch is to support them in 
 44749                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44750                                  ;
 44751                                  ;---------------------------------------------------------------------------
 44752                                  
 44753 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44754 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 44755 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44756                                  
 44757                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44758                                  
 44759                                  ;--------------------------------------------------------------------------
 44760                                  
 44761                                  ;*** New FCB Implementation
 44762                                  ; This variable is used as a cache in the new FCB implementation to remember
 44763                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44764                                  
 44765 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44766                                  
 44767                                  ;DOSDATA ENDS
 44768                                  
 44769                                  ;============================================================================
 44770                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44771                                  ;============================================================================
 44772                                  ; 27/04/2019 - Retro DOS 4.0
 44773                                  
 44774                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44775                                  
 44776                                  ;---------------------------------------------------------------------------
 44777                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44778                                  ;----------------------------------------------------------------------------
 44779                                  	
 44780                                  	;db	90h
 44781                                  
 44782                                  	;EVEN
 44783 00001061 90                      align 2
 44784                                  
 44785                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44786                                  
 44787                                  DOSINTTABLE:	; LABEL	DWORD
 44788                                  
 44789                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44790                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44791                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44792                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44793                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44794                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44795                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44796                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44797                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44798                                  	
 44799 00001062 [9953]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44800 00001066 [1B03]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44801 0000106A [4703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44802 0000106E [7A05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44803 00001072 [0106]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44804 00001076 [E762]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44805 0000107A [5007]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44806 0000107E [2203]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44807 00001082 [2103]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44808                                  
 44809 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 44810 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 44811                                  
 44812                                  ;-------------------------------------------------------------------------
 44813                                  ;
 44814                                  ; LOW MEM STUB:
 44815                                  ;
 44816                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44817                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44818                                  ; DOS load in HIMEM. Each entry point does this.
 44819                                  ;
 44820                                  ; 	1. if jmp to 8 has been patched out
 44821                                  ;	   2. if A20 OFF
 44822                                  ;	      3. Enable A20
 44823                                  ;	   4. else 
 44824                                  ;	      5. just go to dos entry
 44825                                  ;	   6. endif
 44826                                  ;	7. else
 44827                                  ;	   8. just go to dos entry
 44828                                  ;	9. endif
 44829                                  ;
 44830                                  ;--------------------------------------------------------------------------
 44831                                  
 44832                                  ; 27/04/2019 - Retro DOS v4.0
 44833                                  
 44834                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44835                                  
 44836                                  ;--------------------------------------------------------------------------
 44837                                  ;
 44838                                  ; DIVIDE BY 0 handler
 44839                                  ;
 44840                                  ;--------------------------------------------------------------------------
 44841                                  
 44842                                  ldivov:
 44843                                  	; The following jump, skipping the XMS calls will be patched to 
 44844                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44845                                  	; needed because the stub is installed even before the XMS driver
 44846                                  	; is loaded if the user specifies dos=high in the config.sys
 44847                                  i0patch:
 44848 0000108A EB03                    	jmp	short divov_cont	
 44849                                  
 44850 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44851                                  divov_cont:
 44852 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44853                                  
 44854                                  ;------------------------------------------------------------------------
 44855                                  ;
 44856                                  ; INT 20 Handler
 44857                                  ;
 44858                                  ; Here we do not have to set up the stack to return here as the abort call
 44859                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44860                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44861                                  ; will be restored then.
 44862                                  ;
 44863                                  ;-------------------------------------------------------------------------
 44864                                  
 44865                                  lquit:
 44866                                  	; The following jump, skipping the XMS calls will be patched to 
 44867                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44868                                  	; needed because the stub is installed even before the XMS driver
 44869                                  	; is loaded if the user specifies dos=high in the config.sys
 44870                                  i20patch:
 44871 00001094 EB03                    	jmp	short quit_cont	
 44872                                  
 44873 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44874                                  quit_cont:
 44875 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44876                                  
 44877                                  ;--------------------------------------------------------------------------
 44878                                  ;
 44879                                  ; INT 21 Handler
 44880                                  ;
 44881                                  ;--------------------------------------------------------------------------
 44882                                  
 44883                                  lcommand:
 44884                                  	; The following jump, skipping the XMS calls will be patched to 
 44885                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44886                                  	; needed because the stub is installed even before the XMS driver
 44887                                  	; is loaded if the user specifies dos=high in the config.sys
 44888                                  i21patch:
 44889 0000109E EB03                    	jmp	short command_cont	
 44890                                  
 44891 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44892                                  command_cont:
 44893 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44894                                  
 44895                                  ;------------------------------------------------------------------------
 44896                                  ;
 44897                                  ; INT 25 
 44898                                  ;
 44899                                  ;----------------------------------------------------------------------------
 44900                                  
 44901                                  labsdrd:
 44902                                  	; The following jump, skipping the XMS calls will be patched to 
 44903                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44904                                  	; needed because the stub is installed even before the XMS driver
 44905                                  	; is loaded if the user specifies dos=high in the config.sys
 44906                                  i25patch:
 44907 000010A8 EB03                    	jmp	short absdrd_cont	
 44908                                  
 44909 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44910                                  absdrd_cont:
 44911 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44912                                  
 44913                                  ;-------------------------------------------------------------------------
 44914                                  ;
 44915                                  ; INT 26
 44916                                  ;
 44917                                  ;-----------------------------------------------------------------------
 44918                                  
 44919                                  labsdwrt:
 44920                                  	; The following jump, skipping the XMS calls will be patched to 
 44921                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44922                                  	; needed because the stub is installed even before the XMS driver
 44923                                  	; is loaded if the user specifies dos=high in the config.sys
 44924                                  i26patch:
 44925 000010B2 EB03                    	jmp	short absdwrt_cont	
 44926                                  
 44927 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44928                                  absdwrt_cont:
 44929 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44930                                  
 44931                                  ;------------------------------------------------------------------------
 44932                                  ;
 44933                                  ; INT 27
 44934                                  ;
 44935                                  ;-----------------------------------------------------------------------
 44936                                  
 44937                                  lstay_resident:
 44938                                  	; The following jump, skipping the XMS calls will be patched to 
 44939                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44940                                  	; needed because the stub is installed even before the XMS driver
 44941                                  	; is loaded if the user specifies dos=high in the config.sys
 44942                                  i27patch:
 44943 000010BC EB03                    	jmp	short sr_cont	
 44944                                  
 44945 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44946                                  sr_cont:
 44947 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 44948                                  
 44949                                  ;-----------------------------------------------------------------------------
 44950                                  ;
 44951                                  ; INT 2f
 44952                                  ;
 44953                                  ;-------------------------------------------------------------------------
 44954                                  
 44955                                  lint2f:
 44956                                  	; The following jump, skipping the XMS calls will be patched to 
 44957                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44958                                  	; needed because the stub is installed even before the XMS driver
 44959                                  	; is loaded if the user specifies dos=high in the config.sys
 44960                                  i2fpatch:
 44961 000010C6 EB03                    	jmp	short int2f_cont	
 44962                                  
 44963 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44964                                  int2f_cont:
 44965 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 44966                                  
 44967                                  ;-----------------------------------------------------------------------------
 44968                                  ;
 44969                                  ; CPM entry
 44970                                  ;
 44971                                  ;------------------------------------------------------------------------
 44972                                  
 44973                                  lcall_entry:
 44974                                  	; The following jump, skipping the XMS calls will be patched to 
 44975                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44976                                  	; needed because the stub is installed even before the XMS driver
 44977                                  	; is loaded if the user specifies dos=high in the config.sys
 44978                                  cpmpatch:
 44979 000010D0 EB03                    	jmp	short callentry_cont	
 44980                                  
 44981 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44982                                  callentry_cont:
 44983 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 44984                                  
 44985                                  ;--------------------------------------------------------------------------
 44986                                  
 44987                                  lirett:
 44988 000010DA CF                      	iret
 44989                                  
 44990                                  ;---------------------------------------------------------------------------
 44991                                  ;
 44992                                  ; LowIntXX:
 44993                                  ;
 44994                                  ; Interrupts from DOS that pass control to a user program must be done from
 44995                                  ; low memory, as the user program may change the state of the A20 line or
 44996                                  ; they may require that the A20 line be OFF. The following piece of code is
 44997                                  ; far call'd from the following places in DOS:
 44998                                  ;
 44999                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45000                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45001                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45002                                  ;
 45003                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45004                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45005                                  ; before doing the ints and then do a far junp back into DOS.
 45006                                  ;
 45007                                  ;---------------------------------------------------------------------------
 45008                                  
 45009 000010DB 00000000                DosRetAddr23:	dd	0
 45010 000010DF 00000000                DosRetAddr24:	dd	0
 45011 000010E3 00000000                DosRetAddr28:	dd	0
 45012                                  
 45013                                  	; Execute int 23h from low memory
 45014                                  LowInt23:
 45015                                  					; save the return address that is on
 45016                                  					; the stack
 45017 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 45018 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 45019                                  
 45020 000010F1 CD23                    	int	23h			; ctrl C
 45021                                  					; turn on A20 it has been turned OFF
 45022                                  					; by int 28/23/24 handler.
 45023                                  
 45024 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45025                                  
 45026 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45027                                  
 45028                                  
 45029                                  	; Execute int 24h from low memory
 45030                                  LowInt24:
 45031                                  					; save the return address that is on
 45032                                  					; the stack
 45033 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 45034 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 45035                                  
 45036 00001105 CD24                    	int	24h			; crit error
 45037                                  					; turn on A20 it has been turned OFF
 45038                                  					; by int 28/23/24 handler.
 45039                                  
 45040 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45041                                  
 45042 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45043                                  
 45044                                  
 45045                                   
 45046                                  	; Execute int 28h from low memory
 45047                                  LowInt28:
 45048 0000110F CD28                    	int	28h			; idle int
 45049                                  					; turn on A20 it has been turned OFF
 45050                                  					; by int 28/23/24 handler.
 45051                                  
 45052 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45053                                  
 45054 00001114 CB                      	retf
 45055                                  
 45056                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45057                                  
 45058                                  ;-------------------------------------------------------------------------
 45059                                  ;
 45060                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45061                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45062                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45063                                  ; This is so because exepac'd programs rely on address wrap.
 45064                                  ;
 45065                                  ;------------------------------------------------------------------------- 
 45066                                  
 45067                                  disa20_xfer:
 45068 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 45069                                  
 45070                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45071                                  
 45072                                  	; DS:SI points to entry point
 45073                                  	; AX:DI points to initial stack
 45074                                  	; DX has PDB pointer
 45075                                  	; BX has initial AX value
 45076                                  
 45077 00001118 FA                      	cli
 45078 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45079                                  
 45080 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 45081 00001121 89FC                    	mov	SP,DI			; and SP
 45082 00001123 FB                      	sti
 45083                                  
 45084 00001124 1E                      	push	DS			; fake long call to entry
 45085 00001125 56                      	push	SI
 45086 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 45087 00001128 8EDA                    	mov	DS,DX
 45088 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 45089 0000112C CB                      	retf
 45090                                  
 45091                                  ;-------------------------------------------------------------------------
 45092                                  ;
 45093                                  ; M003:
 45094                                  ;
 45095                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45096                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45097                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45098                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45099                                  ; more info.	
 45100                                  ;
 45101                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45102                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45103                                  ; stack to avoid additional stack overhead for the user.
 45104                                  ;
 45105                                  ; -------------------------------------------------------------------------
 45106                                  
 45107                                  disa20_iret:
 45108 0000112D E82700                  	call	XMMDisableA20
 45109 00001130 FE0E[2103]              	dec	byte [INDOS]
 45110 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45111 00001138 8B26[8405]              	mov	SP,[USER_SP]
 45112 0000113C 89E5                    	mov	BP,SP
 45113                                  	;mov	[BP+user_env.user_AX],AL
 45114 0000113E 884600                  	mov	[bp],al
 45115 00001141 A1[F205]                	mov	AX,[NSP]
 45116 00001144 A3[8405]                	mov	[USER_SP],AX
 45117 00001147 A1[F005]                	mov	AX,[NSS]
 45118 0000114A A3[8605]                	mov	[USER_SS],AX
 45119                                  
 45120 0000114D 58                      	pop	AX			; restore user regs
 45121 0000114E 5B                      	pop	BX
 45122 0000114F 59                      	pop	CX
 45123 00001150 5A                      	pop	DX
 45124 00001151 5E                      	pop	SI
 45125 00001152 5F                      	pop	DI
 45126 00001153 5D                      	pop	BP
 45127 00001154 1F                      	pop	DS
 45128 00001155 07                      	pop	ES
 45129 00001156 CF                      	iret
 45130                                  
 45131                                  ;**************************************************************************
 45132                                  ;***	XMMDisableA20 - switch 20th address line			      
 45133                                  ;									      
 45134                                  ;	This routine is used to disable the 20th address line in 	      
 45135                                  ;	the system using XMM calls.					      
 45136                                  ;									      
 45137                                  ;	ENTRY	none		;ds = _DATA				      
 45138                                  ;	EXIT	A20 line disabled					      
 45139                                  ;	USES	NOTHING					      
 45140                                  ;									      
 45141                                  ;**************************************************************************
 45142                                  
 45143                                  XMMDisableA20:
 45144 00001157 53                      	push	bx
 45145 00001158 50                      	push	ax
 45146                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45147 00001159 B406                    	mov	ah,6
 45148 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45149 00001160 58                      	pop	ax
 45150 00001161 5B                      	pop	bx
 45151 00001162 C3                      	retn
 45152                                  
 45153                                  ; The entry point in the BIOS XMS driver is defined here.
 45154                                  
 45155                                  XMMcontrol:
 45156 00001163 00000000                	dd	0
 45157                                  
 45158                                  ;--------------------------------------------------------------------------
 45159                                  ;
 45160                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45161                                  ;									      
 45162                                  ;	This routine is used to query the A20 state in		 	      
 45163                                  ;	the system using XMM calls.					      
 45164                                  ;									      
 45165                                  ;	ENTRY: none		
 45166                                  ;
 45167                                  ;	EXIT : A20 will be ON
 45168                                  ;		
 45169                                  ; 	USES : NONE								      
 45170                                  ;									      
 45171                                  ;--------------------------------------------------------------------------
 45172                                  
 45173                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45174 00001167 8000                    	dw	00080h
 45175 00001169 0000                    	dw	00000h
 45176                                  
 45177                                  HighMemory:	; label dword
 45178 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 45179 0000116D FFFF                    	dw	0FFFFh
 45180                                  
 45181                                  EnsureA20ON:
 45182 0000116F 9C                      	pushf
 45183 00001170 1E                      	push    ds
 45184 00001171 06                      	push	es
 45185 00001172 51                      	push	cx
 45186 00001173 56                      	push	si
 45187 00001174 57                      	push	di
 45188                                  
 45189 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45190 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45191 0000117F B90400                  	mov	cx,4
 45192 00001182 FC                      	cld
 45193 00001183 F3A7                    	repe    cmpsw
 45194                                  
 45195 00001185 7407                    	jz	short EA20_OFF
 45196                                  EA20_RET:
 45197 00001187 5F                      	pop	di
 45198 00001188 5E                      	pop	si
 45199 00001189 59                      	pop	cx
 45200 0000118A 07                      	pop	es
 45201 0000118B 1F                      	pop	ds
 45202 0000118C 9D                      	popf
 45203 0000118D C3                      	retn
 45204                                  
 45205                                  EA20_OFF:
 45206                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45207                                  	; NOTE: ints are disabled at this point.
 45208                                  
 45209 0000118E 53                      	push	bx
 45210 0000118F 50                      	push	ax
 45211                                  
 45212 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 45213 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 45214 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 45215 0000119B 8CC8                    	mov	ax,cs
 45216 0000119D 8ED0                    	mov	ss,ax
 45217 0000119F BC[A007]                	mov	sp,AUXSTACK
 45218                                  					; ss:sp -> DOSDATA:AuxStack
 45219                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45220 000011A2 B405                    	mov	ah,5
 45221 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 45222 000011A9 09C0                    	or	ax,ax
 45223 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45224                                  
 45225 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 45226 000011B1 8ED0                    	mov	ss,ax
 45227 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 45228                                  
 45229 000011B8 58                      	pop	ax
 45230 000011B9 5B                      	pop	bx
 45231                                  
 45232 000011BA EBCB                    	jmp	short EA20_RET
 45233                                  
 45234                                  XMMerror:				; M006 - Start
 45235 000011BC B40F                    	mov	ah,0Fh			; get video mode
 45236 000011BE CD10                    	int	10h
 45237 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 45238 000011C2 7406                    	je	short XMMcont			; Y: do not change mode
 45239 000011C4 30E4                    	xor	ah,ah ; 0			; set video mode
 45240 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 45241 000011C8 CD10                    	int	10h
 45242                                  XMMcont:
 45243 000011CA B405                    	mov	ah,05h			; set display page
 45244 000011CC 30C0                    	xor	al,al			; page 0
 45245 000011CE CD10                    	int	10h
 45246                                  	
 45247 000011D0 BE[B812]                	mov	si,XMMERRMSG
 45248 000011D3 0E                      	push	cs
 45249 000011D4 1F                      	pop	ds
 45250 000011D5 FC                      	cld				; clear direction flag
 45251                                  XMMprnt:
 45252 000011D6 AC                      	lodsb
 45253 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45254 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 45255 000011DB B40E                    	mov	ah,0Eh
 45256 000011DD BB0700                  	mov	bx,7
 45257 000011E0 CD10                    	int	10h
 45258 000011E2 EBF2                    	jmp	short XMMprnt
 45259                                  
 45260                                  XMMStall:
 45261 000011E4 FB                      	sti				; allow the user to warm boot
 45262 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 45263                                  
 45264                                  ;---------------------------------------------------------------------------
 45265                                  
 45266                                  ; 27/04/2019 - Retro DOS v4.0
 45267                                  
 45268                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45269                                  ALTAH	equ 0Ch
 45270                                  
 45271                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45272                                  ;table was different for this. Segments will be patched in at init time.
 45273                                  
 45274                                  OldInstanceJunk:
 45275 000011E7 7000                    	dw	70h	;segment of BIOS
 45276 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 45277 000011EB 0600                    	dw	6	;5 instance items
 45278                                  
 45279                                  	;dw	0,offset dosdata:contpos, 2
 45280                                  	;dw	0,offset dosdata:bcon, 4
 45281                                  	;dw	0,offset dosdata:carpos,106h
 45282                                  	;dw	0,offset dosdata:charco, 1
 45283                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45284                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45285                                  
 45286 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 45287 000011F3 0000[3200]0400          	dw	0,BCON,4
 45288 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 45289 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 45290 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 45291 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45292                                  
 45293                                  ;---------------------------------------------------------------------------
 45294                                  
 45295                                  ; M021-
 45296                                  ;
 45297                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45298                                  ; 	takes control of the HMA. When running, this word is a reliable
 45299                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45300                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45301                                  
 45302                                  DosHasHMA:
 45303 00001211 00                      	db	0
 45304                                  FixExePatch:
 45305 00001212 0000                    	dw	0		; M012
 45306                                  RationalPatchPtr:
 45307 00001214 0000                    	dw	0		; M012
 45308                                  
 45309                                  ; End M021
 45310                                  
 45311                                  ;---------------------------------------------------------------------------
 45312                                  
 45313                                  ; M020 Begin
 45314                                  
 45315                                  RatBugCode:	; proc	far
 45316 00001216 51                      	push	cx
 45317 00001217 8B0E1000                	mov	cx,[10h]
 45318                                  rbc_loop:
 45319                                  	;loop	$
 45320 0000121B E2FE                    	loop	rbc_loop
 45321 0000121D 59                      	pop	cx
 45322 0000121E CB                      	retf
 45323                                  		
 45324                                  ; M020 End
 45325                                  
 45326                                  ;---------------------------------------------------------------------------
 45327                                  	
 45328                                  UmbSave1:
 45329                                  	;db	11 dup (?)	; M023
 45330 0000121F 00<rep Bh>              	times	11 db 0	
 45331                                  
 45332                                  ; DOSDATA:122Ah
 45333                                  
 45334                                  Mark3:	; label byte
 45335                                  
 45336                                  ;IF2
 45337                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45338                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45339                                  ;	ENDIF
 45340                                  ;ENDIF
 45341                                  
 45342                                  ;############################################################################
 45343                                  ;
 45344                                  ; ** HACK FOR DOS 4.0 REDIR **
 45345                                  ;
 45346                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45347                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45348                                  ; COUNTRY_CDPG if it can. 
 45349                                  ;
 45350                                  ; MARK3 SHOULD NOT BE > 122AH 
 45351                                  ;
 45352                                  ; As of 9/6/90, this area is FULL!
 45353                                  ;
 45354                                  ;############################################################################
 45355                                   
 45356                                  	;ORG	0122Ah
 45357                                  
 45358                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45359                                  
 45360                                  ; The following table is used for DOS 3.3
 45361                                  ;DOS country and code page information is defined here for DOS 3.3.
 45362                                  ;The initial value for ccDosCountry is 1 (USA).
 45363                                  ;The initial value for ccDosCodepage is 850.
 45364                                  
 45365                                  ; country and code page information
 45366                                  ; ---------------------------------------------------------------------------
 45367                                  COUNTRY_CDPG:	; label  byte
 45368 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45369 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45369 0000123B 53595300           
 45370                                  	;db   51 dup (?)
 45371 0000123F 00<rep 33h>             	times 51 db 0
 45372                                  ; ------------------------------------------------<MSKK01>-------------------
 45373                                  ;ifdef	DBCS
 45374                                  ;  ifdef JAPAN
 45375                                  ;	dw   932			; system code page id (JAPAN)
 45376                                  ;  endif
 45377                                  ;  ifdef TAIWAN
 45378                                  ;	dw   938			; system code page id (TAIWAN)
 45379                                  ;  endif
 45380                                  ;  ifdef KOREA
 45381                                  ;	dw   934			; system code page id (KOREA IBM)
 45382                                  ;  endif
 45383                                  ;else
 45384 00001272 B501                    	dw   437			; system code page id
 45385                                  ;endif
 45386                                  ; ------------------------------------------------<MSKK01>-------------------
 45387 00001274 0600                    	dw   6				; number of entries
 45388 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 45389 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45390 00001279 0000                    	dw   0				; segment of poiter
 45391 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45392 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45393 0000127E 0000                    	dw   0				; segment of poiter
 45394 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 45395 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45396 00001283 0000                    	dw   0				; segment of poiter
 45397 00001285 06                      	db   SetCollate	; 6		; collate type
 45398 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45399 00001288 0000                    	dw   0				; segment of poiter
 45400 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45401 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45402 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45403 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 45404 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45405                                  ; ------------------------------------------------<MSKK01>-------------------
 45406                                  ;ifdef	DBCS
 45407                                  ;	...... 
 45408                                  ;else
 45409 00001292 0100                    	dw   1				; USA country id
 45410 00001294 B501                    	dw   437			; USA system code page id
 45411 00001296 0000                    	dw   0 				; date format
 45412 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 45413 0000129D 2C00                    	db   ',',0			; thousand separator
 45414 0000129F 2E00                    	db   '.',0			; decimal separator
 45415 000012A1 2D00                    	db   '-',0			; date separator
 45416 000012A3 3A00                    	db   ':',0			; time separator
 45417 000012A5 00                      	db   0				; currency format flag
 45418 000012A6 02                      	db   2				; # of digits in currency
 45419 000012A7 00                      	db   0 				; time format
 45420 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45421 000012AA 0000                    	dw   0				; segment of entry point
 45422 000012AC 2C00                    	db   ',',0			; data list separator
 45423 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45423 000012B7 00                 
 45424                                  ;endif
 45425                                  ; ------------------------------------------------<MSKK01>-------------------
 45426                                  
 45427                                  ; 27/04/2019 - Retro DOS v4.0
 45428                                  
 45429                                  ;include msdos.cl2			; XMMERRMSG
 45430                                  
 45431                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45432                                  
 45433                                  XMMERRMSG:
 45434 000012B8 0D0A                    	db	0Dh,0Ah
 45435 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45435 000012C3 617265204572726F72-
 45435 000012CC 0D0A24             
 45436                                  
 45437                                  ;DOSDATA ends
 45438                                  
 45439                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45440                                  
 45441                                  ;============================================================================
 45442                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45443                                  ;============================================================================
 45444                                  ; 27/04/2019 - Retro DOS 4.0
 45445                                  
 45446                                  ;DOSDATA Segment
 45447                                  
 45448                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45449                                  
 45450                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45451                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45452                                  
 45453                                  ; first and second DOS patches
 45454                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45455                                  ;
 45456                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45457                                  ;	DVRDLP:
 45458                                  ;	DVWRTLP:
 45459                                  ;
 45460                                  ;
 45461                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45462                                  ;	lds	si,si+7 				  ; sf_devptr
 45463                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45464                                  
 45465 000012CF 36C536                  DOSP1_ID:	db	036h,0C5h,036h
 45466 000012D2 3605C57407E8            DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45467                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45468                                  
 45469 000012D8 9090                    		db	90h, 90h
 45470                                  
 45471 000012DA 36C536                  DOSP12_ID:	db	036h,0C5h,036h
 45472 000012DD 3605C57407E8            DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45473                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45474                                  
 45475                                  ; DOSDATA:12E3h
 45476                                  
 45477                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45478                                  ;
 45479                                  ; Code in disk.asm, 1 location
 45480                                  ;	GETBUF:
 45481                                  ;
 45482                                  ; 051h	push	cx	<- begin special int28 mode
 45483                                  ;	push	es
 45484                                  ;	push	di
 45485                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45486                                  ;	call	????	; $STD_CON_STRING_INPUT
 45487                                  ;	pop	di
 45488                                  ;	pop	es
 45489                                  ; 059h	pop	cx	<- end special int28 mode
 45490                                  
 45491 000012E3 510657BA                DOSP3_ID:	db	051h,006h,057h,0BAh
 45492 000012E7 2902E8                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45493                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45494 000012EA 9AE35F07                		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45495 000012EE 59                      DOSP4_ID:	db	059h			; pop cx
 45496                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45497                                  	
 45498                                  ; DOSDATA:12EFh
 45499                                  
 45500                                  ; Fifth DOS patch - System call 40h (Write) to console
 45501                                  ;
 45502                                  ; Code in disk.asm, 1 location
 45503                                  ;
 45504                                  ;		push	cx
 45505                                  ;      WRCONLP: lodsb
 45506                                  ;		cmp	al,1Ah
 45507                                  ;		jz	????
 45508                                  ;		call	????	<- "simulate" int28 event
 45509                                  ;		loop	WRCONLP
 45510                                  ;      CONEOF:	pop	ax
 45511                                  
 45512 000012EF 51                      DOSP5_ID:	db	051h			; push cx
 45513 000012F0 AC3C1A7405              		db	0ACh,03Ch,01Ah,074h,005h
 45514 000012F5 E8                      		db	0E8h			; call
 45515                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45516                                  
 45517                                  ; DOSDATA:12F6h
 45518                                  
 45519                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45520                                  ;
 45521                                  ; Code in disp.asm, 1 location
 45522                                  ;
 45523                                  ;
 45524                                  ;	mov [SaveDS],ds
 45525                                  ;	mov [SaveBX],bx
 45526                                  ;	mov bx,cs
 45527                                  ;	mov ds,bx
 45528                                  ;	inc [indos]
 45529                                  ;	xor ax,ax
 45530                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45531                                  
 45532 000012F6 2E8C1E                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45533 000012F9 7E05                    DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45534 000012FB 2E891E                  		db	02Eh,089h,01Eh
 45535 000012FE 7C05                    DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45536 00001300 8CCB                    		db	08Ch,0CBh		; mov bx,cs
 45537 00001302 8EDB                    		db	08Eh,0DBh		; mov ds,bx
 45538 00001304 FE06                    		db	0FEh,006h
 45539 00001306 CF02                    DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45540 00001308 33C0                    		db	033h,0C0h		; xor ax,ax
 45541                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45542                                  
 45543                                  ; DOSDATA:130Ah
 45544                                  
 45545                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45546                                  ;
 45547                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45548                                  ;
 45549                                  ;
 45550                                  ;
 45551                                  ;	push	ax
 45552                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45553                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45554                                  ;	pop	ax
 45555                                  ;	jz	????
 45556                                  
 45557 0000130A 50                      DOSP8_ID:	db	050h			; push ax
 45558 0000130B 36A1                    		db	036h,0A1h
 45559 0000130D EA02                    DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45560 0000130F 263B45                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45561                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45562 00001312 2F58                    		db	02Fh,058h		; pop  ax
 45563                                  
 45564                                  ; DOSDATA:1314h
 45565                                  
 45566                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45567                                  ;
 45568                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45569                                  ;   a yeild when a character is not ready to be read.
 45570                                  ;
 45571                                  ; Code in disk.asm, 3 locations
 45572                                  ;
 45573                                  ;   DVRDRAW:
 45574                                  ;	    PUSH    ES
 45575                                  ;	    POP     DS
 45576                                  ;   ReadRawRetry:				<- Patch 10
 45577                                  ;	    MOV     BX,DI
 45578                                  ;	    XOR     AX,AX			<- Reenter #2
 45579                                  ;	    MOV     DX,AX
 45580                                  ;	    call    SETREAD
 45581                                  ;	    PUSH    DS				<- Reenter #1
 45582                                  ;	    LDS     SI,[THISSFT]
 45583                                  ;	    call    DEVIOCALL
 45584                                  ;	    MOV     DX,DI
 45585                                  ;	    MOV     AH,86H
 45586                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45587                                  ;	    TEST    DI,STERR
 45588                                  ;	    JZ	    CRDROK
 45589                                  ;	    call    CHARHARD
 45590                                  ;	    MOV     DI,DX
 45591                                  ;	    OR	    AL,AL
 45592                                  ;	    JZ	    CRDROK
 45593                                  ;	    CMP     AL,3
 45594                                  ;	    JZ	    CRDFERR
 45595                                  ;	    POP     DS
 45596                                  ;	    JMP     ReadRawRetry
 45597                                  ;
 45598                                  ;   CRDFERR:
 45599                                  ;	    POP     DI				<- Patch 11
 45600                                  ;   DEVIOFERR:
 45601                                  ;	    LES     DI,[THISSFT]
 45602                                  ;	    jmp     SET_ACC_ERR_DS
 45603                                  ;
 45604                                  ;   CRDROK:
 45605                                  ;	    POP     DI				<- Patch 12
 45606                                  ;	    MOV     DI,DX
 45607                                  ;	    ADD     DI,[CALLSCNT]
 45608                                  ;	    JMP     SHORT ENDRDDEVJ3
 45609                                  
 45610 00001314 061F                    DOSP10_ID:		db	006H,01FH
 45611                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45612 00001316 8BDF                    DOSP10_LOC:		db	08BH,0DFH
 45613                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45614 00001318 33C08BD0E8              			db	033H,0C0H,08BH,0D0H,0E8H
 45615                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45616 0000131D DF0E                    			db	0DFH,00EH
 45617                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45618 0000131F 1E36C5363605E8AF0E      			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45619 00001328 8BD7B486368B3E          			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45620                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45621 0000132F 0903                    			db	009H,003H
 45622 00001331 F7C700807419E84717      			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45623 0000133A 8BFA0AC074103C0374-     			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45623 00001343 03                 
 45624 00001344 1FEBCF                  			db	01FH,0EBH,0CFH
 45625                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45626 00001347 5F                      			db	05FH
 45627                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45628 00001348 36C43E3605E9A104        			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45629                                  
 45630                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45631 00001350 5F8BFA                  			db	05FH,08BH,0FAH
 45632                                  ; DOSDATA:1353h
 45633                                  
 45634                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45635                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45636                                  ;
 45637                                  ;	    Sets focus to current VM so user can see fatal message.
 45638                                  ;
 45639                                  ;
 45640                                  ;	l0: lodsb		<- Setfocus here
 45641                                  ;	    cmp al, '$'
 45642                                  ;	    je l1
 45643                                  ;	    mov bl, 7
 45644                                  ;	    mov ah, 0Eh
 45645                                  ;	    int 10h
 45646                                  ;	    jmp l0
 45647                                  ;	l1: jmp $
 45648                                  
 45649 00001353 AC                      DOSP13_ID:	db	0ACh			; l0: lodsb
 45650 00001354 3C24                    		db	03Ch,024h		;     cmp al, '$'
 45651 00001356 7408                    		db	074h,008h		;     je l1
 45652 00001358 B307                    		db	0B3h,007h		;     mov bl, 7
 45653 0000135A B40E                    		db	0B4h,00Eh		;     mov ah, 0Eh
 45654 0000135C CD10                    		db	0CDh,010h		;     int 10h
 45655 0000135E EBF3                    		db	0EBh,0F3h		;     jmp l0
 45656 00001360 EBFE                    		db	0EBh,0FEh		; l1: jmp $
 45657                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45658                                  
 45659                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45660                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45661                                  
 45662                                  ; 06/12/2022
 45663                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45664                                  
 45665                                  ; DOSDATA ends
 45666                                  
 45667                                  ; 05/11/2022
 45668                                  ;----------------------------------------------------------------------------
 45669                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45670                                  ;----------------------------------------------------------------------------
 45671                                    
 45672                                  %if 0
 45673                                  
 45674                                  ;============================================================================
 45675                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45676                                  ;============================================================================
 45677                                  ; 27/04/2019 - Retro DOS 4.0
 45678                                  
 45679                                  ;mpatch.asm -- holds data patch location for callouts 
 45680                                  ; -- allocate cluster in rom.asm
 45681                                  ;
 45682                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45683                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45684                                  ; cluster allocation, however it can be expanded to be used by other
 45685                                  ; patches. This is important since we have an easy-access pointer to
 45686                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45687                                  ; only patch out a far call/retf, so any space after that could be
 45688                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45689                                  ; to call out here.
 45690                                  ;
 45691                                  ; Currently, we allocate only the minimum space required for the 6
 45692                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45693                                  ; to reserve space here if your new data will be position dependent
 45694                                  ; and would prohibit growing of this table.
 45695                                  ;       
 45696                                  ;history	-	created 8-7-92 by scottq
 45697                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45698                                  ;
 45699                                  ;Exported Functions
 45700                                  ;==================
 45701                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45702                                  
 45703                                  ; DosData Segment
 45704                                  
 45705                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45706                                  
 45707                                  ; ---------------------------------------------------------------------------
 45708                                  
 45709                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45710                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45711                                  ; greater). Added to this file because it needed to be somewhere and is
 45712                                  ; 'patch' related.
 45713                                  
 45714                                  Rational386PatchPtr:
 45715                                  	dw	0	; points to patch routine or RET instr.
 45716                                  ; ---------------------------------------------------------------------------
 45717                                  
 45718                                  MagicPatch:
 45719                                  ;MagicPatch proc far
 45720                                          retf            ;default is to just return to allocate
 45721                                          nop             ;however, this code will be patched
 45722                                          nop             ;by magicdrv.sys to
 45723                                          nop             ; call far ?:?     
 45724                                          nop             ; retf or perhaps just jmp far
 45725                                          nop             ;retf/nop take one byte, so we need six instructions
 45726                                                          ;for 6 byte patch
 45727                                  ;MagicPatch endp
 45728                                  
 45729                                  ; ---------------------------------------------------------------------------
 45730                                  
 45731                                  ;DosData Ends
 45732                                  
 45733                                  ; DOSDATA:136Ah
 45734                                  
 45735                                  ;----------------------------------------------------------------------------
 45736                                  
 45737                                  ;DOSDATALAST SEGMENT
 45738                                  
 45739                                  ; 29/04/2019 - Retro DOS v4.0
 45740                                  
 45741                                  ;----------------------------------------------------------------------------
 45742                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45743                                  
 45744                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45745                                  
 45746                                  ;align 16
 45747                                  
 45748                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45749                                  
 45750                                  ;----------------------------------------------------------------------------
 45751                                  
 45752                                  %endif	; 05/11/2022
 45753                                  
 45754                                  ; 05/12/2022
 45755                                  ;MSDAT001E:	; label byte
 45756                                  
 45757                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45758                                  DOSDATAEND equ $
 45759                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45760                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45761                                  
 45762                                  ;DOSDATALAST ENDS
 45763                                  
 45764                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45765                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45766                                  ;============================================================================
 45767                                  ;	END
 45768                                  ;============================================================================
 45769                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45770                                  ; -----------------------------
 45771                                  ; MAY 2019, ISTANBUL - TURKIYE.
